
Det_Intelligente_Hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  000010dc  00001170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000204  00800224  00800224  00001194  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c8  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014b23  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031f3  00000000  00000000  000164ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005266  00000000  00000000  000196e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002400  00000000  00000000  0001e948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004764  00000000  00000000  00020d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000111fe  00000000  00000000  000254ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  000366aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fb c0       	rjmp	.+502    	; 0x1f8 <__ctors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	0d c1       	rjmp	.+538    	; 0x254 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	d3 c1       	rjmp	.+934    	; 0x3ec <__vector_17>
      46:	00 00       	nop
      48:	05 c1       	rjmp	.+522    	; 0x254 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c2       	rjmp	.+1274   	; 0x54c <__vector_20>
      52:	00 00       	nop
      54:	ff c0       	rjmp	.+510    	; 0x254 <__bad_interrupt>
      56:	00 00       	nop
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fe c5       	rjmp	.+3068   	; 0xc5a <__vector_23>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c5       	rjmp	.+2656   	; 0xac6 <__vector_25>
      66:	00 00       	nop
      68:	64 c5       	rjmp	.+2760   	; 0xb32 <__vector_26>
      6a:	00 00       	nop
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c1       	rjmp	.+962    	; 0x444 <__vector_32>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c2       	rjmp	.+1300   	; 0x5a2 <__vector_35>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop
      98:	dd c0       	rjmp	.+442    	; 0x254 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4d c3       	rjmp	.+1690   	; 0x738 <__vector_39>
      9e:	00 00       	nop
      a0:	d9 c0       	rjmp	.+434    	; 0x254 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f9 c1       	rjmp	.+1010   	; 0x49c <__vector_42>
      aa:	00 00       	nop
      ac:	d3 c0       	rjmp	.+422    	; 0x254 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c0       	rjmp	.+414    	; 0x254 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c0       	rjmp	.+410    	; 0x254 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1b c2       	rjmp	.+1078   	; 0x4f4 <__vector_47>
      be:	00 00       	nop
      c0:	c9 c0       	rjmp	.+402    	; 0x254 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c7 c0       	rjmp	.+398    	; 0x254 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c5 c0       	rjmp	.+394    	; 0x254 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c3 c0       	rjmp	.+390    	; 0x254 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c1 c0       	rjmp	.+386    	; 0x254 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bf c0       	rjmp	.+382    	; 0x254 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bd c0       	rjmp	.+378    	; 0x254 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bb c0       	rjmp	.+374    	; 0x254 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b9 c0       	rjmp	.+370    	; 0x254 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f3 06       	cpc	r15, r19
      e6:	f6 06       	cpc	r15, r22
      e8:	e5 06       	cpc	r14, r21
      ea:	e9 06       	cpc	r14, r25
      ec:	ef 06       	cpc	r14, r31
      ee:	2d 07       	cpc	r18, r29
      f0:	fa 06       	cpc	r15, r26
      f2:	fe 06       	cpc	r15, r30
      f4:	04 07       	cpc	r16, r20
      f6:	08 07       	cpc	r16, r24
      f8:	0c 07       	cpc	r16, r28
      fa:	12 07       	cpc	r17, r18
      fc:	16 07       	cpc	r17, r22
      fe:	1a 07       	cpc	r17, r26
     100:	2d 07       	cpc	r18, r29
     102:	20 07       	cpc	r18, r16
     104:	24 07       	cpc	r18, r20
     106:	28 07       	cpc	r18, r24

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <__ctors_start>:
     1f4:	60 05       	cpc	r22, r0
     1f6:	cb 05       	cpc	r28, r11

000001f8 <__ctors_end>:
     1f8:	11 24       	eor	r1, r1
     1fa:	1f be       	out	0x3f, r1	; 63
     1fc:	cf ef       	ldi	r28, 0xFF	; 255
     1fe:	d1 e2       	ldi	r29, 0x21	; 33
     200:	de bf       	out	0x3e, r29	; 62
     202:	cd bf       	out	0x3d, r28	; 61
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0c bf       	out	0x3c, r16	; 60

00000208 <__do_copy_data>:
     208:	12 e0       	ldi	r17, 0x02	; 2
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	ec ed       	ldi	r30, 0xDC	; 220
     210:	f0 e1       	ldi	r31, 0x10	; 16
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	0b bf       	out	0x3b, r16	; 59
     216:	02 c0       	rjmp	.+4      	; 0x21c <__do_copy_data+0x14>
     218:	07 90       	elpm	r0, Z+
     21a:	0d 92       	st	X+, r0
     21c:	a4 32       	cpi	r26, 0x24	; 36
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <__do_copy_data+0x10>

00000222 <__do_clear_bss>:
     222:	24 e0       	ldi	r18, 0x04	; 4
     224:	a4 e2       	ldi	r26, 0x24	; 36
     226:	b2 e0       	ldi	r27, 0x02	; 2
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	a8 32       	cpi	r26, 0x28	; 40
     22e:	b2 07       	cpc	r27, r18
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>

00000232 <__do_global_ctors>:
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	cc ef       	ldi	r28, 0xFC	; 252
     236:	d0 e0       	ldi	r29, 0x00	; 0
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	05 c0       	rjmp	.+10     	; 0x246 <__do_global_ctors+0x14>
     23c:	21 97       	sbiw	r28, 0x01	; 1
     23e:	01 09       	sbc	r16, r1
     240:	80 2f       	mov	r24, r16
     242:	fe 01       	movw	r30, r28
     244:	41 d7       	rcall	.+3714   	; 0x10c8 <__tablejump2__>
     246:	ca 3f       	cpi	r28, 0xFA	; 250
     248:	d1 07       	cpc	r29, r17
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	08 07       	cpc	r16, r24
     24e:	b1 f7       	brne	.-20     	; 0x23c <__do_global_ctors+0xa>
     250:	d0 d4       	rcall	.+2464   	; 0xbf2 <main>
     252:	42 c7       	rjmp	.+3716   	; 0x10d8 <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <setup>:
     256:	08 95       	ret

00000258 <loop>:
{

}

void loop() 
{
     258:	08 95       	ret

0000025a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	08 95       	ret

00000260 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	7b 01       	movw	r14, r22
     272:	6a 01       	movw	r12, r20
  if( Channel[timer] < 0 )
     274:	08 2f       	mov	r16, r24
     276:	10 e0       	ldi	r17, 0x00	; 0
     278:	e8 01       	movw	r28, r16
     27a:	cb 5d       	subi	r28, 0xDB	; 219
     27c:	dd 4f       	sbci	r29, 0xFD	; 253
     27e:	88 81       	ld	r24, Y
     280:	87 ff       	sbrs	r24, 7
     282:	04 c0       	rjmp	.+8      	; 0x28c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     284:	fb 01       	movw	r30, r22
     286:	11 82       	std	Z+1, r1	; 0x01
     288:	10 82       	st	Z, r1
     28a:	24 c0       	rjmp	.+72     	; 0x2d4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
     28c:	8c e0       	ldi	r24, 0x0C	; 12
     28e:	80 9f       	mul	r24, r16
     290:	90 01       	movw	r18, r0
     292:	81 9f       	mul	r24, r17
     294:	30 0d       	add	r19, r0
     296:	11 24       	eor	r1, r1
     298:	88 81       	ld	r24, Y
     29a:	a9 01       	movw	r20, r18
     29c:	48 0f       	add	r20, r24
     29e:	51 1d       	adc	r21, r1
     2a0:	87 fd       	sbrc	r24, 7
     2a2:	5a 95       	dec	r21
     2a4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	48 17       	cp	r20, r24
     2ac:	59 07       	cpc	r21, r25
     2ae:	94 f4       	brge	.+36     	; 0x2d4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
     2b0:	88 81       	ld	r24, Y
     2b2:	a9 01       	movw	r20, r18
     2b4:	48 0f       	add	r20, r24
     2b6:	51 1d       	adc	r21, r1
     2b8:	87 fd       	sbrc	r24, 7
     2ba:	5a 95       	dec	r21
     2bc:	ca 01       	movw	r24, r20
     2be:	fa 01       	movw	r30, r20
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	8e 0f       	add	r24, r30
     2c6:	9f 1f       	adc	r25, r31
     2c8:	fc 01       	movw	r30, r24
     2ca:	e7 5d       	subi	r30, 0xD7	; 215
     2cc:	fd 4f       	sbci	r31, 0xFD	; 253
     2ce:	80 81       	ld	r24, Z
     2d0:	86 fd       	sbrc	r24, 6
     2d2:	19 c0       	rjmp	.+50     	; 0x306 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
     2d4:	88 81       	ld	r24, Y
     2d6:	8f 5f       	subi	r24, 0xFF	; 255
     2d8:	88 83       	st	Y, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     2da:	8c e0       	ldi	r24, 0x0C	; 12
     2dc:	80 9f       	mul	r24, r16
     2de:	90 01       	movw	r18, r0
     2e0:	81 9f       	mul	r24, r17
     2e2:	30 0d       	add	r19, r0
     2e4:	11 24       	eor	r1, r1
     2e6:	88 81       	ld	r24, Y
     2e8:	a9 01       	movw	r20, r18
     2ea:	48 0f       	add	r20, r24
     2ec:	51 1d       	adc	r21, r1
     2ee:	87 fd       	sbrc	r24, 7
     2f0:	5a 95       	dec	r21
     2f2:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	48 17       	cp	r20, r24
     2fa:	59 07       	cpc	r21, r25
     2fc:	b4 f4       	brge	.+44     	; 0x32a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
     2fe:	88 81       	ld	r24, Y
     300:	8c 30       	cpi	r24, 0x0C	; 12
     302:	3c f1       	brlt	.+78     	; 0x352 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf2>
     304:	12 c0       	rjmp	.+36     	; 0x32a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
     306:	88 81       	ld	r24, Y
     308:	28 0f       	add	r18, r24
     30a:	31 1d       	adc	r19, r1
     30c:	87 fd       	sbrc	r24, 7
     30e:	3a 95       	dec	r19
     310:	f9 01       	movw	r30, r18
     312:	ee 0f       	add	r30, r30
     314:	ff 1f       	adc	r31, r31
     316:	2e 0f       	add	r18, r30
     318:	3f 1f       	adc	r19, r31
     31a:	f9 01       	movw	r30, r18
     31c:	e7 5d       	subi	r30, 0xD7	; 215
     31e:	fd 4f       	sbci	r31, 0xFD	; 253
     320:	80 81       	ld	r24, Z
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	8f 73       	andi	r24, 0x3F	; 63
     326:	9a d5       	rcall	.+2868   	; 0xe5c <digitalWrite>
     328:	d5 cf       	rjmp	.-86     	; 0x2d4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     32a:	f7 01       	movw	r30, r14
     32c:	80 81       	ld	r24, Z
     32e:	91 81       	ldd	r25, Z+1	; 0x01
     330:	04 96       	adiw	r24, 0x04	; 4
     332:	80 34       	cpi	r24, 0x40	; 64
     334:	9c 49       	sbci	r25, 0x9C	; 156
     336:	18 f4       	brcc	.+6      	; 0x33e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xde>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     338:	80 e4       	ldi	r24, 0x40	; 64
     33a:	9c e9       	ldi	r25, 0x9C	; 156
     33c:	04 c0       	rjmp	.+8      	; 0x346 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe6>
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     33e:	f7 01       	movw	r30, r14
     340:	80 81       	ld	r24, Z
     342:	91 81       	ldd	r25, Z+1	; 0x01
     344:	04 96       	adiw	r24, 0x04	; 4
     346:	f6 01       	movw	r30, r12
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	88 83       	st	Y, r24
  }
}
     350:	44 c0       	rjmp	.+136    	; 0x3da <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     352:	f7 01       	movw	r30, r14
     354:	40 81       	ld	r20, Z
     356:	51 81       	ldd	r21, Z+1	; 0x01
     358:	88 81       	ld	r24, Y
     35a:	b9 01       	movw	r22, r18
     35c:	68 0f       	add	r22, r24
     35e:	71 1d       	adc	r23, r1
     360:	87 fd       	sbrc	r24, 7
     362:	7a 95       	dec	r23
     364:	cb 01       	movw	r24, r22
     366:	fb 01       	movw	r30, r22
     368:	ee 0f       	add	r30, r30
     36a:	ff 1f       	adc	r31, r31
     36c:	8e 0f       	add	r24, r30
     36e:	9f 1f       	adc	r25, r31
     370:	fc 01       	movw	r30, r24
     372:	e7 5d       	subi	r30, 0xD7	; 215
     374:	fd 4f       	sbci	r31, 0xFD	; 253
     376:	81 81       	ldd	r24, Z+1	; 0x01
     378:	92 81       	ldd	r25, Z+2	; 0x02
     37a:	84 0f       	add	r24, r20
     37c:	95 1f       	adc	r25, r21
     37e:	f6 01       	movw	r30, r12
     380:	91 83       	std	Z+1, r25	; 0x01
     382:	80 83       	st	Z, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     384:	88 81       	ld	r24, Y
     386:	a9 01       	movw	r20, r18
     388:	48 0f       	add	r20, r24
     38a:	51 1d       	adc	r21, r1
     38c:	87 fd       	sbrc	r24, 7
     38e:	5a 95       	dec	r21
     390:	ca 01       	movw	r24, r20
     392:	fa 01       	movw	r30, r20
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	8e 0f       	add	r24, r30
     39a:	9f 1f       	adc	r25, r31
     39c:	fc 01       	movw	r30, r24
     39e:	e7 5d       	subi	r30, 0xD7	; 215
     3a0:	fd 4f       	sbci	r31, 0xFD	; 253
     3a2:	80 81       	ld	r24, Z
     3a4:	86 ff       	sbrs	r24, 6
     3a6:	19 c0       	rjmp	.+50     	; 0x3da <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
     3a8:	88 81       	ld	r24, Y
     3aa:	28 0f       	add	r18, r24
     3ac:	31 1d       	adc	r19, r1
     3ae:	87 fd       	sbrc	r24, 7
     3b0:	3a 95       	dec	r19
     3b2:	f9 01       	movw	r30, r18
     3b4:	ee 0f       	add	r30, r30
     3b6:	ff 1f       	adc	r31, r31
     3b8:	2e 0f       	add	r18, r30
     3ba:	3f 1f       	adc	r19, r31
     3bc:	f9 01       	movw	r30, r18
     3be:	e7 5d       	subi	r30, 0xD7	; 215
     3c0:	fd 4f       	sbci	r31, 0xFD	; 253
     3c2:	80 81       	ld	r24, Z
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	8f 73       	andi	r24, 0x3F	; 63
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	df 90       	pop	r13

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
     3d6:	cf 90       	pop	r12
     3d8:	41 c5       	rjmp	.+2690   	; 0xe5c <digitalWrite>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	08 95       	ret

000003ec <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
     3ec:	1f 92       	push	r1
     3ee:	0f 92       	push	r0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	0f 92       	push	r0
     3f4:	11 24       	eor	r1, r1
     3f6:	0b b6       	in	r0, 0x3b	; 59
     3f8:	0f 92       	push	r0
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
     412:	48 e8       	ldi	r20, 0x88	; 136
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	64 e8       	ldi	r22, 0x84	; 132
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	21 df       	rcall	.-446    	; 0x260 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	5f 91       	pop	r21
     430:	4f 91       	pop	r20
     432:	3f 91       	pop	r19
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0b be       	out	0x3b, r0	; 59
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect)
{
     444:	1f 92       	push	r1
     446:	0f 92       	push	r0
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	0f 92       	push	r0
     44c:	11 24       	eor	r1, r1
     44e:	0b b6       	in	r0, 0x3b	; 59
     450:	0f 92       	push	r0
     452:	2f 93       	push	r18
     454:	3f 93       	push	r19
     456:	4f 93       	push	r20
     458:	5f 93       	push	r21
     45a:	6f 93       	push	r22
     45c:	7f 93       	push	r23
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
     466:	ef 93       	push	r30
     468:	ff 93       	push	r31
  handle_interrupts(_timer3, &TCNT3, &OCR3A);
     46a:	48 e9       	ldi	r20, 0x98	; 152
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	64 e9       	ldi	r22, 0x94	; 148
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	f5 de       	rcall	.-534    	; 0x260 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     476:	ff 91       	pop	r31
     478:	ef 91       	pop	r30
     47a:	bf 91       	pop	r27
     47c:	af 91       	pop	r26
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	7f 91       	pop	r23
     484:	6f 91       	pop	r22
     486:	5f 91       	pop	r21
     488:	4f 91       	pop	r20
     48a:	3f 91       	pop	r19
     48c:	2f 91       	pop	r18
     48e:	0f 90       	pop	r0
     490:	0b be       	out	0x3b, r0	; 59
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	0b b6       	in	r0, 0x3b	; 59
     4a8:	0f 92       	push	r0
     4aa:	2f 93       	push	r18
     4ac:	3f 93       	push	r19
     4ae:	4f 93       	push	r20
     4b0:	5f 93       	push	r21
     4b2:	6f 93       	push	r22
     4b4:	7f 93       	push	r23
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	ef 93       	push	r30
     4c0:	ff 93       	push	r31
  handle_interrupts(_timer4, &TCNT4, &OCR4A);
     4c2:	48 ea       	ldi	r20, 0xA8	; 168
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	64 ea       	ldi	r22, 0xA4	; 164
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	c9 de       	rcall	.-622    	; 0x260 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	7f 91       	pop	r23
     4dc:	6f 91       	pop	r22
     4de:	5f 91       	pop	r21
     4e0:	4f 91       	pop	r20
     4e2:	3f 91       	pop	r19
     4e4:	2f 91       	pop	r18
     4e6:	0f 90       	pop	r0
     4e8:	0b be       	out	0x3b, r0	; 59
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	0f 90       	pop	r0
     4f0:	1f 90       	pop	r1
     4f2:	18 95       	reti

000004f4 <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect)
{
     4f4:	1f 92       	push	r1
     4f6:	0f 92       	push	r0
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	0f 92       	push	r0
     4fc:	11 24       	eor	r1, r1
     4fe:	0b b6       	in	r0, 0x3b	; 59
     500:	0f 92       	push	r0
     502:	2f 93       	push	r18
     504:	3f 93       	push	r19
     506:	4f 93       	push	r20
     508:	5f 93       	push	r21
     50a:	6f 93       	push	r22
     50c:	7f 93       	push	r23
     50e:	8f 93       	push	r24
     510:	9f 93       	push	r25
     512:	af 93       	push	r26
     514:	bf 93       	push	r27
     516:	ef 93       	push	r30
     518:	ff 93       	push	r31
  handle_interrupts(_timer5, &TCNT5, &OCR5A);
     51a:	48 e2       	ldi	r20, 0x28	; 40
     51c:	51 e0       	ldi	r21, 0x01	; 1
     51e:	64 e2       	ldi	r22, 0x24	; 36
     520:	71 e0       	ldi	r23, 0x01	; 1
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	9d de       	rcall	.-710    	; 0x260 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
     526:	ff 91       	pop	r31
     528:	ef 91       	pop	r30
     52a:	bf 91       	pop	r27
     52c:	af 91       	pop	r26
     52e:	9f 91       	pop	r25
     530:	8f 91       	pop	r24
     532:	7f 91       	pop	r23
     534:	6f 91       	pop	r22
     536:	5f 91       	pop	r21
     538:	4f 91       	pop	r20
     53a:	3f 91       	pop	r19
     53c:	2f 91       	pop	r18
     53e:	0f 90       	pop	r0
     540:	0b be       	out	0x3b, r0	; 59
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	0b b6       	in	r0, 0x3b	; 59
     558:	0f 92       	push	r0
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	5f 93       	push	r21
     562:	6f 93       	push	r22
     564:	7f 93       	push	r23
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	af 93       	push	r26
     56c:	bf 93       	push	r27
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
  Timer1.isrCallback();
     572:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <_ZN8TimerOne11isrCallbackE>
     576:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <_ZN8TimerOne11isrCallbackE+0x1>
     57a:	19 95       	eicall
}
     57c:	ff 91       	pop	r31
     57e:	ef 91       	pop	r30
     580:	bf 91       	pop	r27
     582:	af 91       	pop	r26
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	7f 91       	pop	r23
     58a:	6f 91       	pop	r22
     58c:	5f 91       	pop	r21
     58e:	4f 91       	pop	r20
     590:	3f 91       	pop	r19
     592:	2f 91       	pop	r18
     594:	0f 90       	pop	r0
     596:	0b be       	out	0x3b, r0	; 59
     598:	0f 90       	pop	r0
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	0f 90       	pop	r0
     59e:	1f 90       	pop	r1
     5a0:	18 95       	reti

000005a2 <__vector_35>:
void (*TimerThree::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER3_OVF_vect)
{
     5a2:	1f 92       	push	r1
     5a4:	0f 92       	push	r0
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	0b b6       	in	r0, 0x3b	; 59
     5ae:	0f 92       	push	r0
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	6f 93       	push	r22
     5ba:	7f 93       	push	r23
     5bc:	8f 93       	push	r24
     5be:	9f 93       	push	r25
     5c0:	af 93       	push	r26
     5c2:	bf 93       	push	r27
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
  Timer3.isrCallback();
     5c8:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <_ZN10TimerThree11isrCallbackE>
     5cc:	f0 91 bc 02 	lds	r31, 0x02BC	; 0x8002bc <_ZN10TimerThree11isrCallbackE+0x1>
     5d0:	19 95       	eicall
}
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	7f 91       	pop	r23
     5e0:	6f 91       	pop	r22
     5e2:	5f 91       	pop	r21
     5e4:	4f 91       	pop	r20
     5e6:	3f 91       	pop	r19
     5e8:	2f 91       	pop	r18
     5ea:	0f 90       	pop	r0
     5ec:	0b be       	out	0x3b, r0	; 59
     5ee:	0f 90       	pop	r0
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	0f 90       	pop	r0
     5f4:	1f 90       	pop	r1
     5f6:	18 95       	reti

000005f8 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
     5f8:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <twi_state>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_sendStop>
     602:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <twi_inRepStart>
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	84 e1       	ldi	r24, 0x14	; 20
     60a:	28 d4       	rcall	.+2128   	; 0xe5c <digitalWrite>
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	85 e1       	ldi	r24, 0x15	; 21
     610:	25 d4       	rcall	.+2122   	; 0xe5c <digitalWrite>
     612:	e9 eb       	ldi	r30, 0xB9	; 185
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	8e 7f       	andi	r24, 0xFE	; 254
     61a:	80 83       	st	Z, r24
     61c:	80 81       	ld	r24, Z
     61e:	8d 7f       	andi	r24, 0xFD	; 253
     620:	80 83       	st	Z, r24
     622:	88 e4       	ldi	r24, 0x48	; 72
     624:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     628:	85 e4       	ldi	r24, 0x45	; 69
     62a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     62e:	08 95       	ret

00000630 <twi_disable>:
     630:	ec eb       	ldi	r30, 0xBC	; 188
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	8a 7b       	andi	r24, 0xBA	; 186
     638:	80 83       	st	Z, r24
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	84 e1       	ldi	r24, 0x14	; 20
     63e:	0e d4       	rcall	.+2076   	; 0xe5c <digitalWrite>
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	85 e1       	ldi	r24, 0x15	; 21
     644:	0b c4       	rjmp	.+2070   	; 0xe5c <digitalWrite>

00000646 <twi_transmit>:
     646:	40 91 df 02 	lds	r20, 0x02DF	; 0x8002df <twi_txBufferLength>
     64a:	26 2f       	mov	r18, r22
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	24 0f       	add	r18, r20
     650:	31 1d       	adc	r19, r1
     652:	21 32       	cpi	r18, 0x21	; 33
     654:	31 05       	cpc	r19, r1
     656:	dc f4       	brge	.+54     	; 0x68e <twi_transmit+0x48>
     658:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <twi_state>
     65c:	24 30       	cpi	r18, 0x04	; 4
     65e:	c9 f4       	brne	.+50     	; 0x692 <twi_transmit+0x4c>
     660:	fc 01       	movw	r30, r24
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	86 17       	cp	r24, r22
     668:	58 f4       	brcc	.+22     	; 0x680 <twi_transmit+0x3a>
     66a:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <twi_txBufferLength>
     66e:	21 91       	ld	r18, Z+
     670:	dc 01       	movw	r26, r24
     672:	af 51       	subi	r26, 0x1F	; 31
     674:	bd 4f       	sbci	r27, 0xFD	; 253
     676:	a3 0f       	add	r26, r19
     678:	b1 1d       	adc	r27, r1
     67a:	2c 93       	st	X, r18
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	f3 cf       	rjmp	.-26     	; 0x666 <twi_transmit+0x20>
     680:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <twi_txBufferLength>
     684:	68 0f       	add	r22, r24
     686:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <twi_txBufferLength>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	08 95       	ret
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	08 95       	ret
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	08 95       	ret

00000696 <twi_releaseBus>:
     696:	85 ec       	ldi	r24, 0xC5	; 197
     698:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     69c:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <twi_state>
     6a0:	08 95       	ret

000006a2 <twi_handleTimeout>:
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <twi_timed_out_flag>
     6ac:	88 23       	and	r24, r24
     6ae:	51 f0       	breq	.+20     	; 0x6c4 <twi_handleTimeout+0x22>
     6b0:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     6b4:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
     6b8:	bb df       	rcall	.-138    	; 0x630 <twi_disable>
     6ba:	9e df       	rcall	.-196    	; 0x5f8 <twi_init>
     6bc:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
     6c0:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <twi_stop>:
     6ca:	85 ed       	ldi	r24, 0xD5	; 213
     6cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     6d0:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_timeout_us>
     6d4:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <twi_timeout_us+0x1>
     6d8:	a0 91 2b 03 	lds	r26, 0x032B	; 0x80032b <twi_timeout_us+0x2>
     6dc:	b0 91 2c 03 	lds	r27, 0x032C	; 0x80032c <twi_timeout_us+0x3>
     6e0:	07 96       	adiw	r24, 0x07	; 7
     6e2:	a1 1d       	adc	r26, r1
     6e4:	b1 1d       	adc	r27, r1
     6e6:	23 e0       	ldi	r18, 0x03	; 3
     6e8:	b6 95       	lsr	r27
     6ea:	a7 95       	ror	r26
     6ec:	97 95       	ror	r25
     6ee:	87 95       	ror	r24
     6f0:	2a 95       	dec	r18
     6f2:	d1 f7       	brne	.-12     	; 0x6e8 <twi_stop+0x1e>
     6f4:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     6f8:	24 ff       	sbrs	r18, 4
     6fa:	1b c0       	rjmp	.+54     	; 0x732 <twi_stop+0x68>
     6fc:	40 91 29 03 	lds	r20, 0x0329	; 0x800329 <twi_timeout_us>
     700:	50 91 2a 03 	lds	r21, 0x032A	; 0x80032a <twi_timeout_us+0x1>
     704:	60 91 2b 03 	lds	r22, 0x032B	; 0x80032b <twi_timeout_us+0x2>
     708:	70 91 2c 03 	lds	r23, 0x032C	; 0x80032c <twi_timeout_us+0x3>
     70c:	45 2b       	or	r20, r21
     70e:	46 2b       	or	r20, r22
     710:	47 2b       	or	r20, r23
     712:	81 f3       	breq	.-32     	; 0x6f4 <twi_stop+0x2a>
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	a1 05       	cpc	r26, r1
     718:	b1 05       	cpc	r27, r1
     71a:	41 f0       	breq	.+16     	; 0x72c <twi_stop+0x62>
     71c:	25 e3       	ldi	r18, 0x35	; 53
     71e:	2a 95       	dec	r18
     720:	f1 f7       	brne	.-4      	; 0x71e <twi_stop+0x54>
     722:	00 00       	nop
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	a1 09       	sbc	r26, r1
     728:	b1 09       	sbc	r27, r1
     72a:	e4 cf       	rjmp	.-56     	; 0x6f4 <twi_stop+0x2a>
     72c:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <twi_do_reset_on_timeout>
     730:	b8 cf       	rjmp	.-144    	; 0x6a2 <twi_handleTimeout>
     732:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <twi_state>
     736:	08 95       	ret

00000738 <__vector_39>:

ISR(TWI_vect)
{
     738:	1f 92       	push	r1
     73a:	0f 92       	push	r0
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	0f 92       	push	r0
     740:	11 24       	eor	r1, r1
     742:	0b b6       	in	r0, 0x3b	; 59
     744:	0f 92       	push	r0
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
  switch(TW_STATUS){
     75e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     762:	88 7f       	andi	r24, 0xF8	; 248
     764:	80 36       	cpi	r24, 0x60	; 96
     766:	09 f4       	brne	.+2      	; 0x76a <__vector_39+0x32>
     768:	9d c0       	rjmp	.+314    	; 0x8a4 <__vector_39+0x16c>
     76a:	70 f5       	brcc	.+92     	; 0x7c8 <__vector_39+0x90>
     76c:	88 32       	cpi	r24, 0x28	; 40
     76e:	09 f4       	brne	.+2      	; 0x772 <__vector_39+0x3a>
     770:	5c c0       	rjmp	.+184    	; 0x82a <__vector_39+0xf2>
     772:	90 f4       	brcc	.+36     	; 0x798 <__vector_39+0x60>
     774:	80 31       	cpi	r24, 0x10	; 16
     776:	09 f4       	brne	.+2      	; 0x77a <__vector_39+0x42>
     778:	55 c0       	rjmp	.+170    	; 0x824 <__vector_39+0xec>
     77a:	38 f4       	brcc	.+14     	; 0x78a <__vector_39+0x52>
     77c:	88 23       	and	r24, r24
     77e:	09 f4       	brne	.+2      	; 0x782 <__vector_39+0x4a>
     780:	f3 c0       	rjmp	.+486    	; 0x968 <__vector_39+0x230>
     782:	88 30       	cpi	r24, 0x08	; 8
     784:	09 f4       	brne	.+2      	; 0x788 <__vector_39+0x50>
     786:	4e c0       	rjmp	.+156    	; 0x824 <__vector_39+0xec>
     788:	f2 c0       	rjmp	.+484    	; 0x96e <__vector_39+0x236>
     78a:	88 31       	cpi	r24, 0x18	; 24
     78c:	09 f4       	brne	.+2      	; 0x790 <__vector_39+0x58>
     78e:	4d c0       	rjmp	.+154    	; 0x82a <__vector_39+0xf2>
     790:	80 32       	cpi	r24, 0x20	; 32
     792:	09 f4       	brne	.+2      	; 0x796 <__vector_39+0x5e>
     794:	5e c0       	rjmp	.+188    	; 0x852 <__vector_39+0x11a>
     796:	eb c0       	rjmp	.+470    	; 0x96e <__vector_39+0x236>
     798:	80 34       	cpi	r24, 0x40	; 64
     79a:	09 f4       	brne	.+2      	; 0x79e <__vector_39+0x66>
     79c:	69 c0       	rjmp	.+210    	; 0x870 <__vector_39+0x138>
     79e:	50 f4       	brcc	.+20     	; 0x7b4 <__vector_39+0x7c>
     7a0:	80 33       	cpi	r24, 0x30	; 48
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <__vector_39+0x6e>
     7a4:	56 c0       	rjmp	.+172    	; 0x852 <__vector_39+0x11a>
     7a6:	88 33       	cpi	r24, 0x38	; 56
     7a8:	09 f0       	breq	.+2      	; 0x7ac <__vector_39+0x74>
     7aa:	e1 c0       	rjmp	.+450    	; 0x96e <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     7ac:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <twi_error>
      twi_releaseBus();
     7b0:	72 df       	rcall	.-284    	; 0x696 <twi_releaseBus>
      break;
     7b2:	dd c0       	rjmp	.+442    	; 0x96e <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     7b4:	80 35       	cpi	r24, 0x50	; 80
     7b6:	09 f4       	brne	.+2      	; 0x7ba <__vector_39+0x82>
     7b8:	4f c0       	rjmp	.+158    	; 0x858 <__vector_39+0x120>
     7ba:	88 35       	cpi	r24, 0x58	; 88
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <__vector_39+0x88>
     7be:	5d c0       	rjmp	.+186    	; 0x87a <__vector_39+0x142>
     7c0:	88 34       	cpi	r24, 0x48	; 72
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <__vector_39+0x8e>
     7c4:	d4 c0       	rjmp	.+424    	; 0x96e <__vector_39+0x236>
     7c6:	d2 c0       	rjmp	.+420    	; 0x96c <__vector_39+0x234>
     7c8:	88 39       	cpi	r24, 0x98	; 152
     7ca:	09 f4       	brne	.+2      	; 0x7ce <__vector_39+0x96>
     7cc:	c3 c0       	rjmp	.+390    	; 0x954 <__vector_39+0x21c>
     7ce:	a8 f4       	brcc	.+42     	; 0x7fa <__vector_39+0xc2>
     7d0:	88 37       	cpi	r24, 0x78	; 120
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <__vector_39+0x9e>
     7d4:	67 c0       	rjmp	.+206    	; 0x8a4 <__vector_39+0x16c>
     7d6:	38 f4       	brcc	.+14     	; 0x7e6 <__vector_39+0xae>
     7d8:	88 36       	cpi	r24, 0x68	; 104
     7da:	09 f4       	brne	.+2      	; 0x7de <__vector_39+0xa6>
     7dc:	63 c0       	rjmp	.+198    	; 0x8a4 <__vector_39+0x16c>
     7de:	80 37       	cpi	r24, 0x70	; 112
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <__vector_39+0xac>
     7e2:	60 c0       	rjmp	.+192    	; 0x8a4 <__vector_39+0x16c>
     7e4:	c4 c0       	rjmp	.+392    	; 0x96e <__vector_39+0x236>
     7e6:	88 38       	cpi	r24, 0x88	; 136
     7e8:	09 f4       	brne	.+2      	; 0x7ec <__vector_39+0xb4>
     7ea:	b4 c0       	rjmp	.+360    	; 0x954 <__vector_39+0x21c>
     7ec:	80 39       	cpi	r24, 0x90	; 144
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <__vector_39+0xba>
     7f0:	5f c0       	rjmp	.+190    	; 0x8b0 <__vector_39+0x178>
     7f2:	80 38       	cpi	r24, 0x80	; 128
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <__vector_39+0xc0>
     7f6:	bb c0       	rjmp	.+374    	; 0x96e <__vector_39+0x236>
     7f8:	5b c0       	rjmp	.+182    	; 0x8b0 <__vector_39+0x178>
     7fa:	80 3b       	cpi	r24, 0xB0	; 176
     7fc:	09 f4       	brne	.+2      	; 0x800 <__vector_39+0xc8>
     7fe:	82 c0       	rjmp	.+260    	; 0x904 <__vector_39+0x1cc>
     800:	38 f4       	brcc	.+14     	; 0x810 <__vector_39+0xd8>
     802:	80 3a       	cpi	r24, 0xA0	; 160
     804:	09 f4       	brne	.+2      	; 0x808 <__vector_39+0xd0>
     806:	66 c0       	rjmp	.+204    	; 0x8d4 <__vector_39+0x19c>
     808:	88 3a       	cpi	r24, 0xA8	; 168
     80a:	09 f4       	brne	.+2      	; 0x80e <__vector_39+0xd6>
     80c:	7b c0       	rjmp	.+246    	; 0x904 <__vector_39+0x1cc>
     80e:	af c0       	rjmp	.+350    	; 0x96e <__vector_39+0x236>
     810:	80 3c       	cpi	r24, 0xC0	; 192
     812:	09 f4       	brne	.+2      	; 0x816 <__vector_39+0xde>
     814:	a3 c0       	rjmp	.+326    	; 0x95c <__vector_39+0x224>
     816:	88 3c       	cpi	r24, 0xC8	; 200
     818:	09 f4       	brne	.+2      	; 0x81c <__vector_39+0xe4>
     81a:	a0 c0       	rjmp	.+320    	; 0x95c <__vector_39+0x224>
     81c:	88 3b       	cpi	r24, 0xB8	; 184
     81e:	09 f4       	brne	.+2      	; 0x822 <__vector_39+0xea>
     820:	86 c0       	rjmp	.+268    	; 0x92e <__vector_39+0x1f6>
     822:	a5 c0       	rjmp	.+330    	; 0x96e <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     824:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <twi_slarw>
     828:	10 c0       	rjmp	.+32     	; 0x84a <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     82a:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <twi_masterBufferIndex>
     82e:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <twi_masterBufferLength>
     832:	98 17       	cp	r25, r24
     834:	70 f5       	brcc	.+92     	; 0x892 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     836:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <twi_masterBufferIndex>
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	8e 0f       	add	r24, r30
     83e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <twi_masterBufferIndex>
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ed 5f       	subi	r30, 0xFD	; 253
     846:	fc 4f       	sbci	r31, 0xFC	; 252
     848:	80 81       	ld	r24, Z
     84a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     84e:	85 ec       	ldi	r24, 0xC5	; 197
     850:	82 c0       	rjmp	.+260    	; 0x956 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     852:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <twi_error>
     856:	8a c0       	rjmp	.+276    	; 0x96c <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     858:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <twi_masterBufferIndex>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	8e 0f       	add	r24, r30
     860:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <twi_masterBufferIndex>
     864:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	ed 5f       	subi	r30, 0xFD	; 253
     86c:	fc 4f       	sbci	r31, 0xFC	; 252
     86e:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     870:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <twi_masterBufferIndex>
     874:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <twi_masterBufferLength>
     878:	6a c0       	rjmp	.+212    	; 0x94e <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     87a:	e0 91 02 03 	lds	r30, 0x0302	; 0x800302 <twi_masterBufferIndex>
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	8e 0f       	add	r24, r30
     882:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <twi_masterBufferIndex>
     886:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	ed 5f       	subi	r30, 0xFD	; 253
     88e:	fc 4f       	sbci	r31, 0xFC	; 252
     890:	80 83       	st	Z, r24
      if (twi_sendStop){
     892:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <twi_sendStop>
     896:	81 11       	cpse	r24, r1
     898:	69 c0       	rjmp	.+210    	; 0x96c <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     8a0:	84 ea       	ldi	r24, 0xA4	; 164
     8a2:	5d c0       	rjmp	.+186    	; 0x95e <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     8aa:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <twi_rxBufferIndex>
     8ae:	cf cf       	rjmp	.-98     	; 0x84e <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     8b0:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi_rxBufferIndex>
     8b4:	80 32       	cpi	r24, 0x20	; 32
     8b6:	08 f0       	brcs	.+2      	; 0x8ba <__vector_39+0x182>
     8b8:	4d c0       	rjmp	.+154    	; 0x954 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     8ba:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <twi_rxBufferIndex>
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	8e 0f       	add	r24, r30
     8c2:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <twi_rxBufferIndex>
     8c6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	e1 54       	subi	r30, 0x41	; 65
     8ce:	fd 4f       	sbci	r31, 0xFD	; 253
     8d0:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     8d2:	bd cf       	rjmp	.-134    	; 0x84e <__vector_39+0x116>
     8d4:	e0 de       	rcall	.-576    	; 0x696 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     8d6:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <twi_rxBufferIndex>
     8da:	80 32       	cpi	r24, 0x20	; 32
     8dc:	30 f4       	brcc	.+12     	; 0x8ea <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     8de:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <twi_rxBufferIndex>
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	e1 54       	subi	r30, 0x41	; 65
     8e6:	fd 4f       	sbci	r31, 0xFD	; 253
     8e8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     8ea:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <twi_rxBufferIndex>
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <twi_onSlaveReceive>
     8f4:	f0 91 24 03 	lds	r31, 0x0324	; 0x800324 <twi_onSlaveReceive+0x1>
     8f8:	8f eb       	ldi	r24, 0xBF	; 191
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     8fe:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <twi_rxBufferIndex>
      break;
     902:	35 c0       	rjmp	.+106    	; 0x96e <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     90a:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     90e:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     912:	e0 91 25 03 	lds	r30, 0x0325	; 0x800325 <twi_onSlaveTransmit>
     916:	f0 91 26 03 	lds	r31, 0x0326	; 0x800326 <twi_onSlaveTransmit+0x1>
     91a:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     91c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <twi_txBufferLength>
     920:	81 11       	cpse	r24, r1
     922:	05 c0       	rjmp	.+10     	; 0x92e <__vector_39+0x1f6>
        twi_txBufferLength = 1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     92a:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     92e:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <twi_txBufferIndex>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	8e 0f       	add	r24, r30
     936:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <twi_txBufferIndex>
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	ef 51       	subi	r30, 0x1F	; 31
     93e:	fd 4f       	sbci	r31, 0xFD	; 253
     940:	80 81       	ld	r24, Z
     942:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     946:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <twi_txBufferIndex>
     94a:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <twi_txBufferLength>
     94e:	98 17       	cp	r25, r24
     950:	08 f4       	brcc	.+2      	; 0x954 <__vector_39+0x21c>
     952:	7d cf       	rjmp	.-262    	; 0x84e <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     954:	85 e8       	ldi	r24, 0x85	; 133
     956:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     95a:	09 c0       	rjmp	.+18     	; 0x96e <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     95c:	85 ec       	ldi	r24, 0xC5	; 197
     95e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     962:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <twi_state>
      break;
     966:	03 c0       	rjmp	.+6      	; 0x96e <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     968:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <twi_error>
      twi_stop();
     96c:	ae de       	rcall	.-676    	; 0x6ca <twi_stop>
      break;
  }
}
     96e:	ff 91       	pop	r31
     970:	ef 91       	pop	r30
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	7f 91       	pop	r23
     97c:	6f 91       	pop	r22
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	0f 90       	pop	r0
     988:	0b be       	out	0x3b, r0	; 59
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti

00000994 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     994:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <_ZN7TwoWire14rxBufferLengthE>
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	20 91 61 03 	lds	r18, 0x0361	; 0x800361 <_ZN7TwoWire13rxBufferIndexE>
     99e:	82 1b       	sub	r24, r18
     9a0:	91 09       	sbc	r25, r1
     9a2:	08 95       	ret

000009a4 <_ZN7TwoWire4readEv>:
     9a4:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <_ZN7TwoWire13rxBufferIndexE>
     9a8:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <_ZN7TwoWire14rxBufferLengthE>
     9ac:	98 17       	cp	r25, r24
     9ae:	50 f4       	brcc	.+20     	; 0x9c4 <_ZN7TwoWire4readEv+0x20>
     9b0:	e9 2f       	mov	r30, r25
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	ee 59       	subi	r30, 0x9E	; 158
     9b6:	fc 4f       	sbci	r31, 0xFC	; 252
     9b8:	20 81       	ld	r18, Z
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	9f 5f       	subi	r25, 0xFF	; 255
     9be:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <_ZN7TwoWire13rxBufferIndexE>
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <_ZN7TwoWire4readEv+0x24>
     9c4:	2f ef       	ldi	r18, 0xFF	; 255
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	c9 01       	movw	r24, r18
     9ca:	08 95       	ret

000009cc <_ZN7TwoWire4peekEv>:
     9cc:	e0 91 61 03 	lds	r30, 0x0361	; 0x800361 <_ZN7TwoWire13rxBufferIndexE>
     9d0:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <_ZN7TwoWire14rxBufferLengthE>
     9d4:	e8 17       	cp	r30, r24
     9d6:	30 f4       	brcc	.+12     	; 0x9e4 <_ZN7TwoWire4peekEv+0x18>
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	ee 59       	subi	r30, 0x9E	; 158
     9dc:	fc 4f       	sbci	r31, 0xFC	; 252
     9de:	80 81       	ld	r24, Z
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	08 95       	ret
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	9f ef       	ldi	r25, 0xFF	; 255
     9e8:	08 95       	ret

000009ea <_ZN7TwoWire5flushEv>:
     9ea:	08 95       	ret

000009ec <_ZN7TwoWire5writeEPKhj>:
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	7c 01       	movw	r14, r24
     9fe:	cb 01       	movw	r24, r22
     a00:	8a 01       	movw	r16, r20
     a02:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <_ZN7TwoWire12transmittingE>
     a06:	22 23       	and	r18, r18
     a08:	89 f0       	breq	.+34     	; 0xa2c <_ZN7TwoWire5writeEPKhj+0x40>
     a0a:	eb 01       	movw	r28, r22
     a0c:	6b 01       	movw	r12, r22
     a0e:	c4 0e       	add	r12, r20
     a10:	d5 1e       	adc	r13, r21
     a12:	cc 15       	cp	r28, r12
     a14:	dd 05       	cpc	r29, r13
     a16:	61 f0       	breq	.+24     	; 0xa30 <_ZN7TwoWire5writeEPKhj+0x44>
     a18:	69 91       	ld	r22, Y+
     a1a:	d7 01       	movw	r26, r14
     a1c:	ed 91       	ld	r30, X+
     a1e:	fc 91       	ld	r31, X
     a20:	01 90       	ld	r0, Z+
     a22:	f0 81       	ld	r31, Z
     a24:	e0 2d       	mov	r30, r0
     a26:	c7 01       	movw	r24, r14
     a28:	19 95       	eicall
     a2a:	f3 cf       	rjmp	.-26     	; 0xa12 <_ZN7TwoWire5writeEPKhj+0x26>
     a2c:	64 2f       	mov	r22, r20
     a2e:	0b de       	rcall	.-1002   	; 0x646 <twi_transmit>
     a30:	c8 01       	movw	r24, r16
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	08 95       	ret

00000a44 <_ZN7TwoWire5writeEh>:
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	1f 92       	push	r1
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	69 83       	std	Y+1, r22	; 0x01
     a50:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <_ZN7TwoWire12transmittingE>
     a54:	22 23       	and	r18, r18
     a56:	d1 f0       	breq	.+52     	; 0xa8c <_ZN7TwoWire5writeEh+0x48>
     a58:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <_ZN7TwoWire14txBufferLengthE>
     a5c:	20 32       	cpi	r18, 0x20	; 32
     a5e:	40 f0       	brcs	.+16     	; 0xa70 <_ZN7TwoWire5writeEh+0x2c>
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	fc 01       	movw	r30, r24
     a66:	33 83       	std	Z+3, r19	; 0x03
     a68:	22 83       	std	Z+2, r18	; 0x02
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	14 c0       	rjmp	.+40     	; 0xa98 <_ZN7TwoWire5writeEh+0x54>
     a70:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <_ZN7TwoWire13txBufferIndexE>
     a74:	e8 2f       	mov	r30, r24
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	e0 5c       	subi	r30, 0xC0	; 192
     a7a:	fc 4f       	sbci	r31, 0xFC	; 252
     a7c:	99 81       	ldd	r25, Y+1	; 0x01
     a7e:	90 83       	st	Z, r25
     a80:	8f 5f       	subi	r24, 0xFF	; 255
     a82:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <_ZN7TwoWire13txBufferIndexE>
     a86:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <_ZN7TwoWire14txBufferLengthE>
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <_ZN7TwoWire5writeEh+0x50>
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	d9 dd       	rcall	.-1102   	; 0x646 <twi_transmit>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0f 90       	pop	r0
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <_ZN7TwoWireC1Ev>:
     aa0:	fc 01       	movw	r30, r24
     aa2:	13 82       	std	Z+3, r1	; 0x03
     aa4:	12 82       	std	Z+2, r1	; 0x02
     aa6:	88 ee       	ldi	r24, 0xE8	; 232
     aa8:	93 e0       	ldi	r25, 0x03	; 3
     aaa:	a0 e0       	ldi	r26, 0x00	; 0
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	84 83       	std	Z+4, r24	; 0x04
     ab0:	95 83       	std	Z+5, r25	; 0x05
     ab2:	a6 83       	std	Z+6, r26	; 0x06
     ab4:	b7 83       	std	Z+7, r27	; 0x07
     ab6:	84 e0       	ldi	r24, 0x04	; 4
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	91 83       	std	Z+1, r25	; 0x01
     abc:	80 83       	st	Z, r24
     abe:	08 95       	ret

00000ac0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     ac0:	81 e3       	ldi	r24, 0x31	; 49
     ac2:	93 e0       	ldi	r25, 0x03	; 3
     ac4:	ed cf       	rjmp	.-38     	; 0xaa0 <_ZN7TwoWireC1Ev>

00000ac6 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	0b b6       	in	r0, 0x3b	; 59
     ad2:	0f 92       	push	r0
     ad4:	2f 93       	push	r18
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     ade:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <Serial+0x10>
     ae2:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <Serial+0x11>
     ae6:	80 81       	ld	r24, Z
     ae8:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <Serial+0x16>
     aec:	f0 91 99 03 	lds	r31, 0x0399	; 0x800399 <Serial+0x17>
     af0:	82 fd       	sbrc	r24, 2
     af2:	12 c0       	rjmp	.+36     	; 0xb18 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     af4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     af6:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <Serial+0x19>
     afa:	8f 5f       	subi	r24, 0xFF	; 255
     afc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     afe:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <Serial+0x1a>
     b02:	82 17       	cp	r24, r18
     b04:	51 f0       	breq	.+20     	; 0xb1a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     b06:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <Serial+0x19>
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	ee 57       	subi	r30, 0x7E	; 126
     b0e:	fc 4f       	sbci	r31, 0xFC	; 252
     b10:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     b12:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <Serial+0x19>
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     b18:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0b be       	out	0x3b, r0	; 59
     b28:	0f 90       	pop	r0
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	0f 90       	pop	r0
     b2e:	1f 90       	pop	r1
     b30:	18 95       	reti

00000b32 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     b32:	1f 92       	push	r1
     b34:	0f 92       	push	r0
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	0b b6       	in	r0, 0x3b	; 59
     b3e:	0f 92       	push	r0
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     b58:	82 e8       	ldi	r24, 0x82	; 130
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	26 d2       	rcall	.+1100   	; 0xfaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0b be       	out	0x3b, r0	; 59
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     b84:	82 e8       	ldi	r24, 0x82	; 130
     b86:	93 e0       	ldi	r25, 0x03	; 3
     b88:	97 d1       	rcall	.+814    	; 0xeb8 <_ZN14HardwareSerial9availableEv>
     b8a:	21 e0       	ldi	r18, 0x01	; 1
     b8c:	89 2b       	or	r24, r25
     b8e:	09 f4       	brne	.+2      	; 0xb92 <_Z17Serial0_availablev+0xe>
     b90:	20 e0       	ldi	r18, 0x00	; 0
}
     b92:	82 2f       	mov	r24, r18
     b94:	08 95       	ret

00000b96 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b96:	e2 e8       	ldi	r30, 0x82	; 130
     b98:	f3 e0       	ldi	r31, 0x03	; 3
     b9a:	13 82       	std	Z+3, r1	; 0x03
     b9c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b9e:	88 ee       	ldi	r24, 0xE8	; 232
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	84 83       	std	Z+4, r24	; 0x04
     ba8:	95 83       	std	Z+5, r25	; 0x05
     baa:	a6 83       	std	Z+6, r26	; 0x06
     bac:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     bae:	86 e1       	ldi	r24, 0x16	; 22
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	91 83       	std	Z+1, r25	; 0x01
     bb4:	80 83       	st	Z, r24
     bb6:	85 ec       	ldi	r24, 0xC5	; 197
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	95 87       	std	Z+13, r25	; 0x0d
     bbc:	84 87       	std	Z+12, r24	; 0x0c
     bbe:	84 ec       	ldi	r24, 0xC4	; 196
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	97 87       	std	Z+15, r25	; 0x0f
     bc4:	86 87       	std	Z+14, r24	; 0x0e
     bc6:	80 ec       	ldi	r24, 0xC0	; 192
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	91 8b       	std	Z+17, r25	; 0x11
     bcc:	80 8b       	std	Z+16, r24	; 0x10
     bce:	81 ec       	ldi	r24, 0xC1	; 193
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	93 8b       	std	Z+19, r25	; 0x13
     bd4:	82 8b       	std	Z+18, r24	; 0x12
     bd6:	82 ec       	ldi	r24, 0xC2	; 194
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	95 8b       	std	Z+21, r25	; 0x15
     bdc:	84 8b       	std	Z+20, r24	; 0x14
     bde:	86 ec       	ldi	r24, 0xC6	; 198
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	97 8b       	std	Z+23, r25	; 0x17
     be4:	86 8b       	std	Z+22, r24	; 0x16
     be6:	11 8e       	std	Z+25, r1	; 0x19
     be8:	12 8e       	std	Z+26, r1	; 0x1a
     bea:	13 8e       	std	Z+27, r1	; 0x1b
     bec:	14 8e       	std	Z+28, r1	; 0x1c
     bee:	08 95       	ret

00000bf0 <initVariant>:
     bf0:	08 95       	ret

00000bf2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     bf2:	7d d0       	rcall	.+250    	; 0xcee <init>

	initVariant();
     bf4:	fd df       	rcall	.-6      	; 0xbf0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     bf6:	2f db       	rcall	.-2466   	; 0x256 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     bf8:	c9 e9       	ldi	r28, 0x99	; 153
     bfa:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
     bfc:	2d db       	rcall	.-2470   	; 0x258 <loop>
		if (serialEventRun) serialEventRun();
     bfe:	20 97       	sbiw	r28, 0x00	; 0
     c00:	e9 f3       	breq	.-6      	; 0xbfc <main+0xa>
     c02:	97 d1       	rcall	.+814    	; 0xf32 <_Z14serialEventRunv>
     c04:	fb cf       	rjmp	.-10     	; 0xbfc <main+0xa>

00000c06 <_ZN5Print5writeEPKhj>:
     c06:	cf 92       	push	r12

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	6c 01       	movw	r12, r24
     c18:	7a 01       	movw	r14, r20
     c1a:	8b 01       	movw	r16, r22
  size_t n = 0;
     c1c:	c0 e0       	ldi	r28, 0x00	; 0
     c1e:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     c20:	ce 15       	cp	r28, r14
     c22:	df 05       	cpc	r29, r15
     c24:	81 f0       	breq	.+32     	; 0xc46 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
     c26:	d8 01       	movw	r26, r16
     c28:	6d 91       	ld	r22, X+
     c2a:	8d 01       	movw	r16, r26
     c2c:	d6 01       	movw	r26, r12
     c2e:	ed 91       	ld	r30, X+
     c30:	fc 91       	ld	r31, X
     c32:	01 90       	ld	r0, Z+
     c34:	f0 81       	ld	r31, Z
     c36:	e0 2d       	mov	r30, r0
     c38:	c6 01       	movw	r24, r12
     c3a:	19 95       	eicall
     c3c:	89 2b       	or	r24, r25
     c3e:	11 f0       	breq	.+4      	; 0xc44 <_ZN5Print5writeEPKhj+0x3e>
     c40:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     c42:	ee cf       	rjmp	.-36     	; 0xc20 <_ZN5Print5writeEPKhj+0x1a>
     c44:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
     c46:	c7 01       	movw	r24, r14
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	df 90       	pop	r13
     c56:	cf 90       	pop	r12
     c58:	08 95       	ret

00000c5a <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	11 24       	eor	r1, r1
     c64:	2f 93       	push	r18
     c66:	3f 93       	push	r19
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <timer0_millis>
     c74:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <timer0_millis+0x1>
     c78:	a0 91 22 04 	lds	r26, 0x0422	; 0x800422 <timer0_millis+0x2>
     c7c:	b0 91 23 04 	lds	r27, 0x0423	; 0x800423 <timer0_millis+0x3>
     c80:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <timer0_fract>
     c84:	23 e0       	ldi	r18, 0x03	; 3
     c86:	23 0f       	add	r18, r19
     c88:	2d 37       	cpi	r18, 0x7D	; 125
     c8a:	20 f4       	brcc	.+8      	; 0xc94 <__vector_23+0x3a>
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	a1 1d       	adc	r26, r1
     c90:	b1 1d       	adc	r27, r1
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <__vector_23+0x44>
     c94:	26 e8       	ldi	r18, 0x86	; 134
     c96:	23 0f       	add	r18, r19
     c98:	02 96       	adiw	r24, 0x02	; 2
     c9a:	a1 1d       	adc	r26, r1
     c9c:	b1 1d       	adc	r27, r1
     c9e:	20 93 1f 04 	sts	0x041F, r18	; 0x80041f <timer0_fract>
     ca2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <timer0_millis>
     ca6:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <timer0_millis+0x1>
     caa:	a0 93 22 04 	sts	0x0422, r26	; 0x800422 <timer0_millis+0x2>
     cae:	b0 93 23 04 	sts	0x0423, r27	; 0x800423 <timer0_millis+0x3>
     cb2:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <timer0_overflow_count>
     cb6:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <timer0_overflow_count+0x1>
     cba:	a0 91 26 04 	lds	r26, 0x0426	; 0x800426 <timer0_overflow_count+0x2>
     cbe:	b0 91 27 04 	lds	r27, 0x0427	; 0x800427 <timer0_overflow_count+0x3>
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	a1 1d       	adc	r26, r1
     cc6:	b1 1d       	adc	r27, r1
     cc8:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <timer0_overflow_count>
     ccc:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <timer0_overflow_count+0x1>
     cd0:	a0 93 26 04 	sts	0x0426, r26	; 0x800426 <timer0_overflow_count+0x2>
     cd4:	b0 93 27 04 	sts	0x0427, r27	; 0x800427 <timer0_overflow_count+0x3>
     cd8:	bf 91       	pop	r27
     cda:	af 91       	pop	r26
     cdc:	9f 91       	pop	r25
     cde:	8f 91       	pop	r24
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     cee:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     cf0:	84 b5       	in	r24, 0x24	; 36
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     cf6:	84 b5       	in	r24, 0x24	; 36
     cf8:	81 60       	ori	r24, 0x01	; 1
     cfa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     cfc:	85 b5       	in	r24, 0x25	; 37
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d02:	85 b5       	in	r24, 0x25	; 37
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d08:	ee e6       	ldi	r30, 0x6E	; 110
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	81 60       	ori	r24, 0x01	; 1
     d10:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d12:	e1 e8       	ldi	r30, 0x81	; 129
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     d18:	80 81       	ld	r24, Z
     d1a:	82 60       	ori	r24, 0x02	; 2
     d1c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     d1e:	80 81       	ld	r24, Z
     d20:	81 60       	ori	r24, 0x01	; 1
     d22:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     d24:	e0 e8       	ldi	r30, 0x80	; 128
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	81 60       	ori	r24, 0x01	; 1
     d2c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     d2e:	e1 eb       	ldi	r30, 0xB1	; 177
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	84 60       	ori	r24, 0x04	; 4
     d36:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d38:	e0 eb       	ldi	r30, 0xB0	; 176
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	81 60       	ori	r24, 0x01	; 1
     d40:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     d42:	e1 e9       	ldi	r30, 0x91	; 145
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	82 60       	ori	r24, 0x02	; 2
     d4a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     d4c:	80 81       	ld	r24, Z
     d4e:	81 60       	ori	r24, 0x01	; 1
     d50:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     d52:	e0 e9       	ldi	r30, 0x90	; 144
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	81 60       	ori	r24, 0x01	; 1
     d5a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     d5c:	e1 ea       	ldi	r30, 0xA1	; 161
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     d66:	80 81       	ld	r24, Z
     d68:	81 60       	ori	r24, 0x01	; 1
     d6a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     d6c:	e0 ea       	ldi	r30, 0xA0	; 160
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	81 60       	ori	r24, 0x01	; 1
     d74:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     d76:	e1 e2       	ldi	r30, 0x21	; 33
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	80 81       	ld	r24, Z
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     d80:	80 81       	ld	r24, Z
     d82:	81 60       	ori	r24, 0x01	; 1
     d84:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     d86:	e0 e2       	ldi	r30, 0x20	; 32
     d88:	f1 e0       	ldi	r31, 0x01	; 1
     d8a:	80 81       	ld	r24, Z
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     d90:	ea e7       	ldi	r30, 0x7A	; 122
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	84 60       	ori	r24, 0x04	; 4
     d98:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     d9a:	80 81       	ld	r24, Z
     d9c:	82 60       	ori	r24, 0x02	; 2
     d9e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     da0:	80 81       	ld	r24, Z
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     da6:	80 81       	ld	r24, Z
     da8:	80 68       	ori	r24, 0x80	; 128
     daa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     dac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     db0:	08 95       	ret

00000db2 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	fc 01       	movw	r30, r24
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	e2 31       	cpi	r30, 0x12	; 18
     dba:	f1 05       	cpc	r31, r1
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <turnOffPWM+0xe>
     dbe:	4d c0       	rjmp	.+154    	; 0xe5a <turnOffPWM+0xa8>
     dc0:	88 27       	eor	r24, r24
     dc2:	ee 58       	subi	r30, 0x8E	; 142
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	8f 4f       	sbci	r24, 0xFF	; 255
     dc8:	7f c1       	rjmp	.+766    	; 0x10c8 <__tablejump2__>
     dca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     dce:	8f 77       	andi	r24, 0x7F	; 127
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <turnOffPWM+0x26>
     dd2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     dd6:	8f 7d       	andi	r24, 0xDF	; 223
     dd8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     ddc:	08 95       	ret
     dde:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     de2:	87 7f       	andi	r24, 0xF7	; 247
     de4:	f9 cf       	rjmp	.-14     	; 0xdd8 <turnOffPWM+0x26>
     de6:	84 b5       	in	r24, 0x24	; 36
     de8:	8f 77       	andi	r24, 0x7F	; 127
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <turnOffPWM+0x3e>
     dec:	84 b5       	in	r24, 0x24	; 36
     dee:	8f 7d       	andi	r24, 0xDF	; 223
     df0:	84 bd       	out	0x24, r24	; 36
     df2:	08 95       	ret
     df4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     df8:	8f 77       	andi	r24, 0x7F	; 127
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <turnOffPWM+0x50>
     dfc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     e00:	8f 7d       	andi	r24, 0xDF	; 223
     e02:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     e06:	08 95       	ret
     e08:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     e0c:	8f 77       	andi	r24, 0x7F	; 127
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <turnOffPWM+0x6c>
     e10:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     e14:	8f 7d       	andi	r24, 0xDF	; 223
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <turnOffPWM+0x6c>
     e18:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     e1c:	87 7f       	andi	r24, 0xF7	; 247
     e1e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     e22:	08 95       	ret
     e24:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     e28:	8f 77       	andi	r24, 0x7F	; 127
     e2a:	07 c0       	rjmp	.+14     	; 0xe3a <turnOffPWM+0x88>
     e2c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     e30:	8f 7d       	andi	r24, 0xDF	; 223
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <turnOffPWM+0x88>
     e34:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     e38:	87 7f       	andi	r24, 0xF7	; 247
     e3a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     e3e:	08 95       	ret
     e40:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     e44:	8f 77       	andi	r24, 0x7F	; 127
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <turnOffPWM+0xa4>
     e48:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     e4c:	8f 7d       	andi	r24, 0xDF	; 223
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <turnOffPWM+0xa4>
     e50:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     e54:	87 7f       	andi	r24, 0xF7	; 247
     e56:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     e5a:	08 95       	ret

00000e5c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	f9 01       	movw	r30, r18
     e68:	e8 5f       	subi	r30, 0xF8	; 248
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     e6e:	f9 01       	movw	r30, r18
     e70:	e2 5b       	subi	r30, 0xB2	; 178
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     e76:	f9 01       	movw	r30, r18
     e78:	ec 56       	subi	r30, 0x6C	; 108
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     e7e:	cc 23       	and	r28, r28
     e80:	b9 f0       	breq	.+46     	; 0xeb0 <digitalWrite+0x54>
     e82:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     e84:	81 11       	cpse	r24, r1
     e86:	95 df       	rcall	.-214    	; 0xdb2 <turnOffPWM>

	out = portOutputRegister(port);
     e88:	ec 2f       	mov	r30, r28
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	e6 52       	subi	r30, 0x26	; 38
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	a5 91       	lpm	r26, Z+
     e96:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     e98:	9f b7       	in	r25, 0x3f	; 63
	cli();
     e9a:	f8 94       	cli

	if (val == LOW) {
     e9c:	11 11       	cpse	r17, r1
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <digitalWrite+0x4c>
		*out &= ~bit;
     ea0:	8c 91       	ld	r24, X
     ea2:	d0 95       	com	r29
     ea4:	d8 23       	and	r29, r24
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <digitalWrite+0x50>
	} else {
		*out |= bit;
     ea8:	ec 91       	ld	r30, X
     eaa:	de 2b       	or	r29, r30
     eac:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     eae:	9f bf       	out	0x3f, r25	; 63
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	08 95       	ret

00000eb8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     eb8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     eba:	91 8d       	ldd	r25, Z+25	; 0x19
     ebc:	22 8d       	ldd	r18, Z+26	; 0x1a
     ebe:	89 2f       	mov	r24, r25
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	80 5c       	subi	r24, 0xC0	; 192
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	82 1b       	sub	r24, r18
     ec8:	91 09       	sbc	r25, r1
}
     eca:	8f 73       	andi	r24, 0x3F	; 63
     ecc:	99 27       	eor	r25, r25
     ece:	08 95       	ret

00000ed0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     ed0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     ed2:	91 8d       	ldd	r25, Z+25	; 0x19
     ed4:	82 8d       	ldd	r24, Z+26	; 0x1a
     ed6:	98 17       	cp	r25, r24
     ed8:	31 f0       	breq	.+12     	; 0xee6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     eda:	82 8d       	ldd	r24, Z+26	; 0x1a
     edc:	e8 0f       	add	r30, r24
     ede:	f1 1d       	adc	r31, r1
     ee0:	85 8d       	ldd	r24, Z+29	; 0x1d
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     eea:	08 95       	ret

00000eec <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     eec:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     eee:	91 8d       	ldd	r25, Z+25	; 0x19
     ef0:	82 8d       	ldd	r24, Z+26	; 0x1a
     ef2:	98 17       	cp	r25, r24
     ef4:	61 f0       	breq	.+24     	; 0xf0e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     ef6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ef8:	df 01       	movw	r26, r30
     efa:	a8 0f       	add	r26, r24
     efc:	b1 1d       	adc	r27, r1
     efe:	5d 96       	adiw	r26, 0x1d	; 29
     f00:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     f02:	92 8d       	ldd	r25, Z+26	; 0x1a
     f04:	9f 5f       	subi	r25, 0xFF	; 255
     f06:	9f 73       	andi	r25, 0x3F	; 63
     f08:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     f12:	08 95       	ret

00000f14 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     f14:	fc 01       	movw	r30, r24
     f16:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     f18:	44 8d       	ldd	r20, Z+28	; 0x1c
     f1a:	25 2f       	mov	r18, r21
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	84 2f       	mov	r24, r20
     f20:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     f22:	82 1b       	sub	r24, r18
     f24:	93 0b       	sbc	r25, r19
     f26:	54 17       	cp	r21, r20
     f28:	10 f0       	brcs	.+4      	; 0xf2e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     f2a:	cf 96       	adiw	r24, 0x3f	; 63
     f2c:	08 95       	ret
  return tail - head - 1;
     f2e:	01 97       	sbiw	r24, 0x01	; 1
}
     f30:	08 95       	ret

00000f32 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f32:	82 ec       	ldi	r24, 0xC2	; 194
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	89 2b       	or	r24, r25
     f38:	39 f0       	breq	.+14     	; 0xf48 <_Z14serialEventRunv+0x16>
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	89 2b       	or	r24, r25
     f40:	19 f0       	breq	.+6      	; 0xf48 <_Z14serialEventRunv+0x16>
     f42:	20 de       	rcall	.-960    	; 0xb84 <_Z17Serial0_availablev>
     f44:	81 11       	cpse	r24, r1
     f46:	25 c0       	rjmp	.+74     	; 0xf92 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	89 2b       	or	r24, r25
     f4e:	41 f0       	breq	.+16     	; 0xf60 <_Z14serialEventRunv+0x2e>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	89 2b       	or	r24, r25
     f56:	21 f0       	breq	.+8      	; 0xf60 <_Z14serialEventRunv+0x2e>
     f58:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f5c:	81 11       	cpse	r24, r1
     f5e:	1c c0       	rjmp	.+56     	; 0xf98 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	89 2b       	or	r24, r25
     f66:	41 f0       	breq	.+16     	; 0xf78 <_Z14serialEventRunv+0x46>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	89 2b       	or	r24, r25
     f6e:	21 f0       	breq	.+8      	; 0xf78 <_Z14serialEventRunv+0x46>
     f70:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f74:	81 11       	cpse	r24, r1
     f76:	13 c0       	rjmp	.+38     	; 0xf9e <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	89 2b       	or	r24, r25
     f7e:	a1 f0       	breq	.+40     	; 0xfa8 <_Z14serialEventRunv+0x76>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	89 2b       	or	r24, r25
     f86:	81 f0       	breq	.+32     	; 0xfa8 <_Z14serialEventRunv+0x76>
     f88:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f8c:	81 11       	cpse	r24, r1
     f8e:	0a c0       	rjmp	.+20     	; 0xfa4 <_Z14serialEventRunv+0x72>
     f90:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f92:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f96:	d8 cf       	rjmp	.-80     	; 0xf48 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     f98:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f9c:	e1 cf       	rjmp	.-62     	; 0xf60 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     f9e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     fa2:	ea cf       	rjmp	.-44     	; 0xf78 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     fa4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     fa8:	08 95       	ret

00000faa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     faa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     fac:	84 8d       	ldd	r24, Z+28	; 0x1c
     fae:	df 01       	movw	r26, r30
     fb0:	a8 0f       	add	r26, r24
     fb2:	b1 1d       	adc	r27, r1
     fb4:	a3 5a       	subi	r26, 0xA3	; 163
     fb6:	bf 4f       	sbci	r27, 0xFF	; 255
     fb8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     fba:	84 8d       	ldd	r24, Z+28	; 0x1c
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	8f 73       	andi	r24, 0x3F	; 63
     fc2:	99 27       	eor	r25, r25
     fc4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     fc6:	a6 89       	ldd	r26, Z+22	; 0x16
     fc8:	b7 89       	ldd	r27, Z+23	; 0x17
     fca:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     fcc:	a0 89       	ldd	r26, Z+16	; 0x10
     fce:	b1 89       	ldd	r27, Z+17	; 0x11
     fd0:	8c 91       	ld	r24, X
     fd2:	83 70       	andi	r24, 0x03	; 3
     fd4:	80 64       	ori	r24, 0x40	; 64
     fd6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     fd8:	93 8d       	ldd	r25, Z+27	; 0x1b
     fda:	84 8d       	ldd	r24, Z+28	; 0x1c
     fdc:	98 13       	cpse	r25, r24
     fde:	06 c0       	rjmp	.+12     	; 0xfec <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     fe0:	02 88       	ldd	r0, Z+18	; 0x12
     fe2:	f3 89       	ldd	r31, Z+19	; 0x13
     fe4:	e0 2d       	mov	r30, r0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 7d       	andi	r24, 0xDF	; 223
     fea:	80 83       	st	Z, r24
     fec:	08 95       	ret

00000fee <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
  _written = true;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1000:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1002:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1004:	98 13       	cpse	r25, r24
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <__EEPROM_REGION_LENGTH__+0x12>
    1008:	e8 89       	ldd	r30, Y+16	; 0x10
    100a:	f9 89       	ldd	r31, Y+17	; 0x11
    100c:	80 81       	ld	r24, Z
    100e:	85 fd       	sbrc	r24, 5
    1010:	25 c0       	rjmp	.+74     	; 0x105c <__EEPROM_REGION_LENGTH__+0x5c>
    1012:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1014:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1016:	10 e0       	ldi	r17, 0x00	; 0
    1018:	0f 5f       	subi	r16, 0xFF	; 255
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	0f 73       	andi	r16, 0x3F	; 63
    101e:	11 27       	eor	r17, r17
    1020:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1022:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1024:	e8 12       	cpse	r14, r24
    1026:	0b c0       	rjmp	.+22     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    if (bit_is_clear(SREG, SREG_I)) {
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	07 fc       	sbrc	r0, 7
    102c:	fa cf       	rjmp	.-12     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    102e:	e8 89       	ldd	r30, Y+16	; 0x10
    1030:	f9 89       	ldd	r31, Y+17	; 0x11
    1032:	80 81       	ld	r24, Z
    1034:	85 ff       	sbrs	r24, 5
    1036:	f5 cf       	rjmp	.-22     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
	_tx_udr_empty_irq();
    1038:	ce 01       	movw	r24, r28
    103a:	b7 df       	rcall	.-146    	; 0xfaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    103c:	f2 cf       	rjmp	.-28     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    103e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1040:	fe 01       	movw	r30, r28
    1042:	e8 0f       	add	r30, r24
    1044:	f1 1d       	adc	r31, r1
    1046:	e3 5a       	subi	r30, 0xA3	; 163
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    104c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    104e:	f8 94       	cli
    _tx_buffer_head = i;
    1050:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1052:	ea 89       	ldd	r30, Y+18	; 0x12
    1054:	fb 89       	ldd	r31, Y+19	; 0x13
    1056:	80 81       	ld	r24, Z
    1058:	80 62       	ori	r24, 0x20	; 32
    105a:	0a c0       	rjmp	.+20     	; 0x1070 <__EEPROM_REGION_LENGTH__+0x70>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    105c:	9f b7       	in	r25, 0x3f	; 63
    105e:	f8 94       	cli
      *_udr = c;
    1060:	ee 89       	ldd	r30, Y+22	; 0x16
    1062:	ff 89       	ldd	r31, Y+23	; 0x17
    1064:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1066:	e8 89       	ldd	r30, Y+16	; 0x10
    1068:	f9 89       	ldd	r31, Y+17	; 0x11
    106a:	80 81       	ld	r24, Z
    106c:	83 70       	andi	r24, 0x03	; 3
    106e:	80 64       	ori	r24, 0x40	; 64
    1070:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1072:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	08 95       	ret

00001086 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    108c:	88 8d       	ldd	r24, Y+24	; 0x18
    108e:	88 23       	and	r24, r24
    1090:	c1 f0       	breq	.+48     	; 0x10c2 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1092:	ea 89       	ldd	r30, Y+18	; 0x12
    1094:	fb 89       	ldd	r31, Y+19	; 0x13
    1096:	80 81       	ld	r24, Z
    1098:	85 fd       	sbrc	r24, 5
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <_ZN14HardwareSerial5flushEv+0x20>
    109c:	a8 89       	ldd	r26, Y+16	; 0x10
    109e:	b9 89       	ldd	r27, Y+17	; 0x11
    10a0:	8c 91       	ld	r24, X
    10a2:	86 fd       	sbrc	r24, 6
    10a4:	0e c0       	rjmp	.+28     	; 0x10c2 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	07 fc       	sbrc	r0, 7
    10aa:	f5 cf       	rjmp	.-22     	; 0x1096 <_ZN14HardwareSerial5flushEv+0x10>
    10ac:	80 81       	ld	r24, Z
    10ae:	85 ff       	sbrs	r24, 5
    10b0:	f2 cf       	rjmp	.-28     	; 0x1096 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    10b2:	a8 89       	ldd	r26, Y+16	; 0x10
    10b4:	b9 89       	ldd	r27, Y+17	; 0x11
    10b6:	8c 91       	ld	r24, X
    10b8:	85 ff       	sbrs	r24, 5
    10ba:	ed cf       	rjmp	.-38     	; 0x1096 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    10bc:	ce 01       	movw	r24, r28
    10be:	75 df       	rcall	.-278    	; 0xfaa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    10c0:	e8 cf       	rjmp	.-48     	; 0x1092 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <__tablejump2__>:
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	88 1f       	adc	r24, r24
    10ce:	8b bf       	out	0x3b, r24	; 59
    10d0:	07 90       	elpm	r0, Z+
    10d2:	f6 91       	elpm	r31, Z
    10d4:	e0 2d       	mov	r30, r0
    10d6:	19 94       	eijmp

000010d8 <_exit>:
    10d8:	f8 94       	cli

000010da <__stop_program>:
    10da:	ff cf       	rjmp	.-2      	; 0x10da <__stop_program>
