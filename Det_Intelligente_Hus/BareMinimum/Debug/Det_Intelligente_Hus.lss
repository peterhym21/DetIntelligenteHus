
Det_Intelligente_Hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800200  00007670  00007704  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007670  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030b  0080033c  0080033c  00007840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000014c0  00000000  00000000  000078b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003136c  00000000  00000000  00008d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000073d9  00000000  00000000  0003a0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000dd7e  00000000  00000000  000414b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000055ec  00000000  00000000  0004f234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008d17  00000000  00000000  00054820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00025e49  00000000  00000000  0005d537  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000018b0  00000000  00000000  00083380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	48 c6       	rjmp	.+3216   	; 0xc92 <__dtors_end>
       2:	00 00       	nop
       4:	77 c6       	rjmp	.+3310   	; 0xcf4 <__bad_interrupt>
       6:	00 00       	nop
       8:	75 c6       	rjmp	.+3306   	; 0xcf4 <__bad_interrupt>
       a:	00 00       	nop
       c:	73 c6       	rjmp	.+3302   	; 0xcf4 <__bad_interrupt>
       e:	00 00       	nop
      10:	71 c6       	rjmp	.+3298   	; 0xcf4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c6       	rjmp	.+3294   	; 0xcf4 <__bad_interrupt>
      16:	00 00       	nop
      18:	6d c6       	rjmp	.+3290   	; 0xcf4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c6       	rjmp	.+3286   	; 0xcf4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c6       	rjmp	.+3282   	; 0xcf4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c6       	rjmp	.+3278   	; 0xcf4 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c6       	rjmp	.+3274   	; 0xcf4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	63 c6       	rjmp	.+3270   	; 0xcf4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c6       	rjmp	.+3266   	; 0xcf4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c6       	rjmp	.+3262   	; 0xcf4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c6       	rjmp	.+3258   	; 0xcf4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5b c6       	rjmp	.+3254   	; 0xcf4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	59 c6       	rjmp	.+3250   	; 0xcf4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 ed 26 	jmp	0x4dda	; 0x4dda <__vector_17>
      48:	55 c6       	rjmp	.+3242   	; 0xcf4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	53 c6       	rjmp	.+3238   	; 0xcf4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <__vector_20>
      54:	4f c6       	rjmp	.+3230   	; 0xcf4 <__bad_interrupt>
      56:	00 00       	nop
      58:	4d c6       	rjmp	.+3226   	; 0xcf4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 16 33 	jmp	0x662c	; 0x662c <__vector_23>
      60:	49 c6       	rjmp	.+3218   	; 0xcf4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5b 30 	jmp	0x60b6	; 0x60b6 <__vector_25>
      68:	0c 94 91 30 	jmp	0x6122	; 0x6122 <__vector_26>
      6c:	43 c6       	rjmp	.+3206   	; 0xcf4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	41 c6       	rjmp	.+3202   	; 0xcf4 <__bad_interrupt>
      72:	00 00       	nop
      74:	3f c6       	rjmp	.+3198   	; 0xcf4 <__bad_interrupt>
      76:	00 00       	nop
      78:	3d c6       	rjmp	.+3194   	; 0xcf4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3b c6       	rjmp	.+3190   	; 0xcf4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__vector_32>
      84:	37 c6       	rjmp	.+3182   	; 0xcf4 <__bad_interrupt>
      86:	00 00       	nop
      88:	35 c6       	rjmp	.+3178   	; 0xcf4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 fe 27 	jmp	0x4ffc	; 0x4ffc <__vector_35>
      90:	31 c6       	rjmp	.+3170   	; 0xcf4 <__bad_interrupt>
      92:	00 00       	nop
      94:	2f c6       	rjmp	.+3166   	; 0xcf4 <__bad_interrupt>
      96:	00 00       	nop
      98:	2d c6       	rjmp	.+3162   	; 0xcf4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c1 2a 	jmp	0x5582	; 0x5582 <__vector_39>
      a0:	29 c6       	rjmp	.+3154   	; 0xcf4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	27 c6       	rjmp	.+3150   	; 0xcf4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__vector_42>
      ac:	23 c6       	rjmp	.+3142   	; 0xcf4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	21 c6       	rjmp	.+3138   	; 0xcf4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	1f c6       	rjmp	.+3134   	; 0xcf4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1d c6       	rjmp	.+3130   	; 0xcf4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 71 27 	jmp	0x4ee2	; 0x4ee2 <__vector_47>
      c0:	19 c6       	rjmp	.+3122   	; 0xcf4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	17 c6       	rjmp	.+3118   	; 0xcf4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	15 c6       	rjmp	.+3114   	; 0xcf4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	13 c6       	rjmp	.+3110   	; 0xcf4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	11 c6       	rjmp	.+3106   	; 0xcf4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	0f c6       	rjmp	.+3102   	; 0xcf4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0d c6       	rjmp	.+3098   	; 0xcf4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	0b c6       	rjmp	.+3094   	; 0xcf4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	09 c6       	rjmp	.+3090   	; 0xcf4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	82 34       	cpi	r24, 0x42	; 66
      e6:	87 34       	cpi	r24, 0x47	; 71
      e8:	8c 34       	cpi	r24, 0x4C	; 76
      ea:	96 34       	cpi	r25, 0x46	; 70
      ec:	a0 34       	cpi	r26, 0x40	; 64
      ee:	19 35       	cpi	r17, 0x59	; 89
      f0:	aa 34       	cpi	r26, 0x4A	; 74
      f2:	b2 34       	cpi	r27, 0x42	; 66
      f4:	ba 34       	cpi	r27, 0x4A	; 74
      f6:	c4 34       	cpi	r28, 0x44	; 68
      f8:	ce 34       	cpi	r28, 0x4E	; 78
      fa:	d8 34       	cpi	r29, 0x48	; 72
      fc:	e7 34       	cpi	r30, 0x47	; 71
      fe:	f1 34       	cpi	r31, 0x41	; 65
     100:	19 35       	cpi	r17, 0x59	; 89
     102:	fb 34       	cpi	r31, 0x4B	; 75
     104:	05 35       	cpi	r16, 0x55	; 85
     106:	0f 35       	cpi	r16, 0x5F	; 95
     108:	3c 35       	cpi	r19, 0x5C	; 92
     10a:	3f 35       	cpi	r19, 0x5F	; 95
     10c:	2e 35       	cpi	r18, 0x5E	; 94
     10e:	32 35       	cpi	r19, 0x52	; 82
     110:	38 35       	cpi	r19, 0x58	; 88
     112:	76 35       	cpi	r23, 0x56	; 86
     114:	43 35       	cpi	r20, 0x53	; 83
     116:	47 35       	cpi	r20, 0x57	; 87
     118:	4d 35       	cpi	r20, 0x5D	; 93
     11a:	51 35       	cpi	r21, 0x51	; 81
     11c:	55 35       	cpi	r21, 0x55	; 85
     11e:	5b 35       	cpi	r21, 0x5B	; 91
     120:	5f 35       	cpi	r21, 0x5F	; 95
     122:	63 35       	cpi	r22, 0x53	; 83
     124:	76 35       	cpi	r23, 0x56	; 86
     126:	69 35       	cpi	r22, 0x59	; 89
     128:	6d 35       	cpi	r22, 0x5D	; 93
     12a:	71 35       	cpi	r23, 0x51	; 81

0000012c <__trampolines_end>:
     12c:	25 00       	.word	0x0025	; ????

0000012e <_ZZ16LCDPrintHumidityfE3__c>:
     12e:	48 75 6d 69 64 69 74 79 3a 20 00                    Humidity: .

00000139 <_ZZ12LCDPrintTempfE3__c>:
     139:	54 65 6d 70 65 72 61 74 75 72 3a 20 00              Temperatur: .

00000146 <_ZZ5setupE3__c>:
     146:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
     156:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

00000160 <_ZZ11DisplayMenuvE3__c_2>:
     160:	43 3a 20 48 75 6d 69 64 69 74 79 00                 C: Humidity.

0000016c <_ZZ11DisplayMenuvE3__c_1>:
     16c:	42 3a 20 54 65 6d 70 72 65 74 75 72 65 00           B: Tempreture.

0000017a <_ZZ11DisplayMenuvE3__c_0>:
     17a:	41 3a 20 54 69 6d 65 20 61 6e 64 20 44 61 74 65     A: Time and Date
	...

0000018b <_ZZ11DisplayMenuvE3__c>:
     18b:	4d 65 6e 75 00                                      Menu.

00000190 <_ZL4font>:
     190:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     1a0:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     1b0:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     1c0:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     1d0:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     1e0:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     1f0:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     200:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     210:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     220:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     230:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     240:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     250:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     260:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     270:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     280:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     290:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     2a0:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     2b0:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     2c0:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     2d0:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     2e0:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     2f0:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     300:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     310:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     320:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     330:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     340:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     350:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     360:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     370:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     380:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     390:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     3a0:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     3b0:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     3c0:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     3d0:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     3e0:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     3f0:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     400:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     410:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     420:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     430:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     440:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     450:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     460:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     470:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     480:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     490:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     4a0:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     4b0:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     4c0:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     4d0:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     4e0:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     4f0:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     500:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     510:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     520:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     530:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     540:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     550:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     560:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     570:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     580:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     590:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     5a0:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     5b0:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     5c0:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     5d0:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     5e0:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     5f0:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     600:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     610:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     620:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     630:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     640:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     650:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     660:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     670:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     680:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000690 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     690:	22 00 ff 21 00                                      "..!.

00000695 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     695:	00 01 03 07 0f 1f 3f 7f                             ......?.

0000069d <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     69d:	00 80 c0 e0 f0 f8 fc fe                             ........

000006a5 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     6a5:	db 40 a4 a6 2e af                                   .@....

000006ab <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     6ab:	20 00 a1 c8                                          ...

000006af <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     6af:	d3 00 40 8d                                         ..@.

000006b3 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     6b3:	ae d5 80 a8                                         ....

000006b7 <_ZL12splash2_data>:
     6b7:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     6c7:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     6d7:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     6f3:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     703:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     713:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     723:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     733:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     743:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     753:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     763:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     773:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     783:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     793:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     7a3:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     7b3:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     7c3:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     7d3:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     7e3:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     7f3:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     803:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     813:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     823:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     833:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     84b:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     85b:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     86b:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     87b:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     88b:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000897 <_ZL12splash1_data>:
     897:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     8a7:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     8b7:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     8c7:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     8d7:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     8e7:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     8ff:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     90f:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     91f:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     92f:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     93f:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     94f:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     95f:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     96f:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     97f:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     98f:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     99f:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     9af:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     9bf:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     9cf:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     9df:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     9ef:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     9ff:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     a0f:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     a27:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     a3f:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     a4f:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     a5f:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a6f:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a7f:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a8f:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a9f:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     aaf:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     abf:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     acf:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     adf:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     aef:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     aff:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     b0f:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     b1f:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     b2f:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     b3f:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     b4f:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000b57 <_ZL9daysArray>:
     b57:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000b63 <digital_pin_to_timer_PGM>:
     b63:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     b8f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000ba9 <digital_pin_to_bit_mask_PGM>:
     ba9:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     bb9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     bc9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     bd9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     be9:	04 08 10 20 40 80                                   ... @.

00000bef <digital_pin_to_port_PGM>:
     bef:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     bff:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     c0f:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     c1f:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     c2f:	0b 0b 0b 0b 0b 0b                                   ......

00000c35 <port_to_input_PGM>:
     c35:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     c45:	00 01 00 00 03 01 06 01 09 01                       ..........

00000c4f <port_to_output_PGM>:
     c4f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     c5f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000c69 <port_to_mode_PGM>:
     c69:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     c79:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000c84 <__ctors_start>:
     c84:	1c 07       	cpc	r17, r28
     c86:	f7 07       	cpc	r31, r23
     c88:	16 0a       	sbc	r1, r22
     c8a:	ad 0b       	sbc	r26, r29
     c8c:	4e 2d       	mov	r20, r14
     c8e:	c3 30       	cpi	r28, 0x03	; 3

00000c90 <__ctors_end>:
     c90:	4c 0a       	sbc	r4, r28

00000c92 <__dtors_end>:
     c92:	11 24       	eor	r1, r1
     c94:	1f be       	out	0x3f, r1	; 63
     c96:	cf ef       	ldi	r28, 0xFF	; 255
     c98:	d1 e2       	ldi	r29, 0x21	; 33
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	0c bf       	out	0x3c, r16	; 60

00000ca2 <__do_copy_data>:
     ca2:	13 e0       	ldi	r17, 0x03	; 3
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b2 e0       	ldi	r27, 0x02	; 2
     ca8:	e0 e7       	ldi	r30, 0x70	; 112
     caa:	f6 e7       	ldi	r31, 0x76	; 118
     cac:	00 e0       	ldi	r16, 0x00	; 0
     cae:	0b bf       	out	0x3b, r16	; 59
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <__do_copy_data+0x14>
     cb2:	07 90       	elpm	r0, Z+
     cb4:	0d 92       	st	X+, r0
     cb6:	ac 33       	cpi	r26, 0x3C	; 60
     cb8:	b1 07       	cpc	r27, r17
     cba:	d9 f7       	brne	.-10     	; 0xcb2 <__do_copy_data+0x10>

00000cbc <__do_clear_bss>:
     cbc:	26 e0       	ldi	r18, 0x06	; 6
     cbe:	ac e3       	ldi	r26, 0x3C	; 60
     cc0:	b3 e0       	ldi	r27, 0x03	; 3
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <.do_clear_bss_start>

00000cc4 <.do_clear_bss_loop>:
     cc4:	1d 92       	st	X+, r1

00000cc6 <.do_clear_bss_start>:
     cc6:	a7 34       	cpi	r26, 0x47	; 71
     cc8:	b2 07       	cpc	r27, r18
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <.do_clear_bss_loop>

00000ccc <__do_global_ctors>:
     ccc:	16 e0       	ldi	r17, 0x06	; 6
     cce:	c8 e4       	ldi	r28, 0x48	; 72
     cd0:	d6 e0       	ldi	r29, 0x06	; 6
     cd2:	00 e0       	ldi	r16, 0x00	; 0
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <__do_global_ctors+0x16>
     cd6:	21 97       	sbiw	r28, 0x01	; 1
     cd8:	01 09       	sbc	r16, r1
     cda:	80 2f       	mov	r24, r16
     cdc:	fe 01       	movw	r30, r28
     cde:	0e 94 a6 38 	call	0x714c	; 0x714c <__tablejump2__>
     ce2:	c2 34       	cpi	r28, 0x42	; 66
     ce4:	d1 07       	cpc	r29, r17
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	08 07       	cpc	r16, r24
     cea:	a9 f7       	brne	.-22     	; 0xcd6 <__do_global_ctors+0xa>
     cec:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <main>
     cf0:	0c 94 27 3b 	jmp	0x764e	; 0x764e <__do_global_dtors>

00000cf4 <__bad_interrupt>:
     cf4:	85 c9       	rjmp	.-3318   	; 0x0 <__vectors>

00000cf6 <_Z8GetHumidv>:
DHT dht(DHTPIN, DHTTYPE);


float GetHumid()
{
	return dht.readHumidity();
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	8c e3       	ldi	r24, 0x3C	; 60
     cfa:	93 e0       	ldi	r25, 0x03	; 3
     cfc:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <_ZN3DHT12readHumidityEb>

00000d00 <_Z7GetTempv>:
}

float GetTemp()
{
	return dht.readTemperature();
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	8c e3       	ldi	r24, 0x3C	; 60
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <_ZN3DHT15readTemperatureEbb>

00000d0c <_Z7TooColdv>:
	}
}

void TooCold()
{
	TempTooCold();
     d0c:	c9 d3       	rcall	.+1938   	; 0x14a0 <_Z11TempTooColdv>
	TurnOnRedLED();
     d0e:	fb d1       	rcall	.+1014   	; 0x1106 <_Z12TurnOnRedLEDv>
	TurnOFFGreenLED();
     d10:	0a d2       	rcall	.+1044   	; 0x1126 <_Z15TurnOFFGreenLEDv>
     d12:	0d c2       	rjmp	.+1050   	; 0x112e <_Z14TurnOFFBlueLEDv>

00000d14 <_Z6TooHotv>:
	TurnOFFBlueLED();
     d14:	f9 d3       	rcall	.+2034   	; 0x1508 <_Z10TempTooHotv>
     d16:	ff d1       	rcall	.+1022   	; 0x1116 <_Z13TurnOnBlueLEDv>

void TooHot()
{
	TempTooHot();
	TurnOnBlueLED();
	TurnOFFGreenLED();
     d18:	06 d2       	rcall	.+1036   	; 0x1126 <_Z15TurnOFFGreenLEDv>
     d1a:	01 c2       	rjmp	.+1026   	; 0x111e <_Z13TurnOFFRedLEDv>

00000d1c <_Z11PerfektTempv>:
	TurnOFFRedLED();
     d1c:	43 d4       	rcall	.+2182   	; 0x15a4 <_Z11TempPerfektv>
     d1e:	f7 d1       	rcall	.+1006   	; 0x110e <_Z14TurnOnGreenLEDv>

void PerfektTemp()
{
	TempPerfekt();
	TurnOnGreenLED();
	TurnOFFRedLED();
     d20:	fe d1       	rcall	.+1020   	; 0x111e <_Z13TurnOFFRedLEDv>
     d22:	05 c2       	rjmp	.+1034   	; 0x112e <_Z14TurnOFFBlueLEDv>

00000d24 <_Z14TjekTempInHousv>:
	TurnOFFBlueLED();
     d24:	4f 92       	push	r4
     d26:	5f 92       	push	r5
	return dht.readTemperature();
}


void TjekTempInHous()
{
     d28:	6f 92       	push	r6
     d2a:	7f 92       	push	r7
     d2c:	8f 92       	push	r8
     d2e:	9f 92       	push	r9
     d30:	af 92       	push	r10
     d32:	bf 92       	push	r11
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
	float tempC = GetTemp();
     d3c:	e1 df       	rcall	.-62     	; 0xd00 <_Z7GetTempv>
     d3e:	6b 01       	movw	r12, r22
     d40:	7c 01       	movw	r14, r24
	if (tempC < (SetNumber - Hysterese ))
     d42:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <Hysterese>
     d46:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <Hysterese+0x1>
     d4a:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <Hysterese+0x2>
     d4e:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <Hysterese+0x3>
     d52:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <SetNumber>
     d56:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <SetNumber+0x1>
     d5a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SetNumber+0x2>
     d5e:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <SetNumber+0x3>
     d62:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__subsf3>
     d66:	9b 01       	movw	r18, r22
     d68:	ac 01       	movw	r20, r24
     d6a:	c7 01       	movw	r24, r14
     d6c:	b6 01       	movw	r22, r12
     d6e:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <__cmpsf2>
	{
		TooCold();
     d72:	87 fd       	sbrc	r24, 7
     d74:	cb df       	rcall	.-106    	; 0xd0c <_Z7TooColdv>
	}
	if (tempC > (SetNumber + Hysterese ))
     d76:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <Hysterese>
     d7a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <Hysterese+0x1>
     d7e:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <Hysterese+0x2>
     d82:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <Hysterese+0x3>
     d86:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <SetNumber>
     d8a:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <SetNumber+0x1>
     d8e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SetNumber+0x2>
     d92:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <SetNumber+0x3>
     d96:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__addsf3>
     d9a:	9b 01       	movw	r18, r22
     d9c:	ac 01       	movw	r20, r24
     d9e:	c7 01       	movw	r24, r14
     da0:	b6 01       	movw	r22, r12
     da2:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__gesf2>
     da6:	18 16       	cp	r1, r24
	{
		TooHot();
     da8:	0c f4       	brge	.+2      	; 0xdac <_Z14TjekTempInHousv+0x88>
     daa:	b4 df       	rcall	.-152    	; 0xd14 <_Z6TooHotv>
	}
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
     dac:	80 90 0a 02 	lds	r8, 0x020A	; 0x80020a <SetNumber>
     db0:	90 90 0b 02 	lds	r9, 0x020B	; 0x80020b <SetNumber+0x1>
     db4:	a0 90 0c 02 	lds	r10, 0x020C	; 0x80020c <SetNumber+0x2>
     db8:	b0 90 0d 02 	lds	r11, 0x020D	; 0x80020d <SetNumber+0x3>
     dbc:	40 90 06 02 	lds	r4, 0x0206	; 0x800206 <Hysterese>
     dc0:	50 90 07 02 	lds	r5, 0x0207	; 0x800207 <Hysterese+0x1>
     dc4:	60 90 08 02 	lds	r6, 0x0208	; 0x800208 <Hysterese+0x2>
     dc8:	70 90 09 02 	lds	r7, 0x0209	; 0x800209 <Hysterese+0x3>
     dcc:	a3 01       	movw	r20, r6
     dce:	92 01       	movw	r18, r4
     dd0:	c5 01       	movw	r24, r10
     dd2:	b4 01       	movw	r22, r8
     dd4:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__subsf3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	c7 01       	movw	r24, r14
     dde:	b6 01       	movw	r22, r12
     de0:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__gesf2>
     de4:	18 16       	cp	r1, r24
     de6:	dc f4       	brge	.+54     	; 0xe1e <_Z14TjekTempInHousv+0xfa>
     de8:	a3 01       	movw	r20, r6
     dea:	92 01       	movw	r18, r4
     dec:	c5 01       	movw	r24, r10
     dee:	b4 01       	movw	r22, r8
     df0:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__addsf3>
     df4:	9b 01       	movw	r18, r22
     df6:	ac 01       	movw	r20, r24
     df8:	c7 01       	movw	r24, r14
     dfa:	b6 01       	movw	r22, r12
     dfc:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <__cmpsf2>
     e00:	87 ff       	sbrs	r24, 7
     e02:	0d c0       	rjmp	.+26     	; 0xe1e <_Z14TjekTempInHousv+0xfa>
	{
		PerfektTemp();
	}
}
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	bf 90       	pop	r11
     e0e:	af 90       	pop	r10
     e10:	9f 90       	pop	r9
     e12:	8f 90       	pop	r8
     e14:	7f 90       	pop	r7
     e16:	6f 90       	pop	r6
     e18:	5f 90       	pop	r5
	{
		TooHot();
	}
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
	{
		PerfektTemp();
     e1a:	4f 90       	pop	r4
     e1c:	7f cf       	rjmp	.-258    	; 0xd1c <_Z11PerfektTempv>
	}
}
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	af 90       	pop	r10
     e2a:	9f 90       	pop	r9
     e2c:	8f 90       	pop	r8
     e2e:	7f 90       	pop	r7
     e30:	6f 90       	pop	r6
     e32:	5f 90       	pop	r5
     e34:	4f 90       	pop	r4
     e36:	08 95       	ret

00000e38 <_GLOBAL__sub_I_SetNumber>:
#define DHTPIN 2
#define DHTTYPE DHT11
float SetNumber = 26;
float Hysterese = 1;

DHT dht(DHTPIN, DHTTYPE);
     e38:	26 e0       	ldi	r18, 0x06	; 6
     e3a:	4b e0       	ldi	r20, 0x0B	; 11
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	8c e3       	ldi	r24, 0x3C	; 60
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <_ZN3DHTC1Ehhh>

00000e46 <_Z12LCDPrintTempf>:

int rs = 22, en = 23, d4 = 24, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

void LCDPrintTemp(float temp)
{
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	6b 01       	movw	r12, r22
     e50:	7c 01       	movw	r14, r24
	lcd.clear();
     e52:	8f e4       	ldi	r24, 0x4F	; 79
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN13LiquidCrystal5clearEv>
	lcd.print(F("Temperatur: "));
     e5a:	69 e3       	ldi	r22, 0x39	; 57
     e5c:	71 e0       	ldi	r23, 0x01	; 1
     e5e:	8f e4       	ldi	r24, 0x4F	; 79
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	0e 94 3c 31 	call	0x6278	; 0x6278 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.print(temp, 0);
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	b7 01       	movw	r22, r14
     e6c:	a6 01       	movw	r20, r12
     e6e:	8f e4       	ldi	r24, 0x4F	; 79
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	0e 94 15 33 	call	0x662a	; 0x662a <_ZN5Print5printEdi>
	lcd.print((char)223);
     e76:	6f ed       	ldi	r22, 0xDF	; 223
     e78:	8f e4       	ldi	r24, 0x4F	; 79
     e7a:	93 e0       	ldi	r25, 0x03	; 3
}
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
void LCDPrintTemp(float temp)
{
	lcd.clear();
	lcd.print(F("Temperatur: "));
	lcd.print(temp, 0);
	lcd.print((char)223);
     e84:	0c 94 61 31 	jmp	0x62c2	; 0x62c2 <_ZN5Print5printEc>

00000e88 <_Z16LCDPrintHumidityf>:
}

void LCDPrintHumidity(float humid)
{
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	6b 01       	movw	r12, r22
     e92:	7c 01       	movw	r14, r24
	lcd.clear();
     e94:	8f e4       	ldi	r24, 0x4F	; 79
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN13LiquidCrystal5clearEv>
	lcd.print(F("Humidity: "));
     e9c:	6e e2       	ldi	r22, 0x2E	; 46
     e9e:	71 e0       	ldi	r23, 0x01	; 1
     ea0:	8f e4       	ldi	r24, 0x4F	; 79
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	0e 94 3c 31 	call	0x6278	; 0x6278 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.print(humid, 0);
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	b7 01       	movw	r22, r14
     eae:	a6 01       	movw	r20, r12
     eb0:	8f e4       	ldi	r24, 0x4F	; 79
     eb2:	93 e0       	ldi	r25, 0x03	; 3
     eb4:	0e 94 15 33 	call	0x662a	; 0x662a <_ZN5Print5printEdi>
	lcd.print(F("%"));
     eb8:	6c e2       	ldi	r22, 0x2C	; 44
     eba:	71 e0       	ldi	r23, 0x01	; 1
     ebc:	8f e4       	ldi	r24, 0x4F	; 79
     ebe:	93 e0       	ldi	r25, 0x03	; 3
}
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
void LCDPrintHumidity(float humid)
{
	lcd.clear();
	lcd.print(F("Humidity: "));
	lcd.print(humid, 0);
	lcd.print(F("%"));
     ec8:	0c 94 3c 31 	jmp	0x6278	; 0x6278 <_ZN5Print5printEPK19__FlashStringHelper>

00000ecc <_Z19LCDPrintTimeAndDate11RTCDateTime>:
}


void LCDPrintTimeAndDate(RTCDateTime dt)
{
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	2c 97       	sbiw	r28, 0x0c	; 12
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	e9 82       	std	Y+1, r14	; 0x01
     eea:	fa 82       	std	Y+2, r15	; 0x02
     eec:	0b 83       	std	Y+3, r16	; 0x03
     eee:	1c 83       	std	Y+4, r17	; 0x04
     ef0:	2d 83       	std	Y+5, r18	; 0x05
     ef2:	3e 83       	std	Y+6, r19	; 0x06
     ef4:	4f 83       	std	Y+7, r20	; 0x07
	lcd.clear();
     ef6:	8f e4       	ldi	r24, 0x4F	; 79
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	0e 94 94 20 	call	0x4128	; 0x4128 <_ZN13LiquidCrystal5clearEv>
	lcd.print(AddLeadingZero(dt.year));   lcd.print("-");
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <_Z14AddLeadingZeroi>
     f06:	4a e0       	ldi	r20, 0x0A	; 10
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	bc 01       	movw	r22, r24
     f0c:	8f e4       	ldi	r24, 0x4F	; 79
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	0e 94 38 32 	call	0x6470	; 0x6470 <_ZN5Print5printEii>
     f14:	69 e3       	ldi	r22, 0x39	; 57
     f16:	72 e0       	ldi	r23, 0x02	; 2
     f18:	8f e4       	ldi	r24, 0x4F	; 79
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.month));  lcd.print("-");
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <_Z14AddLeadingZeroi>
     f28:	4a e0       	ldi	r20, 0x0A	; 10
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	bc 01       	movw	r22, r24
     f2e:	8f e4       	ldi	r24, 0x4F	; 79
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	0e 94 38 32 	call	0x6470	; 0x6470 <_ZN5Print5printEii>
     f36:	69 e3       	ldi	r22, 0x39	; 57
     f38:	72 e0       	ldi	r23, 0x02	; 2
     f3a:	8f e4       	ldi	r24, 0x4F	; 79
     f3c:	93 e0       	ldi	r25, 0x03	; 3
     f3e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.day));    lcd.print(" ");
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <_Z14AddLeadingZeroi>
     f4a:	4a e0       	ldi	r20, 0x0A	; 10
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	bc 01       	movw	r22, r24
     f50:	8f e4       	ldi	r24, 0x4F	; 79
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	0e 94 38 32 	call	0x6470	; 0x6470 <_ZN5Print5printEii>
     f58:	6b e3       	ldi	r22, 0x3B	; 59
     f5a:	72 e0       	ldi	r23, 0x02	; 2
     f5c:	8f e4       	ldi	r24, 0x4F	; 79
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	0e 94 60 31 	call	0x62c0	; 0x62c0 <_ZN5Print5printEPKc>
	lcd.setCursor(0, 1);
     f64:	41 e0       	ldi	r20, 0x01	; 1
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	8f e4       	ldi	r24, 0x4F	; 79
     f6a:	93 e0       	ldi	r25, 0x03	; 3
     f6c:	0e 94 9a 20 	call	0x4134	; 0x4134 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(AddLeadingZero(dt.hour));   lcd.print(":");
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <_Z14AddLeadingZeroi>
     f78:	4a e0       	ldi	r20, 0x0A	; 10
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	bc 01       	movw	r22, r24
     f7e:	8f e4       	ldi	r24, 0x4F	; 79
     f80:	93 e0       	ldi	r25, 0x03	; 3
     f82:	0e 94 38 32 	call	0x6470	; 0x6470 <_ZN5Print5printEii>
     f86:	6d e3       	ldi	r22, 0x3D	; 61
     f88:	72 e0       	ldi	r23, 0x02	; 2
     f8a:	8f e4       	ldi	r24, 0x4F	; 79
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.minute)); lcd.print(":");
     f92:	8e 81       	ldd	r24, Y+6	; 0x06
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <_Z14AddLeadingZeroi>
     f9a:	4a e0       	ldi	r20, 0x0A	; 10
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	bc 01       	movw	r22, r24
     fa0:	8f e4       	ldi	r24, 0x4F	; 79
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	0e 94 38 32 	call	0x6470	; 0x6470 <_ZN5Print5printEii>
     fa8:	6d e3       	ldi	r22, 0x3D	; 61
     faa:	72 e0       	ldi	r23, 0x02	; 2
     fac:	8f e4       	ldi	r24, 0x4F	; 79
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	0e 94 60 31 	call	0x62c0	; 0x62c0 <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.second)); lcd.print("");
     fb4:	8f 81       	ldd	r24, Y+7	; 0x07
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <_Z14AddLeadingZeroi>
     fbc:	4a e0       	ldi	r20, 0x0A	; 10
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	bc 01       	movw	r22, r24
     fc2:	8f e4       	ldi	r24, 0x4F	; 79
     fc4:	93 e0       	ldi	r25, 0x03	; 3
     fc6:	0e 94 38 32 	call	0x6470	; 0x6470 <_ZN5Print5printEii>
     fca:	6f e2       	ldi	r22, 0x2F	; 47
     fcc:	73 e0       	ldi	r23, 0x03	; 3
     fce:	8f e4       	ldi	r24, 0x4F	; 79
     fd0:	93 e0       	ldi	r25, 0x03	; 3
     fd2:	2c 96       	adiw	r28, 0x0c	; 12
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
	lcd.print(AddLeadingZero(dt.month));  lcd.print("-");
	lcd.print(AddLeadingZero(dt.day));    lcd.print(" ");
	lcd.setCursor(0, 1);
	lcd.print(AddLeadingZero(dt.hour));   lcd.print(":");
	lcd.print(AddLeadingZero(dt.minute)); lcd.print(":");
	lcd.print(AddLeadingZero(dt.second)); lcd.print("");
     fea:	0c 94 60 31 	jmp	0x62c0	; 0x62c0 <_ZN5Print5printEPKc>

00000fee <_GLOBAL__sub_I_rs>:
     fee:	cf 92       	push	r12
     ff0:	ef 92       	push	r14
     ff2:	0f 93       	push	r16
#include "LCD.h"

int rs = 22, en = 23, d4 = 24, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     ff4:	c0 90 0e 02 	lds	r12, 0x020E	; 0x80020e <d7>
     ff8:	e0 90 10 02 	lds	r14, 0x0210	; 0x800210 <d6>
     ffc:	00 91 12 02 	lds	r16, 0x0212	; 0x800212 <d5>
    1000:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <d4>
    1004:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <en>
    1008:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <rs>
    100c:	8f e4       	ldi	r24, 0x4F	; 79
    100e:	93 e0       	ldi	r25, 0x03	; 3
    1010:	0e 94 4d 21 	call	0x429a	; 0x429a <_ZN13LiquidCrystalC1Ehhhhhh>
	lcd.print(AddLeadingZero(dt.day));    lcd.print(" ");
	lcd.setCursor(0, 1);
	lcd.print(AddLeadingZero(dt.hour));   lcd.print(":");
	lcd.print(AddLeadingZero(dt.minute)); lcd.print(":");
	lcd.print(AddLeadingZero(dt.second)); lcd.print("");
    1014:	0f 91       	pop	r16
    1016:	ef 90       	pop	r14
    1018:	cf 90       	pop	r12
    101a:	08 95       	ret

0000101c <_Z15ChangeRGBAnalogv>:
int R_brightness = 0;
int G_brightness = 0;
int B_brightness = 0;

void ChangeRGBAnalog()
{
    101c:	af 92       	push	r10
    101e:	bf 92       	push	r11
    1020:	cf 92       	push	r12
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
	R_brightness = map(analogRead(A0), 0, 1023, 0, 255);
    102e:	86 e3       	ldi	r24, 0x36	; 54
    1030:	0e 94 37 34 	call	0x686e	; 0x686e <analogRead>
    1034:	bc 01       	movw	r22, r24
    1036:	99 0f       	add	r25, r25
    1038:	88 0b       	sbc	r24, r24
    103a:	99 0b       	sbc	r25, r25
    103c:	1f 92       	push	r1
    103e:	1f 92       	push	r1
    1040:	1f 92       	push	r1
    1042:	cf ef       	ldi	r28, 0xFF	; 255
    1044:	cf 93       	push	r28
    1046:	a1 2c       	mov	r10, r1
    1048:	b1 2c       	mov	r11, r1
    104a:	65 01       	movw	r12, r10
    104c:	ee 24       	eor	r14, r14
    104e:	ea 94       	dec	r14
    1050:	13 e0       	ldi	r17, 0x03	; 3
    1052:	f1 2e       	mov	r15, r17
    1054:	00 e0       	ldi	r16, 0x00	; 0
    1056:	10 e0       	ldi	r17, 0x00	; 0
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	a9 01       	movw	r20, r18
    105e:	0e 94 09 36 	call	0x6c12	; 0x6c12 <_Z3maplllll>
    1062:	70 93 6c 03 	sts	0x036C, r23	; 0x80036c <R_brightness+0x1>
    1066:	60 93 6b 03 	sts	0x036B, r22	; 0x80036b <R_brightness>
	G_brightness = map(analogRead(A1), 0, 1023, 0, 255);
    106a:	87 e3       	ldi	r24, 0x37	; 55
    106c:	0e 94 37 34 	call	0x686e	; 0x686e <analogRead>
    1070:	bc 01       	movw	r22, r24
    1072:	99 0f       	add	r25, r25
    1074:	88 0b       	sbc	r24, r24
    1076:	99 0b       	sbc	r25, r25
    1078:	1f 92       	push	r1
    107a:	1f 92       	push	r1
    107c:	1f 92       	push	r1
    107e:	cf 93       	push	r28
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	a9 01       	movw	r20, r18
    1086:	0e 94 09 36 	call	0x6c12	; 0x6c12 <_Z3maplllll>
    108a:	70 93 6a 03 	sts	0x036A, r23	; 0x80036a <G_brightness+0x1>
    108e:	60 93 69 03 	sts	0x0369, r22	; 0x800369 <G_brightness>
	B_brightness = map(analogRead(A2), 0, 1023, 0, 255);
    1092:	88 e3       	ldi	r24, 0x38	; 56
    1094:	0e 94 37 34 	call	0x686e	; 0x686e <analogRead>
    1098:	bc 01       	movw	r22, r24
    109a:	99 0f       	add	r25, r25
    109c:	88 0b       	sbc	r24, r24
    109e:	99 0b       	sbc	r25, r25
    10a0:	1f 92       	push	r1
    10a2:	1f 92       	push	r1
    10a4:	1f 92       	push	r1
    10a6:	cf 93       	push	r28
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	0e 94 09 36 	call	0x6c12	; 0x6c12 <_Z3maplllll>
    10b2:	70 93 68 03 	sts	0x0368, r23	; 0x800368 <B_brightness+0x1>
    10b6:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <B_brightness>
	
	analogWrite(RedRGB, R_brightness);
    10ba:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <R_brightness>
    10be:	70 91 6c 03 	lds	r23, 0x036C	; 0x80036c <R_brightness+0x1>
    10c2:	8a e2       	ldi	r24, 0x2A	; 42
    10c4:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <analogWrite>
	analogWrite(GreenRGB, G_brightness);
    10c8:	60 91 69 03 	lds	r22, 0x0369	; 0x800369 <G_brightness>
    10cc:	70 91 6a 03 	lds	r23, 0x036A	; 0x80036a <G_brightness+0x1>
    10d0:	8b e2       	ldi	r24, 0x2B	; 43
    10d2:	0e 94 5c 34 	call	0x68b8	; 0x68b8 <analogWrite>
	analogWrite(BlueRGB, B_brightness);
    10d6:	8d b7       	in	r24, 0x3d	; 61
    10d8:	9e b7       	in	r25, 0x3e	; 62
    10da:	0c 96       	adiw	r24, 0x0c	; 12
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	9e bf       	out	0x3e, r25	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	8d bf       	out	0x3d, r24	; 61
    10e6:	60 91 67 03 	lds	r22, 0x0367	; 0x800367 <B_brightness>
    10ea:	70 91 68 03 	lds	r23, 0x0368	; 0x800368 <B_brightness+0x1>
    10ee:	8c e2       	ldi	r24, 0x2C	; 44
	
}
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	bf 90       	pop	r11
    1100:	af 90       	pop	r10
	G_brightness = map(analogRead(A1), 0, 1023, 0, 255);
	B_brightness = map(analogRead(A2), 0, 1023, 0, 255);
	
	analogWrite(RedRGB, R_brightness);
	analogWrite(GreenRGB, G_brightness);
	analogWrite(BlueRGB, B_brightness);
    1102:	0c 94 5c 34 	jmp	0x68b8	; 0x68b8 <analogWrite>

00001106 <_Z12TurnOnRedLEDv>:
}


void TurnOnRedLED()
{
	digitalWrite(RedLED, HIGH);
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	89 e0       	ldi	r24, 0x09	; 9
    110a:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <digitalWrite>

0000110e <_Z14TurnOnGreenLEDv>:
}

void TurnOnGreenLED()
{
	digitalWrite(GreenLED, HIGH);
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	87 e0       	ldi	r24, 0x07	; 7
    1112:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <digitalWrite>

00001116 <_Z13TurnOnBlueLEDv>:
}

void TurnOnBlueLED()
{
	digitalWrite(BlueLED, HIGH);
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	88 e0       	ldi	r24, 0x08	; 8
    111a:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <digitalWrite>

0000111e <_Z13TurnOFFRedLEDv>:
}

void TurnOFFRedLED()
{
	digitalWrite(RedLED, LOW);
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	89 e0       	ldi	r24, 0x09	; 9
    1122:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <digitalWrite>

00001126 <_Z15TurnOFFGreenLEDv>:
}

void TurnOFFGreenLED()
{
	digitalWrite(GreenLED, LOW);
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	87 e0       	ldi	r24, 0x07	; 7
    112a:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <digitalWrite>

0000112e <_Z14TurnOFFBlueLEDv>:
}

void TurnOFFBlueLED()
{
	digitalWrite(BlueLED, LOW);
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	88 e0       	ldi	r24, 0x08	; 8
    1132:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <digitalWrite>

00001136 <setup>:
long previousMillis = 0;
long interval = 1000;
DS3231 clock;

void setup()
{
    1136:	0f 93       	push	r16
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1138:	26 e0       	ldi	r18, 0x06	; 6
    113a:	40 e8       	ldi	r20, 0x80	; 128
    113c:	55 e2       	ldi	r21, 0x25	; 37
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	8d e9       	ldi	r24, 0x9D	; 157
    1144:	95 e0       	ldi	r25, 0x05	; 5
    1146:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <_ZN14HardwareSerial5beginEmh>
	#pragma region Begins
	Serial.begin(9600);
	SPI.begin();
    114a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <_ZN8SPIClass5beginEv>
	mfrc522.PCD_Init();
    114e:	83 e2       	ldi	r24, 0x23	; 35
    1150:	94 e0       	ldi	r25, 0x04	; 4
    1152:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN7MFRC5228PCD_InitEv>
	dht.begin();
    1156:	67 e3       	ldi	r22, 0x37	; 55
    1158:	8c e3       	ldi	r24, 0x3C	; 60
    115a:	93 e0       	ldi	r25, 0x03	; 3
    115c:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN3DHT5beginEh>
	lcd.begin(16, 2);
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	42 e0       	ldi	r20, 0x02	; 2
    1164:	60 e1       	ldi	r22, 0x10	; 16
    1166:	8f e4       	ldi	r24, 0x4F	; 79
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	0e 94 b3 20 	call	0x4166	; 0x4166 <_ZN13LiquidCrystal5beginEhhh>
	clock.begin();
    116e:	8d e6       	ldi	r24, 0x6D	; 109
    1170:	93 e0       	ldi	r25, 0x03	; 3
    1172:	0e 94 c5 1c 	call	0x398a	; 0x398a <_ZN6DS32315beginEv>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    1176:	80 e1       	ldi	r24, 0x10	; 16
    1178:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	TCCR1A = 0;                 // clear control register A 
    117c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
	if (cycles < TIMER1_RESOLUTION) {
		clockSelectBits = _BV(CS10);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles;
    1186:	80 e5       	ldi	r24, 0x50	; 80
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <_ZN8TimerOne9pwmPeriodE+0x1>
    118e:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <_ZN8TimerOne9pwmPeriodE>
		pwmPeriod = cycles / 1024;
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
		pwmPeriod = TIMER1_RESOLUTION - 1;
	}
	ICR1 = pwmPeriod;
    1192:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7c0087>
    1196:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7c0086>
	TCCR1B = _BV(WGM13) | clockSelectBits;
    119a:	81 e1       	ldi	r24, 0x11	; 17
    119c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	Timer1.initialize(10);
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
    11a0:	01 e0       	ldi	r16, 0x01	; 1
    11a2:	21 e0       	ldi	r18, 0x01	; 1
    11a4:	4c e3       	ldi	r20, 0x3C	; 60
    11a6:	62 e0       	ldi	r22, 0x02	; 2
    11a8:	83 ee       	ldi	r24, 0xE3	; 227
    11aa:	93 e0       	ldi	r25, 0x03	; 3
    11ac:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN16Adafruit_SSD13065beginEhhbb>
    11b0:	81 11       	cpse	r24, r1
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <setup+0x8c>
	{ // Address for 128x64
		Serial.println(F("SSD1306 allocation failed"));
    11b4:	66 e4       	ldi	r22, 0x46	; 70
    11b6:	71 e0       	ldi	r23, 0x01	; 1
    11b8:	8d e9       	ldi	r24, 0x9D	; 157
    11ba:	95 e0       	ldi	r25, 0x05	; 5
    11bc:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    11c0:	ff cf       	rjmp	.-2      	; 0x11c0 <setup+0x8a>
		for(;;); // Don't proceed, loop forever
	}
	#pragma endregion Begins
	
	#pragma region PinMode
	pinMode(RedRGB, OUTPUT);
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	8a e2       	ldi	r24, 0x2A	; 42
    11c6:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
	pinMode(GreenRGB, OUTPUT);
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	8b e2       	ldi	r24, 0x2B	; 43
    11ce:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
	pinMode(BlueRGB, OUTPUT);
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	8c e2       	ldi	r24, 0x2C	; 44
    11d6:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
	pinMode(RedLED, OUTPUT);
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	89 e0       	ldi	r24, 0x09	; 9
    11de:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
	pinMode(GreenLED, OUTPUT);
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	87 e0       	ldi	r24, 0x07	; 7
    11e6:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
	pinMode(BlueLED, OUTPUT);
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	88 e0       	ldi	r24, 0x08	; 8
    11ee:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
	#pragma endregion PinMode
	
	display.clearDisplay();
    11f2:	83 ee       	ldi	r24, 0xE3	; 227
    11f4:	93 e0       	ldi	r25, 0x03	; 3
    11f6:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZN16Adafruit_SSD130612clearDisplayEv>
	lcd.clear();
    11fa:	8f e4       	ldi	r24, 0x4F	; 79
    11fc:	93 e0       	ldi	r25, 0x03	; 3
	
}
    11fe:	0f 91       	pop	r16
	pinMode(GreenLED, OUTPUT);
	pinMode(BlueLED, OUTPUT);
	#pragma endregion PinMode
	
	display.clearDisplay();
	lcd.clear();
    1200:	0c 94 94 20 	jmp	0x4128	; 0x4128 <_ZN13LiquidCrystal5clearEv>

00001204 <loop>:
	
}

void loop()
{
    1204:	8f 92       	push	r8
    1206:	9f 92       	push	r9
    1208:	af 92       	push	r10
    120a:	bf 92       	push	r11
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	62 97       	sbiw	r28, 0x12	; 18
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
	if (Keycard)
    1228:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <Keycard>
    122c:	88 23       	and	r24, r24
    122e:	09 f4       	brne	.+2      	; 0x1232 <loop+0x2e>
    1230:	4f c0       	rjmp	.+158    	; 0x12d0 <loop+0xcc>
	{
		unsigned long currentMillis = millis();
    1232:	0e 94 60 33 	call	0x66c0	; 0x66c0 <millis>
    1236:	4b 01       	movw	r8, r22
    1238:	5c 01       	movw	r10, r24
		DisplayMenu();
    123a:	86 d0       	rcall	.+268    	; 0x1348 <_Z11DisplayMenuv>
		char key = keypad.getKey();
    123c:	8f e7       	ldi	r24, 0x7F	; 127
    123e:	93 e0       	ldi	r25, 0x03	; 3
    1240:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <_ZN6Keypad6getKeyEv>
    1244:	18 2f       	mov	r17, r24
		if (key != NO_KEY){
    1246:	88 23       	and	r24, r24
    1248:	49 f0       	breq	.+18     	; 0x125c <loop+0x58>
			Serial.println(key);
    124a:	68 2f       	mov	r22, r24
    124c:	8d e9       	ldi	r24, 0x9D	; 157
    124e:	95 e0       	ldi	r25, 0x05	; 5
    1250:	0e 94 8b 31 	call	0x6316	; 0x6316 <_ZN5Print7printlnEc>
			Menu(key, &TimeAndDate);
    1254:	6d e7       	ldi	r22, 0x7D	; 125
    1256:	73 e0       	ldi	r23, 0x03	; 3
    1258:	81 2f       	mov	r24, r17
    125a:	b8 d0       	rcall	.+368    	; 0x13cc <_Z4MenucPb>
		}
		if (currentMillis - previousMillis >= interval && TimeAndDate )
    125c:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <previousMillis>
    1260:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <previousMillis+0x1>
    1264:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <previousMillis+0x2>
    1268:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <previousMillis+0x3>
    126c:	b5 01       	movw	r22, r10
    126e:	a4 01       	movw	r20, r8
    1270:	48 1b       	sub	r20, r24
    1272:	59 0b       	sbc	r21, r25
    1274:	6a 0b       	sbc	r22, r26
    1276:	7b 0b       	sbc	r23, r27
    1278:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <interval>
    127c:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <interval+0x1>
    1280:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <interval+0x2>
    1284:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <interval+0x3>
    1288:	48 17       	cp	r20, r24
    128a:	59 07       	cpc	r21, r25
    128c:	6a 07       	cpc	r22, r26
    128e:	7b 07       	cpc	r23, r27
    1290:	e8 f0       	brcs	.+58     	; 0x12cc <loop+0xc8>
    1292:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <TimeAndDate>
    1296:	88 23       	and	r24, r24
    1298:	c9 f0       	breq	.+50     	; 0x12cc <loop+0xc8>
		{
			RTCDateTime dt = GetDateTime();
    129a:	ce 01       	movw	r24, r28
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <_Z11GetDateTimev>
			LCDPrintTimeAndDate(dt);
    12a2:	e9 80       	ldd	r14, Y+1	; 0x01
    12a4:	fa 80       	ldd	r15, Y+2	; 0x02
    12a6:	0b 81       	ldd	r16, Y+3	; 0x03
    12a8:	1c 81       	ldd	r17, Y+4	; 0x04
    12aa:	2d 81       	ldd	r18, Y+5	; 0x05
    12ac:	3e 81       	ldd	r19, Y+6	; 0x06
    12ae:	4f 81       	ldd	r20, Y+7	; 0x07
    12b0:	58 85       	ldd	r21, Y+8	; 0x08
    12b2:	69 85       	ldd	r22, Y+9	; 0x09
    12b4:	7a 85       	ldd	r23, Y+10	; 0x0a
    12b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    12ba:	08 de       	rcall	.-1008   	; 0xecc <_Z19LCDPrintTimeAndDate11RTCDateTime>
			previousMillis = currentMillis;
    12bc:	80 92 79 03 	sts	0x0379, r8	; 0x800379 <previousMillis>
    12c0:	90 92 7a 03 	sts	0x037A, r9	; 0x80037a <previousMillis+0x1>
    12c4:	a0 92 7b 03 	sts	0x037B, r10	; 0x80037b <previousMillis+0x2>
		}
		ChangeRGBAnalog();
    12c8:	b0 92 7c 03 	sts	0x037C, r11	; 0x80037c <previousMillis+0x3>
		TjekTempInHous();
    12cc:	a7 de       	rcall	.-690    	; 0x101c <_Z15ChangeRGBAnalogv>
    12ce:	2a dd       	rcall	.-1452   	; 0xd24 <_Z14TjekTempInHousv>
	}
	
	if (!Keycard)
    12d0:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <Keycard>
    12d4:	81 11       	cpse	r24, r1
    12d6:	27 c0       	rjmp	.+78     	; 0x1326 <loop+0x122>
	{
		if ( !mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() ) {
    12d8:	83 e2       	ldi	r24, 0x23	; 35
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
    12e0:	88 23       	and	r24, r24
    12e2:	09 f1       	breq	.+66     	; 0x1326 <loop+0x122>
    12e4:	83 e2       	ldi	r24, 0x23	; 35
    12e6:	94 e0       	ldi	r25, 0x04	; 4
    12e8:	0e 94 71 21 	call	0x42e2	; 0x42e2 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    12ec:	88 23       	and	r24, r24
			return;
		}
		String UID = ReadUID();
    12ee:	d9 f0       	breq	.+54     	; 0x1326 <loop+0x122>
    12f0:	ce 01       	movw	r24, r28
    12f2:	0d 96       	adiw	r24, 0x0d	; 13
    12f4:	a5 d1       	rcall	.+842    	; 0x1640 <_Z7ReadUIDv>
		CheckKeyCard(UID, &Keycard);
    12f6:	be 01       	movw	r22, r28
    12f8:	63 5f       	subi	r22, 0xF3	; 243
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	ce 01       	movw	r24, r28
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	0e 94 db 36 	call	0x6db6	; 0x6db6 <_ZN6StringC1ERKS_>
    1304:	6e e7       	ldi	r22, 0x7E	; 126
    1306:	73 e0       	ldi	r23, 0x03	; 3
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	e5 d1       	rcall	.+970    	; 0x16d8 <_Z12CheckKeyCard6StringPb>
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	0e 94 48 36 	call	0x6c90	; 0x6c90 <_ZN6StringD1Ev>
		display.clearDisplay();
    1316:	83 ee       	ldi	r24, 0xE3	; 227
    1318:	93 e0       	ldi	r25, 0x03	; 3
    131a:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZN16Adafruit_SSD130612clearDisplayEv>
	if (!Keycard)
	{
		if ( !mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() ) {
			return;
		}
		String UID = ReadUID();
    131e:	ce 01       	movw	r24, r28
    1320:	0d 96       	adiw	r24, 0x0d	; 13
    1322:	0e 94 48 36 	call	0x6c90	; 0x6c90 <_ZN6StringD1Ev>
		CheckKeyCard(UID, &Keycard);
		display.clearDisplay();
	}

}
    1326:	62 96       	adiw	r28, 0x12	; 18
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	bf 90       	pop	r11
    1340:	af 90       	pop	r10
    1342:	9f 90       	pop	r9
    1344:	8f 90       	pop	r8
    1346:	08 95       	ret

00001348 <_Z11DisplayMenuv>:
byte colPins[cols] = {36, 37, 38, 39}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );


void DisplayMenu()
{
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
	display.clearDisplay();
    134c:	83 ee       	ldi	r24, 0xE3	; 227
    134e:	93 e0       	ldi	r25, 0x03	; 3
    1350:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZN16Adafruit_SSD130612clearDisplayEv>

	display.setTextSize(1); // Normal 1:1 pixel scale
    1354:	61 e0       	ldi	r22, 0x01	; 1
    1356:	83 ee       	ldi	r24, 0xE3	; 227
    1358:	93 e0       	ldi	r25, 0x03	; 3
    135a:	0e 94 4f 12 	call	0x249e	; 0x249e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    135e:	c3 ee       	ldi	r28, 0xE3	; 227
    1360:	d3 e0       	ldi	r29, 0x03	; 3
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9b 8b       	std	Y+19, r25	; 0x13
    1368:	8a 8b       	std	Y+18, r24	; 0x12
    136a:	99 8b       	std	Y+17, r25	; 0x11
    136c:	88 8b       	std	Y+16, r24	; 0x10
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    136e:	1d 86       	std	Y+13, r1	; 0x0d
    1370:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
    1372:	1f 86       	std	Y+15, r1	; 0x0f
    1374:	1e 86       	std	Y+14, r1	; 0x0e
	display.setTextColor(WHITE); // Draw white text
	display.setCursor(0,0);
	display.println(F("Menu"));
    1376:	6b e8       	ldi	r22, 0x8B	; 139
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	ce 01       	movw	r24, r28
    137c:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1380:	1d 86       	std	Y+13, r1	; 0x0d
    1382:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
    1384:	8a e0       	ldi	r24, 0x0A	; 10
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9f 87       	std	Y+15, r25	; 0x0f
    138a:	8e 87       	std	Y+14, r24	; 0x0e
	display.setCursor(0,10);
	display.println(F("A: Time and Date"));
    138c:	6a e7       	ldi	r22, 0x7A	; 122
    138e:	71 e0       	ldi	r23, 0x01	; 1
    1390:	ce 01       	movw	r24, r28
    1392:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1396:	1d 86       	std	Y+13, r1	; 0x0d
    1398:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
    139a:	84 e1       	ldi	r24, 0x14	; 20
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9f 87       	std	Y+15, r25	; 0x0f
    13a0:	8e 87       	std	Y+14, r24	; 0x0e
	display.setCursor(0,20);
	display.println(F("B: Tempreture"));
    13a2:	6c e6       	ldi	r22, 0x6C	; 108
    13a4:	71 e0       	ldi	r23, 0x01	; 1
    13a6:	ce 01       	movw	r24, r28
    13a8:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    13ac:	1d 86       	std	Y+13, r1	; 0x0d
    13ae:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
    13b0:	8e e1       	ldi	r24, 0x1E	; 30
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9f 87       	std	Y+15, r25	; 0x0f
    13b6:	8e 87       	std	Y+14, r24	; 0x0e
	display.setCursor(0,30);
	display.println(F("C: Humidity"));
    13b8:	60 e6       	ldi	r22, 0x60	; 96
    13ba:	71 e0       	ldi	r23, 0x01	; 1
    13bc:	ce 01       	movw	r24, r28
    13be:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <_ZN5Print7printlnEPK19__FlashStringHelper>

	display.display();
    13c2:	ce 01       	movw	r24, r28
}
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
	display.setCursor(0,20);
	display.println(F("B: Tempreture"));
	display.setCursor(0,30);
	display.println(F("C: Humidity"));

	display.display();
    13c8:	0c 94 3d 18 	jmp	0x307a	; 0x307a <_ZN16Adafruit_SSD13067displayEv>

000013cc <_Z4MenucPb>:
}

void Menu(char key, bool *TimeAndDate)
{
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	eb 01       	movw	r28, r22
	
	switch (key)
    13d2:	82 34       	cpi	r24, 0x42	; 66
    13d4:	b1 f0       	breq	.+44     	; 0x1402 <_Z4MenucPb+0x36>
    13d6:	83 34       	cpi	r24, 0x43	; 67
    13d8:	e9 f0       	breq	.+58     	; 0x1414 <_Z4MenucPb+0x48>
    13da:	81 34       	cpi	r24, 0x41	; 65
    13dc:	21 f5       	brne	.+72     	; 0x1426 <_Z4MenucPb+0x5a>
	{
		case 'A':
		Serial.println("Du valgte: A");
    13de:	6f e3       	ldi	r22, 0x3F	; 63
    13e0:	72 e0       	ldi	r23, 0x02	; 2
    13e2:	8d e9       	ldi	r24, 0x9D	; 157
    13e4:	95 e0       	ldi	r25, 0x05	; 5
    13e6:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <_ZN5Print7printlnEPKc>
		{
			*TimeAndDate = true;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	88 83       	st	Y, r24
			Serial.println(*TimeAndDate);
    13ee:	4a e0       	ldi	r20, 0x0A	; 10
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	8d e9       	ldi	r24, 0x9D	; 157
    13f8:	95 e0       	ldi	r25, 0x05	; 5
		}
		break;
		default:
		break;
	}
}
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
	{
		case 'A':
		Serial.println("Du valgte: A");
		{
			*TimeAndDate = true;
			Serial.println(*TimeAndDate);
    13fe:	0c 94 3e 32 	jmp	0x647c	; 0x647c <_ZN5Print7printlnEii>
		}
		break;
		case 'B':
		{
			Serial.println("Du valgte: C");
    1402:	6c e4       	ldi	r22, 0x4C	; 76
    1404:	72 e0       	ldi	r23, 0x02	; 2
    1406:	8d e9       	ldi	r24, 0x9D	; 157
    1408:	95 e0       	ldi	r25, 0x05	; 5
    140a:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <_ZN5Print7printlnEPKc>
			float temp = GetTemp();
    140e:	78 dc       	rcall	.-1808   	; 0xd00 <_Z7GetTempv>
			LCDPrintTemp(temp);
    1410:	1a dd       	rcall	.-1484   	; 0xe46 <_Z12LCDPrintTempf>
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <_Z4MenucPb+0x58>
    1414:	69 e5       	ldi	r22, 0x59	; 89
			*TimeAndDate = false;
		}
		break;
		case 'C':
		{
			Serial.println("Du valgte: D");
    1416:	72 e0       	ldi	r23, 0x02	; 2
    1418:	8d e9       	ldi	r24, 0x9D	; 157
    141a:	95 e0       	ldi	r25, 0x05	; 5
    141c:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <_ZN5Print7printlnEPKc>
			float humid = GetHumid();
    1420:	6a dc       	rcall	.-1836   	; 0xcf6 <_Z8GetHumidv>
    1422:	32 dd       	rcall	.-1436   	; 0xe88 <_Z16LCDPrintHumidityf>
			LCDPrintHumidity(humid);
    1424:	18 82       	st	Y, r1
    1426:	df 91       	pop	r29
			*TimeAndDate = false;
    1428:	cf 91       	pop	r28
		}
		break;
		default:
		break;
	}
}
    142a:	08 95       	ret

0000142c <_GLOBAL__sub_I_display>:
    142c:	8f 92       	push	r8
    142e:	9f 92       	push	r9
    1430:	af 92       	push	r10
    1432:	bf 92       	push	r11
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
#include "Menu.h"

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    143e:	80 ea       	ldi	r24, 0xA0	; 160
    1440:	88 2e       	mov	r8, r24
    1442:	86 e8       	ldi	r24, 0x86	; 134
    1444:	98 2e       	mov	r9, r24
    1446:	aa 24       	eor	r10, r10
    1448:	a3 94       	inc	r10
    144a:	b1 2c       	mov	r11, r1
    144c:	90 e8       	ldi	r25, 0x80	; 128
    144e:	c9 2e       	mov	r12, r25
    1450:	9a e1       	ldi	r25, 0x1A	; 26
    1452:	d9 2e       	mov	r13, r25
    1454:	96 e0       	ldi	r25, 0x06	; 6
    1456:	e9 2e       	mov	r14, r25
    1458:	f1 2c       	mov	r15, r1
    145a:	04 e0       	ldi	r16, 0x04	; 4
    145c:	27 e4       	ldi	r18, 0x47	; 71
    145e:	35 e0       	ldi	r19, 0x05	; 5
    1460:	40 e4       	ldi	r20, 0x40	; 64
    1462:	60 e8       	ldi	r22, 0x80	; 128
    1464:	83 ee       	ldi	r24, 0xE3	; 227
    1466:	93 e0       	ldi	r25, 0x03	; 3
    1468:	0e 94 15 13 	call	0x262a	; 0x262a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
	{'7','8','9','C'},
	{'*','0','#','D'}
};
byte rowPins[rows] = {32, 33, 34, 35}; //connect to the row pinouts of the keypad
byte colPins[cols] = {36, 37, 38, 39}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );
    146c:	24 e0       	ldi	r18, 0x04	; 4
    146e:	e2 2e       	mov	r14, r18
    1470:	2e e1       	ldi	r18, 0x1E	; 30
    1472:	32 e0       	ldi	r19, 0x02	; 2
    1474:	42 e2       	ldi	r20, 0x22	; 34
    1476:	52 e0       	ldi	r21, 0x02	; 2
    1478:	66 e2       	ldi	r22, 0x26	; 38
    147a:	72 e0       	ldi	r23, 0x02	; 2
    147c:	8f e7       	ldi	r24, 0x7F	; 127
    147e:	93 e0       	ldi	r25, 0x03	; 3
    1480:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <_ZN6KeypadC1EPcPhS1_hh>
		}
		break;
		default:
		break;
	}
}
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	9f 90       	pop	r9
    1494:	8f 90       	pop	r8
    1496:	08 95       	ret

00001498 <_GLOBAL__sub_D_display>:
#include "Menu.h"

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1498:	83 ee       	ldi	r24, 0xE3	; 227
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	0c 94 5f 13 	jmp	0x26be	; 0x26be <_ZN16Adafruit_SSD1306D1Ev>

000014a0 <_Z11TempTooColdv>:
int moter = 12;


void TempTooCold()
{
	Timer1.pwm(moter, (1023 / 100) * 0);
    14a0:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <moter>
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    14a4:	8b 30       	cpi	r24, 0x0B	; 11
    14a6:	69 f4       	brne	.+26     	; 0x14c2 <_Z11TempTooColdv+0x22>
    14a8:	61 e0       	ldi	r22, 0x01	; 1
    14aa:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    14ae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    14b2:	80 68       	ori	r24, 0x80	; 128
    14b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
	dutyCycle *= duty;
	dutyCycle >>= 10;
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    14b8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    14bc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    14c0:	1d c0       	rjmp	.+58     	; 0x14fc <_Z11TempTooColdv+0x5c>
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    14c2:	8c 30       	cpi	r24, 0x0C	; 12
    14c4:	69 f4       	brne	.+26     	; 0x14e0 <_Z11TempTooColdv+0x40>
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    14cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    14d0:	80 62       	ori	r24, 0x20	; 32
    14d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	unsigned long dutyCycle = pwmPeriod;
	dutyCycle *= duty;
	dutyCycle >>= 10;
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    14d6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    14da:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
    14de:	0e c0       	rjmp	.+28     	; 0x14fc <_Z11TempTooColdv+0x5c>
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    14e0:	8d 30       	cpi	r24, 0x0D	; 13
    14e2:	61 f4       	brne	.+24     	; 0x14fc <_Z11TempTooColdv+0x5c>
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    14ea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    14ee:	88 60       	ori	r24, 0x08	; 8
    14f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    14f4:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    14f8:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    14fc:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <_ZN8TimerOne15clockSelectBitsE>
    1500:	80 61       	ori	r24, 0x10	; 16
    1502:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    1506:	08 95       	ret

00001508 <_Z10TempTooHotv>:
	return;
}

void TempTooHot()
{
    1508:	cf 93       	push	r28
	Timer1.pwm(moter, (1023 / 100) * 100);
    150a:	c0 91 36 02 	lds	r28, 0x0236	; 0x800236 <moter>
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    150e:	cb 30       	cpi	r28, 0x0B	; 11
    1510:	41 f4       	brne	.+16     	; 0x1522 <_Z10TempTooHotv+0x1a>
    1512:	61 e0       	ldi	r22, 0x01	; 1
    1514:	8b e0       	ldi	r24, 0x0B	; 11
    1516:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    151a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    151e:	80 68       	ori	r24, 0x80	; 128
    1520:	13 c0       	rjmp	.+38     	; 0x1548 <_Z10TempTooHotv+0x40>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    1522:	cc 30       	cpi	r28, 0x0C	; 12
    1524:	41 f4       	brne	.+16     	; 0x1536 <_Z10TempTooHotv+0x2e>
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	8c e0       	ldi	r24, 0x0C	; 12
    152a:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    152e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1532:	80 62       	ori	r24, 0x20	; 32
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <_Z10TempTooHotv+0x40>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    1536:	cd 30       	cpi	r28, 0x0D	; 13
    1538:	49 f4       	brne	.+18     	; 0x154c <_Z10TempTooHotv+0x44>
    153a:	61 e0       	ldi	r22, 0x01	; 1
    153c:	8d e0       	ldi	r24, 0x0D	; 13
    153e:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    1542:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1546:	88 60       	ori	r24, 0x08	; 8
    1548:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    154c:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <_ZN8TimerOne9pwmPeriodE>
    1550:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <_ZN8TimerOne9pwmPeriodE+0x1>
	dutyCycle *= duty;
    1554:	a8 ee       	ldi	r26, 0xE8	; 232
    1556:	b3 e0       	ldi	r27, 0x03	; 3
    1558:	0e 94 ae 38 	call	0x715c	; 0x715c <__umulhisi3>
	dutyCycle >>= 10;
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	2a e0       	ldi	r18, 0x0A	; 10
    1562:	b6 95       	lsr	r27
    1564:	a7 95       	ror	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	2a 95       	dec	r18
    156c:	d1 f7       	brne	.-12     	; 0x1562 <_Z10TempTooHotv+0x5a>
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    156e:	cb 30       	cpi	r28, 0x0B	; 11
    1570:	29 f4       	brne	.+10     	; 0x157c <_Z10TempTooHotv+0x74>
    1572:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    1576:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    157a:	0d c0       	rjmp	.+26     	; 0x1596 <_Z10TempTooHotv+0x8e>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    157c:	cc 30       	cpi	r28, 0x0C	; 12
    157e:	29 f4       	brne	.+10     	; 0x158a <_Z10TempTooHotv+0x82>
    1580:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    1584:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <_Z10TempTooHotv+0x8e>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    158a:	cd 30       	cpi	r28, 0x0D	; 13
    158c:	21 f4       	brne	.+8      	; 0x1596 <_Z10TempTooHotv+0x8e>
    158e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    1592:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1596:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <_ZN8TimerOne15clockSelectBitsE>
    159a:	80 61       	ori	r24, 0x10	; 16
    159c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	return;
}
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <_Z11TempPerfektv>:

void TempPerfekt()
{
    15a4:	cf 93       	push	r28
	Timer1.pwm(moter, (1023 / 100) * 50);
    15a6:	c0 91 36 02 	lds	r28, 0x0236	; 0x800236 <moter>
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    15aa:	cb 30       	cpi	r28, 0x0B	; 11
    15ac:	41 f4       	brne	.+16     	; 0x15be <_Z11TempPerfektv+0x1a>
    15ae:	61 e0       	ldi	r22, 0x01	; 1
    15b0:	8b e0       	ldi	r24, 0x0B	; 11
    15b2:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    15b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    15ba:	80 68       	ori	r24, 0x80	; 128
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <_Z11TempPerfektv+0x40>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    15be:	cc 30       	cpi	r28, 0x0C	; 12
    15c0:	41 f4       	brne	.+16     	; 0x15d2 <_Z11TempPerfektv+0x2e>
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	8c e0       	ldi	r24, 0x0C	; 12
    15c6:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    15ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    15ce:	80 62       	ori	r24, 0x20	; 32
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <_Z11TempPerfektv+0x40>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    15d2:	cd 30       	cpi	r28, 0x0D	; 13
    15d4:	49 f4       	brne	.+18     	; 0x15e8 <_Z11TempPerfektv+0x44>
    15d6:	61 e0       	ldi	r22, 0x01	; 1
    15d8:	8d e0       	ldi	r24, 0x0D	; 13
    15da:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    15de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    15e2:	88 60       	ori	r24, 0x08	; 8
    15e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    15e8:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <_ZN8TimerOne9pwmPeriodE>
    15ec:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <_ZN8TimerOne9pwmPeriodE+0x1>
	dutyCycle *= duty;
    15f0:	a4 ef       	ldi	r26, 0xF4	; 244
    15f2:	b1 e0       	ldi	r27, 0x01	; 1
    15f4:	0e 94 ae 38 	call	0x715c	; 0x715c <__umulhisi3>
	dutyCycle >>= 10;
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	2a e0       	ldi	r18, 0x0A	; 10
    15fe:	b6 95       	lsr	r27
    1600:	a7 95       	ror	r26
    1602:	97 95       	ror	r25
    1604:	87 95       	ror	r24
    1606:	2a 95       	dec	r18
    1608:	d1 f7       	brne	.-12     	; 0x15fe <_Z11TempPerfektv+0x5a>
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    160a:	cb 30       	cpi	r28, 0x0B	; 11
    160c:	29 f4       	brne	.+10     	; 0x1618 <_Z11TempPerfektv+0x74>
    160e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    1612:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    1616:	0d c0       	rjmp	.+26     	; 0x1632 <_Z11TempPerfektv+0x8e>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    1618:	cc 30       	cpi	r28, 0x0C	; 12
    161a:	29 f4       	brne	.+10     	; 0x1626 <_Z11TempPerfektv+0x82>
    161c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    1620:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <_Z11TempPerfektv+0x8e>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    1626:	cd 30       	cpi	r28, 0x0D	; 13
    1628:	21 f4       	brne	.+8      	; 0x1632 <_Z11TempPerfektv+0x8e>
    162a:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    162e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1632:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <_ZN8TimerOne15clockSelectBitsE>
    1636:	80 61       	ori	r24, 0x10	; 16
    1638:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	return;
    163c:	cf 91       	pop	r28
    163e:	08 95       	ret

00001640 <_Z7ReadUIDv>:

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;

String ReadUID()
{
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	00 d0       	rcall	.+0      	; 0x1650 <_Z7ReadUIDv+0x10>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <_Z7ReadUIDv+0x12>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	8c 01       	movw	r16, r24
	String UID;
    1658:	6f e2       	ldi	r22, 0x2F	; 47
    165a:	73 e0       	ldi	r23, 0x03	; 3
    165c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <_ZN6StringC1EPKc>
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    1660:	f1 2c       	mov	r15, r1
    1662:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <mfrc522+0x2>
    1666:	f8 16       	cp	r15, r24
    1668:	28 f5       	brcc	.+74     	; 0x16b4 <_Z7ReadUIDv+0x74>
		UID += mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ";
    166a:	8f 2d       	mov	r24, r15
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9c 01       	movw	r18, r24
    1670:	2d 5d       	subi	r18, 0xDD	; 221
    1672:	3b 4f       	sbci	r19, 0xFB	; 251
    1674:	69 01       	movw	r12, r18
    1676:	f9 01       	movw	r30, r18
    1678:	83 81       	ldd	r24, Z+3	; 0x03
    167a:	80 31       	cpi	r24, 0x10	; 16
    167c:	18 f0       	brcs	.+6      	; 0x1684 <_Z7ReadUIDv+0x44>
    167e:	6b e3       	ldi	r22, 0x3B	; 59
    1680:	72 e0       	ldi	r23, 0x02	; 2
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <_Z7ReadUIDv+0x48>
    1684:	66 e6       	ldi	r22, 0x66	; 102
    1686:	72 e0       	ldi	r23, 0x02	; 2
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    1688:	c8 01       	movw	r24, r16
    168a:	0e 94 55 37 	call	0x6eaa	; 0x6eaa <_ZN6String6concatEPKc>
		UID += String (mfrc522.uid.uidByte[i], HEX);
    168e:	40 e1       	ldi	r20, 0x10	; 16
    1690:	f6 01       	movw	r30, r12
    1692:	63 81       	ldd	r22, Z+3	; 0x03
    1694:	ce 01       	movw	r24, r28
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <_ZN6StringC1Ehh>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    169c:	be 01       	movw	r22, r28
    169e:	6f 5f       	subi	r22, 0xFF	; 255
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	c8 01       	movw	r24, r16
    16a4:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <_ZN6String6concatERKS_>
    16a8:	ce 01       	movw	r24, r28
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	0e 94 48 36 	call	0x6c90	; 0x6c90 <_ZN6StringD1Ev>
MFRC522::MIFARE_Key key;

String ReadUID()
{
	String UID;
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    16b0:	f3 94       	inc	r15
    16b2:	d7 cf       	rjmp	.-82     	; 0x1662 <_Z7ReadUIDv+0x22>
		UID += mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ";
		UID += String (mfrc522.uid.uidByte[i], HEX);
	}
	UID.toUpperCase();
    16b4:	c8 01       	movw	r24, r16
    16b6:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <_ZN6String11toUpperCaseEv>
	return UID ;

}
    16ba:	c8 01       	movw	r24, r16
    16bc:	26 96       	adiw	r28, 0x06	; 6
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	ff 90       	pop	r15
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	08 95       	ret

000016d8 <_Z12CheckKeyCard6StringPb>:

void CheckKeyCard(String UID, bool *Keycard)
{
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <_Z12CheckKeyCard6StringPb+0xe>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <_Z12CheckKeyCard6StringPb+0x10>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	7c 01       	movw	r14, r24
    16ee:	8b 01       	movw	r16, r22
	String UnlogKey = " 30 45 66 A7";
    16f0:	69 e6       	ldi	r22, 0x69	; 105
    16f2:	72 e0       	ldi	r23, 0x02	; 2
    16f4:	ce 01       	movw	r24, r28
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <_ZN6StringC1EPKc>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
    16fc:	be 01       	movw	r22, r28
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	c7 01       	movw	r24, r14
    1704:	0e 94 92 37 	call	0x6f24	; 0x6f24 <_ZNK6String6equalsERKS_>
	if (UID	== UnlogKey)
    1708:	88 23       	and	r24, r24
    170a:	31 f0       	breq	.+12     	; 0x1718 <_Z12CheckKeyCard6StringPb+0x40>
	{
		*Keycard = true;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	f8 01       	movw	r30, r16
    1710:	80 83       	st	Z, r24
		Serial.println("Welcome Home");
    1712:	66 e7       	ldi	r22, 0x76	; 118
    1714:	72 e0       	ldi	r23, 0x02	; 2
    1716:	0c c0       	rjmp	.+24     	; 0x1730 <_Z12CheckKeyCard6StringPb+0x58>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    1718:	be 01       	movw	r22, r28
    171a:	6f 5f       	subi	r22, 0xFF	; 255
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	c7 01       	movw	r24, r14
    1720:	0e 94 92 37 	call	0x6f24	; 0x6f24 <_ZNK6String6equalsERKS_>
	}
	else if (UID != UnlogKey)
    1724:	81 11       	cpse	r24, r1
    1726:	08 c0       	rjmp	.+16     	; 0x1738 <_Z12CheckKeyCard6StringPb+0x60>
	{
		*Keycard = false;
    1728:	f8 01       	movw	r30, r16
    172a:	10 82       	st	Z, r1
		Serial.println("Access denied");
    172c:	63 e8       	ldi	r22, 0x83	; 131
    172e:	72 e0       	ldi	r23, 0x02	; 2
    1730:	8d e9       	ldi	r24, 0x9D	; 157
    1732:	95 e0       	ldi	r25, 0x05	; 5
    1734:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <_ZN5Print7printlnEPKc>

}

void CheckKeyCard(String UID, bool *Keycard)
{
	String UnlogKey = " 30 45 66 A7";
    1738:	ce 01       	movw	r24, r28
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	0e 94 48 36 	call	0x6c90	; 0x6c90 <_ZN6StringD1Ev>
	{
		*Keycard = false;
		Serial.println("Access denied");
	}

}
    1740:	26 96       	adiw	r28, 0x06	; 6
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	08 95       	ret

0000175a <_GLOBAL__sub_I_mfrc522>:
#include "KeyCardAccess.h"

MFRC522 mfrc522(SS_PIN, RST_PIN);
    175a:	45 e0       	ldi	r20, 0x05	; 5
    175c:	65 e3       	ldi	r22, 0x35	; 53
    175e:	83 e2       	ldi	r24, 0x23	; 35
    1760:	94 e0       	ldi	r25, 0x04	; 4
    1762:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <_ZN7MFRC522C1Ehh>

00001766 <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1766:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <_ZN8SPIClass13interruptModeE>
    176a:	22 23       	and	r18, r18
    176c:	99 f0       	breq	.+38     	; 0x1794 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
    176e:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
    1770:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1772:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <_ZN8SPIClass13interruptModeE>
    1776:	21 30       	cpi	r18, 0x01	; 1
    1778:	59 f4       	brne	.+22     	; 0x1790 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
    177a:	2d b3       	in	r18, 0x1d	; 29
    177c:	20 93 c8 04 	sts	0x04C8, r18	; 0x8004c8 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    1780:	3d b3       	in	r19, 0x1d	; 29
    1782:	20 91 c9 04 	lds	r18, 0x04C9	; 0x8004c9 <_ZN8SPIClass13interruptMaskE>
    1786:	20 95       	com	r18
    1788:	23 23       	and	r18, r19
    178a:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    178c:	4f bf       	out	0x3f, r20	; 63
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
    1790:	40 93 c8 04 	sts	0x04C8, r20	; 0x8004c8 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1794:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    1796:	9d bd       	out	0x2d, r25	; 45
    1798:	08 95       	ret

0000179a <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    179a:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <_ZN8SPIClass13interruptModeE>
    179e:	88 23       	and	r24, r24
    17a0:	61 f0       	breq	.+24     	; 0x17ba <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    17a2:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    17a4:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    17a6:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <_ZN8SPIClass13interruptModeE>
    17aa:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <_ZN8SPIClass13interruptSaveE>
    17ae:	21 30       	cpi	r18, 0x01	; 1
    17b0:	19 f4       	brne	.+6      	; 0x17b8 <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    17b2:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    17b4:	9f bf       	out	0x3f, r25	; 63
    17b6:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    17b8:	8f bf       	out	0x3f, r24	; 63
    17ba:	08 95       	ret

000017bc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	08 95       	ret

000017c2 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    17c2:	08 95       	ret

000017c4 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    17c4:	2f 92       	push	r2
    17c6:	3f 92       	push	r3
    17c8:	4f 92       	push	r4
    17ca:	5f 92       	push	r5
    17cc:	6f 92       	push	r6
    17ce:	7f 92       	push	r7
    17d0:	8f 92       	push	r8
    17d2:	9f 92       	push	r9
    17d4:	af 92       	push	r10
    17d6:	bf 92       	push	r11
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	2c 01       	movw	r4, r24
    17f2:	7e 83       	std	Y+6, r23	; 0x06
    17f4:	6d 83       	std	Y+5, r22	; 0x05
    17f6:	6a 01       	movw	r12, r20
    17f8:	59 01       	movw	r10, r18
    17fa:	c8 01       	movw	r24, r16
    17fc:	fc 82       	std	Y+4, r15	; 0x04
    17fe:	eb 82       	std	Y+3, r14	; 0x03
    1800:	48 01       	movw	r8, r16
    1802:	84 1a       	sub	r8, r20
    1804:	95 0a       	sbc	r9, r21
    1806:	97 fe       	sbrs	r9, 7
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    180a:	91 94       	neg	r9
    180c:	81 94       	neg	r8
    180e:	91 08       	sbc	r9, r1
    1810:	35 01       	movw	r6, r10
    1812:	2d 81       	ldd	r18, Y+5	; 0x05
    1814:	3e 81       	ldd	r19, Y+6	; 0x06
    1816:	62 1a       	sub	r6, r18
    1818:	73 0a       	sbc	r7, r19
    181a:	77 fe       	sbrs	r7, 7
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    181e:	71 94       	neg	r7
    1820:	61 94       	neg	r6
    1822:	71 08       	sbc	r7, r1
    1824:	68 14       	cp	r6, r8
    1826:	79 04       	cpc	r7, r9
    1828:	5c f4       	brge	.+22     	; 0x1840 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    182a:	3a 2d       	mov	r19, r10
    182c:	2b 2d       	mov	r18, r11
    182e:	5c 01       	movw	r10, r24
    1830:	83 2f       	mov	r24, r19
    1832:	92 2f       	mov	r25, r18
    1834:	3d 81       	ldd	r19, Y+5	; 0x05
    1836:	2e 81       	ldd	r18, Y+6	; 0x06
    1838:	de 82       	std	Y+6, r13	; 0x06
    183a:	cd 82       	std	Y+5, r12	; 0x05
    183c:	c3 2e       	mov	r12, r19
    183e:	d2 2e       	mov	r13, r18
    1840:	ad 81       	ldd	r26, Y+5	; 0x05
    1842:	be 81       	ldd	r27, Y+6	; 0x06
    1844:	aa 16       	cp	r10, r26
    1846:	bb 06       	cpc	r11, r27
    1848:	5c f4       	brge	.+22     	; 0x1860 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    184a:	3c 2d       	mov	r19, r12
    184c:	2d 2d       	mov	r18, r13
    184e:	6c 01       	movw	r12, r24
    1850:	83 2f       	mov	r24, r19
    1852:	92 2f       	mov	r25, r18
    1854:	3d 81       	ldd	r19, Y+5	; 0x05
    1856:	2e 81       	ldd	r18, Y+6	; 0x06
    1858:	be 82       	std	Y+6, r11	; 0x06
    185a:	ad 82       	std	Y+5, r10	; 0x05
    185c:	a3 2e       	mov	r10, r19
    185e:	b2 2e       	mov	r11, r18
    1860:	85 01       	movw	r16, r10
    1862:	2d 81       	ldd	r18, Y+5	; 0x05
    1864:	3e 81       	ldd	r19, Y+6	; 0x06
    1866:	02 1b       	sub	r16, r18
    1868:	13 0b       	sbc	r17, r19
    186a:	1c 01       	movw	r2, r24
    186c:	2c 18       	sub	r2, r12
    186e:	3d 08       	sbc	r3, r13
    1870:	37 fe       	sbrs	r3, 7
    1872:	03 c0       	rjmp	.+6      	; 0x187a <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    1874:	31 94       	neg	r3
    1876:	21 94       	neg	r2
    1878:	31 08       	sbc	r3, r1
    187a:	78 01       	movw	r14, r16
    187c:	17 ff       	sbrs	r17, 7
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    1880:	3f ef       	ldi	r19, 0xFF	; 255
    1882:	e3 1a       	sub	r14, r19
    1884:	f3 0a       	sbc	r15, r19
    1886:	f5 94       	asr	r15
    1888:	e7 94       	ror	r14
    188a:	c8 16       	cp	r12, r24
    188c:	d9 06       	cpc	r13, r25
    188e:	2c f0       	brlt	.+10     	; 0x189a <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	9f ef       	ldi	r25, 0xFF	; 255
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    189a:	a1 e0       	ldi	r26, 0x01	; 1
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ba 83       	std	Y+2, r27	; 0x02
    18a0:	a9 83       	std	Y+1, r26	; 0x01
    18a2:	2d 81       	ldd	r18, Y+5	; 0x05
    18a4:	3e 81       	ldd	r19, Y+6	; 0x06
    18a6:	a2 16       	cp	r10, r18
    18a8:	b3 06       	cpc	r11, r19
    18aa:	24 f1       	brlt	.+72     	; 0x18f4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    18ac:	d2 01       	movw	r26, r4
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	04 84       	ldd	r0, Z+12	; 0x0c
    18b4:	f5 85       	ldd	r31, Z+13	; 0x0d
    18b6:	e0 2d       	mov	r30, r0
    18b8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ba:	3c 81       	ldd	r19, Y+4	; 0x04
    18bc:	68 14       	cp	r6, r8
    18be:	79 04       	cpc	r7, r9
    18c0:	24 f4       	brge	.+8      	; 0x18ca <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    18c2:	4d 81       	ldd	r20, Y+5	; 0x05
    18c4:	5e 81       	ldd	r21, Y+6	; 0x06
    18c6:	b6 01       	movw	r22, r12
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    18ca:	a6 01       	movw	r20, r12
    18cc:	6d 81       	ldd	r22, Y+5	; 0x05
    18ce:	7e 81       	ldd	r23, Y+6	; 0x06
    18d0:	c2 01       	movw	r24, r4
    18d2:	19 95       	eicall
    18d4:	e2 18       	sub	r14, r2
    18d6:	f3 08       	sbc	r15, r3
    18d8:	f7 fe       	sbrs	r15, 7
    18da:	06 c0       	rjmp	.+12     	; 0x18e8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    18dc:	29 81       	ldd	r18, Y+1	; 0x01
    18de:	3a 81       	ldd	r19, Y+2	; 0x02
    18e0:	c2 0e       	add	r12, r18
    18e2:	d3 1e       	adc	r13, r19
    18e4:	e0 0e       	add	r14, r16
    18e6:	f1 1e       	adc	r15, r17
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	d7 cf       	rjmp	.-82     	; 0x18a2 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    18f4:	26 96       	adiw	r28, 0x06	; 6
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	cf 90       	pop	r12
    1910:	bf 90       	pop	r11
    1912:	af 90       	pop	r10
    1914:	9f 90       	pop	r9
    1916:	8f 90       	pop	r8
    1918:	7f 90       	pop	r7
    191a:	6f 90       	pop	r6
    191c:	5f 90       	pop	r5
    191e:	4f 90       	pop	r4
    1920:	3f 90       	pop	r3
    1922:	2f 90       	pop	r2
    1924:	08 95       	ret

00001926 <_ZN12Adafruit_GFX10writePixelEiij>:
    1926:	dc 01       	movw	r26, r24
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	00 84       	ldd	r0, Z+8	; 0x08
    192e:	f1 85       	ldd	r31, Z+9	; 0x09
    1930:	e0 2d       	mov	r30, r0
    1932:	19 94       	eijmp

00001934 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	dc 01       	movw	r26, r24
    193a:	ed 91       	ld	r30, X+
    193c:	fc 91       	ld	r31, X
    193e:	04 8c       	ldd	r0, Z+28	; 0x1c
    1940:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1942:	e0 2d       	mov	r30, r0
    1944:	19 95       	eicall
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	dc 01       	movw	r26, r24
    1952:	ed 91       	ld	r30, X+
    1954:	fc 91       	ld	r31, X
    1956:	06 8c       	ldd	r0, Z+30	; 0x1e
    1958:	f7 8d       	ldd	r31, Z+31	; 0x1f
    195a:	e0 2d       	mov	r30, r0
    195c:	19 95       	eicall
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	dc 01       	movw	r26, r24
    196e:	ed 91       	ld	r30, X+
    1970:	fc 91       	ld	r31, X
    1972:	00 a0       	ldd	r0, Z+32	; 0x20
    1974:	f1 a1       	ldd	r31, Z+33	; 0x21
    1976:	e0 2d       	mov	r30, r0
    1978:	19 95       	eicall
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	08 95       	ret

00001984 <_ZN12Adafruit_GFX10startWriteEv>:
    1984:	08 95       	ret

00001986 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    1986:	8f 92       	push	r8
    1988:	9f 92       	push	r9
    198a:	af 92       	push	r10
    198c:	bf 92       	push	r11
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
    19a0:	5b 01       	movw	r10, r22
    19a2:	4a 01       	movw	r8, r20
    19a4:	69 01       	movw	r12, r18
    19a6:	78 01       	movw	r14, r16
    19a8:	e8 81       	ld	r30, Y
    19aa:	f9 81       	ldd	r31, Y+1	; 0x01
    19ac:	02 84       	ldd	r0, Z+10	; 0x0a
    19ae:	f3 85       	ldd	r31, Z+11	; 0x0b
    19b0:	e0 2d       	mov	r30, r0
    19b2:	19 95       	eicall
    19b4:	c8 0c       	add	r12, r8
    19b6:	d9 1c       	adc	r13, r9
    19b8:	86 01       	movw	r16, r12
    19ba:	01 50       	subi	r16, 0x01	; 1
    19bc:	11 09       	sbc	r17, r1
    19be:	e8 81       	ld	r30, Y
    19c0:	f9 81       	ldd	r31, Y+1	; 0x01
    19c2:	04 88       	ldd	r0, Z+20	; 0x14
    19c4:	f5 89       	ldd	r31, Z+21	; 0x15
    19c6:	e0 2d       	mov	r30, r0
    19c8:	95 01       	movw	r18, r10
    19ca:	a4 01       	movw	r20, r8
    19cc:	b5 01       	movw	r22, r10
    19ce:	ce 01       	movw	r24, r28
    19d0:	19 95       	eicall
    19d2:	e8 81       	ld	r30, Y
    19d4:	f9 81       	ldd	r31, Y+1	; 0x01
    19d6:	06 88       	ldd	r0, Z+22	; 0x16
    19d8:	f7 89       	ldd	r31, Z+23	; 0x17
    19da:	e0 2d       	mov	r30, r0
    19dc:	ce 01       	movw	r24, r28
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	ff 90       	pop	r15
    19e8:	ef 90       	pop	r14
    19ea:	df 90       	pop	r13
    19ec:	cf 90       	pop	r12
    19ee:	bf 90       	pop	r11
    19f0:	af 90       	pop	r10
    19f2:	9f 90       	pop	r9
    19f4:	8f 90       	pop	r8
    19f6:	19 94       	eijmp

000019f8 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    19f8:	8f 92       	push	r8
    19fa:	9f 92       	push	r9
    19fc:	af 92       	push	r10
    19fe:	bf 92       	push	r11
    1a00:	cf 92       	push	r12
    1a02:	df 92       	push	r13
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	ec 01       	movw	r28, r24
    1a12:	5b 01       	movw	r10, r22
    1a14:	4a 01       	movw	r8, r20
    1a16:	69 01       	movw	r12, r18
    1a18:	e8 81       	ld	r30, Y
    1a1a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a1c:	02 84       	ldd	r0, Z+10	; 0x0a
    1a1e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a20:	e0 2d       	mov	r30, r0
    1a22:	19 95       	eicall
    1a24:	95 01       	movw	r18, r10
    1a26:	2c 0d       	add	r18, r12
    1a28:	3d 1d       	adc	r19, r13
    1a2a:	21 50       	subi	r18, 0x01	; 1
    1a2c:	31 09       	sbc	r19, r1
    1a2e:	e8 81       	ld	r30, Y
    1a30:	f9 81       	ldd	r31, Y+1	; 0x01
    1a32:	04 88       	ldd	r0, Z+20	; 0x14
    1a34:	f5 89       	ldd	r31, Z+21	; 0x15
    1a36:	e0 2d       	mov	r30, r0
    1a38:	78 01       	movw	r14, r16
    1a3a:	84 01       	movw	r16, r8
    1a3c:	a4 01       	movw	r20, r8
    1a3e:	b5 01       	movw	r22, r10
    1a40:	ce 01       	movw	r24, r28
    1a42:	19 95       	eicall
    1a44:	e8 81       	ld	r30, Y
    1a46:	f9 81       	ldd	r31, Y+1	; 0x01
    1a48:	06 88       	ldd	r0, Z+22	; 0x16
    1a4a:	f7 89       	ldd	r31, Z+23	; 0x17
    1a4c:	e0 2d       	mov	r30, r0
    1a4e:	ce 01       	movw	r24, r28
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	ff 90       	pop	r15
    1a5a:	ef 90       	pop	r14
    1a5c:	df 90       	pop	r13
    1a5e:	cf 90       	pop	r12
    1a60:	bf 90       	pop	r11
    1a62:	af 90       	pop	r10
    1a64:	9f 90       	pop	r9
    1a66:	8f 90       	pop	r8
    1a68:	19 94       	eijmp

00001a6a <_ZN12Adafruit_GFX8fillRectEiiiij>:
    1a6a:	4f 92       	push	r4
    1a6c:	5f 92       	push	r5
    1a6e:	6f 92       	push	r6
    1a70:	7f 92       	push	r7
    1a72:	8f 92       	push	r8
    1a74:	9f 92       	push	r9
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	6c 01       	movw	r12, r24
    1a8c:	2b 01       	movw	r4, r22
    1a8e:	5a 01       	movw	r10, r20
    1a90:	39 01       	movw	r6, r18
    1a92:	48 01       	movw	r8, r16
    1a94:	dc 01       	movw	r26, r24
    1a96:	ed 91       	ld	r30, X+
    1a98:	fc 91       	ld	r31, X
    1a9a:	02 84       	ldd	r0, Z+10	; 0x0a
    1a9c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a9e:	e0 2d       	mov	r30, r0
    1aa0:	19 95       	eicall
    1aa2:	e2 01       	movw	r28, r4
    1aa4:	64 0c       	add	r6, r4
    1aa6:	75 1c       	adc	r7, r5
    1aa8:	d6 01       	movw	r26, r12
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	c6 15       	cp	r28, r6
    1ab0:	d7 05       	cpc	r29, r7
    1ab2:	5c f4       	brge	.+22     	; 0x1aca <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    1ab4:	00 88       	ldd	r0, Z+16	; 0x10
    1ab6:	f1 89       	ldd	r31, Z+17	; 0x11
    1ab8:	e0 2d       	mov	r30, r0
    1aba:	87 01       	movw	r16, r14
    1abc:	94 01       	movw	r18, r8
    1abe:	a5 01       	movw	r20, r10
    1ac0:	be 01       	movw	r22, r28
    1ac2:	c6 01       	movw	r24, r12
    1ac4:	19 95       	eicall
    1ac6:	21 96       	adiw	r28, 0x01	; 1
    1ac8:	ef cf       	rjmp	.-34     	; 0x1aa8 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    1aca:	06 88       	ldd	r0, Z+22	; 0x16
    1acc:	f7 89       	ldd	r31, Z+23	; 0x17
    1ace:	e0 2d       	mov	r30, r0
    1ad0:	c6 01       	movw	r24, r12
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	df 90       	pop	r13
    1ae0:	cf 90       	pop	r12
    1ae2:	bf 90       	pop	r11
    1ae4:	af 90       	pop	r10
    1ae6:	9f 90       	pop	r9
    1ae8:	8f 90       	pop	r8
    1aea:	7f 90       	pop	r7
    1aec:	6f 90       	pop	r6
    1aee:	5f 90       	pop	r5
    1af0:	4f 90       	pop	r4
    1af2:	19 94       	eijmp

00001af4 <_ZN12Adafruit_GFX10fillScreenEj>:
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	dc 01       	movw	r26, r24
    1afe:	1a 96       	adiw	r26, 0x0a	; 10
    1b00:	0d 91       	ld	r16, X+
    1b02:	1c 91       	ld	r17, X
    1b04:	1b 97       	sbiw	r26, 0x0b	; 11
    1b06:	18 96       	adiw	r26, 0x08	; 8
    1b08:	2d 91       	ld	r18, X+
    1b0a:	3c 91       	ld	r19, X
    1b0c:	19 97       	sbiw	r26, 0x09	; 9
    1b0e:	ed 91       	ld	r30, X+
    1b10:	fc 91       	ld	r31, X
    1b12:	00 a0       	ldd	r0, Z+32	; 0x20
    1b14:	f1 a1       	ldd	r31, Z+33	; 0x21
    1b16:	e0 2d       	mov	r30, r0
    1b18:	7b 01       	movw	r14, r22
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	19 95       	eicall
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	08 95       	ret

00001b2e <_ZN12Adafruit_GFX8drawLineEiiiij>:
    1b2e:	8f 92       	push	r8
    1b30:	9f 92       	push	r9
    1b32:	af 92       	push	r10
    1b34:	bf 92       	push	r11
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	4c 01       	movw	r8, r24
    1b48:	6b 01       	movw	r12, r22
    1b4a:	5a 01       	movw	r10, r20
    1b4c:	e9 01       	movw	r28, r18
    1b4e:	dc 01       	movw	r26, r24
    1b50:	ed 91       	ld	r30, X+
    1b52:	fc 91       	ld	r31, X
    1b54:	62 17       	cp	r22, r18
    1b56:	73 07       	cpc	r23, r19
    1b58:	81 f4       	brne	.+32     	; 0x1b7a <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    1b5a:	04 17       	cp	r16, r20
    1b5c:	15 07       	cpc	r17, r21
    1b5e:	24 f4       	brge	.+8      	; 0x1b68 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    1b60:	8b 2d       	mov	r24, r11
    1b62:	58 01       	movw	r10, r16
    1b64:	04 2f       	mov	r16, r20
    1b66:	18 2f       	mov	r17, r24
    1b68:	0a 19       	sub	r16, r10
    1b6a:	1b 09       	sbc	r17, r11
    1b6c:	98 01       	movw	r18, r16
    1b6e:	2f 5f       	subi	r18, 0xFF	; 255
    1b70:	3f 4f       	sbci	r19, 0xFF	; 255
    1b72:	04 8c       	ldd	r0, Z+28	; 0x1c
    1b74:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1b76:	e0 2d       	mov	r30, r0
    1b78:	12 c0       	rjmp	.+36     	; 0x1b9e <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    1b7a:	40 17       	cp	r20, r16
    1b7c:	51 07       	cpc	r21, r17
    1b7e:	09 f5       	brne	.+66     	; 0x1bc2 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    1b80:	26 17       	cp	r18, r22
    1b82:	37 07       	cpc	r19, r23
    1b84:	24 f4       	brge	.+8      	; 0x1b8e <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    1b86:	8d 2d       	mov	r24, r13
    1b88:	69 01       	movw	r12, r18
    1b8a:	c6 2f       	mov	r28, r22
    1b8c:	d8 2f       	mov	r29, r24
    1b8e:	9e 01       	movw	r18, r28
    1b90:	2c 19       	sub	r18, r12
    1b92:	3d 09       	sbc	r19, r13
    1b94:	2f 5f       	subi	r18, 0xFF	; 255
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	06 8c       	ldd	r0, Z+30	; 0x1e
    1b9a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1b9c:	e0 2d       	mov	r30, r0
    1b9e:	87 01       	movw	r16, r14
    1ba0:	a5 01       	movw	r20, r10
    1ba2:	b6 01       	movw	r22, r12
    1ba4:	c4 01       	movw	r24, r8
    1ba6:	19 95       	eicall
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	bf 90       	pop	r11
    1bba:	af 90       	pop	r10
    1bbc:	9f 90       	pop	r9
    1bbe:	8f 90       	pop	r8
    1bc0:	08 95       	ret
    1bc2:	02 84       	ldd	r0, Z+10	; 0x0a
    1bc4:	f3 85       	ldd	r31, Z+11	; 0x0b
    1bc6:	e0 2d       	mov	r30, r0
    1bc8:	19 95       	eicall
    1bca:	d4 01       	movw	r26, r8
    1bcc:	ed 91       	ld	r30, X+
    1bce:	fc 91       	ld	r31, X
    1bd0:	04 88       	ldd	r0, Z+20	; 0x14
    1bd2:	f5 89       	ldd	r31, Z+21	; 0x15
    1bd4:	e0 2d       	mov	r30, r0
    1bd6:	9e 01       	movw	r18, r28
    1bd8:	a5 01       	movw	r20, r10
    1bda:	b6 01       	movw	r22, r12
    1bdc:	c4 01       	movw	r24, r8
    1bde:	19 95       	eicall
    1be0:	d4 01       	movw	r26, r8
    1be2:	ed 91       	ld	r30, X+
    1be4:	fc 91       	ld	r31, X
    1be6:	06 88       	ldd	r0, Z+22	; 0x16
    1be8:	f7 89       	ldd	r31, Z+23	; 0x17
    1bea:	e0 2d       	mov	r30, r0
    1bec:	c4 01       	movw	r24, r8
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	bf 90       	pop	r11
    1c00:	af 90       	pop	r10
    1c02:	9f 90       	pop	r9
    1c04:	8f 90       	pop	r8
    1c06:	19 94       	eijmp

00001c08 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    1c08:	6f 92       	push	r6
    1c0a:	7f 92       	push	r7
    1c0c:	8f 92       	push	r8
    1c0e:	9f 92       	push	r9
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	ec 01       	movw	r28, r24
    1c26:	4b 01       	movw	r8, r22
    1c28:	5a 01       	movw	r10, r20
    1c2a:	69 01       	movw	r12, r18
    1c2c:	38 01       	movw	r6, r16
    1c2e:	e8 81       	ld	r30, Y
    1c30:	f9 81       	ldd	r31, Y+1	; 0x01
    1c32:	02 84       	ldd	r0, Z+10	; 0x0a
    1c34:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c36:	e0 2d       	mov	r30, r0
    1c38:	19 95       	eicall
    1c3a:	e8 81       	ld	r30, Y
    1c3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c3e:	02 88       	ldd	r0, Z+18	; 0x12
    1c40:	f3 89       	ldd	r31, Z+19	; 0x13
    1c42:	e0 2d       	mov	r30, r0
    1c44:	87 01       	movw	r16, r14
    1c46:	96 01       	movw	r18, r12
    1c48:	a5 01       	movw	r20, r10
    1c4a:	b4 01       	movw	r22, r8
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	19 95       	eicall
    1c50:	a5 01       	movw	r20, r10
    1c52:	46 0d       	add	r20, r6
    1c54:	57 1d       	adc	r21, r7
    1c56:	41 50       	subi	r20, 0x01	; 1
    1c58:	51 09       	sbc	r21, r1
    1c5a:	e8 81       	ld	r30, Y
    1c5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c5e:	02 88       	ldd	r0, Z+18	; 0x12
    1c60:	f3 89       	ldd	r31, Z+19	; 0x13
    1c62:	e0 2d       	mov	r30, r0
    1c64:	96 01       	movw	r18, r12
    1c66:	b4 01       	movw	r22, r8
    1c68:	ce 01       	movw	r24, r28
    1c6a:	19 95       	eicall
    1c6c:	e8 81       	ld	r30, Y
    1c6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c70:	00 88       	ldd	r0, Z+16	; 0x10
    1c72:	f1 89       	ldd	r31, Z+17	; 0x11
    1c74:	e0 2d       	mov	r30, r0
    1c76:	93 01       	movw	r18, r6
    1c78:	a5 01       	movw	r20, r10
    1c7a:	b4 01       	movw	r22, r8
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	19 95       	eicall
    1c80:	c8 0c       	add	r12, r8
    1c82:	d9 1c       	adc	r13, r9
    1c84:	b6 01       	movw	r22, r12
    1c86:	61 50       	subi	r22, 0x01	; 1
    1c88:	71 09       	sbc	r23, r1
    1c8a:	e8 81       	ld	r30, Y
    1c8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c8e:	00 88       	ldd	r0, Z+16	; 0x10
    1c90:	f1 89       	ldd	r31, Z+17	; 0x11
    1c92:	e0 2d       	mov	r30, r0
    1c94:	93 01       	movw	r18, r6
    1c96:	a5 01       	movw	r20, r10
    1c98:	ce 01       	movw	r24, r28
    1c9a:	19 95       	eicall
    1c9c:	e8 81       	ld	r30, Y
    1c9e:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca0:	06 88       	ldd	r0, Z+22	; 0x16
    1ca2:	f7 89       	ldd	r31, Z+23	; 0x17
    1ca4:	e0 2d       	mov	r30, r0
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	df 90       	pop	r13
    1cb6:	cf 90       	pop	r12
    1cb8:	bf 90       	pop	r11
    1cba:	af 90       	pop	r10
    1cbc:	9f 90       	pop	r9
    1cbe:	8f 90       	pop	r8
    1cc0:	7f 90       	pop	r7
    1cc2:	6f 90       	pop	r6
    1cc4:	19 94       	eijmp

00001cc6 <_ZN12Adafruit_GFX13invertDisplayEb>:
    1cc6:	08 95       	ret

00001cc8 <_ZN12Adafruit_GFX11setRotationEh>:
    1cc8:	fc 01       	movw	r30, r24
    1cca:	63 70       	andi	r22, 0x03	; 3
    1ccc:	66 8b       	std	Z+22, r22	; 0x16
    1cce:	84 81       	ldd	r24, Z+4	; 0x04
    1cd0:	95 81       	ldd	r25, Z+5	; 0x05
    1cd2:	26 81       	ldd	r18, Z+6	; 0x06
    1cd4:	37 81       	ldd	r19, Z+7	; 0x07
    1cd6:	61 30       	cpi	r22, 0x01	; 1
    1cd8:	39 f0       	breq	.+14     	; 0x1ce8 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1cda:	63 30       	cpi	r22, 0x03	; 3
    1cdc:	29 f0       	breq	.+10     	; 0x1ce8 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1cde:	91 87       	std	Z+9, r25	; 0x09
    1ce0:	80 87       	std	Z+8, r24	; 0x08
    1ce2:	33 87       	std	Z+11, r19	; 0x0b
    1ce4:	22 87       	std	Z+10, r18	; 0x0a
    1ce6:	08 95       	ret
    1ce8:	31 87       	std	Z+9, r19	; 0x09
    1cea:	20 87       	std	Z+8, r18	; 0x08
    1cec:	93 87       	std	Z+11, r25	; 0x0b
    1cee:	82 87       	std	Z+10, r24	; 0x0a
    1cf0:	08 95       	ret

00001cf2 <_ZN12Adafruit_GFXC1Eii>:
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	13 82       	std	Z+3, r1	; 0x03
    1cf6:	12 82       	std	Z+2, r1	; 0x02
    1cf8:	85 e9       	ldi	r24, 0x95	; 149
    1cfa:	92 e0       	ldi	r25, 0x02	; 2
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	80 83       	st	Z, r24
    1d00:	75 83       	std	Z+5, r23	; 0x05
    1d02:	64 83       	std	Z+4, r22	; 0x04
    1d04:	57 83       	std	Z+7, r21	; 0x07
    1d06:	46 83       	std	Z+6, r20	; 0x06
    1d08:	71 87       	std	Z+9, r23	; 0x09
    1d0a:	60 87       	std	Z+8, r22	; 0x08
    1d0c:	53 87       	std	Z+11, r21	; 0x0b
    1d0e:	42 87       	std	Z+10, r20	; 0x0a
    1d10:	16 8a       	std	Z+22, r1	; 0x16
    1d12:	15 86       	std	Z+13, r1	; 0x0d
    1d14:	14 86       	std	Z+12, r1	; 0x0c
    1d16:	17 86       	std	Z+15, r1	; 0x0f
    1d18:	16 86       	std	Z+14, r1	; 0x0e
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	85 8b       	std	Z+21, r24	; 0x15
    1d1e:	84 8b       	std	Z+20, r24	; 0x14
    1d20:	2f ef       	ldi	r18, 0xFF	; 255
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	33 8b       	std	Z+19, r19	; 0x13
    1d26:	22 8b       	std	Z+18, r18	; 0x12
    1d28:	31 8b       	std	Z+17, r19	; 0x11
    1d2a:	20 8b       	std	Z+16, r18	; 0x10
    1d2c:	87 8b       	std	Z+23, r24	; 0x17
    1d2e:	10 8e       	std	Z+24, r1	; 0x18
    1d30:	12 8e       	std	Z+26, r1	; 0x1a
    1d32:	11 8e       	std	Z+25, r1	; 0x19
    1d34:	08 95       	ret

00001d36 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    1d36:	3f 92       	push	r3
    1d38:	4f 92       	push	r4
    1d3a:	5f 92       	push	r5
    1d3c:	6f 92       	push	r6
    1d3e:	7f 92       	push	r7
    1d40:	8f 92       	push	r8
    1d42:	9f 92       	push	r9
    1d44:	af 92       	push	r10
    1d46:	bf 92       	push	r11
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	2a 97       	sbiw	r28, 0x0a	; 10
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	5c 01       	movw	r10, r24
    1d6a:	7e 83       	std	Y+6, r23	; 0x06
    1d6c:	6d 83       	std	Y+5, r22	; 0x05
    1d6e:	58 87       	std	Y+8, r21	; 0x08
    1d70:	4f 83       	std	Y+7, r20	; 0x07
    1d72:	29 01       	movw	r4, r18
    1d74:	37 01       	movw	r6, r14
    1d76:	dc 01       	movw	r26, r24
    1d78:	ed 91       	ld	r30, X+
    1d7a:	fc 91       	ld	r31, X
    1d7c:	02 84       	ldd	r0, Z+10	; 0x0a
    1d7e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d80:	e0 2d       	mov	r30, r0
    1d82:	19 95       	eicall
    1d84:	c8 01       	movw	r24, r16
    1d86:	07 96       	adiw	r24, 0x07	; 7
    1d88:	97 fd       	sbrc	r25, 7
    1d8a:	07 96       	adiw	r24, 0x07	; 7
    1d8c:	9c 01       	movw	r18, r24
    1d8e:	93 e0       	ldi	r25, 0x03	; 3
    1d90:	35 95       	asr	r19
    1d92:	27 95       	ror	r18
    1d94:	9a 95       	dec	r25
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    1d98:	3a 83       	std	Y+2, r19	; 0x02
    1d9a:	29 83       	std	Y+1, r18	; 0x01
    1d9c:	81 2c       	mov	r8, r1
    1d9e:	91 2c       	mov	r9, r1
    1da0:	e1 2c       	mov	r14, r1
    1da2:	f1 2c       	mov	r15, r1
    1da4:	31 2c       	mov	r3, r1
    1da6:	8f 81       	ldd	r24, Y+7	; 0x07
    1da8:	98 85       	ldd	r25, Y+8	; 0x08
    1daa:	8e 0d       	add	r24, r14
    1dac:	9f 1d       	adc	r25, r15
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	e6 14       	cp	r14, r6
    1db4:	f7 04       	cpc	r15, r7
    1db6:	0c f0       	brlt	.+2      	; 0x1dba <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    1db8:	3d c0       	rjmp	.+122    	; 0x1e34 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    1dba:	1a 86       	std	Y+10, r1	; 0x0a
    1dbc:	19 86       	std	Y+9, r1	; 0x09
    1dbe:	a9 85       	ldd	r26, Y+9	; 0x09
    1dc0:	ba 85       	ldd	r27, Y+10	; 0x0a
    1dc2:	a0 17       	cp	r26, r16
    1dc4:	b1 07       	cpc	r27, r17
    1dc6:	74 f5       	brge	.+92     	; 0x1e24 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    1dc8:	cd 01       	movw	r24, r26
    1dca:	87 70       	andi	r24, 0x07	; 7
    1dcc:	99 27       	eor	r25, r25
    1dce:	89 2b       	or	r24, r25
    1dd0:	11 f0       	breq	.+4      	; 0x1dd6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    1dd2:	33 0c       	add	r3, r3
    1dd4:	0e c0       	rjmp	.+28     	; 0x1df2 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    1dd6:	e9 85       	ldd	r30, Y+9	; 0x09
    1dd8:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dda:	f7 fd       	sbrc	r31, 7
    1ddc:	37 96       	adiw	r30, 0x07	; 7
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	f5 95       	asr	r31
    1de2:	e7 95       	ror	r30
    1de4:	8a 95       	dec	r24
    1de6:	e1 f7       	brne	.-8      	; 0x1de0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    1de8:	e8 0d       	add	r30, r8
    1dea:	f9 1d       	adc	r31, r9
    1dec:	e4 0d       	add	r30, r4
    1dee:	f5 1d       	adc	r31, r5
    1df0:	34 90       	lpm	r3, Z
    1df2:	37 fe       	sbrs	r3, 7
    1df4:	11 c0       	rjmp	.+34     	; 0x1e18 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    1df6:	d5 01       	movw	r26, r10
    1df8:	ed 91       	ld	r30, X+
    1dfa:	fc 91       	ld	r31, X
    1dfc:	04 84       	ldd	r0, Z+12	; 0x0c
    1dfe:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e00:	e0 2d       	mov	r30, r0
    1e02:	96 01       	movw	r18, r12
    1e04:	4b 81       	ldd	r20, Y+3	; 0x03
    1e06:	5c 81       	ldd	r21, Y+4	; 0x04
    1e08:	6d 81       	ldd	r22, Y+5	; 0x05
    1e0a:	7e 81       	ldd	r23, Y+6	; 0x06
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	68 0f       	add	r22, r24
    1e12:	79 1f       	adc	r23, r25
    1e14:	c5 01       	movw	r24, r10
    1e16:	19 95       	eicall
    1e18:	a9 85       	ldd	r26, Y+9	; 0x09
    1e1a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e1c:	11 96       	adiw	r26, 0x01	; 1
    1e1e:	ba 87       	std	Y+10, r27	; 0x0a
    1e20:	a9 87       	std	Y+9, r26	; 0x09
    1e22:	cd cf       	rjmp	.-102    	; 0x1dbe <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    1e24:	bf ef       	ldi	r27, 0xFF	; 255
    1e26:	eb 1a       	sub	r14, r27
    1e28:	fb 0a       	sbc	r15, r27
    1e2a:	29 81       	ldd	r18, Y+1	; 0x01
    1e2c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e2e:	82 0e       	add	r8, r18
    1e30:	93 1e       	adc	r9, r19
    1e32:	b9 cf       	rjmp	.-142    	; 0x1da6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    1e34:	d5 01       	movw	r26, r10
    1e36:	ed 91       	ld	r30, X+
    1e38:	fc 91       	ld	r31, X
    1e3a:	06 88       	ldd	r0, Z+22	; 0x16
    1e3c:	f7 89       	ldd	r31, Z+23	; 0x17
    1e3e:	e0 2d       	mov	r30, r0
    1e40:	c5 01       	movw	r24, r10
    1e42:	2a 96       	adiw	r28, 0x0a	; 10
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	ff 90       	pop	r15
    1e58:	ef 90       	pop	r14
    1e5a:	df 90       	pop	r13
    1e5c:	cf 90       	pop	r12
    1e5e:	bf 90       	pop	r11
    1e60:	af 90       	pop	r10
    1e62:	9f 90       	pop	r9
    1e64:	8f 90       	pop	r8
    1e66:	7f 90       	pop	r7
    1e68:	6f 90       	pop	r6
    1e6a:	5f 90       	pop	r5
    1e6c:	4f 90       	pop	r4
    1e6e:	3f 90       	pop	r3
    1e70:	19 94       	eijmp

00001e72 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    1e72:	2f 92       	push	r2
    1e74:	3f 92       	push	r3
    1e76:	4f 92       	push	r4
    1e78:	5f 92       	push	r5
    1e7a:	6f 92       	push	r6
    1e7c:	7f 92       	push	r7
    1e7e:	8f 92       	push	r8
    1e80:	9f 92       	push	r9
    1e82:	af 92       	push	r10
    1e84:	bf 92       	push	r11
    1e86:	cf 92       	push	r12
    1e88:	df 92       	push	r13
    1e8a:	ef 92       	push	r14
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	6b 97       	sbiw	r28, 0x1b	; 27
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ea8:	8a 8f       	std	Y+26, r24	; 0x1a
    1eaa:	2b 01       	movw	r4, r22
    1eac:	5a 83       	std	Y+2, r21	; 0x02
    1eae:	49 83       	std	Y+1, r20	; 0x01
    1eb0:	d2 2e       	mov	r13, r18
    1eb2:	19 87       	std	Y+9, r17	; 0x09
    1eb4:	08 87       	std	Y+8, r16	; 0x08
    1eb6:	47 01       	movw	r8, r14
    1eb8:	ab 82       	std	Y+3, r10	; 0x03
    1eba:	dc 01       	movw	r26, r24
    1ebc:	59 96       	adiw	r26, 0x19	; 25
    1ebe:	2d 91       	ld	r18, X+
    1ec0:	3c 91       	ld	r19, X
    1ec2:	5a 97       	sbiw	r26, 0x1a	; 26
    1ec4:	21 15       	cp	r18, r1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    1eca:	00 c1       	rjmp	.+512    	; 0x20cc <__DATA_REGION_LENGTH__+0xcc>
    1ecc:	18 96       	adiw	r26, 0x08	; 8
    1ece:	8d 91       	ld	r24, X+
    1ed0:	9c 91       	ld	r25, X
    1ed2:	19 97       	sbiw	r26, 0x09	; 9
    1ed4:	68 17       	cp	r22, r24
    1ed6:	79 07       	cpc	r23, r25
    1ed8:	0c f0       	brlt	.+2      	; 0x1edc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    1eda:	e7 c1       	rjmp	.+974    	; 0x22aa <__stack+0xab>
    1edc:	1a 96       	adiw	r26, 0x0a	; 10
    1ede:	8d 91       	ld	r24, X+
    1ee0:	9c 91       	ld	r25, X
    1ee2:	1b 97       	sbiw	r26, 0x0b	; 11
    1ee4:	48 17       	cp	r20, r24
    1ee6:	59 07       	cpc	r21, r25
    1ee8:	0c f0       	brlt	.+2      	; 0x1eec <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    1eea:	df c1       	rjmp	.+958    	; 0x22aa <__stack+0xab>
    1eec:	2c 2c       	mov	r2, r12
    1eee:	31 2c       	mov	r3, r1
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	26 e0       	ldi	r18, 0x06	; 6
    1ef4:	c2 9e       	mul	r12, r18
    1ef6:	e0 0d       	add	r30, r0
    1ef8:	f1 1d       	adc	r31, r1
    1efa:	11 24       	eor	r1, r1
    1efc:	fd 87       	std	Y+13, r31	; 0x0d
    1efe:	ec 87       	std	Y+12, r30	; 0x0c
    1f00:	1e 16       	cp	r1, r30
    1f02:	1f 06       	cpc	r1, r31
    1f04:	0c f0       	brlt	.+2      	; 0x1f08 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    1f06:	d1 c1       	rjmp	.+930    	; 0x22aa <__stack+0xab>
    1f08:	4a 2d       	mov	r20, r10
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	5b 87       	std	Y+11, r21	; 0x0b
    1f0e:	4a 87       	std	Y+10, r20	; 0x0a
    1f10:	83 e0       	ldi	r24, 0x03	; 3
    1f12:	44 0f       	add	r20, r20
    1f14:	55 1f       	adc	r21, r21
    1f16:	8a 95       	dec	r24
    1f18:	e1 f7       	brne	.-8      	; 0x1f12 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    1f1a:	5f 87       	std	Y+15, r21	; 0x0f
    1f1c:	4e 87       	std	Y+14, r20	; 0x0e
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	84 0f       	add	r24, r20
    1f24:	95 1f       	adc	r25, r21
    1f26:	18 16       	cp	r1, r24
    1f28:	19 06       	cpc	r1, r25
    1f2a:	0c f0       	brlt	.+2      	; 0x1f2e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    1f2c:	be c1       	rjmp	.+892    	; 0x22aa <__stack+0xab>
    1f2e:	58 96       	adiw	r26, 0x18	; 24
    1f30:	8c 91       	ld	r24, X
    1f32:	81 11       	cpse	r24, r1
    1f34:	04 c0       	rjmp	.+8      	; 0x1f3e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1f36:	6f ea       	ldi	r22, 0xAF	; 175
    1f38:	6d 15       	cp	r22, r13
    1f3a:	08 f4       	brcc	.+2      	; 0x1f3e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1f3c:	d3 94       	inc	r13
    1f3e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f40:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f42:	ed 91       	ld	r30, X+
    1f44:	fc 91       	ld	r31, X
    1f46:	11 97       	sbiw	r26, 0x01	; 1
    1f48:	02 84       	ldd	r0, Z+10	; 0x0a
    1f4a:	f3 85       	ldd	r31, Z+11	; 0x0b
    1f4c:	e0 2d       	mov	r30, r0
    1f4e:	cd 01       	movw	r24, r26
    1f50:	19 95       	eicall
    1f52:	b5 e0       	ldi	r27, 0x05	; 5
    1f54:	db 9e       	mul	r13, r27
    1f56:	c0 01       	movw	r24, r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	ec 2d       	mov	r30, r12
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	f9 8b       	std	Y+17, r31	; 0x11
    1f60:	e8 8b       	std	Y+16, r30	; 0x10
    1f62:	92 01       	movw	r18, r4
    1f64:	2b 5f       	subi	r18, 0xFB	; 251
    1f66:	3f 4f       	sbci	r19, 0xFF	; 255
    1f68:	3b 8b       	std	Y+19, r19	; 0x13
    1f6a:	2a 8b       	std	Y+18, r18	; 0x12
    1f6c:	32 01       	movw	r6, r4
    1f6e:	5d 82       	std	Y+5, r5	; 0x05
    1f70:	4c 82       	std	Y+4, r4	; 0x04
    1f72:	ac 01       	movw	r20, r24
    1f74:	44 19       	sub	r20, r4
    1f76:	55 09       	sbc	r21, r5
    1f78:	5d 8b       	std	Y+21, r21	; 0x15
    1f7a:	4c 8b       	std	Y+20, r20	; 0x14
    1f7c:	7b 81       	ldd	r23, Y+3	; 0x03
    1f7e:	67 2f       	mov	r22, r23
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	7f 8b       	std	Y+23, r23	; 0x17
    1f84:	6e 8b       	std	Y+22, r22	; 0x16
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	08 96       	adiw	r24, 0x08	; 8
    1f8c:	99 8f       	std	Y+25, r25	; 0x19
    1f8e:	88 8f       	std	Y+24, r24	; 0x18
    1f90:	ec 89       	ldd	r30, Y+20	; 0x14
    1f92:	fd 89       	ldd	r31, Y+21	; 0x15
    1f94:	e6 0d       	add	r30, r6
    1f96:	f7 1d       	adc	r31, r7
    1f98:	e0 57       	subi	r30, 0x70	; 112
    1f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9c:	d4 90       	lpm	r13, Z
    1f9e:	a9 81       	ldd	r26, Y+1	; 0x01
    1fa0:	ba 81       	ldd	r27, Y+2	; 0x02
    1fa2:	bf 83       	std	Y+7, r27	; 0x07
    1fa4:	ae 83       	std	Y+6, r26	; 0x06
    1fa6:	5d 01       	movw	r10, r26
    1fa8:	d0 fe       	sbrs	r13, 0
    1faa:	16 c0       	rjmp	.+44     	; 0x1fd8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    1fac:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1fae:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1fb0:	ed 91       	ld	r30, X+
    1fb2:	fc 91       	ld	r31, X
    1fb4:	b1 e0       	ldi	r27, 0x01	; 1
    1fb6:	cb 12       	cpse	r12, r27
    1fb8:	09 c0       	rjmp	.+18     	; 0x1fcc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1fba:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbc:	21 30       	cpi	r18, 0x01	; 1
    1fbe:	31 f4       	brne	.+12     	; 0x1fcc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1fc0:	04 84       	ldd	r0, Z+12	; 0x0c
    1fc2:	f5 85       	ldd	r31, Z+13	; 0x0d
    1fc4:	e0 2d       	mov	r30, r0
    1fc6:	28 85       	ldd	r18, Y+8	; 0x08
    1fc8:	39 85       	ldd	r19, Y+9	; 0x09
    1fca:	19 c0       	rjmp	.+50     	; 0x1ffe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    1fcc:	06 84       	ldd	r0, Z+14	; 0x0e
    1fce:	f7 85       	ldd	r31, Z+15	; 0x0f
    1fd0:	e0 2d       	mov	r30, r0
    1fd2:	e8 84       	ldd	r14, Y+8	; 0x08
    1fd4:	f9 84       	ldd	r15, Y+9	; 0x09
    1fd6:	1d c0       	rjmp	.+58     	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    1fd8:	48 85       	ldd	r20, Y+8	; 0x08
    1fda:	59 85       	ldd	r21, Y+9	; 0x09
    1fdc:	48 15       	cp	r20, r8
    1fde:	59 05       	cpc	r21, r9
    1fe0:	11 f1       	breq	.+68     	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    1fe2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1fe4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1fe6:	ed 91       	ld	r30, X+
    1fe8:	fc 91       	ld	r31, X
    1fea:	b1 e0       	ldi	r27, 0x01	; 1
    1fec:	cb 12       	cpse	r12, r27
    1fee:	0d c0       	rjmp	.+26     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1ff0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff2:	21 30       	cpi	r18, 0x01	; 1
    1ff4:	51 f4       	brne	.+20     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1ff6:	04 84       	ldd	r0, Z+12	; 0x0c
    1ff8:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ffa:	e0 2d       	mov	r30, r0
    1ffc:	94 01       	movw	r18, r8
    1ffe:	a5 01       	movw	r20, r10
    2000:	b3 01       	movw	r22, r6
    2002:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2004:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2006:	19 95       	eicall
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    200a:	06 84       	ldd	r0, Z+14	; 0x0e
    200c:	f7 85       	ldd	r31, Z+15	; 0x0f
    200e:	e0 2d       	mov	r30, r0
    2010:	74 01       	movw	r14, r8
    2012:	0a 85       	ldd	r16, Y+10	; 0x0a
    2014:	1b 85       	ldd	r17, Y+11	; 0x0b
    2016:	91 01       	movw	r18, r2
    2018:	4e 81       	ldd	r20, Y+6	; 0x06
    201a:	5f 81       	ldd	r21, Y+7	; 0x07
    201c:	6c 81       	ldd	r22, Y+4	; 0x04
    201e:	7d 81       	ldd	r23, Y+5	; 0x05
    2020:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2022:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2024:	19 95       	eicall
    2026:	d6 94       	lsr	r13
    2028:	4e 81       	ldd	r20, Y+6	; 0x06
    202a:	5f 81       	ldd	r21, Y+7	; 0x07
    202c:	6e 89       	ldd	r22, Y+22	; 0x16
    202e:	7f 89       	ldd	r23, Y+23	; 0x17
    2030:	46 0f       	add	r20, r22
    2032:	57 1f       	adc	r21, r23
    2034:	5f 83       	std	Y+7, r21	; 0x07
    2036:	4e 83       	std	Y+6, r20	; 0x06
    2038:	7f ef       	ldi	r23, 0xFF	; 255
    203a:	a7 1a       	sub	r10, r23
    203c:	b7 0a       	sbc	r11, r23
    203e:	88 8d       	ldd	r24, Y+24	; 0x18
    2040:	99 8d       	ldd	r25, Y+25	; 0x19
    2042:	a8 16       	cp	r10, r24
    2044:	b9 06       	cpc	r11, r25
    2046:	09 f0       	breq	.+2      	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    2048:	af cf       	rjmp	.-162    	; 0x1fa8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    204a:	ac 81       	ldd	r26, Y+4	; 0x04
    204c:	bd 81       	ldd	r27, Y+5	; 0x05
    204e:	e8 89       	ldd	r30, Y+16	; 0x10
    2050:	f9 89       	ldd	r31, Y+17	; 0x11
    2052:	ae 0f       	add	r26, r30
    2054:	bf 1f       	adc	r27, r31
    2056:	bd 83       	std	Y+5, r27	; 0x05
    2058:	ac 83       	std	Y+4, r26	; 0x04
    205a:	ff ef       	ldi	r31, 0xFF	; 255
    205c:	6f 1a       	sub	r6, r31
    205e:	7f 0a       	sbc	r7, r31
    2060:	2a 89       	ldd	r18, Y+18	; 0x12
    2062:	3b 89       	ldd	r19, Y+19	; 0x13
    2064:	62 16       	cp	r6, r18
    2066:	73 06       	cpc	r7, r19
    2068:	09 f0       	breq	.+2      	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    206a:	92 cf       	rjmp	.-220    	; 0x1f90 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    206c:	48 85       	ldd	r20, Y+8	; 0x08
    206e:	59 85       	ldd	r21, Y+9	; 0x09
    2070:	48 15       	cp	r20, r8
    2072:	59 05       	cpc	r21, r9
    2074:	09 f4       	brne	.+2      	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    2076:	f7 c0       	rjmp	.+494    	; 0x2266 <__stack+0x67>
    2078:	aa 8d       	ldd	r26, Y+26	; 0x1a
    207a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    207c:	ed 91       	ld	r30, X+
    207e:	fc 91       	ld	r31, X
    2080:	b1 e0       	ldi	r27, 0x01	; 1
    2082:	cb 12       	cpse	r12, r27
    2084:	12 c0       	rjmp	.+36     	; 0x20aa <__DATA_REGION_LENGTH__+0xaa>
    2086:	2b 81       	ldd	r18, Y+3	; 0x03
    2088:	21 30       	cpi	r18, 0x01	; 1
    208a:	79 f4       	brne	.+30     	; 0x20aa <__DATA_REGION_LENGTH__+0xaa>
    208c:	b2 01       	movw	r22, r4
    208e:	6b 5f       	subi	r22, 0xFB	; 251
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	00 88       	ldd	r0, Z+16	; 0x10
    2094:	f1 89       	ldd	r31, Z+17	; 0x11
    2096:	e0 2d       	mov	r30, r0
    2098:	84 01       	movw	r16, r8
    209a:	28 e0       	ldi	r18, 0x08	; 8
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	49 81       	ldd	r20, Y+1	; 0x01
    20a0:	5a 81       	ldd	r21, Y+2	; 0x02
    20a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20a6:	19 95       	eicall
    20a8:	de c0       	rjmp	.+444    	; 0x2266 <__stack+0x67>
    20aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ae:	62 19       	sub	r22, r2
    20b0:	73 09       	sbc	r23, r3
    20b2:	06 84       	ldd	r0, Z+14	; 0x0e
    20b4:	f7 85       	ldd	r31, Z+15	; 0x0f
    20b6:	e0 2d       	mov	r30, r0
    20b8:	74 01       	movw	r14, r8
    20ba:	0e 85       	ldd	r16, Y+14	; 0x0e
    20bc:	1f 85       	ldd	r17, Y+15	; 0x0f
    20be:	91 01       	movw	r18, r2
    20c0:	49 81       	ldd	r20, Y+1	; 0x01
    20c2:	5a 81       	ldd	r21, Y+2	; 0x02
    20c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20c8:	19 95       	eicall
    20ca:	cd c0       	rjmp	.+410    	; 0x2266 <__stack+0x67>
    20cc:	f9 01       	movw	r30, r18
    20ce:	34 96       	adiw	r30, 0x04	; 4
    20d0:	e4 91       	lpm	r30, Z
    20d2:	de 1a       	sub	r13, r30
    20d4:	f9 01       	movw	r30, r18
    20d6:	32 96       	adiw	r30, 0x02	; 2
    20d8:	85 91       	lpm	r24, Z+
    20da:	94 91       	lpm	r25, Z
    20dc:	b7 e0       	ldi	r27, 0x07	; 7
    20de:	db 9e       	mul	r13, r27
    20e0:	80 0d       	add	r24, r0
    20e2:	91 1d       	adc	r25, r1
    20e4:	11 24       	eor	r1, r1
    20e6:	f9 01       	movw	r30, r18
    20e8:	25 91       	lpm	r18, Z+
    20ea:	34 91       	lpm	r19, Z
    20ec:	39 8b       	std	Y+17, r19	; 0x11
    20ee:	28 8b       	std	Y+16, r18	; 0x10
    20f0:	fc 01       	movw	r30, r24
    20f2:	25 90       	lpm	r2, Z+
    20f4:	34 90       	lpm	r3, Z
    20f6:	fc 01       	movw	r30, r24
    20f8:	32 96       	adiw	r30, 0x02	; 2
    20fa:	74 90       	lpm	r7, Z
    20fc:	31 96       	adiw	r30, 0x01	; 1
    20fe:	a4 90       	lpm	r10, Z
    2100:	32 96       	adiw	r30, 0x02	; 2
    2102:	94 90       	lpm	r9, Z
    2104:	31 96       	adiw	r30, 0x01	; 1
    2106:	b4 90       	lpm	r11, Z
    2108:	31 e0       	ldi	r19, 0x01	; 1
    210a:	3c 15       	cp	r19, r12
    210c:	18 f0       	brcs	.+6      	; 0x2114 <__DATA_REGION_LENGTH__+0x114>
    210e:	4b 81       	ldd	r20, Y+3	; 0x03
    2110:	42 30       	cpi	r20, 0x02	; 2
    2112:	68 f0       	brcs	.+26     	; 0x212e <__DATA_REGION_LENGTH__+0x12e>
    2114:	69 2d       	mov	r22, r9
    2116:	09 2c       	mov	r0, r9
    2118:	00 0c       	add	r0, r0
    211a:	77 0b       	sbc	r23, r23
    211c:	7d 83       	std	Y+5, r23	; 0x05
    211e:	6c 83       	std	Y+4, r22	; 0x04
    2120:	8b 2d       	mov	r24, r11
    2122:	0b 2c       	mov	r0, r11
    2124:	00 0c       	add	r0, r0
    2126:	99 0b       	sbc	r25, r25
    2128:	9f 83       	std	Y+7, r25	; 0x07
    212a:	8e 83       	std	Y+6, r24	; 0x06
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <__DATA_REGION_LENGTH__+0x136>
    212e:	1f 82       	std	Y+7, r1	; 0x07
    2130:	1e 82       	std	Y+6, r1	; 0x06
    2132:	1d 82       	std	Y+5, r1	; 0x05
    2134:	1c 82       	std	Y+4, r1	; 0x04
    2136:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2138:	bb 8d       	ldd	r27, Y+27	; 0x1b
    213a:	ed 91       	ld	r30, X+
    213c:	fc 91       	ld	r31, X
    213e:	11 97       	sbiw	r26, 0x01	; 1
    2140:	02 84       	ldd	r0, Z+10	; 0x0a
    2142:	f3 85       	ldd	r31, Z+11	; 0x0b
    2144:	e0 2d       	mov	r30, r0
    2146:	cd 01       	movw	r24, r26
    2148:	19 95       	eicall
    214a:	61 2c       	mov	r6, r1
    214c:	d1 2c       	mov	r13, r1
    214e:	81 2c       	mov	r8, r1
    2150:	fb 81       	ldd	r31, Y+3	; 0x03
    2152:	ef 2f       	mov	r30, r31
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	fb 87       	std	Y+11, r31	; 0x0b
    2158:	ea 87       	std	Y+10, r30	; 0x0a
    215a:	2c 2d       	mov	r18, r12
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	3d 87       	std	Y+13, r19	; 0x0d
    2160:	2c 87       	std	Y+12, r18	; 0x0c
    2162:	49 81       	ldd	r20, Y+1	; 0x01
    2164:	5a 81       	ldd	r21, Y+2	; 0x02
    2166:	4b 0d       	add	r20, r11
    2168:	51 1d       	adc	r21, r1
    216a:	b7 fc       	sbrc	r11, 7
    216c:	5a 95       	dec	r21
    216e:	5d 8b       	std	Y+21, r21	; 0x15
    2170:	4c 8b       	std	Y+20, r20	; 0x14
    2172:	b2 01       	movw	r22, r4
    2174:	69 0d       	add	r22, r9
    2176:	71 1d       	adc	r23, r1
    2178:	97 fc       	sbrc	r9, 7
    217a:	7a 95       	dec	r23
    217c:	7f 8b       	std	Y+23, r23	; 0x17
    217e:	6e 8b       	std	Y+22, r22	; 0x16
    2180:	8a 14       	cp	r8, r10
    2182:	08 f0       	brcs	.+2      	; 0x2186 <__DATA_REGION_LENGTH__+0x186>
    2184:	70 c0       	rjmp	.+224    	; 0x2266 <__stack+0x67>
    2186:	28 2d       	mov	r18, r8
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4e 81       	ldd	r20, Y+6	; 0x06
    218c:	5f 81       	ldd	r21, Y+7	; 0x07
    218e:	42 0f       	add	r20, r18
    2190:	53 1f       	adc	r21, r19
    2192:	aa 85       	ldd	r26, Y+10	; 0x0a
    2194:	bb 85       	ldd	r27, Y+11	; 0x0b
    2196:	a4 9f       	mul	r26, r20
    2198:	c0 01       	movw	r24, r0
    219a:	a5 9f       	mul	r26, r21
    219c:	90 0d       	add	r25, r0
    219e:	b4 9f       	mul	r27, r20
    21a0:	90 0d       	add	r25, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	e9 81       	ldd	r30, Y+1	; 0x01
    21a6:	fa 81       	ldd	r31, Y+2	; 0x02
    21a8:	e8 0f       	add	r30, r24
    21aa:	f9 1f       	adc	r31, r25
    21ac:	ff 87       	std	Y+15, r31	; 0x0f
    21ae:	ee 87       	std	Y+14, r30	; 0x0e
    21b0:	86 2d       	mov	r24, r6
    21b2:	91 2c       	mov	r9, r1
    21b4:	4c 89       	ldd	r20, Y+20	; 0x14
    21b6:	5d 89       	ldd	r21, Y+21	; 0x15
    21b8:	42 0f       	add	r20, r18
    21ba:	53 1f       	adc	r21, r19
    21bc:	5b 8b       	std	Y+19, r21	; 0x13
    21be:	4a 8b       	std	Y+18, r20	; 0x12
    21c0:	97 14       	cp	r9, r7
    21c2:	08 f0       	brcs	.+2      	; 0x21c6 <__DATA_REGION_LENGTH__+0x1c6>
    21c4:	4d c0       	rjmp	.+154    	; 0x2260 <__stack+0x61>
    21c6:	bb 24       	eor	r11, r11
    21c8:	b3 94       	inc	r11
    21ca:	b8 0e       	add	r11, r24
    21cc:	87 70       	andi	r24, 0x07	; 7
    21ce:	41 f4       	brne	.+16     	; 0x21e0 <__DATA_REGION_LENGTH__+0x1e0>
    21d0:	c1 01       	movw	r24, r2
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	e8 89       	ldd	r30, Y+16	; 0x10
    21d6:	f9 89       	ldd	r31, Y+17	; 0x11
    21d8:	e2 0d       	add	r30, r2
    21da:	f3 1d       	adc	r31, r3
    21dc:	d4 90       	lpm	r13, Z
    21de:	1c 01       	movw	r2, r24
    21e0:	d7 fe       	sbrs	r13, 7
    21e2:	3a c0       	rjmp	.+116    	; 0x2258 <__stack+0x59>
    21e4:	51 e0       	ldi	r21, 0x01	; 1
    21e6:	c5 12       	cpse	r12, r21
    21e8:	16 c0       	rjmp	.+44     	; 0x2216 <__stack+0x17>
    21ea:	6b 81       	ldd	r22, Y+3	; 0x03
    21ec:	61 30       	cpi	r22, 0x01	; 1
    21ee:	99 f4       	brne	.+38     	; 0x2216 <__stack+0x17>
    21f0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    21f2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    21f4:	ed 91       	ld	r30, X+
    21f6:	fc 91       	ld	r31, X
    21f8:	11 97       	sbiw	r26, 0x01	; 1
    21fa:	04 84       	ldd	r0, Z+12	; 0x0c
    21fc:	f5 85       	ldd	r31, Z+13	; 0x0d
    21fe:	e0 2d       	mov	r30, r0
    2200:	28 85       	ldd	r18, Y+8	; 0x08
    2202:	39 85       	ldd	r19, Y+9	; 0x09
    2204:	4a 89       	ldd	r20, Y+18	; 0x12
    2206:	5b 89       	ldd	r21, Y+19	; 0x13
    2208:	6e 89       	ldd	r22, Y+22	; 0x16
    220a:	7f 89       	ldd	r23, Y+23	; 0x17
    220c:	69 0d       	add	r22, r9
    220e:	71 1d       	adc	r23, r1
    2210:	cd 01       	movw	r24, r26
    2212:	19 95       	eicall
    2214:	21 c0       	rjmp	.+66     	; 0x2258 <__stack+0x59>
    2216:	8c 81       	ldd	r24, Y+4	; 0x04
    2218:	9d 81       	ldd	r25, Y+5	; 0x05
    221a:	89 0d       	add	r24, r9
    221c:	91 1d       	adc	r25, r1
    221e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2220:	fd 85       	ldd	r31, Y+13	; 0x0d
    2222:	8e 9f       	mul	r24, r30
    2224:	b0 01       	movw	r22, r0
    2226:	8f 9f       	mul	r24, r31
    2228:	70 0d       	add	r23, r0
    222a:	9e 9f       	mul	r25, r30
    222c:	70 0d       	add	r23, r0
    222e:	11 24       	eor	r1, r1
    2230:	64 0d       	add	r22, r4
    2232:	75 1d       	adc	r23, r5
    2234:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2236:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2238:	ed 91       	ld	r30, X+
    223a:	fc 91       	ld	r31, X
    223c:	11 97       	sbiw	r26, 0x01	; 1
    223e:	06 84       	ldd	r0, Z+14	; 0x0e
    2240:	f7 85       	ldd	r31, Z+15	; 0x0f
    2242:	e0 2d       	mov	r30, r0
    2244:	e8 84       	ldd	r14, Y+8	; 0x08
    2246:	f9 84       	ldd	r15, Y+9	; 0x09
    2248:	0a 85       	ldd	r16, Y+10	; 0x0a
    224a:	1b 85       	ldd	r17, Y+11	; 0x0b
    224c:	2c 85       	ldd	r18, Y+12	; 0x0c
    224e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2250:	4e 85       	ldd	r20, Y+14	; 0x0e
    2252:	5f 85       	ldd	r21, Y+15	; 0x0f
    2254:	cd 01       	movw	r24, r26
    2256:	19 95       	eicall
    2258:	dd 0c       	add	r13, r13
    225a:	93 94       	inc	r9
    225c:	8b 2d       	mov	r24, r11
    225e:	b0 cf       	rjmp	.-160    	; 0x21c0 <__DATA_REGION_LENGTH__+0x1c0>
    2260:	67 0c       	add	r6, r7
    2262:	83 94       	inc	r8
    2264:	8d cf       	rjmp	.-230    	; 0x2180 <__DATA_REGION_LENGTH__+0x180>
    2266:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2268:	bb 8d       	ldd	r27, Y+27	; 0x1b
    226a:	ed 91       	ld	r30, X+
    226c:	fc 91       	ld	r31, X
    226e:	11 97       	sbiw	r26, 0x01	; 1
    2270:	06 88       	ldd	r0, Z+22	; 0x16
    2272:	f7 89       	ldd	r31, Z+23	; 0x17
    2274:	e0 2d       	mov	r30, r0
    2276:	cd 01       	movw	r24, r26
    2278:	6b 96       	adiw	r28, 0x1b	; 27
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	df 90       	pop	r13
    2292:	cf 90       	pop	r12
    2294:	bf 90       	pop	r11
    2296:	af 90       	pop	r10
    2298:	9f 90       	pop	r9
    229a:	8f 90       	pop	r8
    229c:	7f 90       	pop	r7
    229e:	6f 90       	pop	r6
    22a0:	5f 90       	pop	r5
    22a2:	4f 90       	pop	r4
    22a4:	3f 90       	pop	r3
    22a6:	2f 90       	pop	r2
    22a8:	19 94       	eijmp
    22aa:	6b 96       	adiw	r28, 0x1b	; 27
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	cf 90       	pop	r12
    22c6:	bf 90       	pop	r11
    22c8:	af 90       	pop	r10
    22ca:	9f 90       	pop	r9
    22cc:	8f 90       	pop	r8
    22ce:	7f 90       	pop	r7
    22d0:	6f 90       	pop	r6
    22d2:	5f 90       	pop	r5
    22d4:	4f 90       	pop	r4
    22d6:	3f 90       	pop	r3
    22d8:	2f 90       	pop	r2
    22da:	08 95       	ret

000022dc <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    22dc:	8f 92       	push	r8
    22de:	9f 92       	push	r9
    22e0:	af 92       	push	r10
    22e2:	cf 92       	push	r12
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	ec 01       	movw	r28, r24
    22f2:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    22f4:	89 8d       	ldd	r24, Y+25	; 0x19
    22f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	09 f0       	breq	.+2      	; 0x22fe <_ZN12Adafruit_GFX5writeEh+0x22>
    22fc:	41 c0       	rjmp	.+130    	; 0x2380 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if (c == '\n') {              // Newline?
    22fe:	6a 30       	cpi	r22, 0x0A	; 10
    2300:	59 f4       	brne	.+22     	; 0x2318 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    2302:	1d 86       	std	Y+13, r1	; 0x0d
    2304:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    2306:	2d 89       	ldd	r18, Y+21	; 0x15
    2308:	8e 85       	ldd	r24, Y+14	; 0x0e
    230a:	9f 85       	ldd	r25, Y+15	; 0x0f
    230c:	38 e0       	ldi	r19, 0x08	; 8
    230e:	23 9f       	mul	r18, r19
    2310:	80 0d       	add	r24, r0
    2312:	91 1d       	adc	r25, r1
    2314:	11 24       	eor	r1, r1
    2316:	42 c0       	rjmp	.+132    	; 0x239c <_ZN12Adafruit_GFX5writeEh+0xc0>
    } else if (c != '\r') {       // Ignore carriage returns
    2318:	6d 30       	cpi	r22, 0x0D	; 13
    231a:	09 f4       	brne	.+2      	; 0x231e <_ZN12Adafruit_GFX5writeEh+0x42>
    231c:	a8 c0       	rjmp	.+336    	; 0x246e <_ZN12Adafruit_GFX5writeEh+0x192>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    231e:	8f 89       	ldd	r24, Y+23	; 0x17
    2320:	88 23       	and	r24, r24
    2322:	c9 f0       	breq	.+50     	; 0x2356 <_ZN12Adafruit_GFX5writeEh+0x7a>
    2324:	3c 89       	ldd	r19, Y+20	; 0x14
    2326:	8c 85       	ldd	r24, Y+12	; 0x0c
    2328:	9d 85       	ldd	r25, Y+13	; 0x0d
    232a:	46 e0       	ldi	r20, 0x06	; 6
    232c:	34 9f       	mul	r19, r20
    232e:	80 0d       	add	r24, r0
    2330:	91 1d       	adc	r25, r1
    2332:	11 24       	eor	r1, r1
    2334:	48 85       	ldd	r20, Y+8	; 0x08
    2336:	59 85       	ldd	r21, Y+9	; 0x09
    2338:	48 17       	cp	r20, r24
    233a:	59 07       	cpc	r21, r25
    233c:	64 f4       	brge	.+24     	; 0x2356 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    233e:	1d 86       	std	Y+13, r1	; 0x0d
    2340:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    2342:	3d 89       	ldd	r19, Y+21	; 0x15
    2344:	8e 85       	ldd	r24, Y+14	; 0x0e
    2346:	9f 85       	ldd	r25, Y+15	; 0x0f
    2348:	48 e0       	ldi	r20, 0x08	; 8
    234a:	34 9f       	mul	r19, r20
    234c:	80 0d       	add	r24, r0
    234e:	91 1d       	adc	r25, r1
    2350:	11 24       	eor	r1, r1
    2352:	9f 87       	std	Y+15, r25	; 0x0f
    2354:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    2356:	ea 88       	ldd	r14, Y+18	; 0x12
    2358:	fb 88       	ldd	r15, Y+19	; 0x13
    235a:	08 89       	ldd	r16, Y+16	; 0x10
    235c:	19 89       	ldd	r17, Y+17	; 0x11
    235e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2360:	5f 85       	ldd	r21, Y+15	; 0x0f
    2362:	6c 85       	ldd	r22, Y+12	; 0x0c
    2364:	7d 85       	ldd	r23, Y+13	; 0x0d
    2366:	ad 88       	ldd	r10, Y+21	; 0x15
    2368:	cc 88       	ldd	r12, Y+20	; 0x14
    236a:	ce 01       	movw	r24, r28
    236c:	82 dd       	rcall	.-1276   	; 0x1e72 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    236e:	2c 89       	ldd	r18, Y+20	; 0x14
    2370:	8c 85       	ldd	r24, Y+12	; 0x0c
    2372:	9d 85       	ldd	r25, Y+13	; 0x0d
    2374:	36 e0       	ldi	r19, 0x06	; 6
    2376:	23 9f       	mul	r18, r19
    2378:	80 0d       	add	r24, r0
    237a:	91 1d       	adc	r25, r1
    237c:	11 24       	eor	r1, r1
    237e:	3e c0       	rjmp	.+124    	; 0x23fc <_ZN12Adafruit_GFX5writeEh+0x120>
    }

  } else { // Custom font

    if (c == '\n') {
    2380:	6a 30       	cpi	r22, 0x0A	; 10
    2382:	79 f4       	brne	.+30     	; 0x23a2 <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x = 0;
    2384:	1d 86       	std	Y+13, r1	; 0x0d
    2386:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2388:	2d 89       	ldd	r18, Y+21	; 0x15
    238a:	fc 01       	movw	r30, r24
    238c:	38 96       	adiw	r30, 0x08	; 8
    238e:	e4 91       	lpm	r30, Z
    2390:	8e 85       	ldd	r24, Y+14	; 0x0e
    2392:	9f 85       	ldd	r25, Y+15	; 0x0f
    2394:	2e 9f       	mul	r18, r30
    2396:	80 0d       	add	r24, r0
    2398:	91 1d       	adc	r25, r1
    239a:	11 24       	eor	r1, r1
    239c:	9f 87       	std	Y+15, r25	; 0x0f
    239e:	8e 87       	std	Y+14, r24	; 0x0e
    23a0:	66 c0       	rjmp	.+204    	; 0x246e <_ZN12Adafruit_GFX5writeEh+0x192>
    } else if (c != '\r') {
    23a2:	6d 30       	cpi	r22, 0x0D	; 13
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <_ZN12Adafruit_GFX5writeEh+0xcc>
    23a6:	63 c0       	rjmp	.+198    	; 0x246e <_ZN12Adafruit_GFX5writeEh+0x192>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    23a8:	fc 01       	movw	r30, r24
    23aa:	34 96       	adiw	r30, 0x04	; 4
    23ac:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    23ae:	63 17       	cp	r22, r19
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <_ZN12Adafruit_GFX5writeEh+0xd8>
    23b2:	5d c0       	rjmp	.+186    	; 0x246e <_ZN12Adafruit_GFX5writeEh+0x192>
    23b4:	32 96       	adiw	r30, 0x02	; 2
    23b6:	e4 91       	lpm	r30, Z
    23b8:	e6 17       	cp	r30, r22
    23ba:	08 f4       	brcc	.+2      	; 0x23be <_ZN12Adafruit_GFX5writeEh+0xe2>
    23bc:	58 c0       	rjmp	.+176    	; 0x246e <_ZN12Adafruit_GFX5writeEh+0x192>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    23be:	46 2f       	mov	r20, r22
    23c0:	43 1b       	sub	r20, r19
    23c2:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    23c4:	fc 01       	movw	r30, r24
    23c6:	32 96       	adiw	r30, 0x02	; 2
    23c8:	85 90       	lpm	r8, Z+
    23ca:	94 90       	lpm	r9, Z
    23cc:	47 e0       	ldi	r20, 0x07	; 7
    23ce:	34 9f       	mul	r19, r20
    23d0:	80 0c       	add	r8, r0
    23d2:	91 1c       	adc	r9, r1
    23d4:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    23d6:	f4 01       	movw	r30, r8
    23d8:	32 96       	adiw	r30, 0x02	; 2
    23da:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    23dc:	31 96       	adiw	r30, 0x01	; 1
    23de:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    23e0:	33 23       	and	r19, r19
    23e2:	11 f0       	breq	.+4      	; 0x23e8 <_ZN12Adafruit_GFX5writeEh+0x10c>
    23e4:	e1 11       	cpse	r30, r1
    23e6:	0d c0       	rjmp	.+26     	; 0x2402 <_ZN12Adafruit_GFX5writeEh+0x126>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    23e8:	f4 01       	movw	r30, r8
    23ea:	34 96       	adiw	r30, 0x04	; 4
    23ec:	e4 91       	lpm	r30, Z
    23ee:	2c 89       	ldd	r18, Y+20	; 0x14
    23f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    23f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    23f4:	e2 9f       	mul	r30, r18
    23f6:	80 0d       	add	r24, r0
    23f8:	91 1d       	adc	r25, r1
    23fa:	11 24       	eor	r1, r1
    23fc:	9d 87       	std	Y+13, r25	; 0x0d
    23fe:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    2400:	36 c0       	rjmp	.+108    	; 0x246e <_ZN12Adafruit_GFX5writeEh+0x192>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    2402:	f4 01       	movw	r30, r8
    2404:	35 96       	adiw	r30, 0x05	; 5
    2406:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    2408:	5f 89       	ldd	r21, Y+23	; 0x17
    240a:	55 23       	and	r21, r21
    240c:	19 f1       	breq	.+70     	; 0x2454 <_ZN12Adafruit_GFX5writeEh+0x178>
    240e:	5c 89       	ldd	r21, Y+20	; 0x14
    2410:	e3 2f       	mov	r30, r19
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	e4 0f       	add	r30, r20
    2416:	f1 1d       	adc	r31, r1
    2418:	47 fd       	sbrc	r20, 7
    241a:	fa 95       	dec	r31
    241c:	5e 9f       	mul	r21, r30
    241e:	b0 01       	movw	r22, r0
    2420:	5f 9f       	mul	r21, r31
    2422:	70 0d       	add	r23, r0
    2424:	11 24       	eor	r1, r1
    2426:	4c 85       	ldd	r20, Y+12	; 0x0c
    2428:	5d 85       	ldd	r21, Y+13	; 0x0d
    242a:	46 0f       	add	r20, r22
    242c:	57 1f       	adc	r21, r23
    242e:	68 85       	ldd	r22, Y+8	; 0x08
    2430:	79 85       	ldd	r23, Y+9	; 0x09
    2432:	64 17       	cp	r22, r20
    2434:	75 07       	cpc	r23, r21
    2436:	74 f4       	brge	.+28     	; 0x2454 <_ZN12Adafruit_GFX5writeEh+0x178>
            cursor_x = 0;
    2438:	1d 86       	std	Y+13, r1	; 0x0d
    243a:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    243c:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    243e:	fc 01       	movw	r30, r24
    2440:	38 96       	adiw	r30, 0x08	; 8
    2442:	e4 91       	lpm	r30, Z
    2444:	8e 85       	ldd	r24, Y+14	; 0x0e
    2446:	9f 85       	ldd	r25, Y+15	; 0x0f
    2448:	3e 9f       	mul	r19, r30
    244a:	80 0d       	add	r24, r0
    244c:	91 1d       	adc	r25, r1
    244e:	11 24       	eor	r1, r1
    2450:	9f 87       	std	Y+15, r25	; 0x0f
    2452:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    2454:	ea 88       	ldd	r14, Y+18	; 0x12
    2456:	fb 88       	ldd	r15, Y+19	; 0x13
    2458:	08 89       	ldd	r16, Y+16	; 0x10
    245a:	19 89       	ldd	r17, Y+17	; 0x11
    245c:	4e 85       	ldd	r20, Y+14	; 0x0e
    245e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2460:	6c 85       	ldd	r22, Y+12	; 0x0c
    2462:	7d 85       	ldd	r23, Y+13	; 0x0d
    2464:	ad 88       	ldd	r10, Y+21	; 0x15
    2466:	cc 88       	ldd	r12, Y+20	; 0x14
    2468:	ce 01       	movw	r24, r28
    246a:	03 dd       	rcall	.-1530   	; 0x1e72 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    246c:	bd cf       	rjmp	.-134    	; 0x23e8 <_ZN12Adafruit_GFX5writeEh+0x10c>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	cf 90       	pop	r12
    2480:	af 90       	pop	r10
    2482:	9f 90       	pop	r9
    2484:	8f 90       	pop	r8
    2486:	08 95       	ret

00002488 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    2488:	61 11       	cpse	r22, r1
    248a:	01 c0       	rjmp	.+2      	; 0x248e <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	fc 01       	movw	r30, r24
    2490:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    2492:	41 11       	cpse	r20, r1
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	fc 01       	movw	r30, r24
    249a:	45 8b       	std	Z+21, r20	; 0x15
    249c:	08 95       	ret

0000249e <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    249e:	46 2f       	mov	r20, r22
    24a0:	f3 cf       	rjmp	.-26     	; 0x2488 <_ZN12Adafruit_GFX11setTextSizeEhh>

000024a2 <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    24a2:	fc 01       	movw	r30, r24
    24a4:	77 fd       	sbrc	r23, 7
    24a6:	b9 c0       	rjmp	.+370    	; 0x261a <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    24a8:	80 85       	ldd	r24, Z+8	; 0x08
    24aa:	91 85       	ldd	r25, Z+9	; 0x09
    24ac:	68 17       	cp	r22, r24
    24ae:	79 07       	cpc	r23, r25
    24b0:	0c f0       	brlt	.+2      	; 0x24b4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    24b2:	b3 c0       	rjmp	.+358    	; 0x261a <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    24b4:	57 fd       	sbrc	r21, 7
    24b6:	b1 c0       	rjmp	.+354    	; 0x261a <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    24b8:	82 85       	ldd	r24, Z+10	; 0x0a
    24ba:	93 85       	ldd	r25, Z+11	; 0x0b
    24bc:	48 17       	cp	r20, r24
    24be:	59 07       	cpc	r21, r25
    24c0:	0c f0       	brlt	.+2      	; 0x24c4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    24c2:	08 95       	ret
    24c4:	86 89       	ldd	r24, Z+22	; 0x16
    24c6:	82 30       	cpi	r24, 0x02	; 2
    24c8:	79 f4       	brne	.+30     	; 0x24e8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    24ca:	84 81       	ldd	r24, Z+4	; 0x04
    24cc:	95 81       	ldd	r25, Z+5	; 0x05
    24ce:	dc 01       	movw	r26, r24
    24d0:	a6 1b       	sub	r26, r22
    24d2:	b7 0b       	sbc	r27, r23
    24d4:	bd 01       	movw	r22, r26
    24d6:	61 50       	subi	r22, 0x01	; 1
    24d8:	71 09       	sbc	r23, r1
    24da:	86 81       	ldd	r24, Z+6	; 0x06
    24dc:	97 81       	ldd	r25, Z+7	; 0x07
    24de:	dc 01       	movw	r26, r24
    24e0:	a4 1b       	sub	r26, r20
    24e2:	b5 0b       	sbc	r27, r21
    24e4:	ad 01       	movw	r20, r26
    24e6:	0e c0       	rjmp	.+28     	; 0x2504 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    24e8:	83 30       	cpi	r24, 0x03	; 3
    24ea:	09 f0       	breq	.+2      	; 0x24ee <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    24ec:	84 c0       	rjmp	.+264    	; 0x25f6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    24ee:	64 27       	eor	r22, r20
    24f0:	75 27       	eor	r23, r21
    24f2:	ca 01       	movw	r24, r20
    24f4:	86 27       	eor	r24, r22
    24f6:	97 27       	eor	r25, r23
    24f8:	68 27       	eor	r22, r24
    24fa:	79 27       	eor	r23, r25
    24fc:	46 81       	ldd	r20, Z+6	; 0x06
    24fe:	57 81       	ldd	r21, Z+7	; 0x07
    2500:	48 1b       	sub	r20, r24
    2502:	59 0b       	sbc	r21, r25
    2504:	41 50       	subi	r20, 0x01	; 1
    2506:	51 09       	sbc	r21, r1
    2508:	21 30       	cpi	r18, 0x01	; 1
    250a:	31 05       	cpc	r19, r1
    250c:	31 f0       	breq	.+12     	; 0x251a <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    250e:	48 f1       	brcs	.+82     	; 0x2562 <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    2510:	22 30       	cpi	r18, 0x02	; 2
    2512:	31 05       	cpc	r19, r1
    2514:	09 f4       	brne	.+2      	; 0x2518 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    2516:	4a c0       	rjmp	.+148    	; 0x25ac <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    2518:	08 95       	ret
    251a:	ca 01       	movw	r24, r20
    251c:	57 fd       	sbrc	r21, 7
    251e:	07 96       	adiw	r24, 0x07	; 7
    2520:	9c 01       	movw	r18, r24
    2522:	a3 e0       	ldi	r26, 0x03	; 3
    2524:	35 95       	asr	r19
    2526:	27 95       	ror	r18
    2528:	aa 95       	dec	r26
    252a:	e1 f7       	brne	.-8      	; 0x2524 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    252c:	a4 81       	ldd	r26, Z+4	; 0x04
    252e:	b5 81       	ldd	r27, Z+5	; 0x05
    2530:	2a 9f       	mul	r18, r26
    2532:	c0 01       	movw	r24, r0
    2534:	2b 9f       	mul	r18, r27
    2536:	90 0d       	add	r25, r0
    2538:	3a 9f       	mul	r19, r26
    253a:	90 0d       	add	r25, r0
    253c:	11 24       	eor	r1, r1
    253e:	68 0f       	add	r22, r24
    2540:	79 1f       	adc	r23, r25
    2542:	07 8c       	ldd	r0, Z+31	; 0x1f
    2544:	f0 a1       	ldd	r31, Z+32	; 0x20
    2546:	e0 2d       	mov	r30, r0
    2548:	e6 0f       	add	r30, r22
    254a:	f7 1f       	adc	r31, r23
    254c:	47 70       	andi	r20, 0x07	; 7
    254e:	55 27       	eor	r21, r21
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	01 c0       	rjmp	.+2      	; 0x2558 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    2556:	88 0f       	add	r24, r24
    2558:	4a 95       	dec	r20
    255a:	ea f7       	brpl	.-6      	; 0x2556 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    255c:	90 81       	ld	r25, Z
    255e:	89 2b       	or	r24, r25
    2560:	48 c0       	rjmp	.+144    	; 0x25f2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    2562:	ca 01       	movw	r24, r20
    2564:	57 fd       	sbrc	r21, 7
    2566:	07 96       	adiw	r24, 0x07	; 7
    2568:	9c 01       	movw	r18, r24
    256a:	93 e0       	ldi	r25, 0x03	; 3
    256c:	35 95       	asr	r19
    256e:	27 95       	ror	r18
    2570:	9a 95       	dec	r25
    2572:	e1 f7       	brne	.-8      	; 0x256c <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    2574:	a4 81       	ldd	r26, Z+4	; 0x04
    2576:	b5 81       	ldd	r27, Z+5	; 0x05
    2578:	2a 9f       	mul	r18, r26
    257a:	c0 01       	movw	r24, r0
    257c:	2b 9f       	mul	r18, r27
    257e:	90 0d       	add	r25, r0
    2580:	3a 9f       	mul	r19, r26
    2582:	90 0d       	add	r25, r0
    2584:	11 24       	eor	r1, r1
    2586:	68 0f       	add	r22, r24
    2588:	79 1f       	adc	r23, r25
    258a:	07 8c       	ldd	r0, Z+31	; 0x1f
    258c:	f0 a1       	ldd	r31, Z+32	; 0x20
    258e:	e0 2d       	mov	r30, r0
    2590:	e6 0f       	add	r30, r22
    2592:	f7 1f       	adc	r31, r23
    2594:	47 70       	andi	r20, 0x07	; 7
    2596:	55 27       	eor	r21, r21
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    259e:	88 0f       	add	r24, r24
    25a0:	4a 95       	dec	r20
    25a2:	ea f7       	brpl	.-6      	; 0x259e <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    25a4:	80 95       	com	r24
    25a6:	90 81       	ld	r25, Z
    25a8:	89 23       	and	r24, r25
    25aa:	23 c0       	rjmp	.+70     	; 0x25f2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    25ac:	ca 01       	movw	r24, r20
    25ae:	57 fd       	sbrc	r21, 7
    25b0:	07 96       	adiw	r24, 0x07	; 7
    25b2:	9c 01       	movw	r18, r24
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	35 95       	asr	r19
    25b8:	27 95       	ror	r18
    25ba:	8a 95       	dec	r24
    25bc:	e1 f7       	brne	.-8      	; 0x25b6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    25be:	a4 81       	ldd	r26, Z+4	; 0x04
    25c0:	b5 81       	ldd	r27, Z+5	; 0x05
    25c2:	2a 9f       	mul	r18, r26
    25c4:	c0 01       	movw	r24, r0
    25c6:	2b 9f       	mul	r18, r27
    25c8:	90 0d       	add	r25, r0
    25ca:	3a 9f       	mul	r19, r26
    25cc:	90 0d       	add	r25, r0
    25ce:	11 24       	eor	r1, r1
    25d0:	68 0f       	add	r22, r24
    25d2:	79 1f       	adc	r23, r25
    25d4:	07 8c       	ldd	r0, Z+31	; 0x1f
    25d6:	f0 a1       	ldd	r31, Z+32	; 0x20
    25d8:	e0 2d       	mov	r30, r0
    25da:	e6 0f       	add	r30, r22
    25dc:	f7 1f       	adc	r31, r23
    25de:	47 70       	andi	r20, 0x07	; 7
    25e0:	55 27       	eor	r21, r21
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	01 c0       	rjmp	.+2      	; 0x25ea <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    25e8:	88 0f       	add	r24, r24
    25ea:	4a 95       	dec	r20
    25ec:	ea f7       	brpl	.-6      	; 0x25e8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    25ee:	90 81       	ld	r25, Z
    25f0:	89 27       	eor	r24, r25
    25f2:	80 83       	st	Z, r24
    25f4:	08 95       	ret
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	09 f0       	breq	.+2      	; 0x25fc <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    25fa:	86 cf       	rjmp	.-244    	; 0x2508 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    25fc:	64 27       	eor	r22, r20
    25fe:	75 27       	eor	r23, r21
    2600:	46 27       	eor	r20, r22
    2602:	57 27       	eor	r21, r23
    2604:	64 27       	eor	r22, r20
    2606:	75 27       	eor	r23, r21
    2608:	84 81       	ldd	r24, Z+4	; 0x04
    260a:	95 81       	ldd	r25, Z+5	; 0x05
    260c:	dc 01       	movw	r26, r24
    260e:	a6 1b       	sub	r26, r22
    2610:	b7 0b       	sbc	r27, r23
    2612:	bd 01       	movw	r22, r26
    2614:	61 50       	subi	r22, 0x01	; 1
    2616:	71 09       	sbc	r23, r1
    2618:	77 cf       	rjmp	.-274    	; 0x2508 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    261a:	08 95       	ret

0000261c <_ZN8SPIClass8transferEh>:
    261c:	8e bd       	out	0x2e, r24	; 46
    261e:	00 00       	nop
    2620:	0d b4       	in	r0, 0x2d	; 45
    2622:	07 fe       	sbrs	r0, 7
    2624:	fd cf       	rjmp	.-6      	; 0x2620 <_ZN8SPIClass8transferEh+0x4>
    2626:	8e b5       	in	r24, 0x2e	; 46
    2628:	08 95       	ret

0000262a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    262a:	4f 92       	push	r4
    262c:	5f 92       	push	r5
    262e:	6f 92       	push	r6
    2630:	7f 92       	push	r7
    2632:	8f 92       	push	r8
    2634:	9f 92       	push	r9
    2636:	af 92       	push	r10
    2638:	bf 92       	push	r11
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	3c 01       	movw	r6, r24
    264e:	29 01       	movw	r4, r18
    2650:	50 e0       	ldi	r21, 0x00	; 0
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	4e db       	rcall	.-2404   	; 0x1cf2 <_ZN12Adafruit_GFXC1Eii>
    2656:	81 ec       	ldi	r24, 0xC1	; 193
    2658:	92 e0       	ldi	r25, 0x02	; 2
    265a:	f3 01       	movw	r30, r6
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
    2660:	14 8e       	std	Z+28, r1	; 0x1c
    2662:	13 8e       	std	Z+27, r1	; 0x1b
    2664:	41 14       	cp	r4, r1
    2666:	51 04       	cpc	r5, r1
    2668:	11 f0       	breq	.+4      	; 0x266e <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x44>
    266a:	c2 01       	movw	r24, r4
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x48>
    266e:	87 e4       	ldi	r24, 0x47	; 71
    2670:	95 e0       	ldi	r25, 0x05	; 5
    2672:	f3 01       	movw	r30, r6
    2674:	96 8f       	std	Z+30, r25	; 0x1e
    2676:	85 8f       	std	Z+29, r24	; 0x1d
    2678:	10 a2       	std	Z+32, r1	; 0x20
    267a:	17 8e       	std	Z+31, r1	; 0x1f
    267c:	8f ef       	ldi	r24, 0xFF	; 255
    267e:	84 a3       	std	Z+36, r24	; 0x24
    2680:	85 a3       	std	Z+37, r24	; 0x25
    2682:	86 a3       	std	Z+38, r24	; 0x26
    2684:	87 a3       	std	Z+39, r24	; 0x27
    2686:	00 a7       	std	Z+40, r16	; 0x28
    2688:	c5 aa       	std	Z+53, r12	; 0x35
    268a:	d6 aa       	std	Z+54, r13	; 0x36
    268c:	e7 aa       	std	Z+55, r14	; 0x37
    268e:	f0 ae       	std	Z+56, r15	; 0x38
    2690:	81 ae       	std	Z+57, r8	; 0x39
    2692:	92 ae       	std	Z+58, r9	; 0x3a
    2694:	a3 ae       	std	Z+59, r10	; 0x3b
    2696:	b4 ae       	std	Z+60, r11	; 0x3c
    2698:	80 e5       	ldi	r24, 0x50	; 80
    269a:	86 af       	std	Z+62, r24	; 0x3e
    269c:	17 ae       	std	Z+63, r1	; 0x3f
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	0f 91       	pop	r16
    26a4:	ff 90       	pop	r15
    26a6:	ef 90       	pop	r14
    26a8:	df 90       	pop	r13
    26aa:	cf 90       	pop	r12
    26ac:	bf 90       	pop	r11
    26ae:	af 90       	pop	r10
    26b0:	9f 90       	pop	r9
    26b2:	8f 90       	pop	r8
    26b4:	7f 90       	pop	r7
    26b6:	6f 90       	pop	r6
    26b8:	5f 90       	pop	r5
    26ba:	4f 90       	pop	r4
    26bc:	08 95       	ret

000026be <_ZN16Adafruit_SSD1306D1Ev>:
    26be:	21 ec       	ldi	r18, 0xC1	; 193
    26c0:	32 e0       	ldi	r19, 0x02	; 2
    26c2:	fc 01       	movw	r30, r24
    26c4:	31 83       	std	Z+1, r19	; 0x01
    26c6:	20 83       	st	Z, r18
    26c8:	87 8d       	ldd	r24, Z+31	; 0x1f
    26ca:	90 a1       	ldd	r25, Z+32	; 0x20
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	11 f0       	breq	.+4      	; 0x26d4 <_ZN16Adafruit_SSD1306D1Ev+0x16>
    26d0:	0c 94 5f 39 	jmp	0x72be	; 0x72be <free>
    26d4:	08 95       	ret

000026d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	fc 01       	movw	r30, r24
    26de:	85 8d       	ldd	r24, Z+29	; 0x1d
    26e0:	96 8d       	ldd	r25, Z+30	; 0x1e
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	19 f1       	breq	.+70     	; 0x272c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    26e6:	16 2f       	mov	r17, r22
    26e8:	ef 01       	movw	r28, r30
    26ea:	61 a1       	ldd	r22, Z+33	; 0x21
    26ec:	06 2e       	mov	r0, r22
    26ee:	00 0c       	add	r0, r0
    26f0:	77 0b       	sbc	r23, r23
    26f2:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <_ZN7TwoWire17beginTransmissionEi>
    26f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26fa:	dc 01       	movw	r26, r24
    26fc:	ed 91       	ld	r30, X+
    26fe:	fc 91       	ld	r31, X
    2700:	01 90       	ld	r0, Z+
    2702:	f0 81       	ld	r31, Z
    2704:	e0 2d       	mov	r30, r0
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	19 95       	eicall
    270a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    270c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    270e:	dc 01       	movw	r26, r24
    2710:	ed 91       	ld	r30, X+
    2712:	fc 91       	ld	r31, X
    2714:	01 90       	ld	r0, Z+
    2716:	f0 81       	ld	r31, Z
    2718:	e0 2d       	mov	r30, r0
    271a:	61 2f       	mov	r22, r17
    271c:	19 95       	eicall
    271e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2720:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>
    272c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    272e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2730:	9c 91       	ld	r25, X
    2732:	83 a9       	ldd	r24, Z+51	; 0x33
    2734:	80 95       	com	r24
    2736:	89 23       	and	r24, r25
    2738:	8c 93       	st	X, r24
    273a:	83 8d       	ldd	r24, Z+27	; 0x1b
    273c:	94 8d       	ldd	r25, Z+28	; 0x1c
    273e:	89 2b       	or	r24, r25
    2740:	29 f0       	breq	.+10     	; 0x274c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x76>
    2742:	86 2f       	mov	r24, r22
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	68 cf       	rjmp	.-304    	; 0x261c <_ZN8SPIClass8transferEh>
    274c:	28 e0       	ldi	r18, 0x08	; 8
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	80 e8       	ldi	r24, 0x80	; 128
    2752:	a1 a5       	ldd	r26, Z+41	; 0x29
    2754:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2756:	91 a9       	ldd	r25, Z+49	; 0x31
    2758:	46 2f       	mov	r20, r22
    275a:	48 23       	and	r20, r24
    275c:	19 f0       	breq	.+6      	; 0x2764 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x8e>
    275e:	4c 91       	ld	r20, X
    2760:	94 2b       	or	r25, r20
    2762:	03 c0       	rjmp	.+6      	; 0x276a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x94>
    2764:	4c 91       	ld	r20, X
    2766:	90 95       	com	r25
    2768:	94 23       	and	r25, r20
    276a:	9c 93       	st	X, r25
    276c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    276e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    2770:	4c 91       	ld	r20, X
    2772:	92 a9       	ldd	r25, Z+50	; 0x32
    2774:	94 2b       	or	r25, r20
    2776:	9c 93       	st	X, r25
    2778:	a3 a5       	ldd	r26, Z+43	; 0x2b
    277a:	b4 a5       	ldd	r27, Z+44	; 0x2c
    277c:	4c 91       	ld	r20, X
    277e:	92 a9       	ldd	r25, Z+50	; 0x32
    2780:	90 95       	com	r25
    2782:	94 23       	and	r25, r20
    2784:	9c 93       	st	X, r25
    2786:	86 95       	lsr	r24
    2788:	21 50       	subi	r18, 0x01	; 1
    278a:	31 09       	sbc	r19, r1
    278c:	11 f7       	brne	.-60     	; 0x2752 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7c>
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	1f 91       	pop	r17
    2794:	08 95       	ret

00002796 <_ZN16Adafruit_SSD130613invertDisplayEb>:
    2796:	1f 93       	push	r17
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	ec 01       	movw	r28, r24
    279e:	16 2f       	mov	r17, r22
    27a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	39 f0       	breq	.+14     	; 0x27b6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    27a8:	4d a9       	ldd	r20, Y+53	; 0x35
    27aa:	5e a9       	ldd	r21, Y+54	; 0x36
    27ac:	6f a9       	ldd	r22, Y+55	; 0x37
    27ae:	78 ad       	ldd	r23, Y+56	; 0x38
    27b0:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_ZN7TwoWire8setClockEm>
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    27b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ba:	89 2b       	or	r24, r25
    27bc:	21 f0       	breq	.+8      	; 0x27c6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    27be:	8e ad       	ldd	r24, Y+62	; 0x3e
    27c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    27c2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN8SPIClass16beginTransactionE11SPISettings>
    27c6:	ef a5       	ldd	r30, Y+47	; 0x2f
    27c8:	f8 a9       	ldd	r31, Y+48	; 0x30
    27ca:	90 81       	ld	r25, Z
    27cc:	8c a9       	ldd	r24, Y+52	; 0x34
    27ce:	80 95       	com	r24
    27d0:	89 23       	and	r24, r25
    27d2:	80 83       	st	Z, r24
    27d4:	11 11       	cpse	r17, r1
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    27d8:	66 ea       	ldi	r22, 0xA6	; 166
    27da:	01 c0       	rjmp	.+2      	; 0x27de <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    27dc:	67 ea       	ldi	r22, 0xA7	; 167
    27de:	ce 01       	movw	r24, r28
    27e0:	7a df       	rcall	.-268    	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    27e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	49 f0       	breq	.+18     	; 0x27fc <_ZN16Adafruit_SSD130613invertDisplayEb+0x66>
    27ea:	49 ad       	ldd	r20, Y+57	; 0x39
    27ec:	5a ad       	ldd	r21, Y+58	; 0x3a
    27ee:	6b ad       	ldd	r22, Y+59	; 0x3b
    27f0:	7c ad       	ldd	r23, Y+60	; 0x3c
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	1f 91       	pop	r17
    27f8:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <_ZN7TwoWire8setClockEm>
    27fc:	ef a5       	ldd	r30, Y+47	; 0x2f
    27fe:	f8 a9       	ldd	r31, Y+48	; 0x30
    2800:	90 81       	ld	r25, Z
    2802:	8c a9       	ldd	r24, Y+52	; 0x34
    2804:	89 2b       	or	r24, r25
    2806:	80 83       	st	Z, r24
    2808:	8b 8d       	ldd	r24, Y+27	; 0x1b
    280a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280c:	89 2b       	or	r24, r25
    280e:	29 f0       	breq	.+10     	; 0x281a <_ZN16Adafruit_SSD130613invertDisplayEb+0x84>
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <_ZN8SPIClass14endTransactionEv>
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	1f 91       	pop	r17
    2820:	08 95       	ret

00002822 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    2822:	bf 92       	push	r11
    2824:	cf 92       	push	r12
    2826:	df 92       	push	r13
    2828:	ef 92       	push	r14
    282a:	ff 92       	push	r15
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	ec 01       	movw	r28, r24
    2836:	b6 2e       	mov	r11, r22
    2838:	07 2f       	mov	r16, r23
    283a:	14 2f       	mov	r17, r20
    283c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    283e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	09 f4       	brne	.+2      	; 0x2846 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    2844:	52 c0       	rjmp	.+164    	; 0x28ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    2846:	69 a1       	ldd	r22, Y+33	; 0x21
    2848:	06 2e       	mov	r0, r22
    284a:	00 0c       	add	r0, r0
    284c:	77 0b       	sbc	r23, r23
    284e:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <_ZN7TwoWire17beginTransmissionEi>
    2852:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2854:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2856:	dc 01       	movw	r26, r24
    2858:	ed 91       	ld	r30, X+
    285a:	fc 91       	ld	r31, X
    285c:	01 90       	ld	r0, Z+
    285e:	f0 81       	ld	r31, Z
    2860:	e0 2d       	mov	r30, r0
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	19 95       	eicall
    2866:	cb 2c       	mov	r12, r11
    2868:	d0 2e       	mov	r13, r16
    286a:	ee 24       	eor	r14, r14
    286c:	e3 94       	inc	r14
    286e:	f1 2c       	mov	r15, r1
    2870:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2872:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2874:	11 23       	and	r17, r17
    2876:	71 f1       	breq	.+92     	; 0x28d4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    2878:	b0 e2       	ldi	r27, 0x20	; 32
    287a:	eb 16       	cp	r14, r27
    287c:	f1 04       	cpc	r15, r1
    287e:	b8 f0       	brcs	.+46     	; 0x28ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    2880:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>
    2884:	69 a1       	ldd	r22, Y+33	; 0x21
    2886:	06 2e       	mov	r0, r22
    2888:	00 0c       	add	r0, r0
    288a:	77 0b       	sbc	r23, r23
    288c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    288e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2890:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <_ZN7TwoWire17beginTransmissionEi>
    2894:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2896:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2898:	dc 01       	movw	r26, r24
    289a:	ed 91       	ld	r30, X+
    289c:	fc 91       	ld	r31, X
    289e:	01 90       	ld	r0, Z+
    28a0:	f0 81       	ld	r31, Z
    28a2:	e0 2d       	mov	r30, r0
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	19 95       	eicall
    28a8:	ee 24       	eor	r14, r14
    28aa:	e3 94       	inc	r14
    28ac:	f1 2c       	mov	r15, r1
    28ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28b2:	f6 01       	movw	r30, r12
    28b4:	64 91       	lpm	r22, Z
    28b6:	dc 01       	movw	r26, r24
    28b8:	ed 91       	ld	r30, X+
    28ba:	fc 91       	ld	r31, X
    28bc:	01 90       	ld	r0, Z+
    28be:	f0 81       	ld	r31, Z
    28c0:	e0 2d       	mov	r30, r0
    28c2:	19 95       	eicall
    28c4:	bf ef       	ldi	r27, 0xFF	; 255
    28c6:	eb 1a       	sub	r14, r27
    28c8:	fb 0a       	sbc	r15, r27
    28ca:	11 50       	subi	r17, 0x01	; 1
    28cc:	f6 01       	movw	r30, r12
    28ce:	31 96       	adiw	r30, 0x01	; 1
    28d0:	6f 01       	movw	r12, r30
    28d2:	ce cf       	rjmp	.-100    	; 0x2870 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	df 90       	pop	r13
    28e2:	cf 90       	pop	r12
    28e4:	bf 90       	pop	r11
    28e6:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>
    28ea:	ed a5       	ldd	r30, Y+45	; 0x2d
    28ec:	fe a5       	ldd	r31, Y+46	; 0x2e
    28ee:	90 81       	ld	r25, Z
    28f0:	8b a9       	ldd	r24, Y+51	; 0x33
    28f2:	80 95       	com	r24
    28f4:	89 23       	and	r24, r25
    28f6:	80 83       	st	Z, r24
    28f8:	e6 2e       	mov	r14, r22
    28fa:	f7 2e       	mov	r15, r23
    28fc:	11 23       	and	r17, r17
    28fe:	71 f1       	breq	.+92     	; 0x295c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13a>
    2900:	f7 01       	movw	r30, r14
    2902:	84 91       	lpm	r24, Z
    2904:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2906:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2908:	23 2b       	or	r18, r19
    290a:	31 f0       	breq	.+12     	; 0x2918 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf6>
    290c:	87 de       	rcall	.-754    	; 0x261c <_ZN8SPIClass8transferEh>
    290e:	11 50       	subi	r17, 0x01	; 1
    2910:	c7 01       	movw	r24, r14
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	7c 01       	movw	r14, r24
    2916:	f2 cf       	rjmp	.-28     	; 0x28fc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    2918:	28 e0       	ldi	r18, 0x08	; 8
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	e9 a5       	ldd	r30, Y+41	; 0x29
    2920:	fa a5       	ldd	r31, Y+42	; 0x2a
    2922:	99 a9       	ldd	r25, Y+49	; 0x31
    2924:	58 2f       	mov	r21, r24
    2926:	54 23       	and	r21, r20
    2928:	19 f0       	breq	.+6      	; 0x2930 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x10e>
    292a:	50 81       	ld	r21, Z
    292c:	95 2b       	or	r25, r21
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x114>
    2930:	50 81       	ld	r21, Z
    2932:	90 95       	com	r25
    2934:	95 23       	and	r25, r21
    2936:	90 83       	st	Z, r25
    2938:	eb a5       	ldd	r30, Y+43	; 0x2b
    293a:	fc a5       	ldd	r31, Y+44	; 0x2c
    293c:	50 81       	ld	r21, Z
    293e:	9a a9       	ldd	r25, Y+50	; 0x32
    2940:	95 2b       	or	r25, r21
    2942:	90 83       	st	Z, r25
    2944:	eb a5       	ldd	r30, Y+43	; 0x2b
    2946:	fc a5       	ldd	r31, Y+44	; 0x2c
    2948:	50 81       	ld	r21, Z
    294a:	9a a9       	ldd	r25, Y+50	; 0x32
    294c:	90 95       	com	r25
    294e:	95 23       	and	r25, r21
    2950:	90 83       	st	Z, r25
    2952:	46 95       	lsr	r20
    2954:	21 50       	subi	r18, 0x01	; 1
    2956:	31 09       	sbc	r19, r1
    2958:	11 f7       	brne	.-60     	; 0x291e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfc>
    295a:	d9 cf       	rjmp	.-78     	; 0x290e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xec>
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	df 90       	pop	r13
    296a:	cf 90       	pop	r12
    296c:	bf 90       	pop	r11
    296e:	08 95       	ret

00002970 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    2970:	fc 01       	movw	r30, r24
    2972:	86 81       	ldd	r24, Z+6	; 0x06
    2974:	97 81       	ldd	r25, Z+7	; 0x07
    2976:	9c 01       	movw	r18, r24
    2978:	29 5f       	subi	r18, 0xF9	; 249
    297a:	3f 4f       	sbci	r19, 0xFF	; 255
    297c:	37 ff       	sbrs	r19, 7
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    2980:	29 5f       	subi	r18, 0xF9	; 249
    2982:	3f 4f       	sbci	r19, 0xFF	; 255
    2984:	83 e0       	ldi	r24, 0x03	; 3
    2986:	35 95       	asr	r19
    2988:	27 95       	ror	r18
    298a:	8a 95       	dec	r24
    298c:	e1 f7       	brne	.-8      	; 0x2986 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    298e:	84 81       	ldd	r24, Z+4	; 0x04
    2990:	95 81       	ldd	r25, Z+5	; 0x05
    2992:	28 9f       	mul	r18, r24
    2994:	a0 01       	movw	r20, r0
    2996:	29 9f       	mul	r18, r25
    2998:	50 0d       	add	r21, r0
    299a:	38 9f       	mul	r19, r24
    299c:	50 0d       	add	r21, r0
    299e:	11 24       	eor	r1, r1
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	87 8d       	ldd	r24, Z+31	; 0x1f
    29a6:	90 a1       	ldd	r25, Z+32	; 0x20
    29a8:	0c 94 dd 3a 	jmp	0x75ba	; 0x75ba <memset>

000029ac <_ZN16Adafruit_SSD13065beginEhhbb>:
    29ac:	8f 92       	push	r8
    29ae:	9f 92       	push	r9
    29b0:	af 92       	push	r10
    29b2:	bf 92       	push	r11
    29b4:	cf 92       	push	r12
    29b6:	df 92       	push	r13
    29b8:	ef 92       	push	r14
    29ba:	ff 92       	push	r15
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	ec 01       	movw	r28, r24
    29c6:	86 2e       	mov	r8, r22
    29c8:	b4 2e       	mov	r11, r20
    29ca:	a2 2e       	mov	r10, r18
    29cc:	90 2e       	mov	r9, r16
    29ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29d0:	98 a1       	ldd	r25, Y+32	; 0x20
    29d2:	89 2b       	or	r24, r25
    29d4:	e9 f4       	brne	.+58     	; 0x2a10 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    29d6:	2e 81       	ldd	r18, Y+6	; 0x06
    29d8:	3f 81       	ldd	r19, Y+7	; 0x07
    29da:	c9 01       	movw	r24, r18
    29dc:	07 96       	adiw	r24, 0x07	; 7
    29de:	97 fd       	sbrc	r25, 7
    29e0:	07 96       	adiw	r24, 0x07	; 7
    29e2:	23 e0       	ldi	r18, 0x03	; 3
    29e4:	95 95       	asr	r25
    29e6:	87 95       	ror	r24
    29e8:	2a 95       	dec	r18
    29ea:	e1 f7       	brne	.-8      	; 0x29e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    29ec:	2c 81       	ldd	r18, Y+4	; 0x04
    29ee:	3d 81       	ldd	r19, Y+5	; 0x05
    29f0:	ac 01       	movw	r20, r24
    29f2:	42 9f       	mul	r20, r18
    29f4:	c0 01       	movw	r24, r0
    29f6:	43 9f       	mul	r20, r19
    29f8:	90 0d       	add	r25, r0
    29fa:	52 9f       	mul	r21, r18
    29fc:	90 0d       	add	r25, r0
    29fe:	11 24       	eor	r1, r1
    2a00:	0e 94 c7 38 	call	0x718e	; 0x718e <malloc>
    2a04:	98 a3       	std	Y+32, r25	; 0x20
    2a06:	8f 8f       	std	Y+31, r24	; 0x1f
    2a08:	89 2b       	or	r24, r25
    2a0a:	11 f4       	brne	.+4      	; 0x2a10 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	84 c1       	rjmp	.+776    	; 0x2d18 <_ZN16Adafruit_SSD13065beginEhhbb+0x36c>
    2a10:	ce 01       	movw	r24, r28
    2a12:	ae df       	rcall	.-164    	; 0x2970 <_ZN16Adafruit_SSD130612clearDisplayEv>
    2a14:	8e 81       	ldd	r24, Y+6	; 0x06
    2a16:	9f 81       	ldd	r25, Y+7	; 0x07
    2a18:	6c 81       	ldd	r22, Y+4	; 0x04
    2a1a:	7d 81       	ldd	r23, Y+5	; 0x05
    2a1c:	81 32       	cpi	r24, 0x21	; 33
    2a1e:	91 05       	cpc	r25, r1
    2a20:	e4 f0       	brlt	.+56     	; 0x2a5a <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    2a22:	ac 01       	movw	r20, r24
    2a24:	40 54       	subi	r20, 0x40	; 64
    2a26:	51 09       	sbc	r21, r1
    2a28:	57 ff       	sbrs	r21, 7
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <_ZN16Adafruit_SSD13065beginEhhbb+0x84>
    2a2c:	4f 5f       	subi	r20, 0xFF	; 255
    2a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a30:	55 95       	asr	r21
    2a32:	47 95       	ror	r20
    2a34:	62 55       	subi	r22, 0x52	; 82
    2a36:	71 09       	sbc	r23, r1
    2a38:	77 ff       	sbrs	r23, 7
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    2a3c:	6f 5f       	subi	r22, 0xFF	; 255
    2a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a40:	75 95       	asr	r23
    2a42:	67 95       	ror	r22
    2a44:	cc 24       	eor	r12, r12
    2a46:	c3 94       	inc	r12
    2a48:	d1 2c       	mov	r13, r1
    2a4a:	80 e4       	ldi	r24, 0x40	; 64
    2a4c:	e8 2e       	mov	r14, r24
    2a4e:	f1 2c       	mov	r15, r1
    2a50:	02 e5       	ldi	r16, 0x52	; 82
    2a52:	10 e0       	ldi	r17, 0x00	; 0
    2a54:	27 e9       	ldi	r18, 0x97	; 151
    2a56:	38 e0       	ldi	r19, 0x08	; 8
    2a58:	1b c0       	rjmp	.+54     	; 0x2a90 <_ZN16Adafruit_SSD13065beginEhhbb+0xe4>
    2a5a:	ac 01       	movw	r20, r24
    2a5c:	40 52       	subi	r20, 0x20	; 32
    2a5e:	51 09       	sbc	r21, r1
    2a60:	57 ff       	sbrs	r21, 7
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
    2a64:	4f 5f       	subi	r20, 0xFF	; 255
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	55 95       	asr	r21
    2a6a:	47 95       	ror	r20
    2a6c:	63 57       	subi	r22, 0x73	; 115
    2a6e:	71 09       	sbc	r23, r1
    2a70:	77 ff       	sbrs	r23, 7
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <_ZN16Adafruit_SSD13065beginEhhbb+0xcc>
    2a74:	6f 5f       	subi	r22, 0xFF	; 255
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	75 95       	asr	r23
    2a7a:	67 95       	ror	r22
    2a7c:	cc 24       	eor	r12, r12
    2a7e:	c3 94       	inc	r12
    2a80:	d1 2c       	mov	r13, r1
    2a82:	a0 e2       	ldi	r26, 0x20	; 32
    2a84:	ea 2e       	mov	r14, r26
    2a86:	f1 2c       	mov	r15, r1
    2a88:	03 e7       	ldi	r16, 0x73	; 115
    2a8a:	10 e0       	ldi	r17, 0x00	; 0
    2a8c:	27 eb       	ldi	r18, 0xB7	; 183
    2a8e:	36 e0       	ldi	r19, 0x06	; 6
    2a90:	ce 01       	movw	r24, r28
    2a92:	51 d9       	rcall	.-3422   	; 0x1d36 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    2a94:	8a a2       	std	Y+34, r8	; 0x22
    2a96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	99 f0       	breq	.+38     	; 0x2ac4 <_ZN16Adafruit_SSD13065beginEhhbb+0x118>
    2a9e:	b1 10       	cpse	r11, r1
    2aa0:	07 c0       	rjmp	.+14     	; 0x2ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0x104>
    2aa2:	2e 81       	ldd	r18, Y+6	; 0x06
    2aa4:	3f 81       	ldd	r19, Y+7	; 0x07
    2aa6:	20 32       	cpi	r18, 0x20	; 32
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	21 f4       	brne	.+8      	; 0x2ab4 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    2aac:	2c e3       	ldi	r18, 0x3C	; 60
    2aae:	03 c0       	rjmp	.+6      	; 0x2ab6 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    2ab0:	2b 2d       	mov	r18, r11
    2ab2:	01 c0       	rjmp	.+2      	; 0x2ab6 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    2ab4:	2d e3       	ldi	r18, 0x3D	; 61
    2ab6:	29 a3       	std	Y+33, r18	; 0x21
    2ab8:	99 20       	and	r9, r9
    2aba:	09 f4       	brne	.+2      	; 0x2abe <_ZN16Adafruit_SSD13065beginEhhbb+0x112>
    2abc:	2a c1       	rjmp	.+596    	; 0x2d12 <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    2abe:	0e 94 bb 2c 	call	0x5976	; 0x5976 <_ZN7TwoWire5beginEv>
    2ac2:	79 c0       	rjmp	.+242    	; 0x2bb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    2ac4:	61 e0       	ldi	r22, 0x01	; 1
    2ac6:	8e a1       	ldd	r24, Y+38	; 0x26
    2ac8:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    2acc:	61 e0       	ldi	r22, 0x01	; 1
    2ace:	8f a1       	ldd	r24, Y+39	; 0x27
    2ad0:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    2ad4:	8e a1       	ldd	r24, Y+38	; 0x26
    2ad6:	08 2e       	mov	r0, r24
    2ad8:	00 0c       	add	r0, r0
    2ada:	99 0b       	sbc	r25, r25
    2adc:	fc 01       	movw	r30, r24
    2ade:	e1 51       	subi	r30, 0x11	; 17
    2ae0:	f4 4f       	sbci	r31, 0xF4	; 244
    2ae2:	e4 91       	lpm	r30, Z
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	ee 0f       	add	r30, r30
    2ae8:	ff 1f       	adc	r31, r31
    2aea:	e1 5b       	subi	r30, 0xB1	; 177
    2aec:	f3 4f       	sbci	r31, 0xF3	; 243
    2aee:	25 91       	lpm	r18, Z+
    2af0:	34 91       	lpm	r19, Z
    2af2:	3e a7       	std	Y+46, r19	; 0x2e
    2af4:	2d a7       	std	Y+45, r18	; 0x2d
    2af6:	fc 01       	movw	r30, r24
    2af8:	e7 55       	subi	r30, 0x57	; 87
    2afa:	f4 4f       	sbci	r31, 0xF4	; 244
    2afc:	e4 91       	lpm	r30, Z
    2afe:	eb ab       	std	Y+51, r30	; 0x33
    2b00:	8f a1       	ldd	r24, Y+39	; 0x27
    2b02:	08 2e       	mov	r0, r24
    2b04:	00 0c       	add	r0, r0
    2b06:	99 0b       	sbc	r25, r25
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e1 51       	subi	r30, 0x11	; 17
    2b0c:	f4 4f       	sbci	r31, 0xF4	; 244
    2b0e:	e4 91       	lpm	r30, Z
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	ee 0f       	add	r30, r30
    2b14:	ff 1f       	adc	r31, r31
    2b16:	e1 5b       	subi	r30, 0xB1	; 177
    2b18:	f3 4f       	sbci	r31, 0xF3	; 243
    2b1a:	a5 91       	lpm	r26, Z+
    2b1c:	b4 91       	lpm	r27, Z
    2b1e:	b8 ab       	std	Y+48, r27	; 0x30
    2b20:	af a7       	std	Y+47, r26	; 0x2f
    2b22:	fc 01       	movw	r30, r24
    2b24:	e7 55       	subi	r30, 0x57	; 87
    2b26:	f4 4f       	sbci	r31, 0xF4	; 244
    2b28:	e4 91       	lpm	r30, Z
    2b2a:	ec ab       	std	Y+52, r30	; 0x34
    2b2c:	8c 91       	ld	r24, X
    2b2e:	e8 2b       	or	r30, r24
    2b30:	ec 93       	st	X, r30
    2b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b36:	89 2b       	or	r24, r25
    2b38:	31 f0       	breq	.+12     	; 0x2b46 <_ZN16Adafruit_SSD13065beginEhhbb+0x19a>
    2b3a:	99 20       	and	r9, r9
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <_ZN16Adafruit_SSD13065beginEhhbb+0x194>
    2b3e:	3b c0       	rjmp	.+118    	; 0x2bb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    2b40:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <_ZN8SPIClass5beginEv>
    2b44:	38 c0       	rjmp	.+112    	; 0x2bb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    2b46:	61 e0       	ldi	r22, 0x01	; 1
    2b48:	8c a1       	ldd	r24, Y+36	; 0x24
    2b4a:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    2b4e:	61 e0       	ldi	r22, 0x01	; 1
    2b50:	8d a1       	ldd	r24, Y+37	; 0x25
    2b52:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    2b56:	8c a1       	ldd	r24, Y+36	; 0x24
    2b58:	08 2e       	mov	r0, r24
    2b5a:	00 0c       	add	r0, r0
    2b5c:	99 0b       	sbc	r25, r25
    2b5e:	fc 01       	movw	r30, r24
    2b60:	e1 51       	subi	r30, 0x11	; 17
    2b62:	f4 4f       	sbci	r31, 0xF4	; 244
    2b64:	e4 91       	lpm	r30, Z
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	ee 0f       	add	r30, r30
    2b6a:	ff 1f       	adc	r31, r31
    2b6c:	e1 5b       	subi	r30, 0xB1	; 177
    2b6e:	f3 4f       	sbci	r31, 0xF3	; 243
    2b70:	25 91       	lpm	r18, Z+
    2b72:	34 91       	lpm	r19, Z
    2b74:	3a a7       	std	Y+42, r19	; 0x2a
    2b76:	29 a7       	std	Y+41, r18	; 0x29
    2b78:	fc 01       	movw	r30, r24
    2b7a:	e7 55       	subi	r30, 0x57	; 87
    2b7c:	f4 4f       	sbci	r31, 0xF4	; 244
    2b7e:	e4 91       	lpm	r30, Z
    2b80:	e9 ab       	std	Y+49, r30	; 0x31
    2b82:	8d a1       	ldd	r24, Y+37	; 0x25
    2b84:	08 2e       	mov	r0, r24
    2b86:	00 0c       	add	r0, r0
    2b88:	99 0b       	sbc	r25, r25
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	e1 51       	subi	r30, 0x11	; 17
    2b8e:	f4 4f       	sbci	r31, 0xF4	; 244
    2b90:	e4 91       	lpm	r30, Z
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	ee 0f       	add	r30, r30
    2b96:	ff 1f       	adc	r31, r31
    2b98:	e1 5b       	subi	r30, 0xB1	; 177
    2b9a:	f3 4f       	sbci	r31, 0xF3	; 243
    2b9c:	a5 91       	lpm	r26, Z+
    2b9e:	b4 91       	lpm	r27, Z
    2ba0:	bc a7       	std	Y+44, r27	; 0x2c
    2ba2:	ab a7       	std	Y+43, r26	; 0x2b
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	e7 55       	subi	r30, 0x57	; 87
    2ba8:	f4 4f       	sbci	r31, 0xF4	; 244
    2baa:	e4 91       	lpm	r30, Z
    2bac:	ea ab       	std	Y+50, r30	; 0x32
    2bae:	8c 91       	ld	r24, X
    2bb0:	e0 95       	com	r30
    2bb2:	e8 23       	and	r30, r24
    2bb4:	ec 93       	st	X, r30
    2bb6:	aa 20       	and	r10, r10
    2bb8:	f1 f0       	breq	.+60     	; 0x2bf6 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
    2bba:	88 a5       	ldd	r24, Y+40	; 0x28
    2bbc:	87 fd       	sbrc	r24, 7
    2bbe:	1b c0       	rjmp	.+54     	; 0x2bf6 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    2bc6:	61 e0       	ldi	r22, 0x01	; 1
    2bc8:	88 a5       	ldd	r24, Y+40	; 0x28
    2bca:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    2bce:	61 e0       	ldi	r22, 0x01	; 1
    2bd0:	70 e0       	ldi	r23, 0x00	; 0
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	0e 94 91 33 	call	0x6722	; 0x6722 <delay>
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	88 a5       	ldd	r24, Y+40	; 0x28
    2bde:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    2be2:	6a e0       	ldi	r22, 0x0A	; 10
    2be4:	70 e0       	ldi	r23, 0x00	; 0
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	0e 94 91 33 	call	0x6722	; 0x6722 <delay>
    2bee:	61 e0       	ldi	r22, 0x01	; 1
    2bf0:	88 a5       	ldd	r24, Y+40	; 0x28
    2bf2:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    2bf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bf8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	39 f0       	breq	.+14     	; 0x2c0c <_ZN16Adafruit_SSD13065beginEhhbb+0x260>
    2bfe:	4d a9       	ldd	r20, Y+53	; 0x35
    2c00:	5e a9       	ldd	r21, Y+54	; 0x36
    2c02:	6f a9       	ldd	r22, Y+55	; 0x37
    2c04:	78 ad       	ldd	r23, Y+56	; 0x38
    2c06:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_ZN7TwoWire8setClockEm>
    2c0a:	0f c0       	rjmp	.+30     	; 0x2c2a <_ZN16Adafruit_SSD13065beginEhhbb+0x27e>
    2c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c10:	89 2b       	or	r24, r25
    2c12:	21 f0       	breq	.+8      	; 0x2c1c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>
    2c14:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c16:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c18:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN8SPIClass16beginTransactionE11SPISettings>
    2c1c:	ef a5       	ldd	r30, Y+47	; 0x2f
    2c1e:	f8 a9       	ldd	r31, Y+48	; 0x30
    2c20:	90 81       	ld	r25, Z
    2c22:	8c a9       	ldd	r24, Y+52	; 0x34
    2c24:	80 95       	com	r24
    2c26:	89 23       	and	r24, r25
    2c28:	80 83       	st	Z, r24
    2c2a:	44 e0       	ldi	r20, 0x04	; 4
    2c2c:	63 eb       	ldi	r22, 0xB3	; 179
    2c2e:	76 e0       	ldi	r23, 0x06	; 6
    2c30:	ce 01       	movw	r24, r28
    2c32:	f7 dd       	rcall	.-1042   	; 0x2822 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2c34:	6e 81       	ldd	r22, Y+6	; 0x06
    2c36:	61 50       	subi	r22, 0x01	; 1
    2c38:	ce 01       	movw	r24, r28
    2c3a:	4d dd       	rcall	.-1382   	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2c3c:	44 e0       	ldi	r20, 0x04	; 4
    2c3e:	6f ea       	ldi	r22, 0xAF	; 175
    2c40:	76 e0       	ldi	r23, 0x06	; 6
    2c42:	ce 01       	movw	r24, r28
    2c44:	ee dd       	rcall	.-1060   	; 0x2822 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2c46:	8a a1       	ldd	r24, Y+34	; 0x22
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	11 f4       	brne	.+4      	; 0x2c50 <_ZN16Adafruit_SSD13065beginEhhbb+0x2a4>
    2c4c:	60 e1       	ldi	r22, 0x10	; 16
    2c4e:	01 c0       	rjmp	.+2      	; 0x2c52 <_ZN16Adafruit_SSD13065beginEhhbb+0x2a6>
    2c50:	64 e1       	ldi	r22, 0x14	; 20
    2c52:	ce 01       	movw	r24, r28
    2c54:	40 dd       	rcall	.-1408   	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2c56:	44 e0       	ldi	r20, 0x04	; 4
    2c58:	6b ea       	ldi	r22, 0xAB	; 171
    2c5a:	76 e0       	ldi	r23, 0x06	; 6
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	e1 dd       	rcall	.-1086   	; 0x2822 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2c60:	8f e8       	ldi	r24, 0x8F	; 143
    2c62:	8d af       	std	Y+61, r24	; 0x3d
    2c64:	8c 81       	ldd	r24, Y+4	; 0x04
    2c66:	9d 81       	ldd	r25, Y+5	; 0x05
    2c68:	80 38       	cpi	r24, 0x80	; 128
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	71 f4       	brne	.+28     	; 0x2c8a <_ZN16Adafruit_SSD13065beginEhhbb+0x2de>
    2c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c70:	9f 81       	ldd	r25, Y+7	; 0x07
    2c72:	80 34       	cpi	r24, 0x40	; 64
    2c74:	91 05       	cpc	r25, r1
    2c76:	b9 f4       	brne	.+46     	; 0x2ca6 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    2c78:	8a a1       	ldd	r24, Y+34	; 0x22
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	11 f4       	brne	.+4      	; 0x2c82 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d6>
    2c7e:	8f e9       	ldi	r24, 0x9F	; 159
    2c80:	01 c0       	rjmp	.+2      	; 0x2c84 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d8>
    2c82:	8f ec       	ldi	r24, 0xCF	; 207
    2c84:	8d af       	std	Y+61, r24	; 0x3d
    2c86:	12 e1       	ldi	r17, 0x12	; 18
    2c88:	0f c0       	rjmp	.+30     	; 0x2ca8 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fc>
    2c8a:	80 36       	cpi	r24, 0x60	; 96
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	59 f4       	brne	.+22     	; 0x2ca6 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    2c90:	8e 81       	ldd	r24, Y+6	; 0x06
    2c92:	9f 81       	ldd	r25, Y+7	; 0x07
    2c94:	40 97       	sbiw	r24, 0x10	; 16
    2c96:	39 f4       	brne	.+14     	; 0x2ca6 <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    2c98:	8a a1       	ldd	r24, Y+34	; 0x22
    2c9a:	81 30       	cpi	r24, 0x01	; 1
    2c9c:	11 f4       	brne	.+4      	; 0x2ca2 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f6>
    2c9e:	80 e1       	ldi	r24, 0x10	; 16
    2ca0:	01 c0       	rjmp	.+2      	; 0x2ca4 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f8>
    2ca2:	8f ea       	ldi	r24, 0xAF	; 175
    2ca4:	8d af       	std	Y+61, r24	; 0x3d
    2ca6:	12 e0       	ldi	r17, 0x02	; 2
    2ca8:	6a ed       	ldi	r22, 0xDA	; 218
    2caa:	ce 01       	movw	r24, r28
    2cac:	14 dd       	rcall	.-1496   	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2cae:	61 2f       	mov	r22, r17
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	11 dd       	rcall	.-1502   	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2cb4:	61 e8       	ldi	r22, 0x81	; 129
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	0e dd       	rcall	.-1508   	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2cba:	6d ad       	ldd	r22, Y+61	; 0x3d
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	0b dd       	rcall	.-1514   	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2cc0:	69 ed       	ldi	r22, 0xD9	; 217
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	08 dd       	rcall	.-1520   	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2cc6:	8a a1       	ldd	r24, Y+34	; 0x22
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	11 f4       	brne	.+4      	; 0x2cd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x324>
    2ccc:	62 e2       	ldi	r22, 0x22	; 34
    2cce:	01 c0       	rjmp	.+2      	; 0x2cd2 <_ZN16Adafruit_SSD13065beginEhhbb+0x326>
    2cd0:	61 ef       	ldi	r22, 0xF1	; 241
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	00 dd       	rcall	.-1536   	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2cd6:	46 e0       	ldi	r20, 0x06	; 6
    2cd8:	65 ea       	ldi	r22, 0xA5	; 165
    2cda:	76 e0       	ldi	r23, 0x06	; 6
    2cdc:	ce 01       	movw	r24, r28
    2cde:	a1 dd       	rcall	.-1214   	; 0x2822 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2ce0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	39 f0       	breq	.+14     	; 0x2cf6 <_ZN16Adafruit_SSD13065beginEhhbb+0x34a>
    2ce8:	49 ad       	ldd	r20, Y+57	; 0x39
    2cea:	5a ad       	ldd	r21, Y+58	; 0x3a
    2cec:	6b ad       	ldd	r22, Y+59	; 0x3b
    2cee:	7c ad       	ldd	r23, Y+60	; 0x3c
    2cf0:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_ZN7TwoWire8setClockEm>
    2cf4:	0c c0       	rjmp	.+24     	; 0x2d0e <_ZN16Adafruit_SSD13065beginEhhbb+0x362>
    2cf6:	ef a5       	ldd	r30, Y+47	; 0x2f
    2cf8:	f8 a9       	ldd	r31, Y+48	; 0x30
    2cfa:	90 81       	ld	r25, Z
    2cfc:	8c a9       	ldd	r24, Y+52	; 0x34
    2cfe:	89 2b       	or	r24, r25
    2d00:	80 83       	st	Z, r24
    2d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d06:	89 2b       	or	r24, r25
    2d08:	11 f0       	breq	.+4      	; 0x2d0e <_ZN16Adafruit_SSD13065beginEhhbb+0x362>
    2d0a:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN8SPIClass14endTransactionEv>
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	03 c0       	rjmp	.+6      	; 0x2d18 <_ZN16Adafruit_SSD13065beginEhhbb+0x36c>
    2d12:	a1 10       	cpse	r10, r1
    2d14:	52 cf       	rjmp	.-348    	; 0x2bba <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    2d16:	73 cf       	rjmp	.-282    	; 0x2bfe <_ZN16Adafruit_SSD13065beginEhhbb+0x252>
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	ff 90       	pop	r15
    2d22:	ef 90       	pop	r14
    2d24:	df 90       	pop	r13
    2d26:	cf 90       	pop	r12
    2d28:	bf 90       	pop	r11
    2d2a:	af 90       	pop	r10
    2d2c:	9f 90       	pop	r9
    2d2e:	8f 90       	pop	r8
    2d30:	08 95       	ret

00002d32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	57 fd       	sbrc	r21, 7
    2d3e:	64 c0       	rjmp	.+200    	; 0x2e08 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2d40:	16 96       	adiw	r26, 0x06	; 6
    2d42:	8d 91       	ld	r24, X+
    2d44:	9c 91       	ld	r25, X
    2d46:	17 97       	sbiw	r26, 0x07	; 7
    2d48:	48 17       	cp	r20, r24
    2d4a:	59 07       	cpc	r21, r25
    2d4c:	0c f0       	brlt	.+2      	; 0x2d50 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    2d4e:	5c c0       	rjmp	.+184    	; 0x2e08 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2d50:	77 ff       	sbrs	r23, 7
    2d52:	04 c0       	rjmp	.+8      	; 0x2d5c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    2d54:	26 0f       	add	r18, r22
    2d56:	37 1f       	adc	r19, r23
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	14 96       	adiw	r26, 0x04	; 4
    2d5e:	cd 91       	ld	r28, X+
    2d60:	dc 91       	ld	r29, X
    2d62:	15 97       	sbiw	r26, 0x05	; 5
    2d64:	cb 01       	movw	r24, r22
    2d66:	82 0f       	add	r24, r18
    2d68:	93 1f       	adc	r25, r19
    2d6a:	c8 17       	cp	r28, r24
    2d6c:	d9 07       	cpc	r29, r25
    2d6e:	1c f4       	brge	.+6      	; 0x2d76 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    2d70:	9e 01       	movw	r18, r28
    2d72:	26 1b       	sub	r18, r22
    2d74:	37 0b       	sbc	r19, r23
    2d76:	12 16       	cp	r1, r18
    2d78:	13 06       	cpc	r1, r19
    2d7a:	0c f0       	brlt	.+2      	; 0x2d7e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    2d7c:	45 c0       	rjmp	.+138    	; 0x2e08 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2d7e:	fa 01       	movw	r30, r20
    2d80:	57 fd       	sbrc	r21, 7
    2d82:	37 96       	adiw	r30, 0x07	; 7
    2d84:	cf 01       	movw	r24, r30
    2d86:	e3 e0       	ldi	r30, 0x03	; 3
    2d88:	95 95       	asr	r25
    2d8a:	87 95       	ror	r24
    2d8c:	ea 95       	dec	r30
    2d8e:	e1 f7       	brne	.-8      	; 0x2d88 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    2d90:	8c 9f       	mul	r24, r28
    2d92:	f0 01       	movw	r30, r0
    2d94:	8d 9f       	mul	r24, r29
    2d96:	f0 0d       	add	r31, r0
    2d98:	9c 9f       	mul	r25, r28
    2d9a:	f0 0d       	add	r31, r0
    2d9c:	11 24       	eor	r1, r1
    2d9e:	6e 0f       	add	r22, r30
    2da0:	7f 1f       	adc	r23, r31
    2da2:	5f 96       	adiw	r26, 0x1f	; 31
    2da4:	ed 91       	ld	r30, X+
    2da6:	fc 91       	ld	r31, X
    2da8:	90 97       	sbiw	r26, 0x20	; 32
    2daa:	e6 0f       	add	r30, r22
    2dac:	f7 1f       	adc	r31, r23
    2dae:	47 70       	andi	r20, 0x07	; 7
    2db0:	55 27       	eor	r21, r21
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	01 c0       	rjmp	.+2      	; 0x2dba <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    2db8:	88 0f       	add	r24, r24
    2dba:	4a 95       	dec	r20
    2dbc:	ea f7       	brpl	.-6      	; 0x2db8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    2dbe:	48 2f       	mov	r20, r24
    2dc0:	01 30       	cpi	r16, 0x01	; 1
    2dc2:	11 05       	cpc	r17, r1
    2dc4:	39 f0       	breq	.+14     	; 0x2dd4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    2dc6:	78 f0       	brcs	.+30     	; 0x2de6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    2dc8:	02 30       	cpi	r16, 0x02	; 2
    2dca:	11 05       	cpc	r17, r1
    2dcc:	e9 f4       	brne	.+58     	; 0x2e08 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2dce:	2e 0f       	add	r18, r30
    2dd0:	3f 1f       	adc	r19, r31
    2dd2:	13 c0       	rjmp	.+38     	; 0x2dfa <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    2dd4:	2e 0f       	add	r18, r30
    2dd6:	3f 1f       	adc	r19, r31
    2dd8:	e2 17       	cp	r30, r18
    2dda:	f3 07       	cpc	r31, r19
    2ddc:	a9 f0       	breq	.+42     	; 0x2e08 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2dde:	80 81       	ld	r24, Z
    2de0:	84 2b       	or	r24, r20
    2de2:	81 93       	st	Z+, r24
    2de4:	f9 cf       	rjmp	.-14     	; 0x2dd8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    2de6:	80 95       	com	r24
    2de8:	2e 0f       	add	r18, r30
    2dea:	3f 1f       	adc	r19, r31
    2dec:	e2 17       	cp	r30, r18
    2dee:	f3 07       	cpc	r31, r19
    2df0:	59 f0       	breq	.+22     	; 0x2e08 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2df2:	90 81       	ld	r25, Z
    2df4:	98 23       	and	r25, r24
    2df6:	91 93       	st	Z+, r25
    2df8:	f9 cf       	rjmp	.-14     	; 0x2dec <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    2dfa:	e2 17       	cp	r30, r18
    2dfc:	f3 07       	cpc	r31, r19
    2dfe:	21 f0       	breq	.+8      	; 0x2e08 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2e00:	80 81       	ld	r24, Z
    2e02:	84 27       	eor	r24, r20
    2e04:	81 93       	st	Z+, r24
    2e06:	f9 cf       	rjmp	.-14     	; 0x2dfa <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	1f 91       	pop	r17
    2e0e:	0f 91       	pop	r16
    2e10:	08 95       	ret

00002e12 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    2e12:	ef 92       	push	r14
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	ec 01       	movw	r28, r24
    2e20:	77 fd       	sbrc	r23, 7
    2e22:	a5 c0       	rjmp	.+330    	; 0x2f6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2e24:	ec 80       	ldd	r14, Y+4	; 0x04
    2e26:	fd 80       	ldd	r15, Y+5	; 0x05
    2e28:	6e 15       	cp	r22, r14
    2e2a:	7f 05       	cpc	r23, r15
    2e2c:	0c f0       	brlt	.+2      	; 0x2e30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    2e2e:	9f c0       	rjmp	.+318    	; 0x2f6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2e30:	57 ff       	sbrs	r21, 7
    2e32:	04 c0       	rjmp	.+8      	; 0x2e3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    2e34:	24 0f       	add	r18, r20
    2e36:	35 1f       	adc	r19, r21
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e40:	fa 01       	movw	r30, r20
    2e42:	e2 0f       	add	r30, r18
    2e44:	f3 1f       	adc	r31, r19
    2e46:	8e 17       	cp	r24, r30
    2e48:	9f 07       	cpc	r25, r31
    2e4a:	1c f4       	brge	.+6      	; 0x2e52 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    2e4c:	9c 01       	movw	r18, r24
    2e4e:	24 1b       	sub	r18, r20
    2e50:	35 0b       	sbc	r19, r21
    2e52:	12 16       	cp	r1, r18
    2e54:	13 06       	cpc	r1, r19
    2e56:	0c f0       	brlt	.+2      	; 0x2e5a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    2e58:	8a c0       	rjmp	.+276    	; 0x2f6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2e5a:	92 2f       	mov	r25, r18
    2e5c:	84 2f       	mov	r24, r20
    2e5e:	86 95       	lsr	r24
    2e60:	86 95       	lsr	r24
    2e62:	86 95       	lsr	r24
    2e64:	8e 9d       	mul	r24, r14
    2e66:	d0 01       	movw	r26, r0
    2e68:	8f 9d       	mul	r24, r15
    2e6a:	b0 0d       	add	r27, r0
    2e6c:	11 24       	eor	r1, r1
    2e6e:	6a 0f       	add	r22, r26
    2e70:	7b 1f       	adc	r23, r27
    2e72:	af 8d       	ldd	r26, Y+31	; 0x1f
    2e74:	b8 a1       	ldd	r27, Y+32	; 0x20
    2e76:	a6 0f       	add	r26, r22
    2e78:	b7 1f       	adc	r27, r23
    2e7a:	47 70       	andi	r20, 0x07	; 7
    2e7c:	b1 f1       	breq	.+108    	; 0x2eea <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2e7e:	88 e0       	ldi	r24, 0x08	; 8
    2e80:	84 1b       	sub	r24, r20
    2e82:	48 2f       	mov	r20, r24
    2e84:	68 2f       	mov	r22, r24
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	fb 01       	movw	r30, r22
    2e8a:	e3 56       	subi	r30, 0x63	; 99
    2e8c:	f9 4f       	sbci	r31, 0xF9	; 249
    2e8e:	e4 91       	lpm	r30, Z
    2e90:	28 17       	cp	r18, r24
    2e92:	98 f4       	brcc	.+38     	; 0x2eba <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    2e94:	62 1b       	sub	r22, r18
    2e96:	71 09       	sbc	r23, r1
    2e98:	2f ef       	ldi	r18, 0xFF	; 255
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	02 c0       	rjmp	.+4      	; 0x2ea2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    2e9e:	35 95       	asr	r19
    2ea0:	27 95       	ror	r18
    2ea2:	6a 95       	dec	r22
    2ea4:	e2 f7       	brpl	.-8      	; 0x2e9e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    2ea6:	e2 23       	and	r30, r18
    2ea8:	01 30       	cpi	r16, 0x01	; 1
    2eaa:	11 05       	cpc	r17, r1
    2eac:	49 f0       	breq	.+18     	; 0x2ec0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    2eae:	78 f0       	brcs	.+30     	; 0x2ece <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2eb0:	02 30       	cpi	r16, 0x02	; 2
    2eb2:	11 05       	cpc	r17, r1
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    2eb6:	5b c0       	rjmp	.+182    	; 0x2f6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2eb8:	0e c0       	rjmp	.+28     	; 0x2ed6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    2eba:	01 30       	cpi	r16, 0x01	; 1
    2ebc:	11 05       	cpc	r17, r1
    2ebe:	19 f4       	brne	.+6      	; 0x2ec6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    2ec0:	8c 91       	ld	r24, X
    2ec2:	e8 2b       	or	r30, r24
    2ec4:	0a c0       	rjmp	.+20     	; 0x2eda <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    2ec6:	01 30       	cpi	r16, 0x01	; 1
    2ec8:	11 05       	cpc	r17, r1
    2eca:	08 f0       	brcs	.+2      	; 0x2ece <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2ecc:	49 c0       	rjmp	.+146    	; 0x2f60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    2ece:	e0 95       	com	r30
    2ed0:	8c 91       	ld	r24, X
    2ed2:	e8 23       	and	r30, r24
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    2ed6:	8c 91       	ld	r24, X
    2ed8:	e8 27       	eor	r30, r24
    2eda:	ec 93       	st	X, r30
    2edc:	94 17       	cp	r25, r20
    2ede:	08 f4       	brcc	.+2      	; 0x2ee2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    2ee0:	46 c0       	rjmp	.+140    	; 0x2f6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2ee2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ee4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ee6:	a2 0f       	add	r26, r18
    2ee8:	b3 1f       	adc	r27, r19
    2eea:	e9 2f       	mov	r30, r25
    2eec:	e4 1b       	sub	r30, r20
    2eee:	e8 30       	cpi	r30, 0x08	; 8
    2ef0:	f8 f0       	brcs	.+62     	; 0x2f30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    2ef2:	02 30       	cpi	r16, 0x02	; 2
    2ef4:	11 05       	cpc	r17, r1
    2ef6:	61 f4       	brne	.+24     	; 0x2f10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    2ef8:	8e 2f       	mov	r24, r30
    2efa:	9c 91       	ld	r25, X
    2efc:	90 95       	com	r25
    2efe:	9c 93       	st	X, r25
    2f00:	2c 81       	ldd	r18, Y+4	; 0x04
    2f02:	3d 81       	ldd	r19, Y+5	; 0x05
    2f04:	a2 0f       	add	r26, r18
    2f06:	b3 1f       	adc	r27, r19
    2f08:	88 50       	subi	r24, 0x08	; 8
    2f0a:	88 30       	cpi	r24, 0x08	; 8
    2f0c:	b0 f7       	brcc	.-20     	; 0x2efa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    2f0e:	0f c0       	rjmp	.+30     	; 0x2f2e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	01 15       	cp	r16, r1
    2f14:	11 05       	cpc	r17, r1
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	81 95       	neg	r24
    2f1c:	9e 2f       	mov	r25, r30
    2f1e:	8c 93       	st	X, r24
    2f20:	2c 81       	ldd	r18, Y+4	; 0x04
    2f22:	3d 81       	ldd	r19, Y+5	; 0x05
    2f24:	a2 0f       	add	r26, r18
    2f26:	b3 1f       	adc	r27, r19
    2f28:	98 50       	subi	r25, 0x08	; 8
    2f2a:	98 30       	cpi	r25, 0x08	; 8
    2f2c:	c0 f7       	brcc	.-16     	; 0x2f1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    2f2e:	e7 70       	andi	r30, 0x07	; 7
    2f30:	ee 23       	and	r30, r30
    2f32:	e9 f0       	breq	.+58     	; 0x2f6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	eb 56       	subi	r30, 0x6B	; 107
    2f38:	f9 4f       	sbci	r31, 0xF9	; 249
    2f3a:	e4 91       	lpm	r30, Z
    2f3c:	01 30       	cpi	r16, 0x01	; 1
    2f3e:	11 05       	cpc	r17, r1
    2f40:	39 f0       	breq	.+14     	; 0x2f50 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    2f42:	48 f0       	brcs	.+18     	; 0x2f56 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    2f44:	02 30       	cpi	r16, 0x02	; 2
    2f46:	11 05       	cpc	r17, r1
    2f48:	91 f4       	brne	.+36     	; 0x2f6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2f4a:	8c 91       	ld	r24, X
    2f4c:	e8 27       	eor	r30, r24
    2f4e:	06 c0       	rjmp	.+12     	; 0x2f5c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2f50:	8c 91       	ld	r24, X
    2f52:	e8 2b       	or	r30, r24
    2f54:	03 c0       	rjmp	.+6      	; 0x2f5c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2f56:	e0 95       	com	r30
    2f58:	8c 91       	ld	r24, X
    2f5a:	e8 23       	and	r30, r24
    2f5c:	ec 93       	st	X, r30
    2f5e:	07 c0       	rjmp	.+14     	; 0x2f6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2f60:	02 30       	cpi	r16, 0x02	; 2
    2f62:	11 05       	cpc	r17, r1
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    2f66:	b7 cf       	rjmp	.-146    	; 0x2ed6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    2f68:	ae 0d       	add	r26, r14
    2f6a:	bf 1d       	adc	r27, r15
    2f6c:	be cf       	rjmp	.-132    	; 0x2eea <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2f6e:	df 91       	pop	r29
    2f70:	cf 91       	pop	r28
    2f72:	1f 91       	pop	r17
    2f74:	0f 91       	pop	r16
    2f76:	ff 90       	pop	r15
    2f78:	ef 90       	pop	r14
    2f7a:	08 95       	ret

00002f7c <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    2f7c:	0f 93       	push	r16
    2f7e:	1f 93       	push	r17
    2f80:	dc 01       	movw	r26, r24
    2f82:	56 96       	adiw	r26, 0x16	; 22
    2f84:	ec 91       	ld	r30, X
    2f86:	56 97       	sbiw	r26, 0x16	; 22
    2f88:	e2 30       	cpi	r30, 0x02	; 2
    2f8a:	61 f0       	breq	.+24     	; 0x2fa4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    2f8c:	e3 30       	cpi	r30, 0x03	; 3
    2f8e:	09 f1       	breq	.+66     	; 0x2fd2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    2f90:	e1 30       	cpi	r30, 0x01	; 1
    2f92:	79 f5       	brne	.+94     	; 0x2ff2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    2f94:	14 96       	adiw	r26, 0x04	; 4
    2f96:	ed 91       	ld	r30, X+
    2f98:	fc 91       	ld	r31, X
    2f9a:	15 97       	sbiw	r26, 0x05	; 5
    2f9c:	e4 1b       	sub	r30, r20
    2f9e:	f5 0b       	sbc	r31, r21
    2fa0:	31 97       	sbiw	r30, 0x01	; 1
    2fa2:	23 c0       	rjmp	.+70     	; 0x2fea <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	14 96       	adiw	r26, 0x04	; 4
    2fa8:	ed 91       	ld	r30, X+
    2faa:	fc 91       	ld	r31, X
    2fac:	15 97       	sbiw	r26, 0x05	; 5
    2fae:	df 01       	movw	r26, r30
    2fb0:	a6 1b       	sub	r26, r22
    2fb2:	b7 0b       	sbc	r27, r23
    2fb4:	bd 01       	movw	r22, r26
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	16 96       	adiw	r26, 0x06	; 6
    2fba:	ed 91       	ld	r30, X+
    2fbc:	fc 91       	ld	r31, X
    2fbe:	17 97       	sbiw	r26, 0x07	; 7
    2fc0:	df 01       	movw	r26, r30
    2fc2:	a4 1b       	sub	r26, r20
    2fc4:	b5 0b       	sbc	r27, r21
    2fc6:	ad 01       	movw	r20, r26
    2fc8:	41 50       	subi	r20, 0x01	; 1
    2fca:	51 09       	sbc	r21, r1
    2fcc:	62 1b       	sub	r22, r18
    2fce:	73 0b       	sbc	r23, r19
    2fd0:	10 c0       	rjmp	.+32     	; 0x2ff2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    2fd2:	fa 01       	movw	r30, r20
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	16 96       	adiw	r26, 0x06	; 6
    2fd8:	4d 91       	ld	r20, X+
    2fda:	5c 91       	ld	r21, X
    2fdc:	17 97       	sbiw	r26, 0x07	; 7
    2fde:	da 01       	movw	r26, r20
    2fe0:	a6 1b       	sub	r26, r22
    2fe2:	b7 0b       	sbc	r27, r23
    2fe4:	bd 01       	movw	r22, r26
    2fe6:	62 1b       	sub	r22, r18
    2fe8:	73 0b       	sbc	r23, r19
    2fea:	ab 01       	movw	r20, r22
    2fec:	bf 01       	movw	r22, r30
    2fee:	11 df       	rcall	.-478    	; 0x2e12 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    2ff0:	01 c0       	rjmp	.+2      	; 0x2ff4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    2ff2:	9f de       	rcall	.-706    	; 0x2d32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    2ff4:	1f 91       	pop	r17
    2ff6:	0f 91       	pop	r16
    2ff8:	08 95       	ret

00002ffa <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	dc 01       	movw	r26, r24
    3000:	56 96       	adiw	r26, 0x16	; 22
    3002:	ec 91       	ld	r30, X
    3004:	56 97       	sbiw	r26, 0x16	; 22
    3006:	e2 30       	cpi	r30, 0x02	; 2
    3008:	69 f0       	breq	.+26     	; 0x3024 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    300a:	e3 30       	cpi	r30, 0x03	; 3
    300c:	11 f1       	breq	.+68     	; 0x3052 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    300e:	e1 30       	cpi	r30, 0x01	; 1
    3010:	81 f5       	brne	.+96     	; 0x3072 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    3012:	14 96       	adiw	r26, 0x04	; 4
    3014:	ed 91       	ld	r30, X+
    3016:	fc 91       	ld	r31, X
    3018:	15 97       	sbiw	r26, 0x05	; 5
    301a:	e4 1b       	sub	r30, r20
    301c:	f5 0b       	sbc	r31, r21
    301e:	e2 1b       	sub	r30, r18
    3020:	f3 0b       	sbc	r31, r19
    3022:	23 c0       	rjmp	.+70     	; 0x306a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    3024:	dc 01       	movw	r26, r24
    3026:	14 96       	adiw	r26, 0x04	; 4
    3028:	ed 91       	ld	r30, X+
    302a:	fc 91       	ld	r31, X
    302c:	15 97       	sbiw	r26, 0x05	; 5
    302e:	df 01       	movw	r26, r30
    3030:	a6 1b       	sub	r26, r22
    3032:	b7 0b       	sbc	r27, r23
    3034:	bd 01       	movw	r22, r26
    3036:	61 50       	subi	r22, 0x01	; 1
    3038:	71 09       	sbc	r23, r1
    303a:	dc 01       	movw	r26, r24
    303c:	16 96       	adiw	r26, 0x06	; 6
    303e:	ed 91       	ld	r30, X+
    3040:	fc 91       	ld	r31, X
    3042:	17 97       	sbiw	r26, 0x07	; 7
    3044:	df 01       	movw	r26, r30
    3046:	a4 1b       	sub	r26, r20
    3048:	b5 0b       	sbc	r27, r21
    304a:	ad 01       	movw	r20, r26
    304c:	42 1b       	sub	r20, r18
    304e:	53 0b       	sbc	r21, r19
    3050:	10 c0       	rjmp	.+32     	; 0x3072 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    3052:	fa 01       	movw	r30, r20
    3054:	dc 01       	movw	r26, r24
    3056:	16 96       	adiw	r26, 0x06	; 6
    3058:	4d 91       	ld	r20, X+
    305a:	5c 91       	ld	r21, X
    305c:	17 97       	sbiw	r26, 0x07	; 7
    305e:	da 01       	movw	r26, r20
    3060:	a6 1b       	sub	r26, r22
    3062:	b7 0b       	sbc	r27, r23
    3064:	bd 01       	movw	r22, r26
    3066:	61 50       	subi	r22, 0x01	; 1
    3068:	71 09       	sbc	r23, r1
    306a:	ab 01       	movw	r20, r22
    306c:	bf 01       	movw	r22, r30
    306e:	61 de       	rcall	.-830    	; 0x2d32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    3070:	01 c0       	rjmp	.+2      	; 0x3074 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    3072:	cf de       	rcall	.-610    	; 0x2e12 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    3074:	1f 91       	pop	r17
    3076:	0f 91       	pop	r16
    3078:	08 95       	ret

0000307a <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    307a:	cf 92       	push	r12
    307c:	df 92       	push	r13
    307e:	ef 92       	push	r14
    3080:	ff 92       	push	r15
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	ec 01       	movw	r28, r24
  TRANSACTION_START
    308c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    308e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3090:	00 97       	sbiw	r24, 0x00	; 0
    3092:	39 f0       	breq	.+14     	; 0x30a2 <_ZN16Adafruit_SSD13067displayEv+0x28>
    3094:	4d a9       	ldd	r20, Y+53	; 0x35
    3096:	5e a9       	ldd	r21, Y+54	; 0x36
    3098:	6f a9       	ldd	r22, Y+55	; 0x37
    309a:	78 ad       	ldd	r23, Y+56	; 0x38
    309c:	0e 94 ca 2c 	call	0x5994	; 0x5994 <_ZN7TwoWire8setClockEm>
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <_ZN16Adafruit_SSD13067displayEv+0x46>
    30a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30a6:	89 2b       	or	r24, r25
    30a8:	21 f0       	breq	.+8      	; 0x30b2 <_ZN16Adafruit_SSD13067displayEv+0x38>
    30aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    30ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    30ae:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN8SPIClass16beginTransactionE11SPISettings>
    30b2:	ef a5       	ldd	r30, Y+47	; 0x2f
    30b4:	f8 a9       	ldd	r31, Y+48	; 0x30
    30b6:	90 81       	ld	r25, Z
    30b8:	8c a9       	ldd	r24, Y+52	; 0x34
    30ba:	80 95       	com	r24
    30bc:	89 23       	and	r24, r25
    30be:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    30c0:	45 e0       	ldi	r20, 0x05	; 5
    30c2:	60 e9       	ldi	r22, 0x90	; 144
    30c4:	76 e0       	ldi	r23, 0x06	; 6
    30c6:	ce 01       	movw	r24, r28
    30c8:	ac db       	rcall	.-2216   	; 0x2822 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    30ca:	6c 81       	ldd	r22, Y+4	; 0x04
    30cc:	61 50       	subi	r22, 0x01	; 1
    30ce:	ce 01       	movw	r24, r28
    30d0:	02 db       	rcall	.-2556   	; 0x26d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    30d2:	2e 81       	ldd	r18, Y+6	; 0x06
    30d4:	3f 81       	ldd	r19, Y+7	; 0x07
    30d6:	c9 01       	movw	r24, r18
    30d8:	07 96       	adiw	r24, 0x07	; 7
    30da:	97 fd       	sbrc	r25, 7
    30dc:	07 96       	adiw	r24, 0x07	; 7
    30de:	23 e0       	ldi	r18, 0x03	; 3
    30e0:	95 95       	asr	r25
    30e2:	87 95       	ror	r24
    30e4:	2a 95       	dec	r18
    30e6:	e1 f7       	brne	.-8      	; 0x30e0 <_ZN16Adafruit_SSD13067displayEv+0x66>
    30e8:	2c 81       	ldd	r18, Y+4	; 0x04
    30ea:	3d 81       	ldd	r19, Y+5	; 0x05
    30ec:	82 9f       	mul	r24, r18
    30ee:	70 01       	movw	r14, r0
    30f0:	83 9f       	mul	r24, r19
    30f2:	f0 0c       	add	r15, r0
    30f4:	92 9f       	mul	r25, r18
    30f6:	f0 0c       	add	r15, r0
    30f8:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    30fa:	0f 8d       	ldd	r16, Y+31	; 0x1f
    30fc:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    30fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3100:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3102:	e0 0e       	add	r14, r16
    3104:	f1 1e       	adc	r15, r17
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	09 f4       	brne	.+2      	; 0x310c <_ZN16Adafruit_SSD13067displayEv+0x92>
    310a:	43 c0       	rjmp	.+134    	; 0x3192 <_ZN16Adafruit_SSD13067displayEv+0x118>
    wire->beginTransmission(i2caddr);
    310c:	69 a1       	ldd	r22, Y+33	; 0x21
    310e:	06 2e       	mov	r0, r22
    3110:	00 0c       	add	r0, r0
    3112:	77 0b       	sbc	r23, r23
    3114:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    3118:	8d 8d       	ldd	r24, Y+29	; 0x1d
    311a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    311c:	dc 01       	movw	r26, r24
    311e:	ed 91       	ld	r30, X+
    3120:	fc 91       	ld	r31, X
    3122:	01 90       	ld	r0, Z+
    3124:	f0 81       	ld	r31, Z
    3126:	e0 2d       	mov	r30, r0
    3128:	60 e4       	ldi	r22, 0x40	; 64
    312a:	19 95       	eicall
    312c:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    312e:	01 e0       	ldi	r16, 0x01	; 1
    3130:	10 e0       	ldi	r17, 0x00	; 0
    3132:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3134:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    3136:	ec 14       	cp	r14, r12
    3138:	fd 04       	cpc	r15, r13
    313a:	41 f1       	breq	.+80     	; 0x318c <_ZN16Adafruit_SSD13067displayEv+0x112>
      if (bytesOut >= WIRE_MAX) {
    313c:	00 32       	cpi	r16, 0x20	; 32
    313e:	11 05       	cpc	r17, r1
    3140:	b0 f0       	brcs	.+44     	; 0x316e <_ZN16Adafruit_SSD13067displayEv+0xf4>
        wire->endTransmission();
    3142:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    3146:	69 a1       	ldd	r22, Y+33	; 0x21
    3148:	06 2e       	mov	r0, r22
    314a:	00 0c       	add	r0, r0
    314c:	77 0b       	sbc	r23, r23
    314e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3150:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3152:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    3156:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3158:	9e 8d       	ldd	r25, Y+30	; 0x1e
    315a:	dc 01       	movw	r26, r24
    315c:	ed 91       	ld	r30, X+
    315e:	fc 91       	ld	r31, X
    3160:	01 90       	ld	r0, Z+
    3162:	f0 81       	ld	r31, Z
    3164:	e0 2d       	mov	r30, r0
    3166:	60 e4       	ldi	r22, 0x40	; 64
    3168:	19 95       	eicall
        bytesOut = 1;
    316a:	01 e0       	ldi	r16, 0x01	; 1
    316c:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    316e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3170:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3172:	f6 01       	movw	r30, r12
    3174:	61 91       	ld	r22, Z+
    3176:	6f 01       	movw	r12, r30
    3178:	dc 01       	movw	r26, r24
    317a:	ed 91       	ld	r30, X+
    317c:	fc 91       	ld	r31, X
    317e:	01 90       	ld	r0, Z+
    3180:	f0 81       	ld	r31, Z
    3182:	e0 2d       	mov	r30, r0
    3184:	19 95       	eicall
      bytesOut++;
    3186:	0f 5f       	subi	r16, 0xFF	; 255
    3188:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    318a:	d3 cf       	rjmp	.-90     	; 0x3132 <_ZN16Adafruit_SSD13067displayEv+0xb8>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    318c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>
    3190:	34 c0       	rjmp	.+104    	; 0x31fa <_ZN16Adafruit_SSD13067displayEv+0x180>
  } else { // SPI
    SSD1306_MODE_DATA
    3192:	ed a5       	ldd	r30, Y+45	; 0x2d
    3194:	fe a5       	ldd	r31, Y+46	; 0x2e
    3196:	90 81       	ld	r25, Z
    3198:	8b a9       	ldd	r24, Y+51	; 0x33
    319a:	89 2b       	or	r24, r25
    319c:	80 83       	st	Z, r24
    while (count--)
    319e:	0e 15       	cp	r16, r14
    31a0:	1f 05       	cpc	r17, r15
    31a2:	59 f1       	breq	.+86     	; 0x31fa <_ZN16Adafruit_SSD13067displayEv+0x180>
      SPIwrite(*ptr++);
    31a4:	f8 01       	movw	r30, r16
    31a6:	81 91       	ld	r24, Z+
    31a8:	8f 01       	movw	r16, r30
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    31aa:	2b 8d       	ldd	r18, Y+27	; 0x1b
    31ac:	3c 8d       	ldd	r19, Y+28	; 0x1c
    31ae:	23 2b       	or	r18, r19
    (void)spi->transfer(d);
    31b0:	11 f0       	breq	.+4      	; 0x31b6 <_ZN16Adafruit_SSD13067displayEv+0x13c>
    31b2:	34 da       	rcall	.-2968   	; 0x261c <_ZN8SPIClass8transferEh>
    31b4:	f4 cf       	rjmp	.-24     	; 0x319e <_ZN16Adafruit_SSD13067displayEv+0x124>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    31b6:	28 e0       	ldi	r18, 0x08	; 8
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e8       	ldi	r20, 0x80	; 128
    31bc:	e9 a5       	ldd	r30, Y+41	; 0x29
    31be:	fa a5       	ldd	r31, Y+42	; 0x2a
    31c0:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    31c2:	58 2f       	mov	r21, r24
    31c4:	54 23       	and	r21, r20
    31c6:	19 f0       	breq	.+6      	; 0x31ce <_ZN16Adafruit_SSD13067displayEv+0x154>
        *mosiPort |= mosiPinMask;
    31c8:	50 81       	ld	r21, Z
    31ca:	95 2b       	or	r25, r21
    31cc:	03 c0       	rjmp	.+6      	; 0x31d4 <_ZN16Adafruit_SSD13067displayEv+0x15a>
      else
        *mosiPort &= ~mosiPinMask;
    31ce:	50 81       	ld	r21, Z
    31d0:	90 95       	com	r25
    31d2:	95 23       	and	r25, r21
    31d4:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    31d6:	eb a5       	ldd	r30, Y+43	; 0x2b
    31d8:	fc a5       	ldd	r31, Y+44	; 0x2c
    31da:	50 81       	ld	r21, Z
    31dc:	9a a9       	ldd	r25, Y+50	; 0x32
    31de:	95 2b       	or	r25, r21
    31e0:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    31e2:	eb a5       	ldd	r30, Y+43	; 0x2b
    31e4:	fc a5       	ldd	r31, Y+44	; 0x2c
    31e6:	50 81       	ld	r21, Z
    31e8:	9a a9       	ldd	r25, Y+50	; 0x32
    31ea:	90 95       	com	r25
    31ec:	95 23       	and	r25, r21
    31ee:	90 83       	st	Z, r25
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    31f0:	46 95       	lsr	r20
    31f2:	21 50       	subi	r18, 0x01	; 1
    31f4:	31 09       	sbc	r19, r1
    31f6:	11 f7       	brne	.-60     	; 0x31bc <_ZN16Adafruit_SSD13067displayEv+0x142>
    31f8:	d2 cf       	rjmp	.-92     	; 0x319e <_ZN16Adafruit_SSD13067displayEv+0x124>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    31fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31fe:	00 97       	sbiw	r24, 0x00	; 0
    3200:	71 f0       	breq	.+28     	; 0x321e <_ZN16Adafruit_SSD13067displayEv+0x1a4>
    3202:	49 ad       	ldd	r20, Y+57	; 0x39
    3204:	5a ad       	ldd	r21, Y+58	; 0x3a
    3206:	6b ad       	ldd	r22, Y+59	; 0x3b
    3208:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	ff 90       	pop	r15
    3214:	ef 90       	pop	r14
    3216:	df 90       	pop	r13
    3218:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    321a:	0c 94 ca 2c 	jmp	0x5994	; 0x5994 <_ZN7TwoWire8setClockEm>
    321e:	ef a5       	ldd	r30, Y+47	; 0x2f
    3220:	f8 a9       	ldd	r31, Y+48	; 0x30
    3222:	90 81       	ld	r25, Z
    3224:	8c a9       	ldd	r24, Y+52	; 0x34
    3226:	89 2b       	or	r24, r25
    3228:	80 83       	st	Z, r24
    322a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    322c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    322e:	89 2b       	or	r24, r25
    3230:	51 f0       	breq	.+20     	; 0x3246 <_ZN16Adafruit_SSD13067displayEv+0x1cc>
#if defined(ESP8266)
  yield();
#endif
}
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	ff 90       	pop	r15
    323c:	ef 90       	pop	r14
    323e:	df 90       	pop	r13
    3240:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    3242:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    3246:	df 91       	pop	r29
    3248:	cf 91       	pop	r28
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	ff 90       	pop	r15
    3250:	ef 90       	pop	r14
    3252:	df 90       	pop	r13
    3254:	cf 90       	pop	r12
    3256:	08 95       	ret

00003258 <_ZN3DHTC1Ehhh>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    3258:	dc 01       	movw	r26, r24
    325a:	15 96       	adiw	r26, 0x05	; 5
    325c:	6c 93       	st	X, r22
    325e:	15 97       	sbiw	r26, 0x05	; 5
    3260:	16 96       	adiw	r26, 0x06	; 6
    3262:	4c 93       	st	X, r20
    3264:	16 97       	sbiw	r26, 0x06	; 6
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	fb 01       	movw	r30, r22
    326a:	e7 55       	subi	r30, 0x57	; 87
    326c:	f4 4f       	sbci	r31, 0xF4	; 244
    326e:	e4 91       	lpm	r30, Z
    3270:	17 96       	adiw	r26, 0x07	; 7
    3272:	ec 93       	st	X, r30
    3274:	17 97       	sbiw	r26, 0x07	; 7
    3276:	fb 01       	movw	r30, r22
    3278:	e1 51       	subi	r30, 0x11	; 17
    327a:	f4 4f       	sbci	r31, 0xF4	; 244
    327c:	64 91       	lpm	r22, Z
    327e:	18 96       	adiw	r26, 0x08	; 8
    3280:	6c 93       	st	X, r22
    3282:	18 97       	sbiw	r26, 0x08	; 8
    3284:	40 e8       	ldi	r20, 0x80	; 128
    3286:	5e e3       	ldi	r21, 0x3E	; 62
    3288:	60 e0       	ldi	r22, 0x00	; 0
    328a:	70 e0       	ldi	r23, 0x00	; 0
    328c:	1d 96       	adiw	r26, 0x0d	; 13
    328e:	4d 93       	st	X+, r20
    3290:	5d 93       	st	X+, r21
    3292:	6d 93       	st	X+, r22
    3294:	7c 93       	st	X, r23
    3296:	50 97       	sbiw	r26, 0x10	; 16
    3298:	08 95       	ret

0000329a <_ZN3DHT5beginEh>:
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	ec 01       	movw	r28, r24
    32a2:	16 2f       	mov	r17, r22
    32a4:	62 e0       	ldi	r22, 0x02	; 2
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    32ac:	0e 94 60 33 	call	0x66c0	; 0x66c0 <millis>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	80 5d       	subi	r24, 0xD0	; 208
    32b6:	97 40       	sbci	r25, 0x07	; 7
    32b8:	a1 09       	sbc	r26, r1
    32ba:	b1 09       	sbc	r27, r1
    32bc:	89 87       	std	Y+9, r24	; 0x09
    32be:	9a 87       	std	Y+10, r25	; 0x0a
    32c0:	ab 87       	std	Y+11, r26	; 0x0b
    32c2:	bc 87       	std	Y+12, r27	; 0x0c
    32c4:	1a 8b       	std	Y+18, r17	; 0x12
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	08 95       	ret

000032ce <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    32ce:	cf 92       	push	r12
    32d0:	df 92       	push	r13
    32d2:	ef 92       	push	r14
    32d4:	ff 92       	push	r15
    32d6:	1f 93       	push	r17
    32d8:	cf 93       	push	r28
    32da:	df 93       	push	r29
    32dc:	ec 01       	movw	r28, r24
    32de:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    32e0:	66 23       	and	r22, r22
    32e2:	11 f0       	breq	.+4      	; 0x32e8 <_ZN3DHT11expectPulseEb+0x1a>
    32e4:	91 2f       	mov	r25, r17
    32e6:	01 c0       	rjmp	.+2      	; 0x32ea <_ZN3DHT11expectPulseEb+0x1c>
    32e8:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
    32ea:	28 85       	ldd	r18, Y+8	; 0x08
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	22 0f       	add	r18, r18
    32f0:	33 1f       	adc	r19, r19
    32f2:	2b 5c       	subi	r18, 0xCB	; 203
    32f4:	33 4f       	sbci	r19, 0xF3	; 243
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    32f6:	a0 e0       	ldi	r26, 0x00	; 0
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
    32fa:	f9 01       	movw	r30, r18
    32fc:	45 91       	lpm	r20, Z+
    32fe:	54 91       	lpm	r21, Z
    3300:	fa 01       	movw	r30, r20
    3302:	80 81       	ld	r24, Z
    3304:	81 23       	and	r24, r17
    3306:	ad 01       	movw	r20, r26
    3308:	60 e0       	ldi	r22, 0x00	; 0
    330a:	70 e0       	ldi	r23, 0x00	; 0
    330c:	98 13       	cpse	r25, r24
    330e:	0f c0       	rjmp	.+30     	; 0x332e <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
    3310:	11 96       	adiw	r26, 0x01	; 1
    3312:	cd 84       	ldd	r12, Y+13	; 0x0d
    3314:	de 84       	ldd	r13, Y+14	; 0x0e
    3316:	ef 84       	ldd	r14, Y+15	; 0x0f
    3318:	f8 88       	ldd	r15, Y+16	; 0x10
    331a:	4c 15       	cp	r20, r12
    331c:	5d 05       	cpc	r21, r13
    331e:	6e 05       	cpc	r22, r14
    3320:	7f 05       	cpc	r23, r15
    3322:	58 f3       	brcs	.-42     	; 0x32fa <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
    3324:	3f ef       	ldi	r19, 0xFF	; 255
    3326:	2f ef       	ldi	r18, 0xFF	; 255
    3328:	8f ef       	ldi	r24, 0xFF	; 255
    332a:	9f ef       	ldi	r25, 0xFF	; 255
    332c:	03 c0       	rjmp	.+6      	; 0x3334 <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    332e:	3a 2f       	mov	r19, r26
    3330:	25 2f       	mov	r18, r21
    3332:	cb 01       	movw	r24, r22
}
    3334:	63 2f       	mov	r22, r19
    3336:	72 2f       	mov	r23, r18
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	1f 91       	pop	r17
    333e:	ff 90       	pop	r15
    3340:	ef 90       	pop	r14
    3342:	df 90       	pop	r13
    3344:	cf 90       	pop	r12
    3346:	08 95       	ret

00003348 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    3348:	8f 92       	push	r8
    334a:	9f 92       	push	r9
    334c:	af 92       	push	r10
    334e:	bf 92       	push	r11
    3350:	cf 92       	push	r12
    3352:	df 92       	push	r13
    3354:	ef 92       	push	r14
    3356:	ff 92       	push	r15
    3358:	0f 93       	push	r16
    335a:	1f 93       	push	r17
    335c:	cf 93       	push	r28
    335e:	df 93       	push	r29
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	c0 54       	subi	r28, 0x40	; 64
    3366:	d1 40       	sbci	r29, 0x01	; 1
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	de bf       	out	0x3e, r29	; 62
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	cd bf       	out	0x3d, r28	; 61
    3372:	8c 01       	movw	r16, r24
    3374:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    3376:	0e 94 60 33 	call	0x66c0	; 0x66c0 <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    337a:	f1 10       	cpse	r15, r1
    337c:	16 c0       	rjmp	.+44     	; 0x33aa <_ZN3DHT4readEb+0x62>
    337e:	f8 01       	movw	r30, r16
    3380:	c1 84       	ldd	r12, Z+9	; 0x09
    3382:	d2 84       	ldd	r13, Z+10	; 0x0a
    3384:	e3 84       	ldd	r14, Z+11	; 0x0b
    3386:	f4 84       	ldd	r15, Z+12	; 0x0c
    3388:	9b 01       	movw	r18, r22
    338a:	ac 01       	movw	r20, r24
    338c:	2c 19       	sub	r18, r12
    338e:	3d 09       	sbc	r19, r13
    3390:	4e 09       	sbc	r20, r14
    3392:	5f 09       	sbc	r21, r15
    3394:	69 01       	movw	r12, r18
    3396:	7a 01       	movw	r14, r20
    3398:	30 ed       	ldi	r19, 0xD0	; 208
    339a:	c3 16       	cp	r12, r19
    339c:	37 e0       	ldi	r19, 0x07	; 7
    339e:	d3 06       	cpc	r13, r19
    33a0:	e1 04       	cpc	r14, r1
    33a2:	f1 04       	cpc	r15, r1
    33a4:	10 f4       	brcc	.+4      	; 0x33aa <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
    33a6:	81 89       	ldd	r24, Z+17	; 0x11
    33a8:	b6 c0       	rjmp	.+364    	; 0x3516 <_ZN3DHT4readEb+0x1ce>
  }
  _lastreadtime = currenttime;
    33aa:	f8 01       	movw	r30, r16
    33ac:	61 87       	std	Z+9, r22	; 0x09
    33ae:	72 87       	std	Z+10, r23	; 0x0a
    33b0:	83 87       	std	Z+11, r24	; 0x0b
    33b2:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    33b4:	14 82       	std	Z+4, r1	; 0x04
    33b6:	13 82       	std	Z+3, r1	; 0x03
    33b8:	12 82       	std	Z+2, r1	; 0x02
    33ba:	11 82       	std	Z+1, r1	; 0x01
    33bc:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    33be:	62 e0       	ldi	r22, 0x02	; 2
    33c0:	85 81       	ldd	r24, Z+5	; 0x05
    33c2:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
  delay(1);
    33c6:	61 e0       	ldi	r22, 0x01	; 1
    33c8:	70 e0       	ldi	r23, 0x00	; 0
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0e 94 91 33 	call	0x6722	; 0x6722 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    33d2:	61 e0       	ldi	r22, 0x01	; 1
    33d4:	f8 01       	movw	r30, r16
    33d6:	85 81       	ldd	r24, Z+5	; 0x05
    33d8:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
  digitalWrite(_pin, LOW);
    33dc:	60 e0       	ldi	r22, 0x00	; 0
    33de:	f8 01       	movw	r30, r16
    33e0:	85 81       	ldd	r24, Z+5	; 0x05
    33e2:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
  switch (_type) {
    33e6:	f8 01       	movw	r30, r16
    33e8:	86 81       	ldd	r24, Z+6	; 0x06
    33ea:	85 51       	subi	r24, 0x15	; 21
    33ec:	82 30       	cpi	r24, 0x02	; 2
    33ee:	28 f4       	brcc	.+10     	; 0x33fa <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    33f0:	8c e4       	ldi	r24, 0x4C	; 76
    33f2:	94 e0       	ldi	r25, 0x04	; 4
    33f4:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    break;
    33f8:	06 c0       	rjmp	.+12     	; 0x3406 <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    33fa:	64 e1       	ldi	r22, 0x14	; 20
    33fc:	70 e0       	ldi	r23, 0x00	; 0
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 91 33 	call	0x6722	; 0x6722 <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    3406:	62 e0       	ldi	r22, 0x02	; 2
    3408:	f8 01       	movw	r30, r16
    340a:	85 81       	ldd	r24, Z+5	; 0x05
    340c:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    3410:	f8 01       	movw	r30, r16
    3412:	82 89       	ldd	r24, Z+18	; 0x12
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
    341a:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	c8 01       	movw	r24, r16
    3420:	56 df       	rcall	.-340    	; 0x32ce <_ZN3DHT11expectPulseEb>
    3422:	6f 3f       	cpi	r22, 0xFF	; 255
    3424:	7f 4f       	sbci	r23, 0xFF	; 255
    3426:	8f 4f       	sbci	r24, 0xFF	; 255
    3428:	9f 4f       	sbci	r25, 0xFF	; 255
    342a:	21 f4       	brne	.+8      	; 0x3434 <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    342c:	f8 01       	movw	r30, r16
    342e:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
    3430:	78 94       	sei
    3432:	42 c0       	rjmp	.+132    	; 0x34b8 <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    3434:	61 e0       	ldi	r22, 0x01	; 1
    3436:	c8 01       	movw	r24, r16
    3438:	4a df       	rcall	.-364    	; 0x32ce <_ZN3DHT11expectPulseEb>
    343a:	6f 3f       	cpi	r22, 0xFF	; 255
    343c:	7f 4f       	sbci	r23, 0xFF	; 255
    343e:	8f 4f       	sbci	r24, 0xFF	; 255
    3440:	9f 4f       	sbci	r25, 0xFF	; 255
    3442:	a1 f3       	breq	.-24     	; 0x342c <_ZN3DHT4readEb+0xe4>
    3444:	9e 01       	movw	r18, r28
    3446:	2f 5f       	subi	r18, 0xFF	; 255
    3448:	3f 4f       	sbci	r19, 0xFF	; 255
    344a:	79 01       	movw	r14, r18
    344c:	5e 01       	movw	r10, r28
    344e:	3f eb       	ldi	r19, 0xBF	; 191
    3450:	a3 1a       	sub	r10, r19
    3452:	3e ef       	ldi	r19, 0xFE	; 254
    3454:	b3 0a       	sbc	r11, r19
    3456:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	c8 01       	movw	r24, r16
    345c:	38 df       	rcall	.-400    	; 0x32ce <_ZN3DHT11expectPulseEb>
    345e:	f6 01       	movw	r30, r12
    3460:	60 83       	st	Z, r22
    3462:	71 83       	std	Z+1, r23	; 0x01
    3464:	82 83       	std	Z+2, r24	; 0x02
    3466:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    3468:	61 e0       	ldi	r22, 0x01	; 1
    346a:	c8 01       	movw	r24, r16
    346c:	30 df       	rcall	.-416    	; 0x32ce <_ZN3DHT11expectPulseEb>
    346e:	f6 01       	movw	r30, r12
    3470:	64 83       	std	Z+4, r22	; 0x04
    3472:	75 83       	std	Z+5, r23	; 0x05
    3474:	86 83       	std	Z+6, r24	; 0x06
    3476:	97 83       	std	Z+7, r25	; 0x07
    3478:	f8 e0       	ldi	r31, 0x08	; 8
    347a:	cf 0e       	add	r12, r31
    347c:	d1 1c       	adc	r13, r1
    347e:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    3480:	db 04       	cpc	r13, r11
    3482:	51 f7       	brne	.-44     	; 0x3458 <_ZN3DHT4readEb+0x110>
    3484:	78 94       	sei
    3486:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
    348c:	80 80       	ld	r8, Z
    348e:	91 80       	ldd	r9, Z+1	; 0x01
    3490:	a2 80       	ldd	r10, Z+2	; 0x02
    3492:	b3 80       	ldd	r11, Z+3	; 0x03
    3494:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
    3496:	55 81       	ldd	r21, Z+5	; 0x05
    3498:	66 81       	ldd	r22, Z+6	; 0x06
    349a:	77 81       	ldd	r23, Z+7	; 0x07
    349c:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    349e:	8f 16       	cp	r8, r31
    34a0:	9f 06       	cpc	r9, r31
    34a2:	af 06       	cpc	r10, r31
    34a4:	bf 06       	cpc	r11, r31
    34a6:	31 f0       	breq	.+12     	; 0x34b4 <_ZN3DHT4readEb+0x16c>
    34a8:	4f 3f       	cpi	r20, 0xFF	; 255
    34aa:	8f ef       	ldi	r24, 0xFF	; 255
    34ac:	58 07       	cpc	r21, r24
    34ae:	68 07       	cpc	r22, r24
    34b0:	78 07       	cpc	r23, r24
    34b2:	21 f4       	brne	.+8      	; 0x34bc <_ZN3DHT4readEb+0x174>
    34b4:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    34b6:	11 8a       	std	Z+17, r1	; 0x11
    34b8:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
    34ba:	2d c0       	rjmp	.+90     	; 0x3516 <_ZN3DHT4readEb+0x1ce>
    34bc:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
    34be:	83 e0       	ldi	r24, 0x03	; 3
    34c0:	f5 95       	asr	r31
    34c2:	e7 95       	ror	r30
    34c4:	8a 95       	dec	r24
    34c6:	e1 f7       	brne	.-8      	; 0x34c0 <_ZN3DHT4readEb+0x178>
    34c8:	e0 0f       	add	r30, r16
    34ca:	f1 1f       	adc	r31, r17
    34cc:	80 81       	ld	r24, Z
    34ce:	88 0f       	add	r24, r24
    34d0:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    34d2:	95 06       	cpc	r9, r21
    34d4:	a6 06       	cpc	r10, r22
    34d6:	b7 06       	cpc	r11, r23
    34d8:	08 f4       	brcc	.+2      	; 0x34dc <_ZN3DHT4readEb+0x194>
    34da:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    34dc:	80 83       	st	Z, r24
    34de:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    34e0:	3f 4f       	sbci	r19, 0xFF	; 255
    34e2:	f8 e0       	ldi	r31, 0x08	; 8
    34e4:	ef 0e       	add	r14, r31
    34e6:	f1 1c       	adc	r15, r1
    34e8:	28 32       	cpi	r18, 0x28	; 40
    34ea:	31 05       	cpc	r19, r1
    34ec:	71 f6       	brne	.-100    	; 0x348a <_ZN3DHT4readEb+0x142>
    34ee:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    34f0:	24 81       	ldd	r18, Z+4	; 0x04
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 81       	ld	r20, Z
    34f6:	81 81       	ldd	r24, Z+1	; 0x01
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	84 0f       	add	r24, r20
    34fc:	91 1d       	adc	r25, r1
    34fe:	42 81       	ldd	r20, Z+2	; 0x02
    3500:	84 0f       	add	r24, r20
    3502:	91 1d       	adc	r25, r1
    3504:	43 81       	ldd	r20, Z+3	; 0x03
    3506:	84 0f       	add	r24, r20
    3508:	91 1d       	adc	r25, r1
    350a:	99 27       	eor	r25, r25
    350c:	28 17       	cp	r18, r24
    350e:	39 07       	cpc	r19, r25
    3510:	89 f6       	brne	.-94     	; 0x34b4 <_ZN3DHT4readEb+0x16c>
    3512:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
    3514:	81 8b       	std	Z+17, r24	; 0x11
    3516:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
    3518:	de 4f       	sbci	r29, 0xFE	; 254
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	1f 91       	pop	r17
    352a:	0f 91       	pop	r16
    352c:	ff 90       	pop	r15
    352e:	ef 90       	pop	r14
    3530:	df 90       	pop	r13
    3532:	cf 90       	pop	r12
    3534:	bf 90       	pop	r11
    3536:	af 90       	pop	r10
    3538:	9f 90       	pop	r9
    353a:	8f 90       	pop	r8
    353c:	08 95       	ret

0000353e <_ZN3DHT15readTemperatureEbb>:
    353e:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
    3540:	df 92       	push	r13
    3542:	ef 92       	push	r14
    3544:	ff 92       	push	r15
    3546:	0f 93       	push	r16
    3548:	1f 93       	push	r17
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	8c 01       	movw	r16, r24
    3550:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
    3552:	64 2f       	mov	r22, r20
    3554:	f9 de       	rcall	.-526    	; 0x3348 <_ZN3DHT4readEb>
    3556:	88 23       	and	r24, r24
    3558:	09 f4       	brne	.+2      	; 0x355c <_ZN3DHT15readTemperatureEbb+0x1e>
    355a:	78 c0       	rjmp	.+240    	; 0x364c <_ZN3DHT15readTemperatureEbb+0x10e>
    switch (_type) {
    355c:	f8 01       	movw	r30, r16
    355e:	86 81       	ldd	r24, Z+6	; 0x06
    3560:	8c 30       	cpi	r24, 0x0C	; 12
    3562:	09 f4       	brne	.+2      	; 0x3566 <_ZN3DHT15readTemperatureEbb+0x28>
    3564:	45 c0       	rjmp	.+138    	; 0x35f0 <_ZN3DHT15readTemperatureEbb+0xb2>
    3566:	18 f4       	brcc	.+6      	; 0x356e <_ZN3DHT15readTemperatureEbb+0x30>
    3568:	8b 30       	cpi	r24, 0x0B	; 11
    356a:	c9 f0       	breq	.+50     	; 0x359e <_ZN3DHT15readTemperatureEbb+0x60>
    356c:	6f c0       	rjmp	.+222    	; 0x364c <_ZN3DHT15readTemperatureEbb+0x10e>
    356e:	85 51       	subi	r24, 0x15	; 21
    3570:	82 30       	cpi	r24, 0x02	; 2
    3572:	08 f0       	brcs	.+2      	; 0x3576 <_ZN3DHT15readTemperatureEbb+0x38>
    3574:	6b c0       	rjmp	.+214    	; 0x364c <_ZN3DHT15readTemperatureEbb+0x10e>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
    3576:	f8 01       	movw	r30, r16
    3578:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
    357a:	6d 2f       	mov	r22, r29
    357c:	6f 77       	andi	r22, 0x7F	; 127
    357e:	70 e0       	ldi	r23, 0x00	; 0
    3580:	76 2f       	mov	r23, r22
    3582:	66 27       	eor	r22, r22
    3584:	83 81       	ldd	r24, Z+3	; 0x03
    3586:	68 2b       	or	r22, r24
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__floatunsisf>
    3590:	2d ec       	ldi	r18, 0xCD	; 205
    3592:	3c ec       	ldi	r19, 0xCC	; 204
    3594:	4c ec       	ldi	r20, 0xCC	; 204
    3596:	5d e3       	ldi	r21, 0x3D	; 61
    3598:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <__mulsf3>
    359c:	46 c0       	rjmp	.+140    	; 0x362a <_ZN3DHT15readTemperatureEbb+0xec>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
    359e:	f8 01       	movw	r30, r16
    35a0:	62 81       	ldd	r22, Z+2	; 0x02
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__floatunsisf>
    35ac:	6b 01       	movw	r12, r22
    35ae:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
    35b0:	f8 01       	movw	r30, r16
    35b2:	d3 81       	ldd	r29, Z+3	; 0x03
    35b4:	d7 ff       	sbrs	r29, 7
    35b6:	0a c0       	rjmp	.+20     	; 0x35cc <_ZN3DHT15readTemperatureEbb+0x8e>
        f = -1 - f;
    35b8:	9b 01       	movw	r18, r22
    35ba:	ac 01       	movw	r20, r24
    35bc:	60 e0       	ldi	r22, 0x00	; 0
    35be:	70 e0       	ldi	r23, 0x00	; 0
    35c0:	80 e8       	ldi	r24, 0x80	; 128
    35c2:	9f eb       	ldi	r25, 0xBF	; 191
    35c4:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__subsf3>
    35c8:	6b 01       	movw	r12, r22
    35ca:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
    35cc:	6d 2f       	mov	r22, r29
    35ce:	6f 70       	andi	r22, 0x0F	; 15
    35d0:	70 e0       	ldi	r23, 0x00	; 0
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__floatsisf>
    35da:	2d ec       	ldi	r18, 0xCD	; 205
    35dc:	3c ec       	ldi	r19, 0xCC	; 204
    35de:	4c ec       	ldi	r20, 0xCC	; 204
    35e0:	5d e3       	ldi	r21, 0x3D	; 61
    35e2:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <__mulsf3>
    35e6:	a7 01       	movw	r20, r14
    35e8:	96 01       	movw	r18, r12
    35ea:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__addsf3>
    35ee:	1f c0       	rjmp	.+62     	; 0x362e <_ZN3DHT15readTemperatureEbb+0xf0>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
    35f0:	f8 01       	movw	r30, r16
    35f2:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
    35f4:	63 81       	ldd	r22, Z+3	; 0x03
    35f6:	6f 70       	andi	r22, 0x0F	; 15
    35f8:	70 e0       	ldi	r23, 0x00	; 0
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__floatsisf>
    3602:	2d ec       	ldi	r18, 0xCD	; 205
    3604:	3c ec       	ldi	r19, 0xCC	; 204
    3606:	4c ec       	ldi	r20, 0xCC	; 204
    3608:	5d e3       	ldi	r21, 0x3D	; 61
    360a:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <__mulsf3>
    360e:	6b 01       	movw	r12, r22
    3610:	7c 01       	movw	r14, r24
    3612:	6d 2f       	mov	r22, r29
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__floatunsisf>
    361e:	9b 01       	movw	r18, r22
    3620:	ac 01       	movw	r20, r24
    3622:	c7 01       	movw	r24, r14
    3624:	b6 01       	movw	r22, r12
    3626:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
    362a:	d7 fd       	sbrc	r29, 7
        f *= -1;
    362c:	90 58       	subi	r25, 0x80	; 128
      }
      if (S) {
    362e:	cc 23       	and	r28, r28
    3630:	89 f0       	breq	.+34     	; 0x3654 <_ZN3DHT15readTemperatureEbb+0x116>
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
    3632:	26 e6       	ldi	r18, 0x66	; 102
    3634:	36 e6       	ldi	r19, 0x66	; 102
    3636:	46 ee       	ldi	r20, 0xE6	; 230
    3638:	5f e3       	ldi	r21, 0x3F	; 63
    363a:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <__mulsf3>
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e0       	ldi	r20, 0x00	; 0
    3644:	52 e4       	ldi	r21, 0x42	; 66
    3646:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__addsf3>
    364a:	04 c0       	rjmp	.+8      	; 0x3654 <_ZN3DHT15readTemperatureEbb+0x116>
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	80 ec       	ldi	r24, 0xC0	; 192
    3652:	9f e7       	ldi	r25, 0x7F	; 127
      }
      break;
    }
  }
  return f;
}
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	1f 91       	pop	r17
    365a:	0f 91       	pop	r16
    365c:	ff 90       	pop	r15
    365e:	ef 90       	pop	r14
    3660:	df 90       	pop	r13
    3662:	cf 90       	pop	r12
    3664:	08 95       	ret

00003666 <_ZN3DHT12readHumidityEb>:
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
    3666:	cf 92       	push	r12
    3668:	df 92       	push	r13
    366a:	ef 92       	push	r14
    366c:	ff 92       	push	r15
    366e:	cf 93       	push	r28
    3670:	df 93       	push	r29
    3672:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
    3674:	69 de       	rcall	.-814    	; 0x3348 <_ZN3DHT4readEb>
    3676:	88 23       	and	r24, r24
    3678:	99 f1       	breq	.+102    	; 0x36e0 <_ZN3DHT12readHumidityEb+0x7a>
    switch (_type) {
    367a:	8e 81       	ldd	r24, Y+6	; 0x06
    367c:	8b 30       	cpi	r24, 0x0B	; 11
    367e:	80 f1       	brcs	.+96     	; 0x36e0 <_ZN3DHT12readHumidityEb+0x7a>
    3680:	8d 30       	cpi	r24, 0x0D	; 13
    3682:	98 f0       	brcs	.+38     	; 0x36aa <_ZN3DHT12readHumidityEb+0x44>
    3684:	85 51       	subi	r24, 0x15	; 21
    3686:	82 30       	cpi	r24, 0x02	; 2
    3688:	58 f5       	brcc	.+86     	; 0x36e0 <_ZN3DHT12readHumidityEb+0x7a>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
    368a:	68 81       	ld	r22, Y
    368c:	79 81       	ldd	r23, Y+1	; 0x01
    368e:	76 27       	eor	r23, r22
    3690:	67 27       	eor	r22, r23
    3692:	76 27       	eor	r23, r22
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__floatunsisf>
      f *= 0.1;
    369c:	2d ec       	ldi	r18, 0xCD	; 205
    369e:	3c ec       	ldi	r19, 0xCC	; 204
    36a0:	4c ec       	ldi	r20, 0xCC	; 204
    36a2:	5d e3       	ldi	r21, 0x3D	; 61
    36a4:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <__mulsf3>
      break;
    36a8:	1f c0       	rjmp	.+62     	; 0x36e8 <_ZN3DHT12readHumidityEb+0x82>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
    36aa:	69 81       	ldd	r22, Y+1	; 0x01
    36ac:	70 e0       	ldi	r23, 0x00	; 0
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__floatsisf>
    36b6:	2d ec       	ldi	r18, 0xCD	; 205
    36b8:	3c ec       	ldi	r19, 0xCC	; 204
    36ba:	4c ec       	ldi	r20, 0xCC	; 204
    36bc:	5d e3       	ldi	r21, 0x3D	; 61
    36be:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <__mulsf3>
    36c2:	6b 01       	movw	r12, r22
    36c4:	7c 01       	movw	r14, r24
    36c6:	68 81       	ld	r22, Y
    36c8:	70 e0       	ldi	r23, 0x00	; 0
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__floatsisf>
    36d2:	9b 01       	movw	r18, r22
    36d4:	ac 01       	movw	r20, r24
    36d6:	c7 01       	movw	r24, r14
    36d8:	b6 01       	movw	r22, r12
    36da:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__addsf3>
    36de:	04 c0       	rjmp	.+8      	; 0x36e8 <_ZN3DHT12readHumidityEb+0x82>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	80 ec       	ldi	r24, 0xC0	; 192
    36e6:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
    36e8:	df 91       	pop	r29
    36ea:	cf 91       	pop	r28
    36ec:	ff 90       	pop	r15
    36ee:	ef 90       	pop	r14
    36f0:	df 90       	pop	r13
    36f2:	cf 90       	pop	r12
    36f4:	08 95       	ret

000036f6 <_ZN7TwoWire5writeEi>:
	value = readRegister8(DS3231_REG_CONTROL);

	value &= 0b11111011;
	value |= (!enabled << 2);

	writeRegister8(DS3231_REG_CONTROL, value);
    36f6:	dc 01       	movw	r26, r24
    36f8:	ed 91       	ld	r30, X+
    36fa:	fc 91       	ld	r31, X
    36fc:	01 90       	ld	r0, Z+
    36fe:	f0 81       	ld	r31, Z
    3700:	e0 2d       	mov	r30, r0
    3702:	19 94       	eijmp

00003704 <_ZN6DS32319date2daysEjhh>:
    3704:	db 01       	movw	r26, r22
    3706:	a0 5d       	subi	r26, 0xD0	; 208
    3708:	b7 40       	sbci	r27, 0x07	; 7
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	e7 e5       	ldi	r30, 0x57	; 87
    370e:	fb e0       	ldi	r31, 0x0B	; 11
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	84 17       	cp	r24, r20
    3714:	30 f4       	brcc	.+12     	; 0x3722 <_ZN6DS32319date2daysEjhh+0x1e>
    3716:	94 91       	lpm	r25, Z
    3718:	29 0f       	add	r18, r25
    371a:	31 1d       	adc	r19, r1
    371c:	8f 5f       	subi	r24, 0xFF	; 255
    371e:	31 96       	adiw	r30, 0x01	; 1
    3720:	f8 cf       	rjmp	.-16     	; 0x3712 <_ZN6DS32319date2daysEjhh+0xe>
    3722:	42 30       	cpi	r20, 0x02	; 2
    3724:	29 f4       	brne	.+10     	; 0x3730 <_ZN6DS32319date2daysEjhh+0x2c>
    3726:	cd 01       	movw	r24, r26
    3728:	83 70       	andi	r24, 0x03	; 3
    372a:	99 27       	eor	r25, r25
    372c:	89 2b       	or	r24, r25
    372e:	a9 f0       	breq	.+42     	; 0x375a <_ZN6DS32319date2daysEjhh+0x56>
    3730:	6d 5c       	subi	r22, 0xCD	; 205
    3732:	77 40       	sbci	r23, 0x07	; 7
    3734:	76 95       	lsr	r23
    3736:	67 95       	ror	r22
    3738:	76 95       	lsr	r23
    373a:	67 95       	ror	r22
    373c:	4d e6       	ldi	r20, 0x6D	; 109
    373e:	51 e0       	ldi	r21, 0x01	; 1
    3740:	a4 9f       	mul	r26, r20
    3742:	c0 01       	movw	r24, r0
    3744:	a5 9f       	mul	r26, r21
    3746:	90 0d       	add	r25, r0
    3748:	b4 9f       	mul	r27, r20
    374a:	90 0d       	add	r25, r0
    374c:	11 24       	eor	r1, r1
    374e:	86 0f       	add	r24, r22
    3750:	97 1f       	adc	r25, r23
    3752:	01 97       	sbiw	r24, 0x01	; 1
    3754:	82 0f       	add	r24, r18
    3756:	93 1f       	adc	r25, r19
    3758:	08 95       	ret
    375a:	2f 5f       	subi	r18, 0xFF	; 255
    375c:	3f 4f       	sbci	r19, 0xFF	; 255
    375e:	e8 cf       	rjmp	.-48     	; 0x3730 <_ZN6DS32319date2daysEjhh+0x2c>

00003760 <_ZN6DS32318unixtimeEv>:
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	fc 01       	movw	r30, r24
    3768:	c6 81       	ldd	r28, Z+6	; 0x06
    376a:	d5 81       	ldd	r29, Z+5	; 0x05
    376c:	14 81       	ldd	r17, Z+4	; 0x04
    376e:	60 81       	ld	r22, Z
    3770:	71 81       	ldd	r23, Z+1	; 0x01
    3772:	23 81       	ldd	r18, Z+3	; 0x03
    3774:	42 81       	ldd	r20, Z+2	; 0x02
    3776:	c6 df       	rcall	.-116    	; 0x3704 <_ZN6DS32319date2daysEjhh>
    3778:	9c 01       	movw	r18, r24
    377a:	a8 e1       	ldi	r26, 0x18	; 24
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	0e 94 ae 38 	call	0x715c	; 0x715c <__umulhisi3>
    3782:	9b 01       	movw	r18, r22
    3784:	ac 01       	movw	r20, r24
    3786:	21 0f       	add	r18, r17
    3788:	31 1d       	adc	r19, r1
    378a:	41 1d       	adc	r20, r1
    378c:	51 1d       	adc	r21, r1
    378e:	ac e3       	ldi	r26, 0x3C	; 60
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	0e 94 bd 38 	call	0x717a	; 0x717a <__muluhisi3>
    3796:	9b 01       	movw	r18, r22
    3798:	ac 01       	movw	r20, r24
    379a:	2d 0f       	add	r18, r29
    379c:	31 1d       	adc	r19, r1
    379e:	41 1d       	adc	r20, r1
    37a0:	51 1d       	adc	r21, r1
    37a2:	0e 94 bd 38 	call	0x717a	; 0x717a <__muluhisi3>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	8c 0f       	add	r24, r28
    37ac:	91 1d       	adc	r25, r1
    37ae:	a1 1d       	adc	r26, r1
    37b0:	b1 1d       	adc	r27, r1
    37b2:	bc 01       	movw	r22, r24
    37b4:	cd 01       	movw	r24, r26
    37b6:	60 59       	subi	r22, 0x90	; 144
    37b8:	7a 4c       	sbci	r23, 0xCA	; 202
    37ba:	82 49       	sbci	r24, 0x92	; 146
    37bc:	97 4c       	sbci	r25, 0xC7	; 199
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	1f 91       	pop	r17
    37c4:	08 95       	ret

000037c6 <_ZN6DS323114writeRegister8Ehh>:
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	d6 2f       	mov	r29, r22
    37cc:	c4 2f       	mov	r28, r20
    37ce:	68 e6       	ldi	r22, 0x68	; 104
    37d0:	70 e0       	ldi	r23, 0x00	; 0
    37d2:	87 e4       	ldi	r24, 0x47	; 71
    37d4:	95 e0       	ldi	r25, 0x05	; 5
    37d6:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <_ZN7TwoWire17beginTransmissionEi>
    37da:	6d 2f       	mov	r22, r29
    37dc:	87 e4       	ldi	r24, 0x47	; 71
    37de:	95 e0       	ldi	r25, 0x05	; 5
    37e0:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_ZN7TwoWire5writeEh>
    37e4:	6c 2f       	mov	r22, r28
    37e6:	87 e4       	ldi	r24, 0x47	; 71
    37e8:	95 e0       	ldi	r25, 0x05	; 5
    37ea:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_ZN7TwoWire5writeEh>
    37ee:	87 e4       	ldi	r24, 0x47	; 71
    37f0:	95 e0       	ldi	r25, 0x05	; 5
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	0c 94 4c 2d 	jmp	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>

000037fa <_ZN6DS323111getDateTimeEv>:
    37fa:	af 92       	push	r10
    37fc:	bf 92       	push	r11
    37fe:	cf 92       	push	r12
    3800:	df 92       	push	r13
    3802:	ef 92       	push	r14
    3804:	ff 92       	push	r15
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	2e 97       	sbiw	r28, 0x0e	; 14
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	7c 01       	movw	r14, r24
    3820:	8b 01       	movw	r16, r22
    3822:	68 e6       	ldi	r22, 0x68	; 104
    3824:	70 e0       	ldi	r23, 0x00	; 0
    3826:	87 e4       	ldi	r24, 0x47	; 71
    3828:	95 e0       	ldi	r25, 0x05	; 5
    382a:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <_ZN7TwoWire17beginTransmissionEi>
    382e:	60 e0       	ldi	r22, 0x00	; 0
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	87 e4       	ldi	r24, 0x47	; 71
    3834:	95 e0       	ldi	r25, 0x05	; 5
    3836:	5f df       	rcall	.-322    	; 0x36f6 <_ZN7TwoWire5writeEi>
    3838:	87 e4       	ldi	r24, 0x47	; 71
    383a:	95 e0       	ldi	r25, 0x05	; 5
    383c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>
    3840:	47 e0       	ldi	r20, 0x07	; 7
    3842:	50 e0       	ldi	r21, 0x00	; 0
    3844:	68 e6       	ldi	r22, 0x68	; 104
    3846:	70 e0       	ldi	r23, 0x00	; 0
    3848:	87 e4       	ldi	r24, 0x47	; 71
    384a:	95 e0       	ldi	r25, 0x05	; 5
    384c:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <_ZN7TwoWire11requestFromEii>
    3850:	87 e4       	ldi	r24, 0x47	; 71
    3852:	95 e0       	ldi	r25, 0x05	; 5
    3854:	0e 94 ef 2b 	call	0x57de	; 0x57de <_ZN7TwoWire9availableEv>
    3858:	89 2b       	or	r24, r25
    385a:	d1 f3       	breq	.-12     	; 0x3850 <_ZN6DS323111getDateTimeEv+0x56>
    385c:	5e 01       	movw	r10, r28
    385e:	2f e0       	ldi	r18, 0x0F	; 15
    3860:	a2 0e       	add	r10, r18
    3862:	b1 1c       	adc	r11, r1
    3864:	ce 01       	movw	r24, r28
    3866:	01 96       	adiw	r24, 0x01	; 1
    3868:	6c 01       	movw	r12, r24
    386a:	87 e4       	ldi	r24, 0x47	; 71
    386c:	95 e0       	ldi	r25, 0x05	; 5
    386e:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN7TwoWire4readEv>
    3872:	98 2f       	mov	r25, r24
    3874:	92 95       	swap	r25
    3876:	9f 70       	andi	r25, 0x0F	; 15
    3878:	8f 70       	andi	r24, 0x0F	; 15
    387a:	ea e0       	ldi	r30, 0x0A	; 10
    387c:	9e 9f       	mul	r25, r30
    387e:	80 0d       	add	r24, r0
    3880:	11 24       	eor	r1, r1
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	f5 01       	movw	r30, r10
    3886:	92 93       	st	-Z, r25
    3888:	82 93       	st	-Z, r24
    388a:	5f 01       	movw	r10, r30
    388c:	ec 15       	cp	r30, r12
    388e:	fd 05       	cpc	r31, r13
    3890:	61 f7       	brne	.-40     	; 0x386a <_ZN6DS323111getDateTimeEv+0x70>
    3892:	87 e4       	ldi	r24, 0x47	; 71
    3894:	95 e0       	ldi	r25, 0x05	; 5
    3896:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>
    389a:	89 81       	ldd	r24, Y+1	; 0x01
    389c:	9a 81       	ldd	r25, Y+2	; 0x02
    389e:	80 53       	subi	r24, 0x30	; 48
    38a0:	98 4f       	sbci	r25, 0xF8	; 248
    38a2:	f8 01       	movw	r30, r16
    38a4:	91 83       	std	Z+1, r25	; 0x01
    38a6:	80 83       	st	Z, r24
    38a8:	8b 81       	ldd	r24, Y+3	; 0x03
    38aa:	82 83       	std	Z+2, r24	; 0x02
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	83 83       	std	Z+3, r24	; 0x03
    38b0:	8f 81       	ldd	r24, Y+7	; 0x07
    38b2:	87 83       	std	Z+7, r24	; 0x07
    38b4:	89 85       	ldd	r24, Y+9	; 0x09
    38b6:	84 83       	std	Z+4, r24	; 0x04
    38b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    38ba:	85 83       	std	Z+5, r24	; 0x05
    38bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    38be:	86 83       	std	Z+6, r24	; 0x06
    38c0:	c8 01       	movw	r24, r16
    38c2:	4e df       	rcall	.-356    	; 0x3760 <_ZN6DS32318unixtimeEv>
    38c4:	f8 01       	movw	r30, r16
    38c6:	60 87       	std	Z+8, r22	; 0x08
    38c8:	71 87       	std	Z+9, r23	; 0x09
    38ca:	82 87       	std	Z+10, r24	; 0x0a
    38cc:	93 87       	std	Z+11, r25	; 0x0b
    38ce:	8c e0       	ldi	r24, 0x0C	; 12
    38d0:	d7 01       	movw	r26, r14
    38d2:	01 90       	ld	r0, Z+
    38d4:	0d 92       	st	X+, r0
    38d6:	8a 95       	dec	r24
    38d8:	e1 f7       	brne	.-8      	; 0x38d2 <_ZN6DS323111getDateTimeEv+0xd8>
    38da:	c7 01       	movw	r24, r14
    38dc:	2e 96       	adiw	r28, 0x0e	; 14
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	de bf       	out	0x3e, r29	; 62
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	df 91       	pop	r29
    38ea:	cf 91       	pop	r28
    38ec:	1f 91       	pop	r17
    38ee:	0f 91       	pop	r16
    38f0:	ff 90       	pop	r15
    38f2:	ef 90       	pop	r14
    38f4:	df 90       	pop	r13
    38f6:	cf 90       	pop	r12
    38f8:	bf 90       	pop	r11
    38fa:	af 90       	pop	r10
    38fc:	08 95       	ret

000038fe <_ZN6DS323113readRegister8Eh>:
    38fe:	cf 93       	push	r28
    3900:	c6 2f       	mov	r28, r22
    3902:	68 e6       	ldi	r22, 0x68	; 104
    3904:	70 e0       	ldi	r23, 0x00	; 0
    3906:	87 e4       	ldi	r24, 0x47	; 71
    3908:	95 e0       	ldi	r25, 0x05	; 5
    390a:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <_ZN7TwoWire17beginTransmissionEi>
    390e:	6c 2f       	mov	r22, r28
    3910:	87 e4       	ldi	r24, 0x47	; 71
    3912:	95 e0       	ldi	r25, 0x05	; 5
    3914:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_ZN7TwoWire5writeEh>
    3918:	87 e4       	ldi	r24, 0x47	; 71
    391a:	95 e0       	ldi	r25, 0x05	; 5
    391c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>
    3920:	41 e0       	ldi	r20, 0x01	; 1
    3922:	50 e0       	ldi	r21, 0x00	; 0
    3924:	68 e6       	ldi	r22, 0x68	; 104
    3926:	70 e0       	ldi	r23, 0x00	; 0
    3928:	87 e4       	ldi	r24, 0x47	; 71
    392a:	95 e0       	ldi	r25, 0x05	; 5
    392c:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <_ZN7TwoWire11requestFromEii>
    3930:	87 e4       	ldi	r24, 0x47	; 71
    3932:	95 e0       	ldi	r25, 0x05	; 5
    3934:	0e 94 ef 2b 	call	0x57de	; 0x57de <_ZN7TwoWire9availableEv>
    3938:	89 2b       	or	r24, r25
    393a:	d1 f3       	breq	.-12     	; 0x3930 <_ZN6DS323113readRegister8Eh+0x32>
    393c:	87 e4       	ldi	r24, 0x47	; 71
    393e:	95 e0       	ldi	r25, 0x05	; 5
    3940:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <_ZN7TwoWire4readEv>
    3944:	c8 2f       	mov	r28, r24
    3946:	87 e4       	ldi	r24, 0x47	; 71
    3948:	95 e0       	ldi	r25, 0x05	; 5
    394a:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <_ZN7TwoWire15endTransmissionEv>
    394e:	8c 2f       	mov	r24, r28
    3950:	cf 91       	pop	r28
    3952:	08 95       	ret

00003954 <_ZN6DS323110setBatteryEbb>:
}

void DS3231::setBattery(bool timeBattery, bool squareBattery)
{
    3954:	0f 93       	push	r16
    3956:	1f 93       	push	r17
    3958:	cf 93       	push	r28
    395a:	df 93       	push	r29
    395c:	ec 01       	movw	r28, r24
    395e:	16 2f       	mov	r17, r22
    3960:	04 2f       	mov	r16, r20
	uint8_t value;

	value = readRegister8(DS3231_REG_CONTROL);
    3962:	6e e0       	ldi	r22, 0x0E	; 14
    3964:	cc df       	rcall	.-104    	; 0x38fe <_ZN6DS323113readRegister8Eh>

	if (squareBattery)
    3966:	00 23       	and	r16, r16
    3968:	11 f0       	breq	.+4      	; 0x396e <_ZN6DS323110setBatteryEbb+0x1a>
	{
		value |= 0b01000000;
    396a:	80 64       	ori	r24, 0x40	; 64
    396c:	01 c0       	rjmp	.+2      	; 0x3970 <_ZN6DS323110setBatteryEbb+0x1c>
	} else
	{
		value &= 0b10111111;
    396e:	8f 7b       	andi	r24, 0xBF	; 191
	}

	if (timeBattery)
	{
		value &= 0b01111011;
    3970:	48 2f       	mov	r20, r24
	} else
	{
		value &= 0b10111111;
	}

	if (timeBattery)
    3972:	11 23       	and	r17, r17
    3974:	11 f0       	breq	.+4      	; 0x397a <_ZN6DS323110setBatteryEbb+0x26>
	{
		value &= 0b01111011;
    3976:	4b 77       	andi	r20, 0x7B	; 123
    3978:	01 c0       	rjmp	.+2      	; 0x397c <_ZN6DS323110setBatteryEbb+0x28>
	} else
	{
		value |= 0b10000000;
    397a:	40 68       	ori	r20, 0x80	; 128
	}

	writeRegister8(DS3231_REG_CONTROL, value);
    397c:	6e e0       	ldi	r22, 0x0E	; 14
    397e:	ce 01       	movw	r24, r28
}
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	1f 91       	pop	r17
	} else
	{
		value |= 0b10000000;
	}

	writeRegister8(DS3231_REG_CONTROL, value);
    3986:	0f 91       	pop	r16
    3988:	1e cf       	rjmp	.-452    	; 0x37c6 <_ZN6DS323114writeRegister8Ehh>

0000398a <_ZN6DS32315beginEv>:

const uint8_t daysArray [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };
const uint8_t dowArray[] PROGMEM = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };

bool DS3231::begin(void)
{
    398a:	cf 93       	push	r28
    398c:	df 93       	push	r29
    398e:	ec 01       	movw	r28, r24
	Wire.begin();
    3990:	87 e4       	ldi	r24, 0x47	; 71
    3992:	95 e0       	ldi	r25, 0x05	; 5
    3994:	0e 94 bb 2c 	call	0x5976	; 0x5976 <_ZN7TwoWire5beginEv>

	setBattery(true, false);
    3998:	40 e0       	ldi	r20, 0x00	; 0
    399a:	61 e0       	ldi	r22, 0x01	; 1
    399c:	ce 01       	movw	r24, r28
    399e:	da df       	rcall	.-76     	; 0x3954 <_ZN6DS323110setBatteryEbb>

	t.year = 2000;
    39a0:	80 ed       	ldi	r24, 0xD0	; 208
    39a2:	97 e0       	ldi	r25, 0x07	; 7
    39a4:	99 83       	std	Y+1, r25	; 0x01
    39a6:	88 83       	st	Y, r24
	t.month = 1;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	8a 83       	std	Y+2, r24	; 0x02
	t.day = 1;
    39ac:	8b 83       	std	Y+3, r24	; 0x03
	t.hour = 0;
    39ae:	1c 82       	std	Y+4, r1	; 0x04
	t.minute = 0;
    39b0:	1d 82       	std	Y+5, r1	; 0x05
	t.second = 0;
    39b2:	1e 82       	std	Y+6, r1	; 0x06
	t.dayOfWeek = 6;
    39b4:	86 e0       	ldi	r24, 0x06	; 6
    39b6:	8f 83       	std	Y+7, r24	; 0x07
	t.unixtime = 946681200;
    39b8:	80 e7       	ldi	r24, 0x70	; 112
    39ba:	95 e3       	ldi	r25, 0x35	; 53
    39bc:	ad e6       	ldi	r26, 0x6D	; 109
    39be:	b8 e3       	ldi	r27, 0x38	; 56
    39c0:	88 87       	std	Y+8, r24	; 0x08
    39c2:	99 87       	std	Y+9, r25	; 0x09
    39c4:	aa 87       	std	Y+10, r26	; 0x0a
    39c6:	bb 87       	std	Y+11, r27	; 0x0b

	return true;
}
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	df 91       	pop	r29
    39cc:	cf 91       	pop	r28
    39ce:	08 95       	ret

000039d0 <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
    39d0:	fc 01       	movw	r30, r24
	kchar = NO_KEY;
    39d2:	10 82       	st	Z, r1
	kstate = IDLE;
    39d4:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
    39d6:	14 82       	std	Z+4, r1	; 0x04
    39d8:	08 95       	ret

000039da <_ZN6Keypad8pin_readEh>:
void Keypad::setHoldTime(uint hold) {
    holdTime = hold;
}

void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
    39da:	86 2f       	mov	r24, r22
    39dc:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <digitalRead>

000039e0 <_ZN6Keypad9pin_writeEhb>:
    39e0:	86 2f       	mov	r24, r22
    39e2:	64 2f       	mov	r22, r20
    39e4:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <digitalWrite>

000039e8 <_ZN6Keypad8pin_modeEhh>:
    39e8:	86 2f       	mov	r24, r22
    39ea:	64 2f       	mov	r22, r20
    39ec:	0c 94 77 35 	jmp	0x6aee	; 0x6aee <pinMode>

000039f0 <_ZN6KeypadC1EPcPhS1_hh>:
    39f0:	4f 92       	push	r4
    39f2:	5f 92       	push	r5
    39f4:	6f 92       	push	r6
    39f6:	7f 92       	push	r7
    39f8:	8f 92       	push	r8
    39fa:	9f 92       	push	r9
    39fc:	af 92       	push	r10
    39fe:	bf 92       	push	r11
    3a00:	cf 92       	push	r12
    3a02:	df 92       	push	r13
    3a04:	ef 92       	push	r14
    3a06:	0f 93       	push	r16
    3a08:	cf 93       	push	r28
    3a0a:	df 93       	push	r29
    3a0c:	ec 01       	movw	r28, r24
    3a0e:	6b 01       	movw	r12, r22
    3a10:	4a 01       	movw	r8, r20
    3a12:	59 01       	movw	r10, r18
    3a14:	02 96       	adiw	r24, 0x02	; 2
    3a16:	dc df       	rcall	.-72     	; 0x39d0 <_ZN3KeyC1Ev>
    3a18:	8d ee       	ldi	r24, 0xED	; 237
    3a1a:	92 e0       	ldi	r25, 0x02	; 2
    3a1c:	99 83       	std	Y+1, r25	; 0x01
    3a1e:	88 83       	st	Y, r24
    3a20:	2e 01       	movw	r4, r28
    3a22:	8b e1       	ldi	r24, 0x1B	; 27
    3a24:	48 0e       	add	r4, r24
    3a26:	51 1c       	adc	r5, r1
    3a28:	3e 01       	movw	r6, r28
    3a2a:	8d e4       	ldi	r24, 0x4D	; 77
    3a2c:	68 0e       	add	r6, r24
    3a2e:	71 1c       	adc	r7, r1
    3a30:	c2 01       	movw	r24, r4
    3a32:	ce df       	rcall	.-100    	; 0x39d0 <_ZN3KeyC1Ev>
    3a34:	85 e0       	ldi	r24, 0x05	; 5
    3a36:	48 0e       	add	r4, r24
    3a38:	51 1c       	adc	r5, r1
    3a3a:	46 14       	cp	r4, r6
    3a3c:	57 04       	cpc	r5, r7
    3a3e:	c1 f7       	brne	.-16     	; 0x3a30 <_ZN6KeypadC1EPcPhS1_hh+0x40>
    3a40:	fe 01       	movw	r30, r28
    3a42:	e9 5a       	subi	r30, 0xA9	; 169
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	91 82       	std	Z+1, r9	; 0x01
    3a48:	80 82       	st	Z, r8
    3a4a:	32 96       	adiw	r30, 0x02	; 2
    3a4c:	b1 82       	std	Z+1, r11	; 0x01
    3a4e:	a0 82       	st	Z, r10
    3a50:	32 96       	adiw	r30, 0x02	; 2
    3a52:	00 83       	st	Z, r16
    3a54:	31 96       	adiw	r30, 0x01	; 1
    3a56:	e0 82       	st	Z, r14
    3a58:	37 97       	sbiw	r30, 0x07	; 7
    3a5a:	d1 82       	std	Z+1, r13	; 0x01
    3a5c:	c0 82       	st	Z, r12
    3a5e:	38 96       	adiw	r30, 0x08	; 8
    3a60:	8a e0       	ldi	r24, 0x0A	; 10
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	80 83       	st	Z, r24
    3a68:	32 96       	adiw	r30, 0x02	; 2
    3a6a:	84 ef       	ldi	r24, 0xF4	; 244
    3a6c:	91 e0       	ldi	r25, 0x01	; 1
    3a6e:	91 83       	std	Z+1, r25	; 0x01
    3a70:	80 83       	st	Z, r24
    3a72:	33 96       	adiw	r30, 0x03	; 3
    3a74:	11 82       	std	Z+1, r1	; 0x01
    3a76:	10 82       	st	Z, r1
    3a78:	71 97       	sbiw	r30, 0x11	; 17
    3a7a:	10 82       	st	Z, r1
    3a7c:	11 82       	std	Z+1, r1	; 0x01
    3a7e:	12 82       	std	Z+2, r1	; 0x02
    3a80:	13 82       	std	Z+3, r1	; 0x03
    3a82:	cf 59       	subi	r28, 0x9F	; 159
    3a84:	df 4f       	sbci	r29, 0xFF	; 255
    3a86:	18 82       	st	Y, r1
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	0f 91       	pop	r16
    3a8e:	ef 90       	pop	r14
    3a90:	df 90       	pop	r13
    3a92:	cf 90       	pop	r12
    3a94:	bf 90       	pop	r11
    3a96:	af 90       	pop	r10
    3a98:	9f 90       	pop	r9
    3a9a:	8f 90       	pop	r8
    3a9c:	7f 90       	pop	r7
    3a9e:	6f 90       	pop	r6
    3aa0:	5f 90       	pop	r5
    3aa2:	4f 90       	pop	r4
    3aa4:	08 95       	ret

00003aa6 <_ZN6Keypad8scanKeysEv>:
    3aa6:	2f 92       	push	r2
    3aa8:	3f 92       	push	r3
    3aaa:	4f 92       	push	r4
    3aac:	5f 92       	push	r5
    3aae:	6f 92       	push	r6
    3ab0:	7f 92       	push	r7
    3ab2:	8f 92       	push	r8
    3ab4:	9f 92       	push	r9
    3ab6:	af 92       	push	r10
    3ab8:	bf 92       	push	r11
    3aba:	cf 92       	push	r12
    3abc:	df 92       	push	r13
    3abe:	ef 92       	push	r14
    3ac0:	ff 92       	push	r15
    3ac2:	0f 93       	push	r16
    3ac4:	1f 93       	push	r17
    3ac6:	cf 93       	push	r28
    3ac8:	df 93       	push	r29
    3aca:	cd b7       	in	r28, 0x3d	; 61
    3acc:	de b7       	in	r29, 0x3e	; 62
    3ace:	28 97       	sbiw	r28, 0x08	; 8
    3ad0:	0f b6       	in	r0, 0x3f	; 63
    3ad2:	f8 94       	cli
    3ad4:	de bf       	out	0x3e, r29	; 62
    3ad6:	0f be       	out	0x3f, r0	; 63
    3ad8:	cd bf       	out	0x3d, r28	; 61
    3ada:	98 87       	std	Y+8, r25	; 0x08
    3adc:	8f 83       	std	Y+7, r24	; 0x07
    3ade:	10 e0       	ldi	r17, 0x00	; 0
    3ae0:	5c 01       	movw	r10, r24
    3ae2:	2b e5       	ldi	r18, 0x5B	; 91
    3ae4:	a2 0e       	add	r10, r18
    3ae6:	b1 1c       	adc	r11, r1
    3ae8:	7c 01       	movw	r14, r24
    3aea:	37 e5       	ldi	r19, 0x57	; 87
    3aec:	e3 0e       	add	r14, r19
    3aee:	f1 1c       	adc	r15, r1
    3af0:	d5 01       	movw	r26, r10
    3af2:	8c 91       	ld	r24, X
    3af4:	18 17       	cp	r17, r24
    3af6:	b8 f0       	brcs	.+46     	; 0x3b26 <_ZN6Keypad8scanKeysEv+0x80>
    3af8:	31 2c       	mov	r3, r1
    3afa:	ef 81       	ldd	r30, Y+7	; 0x07
    3afc:	f8 85       	ldd	r31, Y+8	; 0x08
    3afe:	e4 5a       	subi	r30, 0xA4	; 164
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	fc 83       	std	Y+4, r31	; 0x04
    3b04:	eb 83       	std	Y+3, r30	; 0x03
    3b06:	cf 80       	ldd	r12, Y+7	; 0x07
    3b08:	d8 84       	ldd	r13, Y+8	; 0x08
    3b0a:	f9 e5       	ldi	r31, 0x59	; 89
    3b0c:	cf 0e       	add	r12, r31
    3b0e:	d1 1c       	adc	r13, r1
    3b10:	41 2c       	mov	r4, r1
    3b12:	51 2c       	mov	r5, r1
    3b14:	32 01       	movw	r6, r4
    3b16:	43 94       	inc	r4
    3b18:	2f 81       	ldd	r18, Y+7	; 0x07
    3b1a:	38 85       	ldd	r19, Y+8	; 0x08
    3b1c:	29 5a       	subi	r18, 0xA9	; 169
    3b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b20:	3e 83       	std	Y+6, r19	; 0x06
    3b22:	2d 83       	std	Y+5, r18	; 0x05
    3b24:	60 c0       	rjmp	.+192    	; 0x3be6 <_ZN6Keypad8scanKeysEv+0x140>
    3b26:	f7 01       	movw	r30, r14
    3b28:	a0 81       	ld	r26, Z
    3b2a:	b1 81       	ldd	r27, Z+1	; 0x01
    3b2c:	a1 0f       	add	r26, r17
    3b2e:	b1 1d       	adc	r27, r1
    3b30:	ef 81       	ldd	r30, Y+7	; 0x07
    3b32:	f8 85       	ldd	r31, Y+8	; 0x08
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	fc 01       	movw	r30, r24
    3b3a:	20 81       	ld	r18, Z
    3b3c:	31 81       	ldd	r19, Z+1	; 0x01
    3b3e:	42 e0       	ldi	r20, 0x02	; 2
    3b40:	6c 91       	ld	r22, X
    3b42:	8f 81       	ldd	r24, Y+7	; 0x07
    3b44:	98 85       	ldd	r25, Y+8	; 0x08
    3b46:	f9 01       	movw	r30, r18
    3b48:	19 95       	eicall
    3b4a:	1f 5f       	subi	r17, 0xFF	; 255
    3b4c:	d1 cf       	rjmp	.-94     	; 0x3af0 <_ZN6Keypad8scanKeysEv+0x4a>
    3b4e:	02 2d       	mov	r16, r2
    3b50:	10 e0       	ldi	r17, 0x00	; 0
    3b52:	ad 81       	ldd	r26, Y+5	; 0x05
    3b54:	be 81       	ldd	r27, Y+6	; 0x06
    3b56:	8d 91       	ld	r24, X+
    3b58:	9c 91       	ld	r25, X
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	a0 0f       	add	r26, r16
    3b5e:	b1 1f       	adc	r27, r17
    3b60:	04 80       	ldd	r0, Z+4	; 0x04
    3b62:	f5 81       	ldd	r31, Z+5	; 0x05
    3b64:	e0 2d       	mov	r30, r0
    3b66:	6c 91       	ld	r22, X
    3b68:	8f 81       	ldd	r24, Y+7	; 0x07
    3b6a:	98 85       	ldd	r25, Y+8	; 0x08
    3b6c:	19 95       	eicall
    3b6e:	00 0f       	add	r16, r16
    3b70:	11 1f       	adc	r17, r17
    3b72:	ef 81       	ldd	r30, Y+7	; 0x07
    3b74:	f8 85       	ldd	r31, Y+8	; 0x08
    3b76:	e0 0f       	add	r30, r16
    3b78:	f1 1f       	adc	r31, r17
    3b7a:	89 2b       	or	r24, r25
    3b7c:	09 f0       	breq	.+2      	; 0x3b80 <_ZN6Keypad8scanKeysEv+0xda>
    3b7e:	6f c0       	rjmp	.+222    	; 0x3c5e <_ZN6Keypad8scanKeysEv+0x1b8>
    3b80:	87 81       	ldd	r24, Z+7	; 0x07
    3b82:	90 85       	ldd	r25, Z+8	; 0x08
    3b84:	29 81       	ldd	r18, Y+1	; 0x01
    3b86:	3a 81       	ldd	r19, Y+2	; 0x02
    3b88:	82 2b       	or	r24, r18
    3b8a:	93 2b       	or	r25, r19
    3b8c:	90 87       	std	Z+8, r25	; 0x08
    3b8e:	87 83       	std	Z+7, r24	; 0x07
    3b90:	23 94       	inc	r2
    3b92:	d5 01       	movw	r26, r10
    3b94:	8c 91       	ld	r24, X
    3b96:	af 81       	ldd	r26, Y+7	; 0x07
    3b98:	b8 85       	ldd	r27, Y+8	; 0x08
    3b9a:	ed 91       	ld	r30, X+
    3b9c:	fc 91       	ld	r31, X
    3b9e:	28 16       	cp	r2, r24
    3ba0:	b0 f2       	brcs	.-84     	; 0x3b4e <_ZN6Keypad8scanKeysEv+0xa8>
    3ba2:	d6 01       	movw	r26, r12
    3ba4:	8d 91       	ld	r24, X+
    3ba6:	9c 91       	ld	r25, X
    3ba8:	dc 01       	movw	r26, r24
    3baa:	ae 0d       	add	r26, r14
    3bac:	bf 1d       	adc	r27, r15
    3bae:	02 80       	ldd	r0, Z+2	; 0x02
    3bb0:	f3 81       	ldd	r31, Z+3	; 0x03
    3bb2:	e0 2d       	mov	r30, r0
    3bb4:	41 e0       	ldi	r20, 0x01	; 1
    3bb6:	6c 91       	ld	r22, X
    3bb8:	8f 81       	ldd	r24, Y+7	; 0x07
    3bba:	98 85       	ldd	r25, Y+8	; 0x08
    3bbc:	19 95       	eicall
    3bbe:	f6 01       	movw	r30, r12
    3bc0:	80 81       	ld	r24, Z
    3bc2:	91 81       	ldd	r25, Z+1	; 0x01
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	ae 0d       	add	r26, r14
    3bc8:	bf 1d       	adc	r27, r15
    3bca:	ef 81       	ldd	r30, Y+7	; 0x07
    3bcc:	f8 85       	ldd	r31, Y+8	; 0x08
    3bce:	80 81       	ld	r24, Z
    3bd0:	91 81       	ldd	r25, Z+1	; 0x01
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	20 81       	ld	r18, Z
    3bd6:	31 81       	ldd	r19, Z+1	; 0x01
    3bd8:	40 e0       	ldi	r20, 0x00	; 0
    3bda:	6c 91       	ld	r22, X
    3bdc:	8f 81       	ldd	r24, Y+7	; 0x07
    3bde:	98 85       	ldd	r25, Y+8	; 0x08
    3be0:	f9 01       	movw	r30, r18
    3be2:	19 95       	eicall
    3be4:	33 94       	inc	r3
    3be6:	ab 81       	ldd	r26, Y+3	; 0x03
    3be8:	bc 81       	ldd	r27, Y+4	; 0x04
    3bea:	8c 91       	ld	r24, X
    3bec:	38 16       	cp	r3, r24
    3bee:	e0 f5       	brcc	.+120    	; 0x3c68 <_ZN6Keypad8scanKeysEv+0x1c2>
    3bf0:	e3 2c       	mov	r14, r3
    3bf2:	f1 2c       	mov	r15, r1
    3bf4:	f6 01       	movw	r30, r12
    3bf6:	a0 81       	ld	r26, Z
    3bf8:	b1 81       	ldd	r27, Z+1	; 0x01
    3bfa:	ae 0d       	add	r26, r14
    3bfc:	bf 1d       	adc	r27, r15
    3bfe:	ef 81       	ldd	r30, Y+7	; 0x07
    3c00:	f8 85       	ldd	r31, Y+8	; 0x08
    3c02:	80 81       	ld	r24, Z
    3c04:	91 81       	ldd	r25, Z+1	; 0x01
    3c06:	fc 01       	movw	r30, r24
    3c08:	20 81       	ld	r18, Z
    3c0a:	31 81       	ldd	r19, Z+1	; 0x01
    3c0c:	41 e0       	ldi	r20, 0x01	; 1
    3c0e:	6c 91       	ld	r22, X
    3c10:	8f 81       	ldd	r24, Y+7	; 0x07
    3c12:	98 85       	ldd	r25, Y+8	; 0x08
    3c14:	f9 01       	movw	r30, r18
    3c16:	19 95       	eicall
    3c18:	f6 01       	movw	r30, r12
    3c1a:	a0 81       	ld	r26, Z
    3c1c:	b1 81       	ldd	r27, Z+1	; 0x01
    3c1e:	ae 0d       	add	r26, r14
    3c20:	bf 1d       	adc	r27, r15
    3c22:	ef 81       	ldd	r30, Y+7	; 0x07
    3c24:	f8 85       	ldd	r31, Y+8	; 0x08
    3c26:	80 81       	ld	r24, Z
    3c28:	91 81       	ldd	r25, Z+1	; 0x01
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	22 81       	ldd	r18, Z+2	; 0x02
    3c2e:	33 81       	ldd	r19, Z+3	; 0x03
    3c30:	40 e0       	ldi	r20, 0x00	; 0
    3c32:	6c 91       	ld	r22, X
    3c34:	8f 81       	ldd	r24, Y+7	; 0x07
    3c36:	98 85       	ldd	r25, Y+8	; 0x08
    3c38:	f9 01       	movw	r30, r18
    3c3a:	19 95       	eicall
    3c3c:	d3 01       	movw	r26, r6
    3c3e:	c2 01       	movw	r24, r4
    3c40:	03 2c       	mov	r0, r3
    3c42:	04 c0       	rjmp	.+8      	; 0x3c4c <_ZN6Keypad8scanKeysEv+0x1a6>
    3c44:	88 0f       	add	r24, r24
    3c46:	99 1f       	adc	r25, r25
    3c48:	aa 1f       	adc	r26, r26
    3c4a:	bb 1f       	adc	r27, r27
    3c4c:	0a 94       	dec	r0
    3c4e:	d2 f7       	brpl	.-12     	; 0x3c44 <_ZN6Keypad8scanKeysEv+0x19e>
    3c50:	9a 83       	std	Y+2, r25	; 0x02
    3c52:	89 83       	std	Y+1, r24	; 0x01
    3c54:	4c 01       	movw	r8, r24
    3c56:	80 94       	com	r8
    3c58:	90 94       	com	r9
    3c5a:	21 2c       	mov	r2, r1
    3c5c:	9a cf       	rjmp	.-204    	; 0x3b92 <_ZN6Keypad8scanKeysEv+0xec>
    3c5e:	87 81       	ldd	r24, Z+7	; 0x07
    3c60:	90 85       	ldd	r25, Z+8	; 0x08
    3c62:	88 21       	and	r24, r8
    3c64:	99 21       	and	r25, r9
    3c66:	92 cf       	rjmp	.-220    	; 0x3b8c <_ZN6Keypad8scanKeysEv+0xe6>
    3c68:	28 96       	adiw	r28, 0x08	; 8
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	cd bf       	out	0x3d, r28	; 61
    3c74:	df 91       	pop	r29
    3c76:	cf 91       	pop	r28
    3c78:	1f 91       	pop	r17
    3c7a:	0f 91       	pop	r16
    3c7c:	ff 90       	pop	r15
    3c7e:	ef 90       	pop	r14
    3c80:	df 90       	pop	r13
    3c82:	cf 90       	pop	r12
    3c84:	bf 90       	pop	r11
    3c86:	af 90       	pop	r10
    3c88:	9f 90       	pop	r9
    3c8a:	8f 90       	pop	r8
    3c8c:	7f 90       	pop	r7
    3c8e:	6f 90       	pop	r6
    3c90:	5f 90       	pop	r5
    3c92:	4f 90       	pop	r4
    3c94:	3f 90       	pop	r3
    3c96:	2f 90       	pop	r2
    3c98:	08 95       	ret

00003c9a <_ZN6Keypad10findInListEi>:
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	24 8d       	ldd	r18, Z+28	; 0x1c
    3ca2:	35 8d       	ldd	r19, Z+29	; 0x1d
    3ca4:	26 17       	cp	r18, r22
    3ca6:	37 07       	cpc	r19, r23
    3ca8:	39 f0       	breq	.+14     	; 0x3cb8 <_ZN6Keypad10findInListEi+0x1e>
    3caa:	01 96       	adiw	r24, 0x01	; 1
    3cac:	35 96       	adiw	r30, 0x05	; 5
    3cae:	8a 30       	cpi	r24, 0x0A	; 10
    3cb0:	91 05       	cpc	r25, r1
    3cb2:	b1 f7       	brne	.-20     	; 0x3ca0 <_ZN6Keypad10findInListEi+0x6>
    3cb4:	8f ef       	ldi	r24, 0xFF	; 255
    3cb6:	9f ef       	ldi	r25, 0xFF	; 255
    3cb8:	08 95       	ret

00003cba <_ZN6Keypad12transitionToEh8KeyState>:
}

void Keypad::transitionTo(byte idx, KeyState nextState) {
	key[idx].kstate = nextState;
    3cba:	dc 01       	movw	r26, r24
    3cbc:	25 e0       	ldi	r18, 0x05	; 5
    3cbe:	62 9f       	mul	r22, r18
    3cc0:	a0 0d       	add	r26, r0
    3cc2:	b1 1d       	adc	r27, r1
    3cc4:	11 24       	eor	r1, r1
    3cc6:	5e 96       	adiw	r26, 0x1e	; 30
    3cc8:	4c 93       	st	X, r20
    3cca:	5e 97       	sbiw	r26, 0x1e	; 30
	key[idx].stateChanged = true;
    3ccc:	21 e0       	ldi	r18, 0x01	; 1
    3cce:	5f 96       	adiw	r26, 0x1f	; 31
    3cd0:	2c 93       	st	X, r18
    3cd2:	5f 97       	sbiw	r26, 0x1f	; 31

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	ef 59       	subi	r30, 0x9F	; 159
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	20 81       	ld	r18, Z
    3cdc:	31 96       	adiw	r30, 0x01	; 1
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    3cde:	01 90       	ld	r0, Z+
    3ce0:	f0 81       	ld	r31, Z
    3ce2:	e0 2d       	mov	r30, r0
	key[idx].kstate = nextState;
	key[idx].stateChanged = true;

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    3ce4:	22 23       	and	r18, r18
    3ce6:	31 f0       	breq	.+12     	; 0x3cf4 <_ZN6Keypad12transitionToEh8KeyState+0x3a>
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    3ce8:	30 97       	sbiw	r30, 0x00	; 0
    3cea:	49 f0       	breq	.+18     	; 0x3cfe <_ZN6Keypad12transitionToEh8KeyState+0x44>
    3cec:	61 11       	cpse	r22, r1
    3cee:	07 c0       	rjmp	.+14     	; 0x3cfe <_ZN6Keypad12transitionToEh8KeyState+0x44>
			keypadEventListener(key[0].kchar);
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	02 c0       	rjmp	.+4      	; 0x3cf8 <_ZN6Keypad12transitionToEh8KeyState+0x3e>
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
    3cf4:	30 97       	sbiw	r30, 0x00	; 0
    3cf6:	19 f0       	breq	.+6      	; 0x3cfe <_ZN6Keypad12transitionToEh8KeyState+0x44>
			keypadEventListener(key[idx].kchar);
    3cf8:	5b 96       	adiw	r26, 0x1b	; 27
    3cfa:	8c 91       	ld	r24, X
    3cfc:	19 94       	eijmp
    3cfe:	08 95       	ret

00003d00 <_ZN6Keypad12nextKeyStateEhb>:
	return anyActivity;
}

// Private
// This function is a state machine but is also used for debouncing the keys.
void Keypad::nextKeyState(byte idx, boolean button) {
    3d00:	cf 92       	push	r12
    3d02:	df 92       	push	r13
    3d04:	ef 92       	push	r14
    3d06:	ff 92       	push	r15
    3d08:	0f 93       	push	r16
    3d0a:	1f 93       	push	r17
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	ec 01       	movw	r28, r24
    3d12:	16 2f       	mov	r17, r22
    3d14:	04 2f       	mov	r16, r20
	key[idx].stateChanged = false;
    3d16:	fc 01       	movw	r30, r24
    3d18:	85 e0       	ldi	r24, 0x05	; 5
    3d1a:	68 9f       	mul	r22, r24
    3d1c:	e0 0d       	add	r30, r0
    3d1e:	f1 1d       	adc	r31, r1
    3d20:	11 24       	eor	r1, r1
    3d22:	17 8e       	std	Z+31, r1	; 0x1f

	switch (key[idx].kstate) {
    3d24:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d26:	81 30       	cpi	r24, 0x01	; 1
    3d28:	a9 f0       	breq	.+42     	; 0x3d54 <_ZN6Keypad12nextKeyStateEhb+0x54>
    3d2a:	30 f0       	brcs	.+12     	; 0x3d38 <_ZN6Keypad12nextKeyStateEhb+0x38>
    3d2c:	82 30       	cpi	r24, 0x02	; 2
    3d2e:	69 f1       	breq	.+90     	; 0x3d8a <_ZN6Keypad12nextKeyStateEhb+0x8a>
    3d30:	83 30       	cpi	r24, 0x03	; 3
    3d32:	c9 f5       	brne	.+114    	; 0x3da6 <_ZN6Keypad12nextKeyStateEhb+0xa6>
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
    3d34:	40 e0       	ldi	r20, 0x00	; 0
    3d36:	2c c0       	rjmp	.+88     	; 0x3d90 <_ZN6Keypad12nextKeyStateEhb+0x90>
void Keypad::nextKeyState(byte idx, boolean button) {
	key[idx].stateChanged = false;

	switch (key[idx].kstate) {
		case IDLE:
			if (button==CLOSED) {
    3d38:	44 23       	and	r20, r20
    3d3a:	a9 f1       	breq	.+106    	; 0x3da6 <_ZN6Keypad12nextKeyStateEhb+0xa6>
				transitionTo (idx, PRESSED);
    3d3c:	41 e0       	ldi	r20, 0x01	; 1
    3d3e:	ce 01       	movw	r24, r28
    3d40:	bc df       	rcall	.-136    	; 0x3cba <_ZN6Keypad12transitionToEh8KeyState>
				holdTimer = millis(); }		// Get ready for next HOLD state.
    3d42:	0e 94 60 33 	call	0x66c0	; 0x66c0 <millis>
    3d46:	c3 5b       	subi	r28, 0xB3	; 179
    3d48:	df 4f       	sbci	r29, 0xFF	; 255
    3d4a:	68 83       	st	Y, r22
    3d4c:	79 83       	std	Y+1, r23	; 0x01
    3d4e:	8a 83       	std	Y+2, r24	; 0x02
    3d50:	9b 83       	std	Y+3, r25	; 0x03
    3d52:	29 c0       	rjmp	.+82     	; 0x3da6 <_ZN6Keypad12nextKeyStateEhb+0xa6>
			break;
		case PRESSED:
			if ((millis()-holdTimer)>holdTime)	// Waiting for a key HOLD...
    3d54:	0e 94 60 33 	call	0x66c0	; 0x66c0 <millis>
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e3 5b       	subi	r30, 0xB3	; 179
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	c0 80       	ld	r12, Z
    3d60:	d1 80       	ldd	r13, Z+1	; 0x01
    3d62:	e2 80       	ldd	r14, Z+2	; 0x02
    3d64:	f3 80       	ldd	r15, Z+3	; 0x03
    3d66:	ab 01       	movw	r20, r22
    3d68:	bc 01       	movw	r22, r24
    3d6a:	4c 19       	sub	r20, r12
    3d6c:	5d 09       	sbc	r21, r13
    3d6e:	6e 09       	sbc	r22, r14
    3d70:	7f 09       	sbc	r23, r15
    3d72:	72 96       	adiw	r30, 0x12	; 18
    3d74:	80 81       	ld	r24, Z
    3d76:	91 81       	ldd	r25, Z+1	; 0x01
    3d78:	a0 e0       	ldi	r26, 0x00	; 0
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	84 17       	cp	r24, r20
    3d7e:	95 07       	cpc	r25, r21
    3d80:	a6 07       	cpc	r26, r22
    3d82:	b7 07       	cpc	r27, r23
    3d84:	10 f4       	brcc	.+4      	; 0x3d8a <_ZN6Keypad12nextKeyStateEhb+0x8a>
				transitionTo (idx, HOLD);
    3d86:	42 e0       	ldi	r20, 0x02	; 2
    3d88:	03 c0       	rjmp	.+6      	; 0x3d90 <_ZN6Keypad12nextKeyStateEhb+0x90>
			else if (button==OPEN)				// or for a key to be RELEASED.
    3d8a:	01 11       	cpse	r16, r1
    3d8c:	0c c0       	rjmp	.+24     	; 0x3da6 <_ZN6Keypad12nextKeyStateEhb+0xa6>
				transitionTo (idx, RELEASED);
    3d8e:	43 e0       	ldi	r20, 0x03	; 3
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
    3d90:	61 2f       	mov	r22, r17
    3d92:	ce 01       	movw	r24, r28
			break;
	}
}
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	1f 91       	pop	r17
    3d9a:	0f 91       	pop	r16
    3d9c:	ff 90       	pop	r15
    3d9e:	ef 90       	pop	r14
    3da0:	df 90       	pop	r13
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
    3da2:	cf 90       	pop	r12
    3da4:	8a cf       	rjmp	.-236    	; 0x3cba <_ZN6Keypad12transitionToEh8KeyState>
			break;
	}
}
    3da6:	df 91       	pop	r29
    3da8:	cf 91       	pop	r28
    3daa:	1f 91       	pop	r17
    3dac:	0f 91       	pop	r16
    3dae:	ff 90       	pop	r15
    3db0:	ef 90       	pop	r14
    3db2:	df 90       	pop	r13
    3db4:	cf 90       	pop	r12
    3db6:	08 95       	ret

00003db8 <_ZN6Keypad10updateListEv>:
		pin_mode(columnPins[c],INPUT);
	}
}

// Manage the list without rearranging the keys. Returns true if any keys on the list changed state.
bool Keypad::updateList() {
    3db8:	2f 92       	push	r2
    3dba:	3f 92       	push	r3
    3dbc:	4f 92       	push	r4
    3dbe:	5f 92       	push	r5
    3dc0:	6f 92       	push	r6
    3dc2:	7f 92       	push	r7
    3dc4:	8f 92       	push	r8
    3dc6:	9f 92       	push	r9
    3dc8:	af 92       	push	r10
    3dca:	bf 92       	push	r11
    3dcc:	cf 92       	push	r12
    3dce:	df 92       	push	r13
    3dd0:	ef 92       	push	r14
    3dd2:	ff 92       	push	r15
    3dd4:	0f 93       	push	r16
    3dd6:	1f 93       	push	r17
    3dd8:	cf 93       	push	r28
    3dda:	df 93       	push	r29
    3ddc:	00 d0       	rcall	.+0      	; 0x3dde <_ZN6Keypad10updateListEv+0x26>
    3dde:	00 d0       	rcall	.+0      	; 0x3de0 <_ZN6Keypad10updateListEv+0x28>
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	9e 83       	std	Y+6, r25	; 0x06
    3de6:	8d 83       	std	Y+5, r24	; 0x05
    3de8:	7c 01       	movw	r14, r24
    3dea:	5c 01       	movw	r10, r24
    3dec:	22 e3       	ldi	r18, 0x32	; 50
    3dee:	a2 0e       	add	r10, r18
    3df0:	b1 1c       	adc	r11, r1
    3df2:	fc 01       	movw	r30, r24

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
			key[i].kchar = NO_KEY;
			key[i].kcode = -1;
    3df4:	8f ef       	ldi	r24, 0xFF	; 255
    3df6:	9f ef       	ldi	r25, 0xFF	; 255

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
    3df8:	26 8d       	ldd	r18, Z+30	; 0x1e
    3dfa:	21 11       	cpse	r18, r1
    3dfc:	04 c0       	rjmp	.+8      	; 0x3e06 <_ZN6Keypad10updateListEv+0x4e>
			key[i].kchar = NO_KEY;
    3dfe:	13 8e       	std	Z+27, r1	; 0x1b
			key[i].kcode = -1;
    3e00:	95 8f       	std	Z+29, r25	; 0x1d
    3e02:	84 8f       	std	Z+28, r24	; 0x1c
			key[i].stateChanged = false;
    3e04:	17 8e       	std	Z+31, r1	; 0x1f
    3e06:	35 96       	adiw	r30, 0x05	; 5
bool Keypad::updateList() {

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
    3e08:	ae 16       	cp	r10, r30
    3e0a:	bf 06       	cpc	r11, r31
    3e0c:	a9 f7       	brne	.-22     	; 0x3df8 <_ZN6Keypad10updateListEv+0x40>
    3e0e:	51 2c       	mov	r5, r1
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
    3e10:	8d 81       	ldd	r24, Y+5	; 0x05
    3e12:	9e 81       	ldd	r25, Y+6	; 0x06
    3e14:	85 5a       	subi	r24, 0xA5	; 165
    3e16:	9f 4f       	sbci	r25, 0xFF	; 255
    3e18:	9a 83       	std	Y+2, r25	; 0x02
    3e1a:	89 83       	std	Y+1, r24	; 0x01
		for (byte c=0; c<sizeKpd.columns; c++) {
    3e1c:	ad 81       	ldd	r26, Y+5	; 0x05
    3e1e:	be 81       	ldd	r27, Y+6	; 0x06
    3e20:	a4 5a       	subi	r26, 0xA4	; 164
    3e22:	bf 4f       	sbci	r27, 0xFF	; 255
    3e24:	bc 83       	std	Y+4, r27	; 0x04
    3e26:	ab 83       	std	Y+3, r26	; 0x03
			boolean button = bitRead(bitMap[r],c);
			char keyChar = keymap[r * sizeKpd.columns + c];
    3e28:	6d 80       	ldd	r6, Y+5	; 0x05
    3e2a:	7e 80       	ldd	r7, Y+6	; 0x06
    3e2c:	b5 e5       	ldi	r27, 0x55	; 85
    3e2e:	6b 0e       	add	r6, r27
    3e30:	71 1c       	adc	r7, r1
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
						key[i].kchar = keyChar;
    3e32:	85 e0       	ldi	r24, 0x05	; 5
    3e34:	28 2e       	mov	r2, r24
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
    3e36:	e9 81       	ldd	r30, Y+1	; 0x01
    3e38:	fa 81       	ldd	r31, Y+2	; 0x02
    3e3a:	80 81       	ld	r24, Z
    3e3c:	58 16       	cp	r5, r24
    3e3e:	08 f0       	brcs	.+2      	; 0x3e42 <_ZN6Keypad10updateListEv+0x8a>
    3e40:	57 c0       	rjmp	.+174    	; 0x3ef0 <_ZN6Keypad10updateListEv+0x138>
    3e42:	41 2c       	mov	r4, r1
		for (byte c=0; c<sizeKpd.columns; c++) {
			boolean button = bitRead(bitMap[r],c);
    3e44:	0d 81       	ldd	r16, Y+5	; 0x05
    3e46:	1e 81       	ldd	r17, Y+6	; 0x06
    3e48:	05 0d       	add	r16, r5
    3e4a:	11 1d       	adc	r17, r1
    3e4c:	05 0d       	add	r16, r5
    3e4e:	11 1d       	adc	r17, r1
    3e50:	09 5f       	subi	r16, 0xF9	; 249
    3e52:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
    3e54:	ab 81       	ldd	r26, Y+3	; 0x03
    3e56:	bc 81       	ldd	r27, Y+4	; 0x04
    3e58:	8c 90       	ld	r8, X
    3e5a:	48 14       	cp	r4, r8
    3e5c:	08 f0       	brcs	.+2      	; 0x3e60 <_ZN6Keypad10updateListEv+0xa8>
    3e5e:	46 c0       	rjmp	.+140    	; 0x3eec <_ZN6Keypad10updateListEv+0x134>
			boolean button = bitRead(bitMap[r],c);
    3e60:	f8 01       	movw	r30, r16
    3e62:	c0 80       	ld	r12, Z
    3e64:	d1 80       	ldd	r13, Z+1	; 0x01
    3e66:	04 2c       	mov	r0, r4
    3e68:	02 c0       	rjmp	.+4      	; 0x3e6e <_ZN6Keypad10updateListEv+0xb6>
    3e6a:	d6 94       	lsr	r13
    3e6c:	c7 94       	ror	r12
    3e6e:	0a 94       	dec	r0
    3e70:	e2 f7       	brpl	.-8      	; 0x3e6a <_ZN6Keypad10updateListEv+0xb2>
    3e72:	fc 2d       	mov	r31, r12
    3e74:	f1 70       	andi	r31, 0x01	; 1
    3e76:	3f 2e       	mov	r3, r31
			char keyChar = keymap[r * sizeKpd.columns + c];
    3e78:	58 9c       	mul	r5, r8
    3e7a:	40 01       	movw	r8, r0
    3e7c:	11 24       	eor	r1, r1
    3e7e:	84 0c       	add	r8, r4
    3e80:	91 1c       	adc	r9, r1
			int keyCode = r * sizeKpd.columns + c;
			int idx = findInList (keyCode);
    3e82:	b4 01       	movw	r22, r8
    3e84:	8d 81       	ldd	r24, Y+5	; 0x05
    3e86:	9e 81       	ldd	r25, Y+6	; 0x06
    3e88:	08 df       	rcall	.-496    	; 0x3c9a <_ZN6Keypad10findInListEi>
			// Key is already on the list so set its next state.
			if (idx > -1)	{
    3e8a:	97 fd       	sbrc	r25, 7
    3e8c:	05 c0       	rjmp	.+10     	; 0x3e98 <_ZN6Keypad10updateListEv+0xe0>
				nextKeyState(idx, button);
    3e8e:	43 2d       	mov	r20, r3
    3e90:	68 2f       	mov	r22, r24
    3e92:	8d 81       	ldd	r24, Y+5	; 0x05
    3e94:	9e 81       	ldd	r25, Y+6	; 0x06
    3e96:	20 c0       	rjmp	.+64     	; 0x3ed8 <_ZN6Keypad10updateListEv+0x120>
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	31 f5       	brne	.+76     	; 0x3ee8 <_ZN6Keypad10updateListEv+0x130>
    3e9c:	c0 fe       	sbrs	r12, 0
    3e9e:	24 c0       	rjmp	.+72     	; 0x3ee8 <_ZN6Keypad10updateListEv+0x130>
    3ea0:	ed 81       	ldd	r30, Y+5	; 0x05
    3ea2:	fe 81       	ldd	r31, Y+6	; 0x06
    3ea4:	60 e0       	ldi	r22, 0x00	; 0
    3ea6:	70 e0       	ldi	r23, 0x00	; 0
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
    3ea8:	83 8d       	ldd	r24, Z+27	; 0x1b
    3eaa:	81 11       	cpse	r24, r1
    3eac:	17 c0       	rjmp	.+46     	; 0x3edc <_ZN6Keypad10updateListEv+0x124>

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
			boolean button = bitRead(bitMap[r],c);
			char keyChar = keymap[r * sizeKpd.columns + c];
    3eae:	d3 01       	movw	r26, r6
    3eb0:	ed 91       	ld	r30, X+
    3eb2:	fc 91       	ld	r31, X
    3eb4:	e8 0d       	add	r30, r8
    3eb6:	f9 1d       	adc	r31, r9
    3eb8:	80 81       	ld	r24, Z
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
						key[i].kchar = keyChar;
    3eba:	26 9e       	mul	r2, r22
    3ebc:	f0 01       	movw	r30, r0
    3ebe:	27 9e       	mul	r2, r23
    3ec0:	f0 0d       	add	r31, r0
    3ec2:	11 24       	eor	r1, r1
    3ec4:	2d 81       	ldd	r18, Y+5	; 0x05
    3ec6:	3e 81       	ldd	r19, Y+6	; 0x06
    3ec8:	e2 0f       	add	r30, r18
    3eca:	f3 1f       	adc	r31, r19
    3ecc:	83 8f       	std	Z+27, r24	; 0x1b
						key[i].kcode = keyCode;
    3ece:	95 8e       	std	Z+29, r9	; 0x1d
    3ed0:	84 8e       	std	Z+28, r8	; 0x1c
						key[i].kstate = IDLE;		// Keys NOT on the list have an initial state of IDLE.
    3ed2:	16 8e       	std	Z+30, r1	; 0x1e
						nextKeyState (i, button);
    3ed4:	43 2d       	mov	r20, r3
    3ed6:	c9 01       	movw	r24, r18
    3ed8:	13 df       	rcall	.-474    	; 0x3d00 <_ZN6Keypad12nextKeyStateEhb>
						break;	// Don't fill all the empty slots with the same key.
    3eda:	06 c0       	rjmp	.+12     	; 0x3ee8 <_ZN6Keypad10updateListEv+0x130>
    3edc:	6f 5f       	subi	r22, 0xFF	; 255
    3ede:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee0:	35 96       	adiw	r30, 0x05	; 5
			if (idx > -1)	{
				nextKeyState(idx, button);
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
    3ee2:	6a 30       	cpi	r22, 0x0A	; 10
    3ee4:	71 05       	cpc	r23, r1
    3ee6:	01 f7       	brne	.-64     	; 0x3ea8 <_ZN6Keypad10updateListEv+0xf0>
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
    3ee8:	43 94       	inc	r4
    3eea:	b4 cf       	rjmp	.-152    	; 0x3e54 <_ZN6Keypad10updateListEv+0x9c>
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
    3eec:	53 94       	inc	r5
    3eee:	a3 cf       	rjmp	.-186    	; 0x3e36 <_ZN6Keypad10updateListEv+0x7e>
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].stateChanged) anyActivity = true;
    3ef2:	d7 01       	movw	r26, r14
    3ef4:	5f 96       	adiw	r26, 0x1f	; 31
    3ef6:	9c 91       	ld	r25, X
    3ef8:	91 11       	cpse	r25, r1
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	b5 e0       	ldi	r27, 0x05	; 5
    3efe:	eb 0e       	add	r14, r27
    3f00:	f1 1c       	adc	r15, r1
			}
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
    3f02:	ae 14       	cp	r10, r14
    3f04:	bf 04       	cpc	r11, r15
    3f06:	a9 f7       	brne	.-22     	; 0x3ef2 <_ZN6Keypad10updateListEv+0x13a>
		if (key[i].stateChanged) anyActivity = true;
	}

	return anyActivity;
}
    3f08:	26 96       	adiw	r28, 0x06	; 6
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	df 91       	pop	r29
    3f16:	cf 91       	pop	r28
    3f18:	1f 91       	pop	r17
    3f1a:	0f 91       	pop	r16
    3f1c:	ff 90       	pop	r15
    3f1e:	ef 90       	pop	r14
    3f20:	df 90       	pop	r13
    3f22:	cf 90       	pop	r12
    3f24:	bf 90       	pop	r11
    3f26:	af 90       	pop	r10
    3f28:	9f 90       	pop	r9
    3f2a:	8f 90       	pop	r8
    3f2c:	7f 90       	pop	r7
    3f2e:	6f 90       	pop	r6
    3f30:	5f 90       	pop	r5
    3f32:	4f 90       	pop	r4
    3f34:	3f 90       	pop	r3
    3f36:	2f 90       	pop	r2
    3f38:	08 95       	ret

00003f3a <_ZN6Keypad7getKeysEv>:

	return NO_KEY;
}

// Populate the key list.
bool Keypad::getKeys() {
    3f3a:	cf 92       	push	r12
    3f3c:	df 92       	push	r13
    3f3e:	ef 92       	push	r14
    3f40:	ff 92       	push	r15
    3f42:	0f 93       	push	r16
    3f44:	1f 93       	push	r17
    3f46:	cf 93       	push	r28
    3f48:	df 93       	push	r29
    3f4a:	ec 01       	movw	r28, r24
	bool keyActivity = false;

	// Limit how often the keypad is scanned. This makes the loop() run 10 times as fast.
	if ( (millis()-startTime)>debounceTime ) {
    3f4c:	0e 94 60 33 	call	0x66c0	; 0x66c0 <millis>
    3f50:	8e 01       	movw	r16, r28
    3f52:	0f 5a       	subi	r16, 0xAF	; 175
    3f54:	1f 4f       	sbci	r17, 0xFF	; 255
    3f56:	f8 01       	movw	r30, r16
    3f58:	c0 80       	ld	r12, Z
    3f5a:	d1 80       	ldd	r13, Z+1	; 0x01
    3f5c:	e2 80       	ldd	r14, Z+2	; 0x02
    3f5e:	f3 80       	ldd	r15, Z+3	; 0x03
    3f60:	ab 01       	movw	r20, r22
    3f62:	bc 01       	movw	r22, r24
    3f64:	4c 19       	sub	r20, r12
    3f66:	5d 09       	sbc	r21, r13
    3f68:	6e 09       	sbc	r22, r14
    3f6a:	7f 09       	sbc	r23, r15
    3f6c:	3c 96       	adiw	r30, 0x0c	; 12
    3f6e:	80 81       	ld	r24, Z
    3f70:	91 81       	ldd	r25, Z+1	; 0x01
    3f72:	a0 e0       	ldi	r26, 0x00	; 0
    3f74:	b0 e0       	ldi	r27, 0x00	; 0
    3f76:	84 17       	cp	r24, r20
    3f78:	95 07       	cpc	r25, r21
    3f7a:	a6 07       	cpc	r26, r22
    3f7c:	b7 07       	cpc	r27, r23
    3f7e:	68 f4       	brcc	.+26     	; 0x3f9a <_ZN6Keypad7getKeysEv+0x60>
		scanKeys();
    3f80:	ce 01       	movw	r24, r28
    3f82:	91 dd       	rcall	.-1246   	; 0x3aa6 <_ZN6Keypad8scanKeysEv>
		keyActivity = updateList();
    3f84:	ce 01       	movw	r24, r28
    3f86:	18 df       	rcall	.-464    	; 0x3db8 <_ZN6Keypad10updateListEv>
    3f88:	c8 2f       	mov	r28, r24
		startTime = millis();
    3f8a:	0e 94 60 33 	call	0x66c0	; 0x66c0 <millis>
    3f8e:	f8 01       	movw	r30, r16
    3f90:	60 83       	st	Z, r22
    3f92:	71 83       	std	Z+1, r23	; 0x01
    3f94:	82 83       	std	Z+2, r24	; 0x02
    3f96:	93 83       	std	Z+3, r25	; 0x03
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <_ZN6Keypad7getKeysEv+0x62>
	return NO_KEY;
}

// Populate the key list.
bool Keypad::getKeys() {
	bool keyActivity = false;
    3f9a:	c0 e0       	ldi	r28, 0x00	; 0
		keyActivity = updateList();
		startTime = millis();
	}

	return keyActivity;
}
    3f9c:	8c 2f       	mov	r24, r28
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	1f 91       	pop	r17
    3fa4:	0f 91       	pop	r16
    3fa6:	ff 90       	pop	r15
    3fa8:	ef 90       	pop	r14
    3faa:	df 90       	pop	r13
    3fac:	cf 90       	pop	r12
    3fae:	08 95       	ret

00003fb0 <_ZN6Keypad6getKeyEv>:
void Keypad::begin(char *userKeymap) {
    keymap = userKeymap;
}

// Returns a single key only. Retained for backwards compatibility.
char Keypad::getKey() {
    3fb0:	0f 93       	push	r16
    3fb2:	1f 93       	push	r17
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	ec 01       	movw	r28, r24
	single_key = true;
    3fba:	8c 01       	movw	r16, r24
    3fbc:	0f 59       	subi	r16, 0x9F	; 159
    3fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	f8 01       	movw	r30, r16
    3fc4:	80 83       	st	Z, r24

	if (getKeys() && key[0].stateChanged && (key[0].kstate==PRESSED))
    3fc6:	ce 01       	movw	r24, r28
    3fc8:	b8 df       	rcall	.-144    	; 0x3f3a <_ZN6Keypad7getKeysEv>
    3fca:	88 23       	and	r24, r24
    3fcc:	41 f0       	breq	.+16     	; 0x3fde <_ZN6Keypad6getKeyEv+0x2e>
    3fce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fd0:	88 23       	and	r24, r24
    3fd2:	29 f0       	breq	.+10     	; 0x3fde <_ZN6Keypad6getKeyEv+0x2e>
    3fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3fd6:	81 30       	cpi	r24, 0x01	; 1
    3fd8:	11 f4       	brne	.+4      	; 0x3fde <_ZN6Keypad6getKeyEv+0x2e>
		return key[0].kchar;
    3fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fdc:	03 c0       	rjmp	.+6      	; 0x3fe4 <_ZN6Keypad6getKeyEv+0x34>
	
	single_key = false;
    3fde:	f8 01       	movw	r30, r16
    3fe0:	10 82       	st	Z, r1

	return NO_KEY;
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
}
    3fe4:	df 91       	pop	r29
    3fe6:	cf 91       	pop	r28
    3fe8:	1f 91       	pop	r17
    3fea:	0f 91       	pop	r16
    3fec:	08 95       	ret

00003fee <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    3fee:	cf 93       	push	r28
    3ff0:	df 93       	push	r29
    3ff2:	ec 01       	movw	r28, r24
    3ff4:	60 e0       	ldi	r22, 0x00	; 0
    3ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ff8:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    4004:	61 e0       	ldi	r22, 0x01	; 1
    4006:	8e 81       	ldd	r24, Y+6	; 0x06
    4008:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	8e 81       	ldd	r24, Y+6	; 0x06
    4018:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    401c:	84 e6       	ldi	r24, 0x64	; 100
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	df 91       	pop	r29
    4022:	cf 91       	pop	r28
    4024:	0c 94 ca 33 	jmp	0x6794	; 0x6794 <delayMicroseconds>

00004028 <_ZN13LiquidCrystal10write4bitsEh>:
    4028:	cf 92       	push	r12
    402a:	df 92       	push	r13
    402c:	ef 92       	push	r14
    402e:	ff 92       	push	r15
    4030:	0f 93       	push	r16
    4032:	1f 93       	push	r17
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	6c 01       	movw	r12, r24
    403a:	7c 01       	movw	r14, r24
    403c:	87 e0       	ldi	r24, 0x07	; 7
    403e:	e8 0e       	add	r14, r24
    4040:	f1 1c       	adc	r15, r1
    4042:	c0 e0       	ldi	r28, 0x00	; 0
    4044:	d0 e0       	ldi	r29, 0x00	; 0
    4046:	06 2f       	mov	r16, r22
    4048:	10 e0       	ldi	r17, 0x00	; 0
    404a:	b8 01       	movw	r22, r16
    404c:	0c 2e       	mov	r0, r28
    404e:	02 c0       	rjmp	.+4      	; 0x4054 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    4050:	75 95       	asr	r23
    4052:	67 95       	ror	r22
    4054:	0a 94       	dec	r0
    4056:	e2 f7       	brpl	.-8      	; 0x4050 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    4058:	61 70       	andi	r22, 0x01	; 1
    405a:	f7 01       	movw	r30, r14
    405c:	81 91       	ld	r24, Z+
    405e:	7f 01       	movw	r14, r30
    4060:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4064:	21 96       	adiw	r28, 0x01	; 1
    4066:	c4 30       	cpi	r28, 0x04	; 4
    4068:	d1 05       	cpc	r29, r1
    406a:	79 f7       	brne	.-34     	; 0x404a <_ZN13LiquidCrystal10write4bitsEh+0x22>
    406c:	c6 01       	movw	r24, r12
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	ff 90       	pop	r15
    4078:	ef 90       	pop	r14
    407a:	df 90       	pop	r13
    407c:	cf 90       	pop	r12
    407e:	b7 cf       	rjmp	.-146    	; 0x3fee <_ZN13LiquidCrystal11pulseEnableEv>

00004080 <_ZN13LiquidCrystal10write8bitsEh>:
    4080:	cf 92       	push	r12
    4082:	df 92       	push	r13
    4084:	ef 92       	push	r14
    4086:	ff 92       	push	r15
    4088:	0f 93       	push	r16
    408a:	1f 93       	push	r17
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
    4090:	6c 01       	movw	r12, r24
    4092:	7c 01       	movw	r14, r24
    4094:	87 e0       	ldi	r24, 0x07	; 7
    4096:	e8 0e       	add	r14, r24
    4098:	f1 1c       	adc	r15, r1
    409a:	c0 e0       	ldi	r28, 0x00	; 0
    409c:	d0 e0       	ldi	r29, 0x00	; 0
    409e:	06 2f       	mov	r16, r22
    40a0:	10 e0       	ldi	r17, 0x00	; 0
    40a2:	b8 01       	movw	r22, r16
    40a4:	0c 2e       	mov	r0, r28
    40a6:	02 c0       	rjmp	.+4      	; 0x40ac <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    40a8:	75 95       	asr	r23
    40aa:	67 95       	ror	r22
    40ac:	0a 94       	dec	r0
    40ae:	e2 f7       	brpl	.-8      	; 0x40a8 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    40b0:	61 70       	andi	r22, 0x01	; 1
    40b2:	f7 01       	movw	r30, r14
    40b4:	81 91       	ld	r24, Z+
    40b6:	7f 01       	movw	r14, r30
    40b8:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    40bc:	21 96       	adiw	r28, 0x01	; 1
    40be:	c8 30       	cpi	r28, 0x08	; 8
    40c0:	d1 05       	cpc	r29, r1
    40c2:	79 f7       	brne	.-34     	; 0x40a2 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    40c4:	c6 01       	movw	r24, r12
    40c6:	df 91       	pop	r29
    40c8:	cf 91       	pop	r28
    40ca:	1f 91       	pop	r17
    40cc:	0f 91       	pop	r16
    40ce:	ff 90       	pop	r15
    40d0:	ef 90       	pop	r14
    40d2:	df 90       	pop	r13
    40d4:	cf 90       	pop	r12
    40d6:	8b cf       	rjmp	.-234    	; 0x3fee <_ZN13LiquidCrystal11pulseEnableEv>

000040d8 <_ZN13LiquidCrystal4sendEhh>:
    40d8:	1f 93       	push	r17
    40da:	cf 93       	push	r28
    40dc:	df 93       	push	r29
    40de:	ec 01       	movw	r28, r24
    40e0:	16 2f       	mov	r17, r22
    40e2:	64 2f       	mov	r22, r20
    40e4:	8c 81       	ldd	r24, Y+4	; 0x04
    40e6:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    40ea:	8d 81       	ldd	r24, Y+5	; 0x05
    40ec:	8f 3f       	cpi	r24, 0xFF	; 255
    40ee:	19 f0       	breq	.+6      	; 0x40f6 <_ZN13LiquidCrystal4sendEhh+0x1e>
    40f0:	60 e0       	ldi	r22, 0x00	; 0
    40f2:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    40f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    40f8:	61 2f       	mov	r22, r17
    40fa:	84 ff       	sbrs	r24, 4
    40fc:	05 c0       	rjmp	.+10     	; 0x4108 <_ZN13LiquidCrystal4sendEhh+0x30>
    40fe:	ce 01       	movw	r24, r28
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	bc cf       	rjmp	.-136    	; 0x4080 <_ZN13LiquidCrystal10write8bitsEh>
    4108:	70 e0       	ldi	r23, 0x00	; 0
    410a:	84 e0       	ldi	r24, 0x04	; 4
    410c:	75 95       	asr	r23
    410e:	67 95       	ror	r22
    4110:	8a 95       	dec	r24
    4112:	e1 f7       	brne	.-8      	; 0x410c <_ZN13LiquidCrystal4sendEhh+0x34>
    4114:	ce 01       	movw	r24, r28
    4116:	88 df       	rcall	.-240    	; 0x4028 <_ZN13LiquidCrystal10write4bitsEh>
    4118:	61 2f       	mov	r22, r17
    411a:	ce 01       	movw	r24, r28
    411c:	df 91       	pop	r29
    411e:	cf 91       	pop	r28
    4120:	1f 91       	pop	r17
    4122:	82 cf       	rjmp	.-252    	; 0x4028 <_ZN13LiquidCrystal10write4bitsEh>

00004124 <_ZN13LiquidCrystal7commandEh>:
    4124:	40 e0       	ldi	r20, 0x00	; 0
    4126:	d8 cf       	rjmp	.-80     	; 0x40d8 <_ZN13LiquidCrystal4sendEhh>

00004128 <_ZN13LiquidCrystal5clearEv>:
    4128:	61 e0       	ldi	r22, 0x01	; 1
    412a:	fc df       	rcall	.-8      	; 0x4124 <_ZN13LiquidCrystal7commandEh>
    412c:	80 ed       	ldi	r24, 0xD0	; 208
    412e:	97 e0       	ldi	r25, 0x07	; 7
    4130:	0c 94 ca 33 	jmp	0x6794	; 0x6794 <delayMicroseconds>

00004134 <_ZN13LiquidCrystal9setCursorEhh>:
    4134:	fc 01       	movw	r30, r24
    4136:	44 30       	cpi	r20, 0x04	; 4
    4138:	08 f0       	brcs	.+2      	; 0x413c <_ZN13LiquidCrystal9setCursorEhh+0x8>
    413a:	43 e0       	ldi	r20, 0x03	; 3
    413c:	83 89       	ldd	r24, Z+19	; 0x13
    413e:	48 17       	cp	r20, r24
    4140:	10 f0       	brcs	.+4      	; 0x4146 <_ZN13LiquidCrystal9setCursorEhh+0x12>
    4142:	4f ef       	ldi	r20, 0xFF	; 255
    4144:	48 0f       	add	r20, r24
    4146:	df 01       	movw	r26, r30
    4148:	a4 0f       	add	r26, r20
    414a:	b1 1d       	adc	r27, r1
    414c:	54 96       	adiw	r26, 0x14	; 20
    414e:	9c 91       	ld	r25, X
    4150:	69 0f       	add	r22, r25
    4152:	60 68       	ori	r22, 0x80	; 128
    4154:	cf 01       	movw	r24, r30
    4156:	e6 cf       	rjmp	.-52     	; 0x4124 <_ZN13LiquidCrystal7commandEh>

00004158 <_ZN13LiquidCrystal7displayEv>:
    4158:	fc 01       	movw	r30, r24
    415a:	60 89       	ldd	r22, Z+16	; 0x10
    415c:	26 2f       	mov	r18, r22
    415e:	24 60       	ori	r18, 0x04	; 4
    4160:	20 8b       	std	Z+16, r18	; 0x10
    4162:	6c 60       	ori	r22, 0x0C	; 12
    4164:	df cf       	rjmp	.-66     	; 0x4124 <_ZN13LiquidCrystal7commandEh>

00004166 <_ZN13LiquidCrystal5beginEhhh>:
    4166:	ef 92       	push	r14
    4168:	ff 92       	push	r15
    416a:	0f 93       	push	r16
    416c:	1f 93       	push	r17
    416e:	cf 93       	push	r28
    4170:	df 93       	push	r29
    4172:	ec 01       	movw	r28, r24
    4174:	42 30       	cpi	r20, 0x02	; 2
    4176:	18 f0       	brcs	.+6      	; 0x417e <_ZN13LiquidCrystal5beginEhhh+0x18>
    4178:	8f 85       	ldd	r24, Y+15	; 0x0f
    417a:	88 60       	ori	r24, 0x08	; 8
    417c:	8f 87       	std	Y+15, r24	; 0x0f
    417e:	4b 8b       	std	Y+19, r20	; 0x13
    4180:	1c 8a       	std	Y+20, r1	; 0x14
    4182:	80 e4       	ldi	r24, 0x40	; 64
    4184:	8d 8b       	std	Y+21, r24	; 0x15
    4186:	6e 8b       	std	Y+22, r22	; 0x16
    4188:	70 e0       	ldi	r23, 0x00	; 0
    418a:	60 5c       	subi	r22, 0xC0	; 192
    418c:	7f 4f       	sbci	r23, 0xFF	; 255
    418e:	6f 8b       	std	Y+23, r22	; 0x17
    4190:	22 23       	and	r18, r18
    4192:	29 f0       	breq	.+10     	; 0x419e <_ZN13LiquidCrystal5beginEhhh+0x38>
    4194:	41 30       	cpi	r20, 0x01	; 1
    4196:	19 f4       	brne	.+6      	; 0x419e <_ZN13LiquidCrystal5beginEhhh+0x38>
    4198:	8f 85       	ldd	r24, Y+15	; 0x0f
    419a:	84 60       	ori	r24, 0x04	; 4
    419c:	8f 87       	std	Y+15, r24	; 0x0f
    419e:	61 e0       	ldi	r22, 0x01	; 1
    41a0:	8c 81       	ldd	r24, Y+4	; 0x04
    41a2:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    41a6:	8d 81       	ldd	r24, Y+5	; 0x05
    41a8:	8f 3f       	cpi	r24, 0xFF	; 255
    41aa:	19 f0       	breq	.+6      	; 0x41b2 <_ZN13LiquidCrystal5beginEhhh+0x4c>
    41ac:	61 e0       	ldi	r22, 0x01	; 1
    41ae:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    41b2:	61 e0       	ldi	r22, 0x01	; 1
    41b4:	8e 81       	ldd	r24, Y+6	; 0x06
    41b6:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    41ba:	7e 01       	movw	r14, r28
    41bc:	87 e0       	ldi	r24, 0x07	; 7
    41be:	e8 0e       	add	r14, r24
    41c0:	f1 1c       	adc	r15, r1
    41c2:	00 e0       	ldi	r16, 0x00	; 0
    41c4:	10 e0       	ldi	r17, 0x00	; 0
    41c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c8:	84 fd       	sbrc	r24, 4
    41ca:	03 c0       	rjmp	.+6      	; 0x41d2 <_ZN13LiquidCrystal5beginEhhh+0x6c>
    41cc:	84 e0       	ldi	r24, 0x04	; 4
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	02 c0       	rjmp	.+4      	; 0x41d6 <_ZN13LiquidCrystal5beginEhhh+0x70>
    41d2:	88 e0       	ldi	r24, 0x08	; 8
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	08 17       	cp	r16, r24
    41d8:	19 07       	cpc	r17, r25
    41da:	4c f4       	brge	.+18     	; 0x41ee <_ZN13LiquidCrystal5beginEhhh+0x88>
    41dc:	61 e0       	ldi	r22, 0x01	; 1
    41de:	f7 01       	movw	r30, r14
    41e0:	81 91       	ld	r24, Z+
    41e2:	7f 01       	movw	r14, r30
    41e4:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    41e8:	0f 5f       	subi	r16, 0xFF	; 255
    41ea:	1f 4f       	sbci	r17, 0xFF	; 255
    41ec:	ec cf       	rjmp	.-40     	; 0x41c6 <_ZN13LiquidCrystal5beginEhhh+0x60>
    41ee:	80 e5       	ldi	r24, 0x50	; 80
    41f0:	93 ec       	ldi	r25, 0xC3	; 195
    41f2:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    41f6:	60 e0       	ldi	r22, 0x00	; 0
    41f8:	8c 81       	ldd	r24, Y+4	; 0x04
    41fa:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    41fe:	60 e0       	ldi	r22, 0x00	; 0
    4200:	8e 81       	ldd	r24, Y+6	; 0x06
    4202:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4206:	8d 81       	ldd	r24, Y+5	; 0x05
    4208:	8f 3f       	cpi	r24, 0xFF	; 255
    420a:	19 f0       	breq	.+6      	; 0x4212 <_ZN13LiquidCrystal5beginEhhh+0xac>
    420c:	60 e0       	ldi	r22, 0x00	; 0
    420e:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4212:	6f 85       	ldd	r22, Y+15	; 0x0f
    4214:	64 fd       	sbrc	r22, 4
    4216:	19 c0       	rjmp	.+50     	; 0x424a <_ZN13LiquidCrystal5beginEhhh+0xe4>
    4218:	63 e0       	ldi	r22, 0x03	; 3
    421a:	ce 01       	movw	r24, r28
    421c:	05 df       	rcall	.-502    	; 0x4028 <_ZN13LiquidCrystal10write4bitsEh>
    421e:	84 e9       	ldi	r24, 0x94	; 148
    4220:	91 e1       	ldi	r25, 0x11	; 17
    4222:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    4226:	63 e0       	ldi	r22, 0x03	; 3
    4228:	ce 01       	movw	r24, r28
    422a:	fe de       	rcall	.-516    	; 0x4028 <_ZN13LiquidCrystal10write4bitsEh>
    422c:	84 e9       	ldi	r24, 0x94	; 148
    422e:	91 e1       	ldi	r25, 0x11	; 17
    4230:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    4234:	63 e0       	ldi	r22, 0x03	; 3
    4236:	ce 01       	movw	r24, r28
    4238:	f7 de       	rcall	.-530    	; 0x4028 <_ZN13LiquidCrystal10write4bitsEh>
    423a:	86 e9       	ldi	r24, 0x96	; 150
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    4242:	62 e0       	ldi	r22, 0x02	; 2
    4244:	ce 01       	movw	r24, r28
    4246:	f0 de       	rcall	.-544    	; 0x4028 <_ZN13LiquidCrystal10write4bitsEh>
    4248:	13 c0       	rjmp	.+38     	; 0x4270 <_ZN13LiquidCrystal5beginEhhh+0x10a>
    424a:	60 62       	ori	r22, 0x20	; 32
    424c:	ce 01       	movw	r24, r28
    424e:	6a df       	rcall	.-300    	; 0x4124 <_ZN13LiquidCrystal7commandEh>
    4250:	84 e9       	ldi	r24, 0x94	; 148
    4252:	91 e1       	ldi	r25, 0x11	; 17
    4254:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    4258:	6f 85       	ldd	r22, Y+15	; 0x0f
    425a:	60 62       	ori	r22, 0x20	; 32
    425c:	ce 01       	movw	r24, r28
    425e:	62 df       	rcall	.-316    	; 0x4124 <_ZN13LiquidCrystal7commandEh>
    4260:	86 e9       	ldi	r24, 0x96	; 150
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    4268:	6f 85       	ldd	r22, Y+15	; 0x0f
    426a:	60 62       	ori	r22, 0x20	; 32
    426c:	ce 01       	movw	r24, r28
    426e:	5a df       	rcall	.-332    	; 0x4124 <_ZN13LiquidCrystal7commandEh>
    4270:	6f 85       	ldd	r22, Y+15	; 0x0f
    4272:	60 62       	ori	r22, 0x20	; 32
    4274:	ce 01       	movw	r24, r28
    4276:	56 df       	rcall	.-340    	; 0x4124 <_ZN13LiquidCrystal7commandEh>
    4278:	84 e0       	ldi	r24, 0x04	; 4
    427a:	88 8b       	std	Y+16, r24	; 0x10
    427c:	ce 01       	movw	r24, r28
    427e:	6c df       	rcall	.-296    	; 0x4158 <_ZN13LiquidCrystal7displayEv>
    4280:	ce 01       	movw	r24, r28
    4282:	52 df       	rcall	.-348    	; 0x4128 <_ZN13LiquidCrystal5clearEv>
    4284:	82 e0       	ldi	r24, 0x02	; 2
    4286:	89 8b       	std	Y+17, r24	; 0x11
    4288:	66 e0       	ldi	r22, 0x06	; 6
    428a:	ce 01       	movw	r24, r28
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	1f 91       	pop	r17
    4292:	0f 91       	pop	r16
    4294:	ff 90       	pop	r15
    4296:	ef 90       	pop	r14
    4298:	45 cf       	rjmp	.-374    	; 0x4124 <_ZN13LiquidCrystal7commandEh>

0000429a <_ZN13LiquidCrystalC1Ehhhhhh>:
    429a:	cf 92       	push	r12
    429c:	ef 92       	push	r14
    429e:	0f 93       	push	r16
    42a0:	fc 01       	movw	r30, r24
    42a2:	13 82       	std	Z+3, r1	; 0x03
    42a4:	12 82       	std	Z+2, r1	; 0x02
    42a6:	87 ef       	ldi	r24, 0xF7	; 247
    42a8:	92 e0       	ldi	r25, 0x02	; 2
    42aa:	91 83       	std	Z+1, r25	; 0x01
    42ac:	80 83       	st	Z, r24
    42ae:	64 83       	std	Z+4, r22	; 0x04
    42b0:	8f ef       	ldi	r24, 0xFF	; 255
    42b2:	85 83       	std	Z+5, r24	; 0x05
    42b4:	46 83       	std	Z+6, r20	; 0x06
    42b6:	27 83       	std	Z+7, r18	; 0x07
    42b8:	00 87       	std	Z+8, r16	; 0x08
    42ba:	e1 86       	std	Z+9, r14	; 0x09
    42bc:	c2 86       	std	Z+10, r12	; 0x0a
    42be:	13 86       	std	Z+11, r1	; 0x0b
    42c0:	14 86       	std	Z+12, r1	; 0x0c
    42c2:	15 86       	std	Z+13, r1	; 0x0d
    42c4:	16 86       	std	Z+14, r1	; 0x0e
    42c6:	17 86       	std	Z+15, r1	; 0x0f
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	41 e0       	ldi	r20, 0x01	; 1
    42cc:	60 e1       	ldi	r22, 0x10	; 16
    42ce:	cf 01       	movw	r24, r30
    42d0:	0f 91       	pop	r16
    42d2:	ef 90       	pop	r14
    42d4:	cf 90       	pop	r12
    42d6:	47 cf       	rjmp	.-370    	; 0x4166 <_ZN13LiquidCrystal5beginEhhh>

000042d8 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    42d8:	41 e0       	ldi	r20, 0x01	; 1
    42da:	fe de       	rcall	.-516    	; 0x40d8 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	08 95       	ret

000042e2 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
	}
	if (cmdBuffer[0] != MF_ACK) {
		return STATUS_MIFARE_NACK;
	}
	return STATUS_OK;
} // End PCD_MIFARE_Transceive()
    42e2:	bc 01       	movw	r22, r24
    42e4:	6e 5f       	subi	r22, 0xFE	; 254
    42e6:	7f 4f       	sbci	r23, 0xFF	; 255
    42e8:	dc 01       	movw	r26, r24
    42ea:	ed 91       	ld	r30, X+
    42ec:	fc 91       	ld	r31, X
    42ee:	01 90       	ld	r0, Z+
    42f0:	f0 81       	ld	r31, Z
    42f2:	e0 2d       	mov	r30, r0
    42f4:	40 e0       	ldi	r20, 0x00	; 0
    42f6:	19 95       	eicall
    42f8:	91 e0       	ldi	r25, 0x01	; 1
    42fa:	81 11       	cpse	r24, r1
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	89 2f       	mov	r24, r25
    4300:	08 95       	ret

00004302 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>:
    4302:	af 92       	push	r10
    4304:	bf 92       	push	r11
    4306:	cf 92       	push	r12
    4308:	df 92       	push	r13
    430a:	ef 92       	push	r14
    430c:	ff 92       	push	r15
    430e:	0f 93       	push	r16
    4310:	1f 93       	push	r17
    4312:	cf 93       	push	r28
    4314:	df 93       	push	r29
    4316:	6c 01       	movw	r12, r24
    4318:	a4 2e       	mov	r10, r20
    431a:	79 01       	movw	r14, r18
    431c:	60 68       	ori	r22, 0x80	; 128
    431e:	b6 2e       	mov	r11, r22
    4320:	80 e5       	ldi	r24, 0x50	; 80
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4328:	60 e0       	ldi	r22, 0x00	; 0
    432a:	f6 01       	movw	r30, r12
    432c:	86 85       	ldd	r24, Z+14	; 0x0e
    432e:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4332:	aa 94       	dec	r10
    4334:	8b 2d       	mov	r24, r11
    4336:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    433a:	00 23       	and	r16, r16
    433c:	a1 f0       	breq	.+40     	; 0x4366 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x64>
    433e:	cf ef       	ldi	r28, 0xFF	; 255
    4340:	d0 e0       	ldi	r29, 0x00	; 0
    4342:	01 c0       	rjmp	.+2      	; 0x4346 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x44>
    4344:	cc 0f       	add	r28, r28
    4346:	0a 95       	dec	r16
    4348:	ea f7       	brpl	.-6      	; 0x4344 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x42>
    434a:	8b 2d       	mov	r24, r11
    434c:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    4350:	2c 2f       	mov	r18, r28
    4352:	20 95       	com	r18
    4354:	f7 01       	movw	r30, r14
    4356:	90 81       	ld	r25, Z
    4358:	92 23       	and	r25, r18
    435a:	8c 23       	and	r24, r28
    435c:	89 2b       	or	r24, r25
    435e:	f7 01       	movw	r30, r14
    4360:	80 83       	st	Z, r24
    4362:	11 e0       	ldi	r17, 0x01	; 1
    4364:	01 c0       	rjmp	.+2      	; 0x4368 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    4366:	10 e0       	ldi	r17, 0x00	; 0
    4368:	81 2f       	mov	r24, r17
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	e7 01       	movw	r28, r14
    436e:	c8 0f       	add	r28, r24
    4370:	d9 1f       	adc	r29, r25
    4372:	1a 15       	cp	r17, r10
    4374:	30 f4       	brcc	.+12     	; 0x4382 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x80>
    4376:	8b 2d       	mov	r24, r11
    4378:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    437c:	88 83       	st	Y, r24
    437e:	1f 5f       	subi	r17, 0xFF	; 255
    4380:	f3 cf       	rjmp	.-26     	; 0x4368 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    4388:	88 83       	st	Y, r24
    438a:	61 e0       	ldi	r22, 0x01	; 1
    438c:	f6 01       	movw	r30, r12
    438e:	86 85       	ldd	r24, Z+14	; 0x0e
    4390:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4394:	df 91       	pop	r29
    4396:	cf 91       	pop	r28
    4398:	1f 91       	pop	r17
    439a:	0f 91       	pop	r16
    439c:	ff 90       	pop	r15
    439e:	ef 90       	pop	r14
    43a0:	df 90       	pop	r13
    43a2:	cf 90       	pop	r12
    43a4:	bf 90       	pop	r11
    43a6:	af 90       	pop	r10
    43a8:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <_ZN8SPIClass14endTransactionEv>

000043ac <_ZN7MFRC522C1Ehh>:
    43ac:	fc 01       	movw	r30, r24
    43ae:	83 e0       	ldi	r24, 0x03	; 3
    43b0:	93 e0       	ldi	r25, 0x03	; 3
    43b2:	91 83       	std	Z+1, r25	; 0x01
    43b4:	80 83       	st	Z, r24
    43b6:	66 87       	std	Z+14, r22	; 0x0e
    43b8:	47 87       	std	Z+15, r20	; 0x0f
    43ba:	08 95       	ret

000043bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    43bc:	0f 93       	push	r16
    43be:	1f 93       	push	r17
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	ec 01       	movw	r28, r24
    43c6:	06 2f       	mov	r16, r22
    43c8:	14 2f       	mov	r17, r20
    43ca:	80 e5       	ldi	r24, 0x50	; 80
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN8SPIClass16beginTransactionE11SPISettings>
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    43d6:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    43da:	80 2f       	mov	r24, r16
    43dc:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    43e0:	81 2f       	mov	r24, r17
    43e2:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    43e6:	61 e0       	ldi	r22, 0x01	; 1
    43e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    43ea:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    43ee:	df 91       	pop	r29
    43f0:	cf 91       	pop	r28
    43f2:	1f 91       	pop	r17
    43f4:	0f 91       	pop	r16
    43f6:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <_ZN8SPIClass14endTransactionEv>

000043fa <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    43fa:	df 92       	push	r13
    43fc:	ef 92       	push	r14
    43fe:	ff 92       	push	r15
    4400:	0f 93       	push	r16
    4402:	1f 93       	push	r17
    4404:	cf 93       	push	r28
    4406:	df 93       	push	r29
    4408:	8c 01       	movw	r16, r24
    440a:	c6 2f       	mov	r28, r22
    440c:	f4 2e       	mov	r15, r20
    440e:	d2 2e       	mov	r13, r18
    4410:	e3 2e       	mov	r14, r19
    4412:	80 e5       	ldi	r24, 0x50	; 80
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN8SPIClass16beginTransactionE11SPISettings>
    441a:	60 e0       	ldi	r22, 0x00	; 0
    441c:	f8 01       	movw	r30, r16
    441e:	86 85       	ldd	r24, Z+14	; 0x0e
    4420:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4424:	8c 2f       	mov	r24, r28
    4426:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    442a:	cd 2d       	mov	r28, r13
    442c:	de 2d       	mov	r29, r14
    442e:	ce 01       	movw	r24, r28
    4430:	8f 0d       	add	r24, r15
    4432:	91 1d       	adc	r25, r1
    4434:	7c 01       	movw	r14, r24
    4436:	ec 16       	cp	r14, r28
    4438:	fd 06       	cpc	r15, r29
    443a:	21 f0       	breq	.+8      	; 0x4444 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x4a>
    443c:	89 91       	ld	r24, Y+
    443e:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    4442:	f9 cf       	rjmp	.-14     	; 0x4436 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x3c>
    4444:	61 e0       	ldi	r22, 0x01	; 1
    4446:	f8 01       	movw	r30, r16
    4448:	86 85       	ldd	r24, Z+14	; 0x0e
    444a:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    444e:	df 91       	pop	r29
    4450:	cf 91       	pop	r28
    4452:	1f 91       	pop	r17
    4454:	0f 91       	pop	r16
    4456:	ff 90       	pop	r15
    4458:	ef 90       	pop	r14
    445a:	df 90       	pop	r13
    445c:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <_ZN8SPIClass14endTransactionEv>

00004460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    4460:	1f 93       	push	r17
    4462:	cf 93       	push	r28
    4464:	df 93       	push	r29
    4466:	ec 01       	movw	r28, r24
    4468:	16 2f       	mov	r17, r22
    446a:	80 e5       	ldi	r24, 0x50	; 80
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4472:	60 e0       	ldi	r22, 0x00	; 0
    4474:	8e 85       	ldd	r24, Y+14	; 0x0e
    4476:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    447a:	81 2f       	mov	r24, r17
    447c:	80 68       	ori	r24, 0x80	; 128
    447e:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    4482:	80 e0       	ldi	r24, 0x00	; 0
    4484:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN8SPIClass8transferEh>
    4488:	18 2f       	mov	r17, r24
    448a:	61 e0       	ldi	r22, 0x01	; 1
    448c:	8e 85       	ldd	r24, Y+14	; 0x0e
    448e:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4492:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN8SPIClass14endTransactionEv>
    4496:	81 2f       	mov	r24, r17
    4498:	df 91       	pop	r29
    449a:	cf 91       	pop	r28
    449c:	1f 91       	pop	r17
    449e:	08 95       	ret

000044a0 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    44a0:	0f 93       	push	r16
    44a2:	41 11       	cpse	r20, r1
    44a4:	2e df       	rcall	.-420    	; 0x4302 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>
    44a6:	0f 91       	pop	r16
    44a8:	08 95       	ret

000044aa <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    44aa:	0f 93       	push	r16
    44ac:	1f 93       	push	r17
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	8c 01       	movw	r16, r24
    44b4:	d6 2f       	mov	r29, r22
    44b6:	c4 2f       	mov	r28, r20
    44b8:	d3 df       	rcall	.-90     	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    44ba:	48 2f       	mov	r20, r24
    44bc:	4c 2b       	or	r20, r28
    44be:	6d 2f       	mov	r22, r29
    44c0:	c8 01       	movw	r24, r16
    44c2:	df 91       	pop	r29
    44c4:	cf 91       	pop	r28
    44c6:	1f 91       	pop	r17
    44c8:	0f 91       	pop	r16
    44ca:	78 cf       	rjmp	.-272    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

000044cc <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    44cc:	0f 93       	push	r16
    44ce:	1f 93       	push	r17
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	8c 01       	movw	r16, r24
    44d6:	d6 2f       	mov	r29, r22
    44d8:	c4 2f       	mov	r28, r20
    44da:	c2 df       	rcall	.-124    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    44dc:	c0 95       	com	r28
    44de:	4c 2f       	mov	r20, r28
    44e0:	48 23       	and	r20, r24
    44e2:	6d 2f       	mov	r22, r29
    44e4:	c8 01       	movw	r24, r16
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	1f 91       	pop	r17
    44ec:	0f 91       	pop	r16
    44ee:	66 cf       	rjmp	.-308    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

000044f0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    44f0:	cf 92       	push	r12
    44f2:	df 92       	push	r13
    44f4:	ef 92       	push	r14
    44f6:	ff 92       	push	r15
    44f8:	0f 93       	push	r16
    44fa:	1f 93       	push	r17
    44fc:	cf 93       	push	r28
    44fe:	df 93       	push	r29
    4500:	ec 01       	movw	r28, r24
    4502:	6b 01       	movw	r12, r22
    4504:	14 2f       	mov	r17, r20
    4506:	79 01       	movw	r14, r18
    4508:	40 e0       	ldi	r20, 0x00	; 0
    450a:	62 e0       	ldi	r22, 0x02	; 2
    450c:	57 df       	rcall	.-338    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    450e:	44 e0       	ldi	r20, 0x04	; 4
    4510:	6a e0       	ldi	r22, 0x0A	; 10
    4512:	ce 01       	movw	r24, r28
    4514:	53 df       	rcall	.-346    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4516:	40 e8       	ldi	r20, 0x80	; 128
    4518:	64 e1       	ldi	r22, 0x14	; 20
    451a:	ce 01       	movw	r24, r28
    451c:	4f df       	rcall	.-354    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    451e:	96 01       	movw	r18, r12
    4520:	41 2f       	mov	r20, r17
    4522:	62 e1       	ldi	r22, 0x12	; 18
    4524:	ce 01       	movw	r24, r28
    4526:	69 df       	rcall	.-302    	; 0x43fa <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    4528:	43 e0       	ldi	r20, 0x03	; 3
    452a:	62 e0       	ldi	r22, 0x02	; 2
    452c:	ce 01       	movw	r24, r28
    452e:	46 df       	rcall	.-372    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4530:	08 e8       	ldi	r16, 0x88	; 136
    4532:	13 e1       	ldi	r17, 0x13	; 19
    4534:	6a e0       	ldi	r22, 0x0A	; 10
    4536:	ce 01       	movw	r24, r28
    4538:	93 df       	rcall	.-218    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    453a:	82 ff       	sbrs	r24, 2
    453c:	10 c0       	rjmp	.+32     	; 0x455e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x6e>
    453e:	40 e0       	ldi	r20, 0x00	; 0
    4540:	62 e0       	ldi	r22, 0x02	; 2
    4542:	ce 01       	movw	r24, r28
    4544:	3b df       	rcall	.-394    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4546:	64 e4       	ldi	r22, 0x44	; 68
    4548:	ce 01       	movw	r24, r28
    454a:	8a df       	rcall	.-236    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    454c:	f7 01       	movw	r30, r14
    454e:	80 83       	st	Z, r24
    4550:	62 e4       	ldi	r22, 0x42	; 66
    4552:	ce 01       	movw	r24, r28
    4554:	85 df       	rcall	.-246    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4556:	f7 01       	movw	r30, r14
    4558:	81 83       	std	Z+1, r24	; 0x01
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	04 c0       	rjmp	.+8      	; 0x4566 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x76>
    455e:	01 50       	subi	r16, 0x01	; 1
    4560:	11 09       	sbc	r17, r1
    4562:	41 f7       	brne	.-48     	; 0x4534 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x44>
    4564:	83 e0       	ldi	r24, 0x03	; 3
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	1f 91       	pop	r17
    456c:	0f 91       	pop	r16
    456e:	ff 90       	pop	r15
    4570:	ef 90       	pop	r14
    4572:	df 90       	pop	r13
    4574:	cf 90       	pop	r12
    4576:	08 95       	ret

00004578 <_ZN7MFRC5229PCD_ResetEv>:
    4578:	0f 93       	push	r16
    457a:	1f 93       	push	r17
    457c:	cf 93       	push	r28
    457e:	8c 01       	movw	r16, r24
    4580:	4f e0       	ldi	r20, 0x0F	; 15
    4582:	62 e0       	ldi	r22, 0x02	; 2
    4584:	1b df       	rcall	.-458    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4586:	c3 e0       	ldi	r28, 0x03	; 3
    4588:	62 e3       	ldi	r22, 0x32	; 50
    458a:	70 e0       	ldi	r23, 0x00	; 0
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	0e 94 91 33 	call	0x6722	; 0x6722 <delay>
    4594:	62 e0       	ldi	r22, 0x02	; 2
    4596:	c8 01       	movw	r24, r16
    4598:	63 df       	rcall	.-314    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    459a:	84 ff       	sbrs	r24, 4
    459c:	02 c0       	rjmp	.+4      	; 0x45a2 <_ZN7MFRC5229PCD_ResetEv+0x2a>
    459e:	c1 50       	subi	r28, 0x01	; 1
    45a0:	99 f7       	brne	.-26     	; 0x4588 <_ZN7MFRC5229PCD_ResetEv+0x10>
    45a2:	cf 91       	pop	r28
    45a4:	1f 91       	pop	r17
    45a6:	0f 91       	pop	r16
    45a8:	08 95       	ret

000045aa <_ZN7MFRC52213PCD_AntennaOnEv>:
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	ec 01       	movw	r28, r24
    45b0:	68 e2       	ldi	r22, 0x28	; 40
    45b2:	56 df       	rcall	.-340    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    45b4:	98 2f       	mov	r25, r24
    45b6:	93 70       	andi	r25, 0x03	; 3
    45b8:	93 30       	cpi	r25, 0x03	; 3
    45ba:	39 f0       	breq	.+14     	; 0x45ca <_ZN7MFRC52213PCD_AntennaOnEv+0x20>
    45bc:	48 2f       	mov	r20, r24
    45be:	43 60       	ori	r20, 0x03	; 3
    45c0:	68 e2       	ldi	r22, 0x28	; 40
    45c2:	ce 01       	movw	r24, r28
    45c4:	df 91       	pop	r29
    45c6:	cf 91       	pop	r28
    45c8:	f9 ce       	rjmp	.-526    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    45ca:	df 91       	pop	r29
    45cc:	cf 91       	pop	r28
    45ce:	08 95       	ret

000045d0 <_ZN7MFRC5228PCD_InitEv>:
    45d0:	cf 93       	push	r28
    45d2:	df 93       	push	r29
    45d4:	ec 01       	movw	r28, r24
    45d6:	61 e0       	ldi	r22, 0x01	; 1
    45d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    45da:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    45de:	61 e0       	ldi	r22, 0x01	; 1
    45e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    45e2:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    45e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    45e8:	8f 3f       	cpi	r24, 0xFF	; 255
    45ea:	09 f4       	brne	.+2      	; 0x45ee <_ZN7MFRC5228PCD_InitEv+0x1e>
    45ec:	47 c0       	rjmp	.+142    	; 0x467c <_ZN7MFRC5228PCD_InitEv+0xac>
    45ee:	60 e0       	ldi	r22, 0x00	; 0
    45f0:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    45f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    45f6:	0e 94 e1 35 	call	0x6bc2	; 0x6bc2 <digitalRead>
    45fa:	89 2b       	or	r24, r25
    45fc:	09 f0       	breq	.+2      	; 0x4600 <_ZN7MFRC5228PCD_InitEv+0x30>
    45fe:	3e c0       	rjmp	.+124    	; 0x467c <_ZN7MFRC5228PCD_InitEv+0xac>
    4600:	61 e0       	ldi	r22, 0x01	; 1
    4602:	8f 85       	ldd	r24, Y+15	; 0x0f
    4604:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    4608:	60 e0       	ldi	r22, 0x00	; 0
    460a:	8f 85       	ldd	r24, Y+15	; 0x0f
    460c:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4610:	82 e0       	ldi	r24, 0x02	; 2
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	0e 94 ca 33 	call	0x6794	; 0x6794 <delayMicroseconds>
    4618:	61 e0       	ldi	r22, 0x01	; 1
    461a:	8f 85       	ldd	r24, Y+15	; 0x0f
    461c:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4620:	62 e3       	ldi	r22, 0x32	; 50
    4622:	70 e0       	ldi	r23, 0x00	; 0
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	0e 94 91 33 	call	0x6722	; 0x6722 <delay>
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	64 e2       	ldi	r22, 0x24	; 36
    4630:	ce 01       	movw	r24, r28
    4632:	c4 de       	rcall	.-632    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4634:	40 e0       	ldi	r20, 0x00	; 0
    4636:	66 e2       	ldi	r22, 0x26	; 38
    4638:	ce 01       	movw	r24, r28
    463a:	c0 de       	rcall	.-640    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    463c:	46 e2       	ldi	r20, 0x26	; 38
    463e:	68 e4       	ldi	r22, 0x48	; 72
    4640:	ce 01       	movw	r24, r28
    4642:	bc de       	rcall	.-648    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4644:	40 e8       	ldi	r20, 0x80	; 128
    4646:	64 e5       	ldi	r22, 0x54	; 84
    4648:	ce 01       	movw	r24, r28
    464a:	b8 de       	rcall	.-656    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    464c:	49 ea       	ldi	r20, 0xA9	; 169
    464e:	66 e5       	ldi	r22, 0x56	; 86
    4650:	ce 01       	movw	r24, r28
    4652:	b4 de       	rcall	.-664    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4654:	43 e0       	ldi	r20, 0x03	; 3
    4656:	68 e5       	ldi	r22, 0x58	; 88
    4658:	ce 01       	movw	r24, r28
    465a:	b0 de       	rcall	.-672    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    465c:	48 ee       	ldi	r20, 0xE8	; 232
    465e:	6a e5       	ldi	r22, 0x5A	; 90
    4660:	ce 01       	movw	r24, r28
    4662:	ac de       	rcall	.-680    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4664:	40 e4       	ldi	r20, 0x40	; 64
    4666:	6a e2       	ldi	r22, 0x2A	; 42
    4668:	ce 01       	movw	r24, r28
    466a:	a8 de       	rcall	.-688    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    466c:	4d e3       	ldi	r20, 0x3D	; 61
    466e:	62 e2       	ldi	r22, 0x22	; 34
    4670:	ce 01       	movw	r24, r28
    4672:	a4 de       	rcall	.-696    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    4674:	ce 01       	movw	r24, r28
    4676:	df 91       	pop	r29
    4678:	cf 91       	pop	r28
    467a:	97 cf       	rjmp	.-210    	; 0x45aa <_ZN7MFRC52213PCD_AntennaOnEv>
    467c:	ce 01       	movw	r24, r28
    467e:	7c df       	rcall	.-264    	; 0x4578 <_ZN7MFRC5229PCD_ResetEv>
    4680:	d5 cf       	rjmp	.-86     	; 0x462c <_ZN7MFRC5228PCD_InitEv+0x5c>

00004682 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    4682:	3f 92       	push	r3
    4684:	4f 92       	push	r4
    4686:	5f 92       	push	r5
    4688:	6f 92       	push	r6
    468a:	7f 92       	push	r7
    468c:	8f 92       	push	r8
    468e:	9f 92       	push	r9
    4690:	af 92       	push	r10
    4692:	bf 92       	push	r11
    4694:	cf 92       	push	r12
    4696:	df 92       	push	r13
    4698:	ef 92       	push	r14
    469a:	ff 92       	push	r15
    469c:	0f 93       	push	r16
    469e:	1f 93       	push	r17
    46a0:	cf 93       	push	r28
    46a2:	df 93       	push	r29
    46a4:	1f 92       	push	r1
    46a6:	1f 92       	push	r1
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
    46ac:	3c 01       	movw	r6, r24
    46ae:	16 2f       	mov	r17, r22
    46b0:	94 2e       	mov	r9, r20
    46b2:	29 01       	movw	r4, r18
    46b4:	a1 14       	cp	r10, r1
    46b6:	b1 04       	cpc	r11, r1
    46b8:	19 f0       	breq	.+6      	; 0x46c0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3e>
    46ba:	f5 01       	movw	r30, r10
    46bc:	40 81       	ld	r20, Z
    46be:	01 c0       	rjmp	.+2      	; 0x46c2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x40>
    46c0:	40 e0       	ldi	r20, 0x00	; 0
    46c2:	34 2e       	mov	r3, r20
    46c4:	f0 e1       	ldi	r31, 0x10	; 16
    46c6:	8f 9e       	mul	r8, r31
    46c8:	30 0c       	add	r3, r0
    46ca:	11 24       	eor	r1, r1
    46cc:	40 e0       	ldi	r20, 0x00	; 0
    46ce:	62 e0       	ldi	r22, 0x02	; 2
    46d0:	c3 01       	movw	r24, r6
    46d2:	74 de       	rcall	.-792    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    46d4:	4f e7       	ldi	r20, 0x7F	; 127
    46d6:	68 e0       	ldi	r22, 0x08	; 8
    46d8:	c3 01       	movw	r24, r6
    46da:	70 de       	rcall	.-800    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    46dc:	40 e8       	ldi	r20, 0x80	; 128
    46de:	64 e1       	ldi	r22, 0x14	; 20
    46e0:	c3 01       	movw	r24, r6
    46e2:	6c de       	rcall	.-808    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    46e4:	92 01       	movw	r18, r4
    46e6:	40 2f       	mov	r20, r16
    46e8:	62 e1       	ldi	r22, 0x12	; 18
    46ea:	c3 01       	movw	r24, r6
    46ec:	86 de       	rcall	.-756    	; 0x43fa <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    46ee:	43 2d       	mov	r20, r3
    46f0:	6a e1       	ldi	r22, 0x1A	; 26
    46f2:	c3 01       	movw	r24, r6
    46f4:	63 de       	rcall	.-826    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    46f6:	41 2f       	mov	r20, r17
    46f8:	62 e0       	ldi	r22, 0x02	; 2
    46fa:	c3 01       	movw	r24, r6
    46fc:	5f de       	rcall	.-834    	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    46fe:	1c 30       	cpi	r17, 0x0C	; 12
    4700:	21 f4       	brne	.+8      	; 0x470a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
    4702:	40 e8       	ldi	r20, 0x80	; 128
    4704:	6a e1       	ldi	r22, 0x1A	; 26
    4706:	c3 01       	movw	r24, r6
    4708:	d0 de       	rcall	.-608    	; 0x44aa <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    470a:	00 ed       	ldi	r16, 0xD0	; 208
    470c:	17 e0       	ldi	r17, 0x07	; 7
    470e:	68 e0       	ldi	r22, 0x08	; 8
    4710:	c3 01       	movw	r24, r6
    4712:	a6 de       	rcall	.-692    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4714:	98 2f       	mov	r25, r24
    4716:	99 21       	and	r25, r9
    4718:	39 f4       	brne	.+14     	; 0x4728 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa6>
    471a:	80 fd       	sbrc	r24, 0
    471c:	03 c0       	rjmp	.+6      	; 0x4724 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa2>
    471e:	01 50       	subi	r16, 0x01	; 1
    4720:	11 09       	sbc	r17, r1
    4722:	a9 f7       	brne	.-22     	; 0x470e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x8c>
    4724:	83 e0       	ldi	r24, 0x03	; 3
    4726:	60 c0       	rjmp	.+192    	; 0x47e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    4728:	6c e0       	ldi	r22, 0x0C	; 12
    472a:	c3 01       	movw	r24, r6
    472c:	99 de       	rcall	.-718    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    472e:	18 2f       	mov	r17, r24
    4730:	83 71       	andi	r24, 0x13	; 19
    4732:	09 f0       	breq	.+2      	; 0x4736 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    4734:	56 c0       	rjmp	.+172    	; 0x47e2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x160>
    4736:	e1 14       	cp	r14, r1
    4738:	f1 04       	cpc	r15, r1
    473a:	e1 f0       	breq	.+56     	; 0x4774 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
    473c:	c1 14       	cp	r12, r1
    473e:	d1 04       	cpc	r13, r1
    4740:	c9 f0       	breq	.+50     	; 0x4774 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
    4742:	64 e1       	ldi	r22, 0x14	; 20
    4744:	c3 01       	movw	r24, r6
    4746:	8c de       	rcall	.-744    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4748:	f6 01       	movw	r30, r12
    474a:	90 81       	ld	r25, Z
    474c:	98 17       	cp	r25, r24
    474e:	08 f4       	brcc	.+2      	; 0x4752 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xd0>
    4750:	42 c0       	rjmp	.+132    	; 0x47d6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x154>
    4752:	80 83       	st	Z, r24
    4754:	08 2d       	mov	r16, r8
    4756:	97 01       	movw	r18, r14
    4758:	48 2f       	mov	r20, r24
    475a:	62 e1       	ldi	r22, 0x12	; 18
    475c:	c3 01       	movw	r24, r6
    475e:	a0 de       	rcall	.-704    	; 0x44a0 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    4760:	68 e1       	ldi	r22, 0x18	; 24
    4762:	c3 01       	movw	r24, r6
    4764:	7d de       	rcall	.-774    	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    4766:	87 70       	andi	r24, 0x07	; 7
    4768:	a1 14       	cp	r10, r1
    476a:	b1 04       	cpc	r11, r1
    476c:	21 f0       	breq	.+8      	; 0x4776 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf4>
    476e:	f5 01       	movw	r30, r10
    4770:	80 83       	st	Z, r24
    4772:	01 c0       	rjmp	.+2      	; 0x4776 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf4>
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	13 fd       	sbrc	r17, 3
    4778:	30 c0       	rjmp	.+96     	; 0x47da <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x158>
    477a:	e1 14       	cp	r14, r1
    477c:	f1 04       	cpc	r15, r1
    477e:	79 f1       	breq	.+94     	; 0x47de <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15c>
    4780:	c1 14       	cp	r12, r1
    4782:	d1 04       	cpc	r13, r1
    4784:	61 f1       	breq	.+88     	; 0x47de <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15c>
    4786:	9f 89       	ldd	r25, Y+23	; 0x17
    4788:	99 23       	and	r25, r25
    478a:	49 f1       	breq	.+82     	; 0x47de <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15c>
    478c:	f6 01       	movw	r30, r12
    478e:	40 81       	ld	r20, Z
    4790:	41 30       	cpi	r20, 0x01	; 1
    4792:	21 f4       	brne	.+8      	; 0x479c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x11a>
    4794:	84 30       	cpi	r24, 0x04	; 4
    4796:	39 f5       	brne	.+78     	; 0x47e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    4798:	8f ef       	ldi	r24, 0xFF	; 255
    479a:	26 c0       	rjmp	.+76     	; 0x47e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    479c:	42 30       	cpi	r20, 0x02	; 2
    479e:	18 f1       	brcs	.+70     	; 0x47e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    47a0:	81 11       	cpse	r24, r1
    47a2:	21 c0       	rjmp	.+66     	; 0x47e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    47a4:	42 50       	subi	r20, 0x02	; 2
    47a6:	9e 01       	movw	r18, r28
    47a8:	2f 5f       	subi	r18, 0xFF	; 255
    47aa:	3f 4f       	sbci	r19, 0xFF	; 255
    47ac:	b7 01       	movw	r22, r14
    47ae:	c3 01       	movw	r24, r6
    47b0:	9f de       	rcall	.-706    	; 0x44f0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    47b2:	81 11       	cpse	r24, r1
    47b4:	19 c0       	rjmp	.+50     	; 0x47e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    47b6:	f6 01       	movw	r30, r12
    47b8:	80 81       	ld	r24, Z
    47ba:	e8 0e       	add	r14, r24
    47bc:	f1 1c       	adc	r15, r1
    47be:	f7 01       	movw	r30, r14
    47c0:	32 97       	sbiw	r30, 0x02	; 2
    47c2:	90 81       	ld	r25, Z
    47c4:	89 81       	ldd	r24, Y+1	; 0x01
    47c6:	98 13       	cpse	r25, r24
    47c8:	0e c0       	rjmp	.+28     	; 0x47e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    47ca:	31 96       	adiw	r30, 0x01	; 1
    47cc:	90 81       	ld	r25, Z
    47ce:	8a 81       	ldd	r24, Y+2	; 0x02
    47d0:	98 13       	cpse	r25, r24
    47d2:	09 c0       	rjmp	.+18     	; 0x47e6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x164>
    47d4:	04 c0       	rjmp	.+8      	; 0x47de <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x15c>
    47d6:	84 e0       	ldi	r24, 0x04	; 4
    47d8:	07 c0       	rjmp	.+14     	; 0x47e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    47da:	82 e0       	ldi	r24, 0x02	; 2
    47dc:	05 c0       	rjmp	.+10     	; 0x47e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	03 c0       	rjmp	.+6      	; 0x47e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	01 c0       	rjmp	.+2      	; 0x47e8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x166>
    47e6:	87 e0       	ldi	r24, 0x07	; 7
    47e8:	0f 90       	pop	r0
    47ea:	0f 90       	pop	r0
    47ec:	df 91       	pop	r29
    47ee:	cf 91       	pop	r28
    47f0:	1f 91       	pop	r17
    47f2:	0f 91       	pop	r16
    47f4:	ff 90       	pop	r15
    47f6:	ef 90       	pop	r14
    47f8:	df 90       	pop	r13
    47fa:	cf 90       	pop	r12
    47fc:	bf 90       	pop	r11
    47fe:	af 90       	pop	r10
    4800:	9f 90       	pop	r9
    4802:	8f 90       	pop	r8
    4804:	7f 90       	pop	r7
    4806:	6f 90       	pop	r6
    4808:	5f 90       	pop	r5
    480a:	4f 90       	pop	r4
    480c:	3f 90       	pop	r3
    480e:	08 95       	ret

00004810 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    4810:	8f 92       	push	r8
    4812:	af 92       	push	r10
    4814:	bf 92       	push	r11
    4816:	cf 92       	push	r12
    4818:	df 92       	push	r13
    481a:	ef 92       	push	r14
    481c:	ff 92       	push	r15
    481e:	0f 93       	push	r16
    4820:	1f 93       	push	r17
    4822:	af 92       	push	r10
    4824:	8c 2c       	mov	r8, r12
    4826:	57 01       	movw	r10, r14
    4828:	68 01       	movw	r12, r16
    482a:	79 01       	movw	r14, r18
    482c:	04 2f       	mov	r16, r20
    482e:	9b 01       	movw	r18, r22
    4830:	40 e3       	ldi	r20, 0x30	; 48
    4832:	6c e0       	ldi	r22, 0x0C	; 12
    4834:	26 df       	rcall	.-436    	; 0x4682 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    4836:	0f 90       	pop	r0
    4838:	1f 91       	pop	r17
    483a:	0f 91       	pop	r16
    483c:	ff 90       	pop	r15
    483e:	ef 90       	pop	r14
    4840:	df 90       	pop	r13
    4842:	cf 90       	pop	r12
    4844:	bf 90       	pop	r11
    4846:	af 90       	pop	r10
    4848:	8f 90       	pop	r8
    484a:	08 95       	ret

0000484c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    484c:	2f 92       	push	r2
    484e:	3f 92       	push	r3
    4850:	4f 92       	push	r4
    4852:	5f 92       	push	r5
    4854:	6f 92       	push	r6
    4856:	7f 92       	push	r7
    4858:	8f 92       	push	r8
    485a:	9f 92       	push	r9
    485c:	af 92       	push	r10
    485e:	bf 92       	push	r11
    4860:	cf 92       	push	r12
    4862:	df 92       	push	r13
    4864:	ef 92       	push	r14
    4866:	ff 92       	push	r15
    4868:	0f 93       	push	r16
    486a:	1f 93       	push	r17
    486c:	cf 93       	push	r28
    486e:	df 93       	push	r29
    4870:	cd b7       	in	r28, 0x3d	; 61
    4872:	de b7       	in	r29, 0x3e	; 62
    4874:	2c 97       	sbiw	r28, 0x0c	; 12
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	cd bf       	out	0x3d, r28	; 61
    4880:	41 35       	cpi	r20, 0x51	; 81
    4882:	08 f0       	brcs	.+2      	; 0x4886 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    4884:	00 c1       	rjmp	.+512    	; 0x4a86 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x23a>
    4886:	34 2e       	mov	r3, r20
    4888:	3b 01       	movw	r6, r22
    488a:	4c 01       	movw	r8, r24
    488c:	40 e8       	ldi	r20, 0x80	; 128
    488e:	6c e1       	ldi	r22, 0x1C	; 28
    4890:	1d de       	rcall	.-966    	; 0x44cc <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    4892:	22 24       	eor	r2, r2
    4894:	23 94       	inc	r2
    4896:	32 e0       	ldi	r19, 0x02	; 2
    4898:	23 16       	cp	r2, r19
    489a:	91 f0       	breq	.+36     	; 0x48c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x74>
    489c:	83 e0       	ldi	r24, 0x03	; 3
    489e:	28 16       	cp	r2, r24
    48a0:	e1 f0       	breq	.+56     	; 0x48da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8e>
    48a2:	91 e0       	ldi	r25, 0x01	; 1
    48a4:	29 12       	cpse	r2, r25
    48a6:	f3 c0       	rjmp	.+486    	; 0x4a8e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x242>
    48a8:	83 e9       	ldi	r24, 0x93	; 147
    48aa:	89 83       	std	Y+1, r24	; 0x01
    48ac:	33 20       	and	r3, r3
    48ae:	d1 f0       	breq	.+52     	; 0x48e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x98>
    48b0:	81 e0       	ldi	r24, 0x01	; 1
    48b2:	f3 01       	movw	r30, r6
    48b4:	90 81       	ld	r25, Z
    48b6:	95 30       	cpi	r25, 0x05	; 5
    48b8:	08 f4       	brcc	.+2      	; 0x48bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
    48ba:	80 e0       	ldi	r24, 0x00	; 0
    48bc:	b1 2c       	mov	r11, r1
    48be:	17 c0       	rjmp	.+46     	; 0x48ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    48c0:	f5 e9       	ldi	r31, 0x95	; 149
    48c2:	f9 83       	std	Y+1, r31	; 0x01
    48c4:	33 20       	and	r3, r3
    48c6:	81 f0       	breq	.+32     	; 0x48e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9c>
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	f3 01       	movw	r30, r6
    48cc:	90 81       	ld	r25, Z
    48ce:	98 30       	cpi	r25, 0x08	; 8
    48d0:	08 f4       	brcc	.+2      	; 0x48d4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
    48d2:	80 e0       	ldi	r24, 0x00	; 0
    48d4:	43 e0       	ldi	r20, 0x03	; 3
    48d6:	b4 2e       	mov	r11, r20
    48d8:	0a c0       	rjmp	.+20     	; 0x48ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    48da:	87 e9       	ldi	r24, 0x97	; 151
    48dc:	89 83       	std	Y+1, r24	; 0x01
    48de:	36 e0       	ldi	r19, 0x06	; 6
    48e0:	b3 2e       	mov	r11, r19
    48e2:	04 c0       	rjmp	.+8      	; 0x48ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    48e4:	b1 2c       	mov	r11, r1
    48e6:	02 c0       	rjmp	.+4      	; 0x48ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
    48e8:	23 e0       	ldi	r18, 0x03	; 3
    48ea:	b2 2e       	mov	r11, r18
    48ec:	80 e0       	ldi	r24, 0x00	; 0
    48ee:	d3 2c       	mov	r13, r3
    48f0:	f8 e0       	ldi	r31, 0x08	; 8
    48f2:	bf 9e       	mul	r11, r31
    48f4:	d0 18       	sub	r13, r0
    48f6:	11 24       	eor	r1, r1
    48f8:	d7 fc       	sbrc	r13, 7
    48fa:	d1 2c       	mov	r13, r1
    48fc:	88 23       	and	r24, r24
    48fe:	21 f0       	breq	.+8      	; 0x4908 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbc>
    4900:	98 e8       	ldi	r25, 0x88	; 136
    4902:	9b 83       	std	Y+3, r25	; 0x03
    4904:	33 e0       	ldi	r19, 0x03	; 3
    4906:	01 c0       	rjmp	.+2      	; 0x490a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    4908:	32 e0       	ldi	r19, 0x02	; 2
    490a:	21 e0       	ldi	r18, 0x01	; 1
    490c:	9d 2d       	mov	r25, r13
    490e:	97 70       	andi	r25, 0x07	; 7
    4910:	09 f4       	brne	.+2      	; 0x4914 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc8>
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	9d 2d       	mov	r25, r13
    4916:	95 95       	asr	r25
    4918:	95 95       	asr	r25
    491a:	95 95       	asr	r25
    491c:	29 0f       	add	r18, r25
    491e:	31 f4       	brne	.+12     	; 0x492c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe0>
    4920:	88 23       	and	r24, r24
    4922:	09 f4       	brne	.+2      	; 0x4926 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xda>
    4924:	8d c0       	rjmp	.+282    	; 0x4a40 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    4926:	38 e0       	ldi	r19, 0x08	; 8
    4928:	d3 0e       	add	r13, r19
    492a:	8a c0       	rjmp	.+276    	; 0x4a40 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f4>
    492c:	81 11       	cpse	r24, r1
    492e:	02 c0       	rjmp	.+4      	; 0x4934 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe8>
    4930:	94 e0       	ldi	r25, 0x04	; 4
    4932:	01 c0       	rjmp	.+2      	; 0x4936 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    4934:	93 e0       	ldi	r25, 0x03	; 3
    4936:	29 17       	cp	r18, r25
    4938:	08 f4       	brcc	.+2      	; 0x493c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf0>
    493a:	92 2f       	mov	r25, r18
    493c:	eb 2d       	mov	r30, r11
    493e:	f0 e0       	ldi	r31, 0x00	; 0
    4940:	31 96       	adiw	r30, 0x01	; 1
    4942:	e6 0d       	add	r30, r6
    4944:	f7 1d       	adc	r31, r7
    4946:	23 2f       	mov	r18, r19
    4948:	41 91       	ld	r20, Z+
    494a:	a1 e0       	ldi	r26, 0x01	; 1
    494c:	b0 e0       	ldi	r27, 0x00	; 0
    494e:	ac 0f       	add	r26, r28
    4950:	bd 1f       	adc	r27, r29
    4952:	a2 0f       	add	r26, r18
    4954:	b1 1d       	adc	r27, r1
    4956:	4c 93       	st	X, r20
    4958:	2f 5f       	subi	r18, 0xFF	; 255
    495a:	42 2f       	mov	r20, r18
    495c:	43 1b       	sub	r20, r19
    495e:	49 17       	cp	r20, r25
    4960:	98 f3       	brcs	.-26     	; 0x4948 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfc>
    4962:	de cf       	rjmp	.-68     	; 0x4920 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd4>
    4964:	81 11       	cpse	r24, r1
    4966:	d8 c0       	rjmp	.+432    	; 0x4b18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4968:	9f e1       	ldi	r25, 0x1F	; 31
    496a:	9d 15       	cp	r25, r13
    496c:	0c f4       	brge	.+2      	; 0x4970 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x124>
    496e:	91 c0       	rjmp	.+290    	; 0x4a92 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x246>
    4970:	80 e2       	ldi	r24, 0x20	; 32
    4972:	d8 2e       	mov	r13, r24
    4974:	90 e7       	ldi	r25, 0x70	; 112
    4976:	9a 83       	std	Y+2, r25	; 0x02
    4978:	9b 81       	ldd	r25, Y+3	; 0x03
    497a:	8c 81       	ldd	r24, Y+4	; 0x04
    497c:	89 27       	eor	r24, r25
    497e:	9d 81       	ldd	r25, Y+5	; 0x05
    4980:	89 27       	eor	r24, r25
    4982:	9e 81       	ldd	r25, Y+6	; 0x06
    4984:	89 27       	eor	r24, r25
    4986:	8f 83       	std	Y+7, r24	; 0x07
    4988:	9e 01       	movw	r18, r28
    498a:	28 5f       	subi	r18, 0xF8	; 248
    498c:	3f 4f       	sbci	r19, 0xFF	; 255
    498e:	47 e0       	ldi	r20, 0x07	; 7
    4990:	be 01       	movw	r22, r28
    4992:	6f 5f       	subi	r22, 0xFF	; 255
    4994:	7f 4f       	sbci	r23, 0xFF	; 255
    4996:	c4 01       	movw	r24, r8
    4998:	ab dd       	rcall	.-1194   	; 0x44f0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    499a:	81 11       	cpse	r24, r1
    499c:	bd c0       	rjmp	.+378    	; 0x4b18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    499e:	1b 86       	std	Y+11, r1	; 0x0b
    49a0:	e3 e0       	ldi	r30, 0x03	; 3
    49a2:	ea 87       	std	Y+10, r30	; 0x0a
    49a4:	ce 01       	movw	r24, r28
    49a6:	07 96       	adiw	r24, 0x07	; 7
    49a8:	2c 01       	movw	r4, r24
    49aa:	99 e0       	ldi	r25, 0x09	; 9
    49ac:	9c 87       	std	Y+12, r25	; 0x0c
    49ae:	cb 84       	ldd	r12, Y+11	; 0x0b
    49b0:	4c 2d       	mov	r20, r12
    49b2:	42 95       	swap	r20
    49b4:	40 7f       	andi	r20, 0xF0	; 240
    49b6:	4c 0d       	add	r20, r12
    49b8:	6a e1       	ldi	r22, 0x1A	; 26
    49ba:	c4 01       	movw	r24, r8
    49bc:	ff dc       	rcall	.-1538   	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    49be:	a1 2c       	mov	r10, r1
    49c0:	ce 01       	movw	r24, r28
    49c2:	0b 96       	adiw	r24, 0x0b	; 11
    49c4:	7c 01       	movw	r14, r24
    49c6:	8e 01       	movw	r16, r28
    49c8:	06 5f       	subi	r16, 0xF6	; 246
    49ca:	1f 4f       	sbci	r17, 0xFF	; 255
    49cc:	92 01       	movw	r18, r4
    49ce:	4c 85       	ldd	r20, Y+12	; 0x0c
    49d0:	be 01       	movw	r22, r28
    49d2:	6f 5f       	subi	r22, 0xFF	; 255
    49d4:	7f 4f       	sbci	r23, 0xFF	; 255
    49d6:	c4 01       	movw	r24, r8
    49d8:	1b df       	rcall	.-458    	; 0x4810 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    49da:	82 30       	cpi	r24, 0x02	; 2
    49dc:	09 f0       	breq	.+2      	; 0x49e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    49de:	c2 cf       	rjmp	.-124    	; 0x4964 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x118>
    49e0:	6c e1       	ldi	r22, 0x1C	; 28
    49e2:	c4 01       	movw	r24, r8
    49e4:	3d dd       	rcall	.-1414   	; 0x4460 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    49e6:	85 fd       	sbrc	r24, 5
    49e8:	50 c0       	rjmp	.+160    	; 0x4a8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x23e>
    49ea:	8f 71       	andi	r24, 0x1F	; 31
    49ec:	09 f4       	brne	.+2      	; 0x49f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
    49ee:	80 e2       	ldi	r24, 0x20	; 32
    49f0:	28 2f       	mov	r18, r24
    49f2:	30 e0       	ldi	r19, 0x00	; 0
    49f4:	4d 2d       	mov	r20, r13
    49f6:	dd 0c       	add	r13, r13
    49f8:	55 0b       	sbc	r21, r21
    49fa:	42 17       	cp	r20, r18
    49fc:	53 07       	cpc	r21, r19
    49fe:	0c f0       	brlt	.+2      	; 0x4a02 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1b6>
    4a00:	46 c0       	rjmp	.+140    	; 0x4a8e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x242>
    4a02:	d8 2e       	mov	r13, r24
    4a04:	85 95       	asr	r24
    4a06:	85 95       	asr	r24
    4a08:	85 95       	asr	r24
    4a0a:	91 e0       	ldi	r25, 0x01	; 1
    4a0c:	98 0f       	add	r25, r24
    4a0e:	42 2f       	mov	r20, r18
    4a10:	47 70       	andi	r20, 0x07	; 7
    4a12:	81 e0       	ldi	r24, 0x01	; 1
    4a14:	09 f4       	brne	.+2      	; 0x4a18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1cc>
    4a16:	80 e0       	ldi	r24, 0x00	; 0
    4a18:	89 0f       	add	r24, r25
    4a1a:	e1 e0       	ldi	r30, 0x01	; 1
    4a1c:	f0 e0       	ldi	r31, 0x00	; 0
    4a1e:	ec 0f       	add	r30, r28
    4a20:	fd 1f       	adc	r31, r29
    4a22:	e8 0f       	add	r30, r24
    4a24:	f1 1d       	adc	r31, r1
    4a26:	21 50       	subi	r18, 0x01	; 1
    4a28:	31 09       	sbc	r19, r1
    4a2a:	27 70       	andi	r18, 0x07	; 7
    4a2c:	33 27       	eor	r19, r19
    4a2e:	81 e0       	ldi	r24, 0x01	; 1
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	01 c0       	rjmp	.+2      	; 0x4a36 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ea>
    4a34:	88 0f       	add	r24, r24
    4a36:	2a 95       	dec	r18
    4a38:	ea f7       	brpl	.-6      	; 0x4a34 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e8>
    4a3a:	90 81       	ld	r25, Z
    4a3c:	89 2b       	or	r24, r25
    4a3e:	80 83       	st	Z, r24
    4a40:	8f e1       	ldi	r24, 0x1F	; 31
    4a42:	8d 15       	cp	r24, r13
    4a44:	0c f4       	brge	.+2      	; 0x4a48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fc>
    4a46:	96 cf       	rjmp	.-212    	; 0x4974 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x128>
    4a48:	9d 2d       	mov	r25, r13
    4a4a:	97 70       	andi	r25, 0x07	; 7
    4a4c:	9b 87       	std	Y+11, r25	; 0x0b
    4a4e:	8d 2d       	mov	r24, r13
    4a50:	85 95       	asr	r24
    4a52:	85 95       	asr	r24
    4a54:	85 95       	asr	r24
    4a56:	8e 5f       	subi	r24, 0xFE	; 254
    4a58:	29 2f       	mov	r18, r25
    4a5a:	e0 e1       	ldi	r30, 0x10	; 16
    4a5c:	8e 9f       	mul	r24, r30
    4a5e:	20 0d       	add	r18, r0
    4a60:	11 24       	eor	r1, r1
    4a62:	2a 83       	std	Y+2, r18	; 0x02
    4a64:	21 e0       	ldi	r18, 0x01	; 1
    4a66:	91 11       	cpse	r25, r1
    4a68:	01 c0       	rjmp	.+2      	; 0x4a6c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x220>
    4a6a:	20 e0       	ldi	r18, 0x00	; 0
    4a6c:	28 0f       	add	r18, r24
    4a6e:	2c 87       	std	Y+12, r18	; 0x0c
    4a70:	44 24       	eor	r4, r4
    4a72:	43 94       	inc	r4
    4a74:	51 2c       	mov	r5, r1
    4a76:	4c 0e       	add	r4, r28
    4a78:	5d 1e       	adc	r5, r29
    4a7a:	48 0e       	add	r4, r24
    4a7c:	51 1c       	adc	r5, r1
    4a7e:	f9 e0       	ldi	r31, 0x09	; 9
    4a80:	f8 1b       	sub	r31, r24
    4a82:	fa 87       	std	Y+10, r31	; 0x0a
    4a84:	94 cf       	rjmp	.-216    	; 0x49ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x162>
    4a86:	86 e0       	ldi	r24, 0x06	; 6
    4a88:	47 c0       	rjmp	.+142    	; 0x4b18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4a8a:	82 e0       	ldi	r24, 0x02	; 2
    4a8c:	45 c0       	rjmp	.+138    	; 0x4b18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4a8e:	85 e0       	ldi	r24, 0x05	; 5
    4a90:	43 c0       	rjmp	.+134    	; 0x4b18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4a92:	8b 81       	ldd	r24, Y+3	; 0x03
    4a94:	88 38       	cpi	r24, 0x88	; 136
    4a96:	e9 f1       	breq	.+122    	; 0x4b12 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c6>
    4a98:	82 e0       	ldi	r24, 0x02	; 2
    4a9a:	94 e0       	ldi	r25, 0x04	; 4
    4a9c:	eb 2d       	mov	r30, r11
    4a9e:	f0 e0       	ldi	r31, 0x00	; 0
    4aa0:	31 96       	adiw	r30, 0x01	; 1
    4aa2:	e6 0d       	add	r30, r6
    4aa4:	f7 1d       	adc	r31, r7
    4aa6:	98 0f       	add	r25, r24
    4aa8:	a1 e0       	ldi	r26, 0x01	; 1
    4aaa:	b0 e0       	ldi	r27, 0x00	; 0
    4aac:	ac 0f       	add	r26, r28
    4aae:	bd 1f       	adc	r27, r29
    4ab0:	a8 0f       	add	r26, r24
    4ab2:	b1 1d       	adc	r27, r1
    4ab4:	2c 91       	ld	r18, X
    4ab6:	21 93       	st	Z+, r18
    4ab8:	8f 5f       	subi	r24, 0xFF	; 255
    4aba:	98 13       	cpse	r25, r24
    4abc:	f5 cf       	rjmp	.-22     	; 0x4aa8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x25c>
    4abe:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ac0:	83 30       	cpi	r24, 0x03	; 3
    4ac2:	19 f5       	brne	.+70     	; 0x4b0a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2be>
    4ac4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ac6:	81 11       	cpse	r24, r1
    4ac8:	20 c0       	rjmp	.+64     	; 0x4b0a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2be>
    4aca:	9e 01       	movw	r18, r28
    4acc:	2d 5f       	subi	r18, 0xFD	; 253
    4ace:	3f 4f       	sbci	r19, 0xFF	; 255
    4ad0:	41 e0       	ldi	r20, 0x01	; 1
    4ad2:	b2 01       	movw	r22, r4
    4ad4:	c4 01       	movw	r24, r8
    4ad6:	0c dd       	rcall	.-1512   	; 0x44f0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    4ad8:	81 11       	cpse	r24, r1
    4ada:	1e c0       	rjmp	.+60     	; 0x4b18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4adc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ade:	f2 01       	movw	r30, r4
    4ae0:	81 81       	ldd	r24, Z+1	; 0x01
    4ae2:	98 13       	cpse	r25, r24
    4ae4:	14 c0       	rjmp	.+40     	; 0x4b0e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c2>
    4ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae8:	82 81       	ldd	r24, Z+2	; 0x02
    4aea:	98 13       	cpse	r25, r24
    4aec:	10 c0       	rjmp	.+32     	; 0x4b0e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c2>
    4aee:	80 81       	ld	r24, Z
    4af0:	82 ff       	sbrs	r24, 2
    4af2:	02 c0       	rjmp	.+4      	; 0x4af8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2ac>
    4af4:	23 94       	inc	r2
    4af6:	cf ce       	rjmp	.-610    	; 0x4896 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4a>
    4af8:	f3 01       	movw	r30, r6
    4afa:	83 87       	std	Z+11, r24	; 0x0b
    4afc:	82 2d       	mov	r24, r2
    4afe:	88 0f       	add	r24, r24
    4b00:	82 0d       	add	r24, r2
    4b02:	8f 5f       	subi	r24, 0xFF	; 255
    4b04:	80 83       	st	Z, r24
    4b06:	80 e0       	ldi	r24, 0x00	; 0
    4b08:	07 c0       	rjmp	.+14     	; 0x4b18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	05 c0       	rjmp	.+10     	; 0x4b18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4b0e:	87 e0       	ldi	r24, 0x07	; 7
    4b10:	03 c0       	rjmp	.+6      	; 0x4b18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    4b12:	83 e0       	ldi	r24, 0x03	; 3
    4b14:	93 e0       	ldi	r25, 0x03	; 3
    4b16:	c2 cf       	rjmp	.-124    	; 0x4a9c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x250>
    4b18:	2c 96       	adiw	r28, 0x0c	; 12
    4b1a:	0f b6       	in	r0, 0x3f	; 63
    4b1c:	f8 94       	cli
    4b1e:	de bf       	out	0x3e, r29	; 62
    4b20:	0f be       	out	0x3f, r0	; 63
    4b22:	cd bf       	out	0x3d, r28	; 61
    4b24:	df 91       	pop	r29
    4b26:	cf 91       	pop	r28
    4b28:	1f 91       	pop	r17
    4b2a:	0f 91       	pop	r16
    4b2c:	ff 90       	pop	r15
    4b2e:	ef 90       	pop	r14
    4b30:	df 90       	pop	r13
    4b32:	cf 90       	pop	r12
    4b34:	bf 90       	pop	r11
    4b36:	af 90       	pop	r10
    4b38:	9f 90       	pop	r9
    4b3a:	8f 90       	pop	r8
    4b3c:	7f 90       	pop	r7
    4b3e:	6f 90       	pop	r6
    4b40:	5f 90       	pop	r5
    4b42:	4f 90       	pop	r4
    4b44:	3f 90       	pop	r3
    4b46:	2f 90       	pop	r2
    4b48:	08 95       	ret

00004b4a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
MFRC522::StatusCode MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
												byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
												byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
											) {
    4b4a:	4f 92       	push	r4
    4b4c:	5f 92       	push	r5
    4b4e:	6f 92       	push	r6
    4b50:	7f 92       	push	r7
    4b52:	8f 92       	push	r8
    4b54:	9f 92       	push	r9
    4b56:	af 92       	push	r10
    4b58:	cf 92       	push	r12
    4b5a:	ef 92       	push	r14
    4b5c:	ff 92       	push	r15
    4b5e:	0f 93       	push	r16
    4b60:	1f 93       	push	r17
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	1f 92       	push	r1
    4b68:	1f 92       	push	r1
    4b6a:	cd b7       	in	r28, 0x3d	; 61
    4b6c:	de b7       	in	r29, 0x3e	; 62
    4b6e:	6a 83       	std	Y+2, r22	; 0x02
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
    4b70:	41 15       	cp	r20, r1
    4b72:	51 05       	cpc	r21, r1
    4b74:	29 f1       	breq	.+74     	; 0x4bc0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    4b76:	f9 01       	movw	r30, r18
    4b78:	60 81       	ld	r22, Z
    4b7a:	62 30       	cpi	r22, 0x02	; 2
    4b7c:	08 f1       	brcs	.+66     	; 0x4bc0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x76>
    4b7e:	49 01       	movw	r8, r18
    4b80:	2a 01       	movw	r4, r20
    4b82:	3c 01       	movw	r6, r24
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
    4b84:	40 e8       	ldi	r20, 0x80	; 128
    4b86:	6c e1       	ldi	r22, 0x1C	; 28
    4b88:	a1 dc       	rcall	.-1726   	; 0x44cc <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
	validBits = 7;									// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
    4b8a:	87 e0       	ldi	r24, 0x07	; 7
    4b8c:	89 83       	std	Y+1, r24	; 0x01
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
    4b8e:	a1 2c       	mov	r10, r1
    4b90:	c1 2c       	mov	r12, r1
    4b92:	ce 01       	movw	r24, r28
    4b94:	01 96       	adiw	r24, 0x01	; 1
    4b96:	7c 01       	movw	r14, r24
    4b98:	84 01       	movw	r16, r8
    4b9a:	92 01       	movw	r18, r4
    4b9c:	41 e0       	ldi	r20, 0x01	; 1
    4b9e:	be 01       	movw	r22, r28
    4ba0:	6e 5f       	subi	r22, 0xFE	; 254
    4ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba4:	c3 01       	movw	r24, r6
    4ba6:	34 de       	rcall	.-920    	; 0x4810 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
    4ba8:	81 11       	cpse	r24, r1
    4baa:	0d c0       	rjmp	.+26     	; 0x4bc6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
    4bac:	f4 01       	movw	r30, r8
    4bae:	80 81       	ld	r24, Z
    4bb0:	82 30       	cpi	r24, 0x02	; 2
    4bb2:	41 f4       	brne	.+16     	; 0x4bc4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7a>
											) {
	byte validBits;
	MFRC522::StatusCode status;
	
	if (bufferATQA == nullptr || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	99 81       	ldd	r25, Y+1	; 0x01
    4bb8:	91 11       	cpse	r25, r1
    4bba:	05 c0       	rjmp	.+10     	; 0x4bc6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	03 c0       	rjmp	.+6      	; 0x4bc6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    4bc0:	84 e0       	ldi	r24, 0x04	; 4
    4bc2:	01 c0       	rjmp	.+2      	; 0x4bc6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
    4bc6:	0f 90       	pop	r0
    4bc8:	0f 90       	pop	r0
    4bca:	df 91       	pop	r29
    4bcc:	cf 91       	pop	r28
    4bce:	1f 91       	pop	r17
    4bd0:	0f 91       	pop	r16
    4bd2:	ff 90       	pop	r15
    4bd4:	ef 90       	pop	r14
    4bd6:	cf 90       	pop	r12
    4bd8:	af 90       	pop	r10
    4bda:	9f 90       	pop	r9
    4bdc:	8f 90       	pop	r8
    4bde:	7f 90       	pop	r7
    4be0:	6f 90       	pop	r6
    4be2:	5f 90       	pop	r5
    4be4:	4f 90       	pop	r4
    4be6:	08 95       	ret

00004be8 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
MFRC522::StatusCode MFRC522::PICC_RequestA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
											byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
										) {
    4be8:	9a 01       	movw	r18, r20
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
    4bea:	ab 01       	movw	r20, r22
    4bec:	66 e2       	ldi	r22, 0x26	; 38
    4bee:	ad cf       	rjmp	.-166    	; 0x4b4a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

00004bf0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    4bf0:	0f 93       	push	r16
    4bf2:	1f 93       	push	r17
    4bf4:	cf 93       	push	r28
    4bf6:	df 93       	push	r29
    4bf8:	00 d0       	rcall	.+0      	; 0x4bfa <_ZN7MFRC52221PICC_IsNewCardPresentEv+0xa>
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	8c 01       	movw	r16, r24
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    4c00:	82 e0       	ldi	r24, 0x02	; 2
    4c02:	8b 83       	std	Y+3, r24	; 0x03

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
    4c04:	40 e0       	ldi	r20, 0x00	; 0
    4c06:	64 e2       	ldi	r22, 0x24	; 36
    4c08:	c8 01       	movw	r24, r16
    4c0a:	d8 db       	rcall	.-2128   	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
    4c0c:	40 e0       	ldi	r20, 0x00	; 0
    4c0e:	66 e2       	ldi	r22, 0x26	; 38
    4c10:	c8 01       	movw	r24, r16
    4c12:	d4 db       	rcall	.-2136   	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
    4c14:	46 e2       	ldi	r20, 0x26	; 38
    4c16:	68 e4       	ldi	r22, 0x48	; 72
    4c18:	c8 01       	movw	r24, r16
    4c1a:	d0 db       	rcall	.-2144   	; 0x43bc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    4c1c:	ae 01       	movw	r20, r28
    4c1e:	4d 5f       	subi	r20, 0xFD	; 253
    4c20:	5f 4f       	sbci	r21, 0xFF	; 255
    4c22:	be 01       	movw	r22, r28
    4c24:	6f 5f       	subi	r22, 0xFF	; 255
    4c26:	7f 4f       	sbci	r23, 0xFF	; 255
    4c28:	c8 01       	movw	r24, r16
    4c2a:	de df       	rcall	.-68     	; 0x4be8 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    4c2c:	98 2f       	mov	r25, r24
	return (result == STATUS_OK || result == STATUS_COLLISION);
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	99 23       	and	r25, r25
    4c32:	19 f0       	breq	.+6      	; 0x4c3a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4a>
    4c34:	92 30       	cpi	r25, 0x02	; 2
    4c36:	09 f0       	breq	.+2      	; 0x4c3a <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x4a>
    4c38:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    4c3a:	0f 90       	pop	r0
    4c3c:	0f 90       	pop	r0
    4c3e:	0f 90       	pop	r0
    4c40:	df 91       	pop	r29
    4c42:	cf 91       	pop	r28
    4c44:	1f 91       	pop	r17
    4c46:	0f 91       	pop	r16
    4c48:	08 95       	ret

00004c4a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
    4c4a:	cf 92       	push	r12
    4c4c:	df 92       	push	r13
    4c4e:	ef 92       	push	r14
    4c50:	ff 92       	push	r15
    4c52:	0f 93       	push	r16
    4c54:	1f 93       	push	r17
    4c56:	cf 93       	push	r28
    4c58:	df 93       	push	r29
    4c5a:	7b 01       	movw	r14, r22
    4c5c:	6a 01       	movw	r12, r20
  if( Channel[timer] < 0 )
    4c5e:	08 2f       	mov	r16, r24
    4c60:	10 e0       	ldi	r17, 0x00	; 0
    4c62:	e8 01       	movw	r28, r16
    4c64:	cc 5c       	subi	r28, 0xCC	; 204
    4c66:	db 4f       	sbci	r29, 0xFB	; 251
    4c68:	88 81       	ld	r24, Y
    4c6a:	87 ff       	sbrs	r24, 7
    4c6c:	04 c0       	rjmp	.+8      	; 0x4c76 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
    4c6e:	fb 01       	movw	r30, r22
    4c70:	11 82       	std	Z+1, r1	; 0x01
    4c72:	10 82       	st	Z, r1
    4c74:	24 c0       	rjmp	.+72     	; 0x4cbe <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
    4c76:	8c e0       	ldi	r24, 0x0C	; 12
    4c78:	80 9f       	mul	r24, r16
    4c7a:	90 01       	movw	r18, r0
    4c7c:	81 9f       	mul	r24, r17
    4c7e:	30 0d       	add	r19, r0
    4c80:	11 24       	eor	r1, r1
    4c82:	88 81       	ld	r24, Y
    4c84:	a9 01       	movw	r20, r18
    4c86:	48 0f       	add	r20, r24
    4c88:	51 1d       	adc	r21, r1
    4c8a:	87 fd       	sbrc	r24, 7
    4c8c:	5a 95       	dec	r21
    4c8e:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <ServoCount>
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	48 17       	cp	r20, r24
    4c96:	59 07       	cpc	r21, r25
    4c98:	94 f4       	brge	.+36     	; 0x4cbe <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    4c9a:	88 81       	ld	r24, Y
    4c9c:	a9 01       	movw	r20, r18
    4c9e:	48 0f       	add	r20, r24
    4ca0:	51 1d       	adc	r21, r1
    4ca2:	87 fd       	sbrc	r24, 7
    4ca4:	5a 95       	dec	r21
    4ca6:	ca 01       	movw	r24, r20
    4ca8:	fa 01       	movw	r30, r20
    4caa:	ee 0f       	add	r30, r30
    4cac:	ff 1f       	adc	r31, r31
    4cae:	8e 0f       	add	r24, r30
    4cb0:	9f 1f       	adc	r25, r31
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	e8 5c       	subi	r30, 0xC8	; 200
    4cb6:	fb 4f       	sbci	r31, 0xFB	; 251
    4cb8:	80 81       	ld	r24, Z
    4cba:	86 fd       	sbrc	r24, 6
    4cbc:	19 c0       	rjmp	.+50     	; 0x4cf0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xa6>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
    4cbe:	88 81       	ld	r24, Y
    4cc0:	8f 5f       	subi	r24, 0xFF	; 255
    4cc2:	88 83       	st	Y, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    4cc4:	8c e0       	ldi	r24, 0x0C	; 12
    4cc6:	80 9f       	mul	r24, r16
    4cc8:	90 01       	movw	r18, r0
    4cca:	81 9f       	mul	r24, r17
    4ccc:	30 0d       	add	r19, r0
    4cce:	11 24       	eor	r1, r1
    4cd0:	88 81       	ld	r24, Y
    4cd2:	a9 01       	movw	r20, r18
    4cd4:	48 0f       	add	r20, r24
    4cd6:	51 1d       	adc	r21, r1
    4cd8:	87 fd       	sbrc	r24, 7
    4cda:	5a 95       	dec	r21
    4cdc:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <ServoCount>
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	48 17       	cp	r20, r24
    4ce4:	59 07       	cpc	r21, r25
    4ce6:	bc f4       	brge	.+46     	; 0x4d16 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
    4ce8:	88 81       	ld	r24, Y
    4cea:	8c 30       	cpi	r24, 0x0C	; 12
    4cec:	44 f1       	brlt	.+80     	; 0x4d3e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xf4>
    4cee:	13 c0       	rjmp	.+38     	; 0x4d16 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
    4cf0:	88 81       	ld	r24, Y
    4cf2:	28 0f       	add	r18, r24
    4cf4:	31 1d       	adc	r19, r1
    4cf6:	87 fd       	sbrc	r24, 7
    4cf8:	3a 95       	dec	r19
    4cfa:	f9 01       	movw	r30, r18
    4cfc:	ee 0f       	add	r30, r30
    4cfe:	ff 1f       	adc	r31, r31
    4d00:	2e 0f       	add	r18, r30
    4d02:	3f 1f       	adc	r19, r31
    4d04:	f9 01       	movw	r30, r18
    4d06:	e8 5c       	subi	r30, 0xC8	; 200
    4d08:	fb 4f       	sbci	r31, 0xFB	; 251
    4d0a:	80 81       	ld	r24, Z
    4d0c:	60 e0       	ldi	r22, 0x00	; 0
    4d0e:	8f 73       	andi	r24, 0x3F	; 63
    4d10:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    4d14:	d4 cf       	rjmp	.-88     	; 0x4cbe <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x74>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
    4d16:	f7 01       	movw	r30, r14
    4d18:	80 81       	ld	r24, Z
    4d1a:	91 81       	ldd	r25, Z+1	; 0x01
    4d1c:	04 96       	adiw	r24, 0x04	; 4
    4d1e:	80 34       	cpi	r24, 0x40	; 64
    4d20:	9c 49       	sbci	r25, 0x9C	; 156
    4d22:	18 f4       	brcc	.+6      	; 0x4d2a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe0>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    4d24:	80 e4       	ldi	r24, 0x40	; 64
    4d26:	9c e9       	ldi	r25, 0x9C	; 156
    4d28:	04 c0       	rjmp	.+8      	; 0x4d32 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xe8>
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    4d2a:	f7 01       	movw	r30, r14
    4d2c:	80 81       	ld	r24, Z
    4d2e:	91 81       	ldd	r25, Z+1	; 0x01
    4d30:	04 96       	adiw	r24, 0x04	; 4
    4d32:	f6 01       	movw	r30, r12
    4d34:	91 83       	std	Z+1, r25	; 0x01
    4d36:	80 83       	st	Z, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    4d38:	8f ef       	ldi	r24, 0xFF	; 255
    4d3a:	88 83       	st	Y, r24
  }
}
    4d3c:	45 c0       	rjmp	.+138    	; 0x4dc8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    4d3e:	f7 01       	movw	r30, r14
    4d40:	40 81       	ld	r20, Z
    4d42:	51 81       	ldd	r21, Z+1	; 0x01
    4d44:	88 81       	ld	r24, Y
    4d46:	b9 01       	movw	r22, r18
    4d48:	68 0f       	add	r22, r24
    4d4a:	71 1d       	adc	r23, r1
    4d4c:	87 fd       	sbrc	r24, 7
    4d4e:	7a 95       	dec	r23
    4d50:	cb 01       	movw	r24, r22
    4d52:	fb 01       	movw	r30, r22
    4d54:	ee 0f       	add	r30, r30
    4d56:	ff 1f       	adc	r31, r31
    4d58:	8e 0f       	add	r24, r30
    4d5a:	9f 1f       	adc	r25, r31
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	e8 5c       	subi	r30, 0xC8	; 200
    4d60:	fb 4f       	sbci	r31, 0xFB	; 251
    4d62:	81 81       	ldd	r24, Z+1	; 0x01
    4d64:	92 81       	ldd	r25, Z+2	; 0x02
    4d66:	84 0f       	add	r24, r20
    4d68:	95 1f       	adc	r25, r21
    4d6a:	f6 01       	movw	r30, r12
    4d6c:	91 83       	std	Z+1, r25	; 0x01
    4d6e:	80 83       	st	Z, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    4d70:	88 81       	ld	r24, Y
    4d72:	a9 01       	movw	r20, r18
    4d74:	48 0f       	add	r20, r24
    4d76:	51 1d       	adc	r21, r1
    4d78:	87 fd       	sbrc	r24, 7
    4d7a:	5a 95       	dec	r21
    4d7c:	ca 01       	movw	r24, r20
    4d7e:	fa 01       	movw	r30, r20
    4d80:	ee 0f       	add	r30, r30
    4d82:	ff 1f       	adc	r31, r31
    4d84:	8e 0f       	add	r24, r30
    4d86:	9f 1f       	adc	r25, r31
    4d88:	fc 01       	movw	r30, r24
    4d8a:	e8 5c       	subi	r30, 0xC8	; 200
    4d8c:	fb 4f       	sbci	r31, 0xFB	; 251
    4d8e:	80 81       	ld	r24, Z
    4d90:	86 ff       	sbrs	r24, 6
    4d92:	1a c0       	rjmp	.+52     	; 0x4dc8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x17e>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
    4d94:	88 81       	ld	r24, Y
    4d96:	28 0f       	add	r18, r24
    4d98:	31 1d       	adc	r19, r1
    4d9a:	87 fd       	sbrc	r24, 7
    4d9c:	3a 95       	dec	r19
    4d9e:	f9 01       	movw	r30, r18
    4da0:	ee 0f       	add	r30, r30
    4da2:	ff 1f       	adc	r31, r31
    4da4:	2e 0f       	add	r18, r30
    4da6:	3f 1f       	adc	r19, r31
    4da8:	f9 01       	movw	r30, r18
    4daa:	e8 5c       	subi	r30, 0xC8	; 200
    4dac:	fb 4f       	sbci	r31, 0xFB	; 251
    4dae:	80 81       	ld	r24, Z
    4db0:	61 e0       	ldi	r22, 0x01	; 1
    4db2:	8f 73       	andi	r24, 0x3F	; 63
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
    4db4:	df 91       	pop	r29
    4db6:	cf 91       	pop	r28
    4db8:	1f 91       	pop	r17
    4dba:	0f 91       	pop	r16
    4dbc:	ff 90       	pop	r15
    4dbe:	ef 90       	pop	r14
    4dc0:	df 90       	pop	r13
    4dc2:	cf 90       	pop	r12

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high
    4dc4:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <digitalWrite>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
    4dc8:	df 91       	pop	r29
    4dca:	cf 91       	pop	r28
    4dcc:	1f 91       	pop	r17
    4dce:	0f 91       	pop	r16
    4dd0:	ff 90       	pop	r15
    4dd2:	ef 90       	pop	r14
    4dd4:	df 90       	pop	r13
    4dd6:	cf 90       	pop	r12
    4dd8:	08 95       	ret

00004dda <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
    4dda:	1f 92       	push	r1
    4ddc:	0f 92       	push	r0
    4dde:	0f b6       	in	r0, 0x3f	; 63
    4de0:	0f 92       	push	r0
    4de2:	11 24       	eor	r1, r1
    4de4:	0b b6       	in	r0, 0x3b	; 59
    4de6:	0f 92       	push	r0
    4de8:	2f 93       	push	r18
    4dea:	3f 93       	push	r19
    4dec:	4f 93       	push	r20
    4dee:	5f 93       	push	r21
    4df0:	6f 93       	push	r22
    4df2:	7f 93       	push	r23
    4df4:	8f 93       	push	r24
    4df6:	9f 93       	push	r25
    4df8:	af 93       	push	r26
    4dfa:	bf 93       	push	r27
    4dfc:	ef 93       	push	r30
    4dfe:	ff 93       	push	r31
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
    4e00:	48 e8       	ldi	r20, 0x88	; 136
    4e02:	50 e0       	ldi	r21, 0x00	; 0
    4e04:	64 e8       	ldi	r22, 0x84	; 132
    4e06:	70 e0       	ldi	r23, 0x00	; 0
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	1f df       	rcall	.-450    	; 0x4c4a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    4e0c:	ff 91       	pop	r31
    4e0e:	ef 91       	pop	r30
    4e10:	bf 91       	pop	r27
    4e12:	af 91       	pop	r26
    4e14:	9f 91       	pop	r25
    4e16:	8f 91       	pop	r24
    4e18:	7f 91       	pop	r23
    4e1a:	6f 91       	pop	r22
    4e1c:	5f 91       	pop	r21
    4e1e:	4f 91       	pop	r20
    4e20:	3f 91       	pop	r19
    4e22:	2f 91       	pop	r18
    4e24:	0f 90       	pop	r0
    4e26:	0b be       	out	0x3b, r0	; 59
    4e28:	0f 90       	pop	r0
    4e2a:	0f be       	out	0x3f, r0	; 63
    4e2c:	0f 90       	pop	r0
    4e2e:	1f 90       	pop	r1
    4e30:	18 95       	reti

00004e32 <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect)
{
    4e32:	1f 92       	push	r1
    4e34:	0f 92       	push	r0
    4e36:	0f b6       	in	r0, 0x3f	; 63
    4e38:	0f 92       	push	r0
    4e3a:	11 24       	eor	r1, r1
    4e3c:	0b b6       	in	r0, 0x3b	; 59
    4e3e:	0f 92       	push	r0
    4e40:	2f 93       	push	r18
    4e42:	3f 93       	push	r19
    4e44:	4f 93       	push	r20
    4e46:	5f 93       	push	r21
    4e48:	6f 93       	push	r22
    4e4a:	7f 93       	push	r23
    4e4c:	8f 93       	push	r24
    4e4e:	9f 93       	push	r25
    4e50:	af 93       	push	r26
    4e52:	bf 93       	push	r27
    4e54:	ef 93       	push	r30
    4e56:	ff 93       	push	r31
  handle_interrupts(_timer3, &TCNT3, &OCR3A);
    4e58:	48 e9       	ldi	r20, 0x98	; 152
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	64 e9       	ldi	r22, 0x94	; 148
    4e5e:	70 e0       	ldi	r23, 0x00	; 0
    4e60:	82 e0       	ldi	r24, 0x02	; 2
    4e62:	f3 de       	rcall	.-538    	; 0x4c4a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    4e64:	ff 91       	pop	r31
    4e66:	ef 91       	pop	r30
    4e68:	bf 91       	pop	r27
    4e6a:	af 91       	pop	r26
    4e6c:	9f 91       	pop	r25
    4e6e:	8f 91       	pop	r24
    4e70:	7f 91       	pop	r23
    4e72:	6f 91       	pop	r22
    4e74:	5f 91       	pop	r21
    4e76:	4f 91       	pop	r20
    4e78:	3f 91       	pop	r19
    4e7a:	2f 91       	pop	r18
    4e7c:	0f 90       	pop	r0
    4e7e:	0b be       	out	0x3b, r0	; 59
    4e80:	0f 90       	pop	r0
    4e82:	0f be       	out	0x3f, r0	; 63
    4e84:	0f 90       	pop	r0
    4e86:	1f 90       	pop	r1
    4e88:	18 95       	reti

00004e8a <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect)
{
    4e8a:	1f 92       	push	r1
    4e8c:	0f 92       	push	r0
    4e8e:	0f b6       	in	r0, 0x3f	; 63
    4e90:	0f 92       	push	r0
    4e92:	11 24       	eor	r1, r1
    4e94:	0b b6       	in	r0, 0x3b	; 59
    4e96:	0f 92       	push	r0
    4e98:	2f 93       	push	r18
    4e9a:	3f 93       	push	r19
    4e9c:	4f 93       	push	r20
    4e9e:	5f 93       	push	r21
    4ea0:	6f 93       	push	r22
    4ea2:	7f 93       	push	r23
    4ea4:	8f 93       	push	r24
    4ea6:	9f 93       	push	r25
    4ea8:	af 93       	push	r26
    4eaa:	bf 93       	push	r27
    4eac:	ef 93       	push	r30
    4eae:	ff 93       	push	r31
  handle_interrupts(_timer4, &TCNT4, &OCR4A);
    4eb0:	48 ea       	ldi	r20, 0xA8	; 168
    4eb2:	50 e0       	ldi	r21, 0x00	; 0
    4eb4:	64 ea       	ldi	r22, 0xA4	; 164
    4eb6:	70 e0       	ldi	r23, 0x00	; 0
    4eb8:	83 e0       	ldi	r24, 0x03	; 3
    4eba:	c7 de       	rcall	.-626    	; 0x4c4a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    4ebc:	ff 91       	pop	r31
    4ebe:	ef 91       	pop	r30
    4ec0:	bf 91       	pop	r27
    4ec2:	af 91       	pop	r26
    4ec4:	9f 91       	pop	r25
    4ec6:	8f 91       	pop	r24
    4ec8:	7f 91       	pop	r23
    4eca:	6f 91       	pop	r22
    4ecc:	5f 91       	pop	r21
    4ece:	4f 91       	pop	r20
    4ed0:	3f 91       	pop	r19
    4ed2:	2f 91       	pop	r18
    4ed4:	0f 90       	pop	r0
    4ed6:	0b be       	out	0x3b, r0	; 59
    4ed8:	0f 90       	pop	r0
    4eda:	0f be       	out	0x3f, r0	; 63
    4edc:	0f 90       	pop	r0
    4ede:	1f 90       	pop	r1
    4ee0:	18 95       	reti

00004ee2 <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect)
{
    4ee2:	1f 92       	push	r1
    4ee4:	0f 92       	push	r0
    4ee6:	0f b6       	in	r0, 0x3f	; 63
    4ee8:	0f 92       	push	r0
    4eea:	11 24       	eor	r1, r1
    4eec:	0b b6       	in	r0, 0x3b	; 59
    4eee:	0f 92       	push	r0
    4ef0:	2f 93       	push	r18
    4ef2:	3f 93       	push	r19
    4ef4:	4f 93       	push	r20
    4ef6:	5f 93       	push	r21
    4ef8:	6f 93       	push	r22
    4efa:	7f 93       	push	r23
    4efc:	8f 93       	push	r24
    4efe:	9f 93       	push	r25
    4f00:	af 93       	push	r26
    4f02:	bf 93       	push	r27
    4f04:	ef 93       	push	r30
    4f06:	ff 93       	push	r31
  handle_interrupts(_timer5, &TCNT5, &OCR5A);
    4f08:	48 e2       	ldi	r20, 0x28	; 40
    4f0a:	51 e0       	ldi	r21, 0x01	; 1
    4f0c:	64 e2       	ldi	r22, 0x24	; 36
    4f0e:	71 e0       	ldi	r23, 0x01	; 1
    4f10:	80 e0       	ldi	r24, 0x00	; 0
    4f12:	9b de       	rcall	.-714    	; 0x4c4a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
}
    4f14:	ff 91       	pop	r31
    4f16:	ef 91       	pop	r30
    4f18:	bf 91       	pop	r27
    4f1a:	af 91       	pop	r26
    4f1c:	9f 91       	pop	r25
    4f1e:	8f 91       	pop	r24
    4f20:	7f 91       	pop	r23
    4f22:	6f 91       	pop	r22
    4f24:	5f 91       	pop	r21
    4f26:	4f 91       	pop	r20
    4f28:	3f 91       	pop	r19
    4f2a:	2f 91       	pop	r18
    4f2c:	0f 90       	pop	r0
    4f2e:	0b be       	out	0x3b, r0	; 59
    4f30:	0f 90       	pop	r0
    4f32:	0f be       	out	0x3f, r0	; 63
    4f34:	0f 90       	pop	r0
    4f36:	1f 90       	pop	r1
    4f38:	18 95       	reti

00004f3a <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    4f3a:	cf 93       	push	r28
  uint8_t sreg = SREG;
    4f3c:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    4f3e:	f8 94       	cli
  if (!initialized) {
    4f40:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <_ZN8SPIClass11initializedE>
    4f44:	81 11       	cpse	r24, r1
    4f46:	27 c0       	rjmp	.+78     	; 0x4f96 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    4f48:	e4 e2       	ldi	r30, 0x24	; 36
    4f4a:	fc e0       	ldi	r31, 0x0C	; 12
    4f4c:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    4f4e:	ee ed       	ldi	r30, 0xDE	; 222
    4f50:	fb e0       	ldi	r31, 0x0B	; 11
    4f52:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    4f54:	e8 2f       	mov	r30, r24
    4f56:	f0 e0       	ldi	r31, 0x00	; 0
    4f58:	ee 0f       	add	r30, r30
    4f5a:	ff 1f       	adc	r31, r31
    4f5c:	e7 59       	subi	r30, 0x97	; 151
    4f5e:	f3 4f       	sbci	r31, 0xF3	; 243
    4f60:	a5 91       	lpm	r26, Z+
    4f62:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4f64:	ec 91       	ld	r30, X
    4f66:	e9 23       	and	r30, r25
    4f68:	21 f4       	brne	.+8      	; 0x4f72 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    4f6a:	61 e0       	ldi	r22, 0x01	; 1
    4f6c:	85 e3       	ldi	r24, 0x35	; 53
    4f6e:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4f72:	61 e0       	ldi	r22, 0x01	; 1
    4f74:	85 e3       	ldi	r24, 0x35	; 53
    4f76:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4f7a:	8c b5       	in	r24, 0x2c	; 44
    4f7c:	80 61       	ori	r24, 0x10	; 16
    4f7e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4f80:	8c b5       	in	r24, 0x2c	; 44
    4f82:	80 64       	ori	r24, 0x40	; 64
    4f84:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    4f86:	61 e0       	ldi	r22, 0x01	; 1
    4f88:	84 e3       	ldi	r24, 0x34	; 52
    4f8a:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
    pinMode(MOSI, OUTPUT);
    4f8e:	61 e0       	ldi	r22, 0x01	; 1
    4f90:	83 e3       	ldi	r24, 0x33	; 51
    4f92:	0e 94 77 35 	call	0x6aee	; 0x6aee <pinMode>
  }
  initialized++; // reference count
    4f96:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <_ZN8SPIClass11initializedE>
    4f9a:	8f 5f       	subi	r24, 0xFF	; 255
    4f9c:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4fa0:	cf bf       	out	0x3f, r28	; 63
}
    4fa2:	cf 91       	pop	r28
    4fa4:	08 95       	ret

00004fa6 <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    4fa6:	1f 92       	push	r1
    4fa8:	0f 92       	push	r0
    4faa:	0f b6       	in	r0, 0x3f	; 63
    4fac:	0f 92       	push	r0
    4fae:	11 24       	eor	r1, r1
    4fb0:	0b b6       	in	r0, 0x3b	; 59
    4fb2:	0f 92       	push	r0
    4fb4:	2f 93       	push	r18
    4fb6:	3f 93       	push	r19
    4fb8:	4f 93       	push	r20
    4fba:	5f 93       	push	r21
    4fbc:	6f 93       	push	r22
    4fbe:	7f 93       	push	r23
    4fc0:	8f 93       	push	r24
    4fc2:	9f 93       	push	r25
    4fc4:	af 93       	push	r26
    4fc6:	bf 93       	push	r27
    4fc8:	ef 93       	push	r30
    4fca:	ff 93       	push	r31
  Timer1.isrCallback();
    4fcc:	e0 91 cc 04 	lds	r30, 0x04CC	; 0x8004cc <_ZN8TimerOne11isrCallbackE>
    4fd0:	f0 91 cd 04 	lds	r31, 0x04CD	; 0x8004cd <_ZN8TimerOne11isrCallbackE+0x1>
    4fd4:	19 95       	eicall
}
    4fd6:	ff 91       	pop	r31
    4fd8:	ef 91       	pop	r30
    4fda:	bf 91       	pop	r27
    4fdc:	af 91       	pop	r26
    4fde:	9f 91       	pop	r25
    4fe0:	8f 91       	pop	r24
    4fe2:	7f 91       	pop	r23
    4fe4:	6f 91       	pop	r22
    4fe6:	5f 91       	pop	r21
    4fe8:	4f 91       	pop	r20
    4fea:	3f 91       	pop	r19
    4fec:	2f 91       	pop	r18
    4fee:	0f 90       	pop	r0
    4ff0:	0b be       	out	0x3b, r0	; 59
    4ff2:	0f 90       	pop	r0
    4ff4:	0f be       	out	0x3f, r0	; 63
    4ff6:	0f 90       	pop	r0
    4ff8:	1f 90       	pop	r1
    4ffa:	18 95       	reti

00004ffc <__vector_35>:
void (*TimerThree::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER3_OVF_vect)
{
    4ffc:	1f 92       	push	r1
    4ffe:	0f 92       	push	r0
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	0f 92       	push	r0
    5004:	11 24       	eor	r1, r1
    5006:	0b b6       	in	r0, 0x3b	; 59
    5008:	0f 92       	push	r0
    500a:	2f 93       	push	r18
    500c:	3f 93       	push	r19
    500e:	4f 93       	push	r20
    5010:	5f 93       	push	r21
    5012:	6f 93       	push	r22
    5014:	7f 93       	push	r23
    5016:	8f 93       	push	r24
    5018:	9f 93       	push	r25
    501a:	af 93       	push	r26
    501c:	bf 93       	push	r27
    501e:	ef 93       	push	r30
    5020:	ff 93       	push	r31
  Timer3.isrCallback();
    5022:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <_ZN10TimerThree11isrCallbackE>
    5026:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <_ZN10TimerThree11isrCallbackE+0x1>
    502a:	19 95       	eicall
}
    502c:	ff 91       	pop	r31
    502e:	ef 91       	pop	r30
    5030:	bf 91       	pop	r27
    5032:	af 91       	pop	r26
    5034:	9f 91       	pop	r25
    5036:	8f 91       	pop	r24
    5038:	7f 91       	pop	r23
    503a:	6f 91       	pop	r22
    503c:	5f 91       	pop	r21
    503e:	4f 91       	pop	r20
    5040:	3f 91       	pop	r19
    5042:	2f 91       	pop	r18
    5044:	0f 90       	pop	r0
    5046:	0b be       	out	0x3b, r0	; 59
    5048:	0f 90       	pop	r0
    504a:	0f be       	out	0x3f, r0	; 63
    504c:	0f 90       	pop	r0
    504e:	1f 90       	pop	r1
    5050:	18 95       	reti

00005052 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    5052:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <twi_state>
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <twi_sendStop>
    505c:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <twi_inRepStart>
    5060:	61 e0       	ldi	r22, 0x01	; 1
    5062:	84 e1       	ldi	r24, 0x14	; 20
    5064:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    5068:	61 e0       	ldi	r22, 0x01	; 1
    506a:	85 e1       	ldi	r24, 0x15	; 21
    506c:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    5070:	e9 eb       	ldi	r30, 0xB9	; 185
    5072:	f0 e0       	ldi	r31, 0x00	; 0
    5074:	80 81       	ld	r24, Z
    5076:	8e 7f       	andi	r24, 0xFE	; 254
    5078:	80 83       	st	Z, r24
    507a:	80 81       	ld	r24, Z
    507c:	8d 7f       	andi	r24, 0xFD	; 253
    507e:	80 83       	st	Z, r24
    5080:	88 e4       	ldi	r24, 0x48	; 72
    5082:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5086:	85 e4       	ldi	r24, 0x45	; 69
    5088:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    508c:	08 95       	ret

0000508e <twi_disable>:
    508e:	ec eb       	ldi	r30, 0xBC	; 188
    5090:	f0 e0       	ldi	r31, 0x00	; 0
    5092:	80 81       	ld	r24, Z
    5094:	8a 7b       	andi	r24, 0xBA	; 186
    5096:	80 83       	st	Z, r24
    5098:	60 e0       	ldi	r22, 0x00	; 0
    509a:	84 e1       	ldi	r24, 0x14	; 20
    509c:	0e 94 b3 35 	call	0x6b66	; 0x6b66 <digitalWrite>
    50a0:	60 e0       	ldi	r22, 0x00	; 0
    50a2:	85 e1       	ldi	r24, 0x15	; 21
    50a4:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <digitalWrite>

000050a8 <twi_setFrequency>:
    50a8:	9b 01       	movw	r18, r22
    50aa:	ac 01       	movw	r20, r24
    50ac:	60 e0       	ldi	r22, 0x00	; 0
    50ae:	74 e2       	ldi	r23, 0x24	; 36
    50b0:	84 ef       	ldi	r24, 0xF4	; 244
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__udivmodsi4>
    50b8:	da 01       	movw	r26, r20
    50ba:	c9 01       	movw	r24, r18
    50bc:	40 97       	sbiw	r24, 0x10	; 16
    50be:	a1 09       	sbc	r26, r1
    50c0:	b1 09       	sbc	r27, r1
    50c2:	b6 95       	lsr	r27
    50c4:	a7 95       	ror	r26
    50c6:	97 95       	ror	r25
    50c8:	87 95       	ror	r24
    50ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    50ce:	08 95       	ret

000050d0 <twi_transmit>:
    50d0:	40 91 f5 04 	lds	r20, 0x04F5	; 0x8004f5 <twi_txBufferLength>
    50d4:	26 2f       	mov	r18, r22
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	24 0f       	add	r18, r20
    50da:	31 1d       	adc	r19, r1
    50dc:	21 32       	cpi	r18, 0x21	; 33
    50de:	31 05       	cpc	r19, r1
    50e0:	dc f4       	brge	.+54     	; 0x5118 <twi_transmit+0x48>
    50e2:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <twi_state>
    50e6:	24 30       	cpi	r18, 0x04	; 4
    50e8:	c9 f4       	brne	.+50     	; 0x511c <twi_transmit+0x4c>
    50ea:	fc 01       	movw	r30, r24
    50ec:	80 e0       	ldi	r24, 0x00	; 0
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	86 17       	cp	r24, r22
    50f2:	58 f4       	brcc	.+22     	; 0x510a <twi_transmit+0x3a>
    50f4:	30 91 f5 04 	lds	r19, 0x04F5	; 0x8004f5 <twi_txBufferLength>
    50f8:	21 91       	ld	r18, Z+
    50fa:	dc 01       	movw	r26, r24
    50fc:	a9 50       	subi	r26, 0x09	; 9
    50fe:	bb 4f       	sbci	r27, 0xFB	; 251
    5100:	a3 0f       	add	r26, r19
    5102:	b1 1d       	adc	r27, r1
    5104:	2c 93       	st	X, r18
    5106:	01 96       	adiw	r24, 0x01	; 1
    5108:	f3 cf       	rjmp	.-26     	; 0x50f0 <twi_transmit+0x20>
    510a:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <twi_txBufferLength>
    510e:	68 0f       	add	r22, r24
    5110:	60 93 f5 04 	sts	0x04F5, r22	; 0x8004f5 <twi_txBufferLength>
    5114:	80 e0       	ldi	r24, 0x00	; 0
    5116:	08 95       	ret
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	08 95       	ret
    511c:	82 e0       	ldi	r24, 0x02	; 2
    511e:	08 95       	ret

00005120 <twi_attachSlaveRxEvent>:
    5120:	90 93 3a 05 	sts	0x053A, r25	; 0x80053a <twi_onSlaveReceive+0x1>
    5124:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <twi_onSlaveReceive>
    5128:	08 95       	ret

0000512a <twi_attachSlaveTxEvent>:
    512a:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <twi_onSlaveTransmit+0x1>
    512e:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <twi_onSlaveTransmit>
    5132:	08 95       	ret

00005134 <twi_releaseBus>:
    5134:	85 ec       	ldi	r24, 0xC5	; 197
    5136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    513a:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <twi_state>
    513e:	08 95       	ret

00005140 <twi_handleTimeout>:
    5140:	cf 93       	push	r28
    5142:	df 93       	push	r29
    5144:	91 e0       	ldi	r25, 0x01	; 1
    5146:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <twi_timed_out_flag>
    514a:	88 23       	and	r24, r24
    514c:	51 f0       	breq	.+20     	; 0x5162 <twi_handleTimeout+0x22>
    514e:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5152:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    5156:	9b df       	rcall	.-202    	; 0x508e <twi_disable>
    5158:	7c df       	rcall	.-264    	; 0x5052 <twi_init>
    515a:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    515e:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5162:	df 91       	pop	r29
    5164:	cf 91       	pop	r28
    5166:	08 95       	ret

00005168 <twi_readFrom>:
    5168:	4f 92       	push	r4
    516a:	5f 92       	push	r5
    516c:	6f 92       	push	r6
    516e:	7f 92       	push	r7
    5170:	8f 92       	push	r8
    5172:	9f 92       	push	r9
    5174:	af 92       	push	r10
    5176:	bf 92       	push	r11
    5178:	cf 92       	push	r12
    517a:	df 92       	push	r13
    517c:	ef 92       	push	r14
    517e:	ff 92       	push	r15
    5180:	0f 93       	push	r16
    5182:	1f 93       	push	r17
    5184:	cf 93       	push	r28
    5186:	df 93       	push	r29
    5188:	f8 2e       	mov	r15, r24
    518a:	16 2f       	mov	r17, r22
    518c:	07 2f       	mov	r16, r23
    518e:	c4 2f       	mov	r28, r20
    5190:	e2 2e       	mov	r14, r18
    5192:	41 32       	cpi	r20, 0x21	; 33
    5194:	08 f0       	brcs	.+2      	; 0x5198 <twi_readFrom+0x30>
    5196:	bc c0       	rjmp	.+376    	; 0x5310 <twi_readFrom+0x1a8>
    5198:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    519c:	4b 01       	movw	r8, r22
    519e:	5c 01       	movw	r10, r24
    51a0:	d0 91 46 05 	lds	r29, 0x0546	; 0x800546 <twi_state>
    51a4:	dd 23       	and	r29, r29
    51a6:	29 f1       	breq	.+74     	; 0x51f2 <twi_readFrom+0x8a>
    51a8:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_timeout_us>
    51ac:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    51b0:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    51b4:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    51b8:	89 2b       	or	r24, r25
    51ba:	8a 2b       	or	r24, r26
    51bc:	8b 2b       	or	r24, r27
    51be:	81 f3       	breq	.-32     	; 0x51a0 <twi_readFrom+0x38>
    51c0:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    51c4:	40 90 3f 05 	lds	r4, 0x053F	; 0x80053f <twi_timeout_us>
    51c8:	50 90 40 05 	lds	r5, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    51cc:	60 90 41 05 	lds	r6, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    51d0:	70 90 42 05 	lds	r7, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    51d4:	dc 01       	movw	r26, r24
    51d6:	cb 01       	movw	r24, r22
    51d8:	88 19       	sub	r24, r8
    51da:	99 09       	sbc	r25, r9
    51dc:	aa 09       	sbc	r26, r10
    51de:	bb 09       	sbc	r27, r11
    51e0:	48 16       	cp	r4, r24
    51e2:	59 06       	cpc	r5, r25
    51e4:	6a 06       	cpc	r6, r26
    51e6:	7b 06       	cpc	r7, r27
    51e8:	d8 f6       	brcc	.-74     	; 0x51a0 <twi_readFrom+0x38>
    51ea:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <twi_do_reset_on_timeout>
    51ee:	a8 df       	rcall	.-176    	; 0x5140 <twi_handleTimeout>
    51f0:	8f c0       	rjmp	.+286    	; 0x5310 <twi_readFrom+0x1a8>
    51f2:	81 e0       	ldi	r24, 0x01	; 1
    51f4:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <twi_state>
    51f8:	e0 92 44 05 	sts	0x0544, r14	; 0x800544 <twi_sendStop>
    51fc:	9f ef       	ldi	r25, 0xFF	; 255
    51fe:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <twi_error>
    5202:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <twi_masterBufferIndex>
    5206:	9c 0f       	add	r25, r28
    5208:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <twi_masterBufferLength>
    520c:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <twi_slarw>
    5210:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <twi_slarw>
    5214:	8f 2d       	mov	r24, r15
    5216:	88 0f       	add	r24, r24
    5218:	89 2b       	or	r24, r25
    521a:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <twi_slarw>
    521e:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <twi_inRepStart>
    5222:	81 30       	cpi	r24, 0x01	; 1
    5224:	89 f5       	brne	.+98     	; 0x5288 <twi_readFrom+0x120>
    5226:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <twi_inRepStart>
    522a:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    522e:	6b 01       	movw	r12, r22
    5230:	7c 01       	movw	r14, r24
    5232:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <twi_slarw>
    5236:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    523a:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_timeout_us>
    523e:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    5242:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    5246:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    524a:	89 2b       	or	r24, r25
    524c:	8a 2b       	or	r24, r26
    524e:	8b 2b       	or	r24, r27
    5250:	a9 f0       	breq	.+42     	; 0x527c <twi_readFrom+0x114>
    5252:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    5256:	80 90 3f 05 	lds	r8, 0x053F	; 0x80053f <twi_timeout_us>
    525a:	90 90 40 05 	lds	r9, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    525e:	a0 90 41 05 	lds	r10, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    5262:	b0 90 42 05 	lds	r11, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    5266:	dc 01       	movw	r26, r24
    5268:	cb 01       	movw	r24, r22
    526a:	8c 19       	sub	r24, r12
    526c:	9d 09       	sbc	r25, r13
    526e:	ae 09       	sbc	r26, r14
    5270:	bf 09       	sbc	r27, r15
    5272:	88 16       	cp	r8, r24
    5274:	99 06       	cpc	r9, r25
    5276:	aa 06       	cpc	r10, r26
    5278:	bb 06       	cpc	r11, r27
    527a:	90 f1       	brcs	.+100    	; 0x52e0 <twi_readFrom+0x178>
    527c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5280:	83 fd       	sbrc	r24, 3
    5282:	d7 cf       	rjmp	.-82     	; 0x5232 <twi_readFrom+0xca>
    5284:	85 ec       	ldi	r24, 0xC5	; 197
    5286:	01 c0       	rjmp	.+2      	; 0x528a <twi_readFrom+0x122>
    5288:	85 ee       	ldi	r24, 0xE5	; 229
    528a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    528e:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    5292:	6b 01       	movw	r12, r22
    5294:	7c 01       	movw	r14, r24
    5296:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <twi_state>
    529a:	81 30       	cpi	r24, 0x01	; 1
    529c:	29 f5       	brne	.+74     	; 0x52e8 <twi_readFrom+0x180>
    529e:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_timeout_us>
    52a2:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    52a6:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    52aa:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    52ae:	89 2b       	or	r24, r25
    52b0:	8a 2b       	or	r24, r26
    52b2:	8b 2b       	or	r24, r27
    52b4:	81 f3       	breq	.-32     	; 0x5296 <twi_readFrom+0x12e>
    52b6:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    52ba:	80 90 3f 05 	lds	r8, 0x053F	; 0x80053f <twi_timeout_us>
    52be:	90 90 40 05 	lds	r9, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    52c2:	a0 90 41 05 	lds	r10, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    52c6:	b0 90 42 05 	lds	r11, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    52ca:	dc 01       	movw	r26, r24
    52cc:	cb 01       	movw	r24, r22
    52ce:	8c 19       	sub	r24, r12
    52d0:	9d 09       	sbc	r25, r13
    52d2:	ae 09       	sbc	r26, r14
    52d4:	bf 09       	sbc	r27, r15
    52d6:	88 16       	cp	r8, r24
    52d8:	99 06       	cpc	r9, r25
    52da:	aa 06       	cpc	r10, r26
    52dc:	bb 06       	cpc	r11, r27
    52de:	d8 f6       	brcc	.-74     	; 0x5296 <twi_readFrom+0x12e>
    52e0:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <twi_do_reset_on_timeout>
    52e4:	2d df       	rcall	.-422    	; 0x5140 <twi_handleTimeout>
    52e6:	15 c0       	rjmp	.+42     	; 0x5312 <twi_readFrom+0x1aa>
    52e8:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <twi_masterBufferIndex>
    52ec:	8c 17       	cp	r24, r28
    52ee:	10 f4       	brcc	.+4      	; 0x52f4 <twi_readFrom+0x18c>
    52f0:	c0 91 18 05 	lds	r28, 0x0518	; 0x800518 <twi_masterBufferIndex>
    52f4:	a9 e1       	ldi	r26, 0x19	; 25
    52f6:	b5 e0       	ldi	r27, 0x05	; 5
    52f8:	91 2f       	mov	r25, r17
    52fa:	e1 2f       	mov	r30, r17
    52fc:	f0 2f       	mov	r31, r16
    52fe:	8e 2f       	mov	r24, r30
    5300:	89 1b       	sub	r24, r25
    5302:	8c 17       	cp	r24, r28
    5304:	18 f4       	brcc	.+6      	; 0x530c <twi_readFrom+0x1a4>
    5306:	8d 91       	ld	r24, X+
    5308:	81 93       	st	Z+, r24
    530a:	f9 cf       	rjmp	.-14     	; 0x52fe <twi_readFrom+0x196>
    530c:	dc 2f       	mov	r29, r28
    530e:	01 c0       	rjmp	.+2      	; 0x5312 <twi_readFrom+0x1aa>
    5310:	d0 e0       	ldi	r29, 0x00	; 0
    5312:	8d 2f       	mov	r24, r29
    5314:	df 91       	pop	r29
    5316:	cf 91       	pop	r28
    5318:	1f 91       	pop	r17
    531a:	0f 91       	pop	r16
    531c:	ff 90       	pop	r15
    531e:	ef 90       	pop	r14
    5320:	df 90       	pop	r13
    5322:	cf 90       	pop	r12
    5324:	bf 90       	pop	r11
    5326:	af 90       	pop	r10
    5328:	9f 90       	pop	r9
    532a:	8f 90       	pop	r8
    532c:	7f 90       	pop	r7
    532e:	6f 90       	pop	r6
    5330:	5f 90       	pop	r5
    5332:	4f 90       	pop	r4
    5334:	08 95       	ret

00005336 <twi_writeTo>:
    5336:	4f 92       	push	r4
    5338:	5f 92       	push	r5
    533a:	6f 92       	push	r6
    533c:	7f 92       	push	r7
    533e:	8f 92       	push	r8
    5340:	9f 92       	push	r9
    5342:	af 92       	push	r10
    5344:	bf 92       	push	r11
    5346:	cf 92       	push	r12
    5348:	df 92       	push	r13
    534a:	ef 92       	push	r14
    534c:	ff 92       	push	r15
    534e:	0f 93       	push	r16
    5350:	1f 93       	push	r17
    5352:	cf 93       	push	r28
    5354:	df 93       	push	r29
    5356:	41 32       	cpi	r20, 0x21	; 33
    5358:	08 f0       	brcs	.+2      	; 0x535c <twi_writeTo+0x26>
    535a:	c5 c0       	rjmp	.+394    	; 0x54e6 <twi_writeTo+0x1b0>
    535c:	12 2f       	mov	r17, r18
    535e:	f4 2e       	mov	r15, r20
    5360:	d7 2e       	mov	r13, r23
    5362:	e6 2e       	mov	r14, r22
    5364:	d8 2f       	mov	r29, r24
    5366:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    536a:	4b 01       	movw	r8, r22
    536c:	5c 01       	movw	r10, r24
    536e:	c0 91 46 05 	lds	r28, 0x0546	; 0x800546 <twi_state>
    5372:	cc 23       	and	r28, r28
    5374:	11 f1       	breq	.+68     	; 0x53ba <twi_writeTo+0x84>
    5376:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_timeout_us>
    537a:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    537e:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    5382:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    5386:	89 2b       	or	r24, r25
    5388:	8a 2b       	or	r24, r26
    538a:	8b 2b       	or	r24, r27
    538c:	81 f3       	breq	.-32     	; 0x536e <twi_writeTo+0x38>
    538e:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    5392:	40 90 3f 05 	lds	r4, 0x053F	; 0x80053f <twi_timeout_us>
    5396:	50 90 40 05 	lds	r5, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    539a:	60 90 41 05 	lds	r6, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    539e:	70 90 42 05 	lds	r7, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    53a2:	dc 01       	movw	r26, r24
    53a4:	cb 01       	movw	r24, r22
    53a6:	88 19       	sub	r24, r8
    53a8:	99 09       	sbc	r25, r9
    53aa:	aa 09       	sbc	r26, r10
    53ac:	bb 09       	sbc	r27, r11
    53ae:	48 16       	cp	r4, r24
    53b0:	59 06       	cpc	r5, r25
    53b2:	6a 06       	cpc	r6, r26
    53b4:	7b 06       	cpc	r7, r27
    53b6:	d8 f6       	brcc	.-74     	; 0x536e <twi_writeTo+0x38>
    53b8:	83 c0       	rjmp	.+262    	; 0x54c0 <twi_writeTo+0x18a>
    53ba:	82 e0       	ldi	r24, 0x02	; 2
    53bc:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <twi_state>
    53c0:	00 93 44 05 	sts	0x0544, r16	; 0x800544 <twi_sendStop>
    53c4:	8f ef       	ldi	r24, 0xFF	; 255
    53c6:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <twi_error>
    53ca:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <twi_masterBufferIndex>
    53ce:	f0 92 17 05 	sts	0x0517, r15	; 0x800517 <twi_masterBufferLength>
    53d2:	9e 2d       	mov	r25, r14
    53d4:	a9 e1       	ldi	r26, 0x19	; 25
    53d6:	b5 e0       	ldi	r27, 0x05	; 5
    53d8:	ee 2d       	mov	r30, r14
    53da:	fd 2d       	mov	r31, r13
    53dc:	8e 2f       	mov	r24, r30
    53de:	89 1b       	sub	r24, r25
    53e0:	8f 15       	cp	r24, r15
    53e2:	18 f4       	brcc	.+6      	; 0x53ea <twi_writeTo+0xb4>
    53e4:	81 91       	ld	r24, Z+
    53e6:	8d 93       	st	X+, r24
    53e8:	f9 cf       	rjmp	.-14     	; 0x53dc <twi_writeTo+0xa6>
    53ea:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <twi_slarw>
    53ee:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <twi_slarw>
    53f2:	dd 0f       	add	r29, r29
    53f4:	d9 2b       	or	r29, r25
    53f6:	d0 93 45 05 	sts	0x0545, r29	; 0x800545 <twi_slarw>
    53fa:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <twi_inRepStart>
    53fe:	81 30       	cpi	r24, 0x01	; 1
    5400:	89 f5       	brne	.+98     	; 0x5464 <twi_writeTo+0x12e>
    5402:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <twi_inRepStart>
    5406:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    540a:	6b 01       	movw	r12, r22
    540c:	7c 01       	movw	r14, r24
    540e:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <twi_slarw>
    5412:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5416:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_timeout_us>
    541a:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    541e:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    5422:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    5426:	89 2b       	or	r24, r25
    5428:	8a 2b       	or	r24, r26
    542a:	8b 2b       	or	r24, r27
    542c:	a9 f0       	breq	.+42     	; 0x5458 <twi_writeTo+0x122>
    542e:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    5432:	80 90 3f 05 	lds	r8, 0x053F	; 0x80053f <twi_timeout_us>
    5436:	90 90 40 05 	lds	r9, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    543a:	a0 90 41 05 	lds	r10, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    543e:	b0 90 42 05 	lds	r11, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	8c 19       	sub	r24, r12
    5448:	9d 09       	sbc	r25, r13
    544a:	ae 09       	sbc	r26, r14
    544c:	bf 09       	sbc	r27, r15
    544e:	88 16       	cp	r8, r24
    5450:	99 06       	cpc	r9, r25
    5452:	aa 06       	cpc	r10, r26
    5454:	bb 06       	cpc	r11, r27
    5456:	a0 f1       	brcs	.+104    	; 0x54c0 <twi_writeTo+0x18a>
    5458:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    545c:	83 fd       	sbrc	r24, 3
    545e:	d7 cf       	rjmp	.-82     	; 0x540e <twi_writeTo+0xd8>
    5460:	85 ec       	ldi	r24, 0xC5	; 197
    5462:	01 c0       	rjmp	.+2      	; 0x5466 <twi_writeTo+0x130>
    5464:	85 ee       	ldi	r24, 0xE5	; 229
    5466:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    546a:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    546e:	6b 01       	movw	r12, r22
    5470:	7c 01       	movw	r14, r24
    5472:	11 23       	and	r17, r17
    5474:	51 f1       	breq	.+84     	; 0x54ca <twi_writeTo+0x194>
    5476:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <twi_state>
    547a:	82 30       	cpi	r24, 0x02	; 2
    547c:	31 f5       	brne	.+76     	; 0x54ca <twi_writeTo+0x194>
    547e:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_timeout_us>
    5482:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    5486:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    548a:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    548e:	89 2b       	or	r24, r25
    5490:	8a 2b       	or	r24, r26
    5492:	8b 2b       	or	r24, r27
    5494:	71 f3       	breq	.-36     	; 0x5472 <twi_writeTo+0x13c>
    5496:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <micros>
    549a:	80 90 3f 05 	lds	r8, 0x053F	; 0x80053f <twi_timeout_us>
    549e:	90 90 40 05 	lds	r9, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    54a2:	a0 90 41 05 	lds	r10, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    54a6:	b0 90 42 05 	lds	r11, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    54aa:	dc 01       	movw	r26, r24
    54ac:	cb 01       	movw	r24, r22
    54ae:	8c 19       	sub	r24, r12
    54b0:	9d 09       	sbc	r25, r13
    54b2:	ae 09       	sbc	r26, r14
    54b4:	bf 09       	sbc	r27, r15
    54b6:	88 16       	cp	r8, r24
    54b8:	99 06       	cpc	r9, r25
    54ba:	aa 06       	cpc	r10, r26
    54bc:	bb 06       	cpc	r11, r27
    54be:	c8 f6       	brcc	.-78     	; 0x5472 <twi_writeTo+0x13c>
    54c0:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <twi_do_reset_on_timeout>
    54c4:	3d de       	rcall	.-902    	; 0x5140 <twi_handleTimeout>
    54c6:	c5 e0       	ldi	r28, 0x05	; 5
    54c8:	13 c0       	rjmp	.+38     	; 0x54f0 <twi_writeTo+0x1ba>
    54ca:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <twi_error>
    54ce:	8f 3f       	cpi	r24, 0xFF	; 255
    54d0:	79 f0       	breq	.+30     	; 0x54f0 <twi_writeTo+0x1ba>
    54d2:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <twi_error>
    54d6:	80 32       	cpi	r24, 0x20	; 32
    54d8:	41 f0       	breq	.+16     	; 0x54ea <twi_writeTo+0x1b4>
    54da:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <twi_error>
    54de:	80 33       	cpi	r24, 0x30	; 48
    54e0:	31 f0       	breq	.+12     	; 0x54ee <twi_writeTo+0x1b8>
    54e2:	c4 e0       	ldi	r28, 0x04	; 4
    54e4:	05 c0       	rjmp	.+10     	; 0x54f0 <twi_writeTo+0x1ba>
    54e6:	c1 e0       	ldi	r28, 0x01	; 1
    54e8:	03 c0       	rjmp	.+6      	; 0x54f0 <twi_writeTo+0x1ba>
    54ea:	c2 e0       	ldi	r28, 0x02	; 2
    54ec:	01 c0       	rjmp	.+2      	; 0x54f0 <twi_writeTo+0x1ba>
    54ee:	c3 e0       	ldi	r28, 0x03	; 3
    54f0:	8c 2f       	mov	r24, r28
    54f2:	df 91       	pop	r29
    54f4:	cf 91       	pop	r28
    54f6:	1f 91       	pop	r17
    54f8:	0f 91       	pop	r16
    54fa:	ff 90       	pop	r15
    54fc:	ef 90       	pop	r14
    54fe:	df 90       	pop	r13
    5500:	cf 90       	pop	r12
    5502:	bf 90       	pop	r11
    5504:	af 90       	pop	r10
    5506:	9f 90       	pop	r9
    5508:	8f 90       	pop	r8
    550a:	7f 90       	pop	r7
    550c:	6f 90       	pop	r6
    550e:	5f 90       	pop	r5
    5510:	4f 90       	pop	r4
    5512:	08 95       	ret

00005514 <twi_stop>:
    5514:	85 ed       	ldi	r24, 0xD5	; 213
    5516:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    551a:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <twi_timeout_us>
    551e:	90 91 40 05 	lds	r25, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    5522:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    5526:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    552a:	07 96       	adiw	r24, 0x07	; 7
    552c:	a1 1d       	adc	r26, r1
    552e:	b1 1d       	adc	r27, r1
    5530:	23 e0       	ldi	r18, 0x03	; 3
    5532:	b6 95       	lsr	r27
    5534:	a7 95       	ror	r26
    5536:	97 95       	ror	r25
    5538:	87 95       	ror	r24
    553a:	2a 95       	dec	r18
    553c:	d1 f7       	brne	.-12     	; 0x5532 <twi_stop+0x1e>
    553e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5542:	24 ff       	sbrs	r18, 4
    5544:	1b c0       	rjmp	.+54     	; 0x557c <twi_stop+0x68>
    5546:	40 91 3f 05 	lds	r20, 0x053F	; 0x80053f <twi_timeout_us>
    554a:	50 91 40 05 	lds	r21, 0x0540	; 0x800540 <twi_timeout_us+0x1>
    554e:	60 91 41 05 	lds	r22, 0x0541	; 0x800541 <twi_timeout_us+0x2>
    5552:	70 91 42 05 	lds	r23, 0x0542	; 0x800542 <twi_timeout_us+0x3>
    5556:	45 2b       	or	r20, r21
    5558:	46 2b       	or	r20, r22
    555a:	47 2b       	or	r20, r23
    555c:	81 f3       	breq	.-32     	; 0x553e <twi_stop+0x2a>
    555e:	00 97       	sbiw	r24, 0x00	; 0
    5560:	a1 05       	cpc	r26, r1
    5562:	b1 05       	cpc	r27, r1
    5564:	41 f0       	breq	.+16     	; 0x5576 <twi_stop+0x62>
    5566:	25 e3       	ldi	r18, 0x35	; 53
    5568:	2a 95       	dec	r18
    556a:	f1 f7       	brne	.-4      	; 0x5568 <twi_stop+0x54>
    556c:	00 00       	nop
    556e:	01 97       	sbiw	r24, 0x01	; 1
    5570:	a1 09       	sbc	r26, r1
    5572:	b1 09       	sbc	r27, r1
    5574:	e4 cf       	rjmp	.-56     	; 0x553e <twi_stop+0x2a>
    5576:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <twi_do_reset_on_timeout>
    557a:	e2 cd       	rjmp	.-1084   	; 0x5140 <twi_handleTimeout>
    557c:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <twi_state>
    5580:	08 95       	ret

00005582 <__vector_39>:

ISR(TWI_vect)
{
    5582:	1f 92       	push	r1
    5584:	0f 92       	push	r0
    5586:	0f b6       	in	r0, 0x3f	; 63
    5588:	0f 92       	push	r0
    558a:	11 24       	eor	r1, r1
    558c:	0b b6       	in	r0, 0x3b	; 59
    558e:	0f 92       	push	r0
    5590:	2f 93       	push	r18
    5592:	3f 93       	push	r19
    5594:	4f 93       	push	r20
    5596:	5f 93       	push	r21
    5598:	6f 93       	push	r22
    559a:	7f 93       	push	r23
    559c:	8f 93       	push	r24
    559e:	9f 93       	push	r25
    55a0:	af 93       	push	r26
    55a2:	bf 93       	push	r27
    55a4:	ef 93       	push	r30
    55a6:	ff 93       	push	r31
  switch(TW_STATUS){
    55a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55ac:	88 7f       	andi	r24, 0xF8	; 248
    55ae:	80 36       	cpi	r24, 0x60	; 96
    55b0:	09 f4       	brne	.+2      	; 0x55b4 <__vector_39+0x32>
    55b2:	9d c0       	rjmp	.+314    	; 0x56ee <__vector_39+0x16c>
    55b4:	70 f5       	brcc	.+92     	; 0x5612 <__vector_39+0x90>
    55b6:	88 32       	cpi	r24, 0x28	; 40
    55b8:	09 f4       	brne	.+2      	; 0x55bc <__vector_39+0x3a>
    55ba:	5c c0       	rjmp	.+184    	; 0x5674 <__vector_39+0xf2>
    55bc:	90 f4       	brcc	.+36     	; 0x55e2 <__vector_39+0x60>
    55be:	80 31       	cpi	r24, 0x10	; 16
    55c0:	09 f4       	brne	.+2      	; 0x55c4 <__vector_39+0x42>
    55c2:	55 c0       	rjmp	.+170    	; 0x566e <__vector_39+0xec>
    55c4:	38 f4       	brcc	.+14     	; 0x55d4 <__vector_39+0x52>
    55c6:	88 23       	and	r24, r24
    55c8:	09 f4       	brne	.+2      	; 0x55cc <__vector_39+0x4a>
    55ca:	f3 c0       	rjmp	.+486    	; 0x57b2 <__vector_39+0x230>
    55cc:	88 30       	cpi	r24, 0x08	; 8
    55ce:	09 f4       	brne	.+2      	; 0x55d2 <__vector_39+0x50>
    55d0:	4e c0       	rjmp	.+156    	; 0x566e <__vector_39+0xec>
    55d2:	f2 c0       	rjmp	.+484    	; 0x57b8 <__vector_39+0x236>
    55d4:	88 31       	cpi	r24, 0x18	; 24
    55d6:	09 f4       	brne	.+2      	; 0x55da <__vector_39+0x58>
    55d8:	4d c0       	rjmp	.+154    	; 0x5674 <__vector_39+0xf2>
    55da:	80 32       	cpi	r24, 0x20	; 32
    55dc:	09 f4       	brne	.+2      	; 0x55e0 <__vector_39+0x5e>
    55de:	5e c0       	rjmp	.+188    	; 0x569c <__vector_39+0x11a>
    55e0:	eb c0       	rjmp	.+470    	; 0x57b8 <__vector_39+0x236>
    55e2:	80 34       	cpi	r24, 0x40	; 64
    55e4:	09 f4       	brne	.+2      	; 0x55e8 <__vector_39+0x66>
    55e6:	69 c0       	rjmp	.+210    	; 0x56ba <__vector_39+0x138>
    55e8:	50 f4       	brcc	.+20     	; 0x55fe <__vector_39+0x7c>
    55ea:	80 33       	cpi	r24, 0x30	; 48
    55ec:	09 f4       	brne	.+2      	; 0x55f0 <__vector_39+0x6e>
    55ee:	56 c0       	rjmp	.+172    	; 0x569c <__vector_39+0x11a>
    55f0:	88 33       	cpi	r24, 0x38	; 56
    55f2:	09 f0       	breq	.+2      	; 0x55f6 <__vector_39+0x74>
    55f4:	e1 c0       	rjmp	.+450    	; 0x57b8 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    55f6:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <twi_error>
      twi_releaseBus();
    55fa:	9c dd       	rcall	.-1224   	; 0x5134 <twi_releaseBus>
      break;
    55fc:	dd c0       	rjmp	.+442    	; 0x57b8 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    55fe:	80 35       	cpi	r24, 0x50	; 80
    5600:	09 f4       	brne	.+2      	; 0x5604 <__vector_39+0x82>
    5602:	4f c0       	rjmp	.+158    	; 0x56a2 <__vector_39+0x120>
    5604:	88 35       	cpi	r24, 0x58	; 88
    5606:	09 f4       	brne	.+2      	; 0x560a <__vector_39+0x88>
    5608:	5d c0       	rjmp	.+186    	; 0x56c4 <__vector_39+0x142>
    560a:	88 34       	cpi	r24, 0x48	; 72
    560c:	09 f0       	breq	.+2      	; 0x5610 <__vector_39+0x8e>
    560e:	d4 c0       	rjmp	.+424    	; 0x57b8 <__vector_39+0x236>
    5610:	d2 c0       	rjmp	.+420    	; 0x57b6 <__vector_39+0x234>
    5612:	88 39       	cpi	r24, 0x98	; 152
    5614:	09 f4       	brne	.+2      	; 0x5618 <__vector_39+0x96>
    5616:	c3 c0       	rjmp	.+390    	; 0x579e <__vector_39+0x21c>
    5618:	a8 f4       	brcc	.+42     	; 0x5644 <__vector_39+0xc2>
    561a:	88 37       	cpi	r24, 0x78	; 120
    561c:	09 f4       	brne	.+2      	; 0x5620 <__vector_39+0x9e>
    561e:	67 c0       	rjmp	.+206    	; 0x56ee <__vector_39+0x16c>
    5620:	38 f4       	brcc	.+14     	; 0x5630 <__vector_39+0xae>
    5622:	88 36       	cpi	r24, 0x68	; 104
    5624:	09 f4       	brne	.+2      	; 0x5628 <__vector_39+0xa6>
    5626:	63 c0       	rjmp	.+198    	; 0x56ee <__vector_39+0x16c>
    5628:	80 37       	cpi	r24, 0x70	; 112
    562a:	09 f4       	brne	.+2      	; 0x562e <__vector_39+0xac>
    562c:	60 c0       	rjmp	.+192    	; 0x56ee <__vector_39+0x16c>
    562e:	c4 c0       	rjmp	.+392    	; 0x57b8 <__vector_39+0x236>
    5630:	88 38       	cpi	r24, 0x88	; 136
    5632:	09 f4       	brne	.+2      	; 0x5636 <__vector_39+0xb4>
    5634:	b4 c0       	rjmp	.+360    	; 0x579e <__vector_39+0x21c>
    5636:	80 39       	cpi	r24, 0x90	; 144
    5638:	09 f4       	brne	.+2      	; 0x563c <__vector_39+0xba>
    563a:	5f c0       	rjmp	.+190    	; 0x56fa <__vector_39+0x178>
    563c:	80 38       	cpi	r24, 0x80	; 128
    563e:	09 f0       	breq	.+2      	; 0x5642 <__vector_39+0xc0>
    5640:	bb c0       	rjmp	.+374    	; 0x57b8 <__vector_39+0x236>
    5642:	5b c0       	rjmp	.+182    	; 0x56fa <__vector_39+0x178>
    5644:	80 3b       	cpi	r24, 0xB0	; 176
    5646:	09 f4       	brne	.+2      	; 0x564a <__vector_39+0xc8>
    5648:	82 c0       	rjmp	.+260    	; 0x574e <__vector_39+0x1cc>
    564a:	38 f4       	brcc	.+14     	; 0x565a <__vector_39+0xd8>
    564c:	80 3a       	cpi	r24, 0xA0	; 160
    564e:	09 f4       	brne	.+2      	; 0x5652 <__vector_39+0xd0>
    5650:	66 c0       	rjmp	.+204    	; 0x571e <__vector_39+0x19c>
    5652:	88 3a       	cpi	r24, 0xA8	; 168
    5654:	09 f4       	brne	.+2      	; 0x5658 <__vector_39+0xd6>
    5656:	7b c0       	rjmp	.+246    	; 0x574e <__vector_39+0x1cc>
    5658:	af c0       	rjmp	.+350    	; 0x57b8 <__vector_39+0x236>
    565a:	80 3c       	cpi	r24, 0xC0	; 192
    565c:	09 f4       	brne	.+2      	; 0x5660 <__vector_39+0xde>
    565e:	a3 c0       	rjmp	.+326    	; 0x57a6 <__vector_39+0x224>
    5660:	88 3c       	cpi	r24, 0xC8	; 200
    5662:	09 f4       	brne	.+2      	; 0x5666 <__vector_39+0xe4>
    5664:	a0 c0       	rjmp	.+320    	; 0x57a6 <__vector_39+0x224>
    5666:	88 3b       	cpi	r24, 0xB8	; 184
    5668:	09 f4       	brne	.+2      	; 0x566c <__vector_39+0xea>
    566a:	86 c0       	rjmp	.+268    	; 0x5778 <__vector_39+0x1f6>
    566c:	a5 c0       	rjmp	.+330    	; 0x57b8 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    566e:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <twi_slarw>
    5672:	10 c0       	rjmp	.+32     	; 0x5694 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5674:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <twi_masterBufferIndex>
    5678:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <twi_masterBufferLength>
    567c:	98 17       	cp	r25, r24
    567e:	70 f5       	brcc	.+92     	; 0x56dc <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5680:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <twi_masterBufferIndex>
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	8e 0f       	add	r24, r30
    5688:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <twi_masterBufferIndex>
    568c:	f0 e0       	ldi	r31, 0x00	; 0
    568e:	e7 5e       	subi	r30, 0xE7	; 231
    5690:	fa 4f       	sbci	r31, 0xFA	; 250
    5692:	80 81       	ld	r24, Z
    5694:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5698:	85 ec       	ldi	r24, 0xC5	; 197
    569a:	82 c0       	rjmp	.+260    	; 0x57a0 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    569c:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <twi_error>
    56a0:	8a c0       	rjmp	.+276    	; 0x57b6 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    56a2:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <twi_masterBufferIndex>
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	8e 0f       	add	r24, r30
    56aa:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <twi_masterBufferIndex>
    56ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56b2:	f0 e0       	ldi	r31, 0x00	; 0
    56b4:	e7 5e       	subi	r30, 0xE7	; 231
    56b6:	fa 4f       	sbci	r31, 0xFA	; 250
    56b8:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    56ba:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <twi_masterBufferIndex>
    56be:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <twi_masterBufferLength>
    56c2:	6a c0       	rjmp	.+212    	; 0x5798 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    56c4:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <twi_masterBufferIndex>
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	8e 0f       	add	r24, r30
    56cc:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <twi_masterBufferIndex>
    56d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56d4:	f0 e0       	ldi	r31, 0x00	; 0
    56d6:	e7 5e       	subi	r30, 0xE7	; 231
    56d8:	fa 4f       	sbci	r31, 0xFA	; 250
    56da:	80 83       	st	Z, r24
      if (twi_sendStop){
    56dc:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <twi_sendStop>
    56e0:	81 11       	cpse	r24, r1
    56e2:	69 c0       	rjmp	.+210    	; 0x57b6 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    56e4:	81 e0       	ldi	r24, 0x01	; 1
    56e6:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    56ea:	84 ea       	ldi	r24, 0xA4	; 164
    56ec:	5d c0       	rjmp	.+186    	; 0x57a8 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    56ee:	83 e0       	ldi	r24, 0x03	; 3
    56f0:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    56f4:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <twi_rxBufferIndex>
    56f8:	cf cf       	rjmp	.-98     	; 0x5698 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    56fa:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <twi_rxBufferIndex>
    56fe:	80 32       	cpi	r24, 0x20	; 32
    5700:	08 f0       	brcs	.+2      	; 0x5704 <__vector_39+0x182>
    5702:	4d c0       	rjmp	.+154    	; 0x579e <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5704:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <twi_rxBufferIndex>
    5708:	81 e0       	ldi	r24, 0x01	; 1
    570a:	8e 0f       	add	r24, r30
    570c:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <twi_rxBufferIndex>
    5710:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5714:	f0 e0       	ldi	r31, 0x00	; 0
    5716:	eb 52       	subi	r30, 0x2B	; 43
    5718:	fb 4f       	sbci	r31, 0xFB	; 251
    571a:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    571c:	bd cf       	rjmp	.-134    	; 0x5698 <__vector_39+0x116>
    571e:	0a dd       	rcall	.-1516   	; 0x5134 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5720:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <twi_rxBufferIndex>
    5724:	80 32       	cpi	r24, 0x20	; 32
    5726:	30 f4       	brcc	.+12     	; 0x5734 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5728:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <twi_rxBufferIndex>
    572c:	f0 e0       	ldi	r31, 0x00	; 0
    572e:	eb 52       	subi	r30, 0x2B	; 43
    5730:	fb 4f       	sbci	r31, 0xFB	; 251
    5732:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5734:	60 91 d4 04 	lds	r22, 0x04D4	; 0x8004d4 <twi_rxBufferIndex>
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <twi_onSlaveReceive>
    573e:	f0 91 3a 05 	lds	r31, 0x053A	; 0x80053a <twi_onSlaveReceive+0x1>
    5742:	85 ed       	ldi	r24, 0xD5	; 213
    5744:	94 e0       	ldi	r25, 0x04	; 4
    5746:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5748:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <twi_rxBufferIndex>
      break;
    574c:	35 c0       	rjmp	.+106    	; 0x57b8 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    574e:	84 e0       	ldi	r24, 0x04	; 4
    5750:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5754:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5758:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    575c:	e0 91 3b 05 	lds	r30, 0x053B	; 0x80053b <twi_onSlaveTransmit>
    5760:	f0 91 3c 05 	lds	r31, 0x053C	; 0x80053c <twi_onSlaveTransmit+0x1>
    5764:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5766:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <twi_txBufferLength>
    576a:	81 11       	cpse	r24, r1
    576c:	05 c0       	rjmp	.+10     	; 0x5778 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    576e:	81 e0       	ldi	r24, 0x01	; 1
    5770:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5774:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5778:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <twi_txBufferIndex>
    577c:	81 e0       	ldi	r24, 0x01	; 1
    577e:	8e 0f       	add	r24, r30
    5780:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <twi_txBufferIndex>
    5784:	f0 e0       	ldi	r31, 0x00	; 0
    5786:	e9 50       	subi	r30, 0x09	; 9
    5788:	fb 4f       	sbci	r31, 0xFB	; 251
    578a:	80 81       	ld	r24, Z
    578c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5790:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <twi_txBufferIndex>
    5794:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <twi_txBufferLength>
    5798:	98 17       	cp	r25, r24
    579a:	08 f4       	brcc	.+2      	; 0x579e <__vector_39+0x21c>
    579c:	7d cf       	rjmp	.-262    	; 0x5698 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    579e:	85 e8       	ldi	r24, 0x85	; 133
    57a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57a4:	09 c0       	rjmp	.+18     	; 0x57b8 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    57a6:	85 ec       	ldi	r24, 0xC5	; 197
    57a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    57ac:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <twi_state>
      break;
    57b0:	03 c0       	rjmp	.+6      	; 0x57b8 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    57b2:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <twi_error>
      twi_stop();
    57b6:	ae de       	rcall	.-676    	; 0x5514 <twi_stop>
      break;
  }
}
    57b8:	ff 91       	pop	r31
    57ba:	ef 91       	pop	r30
    57bc:	bf 91       	pop	r27
    57be:	af 91       	pop	r26
    57c0:	9f 91       	pop	r25
    57c2:	8f 91       	pop	r24
    57c4:	7f 91       	pop	r23
    57c6:	6f 91       	pop	r22
    57c8:	5f 91       	pop	r21
    57ca:	4f 91       	pop	r20
    57cc:	3f 91       	pop	r19
    57ce:	2f 91       	pop	r18
    57d0:	0f 90       	pop	r0
    57d2:	0b be       	out	0x3b, r0	; 59
    57d4:	0f 90       	pop	r0
    57d6:	0f be       	out	0x3f, r0	; 63
    57d8:	0f 90       	pop	r0
    57da:	1f 90       	pop	r1
    57dc:	18 95       	reti

000057de <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    57de:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <_ZN7TwoWire14rxBufferLengthE>
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	20 91 7c 05 	lds	r18, 0x057C	; 0x80057c <_ZN7TwoWire13rxBufferIndexE>
    57e8:	82 1b       	sub	r24, r18
    57ea:	91 09       	sbc	r25, r1
    57ec:	08 95       	ret

000057ee <_ZN7TwoWire4readEv>:
    57ee:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <_ZN7TwoWire13rxBufferIndexE>
    57f2:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <_ZN7TwoWire14rxBufferLengthE>
    57f6:	98 17       	cp	r25, r24
    57f8:	50 f4       	brcc	.+20     	; 0x580e <_ZN7TwoWire4readEv+0x20>
    57fa:	e9 2f       	mov	r30, r25
    57fc:	f0 e0       	ldi	r31, 0x00	; 0
    57fe:	e3 58       	subi	r30, 0x83	; 131
    5800:	fa 4f       	sbci	r31, 0xFA	; 250
    5802:	20 81       	ld	r18, Z
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	9f 5f       	subi	r25, 0xFF	; 255
    5808:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <_ZN7TwoWire13rxBufferIndexE>
    580c:	02 c0       	rjmp	.+4      	; 0x5812 <_ZN7TwoWire4readEv+0x24>
    580e:	2f ef       	ldi	r18, 0xFF	; 255
    5810:	3f ef       	ldi	r19, 0xFF	; 255
    5812:	c9 01       	movw	r24, r18
    5814:	08 95       	ret

00005816 <_ZN7TwoWire4peekEv>:
    5816:	e0 91 7c 05 	lds	r30, 0x057C	; 0x80057c <_ZN7TwoWire13rxBufferIndexE>
    581a:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <_ZN7TwoWire14rxBufferLengthE>
    581e:	e8 17       	cp	r30, r24
    5820:	30 f4       	brcc	.+12     	; 0x582e <_ZN7TwoWire4peekEv+0x18>
    5822:	f0 e0       	ldi	r31, 0x00	; 0
    5824:	e3 58       	subi	r30, 0x83	; 131
    5826:	fa 4f       	sbci	r31, 0xFA	; 250
    5828:	80 81       	ld	r24, Z
    582a:	90 e0       	ldi	r25, 0x00	; 0
    582c:	08 95       	ret
    582e:	8f ef       	ldi	r24, 0xFF	; 255
    5830:	9f ef       	ldi	r25, 0xFF	; 255
    5832:	08 95       	ret

00005834 <_ZN7TwoWire5flushEv>:
    5834:	08 95       	ret

00005836 <_ZN7TwoWire16onReceiveServiceEPhi>:
    5836:	cf 93       	push	r28
    5838:	df 93       	push	r29
    583a:	ec 01       	movw	r28, r24
    583c:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <_ZN7TwoWire14user_onReceiveE>
    5840:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <_ZN7TwoWire14user_onReceiveE+0x1>
    5844:	30 97       	sbiw	r30, 0x00	; 0
    5846:	f1 f0       	breq	.+60     	; 0x5884 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5848:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <_ZN7TwoWire13rxBufferIndexE>
    584c:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <_ZN7TwoWire14rxBufferLengthE>
    5850:	98 17       	cp	r25, r24
    5852:	c0 f0       	brcs	.+48     	; 0x5884 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	29 2f       	mov	r18, r25
    5858:	30 e0       	ldi	r19, 0x00	; 0
    585a:	26 17       	cp	r18, r22
    585c:	37 07       	cpc	r19, r23
    585e:	54 f4       	brge	.+20     	; 0x5874 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    5860:	de 01       	movw	r26, r28
    5862:	a2 0f       	add	r26, r18
    5864:	b3 1f       	adc	r27, r19
    5866:	4c 91       	ld	r20, X
    5868:	d9 01       	movw	r26, r18
    586a:	a3 58       	subi	r26, 0x83	; 131
    586c:	ba 4f       	sbci	r27, 0xFA	; 250
    586e:	4c 93       	st	X, r20
    5870:	9f 5f       	subi	r25, 0xFF	; 255
    5872:	f1 cf       	rjmp	.-30     	; 0x5856 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5874:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <_ZN7TwoWire13rxBufferIndexE>
    5878:	60 93 7b 05 	sts	0x057B, r22	; 0x80057b <_ZN7TwoWire14rxBufferLengthE>
    587c:	cb 01       	movw	r24, r22
    587e:	df 91       	pop	r29
    5880:	cf 91       	pop	r28
    5882:	19 94       	eijmp
    5884:	df 91       	pop	r29
    5886:	cf 91       	pop	r28
    5888:	08 95       	ret

0000588a <_ZN7TwoWire16onRequestServiceEv>:
    588a:	e0 91 55 05 	lds	r30, 0x0555	; 0x800555 <_ZN7TwoWire14user_onRequestE>
    588e:	f0 91 56 05 	lds	r31, 0x0556	; 0x800556 <_ZN7TwoWire14user_onRequestE+0x1>
    5892:	30 97       	sbiw	r30, 0x00	; 0
    5894:	29 f0       	breq	.+10     	; 0x58a0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    5896:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <_ZN7TwoWire13txBufferIndexE>
    589a:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <_ZN7TwoWire14txBufferLengthE>
    589e:	19 94       	eijmp
    58a0:	08 95       	ret

000058a2 <_ZN7TwoWire5writeEPKhj>:
    58a2:	cf 92       	push	r12
    58a4:	df 92       	push	r13
    58a6:	ef 92       	push	r14
    58a8:	ff 92       	push	r15
    58aa:	0f 93       	push	r16
    58ac:	1f 93       	push	r17
    58ae:	cf 93       	push	r28
    58b0:	df 93       	push	r29
    58b2:	7c 01       	movw	r14, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	8a 01       	movw	r16, r20
    58b8:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <_ZN7TwoWire12transmittingE>
    58bc:	22 23       	and	r18, r18
    58be:	89 f0       	breq	.+34     	; 0x58e2 <_ZN7TwoWire5writeEPKhj+0x40>
    58c0:	eb 01       	movw	r28, r22
    58c2:	6b 01       	movw	r12, r22
    58c4:	c4 0e       	add	r12, r20
    58c6:	d5 1e       	adc	r13, r21
    58c8:	cc 15       	cp	r28, r12
    58ca:	dd 05       	cpc	r29, r13
    58cc:	61 f0       	breq	.+24     	; 0x58e6 <_ZN7TwoWire5writeEPKhj+0x44>
    58ce:	69 91       	ld	r22, Y+
    58d0:	d7 01       	movw	r26, r14
    58d2:	ed 91       	ld	r30, X+
    58d4:	fc 91       	ld	r31, X
    58d6:	01 90       	ld	r0, Z+
    58d8:	f0 81       	ld	r31, Z
    58da:	e0 2d       	mov	r30, r0
    58dc:	c7 01       	movw	r24, r14
    58de:	19 95       	eicall
    58e0:	f3 cf       	rjmp	.-26     	; 0x58c8 <_ZN7TwoWire5writeEPKhj+0x26>
    58e2:	64 2f       	mov	r22, r20
    58e4:	f5 db       	rcall	.-2070   	; 0x50d0 <twi_transmit>
    58e6:	c8 01       	movw	r24, r16
    58e8:	df 91       	pop	r29
    58ea:	cf 91       	pop	r28
    58ec:	1f 91       	pop	r17
    58ee:	0f 91       	pop	r16
    58f0:	ff 90       	pop	r15
    58f2:	ef 90       	pop	r14
    58f4:	df 90       	pop	r13
    58f6:	cf 90       	pop	r12
    58f8:	08 95       	ret

000058fa <_ZN7TwoWire5writeEh>:
    58fa:	cf 93       	push	r28
    58fc:	df 93       	push	r29
    58fe:	1f 92       	push	r1
    5900:	cd b7       	in	r28, 0x3d	; 61
    5902:	de b7       	in	r29, 0x3e	; 62
    5904:	69 83       	std	Y+1, r22	; 0x01
    5906:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <_ZN7TwoWire12transmittingE>
    590a:	22 23       	and	r18, r18
    590c:	d1 f0       	breq	.+52     	; 0x5942 <_ZN7TwoWire5writeEh+0x48>
    590e:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <_ZN7TwoWire14txBufferLengthE>
    5912:	20 32       	cpi	r18, 0x20	; 32
    5914:	40 f0       	brcs	.+16     	; 0x5926 <_ZN7TwoWire5writeEh+0x2c>
    5916:	21 e0       	ldi	r18, 0x01	; 1
    5918:	30 e0       	ldi	r19, 0x00	; 0
    591a:	fc 01       	movw	r30, r24
    591c:	33 83       	std	Z+3, r19	; 0x03
    591e:	22 83       	std	Z+2, r18	; 0x02
    5920:	80 e0       	ldi	r24, 0x00	; 0
    5922:	90 e0       	ldi	r25, 0x00	; 0
    5924:	14 c0       	rjmp	.+40     	; 0x594e <_ZN7TwoWire5writeEh+0x54>
    5926:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <_ZN7TwoWire13txBufferIndexE>
    592a:	e8 2f       	mov	r30, r24
    592c:	f0 e0       	ldi	r31, 0x00	; 0
    592e:	e6 5a       	subi	r30, 0xA6	; 166
    5930:	fa 4f       	sbci	r31, 0xFA	; 250
    5932:	99 81       	ldd	r25, Y+1	; 0x01
    5934:	90 83       	st	Z, r25
    5936:	8f 5f       	subi	r24, 0xFF	; 255
    5938:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <_ZN7TwoWire13txBufferIndexE>
    593c:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <_ZN7TwoWire14txBufferLengthE>
    5940:	04 c0       	rjmp	.+8      	; 0x594a <_ZN7TwoWire5writeEh+0x50>
    5942:	61 e0       	ldi	r22, 0x01	; 1
    5944:	ce 01       	movw	r24, r28
    5946:	01 96       	adiw	r24, 0x01	; 1
    5948:	c3 db       	rcall	.-2170   	; 0x50d0 <twi_transmit>
    594a:	81 e0       	ldi	r24, 0x01	; 1
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	0f 90       	pop	r0
    5950:	df 91       	pop	r29
    5952:	cf 91       	pop	r28
    5954:	08 95       	ret

00005956 <_ZN7TwoWireC1Ev>:
    5956:	fc 01       	movw	r30, r24
    5958:	13 82       	std	Z+3, r1	; 0x03
    595a:	12 82       	std	Z+2, r1	; 0x02
    595c:	88 ee       	ldi	r24, 0xE8	; 232
    595e:	93 e0       	ldi	r25, 0x03	; 3
    5960:	a0 e0       	ldi	r26, 0x00	; 0
    5962:	b0 e0       	ldi	r27, 0x00	; 0
    5964:	84 83       	std	Z+4, r24	; 0x04
    5966:	95 83       	std	Z+5, r25	; 0x05
    5968:	a6 83       	std	Z+6, r26	; 0x06
    596a:	b7 83       	std	Z+7, r27	; 0x07
    596c:	8d e0       	ldi	r24, 0x0D	; 13
    596e:	93 e0       	ldi	r25, 0x03	; 3
    5970:	91 83       	std	Z+1, r25	; 0x01
    5972:	80 83       	st	Z, r24
    5974:	08 95       	ret

00005976 <_ZN7TwoWire5beginEv>:
    5976:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <_ZN7TwoWire13rxBufferIndexE>
    597a:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <_ZN7TwoWire14rxBufferLengthE>
    597e:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <_ZN7TwoWire13txBufferIndexE>
    5982:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <_ZN7TwoWire14txBufferLengthE>
    5986:	65 db       	rcall	.-2358   	; 0x5052 <twi_init>
    5988:	85 e4       	ldi	r24, 0x45	; 69
    598a:	9c e2       	ldi	r25, 0x2C	; 44
    598c:	ce db       	rcall	.-2148   	; 0x512a <twi_attachSlaveTxEvent>
    598e:	8b e1       	ldi	r24, 0x1B	; 27
    5990:	9c e2       	ldi	r25, 0x2C	; 44
    5992:	c6 cb       	rjmp	.-2164   	; 0x5120 <twi_attachSlaveRxEvent>

00005994 <_ZN7TwoWire8setClockEm>:
    5994:	cb 01       	movw	r24, r22
    5996:	ba 01       	movw	r22, r20
    5998:	87 cb       	rjmp	.-2290   	; 0x50a8 <twi_setFrequency>

0000599a <_ZN7TwoWire17beginTransmissionEh>:
    599a:	81 e0       	ldi	r24, 0x01	; 1
    599c:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <_ZN7TwoWire12transmittingE>
    59a0:	60 93 7a 05 	sts	0x057A, r22	; 0x80057a <_ZN7TwoWire9txAddressE>
    59a4:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <_ZN7TwoWire13txBufferIndexE>
    59a8:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <_ZN7TwoWire14txBufferLengthE>
    59ac:	08 95       	ret

000059ae <_ZN7TwoWire17beginTransmissionEi>:
    59ae:	f5 cf       	rjmp	.-22     	; 0x599a <_ZN7TwoWire17beginTransmissionEh>

000059b0 <_ZN7TwoWire15endTransmissionEh>:
    59b0:	0f 93       	push	r16
    59b2:	06 2f       	mov	r16, r22
    59b4:	21 e0       	ldi	r18, 0x01	; 1
    59b6:	40 91 58 05 	lds	r20, 0x0558	; 0x800558 <_ZN7TwoWire14txBufferLengthE>
    59ba:	6a e5       	ldi	r22, 0x5A	; 90
    59bc:	75 e0       	ldi	r23, 0x05	; 5
    59be:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <_ZN7TwoWire9txAddressE>
    59c2:	b9 dc       	rcall	.-1678   	; 0x5336 <twi_writeTo>
    59c4:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <_ZN7TwoWire13txBufferIndexE>
    59c8:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <_ZN7TwoWire14txBufferLengthE>
    59cc:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <_ZN7TwoWire12transmittingE>
    59d0:	0f 91       	pop	r16
    59d2:	08 95       	ret

000059d4 <_ZN7TwoWire11requestFromEhhmhh>:
    59d4:	4f 92       	push	r4
    59d6:	5f 92       	push	r5
    59d8:	6f 92       	push	r6
    59da:	7f 92       	push	r7
    59dc:	af 92       	push	r10
    59de:	bf 92       	push	r11
    59e0:	cf 92       	push	r12
    59e2:	ef 92       	push	r14
    59e4:	ff 92       	push	r15
    59e6:	0f 93       	push	r16
    59e8:	1f 93       	push	r17
    59ea:	cf 93       	push	r28
    59ec:	df 93       	push	r29
    59ee:	5c 01       	movw	r10, r24
    59f0:	f6 2e       	mov	r15, r22
    59f2:	d4 2f       	mov	r29, r20
    59f4:	28 01       	movw	r4, r16
    59f6:	39 01       	movw	r6, r18
    59f8:	ee 20       	and	r14, r14
    59fa:	11 f1       	breq	.+68     	; 0x5a40 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    59fc:	ce df       	rcall	.-100    	; 0x599a <_ZN7TwoWire17beginTransmissionEh>
    59fe:	ce 2d       	mov	r28, r14
    5a00:	c4 30       	cpi	r28, 0x04	; 4
    5a02:	08 f0       	brcs	.+2      	; 0x5a06 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    5a04:	c3 e0       	ldi	r28, 0x03	; 3
    5a06:	c1 50       	subi	r28, 0x01	; 1
    5a08:	c0 f0       	brcs	.+48     	; 0x5a3a <_ZN7TwoWire11requestFromEhhmhh+0x66>
    5a0a:	28 e0       	ldi	r18, 0x08	; 8
    5a0c:	c2 9f       	mul	r28, r18
    5a0e:	c0 01       	movw	r24, r0
    5a10:	11 24       	eor	r1, r1
    5a12:	a3 01       	movw	r20, r6
    5a14:	92 01       	movw	r18, r4
    5a16:	04 c0       	rjmp	.+8      	; 0x5a20 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    5a18:	56 95       	lsr	r21
    5a1a:	47 95       	ror	r20
    5a1c:	37 95       	ror	r19
    5a1e:	27 95       	ror	r18
    5a20:	8a 95       	dec	r24
    5a22:	d2 f7       	brpl	.-12     	; 0x5a18 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    5a24:	ca 01       	movw	r24, r20
    5a26:	b9 01       	movw	r22, r18
    5a28:	d5 01       	movw	r26, r10
    5a2a:	ed 91       	ld	r30, X+
    5a2c:	fc 91       	ld	r31, X
    5a2e:	01 90       	ld	r0, Z+
    5a30:	f0 81       	ld	r31, Z
    5a32:	e0 2d       	mov	r30, r0
    5a34:	c5 01       	movw	r24, r10
    5a36:	19 95       	eicall
    5a38:	e6 cf       	rjmp	.-52     	; 0x5a06 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    5a3a:	60 e0       	ldi	r22, 0x00	; 0
    5a3c:	c5 01       	movw	r24, r10
    5a3e:	b8 df       	rcall	.-144    	; 0x59b0 <_ZN7TwoWire15endTransmissionEh>
    5a40:	4d 2f       	mov	r20, r29
    5a42:	d1 32       	cpi	r29, 0x21	; 33
    5a44:	08 f0       	brcs	.+2      	; 0x5a48 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    5a46:	40 e2       	ldi	r20, 0x20	; 32
    5a48:	2c 2d       	mov	r18, r12
    5a4a:	6d e7       	ldi	r22, 0x7D	; 125
    5a4c:	75 e0       	ldi	r23, 0x05	; 5
    5a4e:	8f 2d       	mov	r24, r15
    5a50:	8b db       	rcall	.-2282   	; 0x5168 <twi_readFrom>
    5a52:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <_ZN7TwoWire13rxBufferIndexE>
    5a56:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <_ZN7TwoWire14rxBufferLengthE>
    5a5a:	df 91       	pop	r29
    5a5c:	cf 91       	pop	r28
    5a5e:	1f 91       	pop	r17
    5a60:	0f 91       	pop	r16
    5a62:	ff 90       	pop	r15
    5a64:	ef 90       	pop	r14
    5a66:	cf 90       	pop	r12
    5a68:	bf 90       	pop	r11
    5a6a:	af 90       	pop	r10
    5a6c:	7f 90       	pop	r7
    5a6e:	6f 90       	pop	r6
    5a70:	5f 90       	pop	r5
    5a72:	4f 90       	pop	r4
    5a74:	08 95       	ret

00005a76 <_ZN7TwoWire11requestFromEhhh>:
    5a76:	cf 92       	push	r12
    5a78:	ef 92       	push	r14
    5a7a:	0f 93       	push	r16
    5a7c:	1f 93       	push	r17
    5a7e:	c2 2e       	mov	r12, r18
    5a80:	e1 2c       	mov	r14, r1
    5a82:	00 e0       	ldi	r16, 0x00	; 0
    5a84:	10 e0       	ldi	r17, 0x00	; 0
    5a86:	98 01       	movw	r18, r16
    5a88:	a5 df       	rcall	.-182    	; 0x59d4 <_ZN7TwoWire11requestFromEhhmhh>
    5a8a:	1f 91       	pop	r17
    5a8c:	0f 91       	pop	r16
    5a8e:	ef 90       	pop	r14
    5a90:	cf 90       	pop	r12
    5a92:	08 95       	ret

00005a94 <_ZN7TwoWire11requestFromEii>:
    5a94:	21 e0       	ldi	r18, 0x01	; 1
    5a96:	ef cf       	rjmp	.-34     	; 0x5a76 <_ZN7TwoWire11requestFromEhhh>

00005a98 <_ZN7TwoWire15endTransmissionEv>:
    5a98:	61 e0       	ldi	r22, 0x01	; 1
    5a9a:	8a cf       	rjmp	.-236    	; 0x59b0 <_ZN7TwoWire15endTransmissionEh>

00005a9c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5a9c:	87 e4       	ldi	r24, 0x47	; 71
    5a9e:	95 e0       	ldi	r25, 0x05	; 5
    5aa0:	5a cf       	rjmp	.-332    	; 0x5956 <_ZN7TwoWireC1Ev>

00005aa2 <_Z11GetDateTimev>:
#include "TimeAndDate.h"

RTCDateTime GetDateTime()
{
    5aa2:	cf 93       	push	r28
    5aa4:	df 93       	push	r29
    5aa6:	ec 01       	movw	r28, r24
	return clock.getDateTime();
    5aa8:	6d e6       	ldi	r22, 0x6D	; 109
    5aaa:	73 e0       	ldi	r23, 0x03	; 3
    5aac:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <_ZN6DS323111getDateTimeEv>
}
    5ab0:	ce 01       	movw	r24, r28
    5ab2:	df 91       	pop	r29
    5ab4:	cf 91       	pop	r28
    5ab6:	08 95       	ret

00005ab8 <_Z14AddLeadingZeroi>:

int AddLeadingZero(int num)
{
    5ab8:	cf 93       	push	r28
    5aba:	df 93       	push	r29
    5abc:	ec 01       	movw	r28, r24
	if (num < 10)
    5abe:	0a 97       	sbiw	r24, 0x0a	; 10
    5ac0:	2c f4       	brge	.+10     	; 0x5acc <_Z14AddLeadingZeroi+0x14>
	{
		lcd.print("0");
    5ac2:	67 e6       	ldi	r22, 0x67	; 103
    5ac4:	72 e0       	ldi	r23, 0x02	; 2
    5ac6:	8f e4       	ldi	r24, 0x4F	; 79
    5ac8:	93 e0       	ldi	r25, 0x03	; 3
    5aca:	fa d3       	rcall	.+2036   	; 0x62c0 <_ZN5Print5printEPKc>
		return num;
	}
	return num;
    5acc:	ce 01       	movw	r24, r28
    5ace:	df 91       	pop	r29
    5ad0:	cf 91       	pop	r28
    5ad2:	08 95       	ret

00005ad4 <__subsf3>:
    5ad4:	50 58       	subi	r21, 0x80	; 128

00005ad6 <__addsf3>:
    5ad6:	bb 27       	eor	r27, r27
    5ad8:	aa 27       	eor	r26, r26
    5ada:	0e d0       	rcall	.+28     	; 0x5af8 <__addsf3x>
    5adc:	dc c0       	rjmp	.+440    	; 0x5c96 <__fp_round>
    5ade:	cd d0       	rcall	.+410    	; 0x5c7a <__fp_pscA>
    5ae0:	30 f0       	brcs	.+12     	; 0x5aee <__addsf3+0x18>
    5ae2:	d2 d0       	rcall	.+420    	; 0x5c88 <__fp_pscB>
    5ae4:	20 f0       	brcs	.+8      	; 0x5aee <__addsf3+0x18>
    5ae6:	31 f4       	brne	.+12     	; 0x5af4 <__addsf3+0x1e>
    5ae8:	9f 3f       	cpi	r25, 0xFF	; 255
    5aea:	11 f4       	brne	.+4      	; 0x5af0 <__addsf3+0x1a>
    5aec:	1e f4       	brtc	.+6      	; 0x5af4 <__addsf3+0x1e>
    5aee:	c2 c0       	rjmp	.+388    	; 0x5c74 <__fp_nan>
    5af0:	0e f4       	brtc	.+2      	; 0x5af4 <__addsf3+0x1e>
    5af2:	e0 95       	com	r30
    5af4:	e7 fb       	bst	r30, 7
    5af6:	b8 c0       	rjmp	.+368    	; 0x5c68 <__fp_inf>

00005af8 <__addsf3x>:
    5af8:	e9 2f       	mov	r30, r25
    5afa:	de d0       	rcall	.+444    	; 0x5cb8 <__fp_split3>
    5afc:	80 f3       	brcs	.-32     	; 0x5ade <__addsf3+0x8>
    5afe:	ba 17       	cp	r27, r26
    5b00:	62 07       	cpc	r22, r18
    5b02:	73 07       	cpc	r23, r19
    5b04:	84 07       	cpc	r24, r20
    5b06:	95 07       	cpc	r25, r21
    5b08:	18 f0       	brcs	.+6      	; 0x5b10 <__addsf3x+0x18>
    5b0a:	71 f4       	brne	.+28     	; 0x5b28 <__addsf3x+0x30>
    5b0c:	9e f5       	brtc	.+102    	; 0x5b74 <__addsf3x+0x7c>
    5b0e:	f6 c0       	rjmp	.+492    	; 0x5cfc <__fp_zero>
    5b10:	0e f4       	brtc	.+2      	; 0x5b14 <__addsf3x+0x1c>
    5b12:	e0 95       	com	r30
    5b14:	0b 2e       	mov	r0, r27
    5b16:	ba 2f       	mov	r27, r26
    5b18:	a0 2d       	mov	r26, r0
    5b1a:	0b 01       	movw	r0, r22
    5b1c:	b9 01       	movw	r22, r18
    5b1e:	90 01       	movw	r18, r0
    5b20:	0c 01       	movw	r0, r24
    5b22:	ca 01       	movw	r24, r20
    5b24:	a0 01       	movw	r20, r0
    5b26:	11 24       	eor	r1, r1
    5b28:	ff 27       	eor	r31, r31
    5b2a:	59 1b       	sub	r21, r25
    5b2c:	99 f0       	breq	.+38     	; 0x5b54 <__addsf3x+0x5c>
    5b2e:	59 3f       	cpi	r21, 0xF9	; 249
    5b30:	50 f4       	brcc	.+20     	; 0x5b46 <__addsf3x+0x4e>
    5b32:	50 3e       	cpi	r21, 0xE0	; 224
    5b34:	68 f1       	brcs	.+90     	; 0x5b90 <__addsf3x+0x98>
    5b36:	1a 16       	cp	r1, r26
    5b38:	f0 40       	sbci	r31, 0x00	; 0
    5b3a:	a2 2f       	mov	r26, r18
    5b3c:	23 2f       	mov	r18, r19
    5b3e:	34 2f       	mov	r19, r20
    5b40:	44 27       	eor	r20, r20
    5b42:	58 5f       	subi	r21, 0xF8	; 248
    5b44:	f3 cf       	rjmp	.-26     	; 0x5b2c <__addsf3x+0x34>
    5b46:	46 95       	lsr	r20
    5b48:	37 95       	ror	r19
    5b4a:	27 95       	ror	r18
    5b4c:	a7 95       	ror	r26
    5b4e:	f0 40       	sbci	r31, 0x00	; 0
    5b50:	53 95       	inc	r21
    5b52:	c9 f7       	brne	.-14     	; 0x5b46 <__addsf3x+0x4e>
    5b54:	7e f4       	brtc	.+30     	; 0x5b74 <__addsf3x+0x7c>
    5b56:	1f 16       	cp	r1, r31
    5b58:	ba 0b       	sbc	r27, r26
    5b5a:	62 0b       	sbc	r22, r18
    5b5c:	73 0b       	sbc	r23, r19
    5b5e:	84 0b       	sbc	r24, r20
    5b60:	ba f0       	brmi	.+46     	; 0x5b90 <__addsf3x+0x98>
    5b62:	91 50       	subi	r25, 0x01	; 1
    5b64:	a1 f0       	breq	.+40     	; 0x5b8e <__addsf3x+0x96>
    5b66:	ff 0f       	add	r31, r31
    5b68:	bb 1f       	adc	r27, r27
    5b6a:	66 1f       	adc	r22, r22
    5b6c:	77 1f       	adc	r23, r23
    5b6e:	88 1f       	adc	r24, r24
    5b70:	c2 f7       	brpl	.-16     	; 0x5b62 <__addsf3x+0x6a>
    5b72:	0e c0       	rjmp	.+28     	; 0x5b90 <__addsf3x+0x98>
    5b74:	ba 0f       	add	r27, r26
    5b76:	62 1f       	adc	r22, r18
    5b78:	73 1f       	adc	r23, r19
    5b7a:	84 1f       	adc	r24, r20
    5b7c:	48 f4       	brcc	.+18     	; 0x5b90 <__addsf3x+0x98>
    5b7e:	87 95       	ror	r24
    5b80:	77 95       	ror	r23
    5b82:	67 95       	ror	r22
    5b84:	b7 95       	ror	r27
    5b86:	f7 95       	ror	r31
    5b88:	9e 3f       	cpi	r25, 0xFE	; 254
    5b8a:	08 f0       	brcs	.+2      	; 0x5b8e <__addsf3x+0x96>
    5b8c:	b3 cf       	rjmp	.-154    	; 0x5af4 <__addsf3+0x1e>
    5b8e:	93 95       	inc	r25
    5b90:	88 0f       	add	r24, r24
    5b92:	08 f0       	brcs	.+2      	; 0x5b96 <__addsf3x+0x9e>
    5b94:	99 27       	eor	r25, r25
    5b96:	ee 0f       	add	r30, r30
    5b98:	97 95       	ror	r25
    5b9a:	87 95       	ror	r24
    5b9c:	08 95       	ret

00005b9e <__cmpsf2>:
    5b9e:	40 d0       	rcall	.+128    	; 0x5c20 <__fp_cmp>
    5ba0:	08 f4       	brcc	.+2      	; 0x5ba4 <__cmpsf2+0x6>
    5ba2:	81 e0       	ldi	r24, 0x01	; 1
    5ba4:	08 95       	ret

00005ba6 <__floatunsisf>:
    5ba6:	e8 94       	clt
    5ba8:	09 c0       	rjmp	.+18     	; 0x5bbc <__floatsisf+0x12>

00005baa <__floatsisf>:
    5baa:	97 fb       	bst	r25, 7
    5bac:	3e f4       	brtc	.+14     	; 0x5bbc <__floatsisf+0x12>
    5bae:	90 95       	com	r25
    5bb0:	80 95       	com	r24
    5bb2:	70 95       	com	r23
    5bb4:	61 95       	neg	r22
    5bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    5bba:	9f 4f       	sbci	r25, 0xFF	; 255
    5bbc:	99 23       	and	r25, r25
    5bbe:	a9 f0       	breq	.+42     	; 0x5bea <__floatsisf+0x40>
    5bc0:	f9 2f       	mov	r31, r25
    5bc2:	96 e9       	ldi	r25, 0x96	; 150
    5bc4:	bb 27       	eor	r27, r27
    5bc6:	93 95       	inc	r25
    5bc8:	f6 95       	lsr	r31
    5bca:	87 95       	ror	r24
    5bcc:	77 95       	ror	r23
    5bce:	67 95       	ror	r22
    5bd0:	b7 95       	ror	r27
    5bd2:	f1 11       	cpse	r31, r1
    5bd4:	f8 cf       	rjmp	.-16     	; 0x5bc6 <__floatsisf+0x1c>
    5bd6:	fa f4       	brpl	.+62     	; 0x5c16 <__floatsisf+0x6c>
    5bd8:	bb 0f       	add	r27, r27
    5bda:	11 f4       	brne	.+4      	; 0x5be0 <__floatsisf+0x36>
    5bdc:	60 ff       	sbrs	r22, 0
    5bde:	1b c0       	rjmp	.+54     	; 0x5c16 <__floatsisf+0x6c>
    5be0:	6f 5f       	subi	r22, 0xFF	; 255
    5be2:	7f 4f       	sbci	r23, 0xFF	; 255
    5be4:	8f 4f       	sbci	r24, 0xFF	; 255
    5be6:	9f 4f       	sbci	r25, 0xFF	; 255
    5be8:	16 c0       	rjmp	.+44     	; 0x5c16 <__floatsisf+0x6c>
    5bea:	88 23       	and	r24, r24
    5bec:	11 f0       	breq	.+4      	; 0x5bf2 <__floatsisf+0x48>
    5bee:	96 e9       	ldi	r25, 0x96	; 150
    5bf0:	11 c0       	rjmp	.+34     	; 0x5c14 <__floatsisf+0x6a>
    5bf2:	77 23       	and	r23, r23
    5bf4:	21 f0       	breq	.+8      	; 0x5bfe <__floatsisf+0x54>
    5bf6:	9e e8       	ldi	r25, 0x8E	; 142
    5bf8:	87 2f       	mov	r24, r23
    5bfa:	76 2f       	mov	r23, r22
    5bfc:	05 c0       	rjmp	.+10     	; 0x5c08 <__floatsisf+0x5e>
    5bfe:	66 23       	and	r22, r22
    5c00:	71 f0       	breq	.+28     	; 0x5c1e <__floatsisf+0x74>
    5c02:	96 e8       	ldi	r25, 0x86	; 134
    5c04:	86 2f       	mov	r24, r22
    5c06:	70 e0       	ldi	r23, 0x00	; 0
    5c08:	60 e0       	ldi	r22, 0x00	; 0
    5c0a:	2a f0       	brmi	.+10     	; 0x5c16 <__floatsisf+0x6c>
    5c0c:	9a 95       	dec	r25
    5c0e:	66 0f       	add	r22, r22
    5c10:	77 1f       	adc	r23, r23
    5c12:	88 1f       	adc	r24, r24
    5c14:	da f7       	brpl	.-10     	; 0x5c0c <__floatsisf+0x62>
    5c16:	88 0f       	add	r24, r24
    5c18:	96 95       	lsr	r25
    5c1a:	87 95       	ror	r24
    5c1c:	97 f9       	bld	r25, 7
    5c1e:	08 95       	ret

00005c20 <__fp_cmp>:
    5c20:	99 0f       	add	r25, r25
    5c22:	00 08       	sbc	r0, r0
    5c24:	55 0f       	add	r21, r21
    5c26:	aa 0b       	sbc	r26, r26
    5c28:	e0 e8       	ldi	r30, 0x80	; 128
    5c2a:	fe ef       	ldi	r31, 0xFE	; 254
    5c2c:	16 16       	cp	r1, r22
    5c2e:	17 06       	cpc	r1, r23
    5c30:	e8 07       	cpc	r30, r24
    5c32:	f9 07       	cpc	r31, r25
    5c34:	c0 f0       	brcs	.+48     	; 0x5c66 <__fp_cmp+0x46>
    5c36:	12 16       	cp	r1, r18
    5c38:	13 06       	cpc	r1, r19
    5c3a:	e4 07       	cpc	r30, r20
    5c3c:	f5 07       	cpc	r31, r21
    5c3e:	98 f0       	brcs	.+38     	; 0x5c66 <__fp_cmp+0x46>
    5c40:	62 1b       	sub	r22, r18
    5c42:	73 0b       	sbc	r23, r19
    5c44:	84 0b       	sbc	r24, r20
    5c46:	95 0b       	sbc	r25, r21
    5c48:	39 f4       	brne	.+14     	; 0x5c58 <__fp_cmp+0x38>
    5c4a:	0a 26       	eor	r0, r26
    5c4c:	61 f0       	breq	.+24     	; 0x5c66 <__fp_cmp+0x46>
    5c4e:	23 2b       	or	r18, r19
    5c50:	24 2b       	or	r18, r20
    5c52:	25 2b       	or	r18, r21
    5c54:	21 f4       	brne	.+8      	; 0x5c5e <__fp_cmp+0x3e>
    5c56:	08 95       	ret
    5c58:	0a 26       	eor	r0, r26
    5c5a:	09 f4       	brne	.+2      	; 0x5c5e <__fp_cmp+0x3e>
    5c5c:	a1 40       	sbci	r26, 0x01	; 1
    5c5e:	a6 95       	lsr	r26
    5c60:	8f ef       	ldi	r24, 0xFF	; 255
    5c62:	81 1d       	adc	r24, r1
    5c64:	81 1d       	adc	r24, r1
    5c66:	08 95       	ret

00005c68 <__fp_inf>:
    5c68:	97 f9       	bld	r25, 7
    5c6a:	9f 67       	ori	r25, 0x7F	; 127
    5c6c:	80 e8       	ldi	r24, 0x80	; 128
    5c6e:	70 e0       	ldi	r23, 0x00	; 0
    5c70:	60 e0       	ldi	r22, 0x00	; 0
    5c72:	08 95       	ret

00005c74 <__fp_nan>:
    5c74:	9f ef       	ldi	r25, 0xFF	; 255
    5c76:	80 ec       	ldi	r24, 0xC0	; 192
    5c78:	08 95       	ret

00005c7a <__fp_pscA>:
    5c7a:	00 24       	eor	r0, r0
    5c7c:	0a 94       	dec	r0
    5c7e:	16 16       	cp	r1, r22
    5c80:	17 06       	cpc	r1, r23
    5c82:	18 06       	cpc	r1, r24
    5c84:	09 06       	cpc	r0, r25
    5c86:	08 95       	ret

00005c88 <__fp_pscB>:
    5c88:	00 24       	eor	r0, r0
    5c8a:	0a 94       	dec	r0
    5c8c:	12 16       	cp	r1, r18
    5c8e:	13 06       	cpc	r1, r19
    5c90:	14 06       	cpc	r1, r20
    5c92:	05 06       	cpc	r0, r21
    5c94:	08 95       	ret

00005c96 <__fp_round>:
    5c96:	09 2e       	mov	r0, r25
    5c98:	03 94       	inc	r0
    5c9a:	00 0c       	add	r0, r0
    5c9c:	11 f4       	brne	.+4      	; 0x5ca2 <__fp_round+0xc>
    5c9e:	88 23       	and	r24, r24
    5ca0:	52 f0       	brmi	.+20     	; 0x5cb6 <__fp_round+0x20>
    5ca2:	bb 0f       	add	r27, r27
    5ca4:	40 f4       	brcc	.+16     	; 0x5cb6 <__fp_round+0x20>
    5ca6:	bf 2b       	or	r27, r31
    5ca8:	11 f4       	brne	.+4      	; 0x5cae <__fp_round+0x18>
    5caa:	60 ff       	sbrs	r22, 0
    5cac:	04 c0       	rjmp	.+8      	; 0x5cb6 <__fp_round+0x20>
    5cae:	6f 5f       	subi	r22, 0xFF	; 255
    5cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    5cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb6:	08 95       	ret

00005cb8 <__fp_split3>:
    5cb8:	57 fd       	sbrc	r21, 7
    5cba:	90 58       	subi	r25, 0x80	; 128
    5cbc:	44 0f       	add	r20, r20
    5cbe:	55 1f       	adc	r21, r21
    5cc0:	59 f0       	breq	.+22     	; 0x5cd8 <__fp_splitA+0x10>
    5cc2:	5f 3f       	cpi	r21, 0xFF	; 255
    5cc4:	71 f0       	breq	.+28     	; 0x5ce2 <__fp_splitA+0x1a>
    5cc6:	47 95       	ror	r20

00005cc8 <__fp_splitA>:
    5cc8:	88 0f       	add	r24, r24
    5cca:	97 fb       	bst	r25, 7
    5ccc:	99 1f       	adc	r25, r25
    5cce:	61 f0       	breq	.+24     	; 0x5ce8 <__fp_splitA+0x20>
    5cd0:	9f 3f       	cpi	r25, 0xFF	; 255
    5cd2:	79 f0       	breq	.+30     	; 0x5cf2 <__fp_splitA+0x2a>
    5cd4:	87 95       	ror	r24
    5cd6:	08 95       	ret
    5cd8:	12 16       	cp	r1, r18
    5cda:	13 06       	cpc	r1, r19
    5cdc:	14 06       	cpc	r1, r20
    5cde:	55 1f       	adc	r21, r21
    5ce0:	f2 cf       	rjmp	.-28     	; 0x5cc6 <__fp_split3+0xe>
    5ce2:	46 95       	lsr	r20
    5ce4:	f1 df       	rcall	.-30     	; 0x5cc8 <__fp_splitA>
    5ce6:	08 c0       	rjmp	.+16     	; 0x5cf8 <__fp_splitA+0x30>
    5ce8:	16 16       	cp	r1, r22
    5cea:	17 06       	cpc	r1, r23
    5cec:	18 06       	cpc	r1, r24
    5cee:	99 1f       	adc	r25, r25
    5cf0:	f1 cf       	rjmp	.-30     	; 0x5cd4 <__fp_splitA+0xc>
    5cf2:	86 95       	lsr	r24
    5cf4:	71 05       	cpc	r23, r1
    5cf6:	61 05       	cpc	r22, r1
    5cf8:	08 94       	sec
    5cfa:	08 95       	ret

00005cfc <__fp_zero>:
    5cfc:	e8 94       	clt

00005cfe <__fp_szero>:
    5cfe:	bb 27       	eor	r27, r27
    5d00:	66 27       	eor	r22, r22
    5d02:	77 27       	eor	r23, r23
    5d04:	cb 01       	movw	r24, r22
    5d06:	97 f9       	bld	r25, 7
    5d08:	08 95       	ret

00005d0a <__gesf2>:
    5d0a:	8a df       	rcall	.-236    	; 0x5c20 <__fp_cmp>
    5d0c:	08 f4       	brcc	.+2      	; 0x5d10 <__gesf2+0x6>
    5d0e:	8f ef       	ldi	r24, 0xFF	; 255
    5d10:	08 95       	ret

00005d12 <__mulsf3>:
    5d12:	0b d0       	rcall	.+22     	; 0x5d2a <__mulsf3x>
    5d14:	c0 cf       	rjmp	.-128    	; 0x5c96 <__fp_round>
    5d16:	b1 df       	rcall	.-158    	; 0x5c7a <__fp_pscA>
    5d18:	28 f0       	brcs	.+10     	; 0x5d24 <__mulsf3+0x12>
    5d1a:	b6 df       	rcall	.-148    	; 0x5c88 <__fp_pscB>
    5d1c:	18 f0       	brcs	.+6      	; 0x5d24 <__mulsf3+0x12>
    5d1e:	95 23       	and	r25, r21
    5d20:	09 f0       	breq	.+2      	; 0x5d24 <__mulsf3+0x12>
    5d22:	a2 cf       	rjmp	.-188    	; 0x5c68 <__fp_inf>
    5d24:	a7 cf       	rjmp	.-178    	; 0x5c74 <__fp_nan>
    5d26:	11 24       	eor	r1, r1
    5d28:	ea cf       	rjmp	.-44     	; 0x5cfe <__fp_szero>

00005d2a <__mulsf3x>:
    5d2a:	c6 df       	rcall	.-116    	; 0x5cb8 <__fp_split3>
    5d2c:	a0 f3       	brcs	.-24     	; 0x5d16 <__mulsf3+0x4>

00005d2e <__mulsf3_pse>:
    5d2e:	95 9f       	mul	r25, r21
    5d30:	d1 f3       	breq	.-12     	; 0x5d26 <__mulsf3+0x14>
    5d32:	95 0f       	add	r25, r21
    5d34:	50 e0       	ldi	r21, 0x00	; 0
    5d36:	55 1f       	adc	r21, r21
    5d38:	62 9f       	mul	r22, r18
    5d3a:	f0 01       	movw	r30, r0
    5d3c:	72 9f       	mul	r23, r18
    5d3e:	bb 27       	eor	r27, r27
    5d40:	f0 0d       	add	r31, r0
    5d42:	b1 1d       	adc	r27, r1
    5d44:	63 9f       	mul	r22, r19
    5d46:	aa 27       	eor	r26, r26
    5d48:	f0 0d       	add	r31, r0
    5d4a:	b1 1d       	adc	r27, r1
    5d4c:	aa 1f       	adc	r26, r26
    5d4e:	64 9f       	mul	r22, r20
    5d50:	66 27       	eor	r22, r22
    5d52:	b0 0d       	add	r27, r0
    5d54:	a1 1d       	adc	r26, r1
    5d56:	66 1f       	adc	r22, r22
    5d58:	82 9f       	mul	r24, r18
    5d5a:	22 27       	eor	r18, r18
    5d5c:	b0 0d       	add	r27, r0
    5d5e:	a1 1d       	adc	r26, r1
    5d60:	62 1f       	adc	r22, r18
    5d62:	73 9f       	mul	r23, r19
    5d64:	b0 0d       	add	r27, r0
    5d66:	a1 1d       	adc	r26, r1
    5d68:	62 1f       	adc	r22, r18
    5d6a:	83 9f       	mul	r24, r19
    5d6c:	a0 0d       	add	r26, r0
    5d6e:	61 1d       	adc	r22, r1
    5d70:	22 1f       	adc	r18, r18
    5d72:	74 9f       	mul	r23, r20
    5d74:	33 27       	eor	r19, r19
    5d76:	a0 0d       	add	r26, r0
    5d78:	61 1d       	adc	r22, r1
    5d7a:	23 1f       	adc	r18, r19
    5d7c:	84 9f       	mul	r24, r20
    5d7e:	60 0d       	add	r22, r0
    5d80:	21 1d       	adc	r18, r1
    5d82:	82 2f       	mov	r24, r18
    5d84:	76 2f       	mov	r23, r22
    5d86:	6a 2f       	mov	r22, r26
    5d88:	11 24       	eor	r1, r1
    5d8a:	9f 57       	subi	r25, 0x7F	; 127
    5d8c:	50 40       	sbci	r21, 0x00	; 0
    5d8e:	8a f0       	brmi	.+34     	; 0x5db2 <__mulsf3_pse+0x84>
    5d90:	e1 f0       	breq	.+56     	; 0x5dca <__mulsf3_pse+0x9c>
    5d92:	88 23       	and	r24, r24
    5d94:	4a f0       	brmi	.+18     	; 0x5da8 <__mulsf3_pse+0x7a>
    5d96:	ee 0f       	add	r30, r30
    5d98:	ff 1f       	adc	r31, r31
    5d9a:	bb 1f       	adc	r27, r27
    5d9c:	66 1f       	adc	r22, r22
    5d9e:	77 1f       	adc	r23, r23
    5da0:	88 1f       	adc	r24, r24
    5da2:	91 50       	subi	r25, 0x01	; 1
    5da4:	50 40       	sbci	r21, 0x00	; 0
    5da6:	a9 f7       	brne	.-22     	; 0x5d92 <__mulsf3_pse+0x64>
    5da8:	9e 3f       	cpi	r25, 0xFE	; 254
    5daa:	51 05       	cpc	r21, r1
    5dac:	70 f0       	brcs	.+28     	; 0x5dca <__mulsf3_pse+0x9c>
    5dae:	5c cf       	rjmp	.-328    	; 0x5c68 <__fp_inf>
    5db0:	a6 cf       	rjmp	.-180    	; 0x5cfe <__fp_szero>
    5db2:	5f 3f       	cpi	r21, 0xFF	; 255
    5db4:	ec f3       	brlt	.-6      	; 0x5db0 <__mulsf3_pse+0x82>
    5db6:	98 3e       	cpi	r25, 0xE8	; 232
    5db8:	dc f3       	brlt	.-10     	; 0x5db0 <__mulsf3_pse+0x82>
    5dba:	86 95       	lsr	r24
    5dbc:	77 95       	ror	r23
    5dbe:	67 95       	ror	r22
    5dc0:	b7 95       	ror	r27
    5dc2:	f7 95       	ror	r31
    5dc4:	e7 95       	ror	r30
    5dc6:	9f 5f       	subi	r25, 0xFF	; 255
    5dc8:	c1 f7       	brne	.-16     	; 0x5dba <__mulsf3_pse+0x8c>
    5dca:	fe 2b       	or	r31, r30
    5dcc:	88 0f       	add	r24, r24
    5dce:	91 1d       	adc	r25, r1
    5dd0:	96 95       	lsr	r25
    5dd2:	87 95       	ror	r24
    5dd4:	97 f9       	bld	r25, 7
    5dd6:	08 95       	ret

00005dd8 <__cxa_pure_virtual>:
    5dd8:	0e 94 c8 3a 	call	0x7590	; 0x7590 <abort>

00005ddc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5ddc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5dde:	91 8d       	ldd	r25, Z+25	; 0x19
    5de0:	22 8d       	ldd	r18, Z+26	; 0x1a
    5de2:	89 2f       	mov	r24, r25
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	80 5c       	subi	r24, 0xC0	; 192
    5de8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dea:	82 1b       	sub	r24, r18
    5dec:	91 09       	sbc	r25, r1
}
    5dee:	8f 73       	andi	r24, 0x3F	; 63
    5df0:	99 27       	eor	r25, r25
    5df2:	08 95       	ret

00005df4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    5df4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    5df6:	91 8d       	ldd	r25, Z+25	; 0x19
    5df8:	82 8d       	ldd	r24, Z+26	; 0x1a
    5dfa:	98 17       	cp	r25, r24
    5dfc:	31 f0       	breq	.+12     	; 0x5e0a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5dfe:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e00:	e8 0f       	add	r30, r24
    5e02:	f1 1d       	adc	r31, r1
    5e04:	85 8d       	ldd	r24, Z+29	; 0x1d
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5e0a:	8f ef       	ldi	r24, 0xFF	; 255
    5e0c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5e0e:	08 95       	ret

00005e10 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    5e10:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    5e12:	91 8d       	ldd	r25, Z+25	; 0x19
    5e14:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e16:	98 17       	cp	r25, r24
    5e18:	61 f0       	breq	.+24     	; 0x5e32 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5e1a:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e1c:	df 01       	movw	r26, r30
    5e1e:	a8 0f       	add	r26, r24
    5e20:	b1 1d       	adc	r27, r1
    5e22:	5d 96       	adiw	r26, 0x1d	; 29
    5e24:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    5e26:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e28:	9f 5f       	subi	r25, 0xFF	; 255
    5e2a:	9f 73       	andi	r25, 0x3F	; 63
    5e2c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    5e2e:	90 e0       	ldi	r25, 0x00	; 0
    5e30:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5e32:	8f ef       	ldi	r24, 0xFF	; 255
    5e34:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    5e36:	08 95       	ret

00005e38 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    5e38:	fc 01       	movw	r30, r24
    5e3a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    5e3c:	44 8d       	ldd	r20, Z+28	; 0x1c
    5e3e:	25 2f       	mov	r18, r21
    5e40:	30 e0       	ldi	r19, 0x00	; 0
    5e42:	84 2f       	mov	r24, r20
    5e44:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    5e46:	82 1b       	sub	r24, r18
    5e48:	93 0b       	sbc	r25, r19
    5e4a:	54 17       	cp	r21, r20
    5e4c:	10 f0       	brcs	.+4      	; 0x5e52 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    5e4e:	cf 96       	adiw	r24, 0x3f	; 63
    5e50:	08 95       	ret
  return tail - head - 1;
    5e52:	01 97       	sbiw	r24, 0x01	; 1
}
    5e54:	08 95       	ret

00005e56 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5e56:	8a eb       	ldi	r24, 0xBA	; 186
    5e58:	90 e3       	ldi	r25, 0x30	; 48
    5e5a:	89 2b       	or	r24, r25
    5e5c:	39 f0       	breq	.+14     	; 0x5e6c <_Z14serialEventRunv+0x16>
    5e5e:	80 e0       	ldi	r24, 0x00	; 0
    5e60:	90 e0       	ldi	r25, 0x00	; 0
    5e62:	89 2b       	or	r24, r25
    5e64:	19 f0       	breq	.+6      	; 0x5e6c <_Z14serialEventRunv+0x16>
    5e66:	86 d1       	rcall	.+780    	; 0x6174 <_Z17Serial0_availablev>
    5e68:	81 11       	cpse	r24, r1
    5e6a:	25 c0       	rjmp	.+74     	; 0x5eb6 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5e6c:	80 e0       	ldi	r24, 0x00	; 0
    5e6e:	90 e0       	ldi	r25, 0x00	; 0
    5e70:	89 2b       	or	r24, r25
    5e72:	41 f0       	breq	.+16     	; 0x5e84 <_Z14serialEventRunv+0x2e>
    5e74:	80 e0       	ldi	r24, 0x00	; 0
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	89 2b       	or	r24, r25
    5e7a:	21 f0       	breq	.+8      	; 0x5e84 <_Z14serialEventRunv+0x2e>
    5e7c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5e80:	81 11       	cpse	r24, r1
    5e82:	1c c0       	rjmp	.+56     	; 0x5ebc <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5e84:	80 e0       	ldi	r24, 0x00	; 0
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	89 2b       	or	r24, r25
    5e8a:	41 f0       	breq	.+16     	; 0x5e9c <_Z14serialEventRunv+0x46>
    5e8c:	80 e0       	ldi	r24, 0x00	; 0
    5e8e:	90 e0       	ldi	r25, 0x00	; 0
    5e90:	89 2b       	or	r24, r25
    5e92:	21 f0       	breq	.+8      	; 0x5e9c <_Z14serialEventRunv+0x46>
    5e94:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5e98:	81 11       	cpse	r24, r1
    5e9a:	13 c0       	rjmp	.+38     	; 0x5ec2 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5e9c:	80 e0       	ldi	r24, 0x00	; 0
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	89 2b       	or	r24, r25
    5ea2:	a1 f0       	breq	.+40     	; 0x5ecc <_Z14serialEventRunv+0x76>
    5ea4:	80 e0       	ldi	r24, 0x00	; 0
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
    5ea8:	89 2b       	or	r24, r25
    5eaa:	81 f0       	breq	.+32     	; 0x5ecc <_Z14serialEventRunv+0x76>
    5eac:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5eb0:	81 11       	cpse	r24, r1
    5eb2:	0a c0       	rjmp	.+20     	; 0x5ec8 <_Z14serialEventRunv+0x72>
    5eb4:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5eb6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5eba:	d8 cf       	rjmp	.-80     	; 0x5e6c <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5ebc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5ec0:	e1 cf       	rjmp	.-62     	; 0x5e84 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5ec2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5ec6:	ea cf       	rjmp	.-44     	; 0x5e9c <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5ec8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5ecc:	08 95       	ret

00005ece <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5ece:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5ed0:	84 8d       	ldd	r24, Z+28	; 0x1c
    5ed2:	df 01       	movw	r26, r30
    5ed4:	a8 0f       	add	r26, r24
    5ed6:	b1 1d       	adc	r27, r1
    5ed8:	a3 5a       	subi	r26, 0xA3	; 163
    5eda:	bf 4f       	sbci	r27, 0xFF	; 255
    5edc:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5ede:	84 8d       	ldd	r24, Z+28	; 0x1c
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	01 96       	adiw	r24, 0x01	; 1
    5ee4:	8f 73       	andi	r24, 0x3F	; 63
    5ee6:	99 27       	eor	r25, r25
    5ee8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    5eea:	a6 89       	ldd	r26, Z+22	; 0x16
    5eec:	b7 89       	ldd	r27, Z+23	; 0x17
    5eee:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5ef0:	a0 89       	ldd	r26, Z+16	; 0x10
    5ef2:	b1 89       	ldd	r27, Z+17	; 0x11
    5ef4:	8c 91       	ld	r24, X
    5ef6:	83 70       	andi	r24, 0x03	; 3
    5ef8:	80 64       	ori	r24, 0x40	; 64
    5efa:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    5efc:	93 8d       	ldd	r25, Z+27	; 0x1b
    5efe:	84 8d       	ldd	r24, Z+28	; 0x1c
    5f00:	98 13       	cpse	r25, r24
    5f02:	06 c0       	rjmp	.+12     	; 0x5f10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5f04:	02 88       	ldd	r0, Z+18	; 0x12
    5f06:	f3 89       	ldd	r31, Z+19	; 0x13
    5f08:	e0 2d       	mov	r30, r0
    5f0a:	80 81       	ld	r24, Z
    5f0c:	8f 7d       	andi	r24, 0xDF	; 223
    5f0e:	80 83       	st	Z, r24
    5f10:	08 95       	ret

00005f12 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    5f12:	ef 92       	push	r14
    5f14:	ff 92       	push	r15
    5f16:	0f 93       	push	r16
    5f18:	1f 93       	push	r17
    5f1a:	cf 93       	push	r28
    5f1c:	df 93       	push	r29
    5f1e:	ec 01       	movw	r28, r24
  _written = true;
    5f20:	81 e0       	ldi	r24, 0x01	; 1
    5f22:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5f24:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5f26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5f28:	98 13       	cpse	r25, r24
    5f2a:	05 c0       	rjmp	.+10     	; 0x5f36 <_ZN14HardwareSerial5writeEh+0x24>
    5f2c:	e8 89       	ldd	r30, Y+16	; 0x10
    5f2e:	f9 89       	ldd	r31, Y+17	; 0x11
    5f30:	80 81       	ld	r24, Z
    5f32:	85 fd       	sbrc	r24, 5
    5f34:	25 c0       	rjmp	.+74     	; 0x5f80 <_ZN14HardwareSerial5writeEh+0x6e>
    5f36:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5f38:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5f3a:	10 e0       	ldi	r17, 0x00	; 0
    5f3c:	0f 5f       	subi	r16, 0xFF	; 255
    5f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    5f40:	0f 73       	andi	r16, 0x3F	; 63
    5f42:	11 27       	eor	r17, r17
    5f44:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5f46:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5f48:	e8 12       	cpse	r14, r24
    5f4a:	0b c0       	rjmp	.+22     	; 0x5f62 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    5f4c:	0f b6       	in	r0, 0x3f	; 63
    5f4e:	07 fc       	sbrc	r0, 7
    5f50:	fa cf       	rjmp	.-12     	; 0x5f46 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5f52:	e8 89       	ldd	r30, Y+16	; 0x10
    5f54:	f9 89       	ldd	r31, Y+17	; 0x11
    5f56:	80 81       	ld	r24, Z
    5f58:	85 ff       	sbrs	r24, 5
    5f5a:	f5 cf       	rjmp	.-22     	; 0x5f46 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    5f5c:	ce 01       	movw	r24, r28
    5f5e:	b7 df       	rcall	.-146    	; 0x5ece <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5f60:	f2 cf       	rjmp	.-28     	; 0x5f46 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f64:	fe 01       	movw	r30, r28
    5f66:	e8 0f       	add	r30, r24
    5f68:	f1 1d       	adc	r31, r1
    5f6a:	e3 5a       	subi	r30, 0xA3	; 163
    5f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f6e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5f70:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5f72:	f8 94       	cli
    _tx_buffer_head = i;
    5f74:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    5f76:	ea 89       	ldd	r30, Y+18	; 0x12
    5f78:	fb 89       	ldd	r31, Y+19	; 0x13
    5f7a:	80 81       	ld	r24, Z
    5f7c:	80 62       	ori	r24, 0x20	; 32
    5f7e:	0a c0       	rjmp	.+20     	; 0x5f94 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5f80:	9f b7       	in	r25, 0x3f	; 63
    5f82:	f8 94       	cli
      *_udr = c;
    5f84:	ee 89       	ldd	r30, Y+22	; 0x16
    5f86:	ff 89       	ldd	r31, Y+23	; 0x17
    5f88:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5f8a:	e8 89       	ldd	r30, Y+16	; 0x10
    5f8c:	f9 89       	ldd	r31, Y+17	; 0x11
    5f8e:	80 81       	ld	r24, Z
    5f90:	83 70       	andi	r24, 0x03	; 3
    5f92:	80 64       	ori	r24, 0x40	; 64
    5f94:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5f96:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    5f98:	81 e0       	ldi	r24, 0x01	; 1
    5f9a:	90 e0       	ldi	r25, 0x00	; 0
    5f9c:	df 91       	pop	r29
    5f9e:	cf 91       	pop	r28
    5fa0:	1f 91       	pop	r17
    5fa2:	0f 91       	pop	r16
    5fa4:	ff 90       	pop	r15
    5fa6:	ef 90       	pop	r14
    5fa8:	08 95       	ret

00005faa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5faa:	cf 93       	push	r28
    5fac:	df 93       	push	r29
    5fae:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5fb0:	88 8d       	ldd	r24, Y+24	; 0x18
    5fb2:	88 23       	and	r24, r24
    5fb4:	c1 f0       	breq	.+48     	; 0x5fe6 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5fb6:	ea 89       	ldd	r30, Y+18	; 0x12
    5fb8:	fb 89       	ldd	r31, Y+19	; 0x13
    5fba:	80 81       	ld	r24, Z
    5fbc:	85 fd       	sbrc	r24, 5
    5fbe:	05 c0       	rjmp	.+10     	; 0x5fca <_ZN14HardwareSerial5flushEv+0x20>
    5fc0:	a8 89       	ldd	r26, Y+16	; 0x10
    5fc2:	b9 89       	ldd	r27, Y+17	; 0x11
    5fc4:	8c 91       	ld	r24, X
    5fc6:	86 fd       	sbrc	r24, 6
    5fc8:	0e c0       	rjmp	.+28     	; 0x5fe6 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5fca:	0f b6       	in	r0, 0x3f	; 63
    5fcc:	07 fc       	sbrc	r0, 7
    5fce:	f5 cf       	rjmp	.-22     	; 0x5fba <_ZN14HardwareSerial5flushEv+0x10>
    5fd0:	80 81       	ld	r24, Z
    5fd2:	85 ff       	sbrs	r24, 5
    5fd4:	f2 cf       	rjmp	.-28     	; 0x5fba <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5fd6:	a8 89       	ldd	r26, Y+16	; 0x10
    5fd8:	b9 89       	ldd	r27, Y+17	; 0x11
    5fda:	8c 91       	ld	r24, X
    5fdc:	85 ff       	sbrs	r24, 5
    5fde:	ed cf       	rjmp	.-38     	; 0x5fba <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5fe0:	ce 01       	movw	r24, r28
    5fe2:	75 df       	rcall	.-278    	; 0x5ece <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5fe4:	e8 cf       	rjmp	.-48     	; 0x5fb6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5fe6:	df 91       	pop	r29
    5fe8:	cf 91       	pop	r28
    5fea:	08 95       	ret

00005fec <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5fec:	cf 92       	push	r12
    5fee:	df 92       	push	r13
    5ff0:	ef 92       	push	r14
    5ff2:	ff 92       	push	r15
    5ff4:	1f 93       	push	r17
    5ff6:	cf 93       	push	r28
    5ff8:	df 93       	push	r29
    5ffa:	ec 01       	movw	r28, r24
    5ffc:	6a 01       	movw	r12, r20
    5ffe:	7b 01       	movw	r14, r22
    6000:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    6002:	e8 89       	ldd	r30, Y+16	; 0x10
    6004:	f9 89       	ldd	r31, Y+17	; 0x11
    6006:	82 e0       	ldi	r24, 0x02	; 2
    6008:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    600a:	41 15       	cp	r20, r1
    600c:	51 4e       	sbci	r21, 0xE1	; 225
    600e:	61 05       	cpc	r22, r1
    6010:	71 05       	cpc	r23, r1
    6012:	b1 f0       	breq	.+44     	; 0x6040 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    6014:	60 e0       	ldi	r22, 0x00	; 0
    6016:	79 e0       	ldi	r23, 0x09	; 9
    6018:	8d e3       	ldi	r24, 0x3D	; 61
    601a:	90 e0       	ldi	r25, 0x00	; 0
    601c:	a7 01       	movw	r20, r14
    601e:	96 01       	movw	r18, r12
    6020:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__udivmodsi4>
    6024:	da 01       	movw	r26, r20
    6026:	c9 01       	movw	r24, r18
    6028:	01 97       	sbiw	r24, 0x01	; 1
    602a:	a1 09       	sbc	r26, r1
    602c:	b1 09       	sbc	r27, r1
    602e:	b6 95       	lsr	r27
    6030:	a7 95       	ror	r26
    6032:	97 95       	ror	r25
    6034:	87 95       	ror	r24
    6036:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6038:	21 15       	cp	r18, r1
    603a:	80 e1       	ldi	r24, 0x10	; 16
    603c:	38 07       	cpc	r19, r24
    603e:	a8 f0       	brcs	.+42     	; 0x606a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    6040:	e8 89       	ldd	r30, Y+16	; 0x10
    6042:	f9 89       	ldd	r31, Y+17	; 0x11
    6044:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    6046:	60 e8       	ldi	r22, 0x80	; 128
    6048:	74 e8       	ldi	r23, 0x84	; 132
    604a:	8e e1       	ldi	r24, 0x1E	; 30
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	a7 01       	movw	r20, r14
    6050:	96 01       	movw	r18, r12
    6052:	0e 94 68 38 	call	0x70d0	; 0x70d0 <__udivmodsi4>
    6056:	da 01       	movw	r26, r20
    6058:	c9 01       	movw	r24, r18
    605a:	01 97       	sbiw	r24, 0x01	; 1
    605c:	a1 09       	sbc	r26, r1
    605e:	b1 09       	sbc	r27, r1
    6060:	b6 95       	lsr	r27
    6062:	a7 95       	ror	r26
    6064:	97 95       	ror	r25
    6066:	87 95       	ror	r24
    6068:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    606a:	ec 85       	ldd	r30, Y+12	; 0x0c
    606c:	fd 85       	ldd	r31, Y+13	; 0x0d
    606e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    6070:	ee 85       	ldd	r30, Y+14	; 0x0e
    6072:	ff 85       	ldd	r31, Y+15	; 0x0f
    6074:	20 83       	st	Z, r18

  _written = false;
    6076:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    6078:	ec 89       	ldd	r30, Y+20	; 0x14
    607a:	fd 89       	ldd	r31, Y+21	; 0x15
    607c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    607e:	ea 89       	ldd	r30, Y+18	; 0x12
    6080:	fb 89       	ldd	r31, Y+19	; 0x13
    6082:	80 81       	ld	r24, Z
    6084:	80 61       	ori	r24, 0x10	; 16
    6086:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    6088:	ea 89       	ldd	r30, Y+18	; 0x12
    608a:	fb 89       	ldd	r31, Y+19	; 0x13
    608c:	80 81       	ld	r24, Z
    608e:	88 60       	ori	r24, 0x08	; 8
    6090:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    6092:	ea 89       	ldd	r30, Y+18	; 0x12
    6094:	fb 89       	ldd	r31, Y+19	; 0x13
    6096:	80 81       	ld	r24, Z
    6098:	80 68       	ori	r24, 0x80	; 128
    609a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    609c:	ea 89       	ldd	r30, Y+18	; 0x12
    609e:	fb 89       	ldd	r31, Y+19	; 0x13
    60a0:	80 81       	ld	r24, Z
    60a2:	8f 7d       	andi	r24, 0xDF	; 223
    60a4:	80 83       	st	Z, r24
}
    60a6:	df 91       	pop	r29
    60a8:	cf 91       	pop	r28
    60aa:	1f 91       	pop	r17
    60ac:	ff 90       	pop	r15
    60ae:	ef 90       	pop	r14
    60b0:	df 90       	pop	r13
    60b2:	cf 90       	pop	r12
    60b4:	08 95       	ret

000060b6 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    60b6:	1f 92       	push	r1
    60b8:	0f 92       	push	r0
    60ba:	0f b6       	in	r0, 0x3f	; 63
    60bc:	0f 92       	push	r0
    60be:	11 24       	eor	r1, r1
    60c0:	0b b6       	in	r0, 0x3b	; 59
    60c2:	0f 92       	push	r0
    60c4:	2f 93       	push	r18
    60c6:	8f 93       	push	r24
    60c8:	9f 93       	push	r25
    60ca:	ef 93       	push	r30
    60cc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    60ce:	e0 91 ad 05 	lds	r30, 0x05AD	; 0x8005ad <Serial+0x10>
    60d2:	f0 91 ae 05 	lds	r31, 0x05AE	; 0x8005ae <Serial+0x11>
    60d6:	80 81       	ld	r24, Z
    60d8:	e0 91 b3 05 	lds	r30, 0x05B3	; 0x8005b3 <Serial+0x16>
    60dc:	f0 91 b4 05 	lds	r31, 0x05B4	; 0x8005b4 <Serial+0x17>
    60e0:	82 fd       	sbrc	r24, 2
    60e2:	12 c0       	rjmp	.+36     	; 0x6108 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    60e4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    60e6:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <Serial+0x19>
    60ea:	8f 5f       	subi	r24, 0xFF	; 255
    60ec:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    60ee:	20 91 b7 05 	lds	r18, 0x05B7	; 0x8005b7 <Serial+0x1a>
    60f2:	82 17       	cp	r24, r18
    60f4:	51 f0       	breq	.+20     	; 0x610a <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    60f6:	e0 91 b6 05 	lds	r30, 0x05B6	; 0x8005b6 <Serial+0x19>
    60fa:	f0 e0       	ldi	r31, 0x00	; 0
    60fc:	e3 56       	subi	r30, 0x63	; 99
    60fe:	fa 4f       	sbci	r31, 0xFA	; 250
    6100:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    6102:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <Serial+0x19>
    6106:	01 c0       	rjmp	.+2      	; 0x610a <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6108:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    610a:	ff 91       	pop	r31
    610c:	ef 91       	pop	r30
    610e:	9f 91       	pop	r25
    6110:	8f 91       	pop	r24
    6112:	2f 91       	pop	r18
    6114:	0f 90       	pop	r0
    6116:	0b be       	out	0x3b, r0	; 59
    6118:	0f 90       	pop	r0
    611a:	0f be       	out	0x3f, r0	; 63
    611c:	0f 90       	pop	r0
    611e:	1f 90       	pop	r1
    6120:	18 95       	reti

00006122 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    6122:	1f 92       	push	r1
    6124:	0f 92       	push	r0
    6126:	0f b6       	in	r0, 0x3f	; 63
    6128:	0f 92       	push	r0
    612a:	11 24       	eor	r1, r1
    612c:	0b b6       	in	r0, 0x3b	; 59
    612e:	0f 92       	push	r0
    6130:	2f 93       	push	r18
    6132:	3f 93       	push	r19
    6134:	4f 93       	push	r20
    6136:	5f 93       	push	r21
    6138:	6f 93       	push	r22
    613a:	7f 93       	push	r23
    613c:	8f 93       	push	r24
    613e:	9f 93       	push	r25
    6140:	af 93       	push	r26
    6142:	bf 93       	push	r27
    6144:	ef 93       	push	r30
    6146:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    6148:	8d e9       	ldi	r24, 0x9D	; 157
    614a:	95 e0       	ldi	r25, 0x05	; 5
    614c:	c0 de       	rcall	.-640    	; 0x5ece <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    614e:	ff 91       	pop	r31
    6150:	ef 91       	pop	r30
    6152:	bf 91       	pop	r27
    6154:	af 91       	pop	r26
    6156:	9f 91       	pop	r25
    6158:	8f 91       	pop	r24
    615a:	7f 91       	pop	r23
    615c:	6f 91       	pop	r22
    615e:	5f 91       	pop	r21
    6160:	4f 91       	pop	r20
    6162:	3f 91       	pop	r19
    6164:	2f 91       	pop	r18
    6166:	0f 90       	pop	r0
    6168:	0b be       	out	0x3b, r0	; 59
    616a:	0f 90       	pop	r0
    616c:	0f be       	out	0x3f, r0	; 63
    616e:	0f 90       	pop	r0
    6170:	1f 90       	pop	r1
    6172:	18 95       	reti

00006174 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    6174:	8d e9       	ldi	r24, 0x9D	; 157
    6176:	95 e0       	ldi	r25, 0x05	; 5
    6178:	31 de       	rcall	.-926    	; 0x5ddc <_ZN14HardwareSerial9availableEv>
    617a:	21 e0       	ldi	r18, 0x01	; 1
    617c:	89 2b       	or	r24, r25
    617e:	09 f4       	brne	.+2      	; 0x6182 <_Z17Serial0_availablev+0xe>
    6180:	20 e0       	ldi	r18, 0x00	; 0
}
    6182:	82 2f       	mov	r24, r18
    6184:	08 95       	ret

00006186 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6186:	ed e9       	ldi	r30, 0x9D	; 157
    6188:	f5 e0       	ldi	r31, 0x05	; 5
    618a:	13 82       	std	Z+3, r1	; 0x03
    618c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    618e:	88 ee       	ldi	r24, 0xE8	; 232
    6190:	93 e0       	ldi	r25, 0x03	; 3
    6192:	a0 e0       	ldi	r26, 0x00	; 0
    6194:	b0 e0       	ldi	r27, 0x00	; 0
    6196:	84 83       	std	Z+4, r24	; 0x04
    6198:	95 83       	std	Z+5, r25	; 0x05
    619a:	a6 83       	std	Z+6, r26	; 0x06
    619c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    619e:	8f e1       	ldi	r24, 0x1F	; 31
    61a0:	93 e0       	ldi	r25, 0x03	; 3
    61a2:	91 83       	std	Z+1, r25	; 0x01
    61a4:	80 83       	st	Z, r24
    61a6:	85 ec       	ldi	r24, 0xC5	; 197
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	95 87       	std	Z+13, r25	; 0x0d
    61ac:	84 87       	std	Z+12, r24	; 0x0c
    61ae:	84 ec       	ldi	r24, 0xC4	; 196
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	97 87       	std	Z+15, r25	; 0x0f
    61b4:	86 87       	std	Z+14, r24	; 0x0e
    61b6:	80 ec       	ldi	r24, 0xC0	; 192
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	91 8b       	std	Z+17, r25	; 0x11
    61bc:	80 8b       	std	Z+16, r24	; 0x10
    61be:	81 ec       	ldi	r24, 0xC1	; 193
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	93 8b       	std	Z+19, r25	; 0x13
    61c4:	82 8b       	std	Z+18, r24	; 0x12
    61c6:	82 ec       	ldi	r24, 0xC2	; 194
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	95 8b       	std	Z+21, r25	; 0x15
    61cc:	84 8b       	std	Z+20, r24	; 0x14
    61ce:	86 ec       	ldi	r24, 0xC6	; 198
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	97 8b       	std	Z+23, r25	; 0x17
    61d4:	86 8b       	std	Z+22, r24	; 0x16
    61d6:	11 8e       	std	Z+25, r1	; 0x19
    61d8:	12 8e       	std	Z+26, r1	; 0x1a
    61da:	13 8e       	std	Z+27, r1	; 0x1b
    61dc:	14 8e       	std	Z+28, r1	; 0x1c
    61de:	08 95       	ret

000061e0 <initVariant>:
    61e0:	08 95       	ret

000061e2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    61e2:	e3 d2       	rcall	.+1478   	; 0x67aa <init>

	initVariant();
    61e4:	fd df       	rcall	.-6      	; 0x61e0 <initVariant>
    61e6:	0e 94 9b 08 	call	0x1136	; 0x1136 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    61ea:	cb e2       	ldi	r28, 0x2B	; 43
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    61ec:	df e2       	ldi	r29, 0x2F	; 47
    61ee:	0e 94 02 09 	call	0x1204	; 0x1204 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    61f2:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    61f4:	e1 f3       	breq	.-8      	; 0x61ee <main+0xc>
    61f6:	2f de       	rcall	.-930    	; 0x5e56 <_Z14serialEventRunv>
    61f8:	fa cf       	rjmp	.-12     	; 0x61ee <main+0xc>

000061fa <_ZN5Print5writeEPKhj>:
    61fa:	cf 92       	push	r12
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    61fc:	df 92       	push	r13
    61fe:	ef 92       	push	r14
    6200:	ff 92       	push	r15
    6202:	0f 93       	push	r16
    6204:	1f 93       	push	r17
    6206:	cf 93       	push	r28
    6208:	df 93       	push	r29
    620a:	6c 01       	movw	r12, r24
    620c:	7a 01       	movw	r14, r20
    620e:	8b 01       	movw	r16, r22
    6210:	c0 e0       	ldi	r28, 0x00	; 0
    6212:	d0 e0       	ldi	r29, 0x00	; 0
    6214:	ce 15       	cp	r28, r14
    6216:	df 05       	cpc	r29, r15
    6218:	81 f0       	breq	.+32     	; 0x623a <_ZN5Print5writeEPKhj+0x40>
    621a:	d8 01       	movw	r26, r16
    621c:	6d 91       	ld	r22, X+
    621e:	8d 01       	movw	r16, r26
    6220:	d6 01       	movw	r26, r12
    6222:	ed 91       	ld	r30, X+
    6224:	fc 91       	ld	r31, X
    6226:	01 90       	ld	r0, Z+
    6228:	f0 81       	ld	r31, Z
    622a:	e0 2d       	mov	r30, r0
    622c:	c6 01       	movw	r24, r12
    622e:	19 95       	eicall
    6230:	89 2b       	or	r24, r25
    6232:	11 f0       	breq	.+4      	; 0x6238 <_ZN5Print5writeEPKhj+0x3e>
    6234:	21 96       	adiw	r28, 0x01	; 1
    6236:	ee cf       	rjmp	.-36     	; 0x6214 <_ZN5Print5writeEPKhj+0x1a>
    6238:	7e 01       	movw	r14, r28
    623a:	c7 01       	movw	r24, r14
    623c:	df 91       	pop	r29
    623e:	cf 91       	pop	r28
    6240:	1f 91       	pop	r17
    6242:	0f 91       	pop	r16
    6244:	ff 90       	pop	r15
    6246:	ef 90       	pop	r14
    6248:	df 90       	pop	r13
    624a:	cf 90       	pop	r12
    624c:	08 95       	ret

0000624e <_ZN5Print5writeEPKc>:
    624e:	61 15       	cp	r22, r1
    6250:	71 05       	cpc	r23, r1
    6252:	79 f0       	breq	.+30     	; 0x6272 <_ZN5Print5writeEPKc+0x24>
    6254:	fb 01       	movw	r30, r22
    6256:	01 90       	ld	r0, Z+
    6258:	00 20       	and	r0, r0
    625a:	e9 f7       	brne	.-6      	; 0x6256 <_ZN5Print5writeEPKc+0x8>
    625c:	31 97       	sbiw	r30, 0x01	; 1
    625e:	af 01       	movw	r20, r30
    6260:	46 1b       	sub	r20, r22
    6262:	57 0b       	sbc	r21, r23
    6264:	dc 01       	movw	r26, r24
    6266:	ed 91       	ld	r30, X+
    6268:	fc 91       	ld	r31, X
    626a:	02 80       	ldd	r0, Z+2	; 0x02
    626c:	f3 81       	ldd	r31, Z+3	; 0x03
    626e:	e0 2d       	mov	r30, r0
    6270:	19 94       	eijmp
    6272:	80 e0       	ldi	r24, 0x00	; 0
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	08 95       	ret

00006278 <_ZN5Print5printEPK19__FlashStringHelper>:
    6278:	ef 92       	push	r14
    627a:	ff 92       	push	r15
    627c:	0f 93       	push	r16
    627e:	1f 93       	push	r17
    6280:	cf 93       	push	r28
    6282:	df 93       	push	r29
    6284:	8c 01       	movw	r16, r24
    6286:	7b 01       	movw	r14, r22
    6288:	c0 e0       	ldi	r28, 0x00	; 0
    628a:	d0 e0       	ldi	r29, 0x00	; 0
    628c:	f7 01       	movw	r30, r14
    628e:	ec 0f       	add	r30, r28
    6290:	fd 1f       	adc	r31, r29
    6292:	64 91       	lpm	r22, Z
    6294:	66 23       	and	r22, r22
    6296:	61 f0       	breq	.+24     	; 0x62b0 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    6298:	d8 01       	movw	r26, r16
    629a:	ed 91       	ld	r30, X+
    629c:	fc 91       	ld	r31, X
    629e:	01 90       	ld	r0, Z+
    62a0:	f0 81       	ld	r31, Z
    62a2:	e0 2d       	mov	r30, r0
    62a4:	c8 01       	movw	r24, r16
    62a6:	19 95       	eicall
    62a8:	89 2b       	or	r24, r25
    62aa:	11 f0       	breq	.+4      	; 0x62b0 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    62ac:	21 96       	adiw	r28, 0x01	; 1
    62ae:	ee cf       	rjmp	.-36     	; 0x628c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    62b0:	ce 01       	movw	r24, r28
    62b2:	df 91       	pop	r29
    62b4:	cf 91       	pop	r28
    62b6:	1f 91       	pop	r17
    62b8:	0f 91       	pop	r16
    62ba:	ff 90       	pop	r15
    62bc:	ef 90       	pop	r14
    62be:	08 95       	ret

000062c0 <_ZN5Print5printEPKc>:
    62c0:	c6 cf       	rjmp	.-116    	; 0x624e <_ZN5Print5writeEPKc>

000062c2 <_ZN5Print5printEc>:
    62c2:	dc 01       	movw	r26, r24
    62c4:	ed 91       	ld	r30, X+
    62c6:	fc 91       	ld	r31, X
    62c8:	01 90       	ld	r0, Z+
    62ca:	f0 81       	ld	r31, Z
    62cc:	e0 2d       	mov	r30, r0
    62ce:	19 94       	eijmp

000062d0 <_ZN5Print7printlnEv>:
    62d0:	6d e2       	ldi	r22, 0x2D	; 45
    62d2:	73 e0       	ldi	r23, 0x03	; 3
    62d4:	bc cf       	rjmp	.-136    	; 0x624e <_ZN5Print5writeEPKc>

000062d6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    62d6:	0f 93       	push	r16
    62d8:	1f 93       	push	r17
    62da:	cf 93       	push	r28
    62dc:	df 93       	push	r29
    62de:	ec 01       	movw	r28, r24
    62e0:	cb df       	rcall	.-106    	; 0x6278 <_ZN5Print5printEPK19__FlashStringHelper>
    62e2:	8c 01       	movw	r16, r24
    62e4:	ce 01       	movw	r24, r28
    62e6:	f4 df       	rcall	.-24     	; 0x62d0 <_ZN5Print7printlnEv>
    62e8:	80 0f       	add	r24, r16
    62ea:	91 1f       	adc	r25, r17
    62ec:	df 91       	pop	r29
    62ee:	cf 91       	pop	r28
    62f0:	1f 91       	pop	r17
    62f2:	0f 91       	pop	r16
    62f4:	08 95       	ret

000062f6 <_ZN5Print7printlnEPKc>:
    62f6:	0f 93       	push	r16
    62f8:	1f 93       	push	r17
    62fa:	cf 93       	push	r28
    62fc:	df 93       	push	r29
    62fe:	ec 01       	movw	r28, r24
    6300:	a6 df       	rcall	.-180    	; 0x624e <_ZN5Print5writeEPKc>
    6302:	8c 01       	movw	r16, r24
    6304:	ce 01       	movw	r24, r28
    6306:	e4 df       	rcall	.-56     	; 0x62d0 <_ZN5Print7printlnEv>
    6308:	80 0f       	add	r24, r16
    630a:	91 1f       	adc	r25, r17
    630c:	df 91       	pop	r29
    630e:	cf 91       	pop	r28
    6310:	1f 91       	pop	r17
    6312:	0f 91       	pop	r16
    6314:	08 95       	ret

00006316 <_ZN5Print7printlnEc>:
    6316:	0f 93       	push	r16
    6318:	1f 93       	push	r17
    631a:	cf 93       	push	r28
    631c:	df 93       	push	r29
    631e:	ec 01       	movw	r28, r24
    6320:	d0 df       	rcall	.-96     	; 0x62c2 <_ZN5Print5printEc>
    6322:	8c 01       	movw	r16, r24
    6324:	ce 01       	movw	r24, r28
    6326:	d4 df       	rcall	.-88     	; 0x62d0 <_ZN5Print7printlnEv>
    6328:	80 0f       	add	r24, r16
    632a:	91 1f       	adc	r25, r17
    632c:	df 91       	pop	r29
    632e:	cf 91       	pop	r28
    6330:	1f 91       	pop	r17
    6332:	0f 91       	pop	r16
    6334:	08 95       	ret

00006336 <_ZN5Print11printNumberEmh>:
    6336:	8f 92       	push	r8
    6338:	9f 92       	push	r9
    633a:	af 92       	push	r10
    633c:	bf 92       	push	r11
    633e:	ef 92       	push	r14
    6340:	ff 92       	push	r15
    6342:	0f 93       	push	r16
    6344:	1f 93       	push	r17
    6346:	cf 93       	push	r28
    6348:	df 93       	push	r29
    634a:	cd b7       	in	r28, 0x3d	; 61
    634c:	de b7       	in	r29, 0x3e	; 62
    634e:	a1 97       	sbiw	r28, 0x21	; 33
    6350:	0f b6       	in	r0, 0x3f	; 63
    6352:	f8 94       	cli
    6354:	de bf       	out	0x3e, r29	; 62
    6356:	0f be       	out	0x3f, r0	; 63
    6358:	cd bf       	out	0x3d, r28	; 61
    635a:	7c 01       	movw	r14, r24
    635c:	fa 01       	movw	r30, r20
    635e:	cb 01       	movw	r24, r22
    6360:	19 a2       	std	Y+33, r1	; 0x21
    6362:	22 30       	cpi	r18, 0x02	; 2
    6364:	08 f4       	brcc	.+2      	; 0x6368 <_ZN5Print11printNumberEmh+0x32>
    6366:	2a e0       	ldi	r18, 0x0A	; 10
    6368:	8e 01       	movw	r16, r28
    636a:	0f 5d       	subi	r16, 0xDF	; 223
    636c:	1f 4f       	sbci	r17, 0xFF	; 255
    636e:	82 2e       	mov	r8, r18
    6370:	91 2c       	mov	r9, r1
    6372:	a1 2c       	mov	r10, r1
    6374:	b1 2c       	mov	r11, r1
    6376:	bf 01       	movw	r22, r30
    6378:	a5 01       	movw	r20, r10
    637a:	94 01       	movw	r18, r8
    637c:	a9 d6       	rcall	.+3410   	; 0x70d0 <__udivmodsi4>
    637e:	f9 01       	movw	r30, r18
    6380:	ca 01       	movw	r24, r20
    6382:	01 50       	subi	r16, 0x01	; 1
    6384:	11 09       	sbc	r17, r1
    6386:	6a 30       	cpi	r22, 0x0A	; 10
    6388:	10 f4       	brcc	.+4      	; 0x638e <_ZN5Print11printNumberEmh+0x58>
    638a:	60 5d       	subi	r22, 0xD0	; 208
    638c:	01 c0       	rjmp	.+2      	; 0x6390 <_ZN5Print11printNumberEmh+0x5a>
    638e:	69 5c       	subi	r22, 0xC9	; 201
    6390:	d8 01       	movw	r26, r16
    6392:	6c 93       	st	X, r22
    6394:	23 2b       	or	r18, r19
    6396:	24 2b       	or	r18, r20
    6398:	25 2b       	or	r18, r21
    639a:	69 f7       	brne	.-38     	; 0x6376 <_ZN5Print11printNumberEmh+0x40>
    639c:	b8 01       	movw	r22, r16
    639e:	c7 01       	movw	r24, r14
    63a0:	56 df       	rcall	.-340    	; 0x624e <_ZN5Print5writeEPKc>
    63a2:	a1 96       	adiw	r28, 0x21	; 33
    63a4:	0f b6       	in	r0, 0x3f	; 63
    63a6:	f8 94       	cli
    63a8:	de bf       	out	0x3e, r29	; 62
    63aa:	0f be       	out	0x3f, r0	; 63
    63ac:	cd bf       	out	0x3d, r28	; 61
    63ae:	df 91       	pop	r29
    63b0:	cf 91       	pop	r28
    63b2:	1f 91       	pop	r17
    63b4:	0f 91       	pop	r16
    63b6:	ff 90       	pop	r15
    63b8:	ef 90       	pop	r14
    63ba:	bf 90       	pop	r11
    63bc:	af 90       	pop	r10
    63be:	9f 90       	pop	r9
    63c0:	8f 90       	pop	r8
    63c2:	08 95       	ret

000063c4 <_ZN5Print5printEmi>:
    63c4:	21 15       	cp	r18, r1
    63c6:	31 05       	cpc	r19, r1
    63c8:	41 f4       	brne	.+16     	; 0x63da <_ZN5Print5printEmi+0x16>
    63ca:	dc 01       	movw	r26, r24
    63cc:	ed 91       	ld	r30, X+
    63ce:	fc 91       	ld	r31, X
    63d0:	01 90       	ld	r0, Z+
    63d2:	f0 81       	ld	r31, Z
    63d4:	e0 2d       	mov	r30, r0
    63d6:	64 2f       	mov	r22, r20
    63d8:	19 94       	eijmp
    63da:	ad cf       	rjmp	.-166    	; 0x6336 <_ZN5Print11printNumberEmh>

000063dc <_ZN5Print5printEji>:
    63dc:	9a 01       	movw	r18, r20
    63de:	ab 01       	movw	r20, r22
    63e0:	60 e0       	ldi	r22, 0x00	; 0
    63e2:	70 e0       	ldi	r23, 0x00	; 0
    63e4:	ef cf       	rjmp	.-34     	; 0x63c4 <_ZN5Print5printEmi>

000063e6 <_ZN5Print5printEli>:
    63e6:	cf 92       	push	r12
    63e8:	df 92       	push	r13
    63ea:	ef 92       	push	r14
    63ec:	ff 92       	push	r15
    63ee:	0f 93       	push	r16
    63f0:	1f 93       	push	r17
    63f2:	cf 93       	push	r28
    63f4:	df 93       	push	r29
    63f6:	21 15       	cp	r18, r1
    63f8:	31 05       	cpc	r19, r1
    63fa:	81 f4       	brne	.+32     	; 0x641c <_ZN5Print5printEli+0x36>
    63fc:	dc 01       	movw	r26, r24
    63fe:	ed 91       	ld	r30, X+
    6400:	fc 91       	ld	r31, X
    6402:	01 90       	ld	r0, Z+
    6404:	f0 81       	ld	r31, Z
    6406:	e0 2d       	mov	r30, r0
    6408:	64 2f       	mov	r22, r20
    640a:	df 91       	pop	r29
    640c:	cf 91       	pop	r28
    640e:	1f 91       	pop	r17
    6410:	0f 91       	pop	r16
    6412:	ff 90       	pop	r15
    6414:	ef 90       	pop	r14
    6416:	df 90       	pop	r13
    6418:	cf 90       	pop	r12
    641a:	19 94       	eijmp
    641c:	2a 30       	cpi	r18, 0x0A	; 10
    641e:	31 05       	cpc	r19, r1
    6420:	f1 f4       	brne	.+60     	; 0x645e <_ZN5Print5printEli+0x78>
    6422:	77 ff       	sbrs	r23, 7
    6424:	1b c0       	rjmp	.+54     	; 0x645c <_ZN5Print5printEli+0x76>
    6426:	6a 01       	movw	r12, r20
    6428:	7b 01       	movw	r14, r22
    642a:	ec 01       	movw	r28, r24
    642c:	6d e2       	ldi	r22, 0x2D	; 45
    642e:	49 df       	rcall	.-366    	; 0x62c2 <_ZN5Print5printEc>
    6430:	8c 01       	movw	r16, r24
    6432:	44 27       	eor	r20, r20
    6434:	55 27       	eor	r21, r21
    6436:	ba 01       	movw	r22, r20
    6438:	4c 19       	sub	r20, r12
    643a:	5d 09       	sbc	r21, r13
    643c:	6e 09       	sbc	r22, r14
    643e:	7f 09       	sbc	r23, r15
    6440:	2a e0       	ldi	r18, 0x0A	; 10
    6442:	ce 01       	movw	r24, r28
    6444:	78 df       	rcall	.-272    	; 0x6336 <_ZN5Print11printNumberEmh>
    6446:	80 0f       	add	r24, r16
    6448:	91 1f       	adc	r25, r17
    644a:	df 91       	pop	r29
    644c:	cf 91       	pop	r28
    644e:	1f 91       	pop	r17
    6450:	0f 91       	pop	r16
    6452:	ff 90       	pop	r15
    6454:	ef 90       	pop	r14
    6456:	df 90       	pop	r13
    6458:	cf 90       	pop	r12
    645a:	08 95       	ret
    645c:	2a e0       	ldi	r18, 0x0A	; 10
    645e:	df 91       	pop	r29
    6460:	cf 91       	pop	r28
    6462:	1f 91       	pop	r17
    6464:	0f 91       	pop	r16
    6466:	ff 90       	pop	r15
    6468:	ef 90       	pop	r14
    646a:	df 90       	pop	r13
    646c:	cf 90       	pop	r12
    646e:	63 cf       	rjmp	.-314    	; 0x6336 <_ZN5Print11printNumberEmh>

00006470 <_ZN5Print5printEii>:
    6470:	9a 01       	movw	r18, r20
    6472:	ab 01       	movw	r20, r22
    6474:	77 0f       	add	r23, r23
    6476:	66 0b       	sbc	r22, r22
    6478:	77 0b       	sbc	r23, r23
    647a:	b5 cf       	rjmp	.-150    	; 0x63e6 <_ZN5Print5printEli>

0000647c <_ZN5Print7printlnEii>:
    647c:	0f 93       	push	r16
    647e:	1f 93       	push	r17
    6480:	cf 93       	push	r28
    6482:	df 93       	push	r29
    6484:	ec 01       	movw	r28, r24
    6486:	f4 df       	rcall	.-24     	; 0x6470 <_ZN5Print5printEii>
    6488:	8c 01       	movw	r16, r24
    648a:	ce 01       	movw	r24, r28
    648c:	21 df       	rcall	.-446    	; 0x62d0 <_ZN5Print7printlnEv>
    648e:	80 0f       	add	r24, r16
    6490:	91 1f       	adc	r25, r17
    6492:	df 91       	pop	r29
    6494:	cf 91       	pop	r28
    6496:	1f 91       	pop	r17
    6498:	0f 91       	pop	r16
    649a:	08 95       	ret

0000649c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    649c:	7f 92       	push	r7
    649e:	8f 92       	push	r8
    64a0:	9f 92       	push	r9
    64a2:	af 92       	push	r10
    64a4:	bf 92       	push	r11
    64a6:	cf 92       	push	r12
    64a8:	df 92       	push	r13
    64aa:	ef 92       	push	r14
    64ac:	ff 92       	push	r15
    64ae:	0f 93       	push	r16
    64b0:	1f 93       	push	r17
    64b2:	cf 93       	push	r28
    64b4:	df 93       	push	r29
    64b6:	8c 01       	movw	r16, r24
    64b8:	6a 01       	movw	r12, r20
    64ba:	7b 01       	movw	r14, r22
    64bc:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    64be:	9a 01       	movw	r18, r20
    64c0:	ab 01       	movw	r20, r22
    64c2:	c7 01       	movw	r24, r14
    64c4:	b6 01       	movw	r22, r12
    64c6:	f0 d5       	rcall	.+3040   	; 0x70a8 <__unordsf2>
    64c8:	88 23       	and	r24, r24
    64ca:	19 f0       	breq	.+6      	; 0x64d2 <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    64cc:	60 e3       	ldi	r22, 0x30	; 48
    64ce:	73 e0       	ldi	r23, 0x03	; 3
    64d0:	24 c0       	rjmp	.+72     	; 0x651a <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    64d2:	46 01       	movw	r8, r12
    64d4:	57 01       	movw	r10, r14
    64d6:	e8 94       	clt
    64d8:	b7 f8       	bld	r11, 7
    64da:	2f ef       	ldi	r18, 0xFF	; 255
    64dc:	3f ef       	ldi	r19, 0xFF	; 255
    64de:	4f e7       	ldi	r20, 0x7F	; 127
    64e0:	5f e7       	ldi	r21, 0x7F	; 127
    64e2:	c5 01       	movw	r24, r10
    64e4:	b4 01       	movw	r22, r8
    64e6:	e0 d5       	rcall	.+3008   	; 0x70a8 <__unordsf2>
    64e8:	81 11       	cpse	r24, r1
    64ea:	0c c0       	rjmp	.+24     	; 0x6504 <_ZN5Print10printFloatEdh+0x68>
    64ec:	2f ef       	ldi	r18, 0xFF	; 255
    64ee:	3f ef       	ldi	r19, 0xFF	; 255
    64f0:	4f e7       	ldi	r20, 0x7F	; 127
    64f2:	5f e7       	ldi	r21, 0x7F	; 127
    64f4:	c5 01       	movw	r24, r10
    64f6:	b4 01       	movw	r22, r8
    64f8:	52 db       	rcall	.-2396   	; 0x5b9e <__cmpsf2>
    64fa:	18 16       	cp	r1, r24
    64fc:	1c f4       	brge	.+6      	; 0x6504 <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    64fe:	64 e3       	ldi	r22, 0x34	; 52
    6500:	73 e0       	ldi	r23, 0x03	; 3
    6502:	0b c0       	rjmp	.+22     	; 0x651a <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    6504:	2f ef       	ldi	r18, 0xFF	; 255
    6506:	3f ef       	ldi	r19, 0xFF	; 255
    6508:	4f e7       	ldi	r20, 0x7F	; 127
    650a:	5f e4       	ldi	r21, 0x4F	; 79
    650c:	c7 01       	movw	r24, r14
    650e:	b6 01       	movw	r22, r12
    6510:	fc db       	rcall	.-2056   	; 0x5d0a <__gesf2>
    6512:	18 16       	cp	r1, r24
    6514:	8c f4       	brge	.+34     	; 0x6538 <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    6516:	68 e3       	ldi	r22, 0x38	; 56
    6518:	73 e0       	ldi	r23, 0x03	; 3
    651a:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    651c:	df 91       	pop	r29
    651e:	cf 91       	pop	r28
    6520:	1f 91       	pop	r17
    6522:	0f 91       	pop	r16
    6524:	ff 90       	pop	r15
    6526:	ef 90       	pop	r14
    6528:	df 90       	pop	r13
    652a:	cf 90       	pop	r12
    652c:	bf 90       	pop	r11
    652e:	af 90       	pop	r10
    6530:	9f 90       	pop	r9
    6532:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    6534:	7f 90       	pop	r7
    6536:	8b ce       	rjmp	.-746    	; 0x624e <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    6538:	2f ef       	ldi	r18, 0xFF	; 255
    653a:	3f ef       	ldi	r19, 0xFF	; 255
    653c:	4f e7       	ldi	r20, 0x7F	; 127
    653e:	5f ec       	ldi	r21, 0xCF	; 207
    6540:	c7 01       	movw	r24, r14
    6542:	b6 01       	movw	r22, r12
    6544:	2c db       	rcall	.-2472   	; 0x5b9e <__cmpsf2>
    6546:	87 fd       	sbrc	r24, 7
    6548:	e6 cf       	rjmp	.-52     	; 0x6516 <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    654a:	20 e0       	ldi	r18, 0x00	; 0
    654c:	30 e0       	ldi	r19, 0x00	; 0
    654e:	a9 01       	movw	r20, r18
    6550:	c7 01       	movw	r24, r14
    6552:	b6 01       	movw	r22, r12
    6554:	24 db       	rcall	.-2488   	; 0x5b9e <__cmpsf2>
    6556:	87 ff       	sbrs	r24, 7
    6558:	09 c0       	rjmp	.+18     	; 0x656c <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    655a:	6d e2       	ldi	r22, 0x2D	; 45
    655c:	c8 01       	movw	r24, r16
    655e:	b1 de       	rcall	.-670    	; 0x62c2 <_ZN5Print5printEc>
    6560:	ec 01       	movw	r28, r24
    6562:	f7 fa       	bst	r15, 7
     number = -number;
    6564:	f0 94       	com	r15
    6566:	f7 f8       	bld	r15, 7
    6568:	f0 94       	com	r15
    656a:	02 c0       	rjmp	.+4      	; 0x6570 <_ZN5Print10printFloatEdh+0xd4>
    656c:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    656e:	d0 e0       	ldi	r29, 0x00	; 0
    6570:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6572:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    6574:	70 e0       	ldi	r23, 0x00	; 0
    6576:	80 e0       	ldi	r24, 0x00	; 0
    6578:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    657a:	7b 14       	cp	r7, r11
    657c:	39 f0       	breq	.+14     	; 0x658c <_ZN5Print10printFloatEdh+0xf0>
    rounding /= 10.0;
    657e:	20 e0       	ldi	r18, 0x00	; 0
    6580:	30 e0       	ldi	r19, 0x00	; 0
    6582:	40 e2       	ldi	r20, 0x20	; 32
    6584:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6586:	f0 d4       	rcall	.+2528   	; 0x6f68 <__divsf3>
    6588:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    658a:	f7 cf       	rjmp	.-18     	; 0x657a <_ZN5Print10printFloatEdh+0xde>
    658c:	a7 01       	movw	r20, r14
    658e:	96 01       	movw	r18, r12
    6590:	a2 da       	rcall	.-2748   	; 0x5ad6 <__addsf3>
    6592:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    6594:	7c 01       	movw	r14, r24
    6596:	59 d5       	rcall	.+2738   	; 0x704a <__fixunssfsi>
    6598:	4b 01       	movw	r8, r22
    659a:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    659c:	2a e0       	ldi	r18, 0x0A	; 10
    659e:	ab 01       	movw	r20, r22
    65a0:	bc 01       	movw	r22, r24
    65a2:	c8 01       	movw	r24, r16
    65a4:	c8 de       	rcall	.-624    	; 0x6336 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    65a6:	c8 0f       	add	r28, r24
    65a8:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    65aa:	77 20       	and	r7, r7
    65ac:	79 f1       	breq	.+94     	; 0x660c <_ZN5Print10printFloatEdh+0x170>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    65ae:	c5 01       	movw	r24, r10
    65b0:	b4 01       	movw	r22, r8
    65b2:	f9 da       	rcall	.-2574   	; 0x5ba6 <__floatunsisf>
    65b4:	9b 01       	movw	r18, r22
    65b6:	ac 01       	movw	r20, r24
    65b8:	c7 01       	movw	r24, r14
    65ba:	b6 01       	movw	r22, r12
    65bc:	8b da       	rcall	.-2794   	; 0x5ad4 <__subsf3>
    65be:	6b 01       	movw	r12, r22
    65c0:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    65c2:	6e e2       	ldi	r22, 0x2E	; 46
    65c4:	c8 01       	movw	r24, r16
    65c6:	7d de       	rcall	.-774    	; 0x62c2 <_ZN5Print5printEc>
    65c8:	c8 0f       	add	r28, r24
    65ca:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    65cc:	20 e0       	ldi	r18, 0x00	; 0
    65ce:	30 e0       	ldi	r19, 0x00	; 0
    65d0:	40 e2       	ldi	r20, 0x20	; 32
    65d2:	51 e4       	ldi	r21, 0x41	; 65
    65d4:	c7 01       	movw	r24, r14
    65d6:	b6 01       	movw	r22, r12
    65d8:	9c db       	rcall	.-2248   	; 0x5d12 <__mulsf3>
    65da:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    65dc:	5c 01       	movw	r10, r24
    65de:	35 d5       	rcall	.+2666   	; 0x704a <__fixunssfsi>
    65e0:	6b 01       	movw	r12, r22
    n += print(toPrint);
    65e2:	7c 01       	movw	r14, r24
    65e4:	4a e0       	ldi	r20, 0x0A	; 10
    65e6:	50 e0       	ldi	r21, 0x00	; 0
    65e8:	c8 01       	movw	r24, r16
    65ea:	f8 de       	rcall	.-528    	; 0x63dc <_ZN5Print5printEji>
    65ec:	c8 0f       	add	r28, r24
    65ee:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    65f0:	b6 01       	movw	r22, r12
    65f2:	80 e0       	ldi	r24, 0x00	; 0
    65f4:	90 e0       	ldi	r25, 0x00	; 0
    65f6:	d7 da       	rcall	.-2642   	; 0x5ba6 <__floatunsisf>
    65f8:	9b 01       	movw	r18, r22
    65fa:	ac 01       	movw	r20, r24
    65fc:	c5 01       	movw	r24, r10
    65fe:	b4 01       	movw	r22, r8
    6600:	69 da       	rcall	.-2862   	; 0x5ad4 <__subsf3>
    6602:	6b 01       	movw	r12, r22
    6604:	7c 01       	movw	r14, r24
    6606:	7a 94       	dec	r7
    6608:	71 10       	cpse	r7, r1
    660a:	e0 cf       	rjmp	.-64     	; 0x65cc <_ZN5Print10printFloatEdh+0x130>
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    660c:	ce 01       	movw	r24, r28
    660e:	df 91       	pop	r29
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    6610:	cf 91       	pop	r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    6612:	1f 91       	pop	r17
    6614:	0f 91       	pop	r16
    6616:	ff 90       	pop	r15
    6618:	ef 90       	pop	r14
    661a:	df 90       	pop	r13
    661c:	cf 90       	pop	r12
    661e:	bf 90       	pop	r11
    6620:	af 90       	pop	r10
    6622:	9f 90       	pop	r9
    6624:	8f 90       	pop	r8
    6626:	7f 90       	pop	r7
    6628:	08 95       	ret

0000662a <_ZN5Print5printEdi>:
    662a:	38 cf       	rjmp	.-400    	; 0x649c <_ZN5Print10printFloatEdh>

0000662c <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    662c:	1f 92       	push	r1
    662e:	0f 92       	push	r0
    6630:	0f b6       	in	r0, 0x3f	; 63
    6632:	0f 92       	push	r0
    6634:	11 24       	eor	r1, r1
    6636:	2f 93       	push	r18
    6638:	3f 93       	push	r19
    663a:	8f 93       	push	r24
    663c:	9f 93       	push	r25
    663e:	af 93       	push	r26
    6640:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6642:	80 91 3b 06 	lds	r24, 0x063B	; 0x80063b <timer0_millis>
    6646:	90 91 3c 06 	lds	r25, 0x063C	; 0x80063c <timer0_millis+0x1>
    664a:	a0 91 3d 06 	lds	r26, 0x063D	; 0x80063d <timer0_millis+0x2>
    664e:	b0 91 3e 06 	lds	r27, 0x063E	; 0x80063e <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    6652:	30 91 3a 06 	lds	r19, 0x063A	; 0x80063a <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    6656:	23 e0       	ldi	r18, 0x03	; 3
    6658:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    665a:	2d 37       	cpi	r18, 0x7D	; 125
    665c:	20 f4       	brcc	.+8      	; 0x6666 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    665e:	01 96       	adiw	r24, 0x01	; 1
    6660:	a1 1d       	adc	r26, r1
    6662:	b1 1d       	adc	r27, r1
    6664:	05 c0       	rjmp	.+10     	; 0x6670 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    6666:	26 e8       	ldi	r18, 0x86	; 134
    6668:	23 0f       	add	r18, r19
		m += 1;
    666a:	02 96       	adiw	r24, 0x02	; 2
    666c:	a1 1d       	adc	r26, r1
    666e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6670:	20 93 3a 06 	sts	0x063A, r18	; 0x80063a <timer0_fract>
	timer0_millis = m;
    6674:	80 93 3b 06 	sts	0x063B, r24	; 0x80063b <timer0_millis>
    6678:	90 93 3c 06 	sts	0x063C, r25	; 0x80063c <timer0_millis+0x1>
    667c:	a0 93 3d 06 	sts	0x063D, r26	; 0x80063d <timer0_millis+0x2>
    6680:	b0 93 3e 06 	sts	0x063E, r27	; 0x80063e <timer0_millis+0x3>
	timer0_overflow_count++;
    6684:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <timer0_overflow_count>
    6688:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <timer0_overflow_count+0x1>
    668c:	a0 91 41 06 	lds	r26, 0x0641	; 0x800641 <timer0_overflow_count+0x2>
    6690:	b0 91 42 06 	lds	r27, 0x0642	; 0x800642 <timer0_overflow_count+0x3>
    6694:	01 96       	adiw	r24, 0x01	; 1
    6696:	a1 1d       	adc	r26, r1
    6698:	b1 1d       	adc	r27, r1
    669a:	80 93 3f 06 	sts	0x063F, r24	; 0x80063f <timer0_overflow_count>
    669e:	90 93 40 06 	sts	0x0640, r25	; 0x800640 <timer0_overflow_count+0x1>
    66a2:	a0 93 41 06 	sts	0x0641, r26	; 0x800641 <timer0_overflow_count+0x2>
    66a6:	b0 93 42 06 	sts	0x0642, r27	; 0x800642 <timer0_overflow_count+0x3>
}
    66aa:	bf 91       	pop	r27
    66ac:	af 91       	pop	r26
    66ae:	9f 91       	pop	r25
    66b0:	8f 91       	pop	r24
    66b2:	3f 91       	pop	r19
    66b4:	2f 91       	pop	r18
    66b6:	0f 90       	pop	r0
    66b8:	0f be       	out	0x3f, r0	; 63
    66ba:	0f 90       	pop	r0
    66bc:	1f 90       	pop	r1
    66be:	18 95       	reti

000066c0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    66c0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    66c2:	f8 94       	cli
	m = timer0_millis;
    66c4:	60 91 3b 06 	lds	r22, 0x063B	; 0x80063b <timer0_millis>
    66c8:	70 91 3c 06 	lds	r23, 0x063C	; 0x80063c <timer0_millis+0x1>
    66cc:	80 91 3d 06 	lds	r24, 0x063D	; 0x80063d <timer0_millis+0x2>
    66d0:	90 91 3e 06 	lds	r25, 0x063E	; 0x80063e <timer0_millis+0x3>
	SREG = oldSREG;
    66d4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    66d6:	08 95       	ret

000066d8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    66d8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    66da:	f8 94       	cli
	m = timer0_overflow_count;
    66dc:	80 91 3f 06 	lds	r24, 0x063F	; 0x80063f <timer0_overflow_count>
    66e0:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <timer0_overflow_count+0x1>
    66e4:	a0 91 41 06 	lds	r26, 0x0641	; 0x800641 <timer0_overflow_count+0x2>
    66e8:	b0 91 42 06 	lds	r27, 0x0642	; 0x800642 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    66ec:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    66ee:	a8 9b       	sbis	0x15, 0	; 21
    66f0:	05 c0       	rjmp	.+10     	; 0x66fc <micros+0x24>
    66f2:	2f 3f       	cpi	r18, 0xFF	; 255
    66f4:	19 f0       	breq	.+6      	; 0x66fc <micros+0x24>
		m++;
    66f6:	01 96       	adiw	r24, 0x01	; 1
    66f8:	a1 1d       	adc	r26, r1
    66fa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    66fc:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    66fe:	ba 2f       	mov	r27, r26
    6700:	a9 2f       	mov	r26, r25
    6702:	98 2f       	mov	r25, r24
    6704:	88 27       	eor	r24, r24
    6706:	82 0f       	add	r24, r18
    6708:	91 1d       	adc	r25, r1
    670a:	a1 1d       	adc	r26, r1
    670c:	b1 1d       	adc	r27, r1
    670e:	bc 01       	movw	r22, r24
    6710:	cd 01       	movw	r24, r26
    6712:	42 e0       	ldi	r20, 0x02	; 2
    6714:	66 0f       	add	r22, r22
    6716:	77 1f       	adc	r23, r23
    6718:	88 1f       	adc	r24, r24
    671a:	99 1f       	adc	r25, r25
    671c:	4a 95       	dec	r20
    671e:	d1 f7       	brne	.-12     	; 0x6714 <micros+0x3c>
}
    6720:	08 95       	ret

00006722 <delay>:

void delay(unsigned long ms)
{
    6722:	8f 92       	push	r8
    6724:	9f 92       	push	r9
    6726:	af 92       	push	r10
    6728:	bf 92       	push	r11
    672a:	cf 92       	push	r12
    672c:	df 92       	push	r13
    672e:	ef 92       	push	r14
    6730:	ff 92       	push	r15
    6732:	6b 01       	movw	r12, r22
    6734:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    6736:	d0 df       	rcall	.-96     	; 0x66d8 <micros>
    6738:	4b 01       	movw	r8, r22
    673a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    673c:	c1 14       	cp	r12, r1
    673e:	d1 04       	cpc	r13, r1
    6740:	e1 04       	cpc	r14, r1
    6742:	f1 04       	cpc	r15, r1
		yield();
    6744:	f1 f0       	breq	.+60     	; 0x6782 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    6746:	0f d4       	rcall	.+2078   	; 0x6f66 <yield>
    6748:	c7 df       	rcall	.-114    	; 0x66d8 <micros>
    674a:	dc 01       	movw	r26, r24
    674c:	cb 01       	movw	r24, r22
    674e:	88 19       	sub	r24, r8
    6750:	99 09       	sbc	r25, r9
    6752:	aa 09       	sbc	r26, r10
    6754:	bb 09       	sbc	r27, r11
    6756:	88 3e       	cpi	r24, 0xE8	; 232
    6758:	93 40       	sbci	r25, 0x03	; 3
    675a:	a1 05       	cpc	r26, r1
    675c:	b1 05       	cpc	r27, r1
    675e:	70 f3       	brcs	.-36     	; 0x673c <delay+0x1a>
			ms--;
    6760:	21 e0       	ldi	r18, 0x01	; 1
    6762:	c2 1a       	sub	r12, r18
    6764:	d1 08       	sbc	r13, r1
    6766:	e1 08       	sbc	r14, r1
    6768:	f1 08       	sbc	r15, r1
			start += 1000;
    676a:	88 ee       	ldi	r24, 0xE8	; 232
    676c:	88 0e       	add	r8, r24
    676e:	83 e0       	ldi	r24, 0x03	; 3
    6770:	98 1e       	adc	r9, r24
    6772:	a1 1c       	adc	r10, r1
    6774:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    6776:	c1 14       	cp	r12, r1
    6778:	d1 04       	cpc	r13, r1
    677a:	e1 04       	cpc	r14, r1
    677c:	f1 04       	cpc	r15, r1
    677e:	21 f7       	brne	.-56     	; 0x6748 <delay+0x26>
    6780:	dd cf       	rjmp	.-70     	; 0x673c <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    6782:	ff 90       	pop	r15
    6784:	ef 90       	pop	r14
    6786:	df 90       	pop	r13
    6788:	cf 90       	pop	r12
    678a:	bf 90       	pop	r11
    678c:	af 90       	pop	r10
    678e:	9f 90       	pop	r9
    6790:	8f 90       	pop	r8
    6792:	08 95       	ret

00006794 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    6794:	82 30       	cpi	r24, 0x02	; 2
    6796:	91 05       	cpc	r25, r1
    6798:	38 f0       	brcs	.+14     	; 0x67a8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    679a:	88 0f       	add	r24, r24
    679c:	99 1f       	adc	r25, r25
    679e:	88 0f       	add	r24, r24
    67a0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    67a2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    67a4:	01 97       	sbiw	r24, 0x01	; 1
    67a6:	f1 f7       	brne	.-4      	; 0x67a4 <delayMicroseconds+0x10>
    67a8:	08 95       	ret

000067aa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    67aa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    67ac:	84 b5       	in	r24, 0x24	; 36
    67ae:	82 60       	ori	r24, 0x02	; 2
    67b0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    67b2:	84 b5       	in	r24, 0x24	; 36
    67b4:	81 60       	ori	r24, 0x01	; 1
    67b6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    67b8:	85 b5       	in	r24, 0x25	; 37
    67ba:	82 60       	ori	r24, 0x02	; 2
    67bc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    67be:	85 b5       	in	r24, 0x25	; 37
    67c0:	81 60       	ori	r24, 0x01	; 1
    67c2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    67c4:	ee e6       	ldi	r30, 0x6E	; 110
    67c6:	f0 e0       	ldi	r31, 0x00	; 0
    67c8:	80 81       	ld	r24, Z
    67ca:	81 60       	ori	r24, 0x01	; 1
    67cc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    67ce:	e1 e8       	ldi	r30, 0x81	; 129
    67d0:	f0 e0       	ldi	r31, 0x00	; 0
    67d2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    67d4:	80 81       	ld	r24, Z
    67d6:	82 60       	ori	r24, 0x02	; 2
    67d8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    67da:	80 81       	ld	r24, Z
    67dc:	81 60       	ori	r24, 0x01	; 1
    67de:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    67e0:	e0 e8       	ldi	r30, 0x80	; 128
    67e2:	f0 e0       	ldi	r31, 0x00	; 0
    67e4:	80 81       	ld	r24, Z
    67e6:	81 60       	ori	r24, 0x01	; 1
    67e8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    67ea:	e1 eb       	ldi	r30, 0xB1	; 177
    67ec:	f0 e0       	ldi	r31, 0x00	; 0
    67ee:	80 81       	ld	r24, Z
    67f0:	84 60       	ori	r24, 0x04	; 4
    67f2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    67f4:	e0 eb       	ldi	r30, 0xB0	; 176
    67f6:	f0 e0       	ldi	r31, 0x00	; 0
    67f8:	80 81       	ld	r24, Z
    67fa:	81 60       	ori	r24, 0x01	; 1
    67fc:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    67fe:	e1 e9       	ldi	r30, 0x91	; 145
    6800:	f0 e0       	ldi	r31, 0x00	; 0
    6802:	80 81       	ld	r24, Z
    6804:	82 60       	ori	r24, 0x02	; 2
    6806:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    6808:	80 81       	ld	r24, Z
    680a:	81 60       	ori	r24, 0x01	; 1
    680c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    680e:	e0 e9       	ldi	r30, 0x90	; 144
    6810:	f0 e0       	ldi	r31, 0x00	; 0
    6812:	80 81       	ld	r24, Z
    6814:	81 60       	ori	r24, 0x01	; 1
    6816:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    6818:	e1 ea       	ldi	r30, 0xA1	; 161
    681a:	f0 e0       	ldi	r31, 0x00	; 0
    681c:	80 81       	ld	r24, Z
    681e:	82 60       	ori	r24, 0x02	; 2
    6820:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    6822:	80 81       	ld	r24, Z
    6824:	81 60       	ori	r24, 0x01	; 1
    6826:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    6828:	e0 ea       	ldi	r30, 0xA0	; 160
    682a:	f0 e0       	ldi	r31, 0x00	; 0
    682c:	80 81       	ld	r24, Z
    682e:	81 60       	ori	r24, 0x01	; 1
    6830:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    6832:	e1 e2       	ldi	r30, 0x21	; 33
    6834:	f1 e0       	ldi	r31, 0x01	; 1
    6836:	80 81       	ld	r24, Z
    6838:	82 60       	ori	r24, 0x02	; 2
    683a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    683c:	80 81       	ld	r24, Z
    683e:	81 60       	ori	r24, 0x01	; 1
    6840:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    6842:	e0 e2       	ldi	r30, 0x20	; 32
    6844:	f1 e0       	ldi	r31, 0x01	; 1
    6846:	80 81       	ld	r24, Z
    6848:	81 60       	ori	r24, 0x01	; 1
    684a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    684c:	ea e7       	ldi	r30, 0x7A	; 122
    684e:	f0 e0       	ldi	r31, 0x00	; 0
    6850:	80 81       	ld	r24, Z
    6852:	84 60       	ori	r24, 0x04	; 4
    6854:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6856:	80 81       	ld	r24, Z
    6858:	82 60       	ori	r24, 0x02	; 2
    685a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    685c:	80 81       	ld	r24, Z
    685e:	81 60       	ori	r24, 0x01	; 1
    6860:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6862:	80 81       	ld	r24, Z
    6864:	80 68       	ori	r24, 0x80	; 128
    6866:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6868:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    686c:	08 95       	ret

0000686e <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    686e:	86 33       	cpi	r24, 0x36	; 54
    6870:	08 f0       	brcs	.+2      	; 0x6874 <analogRead+0x6>
    6872:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    6874:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    6878:	28 2f       	mov	r18, r24
    687a:	28 70       	andi	r18, 0x08	; 8
    687c:	97 7f       	andi	r25, 0xF7	; 247
    687e:	92 2b       	or	r25, r18
    6880:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    6884:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <analog_reference>
    6888:	90 e4       	ldi	r25, 0x40	; 64
    688a:	29 9f       	mul	r18, r25
    688c:	90 01       	movw	r18, r0
    688e:	11 24       	eor	r1, r1
    6890:	87 70       	andi	r24, 0x07	; 7
    6892:	82 2b       	or	r24, r18
    6894:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    6898:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    689c:	80 64       	ori	r24, 0x40	; 64
    689e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    68a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    68a6:	86 fd       	sbrc	r24, 6
    68a8:	fc cf       	rjmp	.-8      	; 0x68a2 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    68aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    68ae:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    68b2:	90 e0       	ldi	r25, 0x00	; 0
}
    68b4:	92 2b       	or	r25, r18
    68b6:	08 95       	ret

000068b8 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    68b8:	1f 93       	push	r17
    68ba:	cf 93       	push	r28
    68bc:	df 93       	push	r29
    68be:	18 2f       	mov	r17, r24
    68c0:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    68c2:	61 e0       	ldi	r22, 0x01	; 1
    68c4:	14 d1       	rcall	.+552    	; 0x6aee <pinMode>
	if (val == 0)
    68c6:	20 97       	sbiw	r28, 0x00	; 0
    68c8:	11 f4       	brne	.+4      	; 0x68ce <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    68ca:	60 e0       	ldi	r22, 0x00	; 0
    68cc:	04 c0       	rjmp	.+8      	; 0x68d6 <analogWrite+0x1e>
	}
	else if (val == 255)
    68ce:	cf 3f       	cpi	r28, 0xFF	; 255
    68d0:	d1 05       	cpc	r29, r1
    68d2:	31 f4       	brne	.+12     	; 0x68e0 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    68d4:	61 e0       	ldi	r22, 0x01	; 1
    68d6:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    68d8:	df 91       	pop	r29
    68da:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    68dc:	1f 91       	pop	r17
    68de:	43 c1       	rjmp	.+646    	; 0x6b66 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    68e0:	e1 2f       	mov	r30, r17
    68e2:	f0 e0       	ldi	r31, 0x00	; 0
    68e4:	ed 59       	subi	r30, 0x9D	; 157
    68e6:	f4 4f       	sbci	r31, 0xF4	; 244
    68e8:	e4 91       	lpm	r30, Z
    68ea:	8e 2f       	mov	r24, r30
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	fc 01       	movw	r30, r24
    68f0:	31 97       	sbiw	r30, 0x01	; 1
    68f2:	e2 31       	cpi	r30, 0x12	; 18
    68f4:	f1 05       	cpc	r31, r1
    68f6:	08 f0       	brcs	.+2      	; 0x68fa <analogWrite+0x42>
    68f8:	9c c0       	rjmp	.+312    	; 0x6a32 <analogWrite+0x17a>
    68fa:	88 27       	eor	r24, r24
    68fc:	ee 58       	subi	r30, 0x8E	; 142
    68fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6900:	8f 4f       	sbci	r24, 0xFF	; 255
    6902:	24 c4       	rjmp	.+2120   	; 0x714c <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    6904:	84 b5       	in	r24, 0x24	; 36
    6906:	80 68       	ori	r24, 0x80	; 128
    6908:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    690a:	c7 bd       	out	0x27, r28	; 39
				break;
    690c:	97 c0       	rjmp	.+302    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    690e:	84 b5       	in	r24, 0x24	; 36
    6910:	80 62       	ori	r24, 0x20	; 32
    6912:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    6914:	c8 bd       	out	0x28, r28	; 40
				break;
    6916:	92 c0       	rjmp	.+292    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    6918:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    691c:	80 68       	ori	r24, 0x80	; 128
    691e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1A = val; // set pwm duty
    6922:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    6926:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				break;
    692a:	88 c0       	rjmp	.+272    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    692c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6930:	80 62       	ori	r24, 0x20	; 32
    6932:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1B = val; // set pwm duty
    6936:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    693a:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				break;
    693e:	7e c0       	rjmp	.+252    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				sbi(TCCR1A, COM1C1);
    6940:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6944:	88 60       	ori	r24, 0x08	; 8
    6946:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1C = val; // set pwm duty
    694a:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    694e:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
				break;
    6952:	74 c0       	rjmp	.+232    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    6954:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6958:	80 68       	ori	r24, 0x80	; 128
    695a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2A = val; // set pwm duty
    695e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
				break;
    6962:	6c c0       	rjmp	.+216    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    6964:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6968:	80 62       	ori	r24, 0x20	; 32
    696a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2B = val; // set pwm duty
    696e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
				break;
    6972:	64 c0       	rjmp	.+200    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    6974:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6978:	80 68       	ori	r24, 0x80	; 128
    697a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3A = val; // set pwm duty
    697e:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    6982:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
				break;
    6986:	5a c0       	rjmp	.+180    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    6988:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    698c:	80 62       	ori	r24, 0x20	; 32
    698e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3B = val; // set pwm duty
    6992:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    6996:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
				break;
    699a:	50 c0       	rjmp	.+160    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    699c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    69a0:	88 60       	ori	r24, 0x08	; 8
    69a2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3C = val; // set pwm duty
    69a6:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
    69aa:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
				break;
    69ae:	46 c0       	rjmp	.+140    	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    69b0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    69b4:	80 68       	ori	r24, 0x80	; 128
    69b6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    69ba:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    69be:	8f 7b       	andi	r24, 0xBF	; 191
    69c0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#endif
				OCR4A = val;	// set pwm duty
    69c4:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    69c8:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
				break;
    69cc:	37 c0       	rjmp	.+110    	; 0x6a3c <analogWrite+0x184>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    69ce:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    69d2:	80 62       	ori	r24, 0x20	; 32
    69d4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4B = val; // set pwm duty
    69d8:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    69dc:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
				break;
    69e0:	2d c0       	rjmp	.+90     	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    69e2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    69e6:	88 60       	ori	r24, 0x08	; 8
    69e8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4C = val; // set pwm duty
    69ec:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
    69f0:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
				break;
    69f4:	23 c0       	rjmp	.+70     	; 0x6a3c <analogWrite+0x184>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    69f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    69fa:	80 68       	ori	r24, 0x80	; 128
    69fc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5A = val; // set pwm duty
    6a00:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    6a04:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
				break;
    6a08:	19 c0       	rjmp	.+50     	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    6a0a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6a0e:	80 62       	ori	r24, 0x20	; 32
    6a10:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5B = val; // set pwm duty
    6a14:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    6a18:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
				break;
    6a1c:	0f c0       	rjmp	.+30     	; 0x6a3c <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    6a1e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6a22:	88 60       	ori	r24, 0x08	; 8
    6a24:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5C = val; // set pwm duty
    6a28:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
    6a2c:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
				break;
    6a30:	05 c0       	rjmp	.+10     	; 0x6a3c <analogWrite+0x184>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    6a32:	c0 38       	cpi	r28, 0x80	; 128
    6a34:	d1 05       	cpc	r29, r1
    6a36:	0c f0       	brlt	.+2      	; 0x6a3a <analogWrite+0x182>
    6a38:	4d cf       	rjmp	.-358    	; 0x68d4 <analogWrite+0x1c>
    6a3a:	47 cf       	rjmp	.-370    	; 0x68ca <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    6a3c:	df 91       	pop	r29
    6a3e:	cf 91       	pop	r28
    6a40:	1f 91       	pop	r17
    6a42:	08 95       	ret

00006a44 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6a44:	90 e0       	ldi	r25, 0x00	; 0
    6a46:	fc 01       	movw	r30, r24
    6a48:	31 97       	sbiw	r30, 0x01	; 1
    6a4a:	e2 31       	cpi	r30, 0x12	; 18
    6a4c:	f1 05       	cpc	r31, r1
    6a4e:	08 f0       	brcs	.+2      	; 0x6a52 <turnOffPWM+0xe>
    6a50:	4d c0       	rjmp	.+154    	; 0x6aec <turnOffPWM+0xa8>
    6a52:	88 27       	eor	r24, r24
    6a54:	ec 57       	subi	r30, 0x7C	; 124
    6a56:	ff 4f       	sbci	r31, 0xFF	; 255
    6a58:	8f 4f       	sbci	r24, 0xFF	; 255
    6a5a:	78 c3       	rjmp	.+1776   	; 0x714c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6a5c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6a60:	8f 77       	andi	r24, 0x7F	; 127
    6a62:	03 c0       	rjmp	.+6      	; 0x6a6a <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6a64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6a68:	8f 7d       	andi	r24, 0xDF	; 223
    6a6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6a6e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    6a70:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    6a74:	87 7f       	andi	r24, 0xF7	; 247
    6a76:	f9 cf       	rjmp	.-14     	; 0x6a6a <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6a78:	84 b5       	in	r24, 0x24	; 36
    6a7a:	8f 77       	andi	r24, 0x7F	; 127
    6a7c:	02 c0       	rjmp	.+4      	; 0x6a82 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6a7e:	84 b5       	in	r24, 0x24	; 36
    6a80:	8f 7d       	andi	r24, 0xDF	; 223
    6a82:	84 bd       	out	0x24, r24	; 36
    6a84:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6a86:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6a8a:	8f 77       	andi	r24, 0x7F	; 127
    6a8c:	03 c0       	rjmp	.+6      	; 0x6a94 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6a8e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6a92:	8f 7d       	andi	r24, 0xDF	; 223
    6a94:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    6a98:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    6a9a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6a9e:	8f 77       	andi	r24, 0x7F	; 127
    6aa0:	07 c0       	rjmp	.+14     	; 0x6ab0 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    6aa2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6aa6:	8f 7d       	andi	r24, 0xDF	; 223
    6aa8:	03 c0       	rjmp	.+6      	; 0x6ab0 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    6aaa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6aae:	87 7f       	andi	r24, 0xF7	; 247
    6ab0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    6ab4:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    6ab6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6aba:	8f 77       	andi	r24, 0x7F	; 127
    6abc:	07 c0       	rjmp	.+14     	; 0x6acc <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    6abe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6ac2:	8f 7d       	andi	r24, 0xDF	; 223
    6ac4:	03 c0       	rjmp	.+6      	; 0x6acc <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    6ac6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6aca:	87 7f       	andi	r24, 0xF7	; 247
    6acc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    6ad0:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    6ad2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6ad6:	8f 77       	andi	r24, 0x7F	; 127
    6ad8:	07 c0       	rjmp	.+14     	; 0x6ae8 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    6ada:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6ade:	8f 7d       	andi	r24, 0xDF	; 223
    6ae0:	03 c0       	rjmp	.+6      	; 0x6ae8 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    6ae2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6ae6:	87 7f       	andi	r24, 0xF7	; 247
    6ae8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    6aec:	08 95       	ret

00006aee <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6aee:	cf 93       	push	r28
    6af0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6af2:	90 e0       	ldi	r25, 0x00	; 0
    6af4:	fc 01       	movw	r30, r24
    6af6:	e7 55       	subi	r30, 0x57	; 87
    6af8:	f4 4f       	sbci	r31, 0xF4	; 244
    6afa:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6afc:	fc 01       	movw	r30, r24
    6afe:	e1 51       	subi	r30, 0x11	; 17
    6b00:	f4 4f       	sbci	r31, 0xF4	; 244
    6b02:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6b04:	88 23       	and	r24, r24
    6b06:	61 f1       	breq	.+88     	; 0x6b60 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	88 0f       	add	r24, r24
    6b0c:	99 1f       	adc	r25, r25
    6b0e:	fc 01       	movw	r30, r24
    6b10:	e7 59       	subi	r30, 0x97	; 151
    6b12:	f3 4f       	sbci	r31, 0xF3	; 243
    6b14:	c5 91       	lpm	r28, Z+
    6b16:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6b18:	fc 01       	movw	r30, r24
    6b1a:	e1 5b       	subi	r30, 0xB1	; 177
    6b1c:	f3 4f       	sbci	r31, 0xF3	; 243
    6b1e:	a5 91       	lpm	r26, Z+
    6b20:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    6b22:	61 11       	cpse	r22, r1
    6b24:	09 c0       	rjmp	.+18     	; 0x6b38 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    6b26:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6b28:	f8 94       	cli
		*reg &= ~bit;
    6b2a:	88 81       	ld	r24, Y
    6b2c:	20 95       	com	r18
    6b2e:	82 23       	and	r24, r18
    6b30:	88 83       	st	Y, r24
		*out &= ~bit;
    6b32:	ec 91       	ld	r30, X
    6b34:	2e 23       	and	r18, r30
    6b36:	0b c0       	rjmp	.+22     	; 0x6b4e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6b38:	62 30       	cpi	r22, 0x02	; 2
    6b3a:	61 f4       	brne	.+24     	; 0x6b54 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6b3c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6b3e:	f8 94       	cli
		*reg &= ~bit;
    6b40:	88 81       	ld	r24, Y
    6b42:	32 2f       	mov	r19, r18
    6b44:	30 95       	com	r19
    6b46:	83 23       	and	r24, r19
    6b48:	88 83       	st	Y, r24
		*out |= bit;
    6b4a:	ec 91       	ld	r30, X
    6b4c:	2e 2b       	or	r18, r30
    6b4e:	2c 93       	st	X, r18
		SREG = oldSREG;
    6b50:	9f bf       	out	0x3f, r25	; 63
    6b52:	06 c0       	rjmp	.+12     	; 0x6b60 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    6b54:	8f b7       	in	r24, 0x3f	; 63
                cli();
    6b56:	f8 94       	cli
		*reg |= bit;
    6b58:	e8 81       	ld	r30, Y
    6b5a:	2e 2b       	or	r18, r30
    6b5c:	28 83       	st	Y, r18
		SREG = oldSREG;
    6b5e:	8f bf       	out	0x3f, r24	; 63
	}
}
    6b60:	df 91       	pop	r29
    6b62:	cf 91       	pop	r28
    6b64:	08 95       	ret

00006b66 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6b66:	1f 93       	push	r17
    6b68:	cf 93       	push	r28
    6b6a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6b6c:	28 2f       	mov	r18, r24
    6b6e:	30 e0       	ldi	r19, 0x00	; 0
    6b70:	f9 01       	movw	r30, r18
    6b72:	ed 59       	subi	r30, 0x9D	; 157
    6b74:	f4 4f       	sbci	r31, 0xF4	; 244
    6b76:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6b78:	f9 01       	movw	r30, r18
    6b7a:	e7 55       	subi	r30, 0x57	; 87
    6b7c:	f4 4f       	sbci	r31, 0xF4	; 244
    6b7e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6b80:	f9 01       	movw	r30, r18
    6b82:	e1 51       	subi	r30, 0x11	; 17
    6b84:	f4 4f       	sbci	r31, 0xF4	; 244
    6b86:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6b88:	cc 23       	and	r28, r28
    6b8a:	b9 f0       	breq	.+46     	; 0x6bba <digitalWrite+0x54>
    6b8c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6b8e:	81 11       	cpse	r24, r1
    6b90:	59 df       	rcall	.-334    	; 0x6a44 <turnOffPWM>

	out = portOutputRegister(port);
    6b92:	ec 2f       	mov	r30, r28
    6b94:	f0 e0       	ldi	r31, 0x00	; 0
    6b96:	ee 0f       	add	r30, r30
    6b98:	ff 1f       	adc	r31, r31
    6b9a:	e1 5b       	subi	r30, 0xB1	; 177
    6b9c:	f3 4f       	sbci	r31, 0xF3	; 243
    6b9e:	a5 91       	lpm	r26, Z+
    6ba0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6ba2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6ba4:	f8 94       	cli

	if (val == LOW) {
    6ba6:	11 11       	cpse	r17, r1
    6ba8:	04 c0       	rjmp	.+8      	; 0x6bb2 <digitalWrite+0x4c>
		*out &= ~bit;
    6baa:	8c 91       	ld	r24, X
    6bac:	d0 95       	com	r29
    6bae:	d8 23       	and	r29, r24
    6bb0:	02 c0       	rjmp	.+4      	; 0x6bb6 <digitalWrite+0x50>
	} else {
		*out |= bit;
    6bb2:	ec 91       	ld	r30, X
    6bb4:	de 2b       	or	r29, r30
    6bb6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    6bb8:	9f bf       	out	0x3f, r25	; 63
}
    6bba:	df 91       	pop	r29
    6bbc:	cf 91       	pop	r28
    6bbe:	1f 91       	pop	r17
    6bc0:	08 95       	ret

00006bc2 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6bc2:	cf 93       	push	r28
    6bc4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6bc6:	28 2f       	mov	r18, r24
    6bc8:	30 e0       	ldi	r19, 0x00	; 0
    6bca:	f9 01       	movw	r30, r18
    6bcc:	ed 59       	subi	r30, 0x9D	; 157
    6bce:	f4 4f       	sbci	r31, 0xF4	; 244
    6bd0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6bd2:	f9 01       	movw	r30, r18
    6bd4:	e7 55       	subi	r30, 0x57	; 87
    6bd6:	f4 4f       	sbci	r31, 0xF4	; 244
    6bd8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6bda:	f9 01       	movw	r30, r18
    6bdc:	e1 51       	subi	r30, 0x11	; 17
    6bde:	f4 4f       	sbci	r31, 0xF4	; 244
    6be0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6be2:	cc 23       	and	r28, r28
    6be4:	89 f0       	breq	.+34     	; 0x6c08 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6be6:	81 11       	cpse	r24, r1
    6be8:	2d df       	rcall	.-422    	; 0x6a44 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6bea:	ec 2f       	mov	r30, r28
    6bec:	f0 e0       	ldi	r31, 0x00	; 0
    6bee:	ee 0f       	add	r30, r30
    6bf0:	ff 1f       	adc	r31, r31
    6bf2:	eb 5c       	subi	r30, 0xCB	; 203
    6bf4:	f3 4f       	sbci	r31, 0xF3	; 243
    6bf6:	a5 91       	lpm	r26, Z+
    6bf8:	b4 91       	lpm	r27, Z
    6bfa:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6bfc:	ed 23       	and	r30, r29
    6bfe:	81 e0       	ldi	r24, 0x01	; 1
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	21 f4       	brne	.+8      	; 0x6c0c <digitalRead+0x4a>
    6c04:	80 e0       	ldi	r24, 0x00	; 0
    6c06:	02 c0       	rjmp	.+4      	; 0x6c0c <digitalRead+0x4a>
    6c08:	80 e0       	ldi	r24, 0x00	; 0
    6c0a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6c0c:	df 91       	pop	r29
    6c0e:	cf 91       	pop	r28
    6c10:	08 95       	ret

00006c12 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6c12:	4f 92       	push	r4
    6c14:	5f 92       	push	r5
    6c16:	6f 92       	push	r6
    6c18:	7f 92       	push	r7
    6c1a:	af 92       	push	r10
    6c1c:	bf 92       	push	r11
    6c1e:	cf 92       	push	r12
    6c20:	df 92       	push	r13
    6c22:	ef 92       	push	r14
    6c24:	ff 92       	push	r15
    6c26:	0f 93       	push	r16
    6c28:	1f 93       	push	r17
    6c2a:	cf 93       	push	r28
    6c2c:	df 93       	push	r29
    6c2e:	cd b7       	in	r28, 0x3d	; 61
    6c30:	de b7       	in	r29, 0x3e	; 62
    6c32:	29 01       	movw	r4, r18
    6c34:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6c36:	9b 01       	movw	r18, r22
    6c38:	ac 01       	movw	r20, r24
    6c3a:	24 19       	sub	r18, r4
    6c3c:	35 09       	sbc	r19, r5
    6c3e:	46 09       	sbc	r20, r6
    6c40:	57 09       	sbc	r21, r7
    6c42:	8a 89       	ldd	r24, Y+18	; 0x12
    6c44:	9b 89       	ldd	r25, Y+19	; 0x13
    6c46:	ac 89       	ldd	r26, Y+20	; 0x14
    6c48:	bd 89       	ldd	r27, Y+21	; 0x15
    6c4a:	bc 01       	movw	r22, r24
    6c4c:	cd 01       	movw	r24, r26
    6c4e:	6a 19       	sub	r22, r10
    6c50:	7b 09       	sbc	r23, r11
    6c52:	8c 09       	sbc	r24, r12
    6c54:	9d 09       	sbc	r25, r13
    6c56:	2d d2       	rcall	.+1114   	; 0x70b2 <__mulsi3>
    6c58:	a8 01       	movw	r20, r16
    6c5a:	97 01       	movw	r18, r14
    6c5c:	24 19       	sub	r18, r4
    6c5e:	35 09       	sbc	r19, r5
    6c60:	46 09       	sbc	r20, r6
    6c62:	57 09       	sbc	r21, r7
    6c64:	57 d2       	rcall	.+1198   	; 0x7114 <__divmodsi4>
    6c66:	ca 01       	movw	r24, r20
    6c68:	b9 01       	movw	r22, r18
    6c6a:	6a 0d       	add	r22, r10
    6c6c:	7b 1d       	adc	r23, r11
    6c6e:	8c 1d       	adc	r24, r12
    6c70:	9d 1d       	adc	r25, r13
}
    6c72:	df 91       	pop	r29
    6c74:	cf 91       	pop	r28
    6c76:	1f 91       	pop	r17
    6c78:	0f 91       	pop	r16
    6c7a:	ff 90       	pop	r15
    6c7c:	ef 90       	pop	r14
    6c7e:	df 90       	pop	r13
    6c80:	cf 90       	pop	r12
    6c82:	bf 90       	pop	r11
    6c84:	af 90       	pop	r10
    6c86:	7f 90       	pop	r7
    6c88:	6f 90       	pop	r6
    6c8a:	5f 90       	pop	r5
    6c8c:	4f 90       	pop	r4
    6c8e:	08 95       	ret

00006c90 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    6c90:	fc 01       	movw	r30, r24
    6c92:	80 81       	ld	r24, Z
    6c94:	91 81       	ldd	r25, Z+1	; 0x01
    6c96:	00 97       	sbiw	r24, 0x00	; 0
    6c98:	09 f0       	breq	.+2      	; 0x6c9c <_ZN6StringD1Ev+0xc>
    6c9a:	11 c3       	rjmp	.+1570   	; 0x72be <free>
    6c9c:	08 95       	ret

00006c9e <_ZN6String10invalidateEv>:
    6c9e:	cf 93       	push	r28
    6ca0:	df 93       	push	r29
    6ca2:	ec 01       	movw	r28, r24
    6ca4:	88 81       	ld	r24, Y
    6ca6:	99 81       	ldd	r25, Y+1	; 0x01
    6ca8:	00 97       	sbiw	r24, 0x00	; 0
    6caa:	09 f0       	breq	.+2      	; 0x6cae <_ZN6String10invalidateEv+0x10>
    6cac:	08 d3       	rcall	.+1552   	; 0x72be <free>
    6cae:	19 82       	std	Y+1, r1	; 0x01
    6cb0:	18 82       	st	Y, r1
    6cb2:	1d 82       	std	Y+5, r1	; 0x05
    6cb4:	1c 82       	std	Y+4, r1	; 0x04
    6cb6:	1b 82       	std	Y+3, r1	; 0x03
    6cb8:	1a 82       	std	Y+2, r1	; 0x02
    6cba:	df 91       	pop	r29
    6cbc:	cf 91       	pop	r28
    6cbe:	08 95       	ret

00006cc0 <_ZN6String12changeBufferEj>:
    6cc0:	0f 93       	push	r16
    6cc2:	1f 93       	push	r17
    6cc4:	cf 93       	push	r28
    6cc6:	df 93       	push	r29
    6cc8:	ec 01       	movw	r28, r24
    6cca:	8b 01       	movw	r16, r22
    6ccc:	6f 5f       	subi	r22, 0xFF	; 255
    6cce:	7f 4f       	sbci	r23, 0xFF	; 255
    6cd0:	88 81       	ld	r24, Y
    6cd2:	99 81       	ldd	r25, Y+1	; 0x01
    6cd4:	7d d3       	rcall	.+1786   	; 0x73d0 <realloc>
    6cd6:	00 97       	sbiw	r24, 0x00	; 0
    6cd8:	31 f0       	breq	.+12     	; 0x6ce6 <_ZN6String12changeBufferEj+0x26>
    6cda:	99 83       	std	Y+1, r25	; 0x01
    6cdc:	88 83       	st	Y, r24
    6cde:	1b 83       	std	Y+3, r17	; 0x03
    6ce0:	0a 83       	std	Y+2, r16	; 0x02
    6ce2:	81 e0       	ldi	r24, 0x01	; 1
    6ce4:	01 c0       	rjmp	.+2      	; 0x6ce8 <_ZN6String12changeBufferEj+0x28>
    6ce6:	80 e0       	ldi	r24, 0x00	; 0
    6ce8:	df 91       	pop	r29
    6cea:	cf 91       	pop	r28
    6cec:	1f 91       	pop	r17
    6cee:	0f 91       	pop	r16
    6cf0:	08 95       	ret

00006cf2 <_ZN6String7reserveEj>:
    6cf2:	cf 93       	push	r28
    6cf4:	df 93       	push	r29
    6cf6:	ec 01       	movw	r28, r24
    6cf8:	88 81       	ld	r24, Y
    6cfa:	99 81       	ldd	r25, Y+1	; 0x01
    6cfc:	89 2b       	or	r24, r25
    6cfe:	29 f0       	breq	.+10     	; 0x6d0a <_ZN6String7reserveEj+0x18>
    6d00:	8a 81       	ldd	r24, Y+2	; 0x02
    6d02:	9b 81       	ldd	r25, Y+3	; 0x03
    6d04:	86 17       	cp	r24, r22
    6d06:	97 07       	cpc	r25, r23
    6d08:	58 f4       	brcc	.+22     	; 0x6d20 <_ZN6String7reserveEj+0x2e>
    6d0a:	ce 01       	movw	r24, r28
    6d0c:	d9 df       	rcall	.-78     	; 0x6cc0 <_ZN6String12changeBufferEj>
    6d0e:	88 23       	and	r24, r24
    6d10:	41 f0       	breq	.+16     	; 0x6d22 <_ZN6String7reserveEj+0x30>
    6d12:	8c 81       	ldd	r24, Y+4	; 0x04
    6d14:	9d 81       	ldd	r25, Y+5	; 0x05
    6d16:	89 2b       	or	r24, r25
    6d18:	19 f4       	brne	.+6      	; 0x6d20 <_ZN6String7reserveEj+0x2e>
    6d1a:	e8 81       	ld	r30, Y
    6d1c:	f9 81       	ldd	r31, Y+1	; 0x01
    6d1e:	10 82       	st	Z, r1
    6d20:	81 e0       	ldi	r24, 0x01	; 1
    6d22:	df 91       	pop	r29
    6d24:	cf 91       	pop	r28
    6d26:	08 95       	ret

00006d28 <_ZN6String4copyEPKcj>:
    6d28:	ef 92       	push	r14
    6d2a:	ff 92       	push	r15
    6d2c:	0f 93       	push	r16
    6d2e:	1f 93       	push	r17
    6d30:	cf 93       	push	r28
    6d32:	df 93       	push	r29
    6d34:	ec 01       	movw	r28, r24
    6d36:	7b 01       	movw	r14, r22
    6d38:	8a 01       	movw	r16, r20
    6d3a:	ba 01       	movw	r22, r20
    6d3c:	da df       	rcall	.-76     	; 0x6cf2 <_ZN6String7reserveEj>
    6d3e:	81 11       	cpse	r24, r1
    6d40:	03 c0       	rjmp	.+6      	; 0x6d48 <_ZN6String4copyEPKcj+0x20>
    6d42:	ce 01       	movw	r24, r28
    6d44:	ac df       	rcall	.-168    	; 0x6c9e <_ZN6String10invalidateEv>
    6d46:	06 c0       	rjmp	.+12     	; 0x6d54 <_ZN6String4copyEPKcj+0x2c>
    6d48:	1d 83       	std	Y+5, r17	; 0x05
    6d4a:	0c 83       	std	Y+4, r16	; 0x04
    6d4c:	b7 01       	movw	r22, r14
    6d4e:	88 81       	ld	r24, Y
    6d50:	99 81       	ldd	r25, Y+1	; 0x01
    6d52:	43 d4       	rcall	.+2182   	; 0x75da <strcpy>
    6d54:	ce 01       	movw	r24, r28
    6d56:	df 91       	pop	r29
    6d58:	cf 91       	pop	r28
    6d5a:	1f 91       	pop	r17
    6d5c:	0f 91       	pop	r16
    6d5e:	ff 90       	pop	r15
    6d60:	ef 90       	pop	r14
    6d62:	08 95       	ret

00006d64 <_ZN6StringC1EPKc>:
    6d64:	fc 01       	movw	r30, r24
    6d66:	11 82       	std	Z+1, r1	; 0x01
    6d68:	10 82       	st	Z, r1
    6d6a:	13 82       	std	Z+3, r1	; 0x03
    6d6c:	12 82       	std	Z+2, r1	; 0x02
    6d6e:	15 82       	std	Z+5, r1	; 0x05
    6d70:	14 82       	std	Z+4, r1	; 0x04
    6d72:	61 15       	cp	r22, r1
    6d74:	71 05       	cpc	r23, r1
    6d76:	49 f0       	breq	.+18     	; 0x6d8a <_ZN6StringC1EPKc+0x26>
    6d78:	fb 01       	movw	r30, r22
    6d7a:	01 90       	ld	r0, Z+
    6d7c:	00 20       	and	r0, r0
    6d7e:	e9 f7       	brne	.-6      	; 0x6d7a <_ZN6StringC1EPKc+0x16>
    6d80:	31 97       	sbiw	r30, 0x01	; 1
    6d82:	af 01       	movw	r20, r30
    6d84:	46 1b       	sub	r20, r22
    6d86:	57 0b       	sbc	r21, r23
    6d88:	cf cf       	rjmp	.-98     	; 0x6d28 <_ZN6String4copyEPKcj>
    6d8a:	08 95       	ret

00006d8c <_ZN6StringaSERKS_>:
    6d8c:	cf 93       	push	r28
    6d8e:	df 93       	push	r29
    6d90:	ec 01       	movw	r28, r24
    6d92:	fb 01       	movw	r30, r22
    6d94:	86 17       	cp	r24, r22
    6d96:	97 07       	cpc	r25, r23
    6d98:	51 f0       	breq	.+20     	; 0x6dae <_ZN6StringaSERKS_+0x22>
    6d9a:	60 81       	ld	r22, Z
    6d9c:	71 81       	ldd	r23, Z+1	; 0x01
    6d9e:	61 15       	cp	r22, r1
    6da0:	71 05       	cpc	r23, r1
    6da2:	21 f0       	breq	.+8      	; 0x6dac <_ZN6StringaSERKS_+0x20>
    6da4:	44 81       	ldd	r20, Z+4	; 0x04
    6da6:	55 81       	ldd	r21, Z+5	; 0x05
    6da8:	bf df       	rcall	.-130    	; 0x6d28 <_ZN6String4copyEPKcj>
    6daa:	01 c0       	rjmp	.+2      	; 0x6dae <_ZN6StringaSERKS_+0x22>
    6dac:	78 df       	rcall	.-272    	; 0x6c9e <_ZN6String10invalidateEv>
    6dae:	ce 01       	movw	r24, r28
    6db0:	df 91       	pop	r29
    6db2:	cf 91       	pop	r28
    6db4:	08 95       	ret

00006db6 <_ZN6StringC1ERKS_>:
    6db6:	fc 01       	movw	r30, r24
    6db8:	11 82       	std	Z+1, r1	; 0x01
    6dba:	10 82       	st	Z, r1
    6dbc:	13 82       	std	Z+3, r1	; 0x03
    6dbe:	12 82       	std	Z+2, r1	; 0x02
    6dc0:	15 82       	std	Z+5, r1	; 0x05
    6dc2:	14 82       	std	Z+4, r1	; 0x04
    6dc4:	e3 cf       	rjmp	.-58     	; 0x6d8c <_ZN6StringaSERKS_>

00006dc6 <_ZN6StringaSEPKc>:
    6dc6:	cf 93       	push	r28
    6dc8:	df 93       	push	r29
    6dca:	ec 01       	movw	r28, r24
    6dcc:	61 15       	cp	r22, r1
    6dce:	71 05       	cpc	r23, r1
    6dd0:	51 f0       	breq	.+20     	; 0x6de6 <_ZN6StringaSEPKc+0x20>
    6dd2:	fb 01       	movw	r30, r22
    6dd4:	01 90       	ld	r0, Z+
    6dd6:	00 20       	and	r0, r0
    6dd8:	e9 f7       	brne	.-6      	; 0x6dd4 <_ZN6StringaSEPKc+0xe>
    6dda:	31 97       	sbiw	r30, 0x01	; 1
    6ddc:	af 01       	movw	r20, r30
    6dde:	46 1b       	sub	r20, r22
    6de0:	57 0b       	sbc	r21, r23
    6de2:	a2 df       	rcall	.-188    	; 0x6d28 <_ZN6String4copyEPKcj>
    6de4:	01 c0       	rjmp	.+2      	; 0x6de8 <_ZN6StringaSEPKc+0x22>
    6de6:	5b df       	rcall	.-330    	; 0x6c9e <_ZN6String10invalidateEv>
    6de8:	ce 01       	movw	r24, r28
    6dea:	df 91       	pop	r29
    6dec:	cf 91       	pop	r28
    6dee:	08 95       	ret

00006df0 <_ZN6StringC1Ehh>:
    6df0:	0f 93       	push	r16
    6df2:	1f 93       	push	r17
    6df4:	cf 93       	push	r28
    6df6:	df 93       	push	r29
    6df8:	cd b7       	in	r28, 0x3d	; 61
    6dfa:	de b7       	in	r29, 0x3e	; 62
    6dfc:	29 97       	sbiw	r28, 0x09	; 9
    6dfe:	0f b6       	in	r0, 0x3f	; 63
    6e00:	f8 94       	cli
    6e02:	de bf       	out	0x3e, r29	; 62
    6e04:	0f be       	out	0x3f, r0	; 63
    6e06:	cd bf       	out	0x3d, r28	; 61
    6e08:	8c 01       	movw	r16, r24
    6e0a:	86 2f       	mov	r24, r22
    6e0c:	f8 01       	movw	r30, r16
    6e0e:	11 82       	std	Z+1, r1	; 0x01
    6e10:	10 82       	st	Z, r1
    6e12:	13 82       	std	Z+3, r1	; 0x03
    6e14:	12 82       	std	Z+2, r1	; 0x02
    6e16:	15 82       	std	Z+5, r1	; 0x05
    6e18:	14 82       	std	Z+4, r1	; 0x04
    6e1a:	50 e0       	ldi	r21, 0x00	; 0
    6e1c:	be 01       	movw	r22, r28
    6e1e:	6f 5f       	subi	r22, 0xFF	; 255
    6e20:	7f 4f       	sbci	r23, 0xFF	; 255
    6e22:	90 e0       	ldi	r25, 0x00	; 0
    6e24:	e1 d3       	rcall	.+1986   	; 0x75e8 <utoa>
    6e26:	be 01       	movw	r22, r28
    6e28:	6f 5f       	subi	r22, 0xFF	; 255
    6e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e2c:	c8 01       	movw	r24, r16
    6e2e:	cb df       	rcall	.-106    	; 0x6dc6 <_ZN6StringaSEPKc>
    6e30:	29 96       	adiw	r28, 0x09	; 9
    6e32:	0f b6       	in	r0, 0x3f	; 63
    6e34:	f8 94       	cli
    6e36:	de bf       	out	0x3e, r29	; 62
    6e38:	0f be       	out	0x3f, r0	; 63
    6e3a:	cd bf       	out	0x3d, r28	; 61
    6e3c:	df 91       	pop	r29
    6e3e:	cf 91       	pop	r28
    6e40:	1f 91       	pop	r17
    6e42:	0f 91       	pop	r16
    6e44:	08 95       	ret

00006e46 <_ZN6String6concatEPKcj>:
    6e46:	ef 92       	push	r14
    6e48:	ff 92       	push	r15
    6e4a:	0f 93       	push	r16
    6e4c:	1f 93       	push	r17
    6e4e:	cf 93       	push	r28
    6e50:	df 93       	push	r29
    6e52:	61 15       	cp	r22, r1
    6e54:	71 05       	cpc	r23, r1
    6e56:	11 f4       	brne	.+4      	; 0x6e5c <_ZN6String6concatEPKcj+0x16>
    6e58:	80 e0       	ldi	r24, 0x00	; 0
    6e5a:	1a c0       	rjmp	.+52     	; 0x6e90 <_ZN6String6concatEPKcj+0x4a>
    6e5c:	41 15       	cp	r20, r1
    6e5e:	51 05       	cpc	r21, r1
    6e60:	b1 f0       	breq	.+44     	; 0x6e8e <_ZN6String6concatEPKcj+0x48>
    6e62:	7b 01       	movw	r14, r22
    6e64:	ec 01       	movw	r28, r24
    6e66:	8c 81       	ldd	r24, Y+4	; 0x04
    6e68:	9d 81       	ldd	r25, Y+5	; 0x05
    6e6a:	8a 01       	movw	r16, r20
    6e6c:	08 0f       	add	r16, r24
    6e6e:	19 1f       	adc	r17, r25
    6e70:	b8 01       	movw	r22, r16
    6e72:	ce 01       	movw	r24, r28
    6e74:	3e df       	rcall	.-388    	; 0x6cf2 <_ZN6String7reserveEj>
    6e76:	88 23       	and	r24, r24
    6e78:	79 f3       	breq	.-34     	; 0x6e58 <_ZN6String6concatEPKcj+0x12>
    6e7a:	28 81       	ld	r18, Y
    6e7c:	39 81       	ldd	r19, Y+1	; 0x01
    6e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    6e80:	9d 81       	ldd	r25, Y+5	; 0x05
    6e82:	b7 01       	movw	r22, r14
    6e84:	82 0f       	add	r24, r18
    6e86:	93 1f       	adc	r25, r19
    6e88:	a8 d3       	rcall	.+1872   	; 0x75da <strcpy>
    6e8a:	1d 83       	std	Y+5, r17	; 0x05
    6e8c:	0c 83       	std	Y+4, r16	; 0x04
    6e8e:	81 e0       	ldi	r24, 0x01	; 1
    6e90:	df 91       	pop	r29
    6e92:	cf 91       	pop	r28
    6e94:	1f 91       	pop	r17
    6e96:	0f 91       	pop	r16
    6e98:	ff 90       	pop	r15
    6e9a:	ef 90       	pop	r14
    6e9c:	08 95       	ret

00006e9e <_ZN6String6concatERKS_>:
    6e9e:	fb 01       	movw	r30, r22
    6ea0:	44 81       	ldd	r20, Z+4	; 0x04
    6ea2:	55 81       	ldd	r21, Z+5	; 0x05
    6ea4:	60 81       	ld	r22, Z
    6ea6:	71 81       	ldd	r23, Z+1	; 0x01
    6ea8:	ce cf       	rjmp	.-100    	; 0x6e46 <_ZN6String6concatEPKcj>

00006eaa <_ZN6String6concatEPKc>:
    6eaa:	61 15       	cp	r22, r1
    6eac:	71 05       	cpc	r23, r1
    6eae:	49 f0       	breq	.+18     	; 0x6ec2 <_ZN6String6concatEPKc+0x18>
    6eb0:	fb 01       	movw	r30, r22
    6eb2:	01 90       	ld	r0, Z+
    6eb4:	00 20       	and	r0, r0
    6eb6:	e9 f7       	brne	.-6      	; 0x6eb2 <_ZN6String6concatEPKc+0x8>
    6eb8:	31 97       	sbiw	r30, 0x01	; 1
    6eba:	af 01       	movw	r20, r30
    6ebc:	46 1b       	sub	r20, r22
    6ebe:	57 0b       	sbc	r21, r23
    6ec0:	c2 cf       	rjmp	.-124    	; 0x6e46 <_ZN6String6concatEPKcj>
    6ec2:	80 e0       	ldi	r24, 0x00	; 0
    6ec4:	08 95       	ret

00006ec6 <_ZNK6String9compareToERKS_>:
    6ec6:	cf 93       	push	r28
    6ec8:	df 93       	push	r29
    6eca:	dc 01       	movw	r26, r24
    6ecc:	ed 91       	ld	r30, X+
    6ece:	fc 91       	ld	r31, X
    6ed0:	eb 01       	movw	r28, r22
    6ed2:	a8 81       	ld	r26, Y
    6ed4:	b9 81       	ldd	r27, Y+1	; 0x01
    6ed6:	30 97       	sbiw	r30, 0x00	; 0
    6ed8:	11 f0       	breq	.+4      	; 0x6ede <_ZNK6String9compareToERKS_+0x18>
    6eda:	10 97       	sbiw	r26, 0x00	; 0
    6edc:	c9 f4       	brne	.+50     	; 0x6f10 <_ZNK6String9compareToERKS_+0x4a>
    6ede:	10 97       	sbiw	r26, 0x00	; 0
    6ee0:	59 f0       	breq	.+22     	; 0x6ef8 <_ZNK6String9compareToERKS_+0x32>
    6ee2:	eb 01       	movw	r28, r22
    6ee4:	2c 81       	ldd	r18, Y+4	; 0x04
    6ee6:	3d 81       	ldd	r19, Y+5	; 0x05
    6ee8:	23 2b       	or	r18, r19
    6eea:	31 f0       	breq	.+12     	; 0x6ef8 <_ZNK6String9compareToERKS_+0x32>
    6eec:	8c 91       	ld	r24, X
    6eee:	90 e0       	ldi	r25, 0x00	; 0
    6ef0:	91 95       	neg	r25
    6ef2:	81 95       	neg	r24
    6ef4:	91 09       	sbc	r25, r1
    6ef6:	13 c0       	rjmp	.+38     	; 0x6f1e <_ZNK6String9compareToERKS_+0x58>
    6ef8:	30 97       	sbiw	r30, 0x00	; 0
    6efa:	79 f0       	breq	.+30     	; 0x6f1a <_ZNK6String9compareToERKS_+0x54>
    6efc:	dc 01       	movw	r26, r24
    6efe:	14 96       	adiw	r26, 0x04	; 4
    6f00:	8d 91       	ld	r24, X+
    6f02:	9c 91       	ld	r25, X
    6f04:	15 97       	sbiw	r26, 0x05	; 5
    6f06:	89 2b       	or	r24, r25
    6f08:	41 f0       	breq	.+16     	; 0x6f1a <_ZNK6String9compareToERKS_+0x54>
    6f0a:	80 81       	ld	r24, Z
    6f0c:	90 e0       	ldi	r25, 0x00	; 0
    6f0e:	07 c0       	rjmp	.+14     	; 0x6f1e <_ZNK6String9compareToERKS_+0x58>
    6f10:	bd 01       	movw	r22, r26
    6f12:	cf 01       	movw	r24, r30
    6f14:	df 91       	pop	r29
    6f16:	cf 91       	pop	r28
    6f18:	57 c3       	rjmp	.+1710   	; 0x75c8 <strcmp>
    6f1a:	80 e0       	ldi	r24, 0x00	; 0
    6f1c:	90 e0       	ldi	r25, 0x00	; 0
    6f1e:	df 91       	pop	r29
    6f20:	cf 91       	pop	r28
    6f22:	08 95       	ret

00006f24 <_ZNK6String6equalsERKS_>:
    6f24:	fc 01       	movw	r30, r24
    6f26:	44 81       	ldd	r20, Z+4	; 0x04
    6f28:	55 81       	ldd	r21, Z+5	; 0x05
    6f2a:	fb 01       	movw	r30, r22
    6f2c:	24 81       	ldd	r18, Z+4	; 0x04
    6f2e:	35 81       	ldd	r19, Z+5	; 0x05
    6f30:	42 17       	cp	r20, r18
    6f32:	53 07       	cpc	r21, r19
    6f34:	21 f4       	brne	.+8      	; 0x6f3e <_ZNK6String6equalsERKS_+0x1a>
    6f36:	c7 df       	rcall	.-114    	; 0x6ec6 <_ZNK6String9compareToERKS_>
    6f38:	21 e0       	ldi	r18, 0x01	; 1
    6f3a:	89 2b       	or	r24, r25
    6f3c:	09 f0       	breq	.+2      	; 0x6f40 <_ZNK6String6equalsERKS_+0x1c>
    6f3e:	20 e0       	ldi	r18, 0x00	; 0
    6f40:	82 2f       	mov	r24, r18
    6f42:	08 95       	ret

00006f44 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    6f44:	cf 93       	push	r28
    6f46:	df 93       	push	r29
	if (!buffer) return;
    6f48:	fc 01       	movw	r30, r24
    6f4a:	c0 81       	ld	r28, Z
    6f4c:	d1 81       	ldd	r29, Z+1	; 0x01
    6f4e:	20 97       	sbiw	r28, 0x00	; 0
    6f50:	39 f0       	breq	.+14     	; 0x6f60 <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    6f52:	88 81       	ld	r24, Y
    6f54:	88 23       	and	r24, r24
    6f56:	21 f0       	breq	.+8      	; 0x6f60 <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    6f58:	90 e0       	ldi	r25, 0x00	; 0
    6f5a:	1e d3       	rcall	.+1596   	; 0x7598 <toupper>
    6f5c:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    6f5e:	f9 cf       	rjmp	.-14     	; 0x6f52 <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    6f60:	df 91       	pop	r29
    6f62:	cf 91       	pop	r28
    6f64:	08 95       	ret

00006f66 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6f66:	08 95       	ret

00006f68 <__divsf3>:
    6f68:	12 d0       	rcall	.+36     	; 0x6f8e <__divsf3x>
    6f6a:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__fp_round>
    6f6e:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <__fp_pscB>
    6f72:	58 f0       	brcs	.+22     	; 0x6f8a <__divsf3+0x22>
    6f74:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__fp_pscA>
    6f78:	40 f0       	brcs	.+16     	; 0x6f8a <__divsf3+0x22>
    6f7a:	29 f4       	brne	.+10     	; 0x6f86 <__divsf3+0x1e>
    6f7c:	5f 3f       	cpi	r21, 0xFF	; 255
    6f7e:	29 f0       	breq	.+10     	; 0x6f8a <__divsf3+0x22>
    6f80:	0c 94 34 2e 	jmp	0x5c68	; 0x5c68 <__fp_inf>
    6f84:	51 11       	cpse	r21, r1
    6f86:	0c 94 7f 2e 	jmp	0x5cfe	; 0x5cfe <__fp_szero>
    6f8a:	0c 94 3a 2e 	jmp	0x5c74	; 0x5c74 <__fp_nan>

00006f8e <__divsf3x>:
    6f8e:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <__fp_split3>
    6f92:	68 f3       	brcs	.-38     	; 0x6f6e <__divsf3+0x6>

00006f94 <__divsf3_pse>:
    6f94:	99 23       	and	r25, r25
    6f96:	b1 f3       	breq	.-20     	; 0x6f84 <__divsf3+0x1c>
    6f98:	55 23       	and	r21, r21
    6f9a:	91 f3       	breq	.-28     	; 0x6f80 <__divsf3+0x18>
    6f9c:	95 1b       	sub	r25, r21
    6f9e:	55 0b       	sbc	r21, r21
    6fa0:	bb 27       	eor	r27, r27
    6fa2:	aa 27       	eor	r26, r26
    6fa4:	62 17       	cp	r22, r18
    6fa6:	73 07       	cpc	r23, r19
    6fa8:	84 07       	cpc	r24, r20
    6faa:	38 f0       	brcs	.+14     	; 0x6fba <__divsf3_pse+0x26>
    6fac:	9f 5f       	subi	r25, 0xFF	; 255
    6fae:	5f 4f       	sbci	r21, 0xFF	; 255
    6fb0:	22 0f       	add	r18, r18
    6fb2:	33 1f       	adc	r19, r19
    6fb4:	44 1f       	adc	r20, r20
    6fb6:	aa 1f       	adc	r26, r26
    6fb8:	a9 f3       	breq	.-22     	; 0x6fa4 <__divsf3_pse+0x10>
    6fba:	35 d0       	rcall	.+106    	; 0x7026 <__divsf3_pse+0x92>
    6fbc:	0e 2e       	mov	r0, r30
    6fbe:	3a f0       	brmi	.+14     	; 0x6fce <__divsf3_pse+0x3a>
    6fc0:	e0 e8       	ldi	r30, 0x80	; 128
    6fc2:	32 d0       	rcall	.+100    	; 0x7028 <__divsf3_pse+0x94>
    6fc4:	91 50       	subi	r25, 0x01	; 1
    6fc6:	50 40       	sbci	r21, 0x00	; 0
    6fc8:	e6 95       	lsr	r30
    6fca:	00 1c       	adc	r0, r0
    6fcc:	ca f7       	brpl	.-14     	; 0x6fc0 <__divsf3_pse+0x2c>
    6fce:	2b d0       	rcall	.+86     	; 0x7026 <__divsf3_pse+0x92>
    6fd0:	fe 2f       	mov	r31, r30
    6fd2:	29 d0       	rcall	.+82     	; 0x7026 <__divsf3_pse+0x92>
    6fd4:	66 0f       	add	r22, r22
    6fd6:	77 1f       	adc	r23, r23
    6fd8:	88 1f       	adc	r24, r24
    6fda:	bb 1f       	adc	r27, r27
    6fdc:	26 17       	cp	r18, r22
    6fde:	37 07       	cpc	r19, r23
    6fe0:	48 07       	cpc	r20, r24
    6fe2:	ab 07       	cpc	r26, r27
    6fe4:	b0 e8       	ldi	r27, 0x80	; 128
    6fe6:	09 f0       	breq	.+2      	; 0x6fea <__divsf3_pse+0x56>
    6fe8:	bb 0b       	sbc	r27, r27
    6fea:	80 2d       	mov	r24, r0
    6fec:	bf 01       	movw	r22, r30
    6fee:	ff 27       	eor	r31, r31
    6ff0:	93 58       	subi	r25, 0x83	; 131
    6ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    6ff4:	3a f0       	brmi	.+14     	; 0x7004 <__divsf3_pse+0x70>
    6ff6:	9e 3f       	cpi	r25, 0xFE	; 254
    6ff8:	51 05       	cpc	r21, r1
    6ffa:	78 f0       	brcs	.+30     	; 0x701a <__divsf3_pse+0x86>
    6ffc:	0c 94 34 2e 	jmp	0x5c68	; 0x5c68 <__fp_inf>
    7000:	0c 94 7f 2e 	jmp	0x5cfe	; 0x5cfe <__fp_szero>
    7004:	5f 3f       	cpi	r21, 0xFF	; 255
    7006:	e4 f3       	brlt	.-8      	; 0x7000 <__divsf3_pse+0x6c>
    7008:	98 3e       	cpi	r25, 0xE8	; 232
    700a:	d4 f3       	brlt	.-12     	; 0x7000 <__divsf3_pse+0x6c>
    700c:	86 95       	lsr	r24
    700e:	77 95       	ror	r23
    7010:	67 95       	ror	r22
    7012:	b7 95       	ror	r27
    7014:	f7 95       	ror	r31
    7016:	9f 5f       	subi	r25, 0xFF	; 255
    7018:	c9 f7       	brne	.-14     	; 0x700c <__divsf3_pse+0x78>
    701a:	88 0f       	add	r24, r24
    701c:	91 1d       	adc	r25, r1
    701e:	96 95       	lsr	r25
    7020:	87 95       	ror	r24
    7022:	97 f9       	bld	r25, 7
    7024:	08 95       	ret
    7026:	e1 e0       	ldi	r30, 0x01	; 1
    7028:	66 0f       	add	r22, r22
    702a:	77 1f       	adc	r23, r23
    702c:	88 1f       	adc	r24, r24
    702e:	bb 1f       	adc	r27, r27
    7030:	62 17       	cp	r22, r18
    7032:	73 07       	cpc	r23, r19
    7034:	84 07       	cpc	r24, r20
    7036:	ba 07       	cpc	r27, r26
    7038:	20 f0       	brcs	.+8      	; 0x7042 <__divsf3_pse+0xae>
    703a:	62 1b       	sub	r22, r18
    703c:	73 0b       	sbc	r23, r19
    703e:	84 0b       	sbc	r24, r20
    7040:	ba 0b       	sbc	r27, r26
    7042:	ee 1f       	adc	r30, r30
    7044:	88 f7       	brcc	.-30     	; 0x7028 <__divsf3_pse+0x94>
    7046:	e0 95       	com	r30
    7048:	08 95       	ret

0000704a <__fixunssfsi>:
    704a:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <__fp_splitA>
    704e:	88 f0       	brcs	.+34     	; 0x7072 <__fixunssfsi+0x28>
    7050:	9f 57       	subi	r25, 0x7F	; 127
    7052:	98 f0       	brcs	.+38     	; 0x707a <__fixunssfsi+0x30>
    7054:	b9 2f       	mov	r27, r25
    7056:	99 27       	eor	r25, r25
    7058:	b7 51       	subi	r27, 0x17	; 23
    705a:	b0 f0       	brcs	.+44     	; 0x7088 <__fixunssfsi+0x3e>
    705c:	e1 f0       	breq	.+56     	; 0x7096 <__fixunssfsi+0x4c>
    705e:	66 0f       	add	r22, r22
    7060:	77 1f       	adc	r23, r23
    7062:	88 1f       	adc	r24, r24
    7064:	99 1f       	adc	r25, r25
    7066:	1a f0       	brmi	.+6      	; 0x706e <__fixunssfsi+0x24>
    7068:	ba 95       	dec	r27
    706a:	c9 f7       	brne	.-14     	; 0x705e <__fixunssfsi+0x14>
    706c:	14 c0       	rjmp	.+40     	; 0x7096 <__fixunssfsi+0x4c>
    706e:	b1 30       	cpi	r27, 0x01	; 1
    7070:	91 f0       	breq	.+36     	; 0x7096 <__fixunssfsi+0x4c>
    7072:	0e 94 7e 2e 	call	0x5cfc	; 0x5cfc <__fp_zero>
    7076:	b1 e0       	ldi	r27, 0x01	; 1
    7078:	08 95       	ret
    707a:	0c 94 7e 2e 	jmp	0x5cfc	; 0x5cfc <__fp_zero>
    707e:	67 2f       	mov	r22, r23
    7080:	78 2f       	mov	r23, r24
    7082:	88 27       	eor	r24, r24
    7084:	b8 5f       	subi	r27, 0xF8	; 248
    7086:	39 f0       	breq	.+14     	; 0x7096 <__fixunssfsi+0x4c>
    7088:	b9 3f       	cpi	r27, 0xF9	; 249
    708a:	cc f3       	brlt	.-14     	; 0x707e <__fixunssfsi+0x34>
    708c:	86 95       	lsr	r24
    708e:	77 95       	ror	r23
    7090:	67 95       	ror	r22
    7092:	b3 95       	inc	r27
    7094:	d9 f7       	brne	.-10     	; 0x708c <__fixunssfsi+0x42>
    7096:	3e f4       	brtc	.+14     	; 0x70a6 <__fixunssfsi+0x5c>
    7098:	90 95       	com	r25
    709a:	80 95       	com	r24
    709c:	70 95       	com	r23
    709e:	61 95       	neg	r22
    70a0:	7f 4f       	sbci	r23, 0xFF	; 255
    70a2:	8f 4f       	sbci	r24, 0xFF	; 255
    70a4:	9f 4f       	sbci	r25, 0xFF	; 255
    70a6:	08 95       	ret

000070a8 <__unordsf2>:
    70a8:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <__fp_cmp>
    70ac:	88 0b       	sbc	r24, r24
    70ae:	99 0b       	sbc	r25, r25
    70b0:	08 95       	ret

000070b2 <__mulsi3>:
    70b2:	db 01       	movw	r26, r22
    70b4:	8f 93       	push	r24
    70b6:	9f 93       	push	r25
    70b8:	60 d0       	rcall	.+192    	; 0x717a <__muluhisi3>
    70ba:	bf 91       	pop	r27
    70bc:	af 91       	pop	r26
    70be:	a2 9f       	mul	r26, r18
    70c0:	80 0d       	add	r24, r0
    70c2:	91 1d       	adc	r25, r1
    70c4:	a3 9f       	mul	r26, r19
    70c6:	90 0d       	add	r25, r0
    70c8:	b2 9f       	mul	r27, r18
    70ca:	90 0d       	add	r25, r0
    70cc:	11 24       	eor	r1, r1
    70ce:	08 95       	ret

000070d0 <__udivmodsi4>:
    70d0:	a1 e2       	ldi	r26, 0x21	; 33
    70d2:	1a 2e       	mov	r1, r26
    70d4:	aa 1b       	sub	r26, r26
    70d6:	bb 1b       	sub	r27, r27
    70d8:	fd 01       	movw	r30, r26
    70da:	0d c0       	rjmp	.+26     	; 0x70f6 <__udivmodsi4_ep>

000070dc <__udivmodsi4_loop>:
    70dc:	aa 1f       	adc	r26, r26
    70de:	bb 1f       	adc	r27, r27
    70e0:	ee 1f       	adc	r30, r30
    70e2:	ff 1f       	adc	r31, r31
    70e4:	a2 17       	cp	r26, r18
    70e6:	b3 07       	cpc	r27, r19
    70e8:	e4 07       	cpc	r30, r20
    70ea:	f5 07       	cpc	r31, r21
    70ec:	20 f0       	brcs	.+8      	; 0x70f6 <__udivmodsi4_ep>
    70ee:	a2 1b       	sub	r26, r18
    70f0:	b3 0b       	sbc	r27, r19
    70f2:	e4 0b       	sbc	r30, r20
    70f4:	f5 0b       	sbc	r31, r21

000070f6 <__udivmodsi4_ep>:
    70f6:	66 1f       	adc	r22, r22
    70f8:	77 1f       	adc	r23, r23
    70fa:	88 1f       	adc	r24, r24
    70fc:	99 1f       	adc	r25, r25
    70fe:	1a 94       	dec	r1
    7100:	69 f7       	brne	.-38     	; 0x70dc <__udivmodsi4_loop>
    7102:	60 95       	com	r22
    7104:	70 95       	com	r23
    7106:	80 95       	com	r24
    7108:	90 95       	com	r25
    710a:	9b 01       	movw	r18, r22
    710c:	ac 01       	movw	r20, r24
    710e:	bd 01       	movw	r22, r26
    7110:	cf 01       	movw	r24, r30
    7112:	08 95       	ret

00007114 <__divmodsi4>:
    7114:	05 2e       	mov	r0, r21
    7116:	97 fb       	bst	r25, 7
    7118:	16 f4       	brtc	.+4      	; 0x711e <__divmodsi4+0xa>
    711a:	00 94       	com	r0
    711c:	0f d0       	rcall	.+30     	; 0x713c <__negsi2>
    711e:	57 fd       	sbrc	r21, 7
    7120:	05 d0       	rcall	.+10     	; 0x712c <__divmodsi4_neg2>
    7122:	d6 df       	rcall	.-84     	; 0x70d0 <__udivmodsi4>
    7124:	07 fc       	sbrc	r0, 7
    7126:	02 d0       	rcall	.+4      	; 0x712c <__divmodsi4_neg2>
    7128:	46 f4       	brtc	.+16     	; 0x713a <__divmodsi4_exit>
    712a:	08 c0       	rjmp	.+16     	; 0x713c <__negsi2>

0000712c <__divmodsi4_neg2>:
    712c:	50 95       	com	r21
    712e:	40 95       	com	r20
    7130:	30 95       	com	r19
    7132:	21 95       	neg	r18
    7134:	3f 4f       	sbci	r19, 0xFF	; 255
    7136:	4f 4f       	sbci	r20, 0xFF	; 255
    7138:	5f 4f       	sbci	r21, 0xFF	; 255

0000713a <__divmodsi4_exit>:
    713a:	08 95       	ret

0000713c <__negsi2>:
    713c:	90 95       	com	r25
    713e:	80 95       	com	r24
    7140:	70 95       	com	r23
    7142:	61 95       	neg	r22
    7144:	7f 4f       	sbci	r23, 0xFF	; 255
    7146:	8f 4f       	sbci	r24, 0xFF	; 255
    7148:	9f 4f       	sbci	r25, 0xFF	; 255
    714a:	08 95       	ret

0000714c <__tablejump2__>:
    714c:	ee 0f       	add	r30, r30
    714e:	ff 1f       	adc	r31, r31
    7150:	88 1f       	adc	r24, r24
    7152:	8b bf       	out	0x3b, r24	; 59
    7154:	07 90       	elpm	r0, Z+
    7156:	f6 91       	elpm	r31, Z
    7158:	e0 2d       	mov	r30, r0
    715a:	19 94       	eijmp

0000715c <__umulhisi3>:
    715c:	a2 9f       	mul	r26, r18
    715e:	b0 01       	movw	r22, r0
    7160:	b3 9f       	mul	r27, r19
    7162:	c0 01       	movw	r24, r0
    7164:	a3 9f       	mul	r26, r19
    7166:	70 0d       	add	r23, r0
    7168:	81 1d       	adc	r24, r1
    716a:	11 24       	eor	r1, r1
    716c:	91 1d       	adc	r25, r1
    716e:	b2 9f       	mul	r27, r18
    7170:	70 0d       	add	r23, r0
    7172:	81 1d       	adc	r24, r1
    7174:	11 24       	eor	r1, r1
    7176:	91 1d       	adc	r25, r1
    7178:	08 95       	ret

0000717a <__muluhisi3>:
    717a:	f0 df       	rcall	.-32     	; 0x715c <__umulhisi3>
    717c:	a5 9f       	mul	r26, r21
    717e:	90 0d       	add	r25, r0
    7180:	b4 9f       	mul	r27, r20
    7182:	90 0d       	add	r25, r0
    7184:	a4 9f       	mul	r26, r20
    7186:	80 0d       	add	r24, r0
    7188:	91 1d       	adc	r25, r1
    718a:	11 24       	eor	r1, r1
    718c:	08 95       	ret

0000718e <malloc>:
    718e:	0f 93       	push	r16
    7190:	1f 93       	push	r17
    7192:	cf 93       	push	r28
    7194:	df 93       	push	r29
    7196:	82 30       	cpi	r24, 0x02	; 2
    7198:	91 05       	cpc	r25, r1
    719a:	10 f4       	brcc	.+4      	; 0x71a0 <malloc+0x12>
    719c:	82 e0       	ldi	r24, 0x02	; 2
    719e:	90 e0       	ldi	r25, 0x00	; 0
    71a0:	e0 91 45 06 	lds	r30, 0x0645	; 0x800645 <__flp>
    71a4:	f0 91 46 06 	lds	r31, 0x0646	; 0x800646 <__flp+0x1>
    71a8:	20 e0       	ldi	r18, 0x00	; 0
    71aa:	30 e0       	ldi	r19, 0x00	; 0
    71ac:	a0 e0       	ldi	r26, 0x00	; 0
    71ae:	b0 e0       	ldi	r27, 0x00	; 0
    71b0:	30 97       	sbiw	r30, 0x00	; 0
    71b2:	19 f1       	breq	.+70     	; 0x71fa <malloc+0x6c>
    71b4:	40 81       	ld	r20, Z
    71b6:	51 81       	ldd	r21, Z+1	; 0x01
    71b8:	02 81       	ldd	r16, Z+2	; 0x02
    71ba:	13 81       	ldd	r17, Z+3	; 0x03
    71bc:	48 17       	cp	r20, r24
    71be:	59 07       	cpc	r21, r25
    71c0:	c8 f0       	brcs	.+50     	; 0x71f4 <malloc+0x66>
    71c2:	84 17       	cp	r24, r20
    71c4:	95 07       	cpc	r25, r21
    71c6:	69 f4       	brne	.+26     	; 0x71e2 <malloc+0x54>
    71c8:	10 97       	sbiw	r26, 0x00	; 0
    71ca:	31 f0       	breq	.+12     	; 0x71d8 <malloc+0x4a>
    71cc:	12 96       	adiw	r26, 0x02	; 2
    71ce:	0c 93       	st	X, r16
    71d0:	12 97       	sbiw	r26, 0x02	; 2
    71d2:	13 96       	adiw	r26, 0x03	; 3
    71d4:	1c 93       	st	X, r17
    71d6:	27 c0       	rjmp	.+78     	; 0x7226 <malloc+0x98>
    71d8:	00 93 45 06 	sts	0x0645, r16	; 0x800645 <__flp>
    71dc:	10 93 46 06 	sts	0x0646, r17	; 0x800646 <__flp+0x1>
    71e0:	22 c0       	rjmp	.+68     	; 0x7226 <malloc+0x98>
    71e2:	21 15       	cp	r18, r1
    71e4:	31 05       	cpc	r19, r1
    71e6:	19 f0       	breq	.+6      	; 0x71ee <malloc+0x60>
    71e8:	42 17       	cp	r20, r18
    71ea:	53 07       	cpc	r21, r19
    71ec:	18 f4       	brcc	.+6      	; 0x71f4 <malloc+0x66>
    71ee:	9a 01       	movw	r18, r20
    71f0:	bd 01       	movw	r22, r26
    71f2:	ef 01       	movw	r28, r30
    71f4:	df 01       	movw	r26, r30
    71f6:	f8 01       	movw	r30, r16
    71f8:	db cf       	rjmp	.-74     	; 0x71b0 <malloc+0x22>
    71fa:	21 15       	cp	r18, r1
    71fc:	31 05       	cpc	r19, r1
    71fe:	f9 f0       	breq	.+62     	; 0x723e <malloc+0xb0>
    7200:	28 1b       	sub	r18, r24
    7202:	39 0b       	sbc	r19, r25
    7204:	24 30       	cpi	r18, 0x04	; 4
    7206:	31 05       	cpc	r19, r1
    7208:	80 f4       	brcc	.+32     	; 0x722a <malloc+0x9c>
    720a:	8a 81       	ldd	r24, Y+2	; 0x02
    720c:	9b 81       	ldd	r25, Y+3	; 0x03
    720e:	61 15       	cp	r22, r1
    7210:	71 05       	cpc	r23, r1
    7212:	21 f0       	breq	.+8      	; 0x721c <malloc+0x8e>
    7214:	fb 01       	movw	r30, r22
    7216:	93 83       	std	Z+3, r25	; 0x03
    7218:	82 83       	std	Z+2, r24	; 0x02
    721a:	04 c0       	rjmp	.+8      	; 0x7224 <malloc+0x96>
    721c:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__flp+0x1>
    7220:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__flp>
    7224:	fe 01       	movw	r30, r28
    7226:	32 96       	adiw	r30, 0x02	; 2
    7228:	44 c0       	rjmp	.+136    	; 0x72b2 <malloc+0x124>
    722a:	fe 01       	movw	r30, r28
    722c:	e2 0f       	add	r30, r18
    722e:	f3 1f       	adc	r31, r19
    7230:	81 93       	st	Z+, r24
    7232:	91 93       	st	Z+, r25
    7234:	22 50       	subi	r18, 0x02	; 2
    7236:	31 09       	sbc	r19, r1
    7238:	39 83       	std	Y+1, r19	; 0x01
    723a:	28 83       	st	Y, r18
    723c:	3a c0       	rjmp	.+116    	; 0x72b2 <malloc+0x124>
    723e:	20 91 43 06 	lds	r18, 0x0643	; 0x800643 <__brkval>
    7242:	30 91 44 06 	lds	r19, 0x0644	; 0x800644 <__brkval+0x1>
    7246:	23 2b       	or	r18, r19
    7248:	41 f4       	brne	.+16     	; 0x725a <malloc+0xcc>
    724a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    724e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    7252:	30 93 44 06 	sts	0x0644, r19	; 0x800644 <__brkval+0x1>
    7256:	20 93 43 06 	sts	0x0643, r18	; 0x800643 <__brkval>
    725a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    725e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    7262:	21 15       	cp	r18, r1
    7264:	31 05       	cpc	r19, r1
    7266:	41 f4       	brne	.+16     	; 0x7278 <malloc+0xea>
    7268:	2d b7       	in	r18, 0x3d	; 61
    726a:	3e b7       	in	r19, 0x3e	; 62
    726c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    7270:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    7274:	24 1b       	sub	r18, r20
    7276:	35 0b       	sbc	r19, r21
    7278:	e0 91 43 06 	lds	r30, 0x0643	; 0x800643 <__brkval>
    727c:	f0 91 44 06 	lds	r31, 0x0644	; 0x800644 <__brkval+0x1>
    7280:	e2 17       	cp	r30, r18
    7282:	f3 07       	cpc	r31, r19
    7284:	a0 f4       	brcc	.+40     	; 0x72ae <malloc+0x120>
    7286:	2e 1b       	sub	r18, r30
    7288:	3f 0b       	sbc	r19, r31
    728a:	28 17       	cp	r18, r24
    728c:	39 07       	cpc	r19, r25
    728e:	78 f0       	brcs	.+30     	; 0x72ae <malloc+0x120>
    7290:	ac 01       	movw	r20, r24
    7292:	4e 5f       	subi	r20, 0xFE	; 254
    7294:	5f 4f       	sbci	r21, 0xFF	; 255
    7296:	24 17       	cp	r18, r20
    7298:	35 07       	cpc	r19, r21
    729a:	48 f0       	brcs	.+18     	; 0x72ae <malloc+0x120>
    729c:	4e 0f       	add	r20, r30
    729e:	5f 1f       	adc	r21, r31
    72a0:	50 93 44 06 	sts	0x0644, r21	; 0x800644 <__brkval+0x1>
    72a4:	40 93 43 06 	sts	0x0643, r20	; 0x800643 <__brkval>
    72a8:	81 93       	st	Z+, r24
    72aa:	91 93       	st	Z+, r25
    72ac:	02 c0       	rjmp	.+4      	; 0x72b2 <malloc+0x124>
    72ae:	e0 e0       	ldi	r30, 0x00	; 0
    72b0:	f0 e0       	ldi	r31, 0x00	; 0
    72b2:	cf 01       	movw	r24, r30
    72b4:	df 91       	pop	r29
    72b6:	cf 91       	pop	r28
    72b8:	1f 91       	pop	r17
    72ba:	0f 91       	pop	r16
    72bc:	08 95       	ret

000072be <free>:
    72be:	cf 93       	push	r28
    72c0:	df 93       	push	r29
    72c2:	00 97       	sbiw	r24, 0x00	; 0
    72c4:	09 f4       	brne	.+2      	; 0x72c8 <free+0xa>
    72c6:	81 c0       	rjmp	.+258    	; 0x73ca <free+0x10c>
    72c8:	fc 01       	movw	r30, r24
    72ca:	32 97       	sbiw	r30, 0x02	; 2
    72cc:	13 82       	std	Z+3, r1	; 0x03
    72ce:	12 82       	std	Z+2, r1	; 0x02
    72d0:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <__flp>
    72d4:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <__flp+0x1>
    72d8:	10 97       	sbiw	r26, 0x00	; 0
    72da:	81 f4       	brne	.+32     	; 0x72fc <free+0x3e>
    72dc:	20 81       	ld	r18, Z
    72de:	31 81       	ldd	r19, Z+1	; 0x01
    72e0:	82 0f       	add	r24, r18
    72e2:	93 1f       	adc	r25, r19
    72e4:	20 91 43 06 	lds	r18, 0x0643	; 0x800643 <__brkval>
    72e8:	30 91 44 06 	lds	r19, 0x0644	; 0x800644 <__brkval+0x1>
    72ec:	28 17       	cp	r18, r24
    72ee:	39 07       	cpc	r19, r25
    72f0:	51 f5       	brne	.+84     	; 0x7346 <free+0x88>
    72f2:	f0 93 44 06 	sts	0x0644, r31	; 0x800644 <__brkval+0x1>
    72f6:	e0 93 43 06 	sts	0x0643, r30	; 0x800643 <__brkval>
    72fa:	67 c0       	rjmp	.+206    	; 0x73ca <free+0x10c>
    72fc:	ed 01       	movw	r28, r26
    72fe:	20 e0       	ldi	r18, 0x00	; 0
    7300:	30 e0       	ldi	r19, 0x00	; 0
    7302:	ce 17       	cp	r28, r30
    7304:	df 07       	cpc	r29, r31
    7306:	40 f4       	brcc	.+16     	; 0x7318 <free+0x5a>
    7308:	4a 81       	ldd	r20, Y+2	; 0x02
    730a:	5b 81       	ldd	r21, Y+3	; 0x03
    730c:	9e 01       	movw	r18, r28
    730e:	41 15       	cp	r20, r1
    7310:	51 05       	cpc	r21, r1
    7312:	f1 f0       	breq	.+60     	; 0x7350 <free+0x92>
    7314:	ea 01       	movw	r28, r20
    7316:	f5 cf       	rjmp	.-22     	; 0x7302 <free+0x44>
    7318:	d3 83       	std	Z+3, r29	; 0x03
    731a:	c2 83       	std	Z+2, r28	; 0x02
    731c:	40 81       	ld	r20, Z
    731e:	51 81       	ldd	r21, Z+1	; 0x01
    7320:	84 0f       	add	r24, r20
    7322:	95 1f       	adc	r25, r21
    7324:	c8 17       	cp	r28, r24
    7326:	d9 07       	cpc	r29, r25
    7328:	59 f4       	brne	.+22     	; 0x7340 <free+0x82>
    732a:	88 81       	ld	r24, Y
    732c:	99 81       	ldd	r25, Y+1	; 0x01
    732e:	84 0f       	add	r24, r20
    7330:	95 1f       	adc	r25, r21
    7332:	02 96       	adiw	r24, 0x02	; 2
    7334:	91 83       	std	Z+1, r25	; 0x01
    7336:	80 83       	st	Z, r24
    7338:	8a 81       	ldd	r24, Y+2	; 0x02
    733a:	9b 81       	ldd	r25, Y+3	; 0x03
    733c:	93 83       	std	Z+3, r25	; 0x03
    733e:	82 83       	std	Z+2, r24	; 0x02
    7340:	21 15       	cp	r18, r1
    7342:	31 05       	cpc	r19, r1
    7344:	29 f4       	brne	.+10     	; 0x7350 <free+0x92>
    7346:	f0 93 46 06 	sts	0x0646, r31	; 0x800646 <__flp+0x1>
    734a:	e0 93 45 06 	sts	0x0645, r30	; 0x800645 <__flp>
    734e:	3d c0       	rjmp	.+122    	; 0x73ca <free+0x10c>
    7350:	e9 01       	movw	r28, r18
    7352:	fb 83       	std	Y+3, r31	; 0x03
    7354:	ea 83       	std	Y+2, r30	; 0x02
    7356:	49 91       	ld	r20, Y+
    7358:	59 91       	ld	r21, Y+
    735a:	c4 0f       	add	r28, r20
    735c:	d5 1f       	adc	r29, r21
    735e:	ec 17       	cp	r30, r28
    7360:	fd 07       	cpc	r31, r29
    7362:	61 f4       	brne	.+24     	; 0x737c <free+0xbe>
    7364:	80 81       	ld	r24, Z
    7366:	91 81       	ldd	r25, Z+1	; 0x01
    7368:	84 0f       	add	r24, r20
    736a:	95 1f       	adc	r25, r21
    736c:	02 96       	adiw	r24, 0x02	; 2
    736e:	e9 01       	movw	r28, r18
    7370:	99 83       	std	Y+1, r25	; 0x01
    7372:	88 83       	st	Y, r24
    7374:	82 81       	ldd	r24, Z+2	; 0x02
    7376:	93 81       	ldd	r25, Z+3	; 0x03
    7378:	9b 83       	std	Y+3, r25	; 0x03
    737a:	8a 83       	std	Y+2, r24	; 0x02
    737c:	e0 e0       	ldi	r30, 0x00	; 0
    737e:	f0 e0       	ldi	r31, 0x00	; 0
    7380:	12 96       	adiw	r26, 0x02	; 2
    7382:	8d 91       	ld	r24, X+
    7384:	9c 91       	ld	r25, X
    7386:	13 97       	sbiw	r26, 0x03	; 3
    7388:	00 97       	sbiw	r24, 0x00	; 0
    738a:	19 f0       	breq	.+6      	; 0x7392 <free+0xd4>
    738c:	fd 01       	movw	r30, r26
    738e:	dc 01       	movw	r26, r24
    7390:	f7 cf       	rjmp	.-18     	; 0x7380 <free+0xc2>
    7392:	8d 91       	ld	r24, X+
    7394:	9c 91       	ld	r25, X
    7396:	11 97       	sbiw	r26, 0x01	; 1
    7398:	9d 01       	movw	r18, r26
    739a:	2e 5f       	subi	r18, 0xFE	; 254
    739c:	3f 4f       	sbci	r19, 0xFF	; 255
    739e:	82 0f       	add	r24, r18
    73a0:	93 1f       	adc	r25, r19
    73a2:	20 91 43 06 	lds	r18, 0x0643	; 0x800643 <__brkval>
    73a6:	30 91 44 06 	lds	r19, 0x0644	; 0x800644 <__brkval+0x1>
    73aa:	28 17       	cp	r18, r24
    73ac:	39 07       	cpc	r19, r25
    73ae:	69 f4       	brne	.+26     	; 0x73ca <free+0x10c>
    73b0:	30 97       	sbiw	r30, 0x00	; 0
    73b2:	29 f4       	brne	.+10     	; 0x73be <free+0x100>
    73b4:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__flp+0x1>
    73b8:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <__flp>
    73bc:	02 c0       	rjmp	.+4      	; 0x73c2 <free+0x104>
    73be:	13 82       	std	Z+3, r1	; 0x03
    73c0:	12 82       	std	Z+2, r1	; 0x02
    73c2:	b0 93 44 06 	sts	0x0644, r27	; 0x800644 <__brkval+0x1>
    73c6:	a0 93 43 06 	sts	0x0643, r26	; 0x800643 <__brkval>
    73ca:	df 91       	pop	r29
    73cc:	cf 91       	pop	r28
    73ce:	08 95       	ret

000073d0 <realloc>:
    73d0:	6f 92       	push	r6
    73d2:	7f 92       	push	r7
    73d4:	8f 92       	push	r8
    73d6:	9f 92       	push	r9
    73d8:	af 92       	push	r10
    73da:	bf 92       	push	r11
    73dc:	cf 92       	push	r12
    73de:	df 92       	push	r13
    73e0:	ef 92       	push	r14
    73e2:	ff 92       	push	r15
    73e4:	0f 93       	push	r16
    73e6:	1f 93       	push	r17
    73e8:	cf 93       	push	r28
    73ea:	df 93       	push	r29
    73ec:	00 97       	sbiw	r24, 0x00	; 0
    73ee:	81 f4       	brne	.+32     	; 0x7410 <realloc+0x40>
    73f0:	cb 01       	movw	r24, r22
    73f2:	df 91       	pop	r29
    73f4:	cf 91       	pop	r28
    73f6:	1f 91       	pop	r17
    73f8:	0f 91       	pop	r16
    73fa:	ff 90       	pop	r15
    73fc:	ef 90       	pop	r14
    73fe:	df 90       	pop	r13
    7400:	cf 90       	pop	r12
    7402:	bf 90       	pop	r11
    7404:	af 90       	pop	r10
    7406:	9f 90       	pop	r9
    7408:	8f 90       	pop	r8
    740a:	7f 90       	pop	r7
    740c:	6f 90       	pop	r6
    740e:	bf ce       	rjmp	.-642    	; 0x718e <malloc>
    7410:	fc 01       	movw	r30, r24
    7412:	e6 0f       	add	r30, r22
    7414:	f7 1f       	adc	r31, r23
    7416:	9c 01       	movw	r18, r24
    7418:	22 50       	subi	r18, 0x02	; 2
    741a:	31 09       	sbc	r19, r1
    741c:	e2 17       	cp	r30, r18
    741e:	f3 07       	cpc	r31, r19
    7420:	08 f4       	brcc	.+2      	; 0x7424 <realloc+0x54>
    7422:	a5 c0       	rjmp	.+330    	; 0x756e <realloc+0x19e>
    7424:	ec 01       	movw	r28, r24
    7426:	d9 01       	movw	r26, r18
    7428:	0d 91       	ld	r16, X+
    742a:	1c 91       	ld	r17, X
    742c:	11 97       	sbiw	r26, 0x01	; 1
    742e:	06 17       	cp	r16, r22
    7430:	17 07       	cpc	r17, r23
    7432:	a8 f0       	brcs	.+42     	; 0x745e <realloc+0x8e>
    7434:	05 30       	cpi	r16, 0x05	; 5
    7436:	11 05       	cpc	r17, r1
    7438:	08 f4       	brcc	.+2      	; 0x743c <realloc+0x6c>
    743a:	97 c0       	rjmp	.+302    	; 0x756a <realloc+0x19a>
    743c:	c8 01       	movw	r24, r16
    743e:	04 97       	sbiw	r24, 0x04	; 4
    7440:	86 17       	cp	r24, r22
    7442:	97 07       	cpc	r25, r23
    7444:	08 f4       	brcc	.+2      	; 0x7448 <realloc+0x78>
    7446:	91 c0       	rjmp	.+290    	; 0x756a <realloc+0x19a>
    7448:	02 50       	subi	r16, 0x02	; 2
    744a:	11 09       	sbc	r17, r1
    744c:	06 1b       	sub	r16, r22
    744e:	17 0b       	sbc	r17, r23
    7450:	01 93       	st	Z+, r16
    7452:	11 93       	st	Z+, r17
    7454:	6d 93       	st	X+, r22
    7456:	7c 93       	st	X, r23
    7458:	cf 01       	movw	r24, r30
    745a:	31 df       	rcall	.-414    	; 0x72be <free>
    745c:	86 c0       	rjmp	.+268    	; 0x756a <realloc+0x19a>
    745e:	5b 01       	movw	r10, r22
    7460:	a0 1a       	sub	r10, r16
    7462:	b1 0a       	sbc	r11, r17
    7464:	4c 01       	movw	r8, r24
    7466:	80 0e       	add	r8, r16
    7468:	91 1e       	adc	r9, r17
    746a:	a0 91 45 06 	lds	r26, 0x0645	; 0x800645 <__flp>
    746e:	b0 91 46 06 	lds	r27, 0x0646	; 0x800646 <__flp+0x1>
    7472:	61 2c       	mov	r6, r1
    7474:	71 2c       	mov	r7, r1
    7476:	e1 2c       	mov	r14, r1
    7478:	f1 2c       	mov	r15, r1
    747a:	10 97       	sbiw	r26, 0x00	; 0
    747c:	09 f4       	brne	.+2      	; 0x7480 <realloc+0xb0>
    747e:	46 c0       	rjmp	.+140    	; 0x750c <realloc+0x13c>
    7480:	8d 91       	ld	r24, X+
    7482:	9c 91       	ld	r25, X
    7484:	11 97       	sbiw	r26, 0x01	; 1
    7486:	a8 15       	cp	r26, r8
    7488:	b9 05       	cpc	r27, r9
    748a:	b1 f5       	brne	.+108    	; 0x74f8 <realloc+0x128>
    748c:	6c 01       	movw	r12, r24
    748e:	42 e0       	ldi	r20, 0x02	; 2
    7490:	c4 0e       	add	r12, r20
    7492:	d1 1c       	adc	r13, r1
    7494:	ca 14       	cp	r12, r10
    7496:	db 04       	cpc	r13, r11
    7498:	78 f1       	brcs	.+94     	; 0x74f8 <realloc+0x128>
    749a:	4c 01       	movw	r8, r24
    749c:	8a 18       	sub	r8, r10
    749e:	9b 08       	sbc	r9, r11
    74a0:	64 01       	movw	r12, r8
    74a2:	42 e0       	ldi	r20, 0x02	; 2
    74a4:	c4 0e       	add	r12, r20
    74a6:	d1 1c       	adc	r13, r1
    74a8:	12 96       	adiw	r26, 0x02	; 2
    74aa:	bc 90       	ld	r11, X
    74ac:	12 97       	sbiw	r26, 0x02	; 2
    74ae:	13 96       	adiw	r26, 0x03	; 3
    74b0:	ac 91       	ld	r26, X
    74b2:	b5 e0       	ldi	r27, 0x05	; 5
    74b4:	cb 16       	cp	r12, r27
    74b6:	d1 04       	cpc	r13, r1
    74b8:	40 f0       	brcs	.+16     	; 0x74ca <realloc+0xfa>
    74ba:	b2 82       	std	Z+2, r11	; 0x02
    74bc:	a3 83       	std	Z+3, r26	; 0x03
    74be:	91 82       	std	Z+1, r9	; 0x01
    74c0:	80 82       	st	Z, r8
    74c2:	d9 01       	movw	r26, r18
    74c4:	6d 93       	st	X+, r22
    74c6:	7c 93       	st	X, r23
    74c8:	09 c0       	rjmp	.+18     	; 0x74dc <realloc+0x10c>
    74ca:	0e 5f       	subi	r16, 0xFE	; 254
    74cc:	1f 4f       	sbci	r17, 0xFF	; 255
    74ce:	80 0f       	add	r24, r16
    74d0:	91 1f       	adc	r25, r17
    74d2:	f9 01       	movw	r30, r18
    74d4:	91 83       	std	Z+1, r25	; 0x01
    74d6:	80 83       	st	Z, r24
    74d8:	eb 2d       	mov	r30, r11
    74da:	fa 2f       	mov	r31, r26
    74dc:	e1 14       	cp	r14, r1
    74de:	f1 04       	cpc	r15, r1
    74e0:	31 f0       	breq	.+12     	; 0x74ee <realloc+0x11e>
    74e2:	d7 01       	movw	r26, r14
    74e4:	13 96       	adiw	r26, 0x03	; 3
    74e6:	fc 93       	st	X, r31
    74e8:	ee 93       	st	-X, r30
    74ea:	12 97       	sbiw	r26, 0x02	; 2
    74ec:	3e c0       	rjmp	.+124    	; 0x756a <realloc+0x19a>
    74ee:	f0 93 46 06 	sts	0x0646, r31	; 0x800646 <__flp+0x1>
    74f2:	e0 93 45 06 	sts	0x0645, r30	; 0x800645 <__flp>
    74f6:	39 c0       	rjmp	.+114    	; 0x756a <realloc+0x19a>
    74f8:	68 16       	cp	r6, r24
    74fa:	79 06       	cpc	r7, r25
    74fc:	08 f4       	brcc	.+2      	; 0x7500 <realloc+0x130>
    74fe:	3c 01       	movw	r6, r24
    7500:	7d 01       	movw	r14, r26
    7502:	12 96       	adiw	r26, 0x02	; 2
    7504:	0d 90       	ld	r0, X+
    7506:	bc 91       	ld	r27, X
    7508:	a0 2d       	mov	r26, r0
    750a:	b7 cf       	rjmp	.-146    	; 0x747a <realloc+0xaa>
    750c:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <__brkval>
    7510:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <__brkval+0x1>
    7514:	88 16       	cp	r8, r24
    7516:	99 06       	cpc	r9, r25
    7518:	e1 f4       	brne	.+56     	; 0x7552 <realloc+0x182>
    751a:	66 16       	cp	r6, r22
    751c:	77 06       	cpc	r7, r23
    751e:	c8 f4       	brcc	.+50     	; 0x7552 <realloc+0x182>
    7520:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    7524:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    7528:	00 97       	sbiw	r24, 0x00	; 0
    752a:	41 f4       	brne	.+16     	; 0x753c <realloc+0x16c>
    752c:	8d b7       	in	r24, 0x3d	; 61
    752e:	9e b7       	in	r25, 0x3e	; 62
    7530:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    7534:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    7538:	84 1b       	sub	r24, r20
    753a:	95 0b       	sbc	r25, r21
    753c:	e8 17       	cp	r30, r24
    753e:	f9 07       	cpc	r31, r25
    7540:	b0 f4       	brcc	.+44     	; 0x756e <realloc+0x19e>
    7542:	f0 93 44 06 	sts	0x0644, r31	; 0x800644 <__brkval+0x1>
    7546:	e0 93 43 06 	sts	0x0643, r30	; 0x800643 <__brkval>
    754a:	f9 01       	movw	r30, r18
    754c:	71 83       	std	Z+1, r23	; 0x01
    754e:	60 83       	st	Z, r22
    7550:	0c c0       	rjmp	.+24     	; 0x756a <realloc+0x19a>
    7552:	cb 01       	movw	r24, r22
    7554:	1c de       	rcall	.-968    	; 0x718e <malloc>
    7556:	7c 01       	movw	r14, r24
    7558:	00 97       	sbiw	r24, 0x00	; 0
    755a:	49 f0       	breq	.+18     	; 0x756e <realloc+0x19e>
    755c:	a8 01       	movw	r20, r16
    755e:	be 01       	movw	r22, r28
    7560:	23 d0       	rcall	.+70     	; 0x75a8 <memcpy>
    7562:	ce 01       	movw	r24, r28
    7564:	ac de       	rcall	.-680    	; 0x72be <free>
    7566:	c7 01       	movw	r24, r14
    7568:	04 c0       	rjmp	.+8      	; 0x7572 <realloc+0x1a2>
    756a:	ce 01       	movw	r24, r28
    756c:	02 c0       	rjmp	.+4      	; 0x7572 <realloc+0x1a2>
    756e:	80 e0       	ldi	r24, 0x00	; 0
    7570:	90 e0       	ldi	r25, 0x00	; 0
    7572:	df 91       	pop	r29
    7574:	cf 91       	pop	r28
    7576:	1f 91       	pop	r17
    7578:	0f 91       	pop	r16
    757a:	ff 90       	pop	r15
    757c:	ef 90       	pop	r14
    757e:	df 90       	pop	r13
    7580:	cf 90       	pop	r12
    7582:	bf 90       	pop	r11
    7584:	af 90       	pop	r10
    7586:	9f 90       	pop	r9
    7588:	8f 90       	pop	r8
    758a:	7f 90       	pop	r7
    758c:	6f 90       	pop	r6
    758e:	08 95       	ret

00007590 <abort>:
    7590:	81 e0       	ldi	r24, 0x01	; 1
    7592:	90 e0       	ldi	r25, 0x00	; 0
    7594:	f8 94       	cli
    7596:	5b c0       	rjmp	.+182    	; 0x764e <__do_global_dtors>

00007598 <toupper>:
    7598:	91 11       	cpse	r25, r1
    759a:	08 95       	ret
    759c:	81 56       	subi	r24, 0x61	; 97
    759e:	8a 51       	subi	r24, 0x1A	; 26
    75a0:	08 f4       	brcc	.+2      	; 0x75a4 <toupper+0xc>
    75a2:	80 52       	subi	r24, 0x20	; 32
    75a4:	85 58       	subi	r24, 0x85	; 133
    75a6:	08 95       	ret

000075a8 <memcpy>:
    75a8:	fb 01       	movw	r30, r22
    75aa:	dc 01       	movw	r26, r24
    75ac:	02 c0       	rjmp	.+4      	; 0x75b2 <memcpy+0xa>
    75ae:	01 90       	ld	r0, Z+
    75b0:	0d 92       	st	X+, r0
    75b2:	41 50       	subi	r20, 0x01	; 1
    75b4:	50 40       	sbci	r21, 0x00	; 0
    75b6:	d8 f7       	brcc	.-10     	; 0x75ae <memcpy+0x6>
    75b8:	08 95       	ret

000075ba <memset>:
    75ba:	dc 01       	movw	r26, r24
    75bc:	01 c0       	rjmp	.+2      	; 0x75c0 <memset+0x6>
    75be:	6d 93       	st	X+, r22
    75c0:	41 50       	subi	r20, 0x01	; 1
    75c2:	50 40       	sbci	r21, 0x00	; 0
    75c4:	e0 f7       	brcc	.-8      	; 0x75be <memset+0x4>
    75c6:	08 95       	ret

000075c8 <strcmp>:
    75c8:	fb 01       	movw	r30, r22
    75ca:	dc 01       	movw	r26, r24
    75cc:	8d 91       	ld	r24, X+
    75ce:	01 90       	ld	r0, Z+
    75d0:	80 19       	sub	r24, r0
    75d2:	01 10       	cpse	r0, r1
    75d4:	d9 f3       	breq	.-10     	; 0x75cc <strcmp+0x4>
    75d6:	99 0b       	sbc	r25, r25
    75d8:	08 95       	ret

000075da <strcpy>:
    75da:	fb 01       	movw	r30, r22
    75dc:	dc 01       	movw	r26, r24
    75de:	01 90       	ld	r0, Z+
    75e0:	0d 92       	st	X+, r0
    75e2:	00 20       	and	r0, r0
    75e4:	e1 f7       	brne	.-8      	; 0x75de <strcpy+0x4>
    75e6:	08 95       	ret

000075e8 <utoa>:
    75e8:	45 32       	cpi	r20, 0x25	; 37
    75ea:	51 05       	cpc	r21, r1
    75ec:	18 f4       	brcc	.+6      	; 0x75f4 <utoa+0xc>
    75ee:	42 30       	cpi	r20, 0x02	; 2
    75f0:	08 f0       	brcs	.+2      	; 0x75f4 <utoa+0xc>
    75f2:	04 c0       	rjmp	.+8      	; 0x75fc <__utoa_ncheck>
    75f4:	fb 01       	movw	r30, r22
    75f6:	10 82       	st	Z, r1
    75f8:	cb 01       	movw	r24, r22
    75fa:	08 95       	ret

000075fc <__utoa_ncheck>:
    75fc:	bb 27       	eor	r27, r27

000075fe <__utoa_common>:
    75fe:	fb 01       	movw	r30, r22
    7600:	55 27       	eor	r21, r21
    7602:	aa 27       	eor	r26, r26
    7604:	88 0f       	add	r24, r24
    7606:	99 1f       	adc	r25, r25
    7608:	aa 1f       	adc	r26, r26
    760a:	a4 17       	cp	r26, r20
    760c:	10 f0       	brcs	.+4      	; 0x7612 <__utoa_common+0x14>
    760e:	a4 1b       	sub	r26, r20
    7610:	83 95       	inc	r24
    7612:	50 51       	subi	r21, 0x10	; 16
    7614:	b9 f7       	brne	.-18     	; 0x7604 <__utoa_common+0x6>
    7616:	a0 5d       	subi	r26, 0xD0	; 208
    7618:	aa 33       	cpi	r26, 0x3A	; 58
    761a:	08 f0       	brcs	.+2      	; 0x761e <__utoa_common+0x20>
    761c:	a9 5d       	subi	r26, 0xD9	; 217
    761e:	a1 93       	st	Z+, r26
    7620:	00 97       	sbiw	r24, 0x00	; 0
    7622:	79 f7       	brne	.-34     	; 0x7602 <__utoa_common+0x4>
    7624:	b1 11       	cpse	r27, r1
    7626:	b1 93       	st	Z+, r27
    7628:	11 92       	st	Z+, r1
    762a:	cb 01       	movw	r24, r22
    762c:	00 c0       	rjmp	.+0      	; 0x762e <strrev>

0000762e <strrev>:
    762e:	dc 01       	movw	r26, r24
    7630:	fc 01       	movw	r30, r24
    7632:	67 2f       	mov	r22, r23
    7634:	71 91       	ld	r23, Z+
    7636:	77 23       	and	r23, r23
    7638:	e1 f7       	brne	.-8      	; 0x7632 <strrev+0x4>
    763a:	32 97       	sbiw	r30, 0x02	; 2
    763c:	04 c0       	rjmp	.+8      	; 0x7646 <strrev+0x18>
    763e:	7c 91       	ld	r23, X
    7640:	6d 93       	st	X+, r22
    7642:	70 83       	st	Z, r23
    7644:	62 91       	ld	r22, -Z
    7646:	ae 17       	cp	r26, r30
    7648:	bf 07       	cpc	r27, r31
    764a:	c8 f3       	brcs	.-14     	; 0x763e <strrev+0x10>
    764c:	08 95       	ret

0000764e <__do_global_dtors>:
    764e:	16 e0       	ldi	r17, 0x06	; 6
    7650:	c8 e4       	ldi	r28, 0x48	; 72
    7652:	d6 e0       	ldi	r29, 0x06	; 6
    7654:	00 e0       	ldi	r16, 0x00	; 0
    7656:	05 c0       	rjmp	.+10     	; 0x7662 <__do_global_dtors+0x14>
    7658:	80 2f       	mov	r24, r16
    765a:	fe 01       	movw	r30, r28
    765c:	77 dd       	rcall	.-1298   	; 0x714c <__tablejump2__>
    765e:	21 96       	adiw	r28, 0x01	; 1
    7660:	01 1d       	adc	r16, r1
    7662:	c9 34       	cpi	r28, 0x49	; 73
    7664:	d1 07       	cpc	r29, r17
    7666:	80 e0       	ldi	r24, 0x00	; 0
    7668:	08 07       	cpc	r16, r24
    766a:	b1 f7       	brne	.-20     	; 0x7658 <__do_global_dtors+0xa>
    766c:	f8 94       	cli

0000766e <__stop_program>:
    766e:	ff cf       	rjmp	.-2      	; 0x766e <__stop_program>
