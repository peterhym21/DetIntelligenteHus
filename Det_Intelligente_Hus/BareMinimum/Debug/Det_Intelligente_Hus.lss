
Det_Intelligente_Hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000162  00800200  0000cbbe  0000cc52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000cbbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000315  00800362  00800362  0000cdb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000cdb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000cde4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001920  00000000  00000000  0000ce28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002d6f6  00000000  00000000  0000e748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007009  00000000  00000000  0003be3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00011654  00000000  00000000  00042e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000066bc  00000000  00000000  0005449c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009d59  00000000  00000000  0005ab58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00013128  00000000  00000000  000648b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001880  00000000  00000000  000779d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c6       	rjmp	.+3222   	; 0xc98 <__dtors_end>
       2:	00 00       	nop
       4:	7a c6       	rjmp	.+3316   	; 0xcfa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c6       	rjmp	.+3312   	; 0xcfa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c6       	rjmp	.+3308   	; 0xcfa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c6       	rjmp	.+3304   	; 0xcfa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c6       	rjmp	.+3300   	; 0xcfa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c6       	rjmp	.+3296   	; 0xcfa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c6       	rjmp	.+3292   	; 0xcfa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c6       	rjmp	.+3288   	; 0xcfa <__bad_interrupt>
      22:	00 00       	nop
      24:	6a c6       	rjmp	.+3284   	; 0xcfa <__bad_interrupt>
      26:	00 00       	nop
      28:	68 c6       	rjmp	.+3280   	; 0xcfa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c6       	rjmp	.+3276   	; 0xcfa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c6       	rjmp	.+3272   	; 0xcfa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c6       	rjmp	.+3268   	; 0xcfa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c6       	rjmp	.+3264   	; 0xcfa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c6       	rjmp	.+3260   	; 0xcfa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c6       	rjmp	.+3256   	; 0xcfa <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 17 4c 	jmp	0x982e	; 0x982e <__vector_17>
      48:	58 c6       	rjmp	.+3248   	; 0xcfa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c6       	rjmp	.+3244   	; 0xcfa <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 54 50 	jmp	0xa0a8	; 0xa0a8 <__vector_20>
      54:	52 c6       	rjmp	.+3236   	; 0xcfa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c6       	rjmp	.+3232   	; 0xcfa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 2b 5e 	jmp	0xbc56	; 0xbc56 <__vector_23>
      60:	4c c6       	rjmp	.+3224   	; 0xcfa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6e 5b 	jmp	0xb6dc	; 0xb6dc <__vector_25>
      68:	0c 94 a4 5b 	jmp	0xb748	; 0xb748 <__vector_26>
      6c:	46 c6       	rjmp	.+3212   	; 0xcfa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c6       	rjmp	.+3208   	; 0xcfa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c6       	rjmp	.+3204   	; 0xcfa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c6       	rjmp	.+3200   	; 0xcfa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c6       	rjmp	.+3196   	; 0xcfa <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 4e 4c 	jmp	0x989c	; 0x989c <__vector_32>
      84:	3a c6       	rjmp	.+3188   	; 0xcfa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c6       	rjmp	.+3184   	; 0xcfa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 8b 50 	jmp	0xa116	; 0xa116 <__vector_35>
      90:	34 c6       	rjmp	.+3176   	; 0xcfa <__bad_interrupt>
      92:	00 00       	nop
      94:	32 c6       	rjmp	.+3172   	; 0xcfa <__bad_interrupt>
      96:	00 00       	nop
      98:	30 c6       	rjmp	.+3168   	; 0xcfa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 5a 53 	jmp	0xa6b4	; 0xa6b4 <__vector_39>
      a0:	2c c6       	rjmp	.+3160   	; 0xcfa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c6       	rjmp	.+3156   	; 0xcfa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 85 4c 	jmp	0x990a	; 0x990a <__vector_42>
      ac:	26 c6       	rjmp	.+3148   	; 0xcfa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c6       	rjmp	.+3144   	; 0xcfa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c6       	rjmp	.+3140   	; 0xcfa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c6       	rjmp	.+3136   	; 0xcfa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 bc 4c 	jmp	0x9978	; 0x9978 <__vector_47>
      c0:	1c c6       	rjmp	.+3128   	; 0xcfa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c6       	rjmp	.+3124   	; 0xcfa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c6       	rjmp	.+3120   	; 0xcfa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c6       	rjmp	.+3116   	; 0xcfa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c6       	rjmp	.+3112   	; 0xcfa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c6       	rjmp	.+3108   	; 0xcfa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c6       	rjmp	.+3104   	; 0xcfa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c6       	rjmp	.+3100   	; 0xcfa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c6       	rjmp	.+3096   	; 0xcfa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	97 5f       	subi	r25, 0xF7	; 247
      e6:	9c 5f       	subi	r25, 0xFC	; 252
      e8:	a1 5f       	subi	r26, 0xF1	; 241
      ea:	ab 5f       	subi	r26, 0xFB	; 251
      ec:	b5 5f       	subi	r27, 0xF5	; 245
      ee:	2e 60       	ori	r18, 0x0E	; 14
      f0:	bf 5f       	subi	r27, 0xFF	; 255
      f2:	c7 5f       	subi	r28, 0xF7	; 247
      f4:	cf 5f       	subi	r28, 0xFF	; 255
      f6:	d9 5f       	subi	r29, 0xF9	; 249
      f8:	e3 5f       	subi	r30, 0xF3	; 243
      fa:	ed 5f       	subi	r30, 0xFD	; 253
      fc:	fc 5f       	subi	r31, 0xFC	; 252
      fe:	06 60       	ori	r16, 0x06	; 6
     100:	2e 60       	ori	r18, 0x0E	; 14
     102:	10 60       	ori	r17, 0x00	; 0
     104:	1a 60       	ori	r17, 0x0A	; 10
     106:	24 60       	ori	r18, 0x04	; 4
     108:	51 60       	ori	r21, 0x01	; 1
     10a:	54 60       	ori	r21, 0x04	; 4
     10c:	43 60       	ori	r20, 0x03	; 3
     10e:	47 60       	ori	r20, 0x07	; 7
     110:	4d 60       	ori	r20, 0x0D	; 13
     112:	8b 60       	ori	r24, 0x0B	; 11
     114:	58 60       	ori	r21, 0x08	; 8
     116:	5c 60       	ori	r21, 0x0C	; 12
     118:	62 60       	ori	r22, 0x02	; 2
     11a:	66 60       	ori	r22, 0x06	; 6
     11c:	6a 60       	ori	r22, 0x0A	; 10
     11e:	70 60       	ori	r23, 0x00	; 0
     120:	74 60       	ori	r23, 0x04	; 4
     122:	78 60       	ori	r23, 0x08	; 8
     124:	8b 60       	ori	r24, 0x0B	; 11
     126:	7e 60       	ori	r23, 0x0E	; 14
     128:	82 60       	ori	r24, 0x02	; 2
     12a:	86 60       	ori	r24, 0x06	; 6

0000012c <__trampolines_end>:
     12c:	54 65       	ori	r21, 0x54	; 84
     12e:	6d 70       	andi	r22, 0x0D	; 13
     130:	65 72       	andi	r22, 0x25	; 37
     132:	61 74       	andi	r22, 0x41	; 65
     134:	75 72       	andi	r23, 0x25	; 37
     136:	3a 20       	and	r3, r10
	...

00000139 <_ZZ16LCDPrintHumidityfE3__c>:
     139:	48 75 6d 69 64 69 74 79 3a 20 00                    Humidity: .

00000144 <_ZZ16LCDPrintHumidityfE3__c_0>:
     144:	25 00                                               %.

00000146 <_ZZ5setupE3__c>:
     146:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
     156:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

00000160 <_ZZ11DisplayMenuvE3__c>:
     160:	4d 65 6e 75 00                                      Menu.

00000165 <_ZZ11DisplayMenuvE3__c_0>:
     165:	41 3a 20 54 69 6d 65 20 61 6e 64 20 44 61 74 65     A: Time and Date
	...

00000176 <_ZZ11DisplayMenuvE3__c_1>:
     176:	42 3a 20 54 65 6d 70 72 65 74 75 72 65 00           B: Tempreture.

00000184 <_ZZ11DisplayMenuvE3__c_2>:
     184:	43 3a 20 48 75 6d 69 64 69 74 79 00                 C: Humidity.

00000190 <_ZL4font>:
     190:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     1a0:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     1b0:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     1c0:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     1d0:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     1e0:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     1f0:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     200:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     210:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     220:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     230:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     240:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     250:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     260:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     270:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     280:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     290:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     2a0:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     2b0:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     2c0:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     2d0:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     2e0:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     2f0:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     300:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     310:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     320:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     330:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     340:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     350:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     360:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     370:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     380:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     390:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     3a0:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     3b0:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     3c0:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     3d0:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     3e0:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     3f0:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     400:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     410:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     420:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     430:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     440:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     450:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     460:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     470:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     480:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     490:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     4a0:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     4b0:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     4c0:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     4d0:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     4e0:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     4f0:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     500:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     510:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     520:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     530:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     540:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     550:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     560:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     570:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     580:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     590:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     5a0:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     5b0:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     5c0:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     5d0:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     5e0:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     5f0:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     600:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     610:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     620:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     630:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     640:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     650:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     660:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     670:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     680:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000690 <_ZL12splash1_data>:
     690:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     6a0:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     6b0:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     6c0:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     6d0:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     6e0:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     6f8:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     708:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     718:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     728:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     738:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     748:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     758:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     768:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     778:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     788:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     798:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     7a8:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     7b8:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     7c8:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     7d8:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     7e8:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     7f8:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     808:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     820:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     838:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     848:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     858:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     868:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     878:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     888:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     898:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     8a8:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     8b8:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     8c8:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     8d8:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     8e8:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     8f8:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     908:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     918:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     928:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     938:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     948:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000950 <_ZL12splash2_data>:
     950:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     960:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     970:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     98c:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     99c:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     9ac:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     9bc:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     9cc:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     9dc:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     9ec:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     9fc:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     a0c:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     a1c:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     a2c:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     a3c:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     a4c:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     a5c:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     a6c:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     a7c:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     a8c:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     a9c:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     aac:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     abc:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     acc:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     ae4:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     af4:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     b04:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     b14:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     b24:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000b30 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     b30:	ae d5 80 a8                                         ....

00000b34 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     b34:	d3 00 40 8d                                         ..@.

00000b38 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     b38:	20 00 a1 c8                                          ...

00000b3c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     b3c:	db 40 a4 a6 2e af                                   .@....

00000b42 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     b42:	00 80 c0 e0 f0 f8 fc fe                             ........

00000b4a <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     b4a:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000b52 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     b52:	22 00 ff 21 00                                      "..!.

00000b57 <_ZL9daysArray>:
     b57:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000b63 <digital_pin_to_timer_PGM>:
     b63:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     b8f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000ba9 <digital_pin_to_bit_mask_PGM>:
     ba9:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     bb9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     bc9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     bd9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     be9:	04 08 10 20 40 80                                   ... @.

00000bef <digital_pin_to_port_PGM>:
     bef:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     bff:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     c0f:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     c1f:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     c2f:	0b 0b 0b 0b 0b 0b                                   ......

00000c35 <port_to_input_PGM>:
     c35:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     c45:	00 01 00 00 03 01 06 01 09 01                       ..........

00000c4f <port_to_output_PGM>:
     c4f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     c5f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000c69 <port_to_mode_PGM>:
     c69:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     c79:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000c84 <__ctors_start>:
     c84:	c3 07       	cpc	r28, r19
     c86:	18 08       	sbc	r1, r8
     c88:	71 09       	sbc	r23, r1
     c8a:	f3 0d       	add	r31, r3
     c8c:	4a 11       	cpse	r20, r10
     c8e:	99 11       	cpse	r25, r9
     c90:	af 57       	subi	r26, 0x7F	; 127
     c92:	d6 5b       	subi	r29, 0xB6	; 182

00000c94 <__ctors_end>:
     c94:	24 08       	sbc	r2, r4
     c96:	ff 0d       	add	r31, r15

00000c98 <__dtors_end>:
     c98:	11 24       	eor	r1, r1
     c9a:	1f be       	out	0x3f, r1	; 63
     c9c:	cf ef       	ldi	r28, 0xFF	; 255
     c9e:	d1 e2       	ldi	r29, 0x21	; 33
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	00 e0       	ldi	r16, 0x00	; 0
     ca6:	0c bf       	out	0x3c, r16	; 60

00000ca8 <__do_copy_data>:
     ca8:	13 e0       	ldi	r17, 0x03	; 3
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b2 e0       	ldi	r27, 0x02	; 2
     cae:	ee eb       	ldi	r30, 0xBE	; 190
     cb0:	fb ec       	ldi	r31, 0xCB	; 203
     cb2:	00 e0       	ldi	r16, 0x00	; 0
     cb4:	0b bf       	out	0x3b, r16	; 59
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <__do_copy_data+0x14>
     cb8:	07 90       	elpm	r0, Z+
     cba:	0d 92       	st	X+, r0
     cbc:	a2 36       	cpi	r26, 0x62	; 98
     cbe:	b1 07       	cpc	r27, r17
     cc0:	d9 f7       	brne	.-10     	; 0xcb8 <__do_copy_data+0x10>

00000cc2 <__do_clear_bss>:
     cc2:	26 e0       	ldi	r18, 0x06	; 6
     cc4:	a2 e6       	ldi	r26, 0x62	; 98
     cc6:	b3 e0       	ldi	r27, 0x03	; 3
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <.do_clear_bss_start>

00000cca <.do_clear_bss_loop>:
     cca:	1d 92       	st	X+, r1

00000ccc <.do_clear_bss_start>:
     ccc:	a7 37       	cpi	r26, 0x77	; 119
     cce:	b2 07       	cpc	r27, r18
     cd0:	e1 f7       	brne	.-8      	; 0xcca <.do_clear_bss_loop>

00000cd2 <__do_global_ctors>:
     cd2:	16 e0       	ldi	r17, 0x06	; 6
     cd4:	ca e4       	ldi	r28, 0x4A	; 74
     cd6:	d6 e0       	ldi	r29, 0x06	; 6
     cd8:	00 e0       	ldi	r16, 0x00	; 0
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <__do_global_ctors+0x16>
     cdc:	21 97       	sbiw	r28, 0x01	; 1
     cde:	01 09       	sbc	r16, r1
     ce0:	80 2f       	mov	r24, r16
     ce2:	fe 01       	movw	r30, r28
     ce4:	0e 94 4d 63 	call	0xc69a	; 0xc69a <__tablejump2__>
     ce8:	c2 34       	cpi	r28, 0x42	; 66
     cea:	d1 07       	cpc	r29, r17
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	08 07       	cpc	r16, r24
     cf0:	a9 f7       	brne	.-22     	; 0xcdc <__do_global_ctors+0xa>
     cf2:	0e 94 04 5c 	call	0xb808	; 0xb808 <main>
     cf6:	0c 94 ce 65 	jmp	0xcb9c	; 0xcb9c <__do_global_dtors>

00000cfa <__bad_interrupt>:
     cfa:	82 c9       	rjmp	.-3324   	; 0x0 <__vectors>

00000cfc <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     cfc:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     cfe:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     d00:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     d02:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     d04:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     d06:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     d08:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     d0a:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     d0e:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     d10:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     d12:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     d14:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     d16:	61 f1       	breq	.+88     	; 0xd70 <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     d18:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     d1a:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     d1c:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     d1e:	b9 f3       	breq	.-18     	; 0xd0e <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     d22:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     d24:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     d26:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     d28:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     d2a:	11 f1       	breq	.+68     	; 0xd70 <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     d2c:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     d2e:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     d30:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     d32:	f7 cf       	rjmp	.-18     	; 0xd22 <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     d34:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     d36:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     d38:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     d3a:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     d3c:	0a c0       	rjmp	.+20     	; 0xd52 <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     d40:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     d42:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     d44:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     d46:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     d48:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     d4a:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     d4c:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     d4e:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     d50:	79 f0       	breq	.+30     	; 0xd70 <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     d52:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     d54:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     d56:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     d58:	91 f3       	breq	.-28     	; 0xd3e <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     d5a:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     d5c:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     d5e:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     d60:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     d62:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     d64:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     d66:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     d68:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     d6a:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     d6c:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     d6e:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     d70:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     d72:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     d74:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     d76:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     d78:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     d7a:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     d7c:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     d7e:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     d80:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     d82:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     d84:	08 95       	ret

00000d86 <_Z8GetHumidv>:

float GetHumid()
{
	return dht.readHumidity();
}

     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
float GetTemp()
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	82 e6       	ldi	r24, 0x62	; 98
     d92:	93 e0       	ldi	r25, 0x03	; 3
     d94:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <_ZN3DHT12readHumidityEb>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
{
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <_Z7GetTempv>:
	return dht.readTemperature();
}

     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62

     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	82 e6       	ldi	r24, 0x62	; 98
     db4:	93 e0       	ldi	r25, 0x03	; 3
     db6:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <_ZN3DHT15readTemperatureEbb>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
void TjekTempInHous()
     dbe:	bc 01       	movw	r22, r24
     dc0:	cd 01       	movw	r24, r26
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <_Z14TjekTempInHousv>:
{
	float tempC = GetTemp();
	if (tempC < (SetNumber - Hysterese ))
	{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 d0       	rcall	.+0      	; 0xdce <_Z14TjekTempInHousv+0x6>
     dce:	1f 92       	push	r1
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
		TooCold();
     dd4:	e8 df       	rcall	.-48     	; 0xda6 <_Z7GetTempv>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	ab 83       	std	Y+3, r26	; 0x03
     de0:	bc 83       	std	Y+4, r27	; 0x04
	}
     de2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     de6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     dea:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     dee:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     df2:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     df6:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     dfa:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     dfe:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__subsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	29 81       	ldd	r18, Y+1	; 0x01
     e10:	3a 81       	ldd	r19, Y+2	; 0x02
     e12:	4b 81       	ldd	r20, Y+3	; 0x03
     e14:	5c 81       	ldd	r21, Y+4	; 0x04
     e16:	bc 01       	movw	r22, r24
     e18:	cd 01       	movw	r24, r26
     e1a:	0e 94 9a 59 	call	0xb334	; 0xb334 <__gesf2>
     e1e:	18 16       	cp	r1, r24
	if (tempC > (SetNumber + Hysterese ))
	{
     e20:	0c f4       	brge	.+2      	; 0xe24 <_Z14TjekTempInHousv+0x5c>
     e22:	6c d0       	rcall	.+216    	; 0xefc <_Z7TooColdv>
		TooHot();
	}
     e24:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     e28:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     e2c:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     e30:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     e34:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     e38:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     e3c:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     e40:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	0e 94 ec 57 	call	0xafd8	; 0xafd8 <__addsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	29 81       	ldd	r18, Y+1	; 0x01
     e52:	3a 81       	ldd	r19, Y+2	; 0x02
     e54:	4b 81       	ldd	r20, Y+3	; 0x03
     e56:	5c 81       	ldd	r21, Y+4	; 0x04
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 50 58 	call	0xb0a0	; 0xb0a0 <__cmpsf2>
     e60:	88 23       	and	r24, r24
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
	{
     e62:	0c f4       	brge	.+2      	; 0xe66 <_Z14TjekTempInHousv+0x9e>
     e64:	57 d0       	rcall	.+174    	; 0xf14 <_Z6TooHotv>
		PerfektTemp();
	}
     e66:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     e6a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     e6e:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     e72:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     e76:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     e7a:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     e7e:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     e82:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__subsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	29 81       	ldd	r18, Y+1	; 0x01
     e94:	3a 81       	ldd	r19, Y+2	; 0x02
     e96:	4b 81       	ldd	r20, Y+3	; 0x03
     e98:	5c 81       	ldd	r21, Y+4	; 0x04
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	0e 94 50 58 	call	0xb0a0	; 0xb0a0 <__cmpsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	0c f0       	brlt	.+2      	; 0xea8 <_Z14TjekTempInHousv+0xe0>
}

void TooCold()
{
     ea6:	22 c0       	rjmp	.+68     	; 0xeec <_Z14TjekTempInHousv+0x124>
		TooHot();
	}
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
	{
		PerfektTemp();
	}
     ea8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     eac:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     eb0:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     eb4:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     eb8:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     ebc:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     ec0:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     ec4:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 ec 57 	call	0xafd8	; 0xafd8 <__addsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	29 81       	ldd	r18, Y+1	; 0x01
     ed6:	3a 81       	ldd	r19, Y+2	; 0x02
     ed8:	4b 81       	ldd	r20, Y+3	; 0x03
     eda:	5c 81       	ldd	r21, Y+4	; 0x04
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 9a 59 	call	0xb334	; 0xb334 <__gesf2>
     ee4:	18 16       	cp	r1, r24
}

void TooCold()
{
     ee6:	0c f0       	brlt	.+2      	; 0xeea <_Z14TjekTempInHousv+0x122>
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
	{
		PerfektTemp();
	}
}

     ee8:	01 c0       	rjmp	.+2      	; 0xeec <_Z14TjekTempInHousv+0x124>
     eea:	20 d0       	rcall	.+64     	; 0xf2c <_Z11PerfektTempv>
void TooCold()
{
     eec:	00 00       	nop
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <_Z7TooColdv>:
	TempTooCold();
	TurnOnRedLED();
	TurnOFFGreenLED();
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	TurnOFFBlueLED();
     f04:	88 d6       	rcall	.+3344   	; 0x1c16 <_Z11TempTooColdv>
}
     f06:	9b d2       	rcall	.+1334   	; 0x143e <_Z12TurnOnRedLEDv>

     f08:	ca d2       	rcall	.+1428   	; 0x149e <_Z15TurnOFFGreenLEDv>
     f0a:	d5 d2       	rcall	.+1450   	; 0x14b6 <_Z14TurnOFFBlueLEDv>
void TooHot()
     f0c:	00 00       	nop
     f0e:	df 91       	pop	r29
{
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <_Z6TooHotv>:
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
	TempTooHot();
	TurnOnBlueLED();
	TurnOFFGreenLED();
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	TurnOFFRedLED();
     f1c:	29 d7       	rcall	.+3666   	; 0x1d70 <_Z10TempTooHotv>
}
     f1e:	a7 d2       	rcall	.+1358   	; 0x146e <_Z13TurnOnBlueLEDv>

     f20:	be d2       	rcall	.+1404   	; 0x149e <_Z15TurnOFFGreenLEDv>
     f22:	b1 d2       	rcall	.+1378   	; 0x1486 <_Z13TurnOFFRedLEDv>
void PerfektTemp()
     f24:	00 00       	nop
     f26:	df 91       	pop	r29
{
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <_Z11PerfektTempv>:
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
	TempPerfekt();
	TurnOnGreenLED();
	TurnOFFRedLED();
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
	TurnOFFBlueLED();
     f34:	cc d7       	rcall	.+3992   	; 0x1ece <_Z11TempPerfektv>
     f36:	8f d2       	rcall	.+1310   	; 0x1456 <_Z14TurnOnGreenLEDv>
     f38:	a6 d2       	rcall	.+1356   	; 0x1486 <_Z13TurnOFFRedLEDv>
     f3a:	bd d2       	rcall	.+1402   	; 0x14b6 <_Z14TurnOFFBlueLEDv>
     f3c:	00 00       	nop
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <_Z41__static_initialization_and_destruction_0ii>:
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	00 d0       	rcall	.+0      	; 0xf4a <_Z41__static_initialization_and_destruction_0ii+0x6>
     f4a:	1f 92       	push	r1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	7c 83       	std	Y+4, r23	; 0x04
     f56:	6b 83       	std	Y+3, r22	; 0x03
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	59 f4       	brne	.+22     	; 0xf76 <_Z41__static_initialization_and_destruction_0ii+0x32>
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	39 f4       	brne	.+14     	; 0xf76 <_Z41__static_initialization_and_destruction_0ii+0x32>
float Hysterese = 1;

DHT dht(DHTPIN, DHTTYPE);


float GetHumid()
     f68:	26 e0       	ldi	r18, 0x06	; 6
     f6a:	4b e0       	ldi	r20, 0x0B	; 11
     f6c:	62 e0       	ldi	r22, 0x02	; 2
     f6e:	82 e6       	ldi	r24, 0x62	; 98
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <_ZN3DHTC1Ehhh>
	TurnOFFRedLED();
	TurnOFFBlueLED();
     f76:	00 00       	nop
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <_GLOBAL__sub_I_SetNumber>:
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	6f ef       	ldi	r22, 0xFF	; 255
     f90:	7f ef       	ldi	r23, 0xFF	; 255
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	d6 df       	rcall	.-84     	; 0xf44 <_Z41__static_initialization_and_destruction_0ii>
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <_Z11GetDistancev>:
#include "HC-SR04.h"

HCSR04 hc(trigPin, echoPin);

int GetDistance()
{
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	1f 92       	push	r1
     fa4:	1f 92       	push	r1
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	unsigned int distance = hc.dist();
     faa:	85 e7       	ldi	r24, 0x75	; 117
     fac:	93 e0       	ldi	r25, 0x03	; 3
     fae:	0e 94 5d 39 	call	0x72ba	; 0x72ba <_ZNK6HCSR044distEv>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	bc 01       	movw	r22, r24
     fb8:	cd 01       	movw	r24, r26
     fba:	0e 94 bc 58 	call	0xb178	; 0xb178 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
	return distance;
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <_Z41__static_initialization_and_destruction_0ii>:
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	00 d0       	rcall	.+0      	; 0xfda <_Z41__static_initialization_and_destruction_0ii+0x6>
     fda:	1f 92       	push	r1
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	7c 83       	std	Y+4, r23	; 0x04
     fe6:	6b 83       	std	Y+3, r22	; 0x03
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	61 f4       	brne	.+24     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	41 f4       	brne	.+16     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
#include "HC-SR04.h"

HCSR04 hc(trigPin, echoPin);
     ff8:	44 e0       	ldi	r20, 0x04	; 4
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	63 e0       	ldi	r22, 0x03	; 3
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	85 e7       	ldi	r24, 0x75	; 117
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	0e 94 b1 38 	call	0x7162	; 0x7162 <_ZN6HCSR04C1Eii>
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	89 2b       	or	r24, r25
    100e:	41 f4       	brne	.+16     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	21 f4       	brne	.+8      	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    1018:	85 e7       	ldi	r24, 0x75	; 117
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <_ZN6HCSR04D1Ev>

int GetDistance()
{
	unsigned int distance = hc.dist();
	return distance;
    1020:	00 00       	nop
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <_GLOBAL__sub_I_hc>:
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	6f ef       	ldi	r22, 0xFF	; 255
    103a:	7f ef       	ldi	r23, 0xFF	; 255
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	c9 df       	rcall	.-110    	; 0xfd4 <_Z41__static_initialization_and_destruction_0ii>
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <_GLOBAL__sub_D_hc>:
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	6f ef       	ldi	r22, 0xFF	; 255
    1052:	7f ef       	ldi	r23, 0xFF	; 255
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	bd df       	rcall	.-134    	; 0xfd4 <_Z41__static_initialization_and_destruction_0ii>
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <_Z12LCDPrintTempf>:

int rs = 22, en = 23, d4 = 24, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

void LCDPrintTemp(float temp)
{
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	00 d0       	rcall	.+0      	; 0x1066 <_Z12LCDPrintTempf+0x6>
    1066:	1f 92       	push	r1
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	69 83       	std	Y+1, r22	; 0x01
    106e:	7a 83       	std	Y+2, r23	; 0x02
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	9c 83       	std	Y+4, r25	; 0x04
	lcd.clear();
    1074:	8b e7       	ldi	r24, 0x7B	; 123
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	0e 94 4e 41 	call	0x829c	; 0x829c <_ZN13LiquidCrystal5clearEv>
	lcd.print(F("Temperatur: "));
    107c:	8c e2       	ldi	r24, 0x2C	; 44
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	bc 01       	movw	r22, r24
    1082:	8b e7       	ldi	r24, 0x7B	; 123
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	0e 94 51 5c 	call	0xb8a2	; 0xb8a2 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.print(temp, 0);
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	ab 81       	ldd	r26, Y+3	; 0x03
    1090:	bc 81       	ldd	r27, Y+4	; 0x04
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	ac 01       	movw	r20, r24
    1098:	bd 01       	movw	r22, r26
    109a:	8b e7       	ldi	r24, 0x7B	; 123
    109c:	93 e0       	ldi	r25, 0x03	; 3
    109e:	0e 94 2a 5e 	call	0xbc54	; 0xbc54 <_ZN5Print5printEdi>
	lcd.print((char)223);
    10a2:	6f ed       	ldi	r22, 0xDF	; 223
    10a4:	8b e7       	ldi	r24, 0x7B	; 123
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	0e 94 76 5c 	call	0xb8ec	; 0xb8ec <_ZN5Print5printEc>
}
    10ac:	00 00       	nop
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <_Z16LCDPrintHumidityf>:

void LCDPrintHumidity(float humid)
{
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <_Z16LCDPrintHumidityf+0x6>
    10c2:	1f 92       	push	r1
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	lcd.clear();
    10d0:	8b e7       	ldi	r24, 0x7B	; 123
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	0e 94 4e 41 	call	0x829c	; 0x829c <_ZN13LiquidCrystal5clearEv>
	lcd.print(F("Humidity: "));
    10d8:	89 e3       	ldi	r24, 0x39	; 57
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	bc 01       	movw	r22, r24
    10de:	8b e7       	ldi	r24, 0x7B	; 123
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	0e 94 51 5c 	call	0xb8a2	; 0xb8a2 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.print(humid, 0);
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	ab 81       	ldd	r26, Y+3	; 0x03
    10ec:	bc 81       	ldd	r27, Y+4	; 0x04
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	ac 01       	movw	r20, r24
    10f4:	bd 01       	movw	r22, r26
    10f6:	8b e7       	ldi	r24, 0x7B	; 123
    10f8:	93 e0       	ldi	r25, 0x03	; 3
    10fa:	0e 94 2a 5e 	call	0xbc54	; 0xbc54 <_ZN5Print5printEdi>
	lcd.print(F("%"));
    10fe:	84 e4       	ldi	r24, 0x44	; 68
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	bc 01       	movw	r22, r24
    1104:	8b e7       	ldi	r24, 0x7B	; 123
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	0e 94 51 5c 	call	0xb8a2	; 0xb8a2 <_ZN5Print5printEPK19__FlashStringHelper>
}
    110c:	00 00       	nop
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <_Z19LCDPrintTimeAndDate11RTCDateTime>:


void LCDPrintTimeAndDate(RTCDateTime dt)
{
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	2c 97       	sbiw	r28, 0x0c	; 12
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	e9 82       	std	Y+1, r14	; 0x01
    113a:	fa 82       	std	Y+2, r15	; 0x02
    113c:	0b 83       	std	Y+3, r16	; 0x03
    113e:	1c 83       	std	Y+4, r17	; 0x04
    1140:	2d 83       	std	Y+5, r18	; 0x05
    1142:	3e 83       	std	Y+6, r19	; 0x06
    1144:	4f 83       	std	Y+7, r20	; 0x07
    1146:	58 87       	std	Y+8, r21	; 0x08
    1148:	69 87       	std	Y+9, r22	; 0x09
    114a:	7a 87       	std	Y+10, r23	; 0x0a
    114c:	8b 87       	std	Y+11, r24	; 0x0b
    114e:	9c 87       	std	Y+12, r25	; 0x0c
	lcd.clear();
    1150:	8b e7       	ldi	r24, 0x7B	; 123
    1152:	93 e0       	ldi	r25, 0x03	; 3
    1154:	0e 94 4e 41 	call	0x829c	; 0x829c <_ZN13LiquidCrystal5clearEv>
	lcd.print(AddLeadingZero(dt.year));   lcd.print("-");
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
    115c:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <_Z14AddLeadingZeroi>
    1160:	4a e0       	ldi	r20, 0x0A	; 10
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	bc 01       	movw	r22, r24
    1166:	8b e7       	ldi	r24, 0x7B	; 123
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	0e 94 4d 5d 	call	0xba9a	; 0xba9a <_ZN5Print5printEii>
    116e:	6b e3       	ldi	r22, 0x3B	; 59
    1170:	72 e0       	ldi	r23, 0x02	; 2
    1172:	8b e7       	ldi	r24, 0x7B	; 123
    1174:	93 e0       	ldi	r25, 0x03	; 3
    1176:	0e 94 75 5c 	call	0xb8ea	; 0xb8ea <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.month));  lcd.print("-");
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <_Z14AddLeadingZeroi>
    1184:	4a e0       	ldi	r20, 0x0A	; 10
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	bc 01       	movw	r22, r24
    118a:	8b e7       	ldi	r24, 0x7B	; 123
    118c:	93 e0       	ldi	r25, 0x03	; 3
    118e:	0e 94 4d 5d 	call	0xba9a	; 0xba9a <_ZN5Print5printEii>
    1192:	6b e3       	ldi	r22, 0x3B	; 59
    1194:	72 e0       	ldi	r23, 0x02	; 2
    1196:	8b e7       	ldi	r24, 0x7B	; 123
    1198:	93 e0       	ldi	r25, 0x03	; 3
    119a:	0e 94 75 5c 	call	0xb8ea	; 0xb8ea <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.day));    lcd.print(" ");
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <_Z14AddLeadingZeroi>
    11a8:	4a e0       	ldi	r20, 0x0A	; 10
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	bc 01       	movw	r22, r24
    11ae:	8b e7       	ldi	r24, 0x7B	; 123
    11b0:	93 e0       	ldi	r25, 0x03	; 3
    11b2:	0e 94 4d 5d 	call	0xba9a	; 0xba9a <_ZN5Print5printEii>
    11b6:	6d e3       	ldi	r22, 0x3D	; 61
    11b8:	72 e0       	ldi	r23, 0x02	; 2
    11ba:	8b e7       	ldi	r24, 0x7B	; 123
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	0e 94 75 5c 	call	0xb8ea	; 0xb8ea <_ZN5Print5printEPKc>
	lcd.setCursor(0, 1);
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	8b e7       	ldi	r24, 0x7B	; 123
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	0e 94 64 41 	call	0x82c8	; 0x82c8 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(AddLeadingZero(dt.hour));   lcd.print(":");
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <_Z14AddLeadingZeroi>
    11d8:	4a e0       	ldi	r20, 0x0A	; 10
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	bc 01       	movw	r22, r24
    11de:	8b e7       	ldi	r24, 0x7B	; 123
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	0e 94 4d 5d 	call	0xba9a	; 0xba9a <_ZN5Print5printEii>
    11e6:	6f e3       	ldi	r22, 0x3F	; 63
    11e8:	72 e0       	ldi	r23, 0x02	; 2
    11ea:	8b e7       	ldi	r24, 0x7B	; 123
    11ec:	93 e0       	ldi	r25, 0x03	; 3
    11ee:	0e 94 75 5c 	call	0xb8ea	; 0xb8ea <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.minute)); lcd.print(":");
    11f2:	8e 81       	ldd	r24, Y+6	; 0x06
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <_Z14AddLeadingZeroi>
    11fc:	4a e0       	ldi	r20, 0x0A	; 10
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	bc 01       	movw	r22, r24
    1202:	8b e7       	ldi	r24, 0x7B	; 123
    1204:	93 e0       	ldi	r25, 0x03	; 3
    1206:	0e 94 4d 5d 	call	0xba9a	; 0xba9a <_ZN5Print5printEii>
    120a:	6f e3       	ldi	r22, 0x3F	; 63
    120c:	72 e0       	ldi	r23, 0x02	; 2
    120e:	8b e7       	ldi	r24, 0x7B	; 123
    1210:	93 e0       	ldi	r25, 0x03	; 3
    1212:	0e 94 75 5c 	call	0xb8ea	; 0xb8ea <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.second)); lcd.print("");
    1216:	8f 81       	ldd	r24, Y+7	; 0x07
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 d0 57 	call	0xafa0	; 0xafa0 <_Z14AddLeadingZeroi>
    1220:	4a e0       	ldi	r20, 0x0A	; 10
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	bc 01       	movw	r22, r24
    1226:	8b e7       	ldi	r24, 0x7B	; 123
    1228:	93 e0       	ldi	r25, 0x03	; 3
    122a:	0e 94 4d 5d 	call	0xba9a	; 0xba9a <_ZN5Print5printEii>
    122e:	61 e4       	ldi	r22, 0x41	; 65
    1230:	72 e0       	ldi	r23, 0x02	; 2
    1232:	8b e7       	ldi	r24, 0x7B	; 123
    1234:	93 e0       	ldi	r25, 0x03	; 3
    1236:	0e 94 75 5c 	call	0xb8ea	; 0xb8ea <_ZN5Print5printEPKc>
}
    123a:	00 00       	nop
    123c:	2c 96       	adiw	r28, 0x0c	; 12
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	08 95       	ret

00001256 <_Z41__static_initialization_and_destruction_0ii>:
    1256:	cf 92       	push	r12
    1258:	ef 92       	push	r14
    125a:	0f 93       	push	r16
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	00 d0       	rcall	.+0      	; 0x1262 <_Z41__static_initialization_and_destruction_0ii+0xc>
    1262:	1f 92       	push	r1
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	7c 83       	std	Y+4, r23	; 0x04
    126e:	6b 83       	std	Y+3, r22	; 0x03
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	51 f5       	brne	.+84     	; 0x12cc <_Z41__static_initialization_and_destruction_0ii+0x76>
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	31 f5       	brne	.+76     	; 0x12cc <_Z41__static_initialization_and_destruction_0ii+0x76>
#include "LCD.h"

int rs = 22, en = 23, d4 = 24, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
    1280:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <d7>
    1284:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <d7+0x1>
    1288:	68 2f       	mov	r22, r24
    128a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <d6>
    128e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <d6+0x1>
    1292:	58 2f       	mov	r21, r24
    1294:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <d5>
    1298:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <d5+0x1>
    129c:	48 2f       	mov	r20, r24
    129e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <d4>
    12a2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <d4+0x1>
    12a6:	28 2f       	mov	r18, r24
    12a8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <en>
    12ac:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <en+0x1>
    12b0:	38 2f       	mov	r19, r24
    12b2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <rs>
    12b6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <rs+0x1>
    12ba:	c6 2e       	mov	r12, r22
    12bc:	e5 2e       	mov	r14, r21
    12be:	04 2f       	mov	r16, r20
    12c0:	43 2f       	mov	r20, r19
    12c2:	68 2f       	mov	r22, r24
    12c4:	8b e7       	ldi	r24, 0x7B	; 123
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	0e 94 3f 3f 	call	0x7e7e	; 0x7e7e <_ZN13LiquidCrystalC1Ehhhhhh>
	lcd.print(AddLeadingZero(dt.day));    lcd.print(" ");
	lcd.setCursor(0, 1);
	lcd.print(AddLeadingZero(dt.hour));   lcd.print(":");
	lcd.print(AddLeadingZero(dt.minute)); lcd.print(":");
	lcd.print(AddLeadingZero(dt.second)); lcd.print("");
}
    12cc:	00 00       	nop
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	0f 91       	pop	r16
    12dc:	ef 90       	pop	r14
    12de:	cf 90       	pop	r12
    12e0:	08 95       	ret

000012e2 <_GLOBAL__sub_I_rs>:
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	6f ef       	ldi	r22, 0xFF	; 255
    12ec:	7f ef       	ldi	r23, 0xFF	; 255
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	b1 df       	rcall	.-158    	; 0x1256 <_Z41__static_initialization_and_destruction_0ii>
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <_Z15ChangeRGBAnalogv>:
int R_brightness = 0;
int G_brightness = 0;
int B_brightness = 0;

void ChangeRGBAnalog()
{
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	R_brightness = map(analogRead(A0), 0, 1023, 0, 255);
    1312:	86 e3       	ldi	r24, 0x36	; 54
    1314:	0e 94 4c 5f 	call	0xbe98	; 0xbe98 <analogRead>
    1318:	09 2e       	mov	r0, r25
    131a:	00 0c       	add	r0, r0
    131c:	aa 0b       	sbc	r26, r26
    131e:	bb 0b       	sbc	r27, r27
    1320:	1f 92       	push	r1
    1322:	1f 92       	push	r1
    1324:	1f 92       	push	r1
    1326:	2f ef       	ldi	r18, 0xFF	; 255
    1328:	2f 93       	push	r18
    132a:	a1 2c       	mov	r10, r1
    132c:	b1 2c       	mov	r11, r1
    132e:	65 01       	movw	r12, r10
    1330:	ee 24       	eor	r14, r14
    1332:	ea 94       	dec	r14
    1334:	13 e0       	ldi	r17, 0x03	; 3
    1336:	f1 2e       	mov	r15, r17
    1338:	00 e0       	ldi	r16, 0x00	; 0
    133a:	10 e0       	ldi	r17, 0x00	; 0
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	a9 01       	movw	r20, r18
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 50 61 	call	0xc2a0	; 0xc2a0 <_Z3maplllll>
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <R_brightness+0x1>
    135a:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <R_brightness>
	G_brightness = map(analogRead(A1), 0, 1023, 0, 255);
    135e:	87 e3       	ldi	r24, 0x37	; 55
    1360:	0e 94 4c 5f 	call	0xbe98	; 0xbe98 <analogRead>
    1364:	09 2e       	mov	r0, r25
    1366:	00 0c       	add	r0, r0
    1368:	aa 0b       	sbc	r26, r26
    136a:	bb 0b       	sbc	r27, r27
    136c:	1f 92       	push	r1
    136e:	1f 92       	push	r1
    1370:	1f 92       	push	r1
    1372:	2f ef       	ldi	r18, 0xFF	; 255
    1374:	2f 93       	push	r18
    1376:	a1 2c       	mov	r10, r1
    1378:	b1 2c       	mov	r11, r1
    137a:	65 01       	movw	r12, r10
    137c:	ee 24       	eor	r14, r14
    137e:	ea 94       	dec	r14
    1380:	13 e0       	ldi	r17, 0x03	; 3
    1382:	f1 2e       	mov	r15, r17
    1384:	00 e0       	ldi	r16, 0x00	; 0
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	a9 01       	movw	r20, r18
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 50 61 	call	0xc2a0	; 0xc2a0 <_Z3maplllll>
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <G_brightness+0x1>
    13a6:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <G_brightness>
	B_brightness = map(analogRead(A2), 0, 1023, 0, 255);
    13aa:	88 e3       	ldi	r24, 0x38	; 56
    13ac:	0e 94 4c 5f 	call	0xbe98	; 0xbe98 <analogRead>
    13b0:	09 2e       	mov	r0, r25
    13b2:	00 0c       	add	r0, r0
    13b4:	aa 0b       	sbc	r26, r26
    13b6:	bb 0b       	sbc	r27, r27
    13b8:	1f 92       	push	r1
    13ba:	1f 92       	push	r1
    13bc:	1f 92       	push	r1
    13be:	2f ef       	ldi	r18, 0xFF	; 255
    13c0:	2f 93       	push	r18
    13c2:	a1 2c       	mov	r10, r1
    13c4:	b1 2c       	mov	r11, r1
    13c6:	65 01       	movw	r12, r10
    13c8:	ee 24       	eor	r14, r14
    13ca:	ea 94       	dec	r14
    13cc:	13 e0       	ldi	r17, 0x03	; 3
    13ce:	f1 2e       	mov	r15, r17
    13d0:	00 e0       	ldi	r16, 0x00	; 0
    13d2:	10 e0       	ldi	r17, 0x00	; 0
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	a9 01       	movw	r20, r18
    13da:	bc 01       	movw	r22, r24
    13dc:	cd 01       	movw	r24, r26
    13de:	0e 94 50 61 	call	0xc2a0	; 0xc2a0 <_Z3maplllll>
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <B_brightness+0x1>
    13f2:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <B_brightness>
	
	analogWrite(RedRGB, R_brightness);
    13f6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <R_brightness>
    13fa:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <R_brightness+0x1>
    13fe:	bc 01       	movw	r22, r24
    1400:	8a e2       	ldi	r24, 0x2A	; 42
    1402:	0e 94 71 5f 	call	0xbee2	; 0xbee2 <analogWrite>
	analogWrite(GreenRGB, G_brightness);
    1406:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <G_brightness>
    140a:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <G_brightness+0x1>
    140e:	bc 01       	movw	r22, r24
    1410:	8b e2       	ldi	r24, 0x2B	; 43
    1412:	0e 94 71 5f 	call	0xbee2	; 0xbee2 <analogWrite>
	analogWrite(BlueRGB, B_brightness);
    1416:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <B_brightness>
    141a:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <B_brightness+0x1>
    141e:	bc 01       	movw	r22, r24
    1420:	8c e2       	ldi	r24, 0x2C	; 44
    1422:	0e 94 71 5f 	call	0xbee2	; 0xbee2 <analogWrite>
	
}
    1426:	00 00       	nop
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	df 90       	pop	r13
    1436:	cf 90       	pop	r12
    1438:	bf 90       	pop	r11
    143a:	af 90       	pop	r10
    143c:	08 95       	ret

0000143e <_Z12TurnOnRedLEDv>:


void TurnOnRedLED()
{
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(RedLED, HIGH);
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	89 e0       	ldi	r24, 0x09	; 9
    144a:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
}
    144e:	00 00       	nop
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <_Z14TurnOnGreenLEDv>:

void TurnOnGreenLED()
{
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(GreenLED, HIGH);
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	87 e0       	ldi	r24, 0x07	; 7
    1462:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
}
    1466:	00 00       	nop
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

0000146e <_Z13TurnOnBlueLEDv>:

void TurnOnBlueLED()
{
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(BlueLED, HIGH);
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	88 e0       	ldi	r24, 0x08	; 8
    147a:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
}
    147e:	00 00       	nop
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <_Z13TurnOFFRedLEDv>:

void TurnOFFRedLED()
{
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(RedLED, LOW);
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	89 e0       	ldi	r24, 0x09	; 9
    1492:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
}
    1496:	00 00       	nop
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <_Z15TurnOFFGreenLEDv>:

void TurnOFFGreenLED()
{
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(GreenLED, LOW);
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	87 e0       	ldi	r24, 0x07	; 7
    14aa:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
}
    14ae:	00 00       	nop
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <_Z14TurnOFFBlueLEDv>:

void TurnOFFBlueLED()
{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(BlueLED, LOW);
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	88 e0       	ldi	r24, 0x08	; 8
    14c2:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    14c6:	00 00       	nop
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <_ZN14HardwareSerial5beginEm+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <_ZN14HardwareSerial5beginEm+0x8>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	4b 83       	std	Y+3, r20	; 0x03
    14e0:	5c 83       	std	Y+4, r21	; 0x04
    14e2:	6d 83       	std	Y+5, r22	; 0x05
    14e4:	7e 83       	std	Y+6, r23	; 0x06
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	ad 81       	ldd	r26, Y+5	; 0x05
    14ec:	be 81       	ldd	r27, Y+6	; 0x06
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	fa 81       	ldd	r31, Y+2	; 0x02
    14f2:	26 e0       	ldi	r18, 0x06	; 6
    14f4:	ac 01       	movw	r20, r24
    14f6:	bd 01       	movw	r22, r26
    14f8:	cf 01       	movw	r24, r30
    14fa:	0e 94 0b 5b 	call	0xb616	; 0xb616 <_ZN14HardwareSerial5beginEmh>
    14fe:	00 00       	nop
    1500:	26 96       	adiw	r28, 0x06	; 6
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <setup>:
long intervalDate = 1000;
long intervalwelcome = 5000;
DS3231 clock;

void setup()
{
    1512:	0f 93       	push	r16
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	2e 97       	sbiw	r28, 0x0e	; 14
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
	#pragma region Begins
	Serial.begin(9600);
    1528:	40 e8       	ldi	r20, 0x80	; 128
    152a:	55 e2       	ldi	r21, 0x25	; 37
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	8d ec       	ldi	r24, 0xCD	; 205
    1532:	95 e0       	ldi	r25, 0x05	; 5
    1534:	cc df       	rcall	.-104    	; 0x14ce <_ZN14HardwareSerial5beginEm>
	SPI.begin();
    1536:	0e 94 d0 4f 	call	0x9fa0	; 0x9fa0 <_ZN8SPIClass5beginEv>
	mfrc522.PCD_Init();
    153a:	8f e4       	ldi	r24, 0x4F	; 79
    153c:	94 e0       	ldi	r25, 0x04	; 4
    153e:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <_ZN7MFRC5228PCD_InitEv>
	dht.begin();
    1542:	67 e3       	ldi	r22, 0x37	; 55
    1544:	82 e6       	ldi	r24, 0x62	; 98
    1546:	93 e0       	ldi	r25, 0x03	; 3
    1548:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <_ZN3DHT5beginEh>
	lcd.begin(16, 2);
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	42 e0       	ldi	r20, 0x02	; 2
    1550:	60 e1       	ldi	r22, 0x10	; 16
    1552:	8b e7       	ldi	r24, 0x7B	; 123
    1554:	93 e0       	ldi	r25, 0x03	; 3
    1556:	0e 94 f5 3f 	call	0x7fea	; 0x7fea <_ZN13LiquidCrystal5beginEhhh>
	clock.begin();
    155a:	8f e9       	ldi	r24, 0x9F	; 159
    155c:	93 e0       	ldi	r25, 0x03	; 3
    155e:	0e 94 75 35 	call	0x6aea	; 0x6aea <_ZN6DS32315beginEv>
    1562:	8a e0       	ldi	r24, 0x0A	; 10
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	9a 83       	std	Y+2, r25	; 0x02
    156e:	ab 83       	std	Y+3, r26	; 0x03
    1570:	bc 83       	std	Y+4, r27	; 0x04
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    1572:	81 e8       	ldi	r24, 0x81	; 129
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	20 e1       	ldi	r18, 0x10	; 16
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18
	TCCR1A = 0;                 // clear control register A 
    157c:	80 e8       	ldi	r24, 0x80	; 128
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	fc 01       	movw	r30, r24
    1582:	10 82       	st	Z, r1
    1584:	8b ef       	ldi	r24, 0xFB	; 251
    1586:	94 e0       	ldi	r25, 0x04	; 4
    1588:	9e 83       	std	Y+6, r25	; 0x06
    158a:	8d 83       	std	Y+5, r24	; 0x05
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	ab 81       	ldd	r26, Y+3	; 0x03
    1592:	bc 81       	ldd	r27, Y+4	; 0x04
    1594:	8f 83       	std	Y+7, r24	; 0x07
    1596:	98 87       	std	Y+8, r25	; 0x08
    1598:	a9 87       	std	Y+9, r26	; 0x09
    159a:	ba 87       	std	Y+10, r27	; 0x0a
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
    159c:	8f 81       	ldd	r24, Y+7	; 0x07
    159e:	98 85       	ldd	r25, Y+8	; 0x08
    15a0:	a9 85       	ldd	r26, Y+9	; 0x09
    15a2:	ba 85       	ldd	r27, Y+10	; 0x0a
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	aa 1f       	adc	r26, r26
    15aa:	bb 1f       	adc	r27, r27
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	aa 1f       	adc	r26, r26
    15b2:	bb 1f       	adc	r27, r27
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	aa 1f       	adc	r26, r26
    15ba:	bb 1f       	adc	r27, r27
    15bc:	8b 87       	std	Y+11, r24	; 0x0b
    15be:	9c 87       	std	Y+12, r25	; 0x0c
    15c0:	ad 87       	std	Y+13, r26	; 0x0d
    15c2:	be 87       	std	Y+14, r27	; 0x0e
	if (cycles < TIMER1_RESOLUTION) {
    15c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15c8:	ad 85       	ldd	r26, Y+13	; 0x0d
    15ca:	be 85       	ldd	r27, Y+14	; 0x0e
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	a1 40       	sbci	r26, 0x01	; 1
    15d0:	b1 05       	cpc	r27, r1
    15d2:	50 f4       	brcc	.+20     	; 0x15e8 <setup+0xd6>
		clockSelectBits = _BV(CS10);
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles;
    15da:	8b 85       	ldd	r24, Y+11	; 0x0b
    15dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    15de:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    15e2:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
    15e6:	76 c0       	rjmp	.+236    	; 0x16d4 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 8) {
    15e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ec:	ad 85       	ldd	r26, Y+13	; 0x0d
    15ee:	be 85       	ldd	r27, Y+14	; 0x0e
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	a8 40       	sbci	r26, 0x08	; 8
    15f4:	b1 05       	cpc	r27, r1
    15f6:	a0 f4       	brcc	.+40     	; 0x1620 <setup+0x10e>
		clockSelectBits = _BV(CS11);
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 8;
    15fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1600:	9c 85       	ldd	r25, Y+12	; 0x0c
    1602:	ad 85       	ldd	r26, Y+13	; 0x0d
    1604:	be 85       	ldd	r27, Y+14	; 0x0e
    1606:	68 94       	set
    1608:	12 f8       	bld	r1, 2
    160a:	b6 95       	lsr	r27
    160c:	a7 95       	ror	r26
    160e:	97 95       	ror	r25
    1610:	87 95       	ror	r24
    1612:	16 94       	lsr	r1
    1614:	d1 f7       	brne	.-12     	; 0x160a <setup+0xf8>
    1616:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    161a:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
    161e:	5a c0       	rjmp	.+180    	; 0x16d4 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
    1620:	8b 85       	ldd	r24, Y+11	; 0x0b
    1622:	9c 85       	ldd	r25, Y+12	; 0x0c
    1624:	ad 85       	ldd	r26, Y+13	; 0x0d
    1626:	be 85       	ldd	r27, Y+14	; 0x0e
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	a0 44       	sbci	r26, 0x40	; 64
    162c:	b1 05       	cpc	r27, r1
    162e:	a0 f4       	brcc	.+40     	; 0x1658 <setup+0x146>
		clockSelectBits = _BV(CS11) | _BV(CS10);
    1630:	83 e0       	ldi	r24, 0x03	; 3
    1632:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 64;
    1636:	8b 85       	ldd	r24, Y+11	; 0x0b
    1638:	9c 85       	ldd	r25, Y+12	; 0x0c
    163a:	ad 85       	ldd	r26, Y+13	; 0x0d
    163c:	be 85       	ldd	r27, Y+14	; 0x0e
    163e:	68 94       	set
    1640:	15 f8       	bld	r1, 5
    1642:	b6 95       	lsr	r27
    1644:	a7 95       	ror	r26
    1646:	97 95       	ror	r25
    1648:	87 95       	ror	r24
    164a:	16 94       	lsr	r1
    164c:	d1 f7       	brne	.-12     	; 0x1642 <setup+0x130>
    164e:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    1652:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
    1656:	3e c0       	rjmp	.+124    	; 0x16d4 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 256) {
    1658:	8b 85       	ldd	r24, Y+11	; 0x0b
    165a:	9c 85       	ldd	r25, Y+12	; 0x0c
    165c:	ad 85       	ldd	r26, Y+13	; 0x0d
    165e:	be 85       	ldd	r27, Y+14	; 0x0e
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	a1 05       	cpc	r26, r1
    1664:	b1 40       	sbci	r27, 0x01	; 1
    1666:	80 f4       	brcc	.+32     	; 0x1688 <setup+0x176>
		clockSelectBits = _BV(CS12);
    1668:	84 e0       	ldi	r24, 0x04	; 4
    166a:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 256;
    166e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1670:	9c 85       	ldd	r25, Y+12	; 0x0c
    1672:	ad 85       	ldd	r26, Y+13	; 0x0d
    1674:	be 85       	ldd	r27, Y+14	; 0x0e
    1676:	89 2f       	mov	r24, r25
    1678:	9a 2f       	mov	r25, r26
    167a:	ab 2f       	mov	r26, r27
    167c:	bb 27       	eor	r27, r27
    167e:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    1682:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
    1686:	26 c0       	rjmp	.+76     	; 0x16d4 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 1024) {
    1688:	8b 85       	ldd	r24, Y+11	; 0x0b
    168a:	9c 85       	ldd	r25, Y+12	; 0x0c
    168c:	ad 85       	ldd	r26, Y+13	; 0x0d
    168e:	be 85       	ldd	r27, Y+14	; 0x0e
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a1 05       	cpc	r26, r1
    1694:	b4 40       	sbci	r27, 0x04	; 4
    1696:	a8 f4       	brcc	.+42     	; 0x16c2 <setup+0x1b0>
		clockSelectBits = _BV(CS12) | _BV(CS10);
    1698:	85 e0       	ldi	r24, 0x05	; 5
    169a:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 1024;
    169e:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    16a2:	ad 85       	ldd	r26, Y+13	; 0x0d
    16a4:	be 85       	ldd	r27, Y+14	; 0x0e
    16a6:	07 2e       	mov	r0, r23
    16a8:	7a e0       	ldi	r23, 0x0A	; 10
    16aa:	b6 95       	lsr	r27
    16ac:	a7 95       	ror	r26
    16ae:	97 95       	ror	r25
    16b0:	87 95       	ror	r24
    16b2:	7a 95       	dec	r23
    16b4:	d1 f7       	brne	.-12     	; 0x16aa <setup+0x198>
    16b6:	70 2d       	mov	r23, r0
    16b8:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    16bc:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
    16c0:	09 c0       	rjmp	.+18     	; 0x16d4 <setup+0x1c2>
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
    16c2:	85 e0       	ldi	r24, 0x05	; 5
    16c4:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = TIMER1_RESOLUTION - 1;
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
    16cc:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    16d0:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
	}
	ICR1 = pwmPeriod;
    16d4:	86 e8       	ldi	r24, 0x86	; 134
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	20 91 fc 04 	lds	r18, 0x04FC	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
    16dc:	30 91 fd 04 	lds	r19, 0x04FD	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    16e0:	fc 01       	movw	r30, r24
    16e2:	31 83       	std	Z+1, r19	; 0x01
    16e4:	20 83       	st	Z, r18
	TCCR1B = _BV(WGM13) | clockSelectBits;
    16e6:	81 e8       	ldi	r24, 0x81	; 129
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
    16ee:	20 61       	ori	r18, 0x10	; 16
    16f0:	fc 01       	movw	r30, r24
    16f2:	20 83       	st	Z, r18
	Timer1.initialize(10);
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
    16f4:	01 e0       	ldi	r16, 0x01	; 1
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	4c e3       	ldi	r20, 0x3C	; 60
    16fa:	62 e0       	ldi	r22, 0x02	; 2
    16fc:	8b ea       	ldi	r24, 0xAB	; 171
    16fe:	93 e0       	ldi	r25, 0x03	; 3
    1700:	0e 94 29 23 	call	0x4652	; 0x4652 <_ZN16Adafruit_SSD13065beginEhhbb>
    1704:	98 2f       	mov	r25, r24
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	89 27       	eor	r24, r25
    170a:	88 23       	and	r24, r24
    170c:	41 f0       	breq	.+16     	; 0x171e <setup+0x20c>
	{ // Address for 128x64
		Serial.println(F("SSD1306 allocation failed"));
    170e:	86 e4       	ldi	r24, 0x46	; 70
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	bc 01       	movw	r22, r24
    1714:	8d ec       	ldi	r24, 0xCD	; 205
    1716:	95 e0       	ldi	r25, 0x05	; 5
    1718:	0e 94 80 5c 	call	0xb900	; 0xb900 <_ZN5Print7printlnEPK19__FlashStringHelper>
		for(;;); // Don't proceed, loop forever
    171c:	ff cf       	rjmp	.-2      	; 0x171c <setup+0x20a>
	}
	#pragma endregion Begins
	
	#pragma region PinMode
	pinMode(RedRGB, OUTPUT);
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	8a e2       	ldi	r24, 0x2A	; 42
    1722:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
	pinMode(GreenRGB, OUTPUT);
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	8b e2       	ldi	r24, 0x2B	; 43
    172a:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
	pinMode(BlueRGB, OUTPUT);
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	8c e2       	ldi	r24, 0x2C	; 44
    1732:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
	pinMode(RedLED, OUTPUT);
    1736:	61 e0       	ldi	r22, 0x01	; 1
    1738:	89 e0       	ldi	r24, 0x09	; 9
    173a:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
	pinMode(GreenLED, OUTPUT);
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	87 e0       	ldi	r24, 0x07	; 7
    1742:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
	pinMode(BlueLED, OUTPUT);
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	88 e0       	ldi	r24, 0x08	; 8
    174a:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
	pinMode(trigPin, OUTPUT);
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
	pinMode(echoPin, INPUT);
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	84 e0       	ldi	r24, 0x04	; 4
    175a:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
	myservo.attach(servopin);
    175e:	6a e0       	ldi	r22, 0x0A	; 10
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	8f e5       	ldi	r24, 0x5F	; 95
    1764:	94 e0       	ldi	r25, 0x04	; 4
    1766:	0e 94 dd 4d 	call	0x9bba	; 0x9bba <_ZN5Servo6attachEi>
	#pragma endregion PinMode
	
	display.clearDisplay();
    176a:	8b ea       	ldi	r24, 0xAB	; 171
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	0e 94 79 28 	call	0x50f2	; 0x50f2 <_ZN16Adafruit_SSD130612clearDisplayEv>
	lcd.clear();
    1772:	8b e7       	ldi	r24, 0x7B	; 123
    1774:	93 e0       	ldi	r25, 0x03	; 3
    1776:	0e 94 4e 41 	call	0x829c	; 0x829c <_ZN13LiquidCrystal5clearEv>
	
}
    177a:	00 00       	nop
    177c:	2e 96       	adiw	r28, 0x0e	; 14
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	0f 91       	pop	r16
    178e:	08 95       	ret

00001790 <loop>:

void loop()
{
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	6f 97       	sbiw	r28, 0x1f	; 31
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
	if (Keycard)
    17ac:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <Keycard>
    17b0:	88 23       	and	r24, r24
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <loop+0x26>
    17b4:	62 c0       	rjmp	.+196    	; 0x187a <loop+0xea>
	{
		unsigned long currentMillis = millis();
    17b6:	0e 94 75 5e 	call	0xbcea	; 0xbcea <millis>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	ab 83       	std	Y+3, r26	; 0x03
    17c4:	bc 83       	std	Y+4, r27	; 0x04

		DisplayMenu();
    17c6:	ed d0       	rcall	.+474    	; 0x19a2 <_Z11DisplayMenuv>
		char key = keypad.getKey();
    17c8:	8b ee       	ldi	r24, 0xEB	; 235
    17ca:	93 e0       	ldi	r25, 0x03	; 3
    17cc:	0e 94 6f 3a 	call	0x74de	; 0x74de <_ZN6Keypad6getKeyEv>
    17d0:	8d 83       	std	Y+5, r24	; 0x05
		if (key != NO_KEY){
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	88 23       	and	r24, r24
    17d6:	49 f0       	breq	.+18     	; 0x17ea <loop+0x5a>
			Serial.println(key);
    17d8:	6d 81       	ldd	r22, Y+5	; 0x05
    17da:	8d ec       	ldi	r24, 0xCD	; 205
    17dc:	95 e0       	ldi	r25, 0x05	; 5
    17de:	0e 94 a0 5c 	call	0xb940	; 0xb940 <_ZN5Print7printlnEc>
			Menu(key, &TimeAndDate);
    17e2:	6a e9       	ldi	r22, 0x9A	; 154
    17e4:	73 e0       	ldi	r23, 0x03	; 3
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	2e d1       	rcall	.+604    	; 0x1a46 <_Z4MenucPb>
		}
		
		if (currentMillis - previousMillis >= intervalDate && TimeAndDate )
    17ea:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <previousMillis>
    17ee:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <previousMillis+0x1>
    17f2:	a0 91 9d 03 	lds	r26, 0x039D	; 0x80039d <previousMillis+0x2>
    17f6:	b0 91 9e 03 	lds	r27, 0x039E	; 0x80039e <previousMillis+0x3>
    17fa:	9c 01       	movw	r18, r24
    17fc:	ad 01       	movw	r20, r26
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	ab 81       	ldd	r26, Y+3	; 0x03
    1804:	bc 81       	ldd	r27, Y+4	; 0x04
    1806:	82 1b       	sub	r24, r18
    1808:	93 0b       	sbc	r25, r19
    180a:	a4 0b       	sbc	r26, r20
    180c:	b5 0b       	sbc	r27, r21
    180e:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <intervalDate>
    1812:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <intervalDate+0x1>
    1816:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <intervalDate+0x2>
    181a:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <intervalDate+0x3>
    181e:	82 17       	cp	r24, r18
    1820:	93 07       	cpc	r25, r19
    1822:	a4 07       	cpc	r26, r20
    1824:	b5 07       	cpc	r27, r21
    1826:	08 f1       	brcs	.+66     	; 0x186a <loop+0xda>
    1828:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <TimeAndDate>
    182c:	88 23       	and	r24, r24
    182e:	e9 f0       	breq	.+58     	; 0x186a <loop+0xda>
		{
			RTCDateTime dt = GetDateTime();
    1830:	ce 01       	movw	r24, r28
    1832:	0e 96       	adiw	r24, 0x0e	; 14
    1834:	0e 94 bb 57 	call	0xaf76	; 0xaf76 <_Z11GetDateTimev>
			LCDPrintTimeAndDate(dt);
    1838:	ee 84       	ldd	r14, Y+14	; 0x0e
    183a:	ff 84       	ldd	r15, Y+15	; 0x0f
    183c:	08 89       	ldd	r16, Y+16	; 0x10
    183e:	19 89       	ldd	r17, Y+17	; 0x11
    1840:	2a 89       	ldd	r18, Y+18	; 0x12
    1842:	3b 89       	ldd	r19, Y+19	; 0x13
    1844:	4c 89       	ldd	r20, Y+20	; 0x14
    1846:	5d 89       	ldd	r21, Y+21	; 0x15
    1848:	6e 89       	ldd	r22, Y+22	; 0x16
    184a:	7f 89       	ldd	r23, Y+23	; 0x17
    184c:	88 8d       	ldd	r24, Y+24	; 0x18
    184e:	99 8d       	ldd	r25, Y+25	; 0x19
    1850:	65 dc       	rcall	.-1846   	; 0x111c <_Z19LCDPrintTimeAndDate11RTCDateTime>
			previousMillis = currentMillis;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	ab 81       	ldd	r26, Y+3	; 0x03
    1858:	bc 81       	ldd	r27, Y+4	; 0x04
    185a:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <previousMillis>
    185e:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <previousMillis+0x1>
    1862:	a0 93 9d 03 	sts	0x039D, r26	; 0x80039d <previousMillis+0x2>
		}
		ChangeRGBAnalog();
    1866:	b0 93 9e 03 	sts	0x039E, r27	; 0x80039e <previousMillis+0x3>
		TjekTempInHous();
    186a:	47 dd       	rcall	.-1394   	; 0x12fa <_Z15ChangeRGBAnalogv>
    186c:	ad da       	rcall	.-2726   	; 0xdc8 <_Z14TjekTempInHousv>
		unsigned int distance = GetDistance();
    186e:	97 db       	rcall	.-2258   	; 0xf9e <_Z11GetDistancev>
    1870:	9f 83       	std	Y+7, r25	; 0x07
    1872:	8e 83       	std	Y+6, r24	; 0x06
		SetServo(distance);
    1874:	8e 81       	ldd	r24, Y+6	; 0x06
    1876:	9f 81       	ldd	r25, Y+7	; 0x07
    1878:	19 d5       	rcall	.+2610   	; 0x22ac <_Z8SetServoi>
    187a:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <Keycard>

	}
	if (!Keycard)
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	89 27       	eor	r24, r25
    1882:	88 23       	and	r24, r24
    1884:	d1 f1       	breq	.+116    	; 0x18fa <loop+0x16a>
    1886:	8f e4       	ldi	r24, 0x4F	; 79
	{
		if ( !mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() )
    1888:	94 e0       	ldi	r25, 0x04	; 4
    188a:	0e 94 3e 4a 	call	0x947c	; 0x947c <_ZN7MFRC52221PICC_IsNewCardPresentEv>
    188e:	98 2f       	mov	r25, r24
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 27       	eor	r24, r25
    1894:	88 23       	and	r24, r24
    1896:	49 f4       	brne	.+18     	; 0x18aa <loop+0x11a>
    1898:	8f e4       	ldi	r24, 0x4F	; 79
    189a:	94 e0       	ldi	r25, 0x04	; 4
    189c:	0e 94 74 4a 	call	0x94e8	; 0x94e8 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    18a0:	98 2f       	mov	r25, r24
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	89 27       	eor	r24, r25
    18a6:	88 23       	and	r24, r24
    18a8:	11 f0       	breq	.+4      	; 0x18ae <loop+0x11e>
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <loop+0x120>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	88 23       	and	r24, r24
    18b2:	39 f0       	breq	.+14     	; 0x18c2 <loop+0x132>
    18b4:	62 e3       	ldi	r22, 0x32	; 50
		{
			delay(50);
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 a6 5e 	call	0xbd4c	; 0xbd4c <delay>
    18c0:	1c c0       	rjmp	.+56     	; 0x18fa <loop+0x16a>
			return;
		}
		String UID = ReadUID();
    18c2:	ce 01       	movw	r24, r28
    18c4:	4a 96       	adiw	r24, 0x1a	; 26
    18c6:	1b d4       	rcall	.+2102   	; 0x20fe <_Z7ReadUIDv>
    18c8:	9e 01       	movw	r18, r28
		CheckKeyCard(UID, &Keycard);
    18ca:	26 5e       	subi	r18, 0xE6	; 230
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	ce 01       	movw	r24, r28
    18d0:	08 96       	adiw	r24, 0x08	; 8
    18d2:	b9 01       	movw	r22, r18
    18d4:	0e 94 22 62 	call	0xc444	; 0xc444 <_ZN6StringC1ERKS_>
    18d8:	ce 01       	movw	r24, r28
    18da:	08 96       	adiw	r24, 0x08	; 8
    18dc:	69 e9       	ldi	r22, 0x99	; 153
    18de:	73 e0       	ldi	r23, 0x03	; 3
    18e0:	65 d4       	rcall	.+2250   	; 0x21ac <_Z12CheckKeyCard6StringPb>
    18e2:	ce 01       	movw	r24, r28
    18e4:	08 96       	adiw	r24, 0x08	; 8
    18e6:	0e 94 8f 61 	call	0xc31e	; 0xc31e <_ZN6StringD1Ev>
    18ea:	8b ea       	ldi	r24, 0xAB	; 171
		display.clearDisplay();
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	0e 94 79 28 	call	0x50f2	; 0x50f2 <_ZN16Adafruit_SSD130612clearDisplayEv>
    18f2:	ce 01       	movw	r24, r28
		if ( !mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() )
		{
			delay(50);
			return;
		}
		String UID = ReadUID();
    18f4:	4a 96       	adiw	r24, 0x1a	; 26
    18f6:	0e 94 8f 61 	call	0xc31e	; 0xc31e <_ZN6StringD1Ev>
    18fa:	6f 96       	adiw	r28, 0x1f	; 31
		CheckKeyCard(UID, &Keycard);
		display.clearDisplay();
	}
}
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	08 95       	ret

00001914 <_ZN12Adafruit_GFX9setCursorEii>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	00 d0       	rcall	.+0      	; 0x191a <_ZN12Adafruit_GFX9setCursorEii+0x6>
    191a:	00 d0       	rcall	.+0      	; 0x191c <_ZN12Adafruit_GFX9setCursorEii+0x8>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	7c 83       	std	Y+4, r23	; 0x04
    1926:	6b 83       	std	Y+3, r22	; 0x03
    1928:	5e 83       	std	Y+6, r21	; 0x06
    192a:	4d 83       	std	Y+5, r20	; 0x05
    cursor_x = x;
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	fc 01       	movw	r30, r24
    1936:	35 87       	std	Z+13, r19	; 0x0d
    1938:	24 87       	std	Z+12, r18	; 0x0c
    cursor_y = y;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	2d 81       	ldd	r18, Y+5	; 0x05
    1940:	3e 81       	ldd	r19, Y+6	; 0x06
    1942:	fc 01       	movw	r30, r24
    1944:	37 87       	std	Z+15, r19	; 0x0f
    1946:	26 87       	std	Z+14, r18	; 0x0e
  }
    1948:	00 00       	nop
    194a:	26 96       	adiw	r28, 0x06	; 6
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <_ZN12Adafruit_GFX12setTextColorEj>:
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	00 d0       	rcall	.+0      	; 0x1962 <_ZN12Adafruit_GFX12setTextColorEj+0x6>
    1962:	1f 92       	push	r1
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	7c 83       	std	Y+4, r23	; 0x04
    196e:	6b 83       	std	Y+3, r22	; 0x03
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	2b 81       	ldd	r18, Y+3	; 0x03
    1976:	3c 81       	ldd	r19, Y+4	; 0x04
    1978:	fc 01       	movw	r30, r24
    197a:	33 8b       	std	Z+19, r19	; 0x13
    197c:	22 8b       	std	Z+18, r18	; 0x12
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	fc 01       	movw	r30, r24
    1984:	22 89       	ldd	r18, Z+18	; 0x12
    1986:	33 89       	ldd	r19, Z+19	; 0x13
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	fc 01       	movw	r30, r24
    198e:	31 8b       	std	Z+17, r19	; 0x11
    1990:	20 8b       	std	Z+16, r18	; 0x10
    1992:	00 00       	nop
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <_Z11DisplayMenuv>:
byte colPins[cols] = {36, 37, 38, 39}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );


void DisplayMenu()
{
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
	display.clearDisplay();
    19aa:	8b ea       	ldi	r24, 0xAB	; 171
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	0e 94 79 28 	call	0x50f2	; 0x50f2 <_ZN16Adafruit_SSD130612clearDisplayEv>

	display.setTextSize(1);
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	8b ea       	ldi	r24, 0xAB	; 171
    19b6:	93 e0       	ldi	r25, 0x03	; 3
    19b8:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <_ZN12Adafruit_GFX11setTextSizeEh>
	display.setTextColor(WHITE);
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	8b ea       	ldi	r24, 0xAB	; 171
    19c2:	93 e0       	ldi	r25, 0x03	; 3
    19c4:	cb df       	rcall	.-106    	; 0x195c <_ZN12Adafruit_GFX12setTextColorEj>
	display.setCursor(0,0);
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	8b ea       	ldi	r24, 0xAB	; 171
    19d0:	93 e0       	ldi	r25, 0x03	; 3
    19d2:	a0 df       	rcall	.-192    	; 0x1914 <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("Menu"));
    19d4:	80 e6       	ldi	r24, 0x60	; 96
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	bc 01       	movw	r22, r24
    19da:	8b ea       	ldi	r24, 0xAB	; 171
    19dc:	93 e0       	ldi	r25, 0x03	; 3
    19de:	0e 94 80 5c 	call	0xb900	; 0xb900 <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,10);
    19e2:	4a e0       	ldi	r20, 0x0A	; 10
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	8b ea       	ldi	r24, 0xAB	; 171
    19ec:	93 e0       	ldi	r25, 0x03	; 3
    19ee:	92 df       	rcall	.-220    	; 0x1914 <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("A: Time and Date"));
    19f0:	85 e6       	ldi	r24, 0x65	; 101
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	bc 01       	movw	r22, r24
    19f6:	8b ea       	ldi	r24, 0xAB	; 171
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 80 5c 	call	0xb900	; 0xb900 <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,20);
    19fe:	44 e1       	ldi	r20, 0x14	; 20
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	8b ea       	ldi	r24, 0xAB	; 171
    1a08:	93 e0       	ldi	r25, 0x03	; 3
    1a0a:	84 df       	rcall	.-248    	; 0x1914 <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("B: Tempreture"));
    1a0c:	86 e7       	ldi	r24, 0x76	; 118
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	bc 01       	movw	r22, r24
    1a12:	8b ea       	ldi	r24, 0xAB	; 171
    1a14:	93 e0       	ldi	r25, 0x03	; 3
    1a16:	0e 94 80 5c 	call	0xb900	; 0xb900 <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,30);
    1a1a:	4e e1       	ldi	r20, 0x1E	; 30
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	8b ea       	ldi	r24, 0xAB	; 171
    1a24:	93 e0       	ldi	r25, 0x03	; 3
    1a26:	76 df       	rcall	.-276    	; 0x1914 <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("C: Humidity"));
    1a28:	84 e8       	ldi	r24, 0x84	; 132
    1a2a:	91 e0       	ldi	r25, 0x01	; 1
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	8b ea       	ldi	r24, 0xAB	; 171
    1a30:	93 e0       	ldi	r25, 0x03	; 3
    1a32:	0e 94 80 5c 	call	0xb900	; 0xb900 <_ZN5Print7printlnEPK19__FlashStringHelper>

	display.display();
    1a36:	8b ea       	ldi	r24, 0xAB	; 171
    1a38:	93 e0       	ldi	r25, 0x03	; 3
    1a3a:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <_ZN16Adafruit_SSD13067displayEv>
}
    1a3e:	00 00       	nop
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <_Z4MenucPb>:

void Menu(char key, bool *TimeAndDate)
{
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	89 87       	std	Y+9, r24	; 0x09
    1a5c:	7b 87       	std	Y+11, r23	; 0x0b
    1a5e:	6a 87       	std	Y+10, r22	; 0x0a
	
	switch (key)
    1a60:	89 85       	ldd	r24, Y+9	; 0x09
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	82 34       	cpi	r24, 0x42	; 66
    1a68:	91 05       	cpc	r25, r1
    1a6a:	01 f1       	breq	.+64     	; 0x1aac <_Z4MenucPb+0x66>
    1a6c:	83 34       	cpi	r24, 0x43	; 67
    1a6e:	91 05       	cpc	r25, r1
    1a70:	b1 f1       	breq	.+108    	; 0x1ade <_Z4MenucPb+0x98>
    1a72:	81 34       	cpi	r24, 0x41	; 65
    1a74:	91 05       	cpc	r25, r1
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <_Z4MenucPb+0x34>
			LCDPrintHumidity(humid);
			*TimeAndDate = false;
		}
		break;
		default:
		break;
    1a78:	4b c0       	rjmp	.+150    	; 0x1b10 <_Z4MenucPb+0xca>
{
	
	switch (key)
	{
		case 'A':
		Serial.println("Du valgte: A");
    1a7a:	62 e4       	ldi	r22, 0x42	; 66
    1a7c:	72 e0       	ldi	r23, 0x02	; 2
    1a7e:	8d ec       	ldi	r24, 0xCD	; 205
    1a80:	95 e0       	ldi	r25, 0x05	; 5
    1a82:	0e 94 90 5c 	call	0xb920	; 0xb920 <_ZN5Print7printlnEPKc>
		{
			*TimeAndDate = true;
    1a86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a88:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a8a:	21 e0       	ldi	r18, 0x01	; 1
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
			Serial.println(*TimeAndDate);
    1a90:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a92:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a94:	fc 01       	movw	r30, r24
    1a96:	80 81       	ld	r24, Z
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	4a e0       	ldi	r20, 0x0A	; 10
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	8d ec       	ldi	r24, 0xCD	; 205
    1aa4:	95 e0       	ldi	r25, 0x05	; 5
    1aa6:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN5Print7printlnEii>
		}
		break;
    1aaa:	32 c0       	rjmp	.+100    	; 0x1b10 <_Z4MenucPb+0xca>
		case 'B':
		{
			Serial.println("Du valgte: C");
    1aac:	6f e4       	ldi	r22, 0x4F	; 79
    1aae:	72 e0       	ldi	r23, 0x02	; 2
    1ab0:	8d ec       	ldi	r24, 0xCD	; 205
    1ab2:	95 e0       	ldi	r25, 0x05	; 5
    1ab4:	0e 94 90 5c 	call	0xb920	; 0xb920 <_ZN5Print7printlnEPKc>
			float temp = GetTemp();
    1ab8:	76 d9       	rcall	.-3348   	; 0xda6 <_Z7GetTempv>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	ab 83       	std	Y+3, r26	; 0x03
    1ac4:	bc 83       	std	Y+4, r27	; 0x04
			LCDPrintTemp(temp);
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	ab 81       	ldd	r26, Y+3	; 0x03
    1acc:	bc 81       	ldd	r27, Y+4	; 0x04
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	c6 da       	rcall	.-2676   	; 0x1060 <_Z12LCDPrintTempf>
			*TimeAndDate = false;
    1ad4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad8:	fc 01       	movw	r30, r24
    1ada:	10 82       	st	Z, r1
		}
		break;
    1adc:	19 c0       	rjmp	.+50     	; 0x1b10 <_Z4MenucPb+0xca>
		case 'C':
		{
			Serial.println("Du valgte: D");
    1ade:	6c e5       	ldi	r22, 0x5C	; 92
    1ae0:	72 e0       	ldi	r23, 0x02	; 2
    1ae2:	8d ec       	ldi	r24, 0xCD	; 205
    1ae4:	95 e0       	ldi	r25, 0x05	; 5
    1ae6:	0e 94 90 5c 	call	0xb920	; 0xb920 <_ZN5Print7printlnEPKc>
			float humid = GetHumid();
    1aea:	4d d9       	rcall	.-3430   	; 0xd86 <_Z8GetHumidv>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	af 83       	std	Y+7, r26	; 0x07
    1af6:	b8 87       	std	Y+8, r27	; 0x08
			LCDPrintHumidity(humid);
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	af 81       	ldd	r26, Y+7	; 0x07
    1afe:	b8 85       	ldd	r27, Y+8	; 0x08
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	db da       	rcall	.-2634   	; 0x10bc <_Z16LCDPrintHumidityf>
			*TimeAndDate = false;
    1b06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	10 82       	st	Z, r1
		}
		break;
    1b0e:	00 00       	nop
		default:
		break;
	}
}
    1b10:	00 00       	nop
    1b12:	2b 96       	adiw	r28, 0x0b	; 11
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <_Z41__static_initialization_and_destruction_0ii>:
    1b24:	8f 92       	push	r8
    1b26:	9f 92       	push	r9
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <_Z41__static_initialization_and_destruction_0ii+0x18>
    1b3c:	1f 92       	push	r1
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	7c 83       	std	Y+4, r23	; 0x04
    1b48:	6b 83       	std	Y+3, r22	; 0x03
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	69 f5       	brne	.+90     	; 0x1bac <_Z41__static_initialization_and_destruction_0ii+0x88>
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	9c 81       	ldd	r25, Y+4	; 0x04
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	49 f5       	brne	.+82     	; 0x1bac <_Z41__static_initialization_and_destruction_0ii+0x88>
#include "Menu.h"

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1b5a:	0f 2e       	mov	r0, r31
    1b5c:	f0 ea       	ldi	r31, 0xA0	; 160
    1b5e:	8f 2e       	mov	r8, r31
    1b60:	f6 e8       	ldi	r31, 0x86	; 134
    1b62:	9f 2e       	mov	r9, r31
    1b64:	aa 24       	eor	r10, r10
    1b66:	a3 94       	inc	r10
    1b68:	b1 2c       	mov	r11, r1
    1b6a:	f0 2d       	mov	r31, r0
    1b6c:	0f 2e       	mov	r0, r31
    1b6e:	f0 e8       	ldi	r31, 0x80	; 128
    1b70:	cf 2e       	mov	r12, r31
    1b72:	fa e1       	ldi	r31, 0x1A	; 26
    1b74:	df 2e       	mov	r13, r31
    1b76:	f6 e0       	ldi	r31, 0x06	; 6
    1b78:	ef 2e       	mov	r14, r31
    1b7a:	f1 2c       	mov	r15, r1
    1b7c:	f0 2d       	mov	r31, r0
    1b7e:	04 e0       	ldi	r16, 0x04	; 4
    1b80:	21 ec       	ldi	r18, 0xC1	; 193
    1b82:	35 e0       	ldi	r19, 0x05	; 5
    1b84:	40 e4       	ldi	r20, 0x40	; 64
    1b86:	60 e8       	ldi	r22, 0x80	; 128
    1b88:	8b ea       	ldi	r24, 0xAB	; 171
    1b8a:	93 e0       	ldi	r25, 0x03	; 3
    1b8c:	0e 94 39 20 	call	0x4072	; 0x4072 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
	{'7','8','9','C'},
	{'*','0','#','D'}
};
byte rowPins[rows] = {32, 33, 34, 35}; //connect to the row pinouts of the keypad
byte colPins[cols] = {36, 37, 38, 39}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );
    1b90:	68 94       	set
    1b92:	ee 24       	eor	r14, r14
    1b94:	e2 f8       	bld	r14, 2
    1b96:	04 e0       	ldi	r16, 0x04	; 4
    1b98:	22 e3       	ldi	r18, 0x32	; 50
    1b9a:	32 e0       	ldi	r19, 0x02	; 2
    1b9c:	4e e2       	ldi	r20, 0x2E	; 46
    1b9e:	52 e0       	ldi	r21, 0x02	; 2
    1ba0:	6e e1       	ldi	r22, 0x1E	; 30
    1ba2:	72 e0       	ldi	r23, 0x02	; 2
    1ba4:	8b ee       	ldi	r24, 0xEB	; 235
    1ba6:	93 e0       	ldi	r25, 0x03	; 3
    1ba8:	0e 94 cb 39 	call	0x7396	; 0x7396 <_ZN6KeypadC1EPcPhS1_hh>
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb0:	89 2b       	or	r24, r25
    1bb2:	41 f4       	brne	.+16     	; 0x1bc4 <_Z41__static_initialization_and_destruction_0ii+0xa0>
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	21 f4       	brne	.+8      	; 0x1bc4 <_Z41__static_initialization_and_destruction_0ii+0xa0>
#include "Menu.h"

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1bbc:	8b ea       	ldi	r24, 0xAB	; 171
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	0e 94 cb 20 	call	0x4196	; 0x4196 <_ZN16Adafruit_SSD1306D1Ev>
		}
		break;
		default:
		break;
	}
}
    1bc4:	00 00       	nop
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	df 90       	pop	r13
    1bda:	cf 90       	pop	r12
    1bdc:	bf 90       	pop	r11
    1bde:	af 90       	pop	r10
    1be0:	9f 90       	pop	r9
    1be2:	8f 90       	pop	r8
    1be4:	08 95       	ret

00001be6 <_GLOBAL__sub_I_display>:
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	6f ef       	ldi	r22, 0xFF	; 255
    1bf0:	7f ef       	ldi	r23, 0xFF	; 255
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	96 df       	rcall	.-212    	; 0x1b24 <_Z41__static_initialization_and_destruction_0ii>
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	08 95       	ret

00001bfe <_GLOBAL__sub_D_display>:
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	6f ef       	ldi	r22, 0xFF	; 255
    1c08:	7f ef       	ldi	r23, 0xFF	; 255
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	8a df       	rcall	.-236    	; 0x1b24 <_Z41__static_initialization_and_destruction_0ii>
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <_Z11TempTooColdv>:

int moter = 12;


void TempTooCold()
{
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	2c 97       	sbiw	r28, 0x0c	; 12
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
	Timer1.pwm(moter, (1023 / 100) * 0);
    1c2a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <moter>
    1c2e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <moter+0x1>
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	1b 82       	std	Y+3, r1	; 0x03
    1c36:	1a 82       	std	Y+2, r1	; 0x02
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	8b 30       	cpi	r24, 0x0B	; 11
    1c3c:	71 f4       	brne	.+28     	; 0x1c5a <_Z11TempTooColdv+0x44>
    1c3e:	61 e0       	ldi	r22, 0x01	; 1
    1c40:	8b e0       	ldi	r24, 0x0B	; 11
    1c42:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    1c46:	80 e8       	ldi	r24, 0x80	; 128
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	20 e8       	ldi	r18, 0x80	; 128
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	f9 01       	movw	r30, r18
    1c50:	20 81       	ld	r18, Z
    1c52:	20 68       	ori	r18, 0x80	; 128
    1c54:	fc 01       	movw	r30, r24
    1c56:	20 83       	st	Z, r18
    1c58:	21 c0       	rjmp	.+66     	; 0x1c9c <_Z11TempTooColdv+0x86>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	8c 30       	cpi	r24, 0x0C	; 12
    1c5e:	71 f4       	brne	.+28     	; 0x1c7c <_Z11TempTooColdv+0x66>
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	8c e0       	ldi	r24, 0x0C	; 12
    1c64:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    1c68:	80 e8       	ldi	r24, 0x80	; 128
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	20 e8       	ldi	r18, 0x80	; 128
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	f9 01       	movw	r30, r18
    1c72:	20 81       	ld	r18, Z
    1c74:	20 62       	ori	r18, 0x20	; 32
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 83       	st	Z, r18
    1c7a:	10 c0       	rjmp	.+32     	; 0x1c9c <_Z11TempTooColdv+0x86>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	8d 30       	cpi	r24, 0x0D	; 13
    1c80:	69 f4       	brne	.+26     	; 0x1c9c <_Z11TempTooColdv+0x86>
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	8d e0       	ldi	r24, 0x0D	; 13
    1c86:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    1c8a:	80 e8       	ldi	r24, 0x80	; 128
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	20 e8       	ldi	r18, 0x80	; 128
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	f9 01       	movw	r30, r18
    1c94:	20 81       	ld	r18, Z
    1c96:	28 60       	ori	r18, 0x08	; 8
    1c98:	fc 01       	movw	r30, r24
    1c9a:	20 83       	st	Z, r18
    1c9c:	8b ef       	ldi	r24, 0xFB	; 251
    1c9e:	94 e0       	ldi	r25, 0x04	; 4
    1ca0:	9d 83       	std	Y+5, r25	; 0x05
    1ca2:	8c 83       	std	Y+4, r24	; 0x04
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	8e 83       	std	Y+6, r24	; 0x06
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cac:	98 87       	std	Y+8, r25	; 0x08
    1cae:	8f 83       	std	Y+7, r24	; 0x07

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    1cb0:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
    1cb4:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    1cb8:	cc 01       	movw	r24, r24
    1cba:	a0 e0       	ldi	r26, 0x00	; 0
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	89 87       	std	Y+9, r24	; 0x09
    1cc0:	9a 87       	std	Y+10, r25	; 0x0a
    1cc2:	ab 87       	std	Y+11, r26	; 0x0b
    1cc4:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle *= duty;
    1cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc8:	98 85       	ldd	r25, Y+8	; 0x08
    1cca:	cc 01       	movw	r24, r24
    1ccc:	a0 e0       	ldi	r26, 0x00	; 0
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	29 85       	ldd	r18, Y+9	; 0x09
    1cd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cd4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cd6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 00 63 	call	0xc600	; 0xc600 <__mulsi3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	89 87       	std	Y+9, r24	; 0x09
    1ce6:	9a 87       	std	Y+10, r25	; 0x0a
    1ce8:	ab 87       	std	Y+11, r26	; 0x0b
    1cea:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle >>= 10;
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	ab 85       	ldd	r26, Y+11	; 0x0b
    1cf2:	bc 85       	ldd	r27, Y+12	; 0x0c
    1cf4:	07 2e       	mov	r0, r23
    1cf6:	7a e0       	ldi	r23, 0x0A	; 10
    1cf8:	b6 95       	lsr	r27
    1cfa:	a7 95       	ror	r26
    1cfc:	97 95       	ror	r25
    1cfe:	87 95       	ror	r24
    1d00:	7a 95       	dec	r23
    1d02:	d1 f7       	brne	.-12     	; 0x1cf8 <_Z11TempTooColdv+0xe2>
    1d04:	70 2d       	mov	r23, r0
    1d06:	89 87       	std	Y+9, r24	; 0x09
    1d08:	9a 87       	std	Y+10, r25	; 0x0a
    1d0a:	ab 87       	std	Y+11, r26	; 0x0b
    1d0c:	bc 87       	std	Y+12, r27	; 0x0c
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    1d0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d10:	8b 30       	cpi	r24, 0x0B	; 11
    1d12:	41 f4       	brne	.+16     	; 0x1d24 <_Z11TempTooColdv+0x10e>
    1d14:	88 e8       	ldi	r24, 0x88	; 136
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	29 85       	ldd	r18, Y+9	; 0x09
    1d1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	31 83       	std	Z+1, r19	; 0x01
    1d20:	20 83       	st	Z, r18
    1d22:	15 c0       	rjmp	.+42     	; 0x1d4e <_Z11TempTooColdv+0x138>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	8c 30       	cpi	r24, 0x0C	; 12
    1d28:	41 f4       	brne	.+16     	; 0x1d3a <_Z11TempTooColdv+0x124>
    1d2a:	8a e8       	ldi	r24, 0x8A	; 138
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	29 85       	ldd	r18, Y+9	; 0x09
    1d30:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d32:	fc 01       	movw	r30, r24
    1d34:	31 83       	std	Z+1, r19	; 0x01
    1d36:	20 83       	st	Z, r18
    1d38:	0a c0       	rjmp	.+20     	; 0x1d4e <_Z11TempTooColdv+0x138>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    1d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3c:	8d 30       	cpi	r24, 0x0D	; 13
    1d3e:	39 f4       	brne	.+14     	; 0x1d4e <_Z11TempTooColdv+0x138>
    1d40:	8c e8       	ldi	r24, 0x8C	; 140
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	29 85       	ldd	r18, Y+9	; 0x09
    1d46:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d48:	fc 01       	movw	r30, r24
    1d4a:	31 83       	std	Z+1, r19	; 0x01
    1d4c:	20 83       	st	Z, r18
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1d4e:	81 e8       	ldi	r24, 0x81	; 129
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
    1d56:	20 61       	ori	r18, 0x10	; 16
    1d58:	fc 01       	movw	r30, r24
    1d5a:	20 83       	st	Z, r18
	return;
    1d5c:	00 00       	nop
}
    1d5e:	2c 96       	adiw	r28, 0x0c	; 12
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <_Z10TempTooHotv>:

void TempTooHot()
{
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	2c 97       	sbiw	r28, 0x0c	; 12
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
	Timer1.pwm(moter, (1023 / 100) * 100);
    1d84:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <moter>
    1d88:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <moter+0x1>
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	88 ee       	ldi	r24, 0xE8	; 232
    1d90:	93 e0       	ldi	r25, 0x03	; 3
    1d92:	9b 83       	std	Y+3, r25	; 0x03
    1d94:	8a 83       	std	Y+2, r24	; 0x02
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	8b 30       	cpi	r24, 0x0B	; 11
    1d9a:	71 f4       	brne	.+28     	; 0x1db8 <_Z10TempTooHotv+0x48>
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	8b e0       	ldi	r24, 0x0B	; 11
    1da0:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    1da4:	80 e8       	ldi	r24, 0x80	; 128
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	20 e8       	ldi	r18, 0x80	; 128
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	f9 01       	movw	r30, r18
    1dae:	20 81       	ld	r18, Z
    1db0:	20 68       	ori	r18, 0x80	; 128
    1db2:	fc 01       	movw	r30, r24
    1db4:	20 83       	st	Z, r18
    1db6:	21 c0       	rjmp	.+66     	; 0x1dfa <_Z10TempTooHotv+0x8a>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	8c 30       	cpi	r24, 0x0C	; 12
    1dbc:	71 f4       	brne	.+28     	; 0x1dda <_Z10TempTooHotv+0x6a>
    1dbe:	61 e0       	ldi	r22, 0x01	; 1
    1dc0:	8c e0       	ldi	r24, 0x0C	; 12
    1dc2:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    1dc6:	80 e8       	ldi	r24, 0x80	; 128
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	20 e8       	ldi	r18, 0x80	; 128
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	f9 01       	movw	r30, r18
    1dd0:	20 81       	ld	r18, Z
    1dd2:	20 62       	ori	r18, 0x20	; 32
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	20 83       	st	Z, r18
    1dd8:	10 c0       	rjmp	.+32     	; 0x1dfa <_Z10TempTooHotv+0x8a>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	8d 30       	cpi	r24, 0x0D	; 13
    1dde:	69 f4       	brne	.+26     	; 0x1dfa <_Z10TempTooHotv+0x8a>
    1de0:	61 e0       	ldi	r22, 0x01	; 1
    1de2:	8d e0       	ldi	r24, 0x0D	; 13
    1de4:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    1de8:	80 e8       	ldi	r24, 0x80	; 128
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	20 e8       	ldi	r18, 0x80	; 128
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	f9 01       	movw	r30, r18
    1df2:	20 81       	ld	r18, Z
    1df4:	28 60       	ori	r18, 0x08	; 8
    1df6:	fc 01       	movw	r30, r24
    1df8:	20 83       	st	Z, r18
    1dfa:	8b ef       	ldi	r24, 0xFB	; 251
    1dfc:	94 e0       	ldi	r25, 0x04	; 4
    1dfe:	9d 83       	std	Y+5, r25	; 0x05
    1e00:	8c 83       	std	Y+4, r24	; 0x04
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	8e 83       	std	Y+6, r24	; 0x06
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0a:	98 87       	std	Y+8, r25	; 0x08
    1e0c:	8f 83       	std	Y+7, r24	; 0x07

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    1e0e:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
    1e12:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    1e16:	cc 01       	movw	r24, r24
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	89 87       	std	Y+9, r24	; 0x09
    1e1e:	9a 87       	std	Y+10, r25	; 0x0a
    1e20:	ab 87       	std	Y+11, r26	; 0x0b
    1e22:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle *= duty;
    1e24:	8f 81       	ldd	r24, Y+7	; 0x07
    1e26:	98 85       	ldd	r25, Y+8	; 0x08
    1e28:	cc 01       	movw	r24, r24
    1e2a:	a0 e0       	ldi	r26, 0x00	; 0
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	29 85       	ldd	r18, Y+9	; 0x09
    1e30:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e32:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e34:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 00 63 	call	0xc600	; 0xc600 <__mulsi3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	89 87       	std	Y+9, r24	; 0x09
    1e44:	9a 87       	std	Y+10, r25	; 0x0a
    1e46:	ab 87       	std	Y+11, r26	; 0x0b
    1e48:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle >>= 10;
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e50:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e52:	07 2e       	mov	r0, r23
    1e54:	7a e0       	ldi	r23, 0x0A	; 10
    1e56:	b6 95       	lsr	r27
    1e58:	a7 95       	ror	r26
    1e5a:	97 95       	ror	r25
    1e5c:	87 95       	ror	r24
    1e5e:	7a 95       	dec	r23
    1e60:	d1 f7       	brne	.-12     	; 0x1e56 <_Z10TempTooHotv+0xe6>
    1e62:	70 2d       	mov	r23, r0
    1e64:	89 87       	std	Y+9, r24	; 0x09
    1e66:	9a 87       	std	Y+10, r25	; 0x0a
    1e68:	ab 87       	std	Y+11, r26	; 0x0b
    1e6a:	bc 87       	std	Y+12, r27	; 0x0c
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    1e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6e:	8b 30       	cpi	r24, 0x0B	; 11
    1e70:	41 f4       	brne	.+16     	; 0x1e82 <_Z10TempTooHotv+0x112>
    1e72:	88 e8       	ldi	r24, 0x88	; 136
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	29 85       	ldd	r18, Y+9	; 0x09
    1e78:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	31 83       	std	Z+1, r19	; 0x01
    1e7e:	20 83       	st	Z, r18
    1e80:	15 c0       	rjmp	.+42     	; 0x1eac <_Z10TempTooHotv+0x13c>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    1e82:	8e 81       	ldd	r24, Y+6	; 0x06
    1e84:	8c 30       	cpi	r24, 0x0C	; 12
    1e86:	41 f4       	brne	.+16     	; 0x1e98 <_Z10TempTooHotv+0x128>
    1e88:	8a e8       	ldi	r24, 0x8A	; 138
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	29 85       	ldd	r18, Y+9	; 0x09
    1e8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e90:	fc 01       	movw	r30, r24
    1e92:	31 83       	std	Z+1, r19	; 0x01
    1e94:	20 83       	st	Z, r18
    1e96:	0a c0       	rjmp	.+20     	; 0x1eac <_Z10TempTooHotv+0x13c>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    1e98:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9a:	8d 30       	cpi	r24, 0x0D	; 13
    1e9c:	39 f4       	brne	.+14     	; 0x1eac <_Z10TempTooHotv+0x13c>
    1e9e:	8c e8       	ldi	r24, 0x8C	; 140
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	29 85       	ldd	r18, Y+9	; 0x09
    1ea4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	31 83       	std	Z+1, r19	; 0x01
    1eaa:	20 83       	st	Z, r18
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1eac:	81 e8       	ldi	r24, 0x81	; 129
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
    1eb4:	20 61       	ori	r18, 0x10	; 16
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	20 83       	st	Z, r18
	return;
    1eba:	00 00       	nop
}
    1ebc:	2c 96       	adiw	r28, 0x0c	; 12
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	08 95       	ret

00001ece <_Z11TempPerfektv>:

void TempPerfekt()
{
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
	Timer1.pwm(moter, (1023 / 100) * 50);
    1ee2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <moter>
    1ee6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <moter+0x1>
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	84 ef       	ldi	r24, 0xF4	; 244
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	9b 83       	std	Y+3, r25	; 0x03
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	8b 30       	cpi	r24, 0x0B	; 11
    1ef8:	71 f4       	brne	.+28     	; 0x1f16 <_Z11TempPerfektv+0x48>
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	8b e0       	ldi	r24, 0x0B	; 11
    1efe:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    1f02:	80 e8       	ldi	r24, 0x80	; 128
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	20 e8       	ldi	r18, 0x80	; 128
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	20 81       	ld	r18, Z
    1f0e:	20 68       	ori	r18, 0x80	; 128
    1f10:	fc 01       	movw	r30, r24
    1f12:	20 83       	st	Z, r18
    1f14:	21 c0       	rjmp	.+66     	; 0x1f58 <_Z11TempPerfektv+0x8a>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	8c 30       	cpi	r24, 0x0C	; 12
    1f1a:	71 f4       	brne	.+28     	; 0x1f38 <_Z11TempPerfektv+0x6a>
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	8c e0       	ldi	r24, 0x0C	; 12
    1f20:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    1f24:	80 e8       	ldi	r24, 0x80	; 128
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	20 e8       	ldi	r18, 0x80	; 128
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	20 81       	ld	r18, Z
    1f30:	20 62       	ori	r18, 0x20	; 32
    1f32:	fc 01       	movw	r30, r24
    1f34:	20 83       	st	Z, r18
    1f36:	10 c0       	rjmp	.+32     	; 0x1f58 <_Z11TempPerfektv+0x8a>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	8d 30       	cpi	r24, 0x0D	; 13
    1f3c:	69 f4       	brne	.+26     	; 0x1f58 <_Z11TempPerfektv+0x8a>
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	8d e0       	ldi	r24, 0x0D	; 13
    1f42:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    1f46:	80 e8       	ldi	r24, 0x80	; 128
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	20 e8       	ldi	r18, 0x80	; 128
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	f9 01       	movw	r30, r18
    1f50:	20 81       	ld	r18, Z
    1f52:	28 60       	ori	r18, 0x08	; 8
    1f54:	fc 01       	movw	r30, r24
    1f56:	20 83       	st	Z, r18
    1f58:	8b ef       	ldi	r24, 0xFB	; 251
    1f5a:	94 e0       	ldi	r25, 0x04	; 4
    1f5c:	9d 83       	std	Y+5, r25	; 0x05
    1f5e:	8c 83       	std	Y+4, r24	; 0x04
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	8e 83       	std	Y+6, r24	; 0x06
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	98 87       	std	Y+8, r25	; 0x08
    1f6a:	8f 83       	std	Y+7, r24	; 0x07

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    1f6c:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8TimerOne9pwmPeriodE>
    1f70:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <_ZN8TimerOne9pwmPeriodE+0x1>
    1f74:	cc 01       	movw	r24, r24
    1f76:	a0 e0       	ldi	r26, 0x00	; 0
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	89 87       	std	Y+9, r24	; 0x09
    1f7c:	9a 87       	std	Y+10, r25	; 0x0a
    1f7e:	ab 87       	std	Y+11, r26	; 0x0b
    1f80:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle *= duty;
    1f82:	8f 81       	ldd	r24, Y+7	; 0x07
    1f84:	98 85       	ldd	r25, Y+8	; 0x08
    1f86:	cc 01       	movw	r24, r24
    1f88:	a0 e0       	ldi	r26, 0x00	; 0
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	29 85       	ldd	r18, Y+9	; 0x09
    1f8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f90:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f92:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	0e 94 00 63 	call	0xc600	; 0xc600 <__mulsi3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	89 87       	std	Y+9, r24	; 0x09
    1fa2:	9a 87       	std	Y+10, r25	; 0x0a
    1fa4:	ab 87       	std	Y+11, r26	; 0x0b
    1fa6:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle >>= 10;
    1fa8:	89 85       	ldd	r24, Y+9	; 0x09
    1faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fac:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fae:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fb0:	07 2e       	mov	r0, r23
    1fb2:	7a e0       	ldi	r23, 0x0A	; 10
    1fb4:	b6 95       	lsr	r27
    1fb6:	a7 95       	ror	r26
    1fb8:	97 95       	ror	r25
    1fba:	87 95       	ror	r24
    1fbc:	7a 95       	dec	r23
    1fbe:	d1 f7       	brne	.-12     	; 0x1fb4 <_Z11TempPerfektv+0xe6>
    1fc0:	70 2d       	mov	r23, r0
    1fc2:	89 87       	std	Y+9, r24	; 0x09
    1fc4:	9a 87       	std	Y+10, r25	; 0x0a
    1fc6:	ab 87       	std	Y+11, r26	; 0x0b
    1fc8:	bc 87       	std	Y+12, r27	; 0x0c
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    1fca:	8e 81       	ldd	r24, Y+6	; 0x06
    1fcc:	8b 30       	cpi	r24, 0x0B	; 11
    1fce:	41 f4       	brne	.+16     	; 0x1fe0 <_Z11TempPerfektv+0x112>
    1fd0:	88 e8       	ldi	r24, 0x88	; 136
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	29 85       	ldd	r18, Y+9	; 0x09
    1fd6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fd8:	fc 01       	movw	r30, r24
    1fda:	31 83       	std	Z+1, r19	; 0x01
    1fdc:	20 83       	st	Z, r18
    1fde:	15 c0       	rjmp	.+42     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    1fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe2:	8c 30       	cpi	r24, 0x0C	; 12
    1fe4:	41 f4       	brne	.+16     	; 0x1ff6 <_Z11TempPerfektv+0x128>
    1fe6:	8a e8       	ldi	r24, 0x8A	; 138
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	29 85       	ldd	r18, Y+9	; 0x09
    1fec:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fee:	fc 01       	movw	r30, r24
    1ff0:	31 83       	std	Z+1, r19	; 0x01
    1ff2:	20 83       	st	Z, r18
    1ff4:	0a c0       	rjmp	.+20     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    1ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff8:	8d 30       	cpi	r24, 0x0D	; 13
    1ffa:	39 f4       	brne	.+14     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1ffc:	8c e8       	ldi	r24, 0x8C	; 140
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	29 85       	ldd	r18, Y+9	; 0x09
    2002:	3a 85       	ldd	r19, Y+10	; 0x0a
    2004:	fc 01       	movw	r30, r24
    2006:	31 83       	std	Z+1, r19	; 0x01
    2008:	20 83       	st	Z, r18
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    200a:	81 e8       	ldi	r24, 0x81	; 129
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <_ZN8TimerOne15clockSelectBitsE>
    2012:	20 61       	ori	r18, 0x10	; 16
    2014:	fc 01       	movw	r30, r24
    2016:	20 83       	st	Z, r18
	return;
    2018:	00 00       	nop
    201a:	2c 96       	adiw	r28, 0x0c	; 12
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	08 95       	ret

0000202c <_ZN6StringpLERKS_>:
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	00 d0       	rcall	.+0      	; 0x2032 <_ZN6StringpLERKS_+0x6>
    2032:	1f 92       	push	r1
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	7c 83       	std	Y+4, r23	; 0x04
    203e:	6b 83       	std	Y+3, r22	; 0x03
    2040:	2b 81       	ldd	r18, Y+3	; 0x03
    2042:	3c 81       	ldd	r19, Y+4	; 0x04
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	b9 01       	movw	r22, r18
    204a:	0e 94 96 62 	call	0xc52c	; 0xc52c <_ZN6String6concatERKS_>
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	08 95       	ret

00002060 <_ZN6StringpLEPKc>:
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	00 d0       	rcall	.+0      	; 0x2066 <_ZN6StringpLEPKc+0x6>
    2066:	1f 92       	push	r1
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	7c 83       	std	Y+4, r23	; 0x04
    2072:	6b 83       	std	Y+3, r22	; 0x03
    2074:	2b 81       	ldd	r18, Y+3	; 0x03
    2076:	3c 81       	ldd	r19, Y+4	; 0x04
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	b9 01       	movw	r22, r18
    207e:	0e 94 9c 62 	call	0xc538	; 0xc538 <_ZN6String6concatEPKc>
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	08 95       	ret

00002094 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	00 d0       	rcall	.+0      	; 0x209a <_ZNK6StringeqERKS_+0x6>
    209a:	1f 92       	push	r1
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	7c 83       	std	Y+4, r23	; 0x04
    20a6:	6b 83       	std	Y+3, r22	; 0x03
    20a8:	2b 81       	ldd	r18, Y+3	; 0x03
    20aa:	3c 81       	ldd	r19, Y+4	; 0x04
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	b9 01       	movw	r22, r18
    20b2:	0e 94 d9 62 	call	0xc5b2	; 0xc5b2 <_ZNK6String6equalsERKS_>
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	08 95       	ret

000020c4 <_ZNK6StringneERKS_>:
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <_ZNK6StringneERKS_+0x6>
    20ca:	1f 92       	push	r1
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	7c 83       	std	Y+4, r23	; 0x04
    20d6:	6b 83       	std	Y+3, r22	; 0x03
    20d8:	2b 81       	ldd	r18, Y+3	; 0x03
    20da:	3c 81       	ldd	r19, Y+4	; 0x04
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	b9 01       	movw	r22, r18
    20e2:	0e 94 d9 62 	call	0xc5b2	; 0xc5b2 <_ZNK6String6equalsERKS_>
    20e6:	98 2f       	mov	r25, r24
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	99 23       	and	r25, r25
    20ec:	09 f0       	breq	.+2      	; 0x20f0 <_ZNK6StringneERKS_+0x2c>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	08 95       	ret

000020fe <_Z7ReadUIDv>:

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;

String ReadUID()
{
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	29 97       	sbiw	r28, 0x09	; 9
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	99 87       	std	Y+9, r25	; 0x09
    2114:	88 87       	std	Y+8, r24	; 0x08
	String UID;
    2116:	88 85       	ldd	r24, Y+8	; 0x08
    2118:	99 85       	ldd	r25, Y+9	; 0x09
    211a:	69 e6       	ldi	r22, 0x69	; 105
    211c:	72 e0       	ldi	r23, 0x02	; 2
    211e:	0e 94 f9 61 	call	0xc3f2	; 0xc3f2 <_ZN6StringC1EPKc>
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    2122:	19 82       	std	Y+1, r1	; 0x01
    2124:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <mfrc522+0x2>
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	89 17       	cp	r24, r25
    212c:	78 f5       	brcc	.+94     	; 0x218c <_Z7ReadUIDv+0x8e>
		UID += mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ";
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	8e 5a       	subi	r24, 0xAE	; 174
    2136:	9b 4f       	sbci	r25, 0xFB	; 251
    2138:	fc 01       	movw	r30, r24
    213a:	80 81       	ld	r24, Z
    213c:	80 31       	cpi	r24, 0x10	; 16
    213e:	18 f4       	brcc	.+6      	; 0x2146 <_Z7ReadUIDv+0x48>
    2140:	8a e6       	ldi	r24, 0x6A	; 106
    2142:	92 e0       	ldi	r25, 0x02	; 2
    2144:	02 c0       	rjmp	.+4      	; 0x214a <_Z7ReadUIDv+0x4c>
    2146:	8d e6       	ldi	r24, 0x6D	; 109
    2148:	92 e0       	ldi	r25, 0x02	; 2
    214a:	28 85       	ldd	r18, Y+8	; 0x08
    214c:	39 85       	ldd	r19, Y+9	; 0x09
    214e:	bc 01       	movw	r22, r24
    2150:	c9 01       	movw	r24, r18
    2152:	86 df       	rcall	.-244    	; 0x2060 <_ZN6StringpLEPKc>
		UID += String (mfrc522.uid.uidByte[i], HEX);
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	88 2f       	mov	r24, r24
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	8e 5a       	subi	r24, 0xAE	; 174
    215c:	9b 4f       	sbci	r25, 0xFB	; 251
    215e:	fc 01       	movw	r30, r24
    2160:	20 81       	ld	r18, Z
    2162:	ce 01       	movw	r24, r28
    2164:	02 96       	adiw	r24, 0x02	; 2
    2166:	40 e1       	ldi	r20, 0x10	; 16
    2168:	62 2f       	mov	r22, r18
    216a:	0e 94 3f 62 	call	0xc47e	; 0xc47e <_ZN6StringC1Ehh>
    216e:	9e 01       	movw	r18, r28
    2170:	2e 5f       	subi	r18, 0xFE	; 254
    2172:	3f 4f       	sbci	r19, 0xFF	; 255
    2174:	88 85       	ldd	r24, Y+8	; 0x08
    2176:	99 85       	ldd	r25, Y+9	; 0x09
    2178:	b9 01       	movw	r22, r18
    217a:	58 df       	rcall	.-336    	; 0x202c <_ZN6StringpLERKS_>
    217c:	ce 01       	movw	r24, r28
    217e:	02 96       	adiw	r24, 0x02	; 2
    2180:	0e 94 8f 61 	call	0xc31e	; 0xc31e <_ZN6StringD1Ev>
MFRC522::MIFARE_Key key;

String ReadUID()
{
	String UID;
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	8f 5f       	subi	r24, 0xFF	; 255
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	cc cf       	rjmp	.-104    	; 0x2124 <_Z7ReadUIDv+0x26>
		UID += mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ";
		UID += String (mfrc522.uid.uidByte[i], HEX);
	}
	UID.toUpperCase();
    218c:	88 85       	ldd	r24, Y+8	; 0x08
    218e:	99 85       	ldd	r25, Y+9	; 0x09
    2190:	0e 94 e9 62 	call	0xc5d2	; 0xc5d2 <_ZN6String11toUpperCaseEv>
	return UID ;
    2194:	00 00       	nop

}
    2196:	88 85       	ldd	r24, Y+8	; 0x08
    2198:	99 85       	ldd	r25, Y+9	; 0x09
    219a:	29 96       	adiw	r28, 0x09	; 9
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	08 95       	ret

000021ac <_Z12CheckKeyCard6StringPb>:

void CheckKeyCard(String UID, bool *Keycard)
{
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	2a 97       	sbiw	r28, 0x0a	; 10
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	98 87       	std	Y+8, r25	; 0x08
    21c2:	8f 83       	std	Y+7, r24	; 0x07
    21c4:	7a 87       	std	Y+10, r23	; 0x0a
    21c6:	69 87       	std	Y+9, r22	; 0x09
	String UnlogKey = " 30 45 66 A7";
    21c8:	6f e6       	ldi	r22, 0x6F	; 111
    21ca:	72 e0       	ldi	r23, 0x02	; 2
    21cc:	ce 01       	movw	r24, r28
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	0e 94 f9 61 	call	0xc3f2	; 0xc3f2 <_ZN6StringC1EPKc>
	if (UID	== UnlogKey)
    21d4:	8f 81       	ldd	r24, Y+7	; 0x07
    21d6:	98 85       	ldd	r25, Y+8	; 0x08
    21d8:	9e 01       	movw	r18, r28
    21da:	2f 5f       	subi	r18, 0xFF	; 255
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	b9 01       	movw	r22, r18
    21e0:	59 df       	rcall	.-334    	; 0x2094 <_ZNK6StringeqERKS_>
    21e2:	98 2f       	mov	r25, r24
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	99 23       	and	r25, r25
    21e8:	09 f4       	brne	.+2      	; 0x21ec <_Z12CheckKeyCard6StringPb+0x40>
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	88 23       	and	r24, r24
    21ee:	61 f0       	breq	.+24     	; 0x2208 <__stack+0x9>
	{
		*Keycard = true;
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	21 e0       	ldi	r18, 0x01	; 1
    21f6:	fc 01       	movw	r30, r24
    21f8:	20 83       	st	Z, r18
		Serial.println("Welcome Home");
    21fa:	6c e7       	ldi	r22, 0x7C	; 124
    21fc:	72 e0       	ldi	r23, 0x02	; 2
    21fe:	8d ec       	ldi	r24, 0xCD	; 205
    2200:	95 e0       	ldi	r25, 0x05	; 5
    2202:	0e 94 90 5c 	call	0xb920	; 0xb920 <_ZN5Print7printlnEPKc>
    2206:	18 c0       	rjmp	.+48     	; 0x2238 <__stack+0x39>
	}
	else if (UID != UnlogKey)
    2208:	8f 81       	ldd	r24, Y+7	; 0x07
    220a:	98 85       	ldd	r25, Y+8	; 0x08
    220c:	9e 01       	movw	r18, r28
    220e:	2f 5f       	subi	r18, 0xFF	; 255
    2210:	3f 4f       	sbci	r19, 0xFF	; 255
    2212:	b9 01       	movw	r22, r18
    2214:	57 df       	rcall	.-338    	; 0x20c4 <_ZNK6StringneERKS_>
    2216:	98 2f       	mov	r25, r24
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	99 23       	and	r25, r25
    221c:	09 f4       	brne	.+2      	; 0x2220 <__stack+0x21>
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	88 23       	and	r24, r24
    2222:	51 f0       	breq	.+20     	; 0x2238 <__stack+0x39>
	{
		*Keycard = false;
    2224:	89 85       	ldd	r24, Y+9	; 0x09
    2226:	9a 85       	ldd	r25, Y+10	; 0x0a
    2228:	fc 01       	movw	r30, r24
    222a:	10 82       	st	Z, r1
		Serial.println("Access denied");
    222c:	69 e8       	ldi	r22, 0x89	; 137
    222e:	72 e0       	ldi	r23, 0x02	; 2
    2230:	8d ec       	ldi	r24, 0xCD	; 205
    2232:	95 e0       	ldi	r25, 0x05	; 5
    2234:	0e 94 90 5c 	call	0xb920	; 0xb920 <_ZN5Print7printlnEPKc>

}

void CheckKeyCard(String UID, bool *Keycard)
{
	String UnlogKey = " 30 45 66 A7";
    2238:	ce 01       	movw	r24, r28
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	0e 94 8f 61 	call	0xc31e	; 0xc31e <_ZN6StringD1Ev>
		*Keycard = false;
		Serial.println("Access denied");
		
	}

}
    2240:	00 00       	nop
    2242:	2a 96       	adiw	r28, 0x0a	; 10
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <_Z41__static_initialization_and_destruction_0ii>:
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	00 d0       	rcall	.+0      	; 0x225a <_Z41__static_initialization_and_destruction_0ii+0x6>
    225a:	1f 92       	push	r1
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	7c 83       	std	Y+4, r23	; 0x04
    2266:	6b 83       	std	Y+3, r22	; 0x03
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	51 f4       	brne	.+20     	; 0x2284 <_Z41__static_initialization_and_destruction_0ii+0x30>
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	31 f4       	brne	.+12     	; 0x2284 <_Z41__static_initialization_and_destruction_0ii+0x30>
#include "KeyCardAccess.h"

MFRC522 mfrc522(SS_PIN, RST_PIN);
    2278:	45 e0       	ldi	r20, 0x05	; 5
    227a:	65 e3       	ldi	r22, 0x35	; 53
    227c:	8f e4       	ldi	r24, 0x4F	; 79
    227e:	94 e0       	ldi	r25, 0x04	; 4
    2280:	0e 94 d5 42 	call	0x85aa	; 0x85aa <_ZN7MFRC522C1Ehh>
		*Keycard = false;
		Serial.println("Access denied");
		
	}

}
    2284:	00 00       	nop
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	08 95       	ret

00002294 <_GLOBAL__sub_I_mfrc522>:
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	6f ef       	ldi	r22, 0xFF	; 255
    229e:	7f ef       	ldi	r23, 0xFF	; 255
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	d7 df       	rcall	.-82     	; 0x2254 <_Z41__static_initialization_and_destruction_0ii>
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <_Z8SetServoi>:
Servo myservo; // create servo object to control a servo
int val = 50;


void SetServo(int cm)
{
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	1f 92       	push	r1
    22b2:	1f 92       	push	r1
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
	if (cm < val)
    22bc:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <val>
    22c0:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <val+0x1>
    22c4:	29 81       	ldd	r18, Y+1	; 0x01
    22c6:	3a 81       	ldd	r19, Y+2	; 0x02
    22c8:	28 17       	cp	r18, r24
    22ca:	39 07       	cpc	r19, r25
    22cc:	44 f4       	brge	.+16     	; 0x22de <_Z8SetServoi+0x32>
	{
		myservo.write(cm); // cm bliver brugt til graderne af servoen
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	9a 81       	ldd	r25, Y+2	; 0x02
    22d2:	bc 01       	movw	r22, r24
    22d4:	8f e5       	ldi	r24, 0x5F	; 95
    22d6:	94 e0       	ldi	r25, 0x04	; 4
    22d8:	0e 94 88 4e 	call	0x9d10	; 0x9d10 <_ZN5Servo5writeEi>
	}
	else
	{
		myservo.write(90);
	}
}
    22dc:	06 c0       	rjmp	.+12     	; 0x22ea <_Z8SetServoi+0x3e>
	{
		myservo.write(cm); // cm bliver brugt til graderne af servoen
	}
	else
	{
		myservo.write(90);
    22de:	6a e5       	ldi	r22, 0x5A	; 90
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	8f e5       	ldi	r24, 0x5F	; 95
    22e4:	94 e0       	ldi	r25, 0x04	; 4
    22e6:	0e 94 88 4e 	call	0x9d10	; 0x9d10 <_ZN5Servo5writeEi>
	}
}
    22ea:	00 00       	nop
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	08 95       	ret

000022f6 <_Z41__static_initialization_and_destruction_0ii>:
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <_Z41__static_initialization_and_destruction_0ii+0x6>
    22fc:	1f 92       	push	r1
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	7c 83       	std	Y+4, r23	; 0x04
    2308:	6b 83       	std	Y+3, r22	; 0x03
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	41 f4       	brne	.+16     	; 0x2322 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	21 f4       	brne	.+8      	; 0x2322 <_Z41__static_initialization_and_destruction_0ii+0x2c>
#include "Servos.h"

Servo myservo; // create servo object to control a servo
    231a:	8f e5       	ldi	r24, 0x5F	; 95
    231c:	94 e0       	ldi	r25, 0x04	; 4
    231e:	0e 94 a9 4d 	call	0x9b52	; 0x9b52 <_ZN5ServoC1Ev>
	}
	else
	{
		myservo.write(90);
	}
}
    2322:	00 00       	nop
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	08 95       	ret

00002332 <_GLOBAL__sub_I_myservo>:
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	6f ef       	ldi	r22, 0xFF	; 255
    233c:	7f ef       	ldi	r23, 0xFF	; 255
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	d9 df       	rcall	.-78     	; 0x22f6 <_Z41__static_initialization_and_destruction_0ii>
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <_ZN11SPISettingsC1Emhh>:
      SPDR = out;
      *p++ = in;
    }
    while (!(SPSR & _BV(SPIF))) ;
    *p = SPDR;
  }
    234a:	0f 93       	push	r16
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	28 97       	sbiw	r28, 0x08	; 8
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	4b 83       	std	Y+3, r20	; 0x03
    2366:	5c 83       	std	Y+4, r21	; 0x04
    2368:	6d 83       	std	Y+5, r22	; 0x05
    236a:	7e 83       	std	Y+6, r23	; 0x06
    236c:	2f 83       	std	Y+7, r18	; 0x07
    236e:	08 87       	std	Y+8, r16	; 0x08
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	ad 81       	ldd	r26, Y+5	; 0x05
    2376:	be 81       	ldd	r27, Y+6	; 0x06
    2378:	e9 81       	ldd	r30, Y+1	; 0x01
    237a:	fa 81       	ldd	r31, Y+2	; 0x02
    237c:	08 85       	ldd	r16, Y+8	; 0x08
    237e:	2f 81       	ldd	r18, Y+7	; 0x07
    2380:	ac 01       	movw	r20, r24
    2382:	bd 01       	movw	r22, r26
    2384:	cf 01       	movw	r24, r30
    2386:	0b d0       	rcall	.+22     	; 0x239e <_ZN11SPISettings16init_MightInlineEmhh>
    2388:	00 00       	nop
    238a:	28 96       	adiw	r28, 0x08	; 8
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	0f 91       	pop	r16
    239c:	08 95       	ret

0000239e <_ZN11SPISettings16init_MightInlineEmhh>:
  }
  SPISettings() {
    init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0);
  }
private:
  void init_MightInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    239e:	0f 93       	push	r16
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	65 97       	sbiw	r28, 0x15	; 21
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	9f 87       	std	Y+15, r25	; 0x0f
    23b6:	8e 87       	std	Y+14, r24	; 0x0e
    23b8:	48 8b       	std	Y+16, r20	; 0x10
    23ba:	59 8b       	std	Y+17, r21	; 0x11
    23bc:	6a 8b       	std	Y+18, r22	; 0x12
    23be:	7b 8b       	std	Y+19, r23	; 0x13
    23c0:	2c 8b       	std	Y+20, r18	; 0x14
    23c2:	0d 8b       	std	Y+21, r16	; 0x15
    23c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	88 89       	ldd	r24, Y+16	; 0x10
    23ce:	99 89       	ldd	r25, Y+17	; 0x11
    23d0:	aa 89       	ldd	r26, Y+18	; 0x12
    23d2:	bb 89       	ldd	r27, Y+19	; 0x13
    23d4:	8b 83       	std	Y+3, r24	; 0x03
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	ad 83       	std	Y+5, r26	; 0x05
    23da:	be 83       	std	Y+6, r27	; 0x06
    23dc:	8c 89       	ldd	r24, Y+20	; 0x14
    23de:	8f 83       	std	Y+7, r24	; 0x07
    23e0:	8d 89       	ldd	r24, Y+21	; 0x15
    23e2:	88 87       	std	Y+8, r24	; 0x08
        clockDiv = 5;
      } else {
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	92 e1       	ldi	r25, 0x12	; 18
    23e8:	aa e7       	ldi	r26, 0x7A	; 122
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	89 87       	std	Y+9, r24	; 0x09
    23ee:	9a 87       	std	Y+10, r25	; 0x0a
    23f0:	ab 87       	std	Y+11, r26	; 0x0b
    23f2:	bc 87       	std	Y+12, r27	; 0x0c
      clockDiv = 0;
    23f4:	1d 86       	std	Y+13, r1	; 0x0d
      while (clockDiv < 6 && clock < clockSetting) {
    23f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f8:	86 30       	cpi	r24, 0x06	; 6
    23fa:	e8 f4       	brcc	.+58     	; 0x2436 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    23fc:	2b 81       	ldd	r18, Y+3	; 0x03
    23fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2400:	4d 81       	ldd	r20, Y+5	; 0x05
    2402:	5e 81       	ldd	r21, Y+6	; 0x06
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	ab 85       	ldd	r26, Y+11	; 0x0b
    240a:	bc 85       	ldd	r27, Y+12	; 0x0c
    240c:	28 17       	cp	r18, r24
    240e:	39 07       	cpc	r19, r25
    2410:	4a 07       	cpc	r20, r26
    2412:	5b 07       	cpc	r21, r27
    2414:	80 f4       	brcc	.+32     	; 0x2436 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
        clockSetting /= 2;
    2416:	89 85       	ldd	r24, Y+9	; 0x09
    2418:	9a 85       	ldd	r25, Y+10	; 0x0a
    241a:	ab 85       	ldd	r26, Y+11	; 0x0b
    241c:	bc 85       	ldd	r27, Y+12	; 0x0c
    241e:	b6 95       	lsr	r27
    2420:	a7 95       	ror	r26
    2422:	97 95       	ror	r25
    2424:	87 95       	ror	r24
    2426:	89 87       	std	Y+9, r24	; 0x09
    2428:	9a 87       	std	Y+10, r25	; 0x0a
    242a:	ab 87       	std	Y+11, r26	; 0x0b
    242c:	bc 87       	std	Y+12, r27	; 0x0c
        clockDiv++;
    242e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2430:	8f 5f       	subi	r24, 0xFF	; 255
    2432:	8d 87       	std	Y+13, r24	; 0x0d
    2434:	e0 cf       	rjmp	.-64     	; 0x23f6 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    2436:	8d 85       	ldd	r24, Y+13	; 0x0d
    2438:	86 30       	cpi	r24, 0x06	; 6
    243a:	11 f4       	brne	.+4      	; 0x2440 <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    clockDiv = 7;
    243c:	87 e0       	ldi	r24, 0x07	; 7
    243e:	8d 87       	std	Y+13, r24	; 0x0d

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    2440:	9d 85       	ldd	r25, Y+13	; 0x0d
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	89 27       	eor	r24, r25
    2446:	8d 87       	std	Y+13, r24	; 0x0d

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    2448:	8f 81       	ldd	r24, Y+7	; 0x07
    244a:	88 23       	and	r24, r24
    244c:	11 f4       	brne	.+4      	; 0x2452 <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    244e:	80 e7       	ldi	r24, 0x70	; 112
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    2452:	80 e5       	ldi	r24, 0x50	; 80
    2454:	98 85       	ldd	r25, Y+8	; 0x08
    2456:	9c 70       	andi	r25, 0x0C	; 12
    2458:	29 2f       	mov	r18, r25
    245a:	28 2b       	or	r18, r24
    245c:	8d 85       	ldd	r24, Y+13	; 0x0d
    245e:	88 2f       	mov	r24, r24
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	95 95       	asr	r25
    2464:	87 95       	ror	r24
    2466:	83 70       	andi	r24, 0x03	; 3
    2468:	82 2b       	or	r24, r18
    246a:	28 2f       	mov	r18, r24
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	fc 01       	movw	r30, r24
    2472:	20 83       	st	Z, r18
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	28 2f       	mov	r18, r24
    2478:	21 70       	andi	r18, 0x01	; 1
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	fc 01       	movw	r30, r24
    2480:	21 83       	std	Z+1, r18	; 0x01
    init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0);
  }
private:
  void init_MightInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }
    2482:	00 00       	nop
    2484:	65 96       	adiw	r28, 0x15	; 21
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	0f 91       	pop	r16
    2496:	08 95       	ret

00002498 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  // https://github.com/arduino/Arduino/pull/2449

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	00 d0       	rcall	.+0      	; 0x249e <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	9b 83       	std	Y+3, r25	; 0x03
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    if (interruptMode > 0) {
    24a6:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_ZN8SPIClass13interruptModeE>
    24aa:	88 23       	and	r24, r24
    24ac:	31 f1       	breq	.+76     	; 0x24fa <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
      uint8_t sreg = SREG;
    24ae:	8f e5       	ldi	r24, 0x5F	; 95
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	fc 01       	movw	r30, r24
    24b4:	80 81       	ld	r24, Z
    24b6:	89 83       	std	Y+1, r24	; 0x01
      noInterrupts();
    24b8:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    24ba:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_ZN8SPIClass13interruptModeE>
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	c9 f4       	brne	.+50     	; 0x24f4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
        interruptSave = SPI_AVR_EIMSK;
    24c2:	8d e3       	ldi	r24, 0x3D	; 61
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	fc 01       	movw	r30, r24
    24c8:	80 81       	ld	r24, Z
    24ca:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    24ce:	8d e3       	ldi	r24, 0x3D	; 61
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	2d e3       	ldi	r18, 0x3D	; 61
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	f9 01       	movw	r30, r18
    24d8:	20 81       	ld	r18, Z
    24da:	32 2f       	mov	r19, r18
    24dc:	20 91 f9 04 	lds	r18, 0x04F9	; 0x8004f9 <_ZN8SPIClass13interruptMaskE>
    24e0:	20 95       	com	r18
    24e2:	23 23       	and	r18, r19
    24e4:	fc 01       	movw	r30, r24
    24e6:	20 83       	st	Z, r18
        SREG = sreg;
    24e8:	8f e5       	ldi	r24, 0x5F	; 95
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	29 81       	ldd	r18, Y+1	; 0x01
    24ee:	fc 01       	movw	r30, r24
    24f0:	20 83       	st	Z, r18
    24f2:	03 c0       	rjmp	.+6      	; 0x24fa <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
      } else
      #endif
      {
        interruptSave = sreg;
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    24fa:	8c e4       	ldi	r24, 0x4C	; 76
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2500:	fc 01       	movw	r30, r24
    2502:	20 83       	st	Z, r18
    SPSR = settings.spsr;
    2504:	8d e4       	ldi	r24, 0x4D	; 77
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	2b 81       	ldd	r18, Y+3	; 0x03
    250a:	fc 01       	movw	r30, r24
    250c:	20 83       	st	Z, r18
  }
    250e:	00 00       	nop
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	08 95       	ret

0000251c <_ZN8SPIClass14endTransactionEv>:
    while (!(SPSR & _BV(SPIF))) ;
    *p = SPDR;
  }
  // After performing a group of transfers and releasing the chip select
  // signal, this function allows others to access the SPI bus
  inline static void endTransaction(void) {
    251c:	cf 93       	push	r28
    251e:	df 93       	push	r29
    2520:	1f 92       	push	r1
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    2526:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_ZN8SPIClass13interruptModeE>
    252a:	88 23       	and	r24, r24
    252c:	e1 f0       	breq	.+56     	; 0x2566 <_ZN8SPIClass14endTransactionEv+0x4a>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    252e:	8f e5       	ldi	r24, 0x5F	; 95
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	fc 01       	movw	r30, r24
    2534:	80 81       	ld	r24, Z
    2536:	89 83       	std	Y+1, r24	; 0x01
      #endif
      noInterrupts();
    2538:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    253a:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_ZN8SPIClass13interruptModeE>
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	61 f4       	brne	.+24     	; 0x255a <_ZN8SPIClass14endTransactionEv+0x3e>
        SPI_AVR_EIMSK = interruptSave;
    2542:	8d e3       	ldi	r24, 0x3D	; 61
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <_ZN8SPIClass13interruptSaveE>
    254a:	fc 01       	movw	r30, r24
    254c:	20 83       	st	Z, r18
        SREG = sreg;
    254e:	8f e5       	ldi	r24, 0x5F	; 95
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	29 81       	ldd	r18, Y+1	; 0x01
    2554:	fc 01       	movw	r30, r24
    2556:	20 83       	st	Z, r18
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    2558:	06 c0       	rjmp	.+12     	; 0x2566 <_ZN8SPIClass14endTransactionEv+0x4a>
        SPI_AVR_EIMSK = interruptSave;
        SREG = sreg;
      } else
      #endif
      {
        SREG = interruptSave;
    255a:	8f e5       	ldi	r24, 0x5F	; 95
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <_ZN8SPIClass13interruptSaveE>
    2562:	fc 01       	movw	r30, r24
    2564:	20 83       	st	Z, r18
      }
    }
  }
    2566:	00 00       	nop
    2568:	0f 90       	pop	r0
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	08 95       	ret

00002570 <_ZN5PrintC1Ev>:
  }
  if (maxy >= miny) {
    *y1 = miny;
    *h = maxy - miny + 1;
  }
}
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	1f 92       	push	r1
    2576:	1f 92       	push	r1
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	2a e5       	ldi	r18, 0x5A	; 90
    2582:	33 e0       	ldi	r19, 0x03	; 3
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	fc 01       	movw	r30, r24
    258a:	31 83       	std	Z+1, r19	; 0x01
    258c:	20 83       	st	Z, r18
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	9a 81       	ldd	r25, Y+2	; 0x02
    2592:	fc 01       	movw	r30, r24
    2594:	13 82       	std	Z+3, r1	; 0x03
    2596:	12 82       	std	Z+2, r1	; 0x02
    2598:	00 00       	nop
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	08 95       	ret

000025a4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	1f 92       	push	r1
    25aa:	1f 92       	push	r1
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	08 95       	ret

000025c2 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	1f 92       	push	r1
    25c8:	1f 92       	push	r1
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	9a 83       	std	Y+2, r25	; 0x02
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	00 00       	nop
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	08 95       	ret

000025de <_ZNK12Adafruit_GFX5widthEv>:
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	1f 92       	push	r1
    25e4:	1f 92       	push	r1
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	fc 01       	movw	r30, r24
    25f4:	80 85       	ldd	r24, Z+8	; 0x08
    25f6:	91 85       	ldd	r25, Z+9	; 0x09
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	08 95       	ret

00002602 <_ZNK12Adafruit_GFX6heightEv>:
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	1f 92       	push	r1
    2608:	1f 92       	push	r1
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	fc 01       	movw	r30, r24
    2618:	82 85       	ldd	r24, Z+10	; 0x0a
    261a:	93 85       	ldd	r25, Z+11	; 0x0b
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	08 95       	ret

00002626 <_ZNK12Adafruit_GFX11getRotationEv>:
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	1f 92       	push	r1
    262c:	1f 92       	push	r1
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	fc 01       	movw	r30, r24
    263c:	86 89       	ldd	r24, Z+22	; 0x16
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	08 95       	ret

00002648 <_Z18pgm_read_glyph_ptrPK7GFXfonth>:
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	27 97       	sbiw	r28, 0x07	; 7
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	9e 83       	std	Y+6, r25	; 0x06
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	6f 83       	std	Y+7, r22	; 0x07
    2662:	8f 81       	ldd	r24, Y+7	; 0x07
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	c9 01       	movw	r24, r18
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	88 0f       	add	r24, r24
    2670:	99 1f       	adc	r25, r25
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	ac 01       	movw	r20, r24
    2678:	42 1b       	sub	r20, r18
    267a:	53 0b       	sbc	r21, r19
    267c:	9a 01       	movw	r18, r20
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	9e 81       	ldd	r25, Y+6	; 0x06
    2682:	02 96       	adiw	r24, 0x02	; 2
    2684:	9a 83       	std	Y+2, r25	; 0x02
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	9a 81       	ldd	r25, Y+2	; 0x02
    268c:	fc 01       	movw	r30, r24
    268e:	45 91       	lpm	r20, Z+
    2690:	54 91       	lpm	r21, Z
    2692:	cf 01       	movw	r24, r30
    2694:	5c 83       	std	Y+4, r21	; 0x04
    2696:	4b 83       	std	Y+3, r20	; 0x03
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	9c 81       	ldd	r25, Y+4	; 0x04
    26a0:	82 0f       	add	r24, r18
    26a2:	93 1f       	adc	r25, r19
    26a4:	27 96       	adiw	r28, 0x07	; 7
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	08 95       	ret

000026b6 <_Z19pgm_read_bitmap_ptrPK7GFXfont>:
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <_Z19pgm_read_bitmap_ptrPK7GFXfont+0x6>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <_Z19pgm_read_bitmap_ptrPK7GFXfont+0x8>
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	8d 83       	std	Y+5, r24	; 0x05
    26c6:	8d 81       	ldd	r24, Y+5	; 0x05
    26c8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	fc 01       	movw	r30, r24
    26d4:	25 91       	lpm	r18, Z+
    26d6:	34 91       	lpm	r19, Z
    26d8:	cf 01       	movw	r24, r30
    26da:	3c 83       	std	Y+4, r19	; 0x04
    26dc:	2b 83       	std	Y+3, r18	; 0x03
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	26 96       	adiw	r28, 0x06	; 6
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	08 95       	ret

000026f8 <_ZN12Adafruit_GFXC1Eii>:
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <_ZN12Adafruit_GFXC1Eii+0x6>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <_ZN12Adafruit_GFXC1Eii+0x8>
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	7c 83       	std	Y+4, r23	; 0x04
    270a:	6b 83       	std	Y+3, r22	; 0x03
    270c:	5e 83       	std	Y+6, r21	; 0x06
    270e:	4d 83       	std	Y+5, r20	; 0x05
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	2d df       	rcall	.-422    	; 0x2570 <_ZN5PrintC1Ev>
    2716:	2d e9       	ldi	r18, 0x9D	; 157
    2718:	32 e0       	ldi	r19, 0x02	; 2
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	fc 01       	movw	r30, r24
    2720:	31 83       	std	Z+1, r19	; 0x01
    2722:	20 83       	st	Z, r18
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	2b 81       	ldd	r18, Y+3	; 0x03
    272a:	3c 81       	ldd	r19, Y+4	; 0x04
    272c:	fc 01       	movw	r30, r24
    272e:	35 83       	std	Z+5, r19	; 0x05
    2730:	24 83       	std	Z+4, r18	; 0x04
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	9a 81       	ldd	r25, Y+2	; 0x02
    2736:	2d 81       	ldd	r18, Y+5	; 0x05
    2738:	3e 81       	ldd	r19, Y+6	; 0x06
    273a:	fc 01       	movw	r30, r24
    273c:	37 83       	std	Z+7, r19	; 0x07
    273e:	26 83       	std	Z+6, r18	; 0x06
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	fc 01       	movw	r30, r24
    2746:	24 81       	ldd	r18, Z+4	; 0x04
    2748:	35 81       	ldd	r19, Z+5	; 0x05
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	fc 01       	movw	r30, r24
    2750:	31 87       	std	Z+9, r19	; 0x09
    2752:	20 87       	std	Z+8, r18	; 0x08
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	9a 81       	ldd	r25, Y+2	; 0x02
    2758:	fc 01       	movw	r30, r24
    275a:	26 81       	ldd	r18, Z+6	; 0x06
    275c:	37 81       	ldd	r19, Z+7	; 0x07
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	fc 01       	movw	r30, r24
    2764:	33 87       	std	Z+11, r19	; 0x0b
    2766:	22 87       	std	Z+10, r18	; 0x0a
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	fc 01       	movw	r30, r24
    276e:	16 8a       	std	Z+22, r1	; 0x16
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	fc 01       	movw	r30, r24
    2776:	15 86       	std	Z+13, r1	; 0x0d
    2778:	14 86       	std	Z+12, r1	; 0x0c
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	fc 01       	movw	r30, r24
    2780:	24 85       	ldd	r18, Z+12	; 0x0c
    2782:	35 85       	ldd	r19, Z+13	; 0x0d
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	fc 01       	movw	r30, r24
    278a:	37 87       	std	Z+15, r19	; 0x0f
    278c:	26 87       	std	Z+14, r18	; 0x0e
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	9a 81       	ldd	r25, Y+2	; 0x02
    2792:	21 e0       	ldi	r18, 0x01	; 1
    2794:	fc 01       	movw	r30, r24
    2796:	25 8b       	std	Z+21, r18	; 0x15
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	fc 01       	movw	r30, r24
    279e:	25 89       	ldd	r18, Z+21	; 0x15
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	fc 01       	movw	r30, r24
    27a6:	24 8b       	std	Z+20, r18	; 0x14
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	2f ef       	ldi	r18, 0xFF	; 255
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	fc 01       	movw	r30, r24
    27b2:	33 8b       	std	Z+19, r19	; 0x13
    27b4:	22 8b       	std	Z+18, r18	; 0x12
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	fc 01       	movw	r30, r24
    27bc:	22 89       	ldd	r18, Z+18	; 0x12
    27be:	33 89       	ldd	r19, Z+19	; 0x13
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	fc 01       	movw	r30, r24
    27c6:	31 8b       	std	Z+17, r19	; 0x11
    27c8:	20 8b       	std	Z+16, r18	; 0x10
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
    27ce:	21 e0       	ldi	r18, 0x01	; 1
    27d0:	fc 01       	movw	r30, r24
    27d2:	27 8b       	std	Z+23, r18	; 0x17
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	fc 01       	movw	r30, r24
    27da:	10 8e       	std	Z+24, r1	; 0x18
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	fc 01       	movw	r30, r24
    27e2:	12 8e       	std	Z+26, r1	; 0x1a
    27e4:	11 8e       	std	Z+25, r1	; 0x19
    27e6:	00 00       	nop
    27e8:	26 96       	adiw	r28, 0x06	; 6
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	08 95       	ret

000027fa <_ZN12Adafruit_GFX9writeLineEiiiij>:
    27fa:	ef 92       	push	r14
    27fc:	ff 92       	push	r15
    27fe:	0f 93       	push	r16
    2800:	1f 93       	push	r17
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	6e 97       	sbiw	r28, 0x1e	; 30
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
    281a:	7e 8b       	std	Y+22, r23	; 0x16
    281c:	6d 8b       	std	Y+21, r22	; 0x15
    281e:	58 8f       	std	Y+24, r21	; 0x18
    2820:	4f 8b       	std	Y+23, r20	; 0x17
    2822:	3a 8f       	std	Y+26, r19	; 0x1a
    2824:	29 8f       	std	Y+25, r18	; 0x19
    2826:	1c 8f       	std	Y+28, r17	; 0x1c
    2828:	0b 8f       	std	Y+27, r16	; 0x1b
    282a:	fe 8e       	std	Y+30, r15	; 0x1e
    282c:	ed 8e       	std	Y+29, r14	; 0x1d
    282e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2830:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2832:	8f 89       	ldd	r24, Y+23	; 0x17
    2834:	98 8d       	ldd	r25, Y+24	; 0x18
    2836:	a9 01       	movw	r20, r18
    2838:	48 1b       	sub	r20, r24
    283a:	59 0b       	sbc	r21, r25
    283c:	ca 01       	movw	r24, r20
    283e:	99 23       	and	r25, r25
    2840:	1c f4       	brge	.+6      	; 0x2848 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    2842:	91 95       	neg	r25
    2844:	81 95       	neg	r24
    2846:	91 09       	sbc	r25, r1
    2848:	ac 01       	movw	r20, r24
    284a:	29 8d       	ldd	r18, Y+25	; 0x19
    284c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    284e:	8d 89       	ldd	r24, Y+21	; 0x15
    2850:	9e 89       	ldd	r25, Y+22	; 0x16
    2852:	b9 01       	movw	r22, r18
    2854:	68 1b       	sub	r22, r24
    2856:	79 0b       	sbc	r23, r25
    2858:	cb 01       	movw	r24, r22
    285a:	99 23       	and	r25, r25
    285c:	1c f4       	brge	.+6      	; 0x2864 <_ZN12Adafruit_GFX9writeLineEiiiij+0x6a>
    285e:	91 95       	neg	r25
    2860:	81 95       	neg	r24
    2862:	91 09       	sbc	r25, r1
    2864:	21 e0       	ldi	r18, 0x01	; 1
    2866:	84 17       	cp	r24, r20
    2868:	95 07       	cpc	r25, r21
    286a:	0c f0       	brlt	.+2      	; 0x286e <_ZN12Adafruit_GFX9writeLineEiiiij+0x74>
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	82 2f       	mov	r24, r18
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	89 2b       	or	r24, r25
    287c:	c1 f0       	breq	.+48     	; 0x28ae <_ZN12Adafruit_GFX9writeLineEiiiij+0xb4>
    287e:	8d 89       	ldd	r24, Y+21	; 0x15
    2880:	9e 89       	ldd	r25, Y+22	; 0x16
    2882:	98 87       	std	Y+8, r25	; 0x08
    2884:	8f 83       	std	Y+7, r24	; 0x07
    2886:	8f 89       	ldd	r24, Y+23	; 0x17
    2888:	98 8d       	ldd	r25, Y+24	; 0x18
    288a:	9e 8b       	std	Y+22, r25	; 0x16
    288c:	8d 8b       	std	Y+21, r24	; 0x15
    288e:	8f 81       	ldd	r24, Y+7	; 0x07
    2890:	98 85       	ldd	r25, Y+8	; 0x08
    2892:	98 8f       	std	Y+24, r25	; 0x18
    2894:	8f 8b       	std	Y+23, r24	; 0x17
    2896:	89 8d       	ldd	r24, Y+25	; 0x19
    2898:	9a 8d       	ldd	r25, Y+26	; 0x1a
    289a:	9a 87       	std	Y+10, r25	; 0x0a
    289c:	89 87       	std	Y+9, r24	; 0x09
    289e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a2:	9a 8f       	std	Y+26, r25	; 0x1a
    28a4:	89 8f       	std	Y+25, r24	; 0x19
    28a6:	89 85       	ldd	r24, Y+9	; 0x09
    28a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28aa:	9c 8f       	std	Y+28, r25	; 0x1c
    28ac:	8b 8f       	std	Y+27, r24	; 0x1b
    28ae:	2d 89       	ldd	r18, Y+21	; 0x15
    28b0:	3e 89       	ldd	r19, Y+22	; 0x16
    28b2:	89 8d       	ldd	r24, Y+25	; 0x19
    28b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28b6:	82 17       	cp	r24, r18
    28b8:	93 07       	cpc	r25, r19
    28ba:	c4 f4       	brge	.+48     	; 0x28ec <_ZN12Adafruit_GFX9writeLineEiiiij+0xf2>
    28bc:	8d 89       	ldd	r24, Y+21	; 0x15
    28be:	9e 89       	ldd	r25, Y+22	; 0x16
    28c0:	9c 87       	std	Y+12, r25	; 0x0c
    28c2:	8b 87       	std	Y+11, r24	; 0x0b
    28c4:	89 8d       	ldd	r24, Y+25	; 0x19
    28c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28c8:	9e 8b       	std	Y+22, r25	; 0x16
    28ca:	8d 8b       	std	Y+21, r24	; 0x15
    28cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    28d0:	9a 8f       	std	Y+26, r25	; 0x1a
    28d2:	89 8f       	std	Y+25, r24	; 0x19
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	9e 87       	std	Y+14, r25	; 0x0e
    28da:	8d 87       	std	Y+13, r24	; 0x0d
    28dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e0:	98 8f       	std	Y+24, r25	; 0x18
    28e2:	8f 8b       	std	Y+23, r24	; 0x17
    28e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e8:	9c 8f       	std	Y+28, r25	; 0x1c
    28ea:	8b 8f       	std	Y+27, r24	; 0x1b
    28ec:	29 8d       	ldd	r18, Y+25	; 0x19
    28ee:	3a 8d       	ldd	r19, Y+26	; 0x1a
    28f0:	8d 89       	ldd	r24, Y+21	; 0x15
    28f2:	9e 89       	ldd	r25, Y+22	; 0x16
    28f4:	d9 01       	movw	r26, r18
    28f6:	a8 1b       	sub	r26, r24
    28f8:	b9 0b       	sbc	r27, r25
    28fa:	cd 01       	movw	r24, r26
    28fc:	98 8b       	std	Y+16, r25	; 0x10
    28fe:	8f 87       	std	Y+15, r24	; 0x0f
    2900:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2902:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2904:	8f 89       	ldd	r24, Y+23	; 0x17
    2906:	98 8d       	ldd	r25, Y+24	; 0x18
    2908:	f9 01       	movw	r30, r18
    290a:	e8 1b       	sub	r30, r24
    290c:	f9 0b       	sbc	r31, r25
    290e:	cf 01       	movw	r24, r30
    2910:	99 23       	and	r25, r25
    2912:	1c f4       	brge	.+6      	; 0x291a <_ZN12Adafruit_GFX9writeLineEiiiij+0x120>
    2914:	91 95       	neg	r25
    2916:	81 95       	neg	r24
    2918:	91 09       	sbc	r25, r1
    291a:	9a 8b       	std	Y+18, r25	; 0x12
    291c:	89 8b       	std	Y+17, r24	; 0x11
    291e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2920:	98 89       	ldd	r25, Y+16	; 0x10
    2922:	99 23       	and	r25, r25
    2924:	0c f4       	brge	.+2      	; 0x2928 <_ZN12Adafruit_GFX9writeLineEiiiij+0x12e>
    2926:	01 96       	adiw	r24, 0x01	; 1
    2928:	95 95       	asr	r25
    292a:	87 95       	ror	r24
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	2f 89       	ldd	r18, Y+23	; 0x17
    2932:	38 8d       	ldd	r19, Y+24	; 0x18
    2934:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2936:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2938:	28 17       	cp	r18, r24
    293a:	39 07       	cpc	r19, r25
    293c:	2c f4       	brge	.+10     	; 0x2948 <_ZN12Adafruit_GFX9writeLineEiiiij+0x14e>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9c 83       	std	Y+4, r25	; 0x04
    2944:	8b 83       	std	Y+3, r24	; 0x03
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <_ZN12Adafruit_GFX9writeLineEiiiij+0x156>
    2948:	8f ef       	ldi	r24, 0xFF	; 255
    294a:	9f ef       	ldi	r25, 0xFF	; 255
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	2d 89       	ldd	r18, Y+21	; 0x15
    2952:	3e 89       	ldd	r19, Y+22	; 0x16
    2954:	89 8d       	ldd	r24, Y+25	; 0x19
    2956:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2958:	82 17       	cp	r24, r18
    295a:	93 07       	cpc	r25, r19
    295c:	0c f4       	brge	.+2      	; 0x2960 <_ZN12Adafruit_GFX9writeLineEiiiij+0x166>
    295e:	4d c0       	rjmp	.+154    	; 0x29fa <_ZN12Adafruit_GFX9writeLineEiiiij+0x200>
    2960:	8d 81       	ldd	r24, Y+5	; 0x05
    2962:	9e 81       	ldd	r25, Y+6	; 0x06
    2964:	89 2b       	or	r24, r25
    2966:	99 f0       	breq	.+38     	; 0x298e <_ZN12Adafruit_GFX9writeLineEiiiij+0x194>
    2968:	8b 89       	ldd	r24, Y+19	; 0x13
    296a:	9c 89       	ldd	r25, Y+20	; 0x14
    296c:	dc 01       	movw	r26, r24
    296e:	8d 91       	ld	r24, X+
    2970:	9c 91       	ld	r25, X
    2972:	0c 96       	adiw	r24, 0x0c	; 12
    2974:	dc 01       	movw	r26, r24
    2976:	ed 91       	ld	r30, X+
    2978:	fc 91       	ld	r31, X
    297a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    297c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    297e:	4d 89       	ldd	r20, Y+21	; 0x15
    2980:	5e 89       	ldd	r21, Y+22	; 0x16
    2982:	6f 89       	ldd	r22, Y+23	; 0x17
    2984:	78 8d       	ldd	r23, Y+24	; 0x18
    2986:	8b 89       	ldd	r24, Y+19	; 0x13
    2988:	9c 89       	ldd	r25, Y+20	; 0x14
    298a:	19 95       	eicall
    298c:	12 c0       	rjmp	.+36     	; 0x29b2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x1b8>
    298e:	8b 89       	ldd	r24, Y+19	; 0x13
    2990:	9c 89       	ldd	r25, Y+20	; 0x14
    2992:	fc 01       	movw	r30, r24
    2994:	80 81       	ld	r24, Z
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	0c 96       	adiw	r24, 0x0c	; 12
    299a:	dc 01       	movw	r26, r24
    299c:	ed 91       	ld	r30, X+
    299e:	fc 91       	ld	r31, X
    29a0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    29a2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    29a4:	4f 89       	ldd	r20, Y+23	; 0x17
    29a6:	58 8d       	ldd	r21, Y+24	; 0x18
    29a8:	6d 89       	ldd	r22, Y+21	; 0x15
    29aa:	7e 89       	ldd	r23, Y+22	; 0x16
    29ac:	8b 89       	ldd	r24, Y+19	; 0x13
    29ae:	9c 89       	ldd	r25, Y+20	; 0x14
    29b0:	19 95       	eicall
    29b2:	29 81       	ldd	r18, Y+1	; 0x01
    29b4:	3a 81       	ldd	r19, Y+2	; 0x02
    29b6:	89 89       	ldd	r24, Y+17	; 0x11
    29b8:	9a 89       	ldd	r25, Y+18	; 0x12
    29ba:	f9 01       	movw	r30, r18
    29bc:	e8 1b       	sub	r30, r24
    29be:	f9 0b       	sbc	r31, r25
    29c0:	cf 01       	movw	r24, r30
    29c2:	9a 83       	std	Y+2, r25	; 0x02
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	99 23       	and	r25, r25
    29cc:	84 f4       	brge	.+32     	; 0x29ee <_ZN12Adafruit_GFX9writeLineEiiiij+0x1f4>
    29ce:	2f 89       	ldd	r18, Y+23	; 0x17
    29d0:	38 8d       	ldd	r19, Y+24	; 0x18
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	9c 81       	ldd	r25, Y+4	; 0x04
    29d6:	82 0f       	add	r24, r18
    29d8:	93 1f       	adc	r25, r19
    29da:	98 8f       	std	Y+24, r25	; 0x18
    29dc:	8f 8b       	std	Y+23, r24	; 0x17
    29de:	29 81       	ldd	r18, Y+1	; 0x01
    29e0:	3a 81       	ldd	r19, Y+2	; 0x02
    29e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e4:	98 89       	ldd	r25, Y+16	; 0x10
    29e6:	82 0f       	add	r24, r18
    29e8:	93 1f       	adc	r25, r19
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	8d 89       	ldd	r24, Y+21	; 0x15
    29f0:	9e 89       	ldd	r25, Y+22	; 0x16
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	9e 8b       	std	Y+22, r25	; 0x16
    29f6:	8d 8b       	std	Y+21, r24	; 0x15
    29f8:	ab cf       	rjmp	.-170    	; 0x2950 <_ZN12Adafruit_GFX9writeLineEiiiij+0x156>
    29fa:	00 00       	nop
    29fc:	6e 96       	adiw	r28, 0x1e	; 30
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	08 95       	ret

00002a16 <_ZN12Adafruit_GFX10startWriteEv>:
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	1f 92       	push	r1
    2a1c:	1f 92       	push	r1
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	00 00       	nop
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	08 95       	ret

00002a32 <_ZN12Adafruit_GFX10writePixelEiij>:
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	28 97       	sbiw	r28, 0x08	; 8
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	7c 83       	std	Y+4, r23	; 0x04
    2a4c:	6b 83       	std	Y+3, r22	; 0x03
    2a4e:	5e 83       	std	Y+6, r21	; 0x06
    2a50:	4d 83       	std	Y+5, r20	; 0x05
    2a52:	38 87       	std	Y+8, r19	; 0x08
    2a54:	2f 83       	std	Y+7, r18	; 0x07
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	8d 91       	ld	r24, X+
    2a5e:	9c 91       	ld	r25, X
    2a60:	08 96       	adiw	r24, 0x08	; 8
    2a62:	dc 01       	movw	r26, r24
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	2f 81       	ldd	r18, Y+7	; 0x07
    2a6a:	38 85       	ldd	r19, Y+8	; 0x08
    2a6c:	4d 81       	ldd	r20, Y+5	; 0x05
    2a6e:	5e 81       	ldd	r21, Y+6	; 0x06
    2a70:	6b 81       	ldd	r22, Y+3	; 0x03
    2a72:	7c 81       	ldd	r23, Y+4	; 0x04
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	19 95       	eicall
    2a7a:	00 00       	nop
    2a7c:	28 96       	adiw	r28, 0x08	; 8
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	08 95       	ret

00002a8e <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	2a 97       	sbiw	r28, 0x0a	; 10
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	7c 83       	std	Y+4, r23	; 0x04
    2aac:	6b 83       	std	Y+3, r22	; 0x03
    2aae:	5e 83       	std	Y+6, r21	; 0x06
    2ab0:	4d 83       	std	Y+5, r20	; 0x05
    2ab2:	38 87       	std	Y+8, r19	; 0x08
    2ab4:	2f 83       	std	Y+7, r18	; 0x07
    2ab6:	1a 87       	std	Y+10, r17	; 0x0a
    2ab8:	09 87       	std	Y+9, r16	; 0x09
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	9a 81       	ldd	r25, Y+2	; 0x02
    2abe:	dc 01       	movw	r26, r24
    2ac0:	8d 91       	ld	r24, X+
    2ac2:	9c 91       	ld	r25, X
    2ac4:	4c 96       	adiw	r24, 0x1c	; 28
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	ed 91       	ld	r30, X+
    2aca:	fc 91       	ld	r31, X
    2acc:	a9 85       	ldd	r26, Y+9	; 0x09
    2ace:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ad0:	2f 81       	ldd	r18, Y+7	; 0x07
    2ad2:	38 85       	ldd	r19, Y+8	; 0x08
    2ad4:	4d 81       	ldd	r20, Y+5	; 0x05
    2ad6:	5e 81       	ldd	r21, Y+6	; 0x06
    2ad8:	6b 81       	ldd	r22, Y+3	; 0x03
    2ada:	7c 81       	ldd	r23, Y+4	; 0x04
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae0:	8d 01       	movw	r16, r26
    2ae2:	19 95       	eicall
    2ae4:	00 00       	nop
    2ae6:	2a 96       	adiw	r28, 0x0a	; 10
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

00002afc <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	2a 97       	sbiw	r28, 0x0a	; 10
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	9a 83       	std	Y+2, r25	; 0x02
    2b16:	89 83       	std	Y+1, r24	; 0x01
    2b18:	7c 83       	std	Y+4, r23	; 0x04
    2b1a:	6b 83       	std	Y+3, r22	; 0x03
    2b1c:	5e 83       	std	Y+6, r21	; 0x06
    2b1e:	4d 83       	std	Y+5, r20	; 0x05
    2b20:	38 87       	std	Y+8, r19	; 0x08
    2b22:	2f 83       	std	Y+7, r18	; 0x07
    2b24:	1a 87       	std	Y+10, r17	; 0x0a
    2b26:	09 87       	std	Y+9, r16	; 0x09
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	8d 91       	ld	r24, X+
    2b30:	9c 91       	ld	r25, X
    2b32:	4e 96       	adiw	r24, 0x1e	; 30
    2b34:	dc 01       	movw	r26, r24
    2b36:	ed 91       	ld	r30, X+
    2b38:	fc 91       	ld	r31, X
    2b3a:	a9 85       	ldd	r26, Y+9	; 0x09
    2b3c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b3e:	2f 81       	ldd	r18, Y+7	; 0x07
    2b40:	38 85       	ldd	r19, Y+8	; 0x08
    2b42:	4d 81       	ldd	r20, Y+5	; 0x05
    2b44:	5e 81       	ldd	r21, Y+6	; 0x06
    2b46:	6b 81       	ldd	r22, Y+3	; 0x03
    2b48:	7c 81       	ldd	r23, Y+4	; 0x04
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4e:	8d 01       	movw	r16, r26
    2b50:	19 95       	eicall
    2b52:	00 00       	nop
    2b54:	2a 96       	adiw	r28, 0x0a	; 10
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	df 91       	pop	r29
    2b62:	cf 91       	pop	r28
    2b64:	1f 91       	pop	r17
    2b66:	0f 91       	pop	r16
    2b68:	08 95       	ret

00002b6a <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    2b6a:	ef 92       	push	r14
    2b6c:	ff 92       	push	r15
    2b6e:	0f 93       	push	r16
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	2c 97       	sbiw	r28, 0x0c	; 12
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	89 83       	std	Y+1, r24	; 0x01
    2b8a:	7c 83       	std	Y+4, r23	; 0x04
    2b8c:	6b 83       	std	Y+3, r22	; 0x03
    2b8e:	5e 83       	std	Y+6, r21	; 0x06
    2b90:	4d 83       	std	Y+5, r20	; 0x05
    2b92:	38 87       	std	Y+8, r19	; 0x08
    2b94:	2f 83       	std	Y+7, r18	; 0x07
    2b96:	1a 87       	std	Y+10, r17	; 0x0a
    2b98:	09 87       	std	Y+9, r16	; 0x09
    2b9a:	fc 86       	std	Y+12, r15	; 0x0c
    2b9c:	eb 86       	std	Y+11, r14	; 0x0b
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	8d 91       	ld	r24, X+
    2ba6:	9c 91       	ld	r25, X
    2ba8:	80 96       	adiw	r24, 0x20	; 32
    2baa:	dc 01       	movw	r26, r24
    2bac:	ed 91       	ld	r30, X+
    2bae:	fc 91       	ld	r31, X
    2bb0:	0b 85       	ldd	r16, Y+11	; 0x0b
    2bb2:	1c 85       	ldd	r17, Y+12	; 0x0c
    2bb4:	a9 85       	ldd	r26, Y+9	; 0x09
    2bb6:	ba 85       	ldd	r27, Y+10	; 0x0a
    2bb8:	2f 81       	ldd	r18, Y+7	; 0x07
    2bba:	38 85       	ldd	r19, Y+8	; 0x08
    2bbc:	4d 81       	ldd	r20, Y+5	; 0x05
    2bbe:	5e 81       	ldd	r21, Y+6	; 0x06
    2bc0:	6b 81       	ldd	r22, Y+3	; 0x03
    2bc2:	7c 81       	ldd	r23, Y+4	; 0x04
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	78 01       	movw	r14, r16
    2bca:	8d 01       	movw	r16, r26
    2bcc:	19 95       	eicall
    2bce:	00 00       	nop
    2bd0:	2c 96       	adiw	r28, 0x0c	; 12
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	ff 90       	pop	r15
    2be6:	ef 90       	pop	r14
    2be8:	08 95       	ret

00002bea <_ZN12Adafruit_GFX8endWriteEv>:
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	1f 92       	push	r1
    2bf0:	1f 92       	push	r1
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	9a 83       	std	Y+2, r25	; 0x02
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	00 00       	nop
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	08 95       	ret

00002c06 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    2c06:	ef 92       	push	r14
    2c08:	ff 92       	push	r15
    2c0a:	0f 93       	push	r16
    2c0c:	1f 93       	push	r17
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	2a 97       	sbiw	r28, 0x0a	; 10
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	9a 83       	std	Y+2, r25	; 0x02
    2c24:	89 83       	std	Y+1, r24	; 0x01
    2c26:	7c 83       	std	Y+4, r23	; 0x04
    2c28:	6b 83       	std	Y+3, r22	; 0x03
    2c2a:	5e 83       	std	Y+6, r21	; 0x06
    2c2c:	4d 83       	std	Y+5, r20	; 0x05
    2c2e:	38 87       	std	Y+8, r19	; 0x08
    2c30:	2f 83       	std	Y+7, r18	; 0x07
    2c32:	1a 87       	std	Y+10, r17	; 0x0a
    2c34:	09 87       	std	Y+9, r16	; 0x09
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	8d 91       	ld	r24, X+
    2c3e:	9c 91       	ld	r25, X
    2c40:	0a 96       	adiw	r24, 0x0a	; 10
    2c42:	fc 01       	movw	r30, r24
    2c44:	20 81       	ld	r18, Z
    2c46:	31 81       	ldd	r19, Z+1	; 0x01
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	f9 01       	movw	r30, r18
    2c4e:	19 95       	eicall
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	9a 81       	ldd	r25, Y+2	; 0x02
    2c54:	dc 01       	movw	r26, r24
    2c56:	8d 91       	ld	r24, X+
    2c58:	9c 91       	ld	r25, X
    2c5a:	44 96       	adiw	r24, 0x14	; 20
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	ed 91       	ld	r30, X+
    2c60:	fc 91       	ld	r31, X
    2c62:	2d 81       	ldd	r18, Y+5	; 0x05
    2c64:	3e 81       	ldd	r19, Y+6	; 0x06
    2c66:	8f 81       	ldd	r24, Y+7	; 0x07
    2c68:	98 85       	ldd	r25, Y+8	; 0x08
    2c6a:	82 0f       	add	r24, r18
    2c6c:	93 1f       	adc	r25, r19
    2c6e:	dc 01       	movw	r26, r24
    2c70:	11 97       	sbiw	r26, 0x01	; 1
    2c72:	09 85       	ldd	r16, Y+9	; 0x09
    2c74:	1a 85       	ldd	r17, Y+10	; 0x0a
    2c76:	2b 81       	ldd	r18, Y+3	; 0x03
    2c78:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7a:	4d 81       	ldd	r20, Y+5	; 0x05
    2c7c:	5e 81       	ldd	r21, Y+6	; 0x06
    2c7e:	6b 81       	ldd	r22, Y+3	; 0x03
    2c80:	7c 81       	ldd	r23, Y+4	; 0x04
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	9a 81       	ldd	r25, Y+2	; 0x02
    2c86:	78 01       	movw	r14, r16
    2c88:	8d 01       	movw	r16, r26
    2c8a:	19 95       	eicall
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	fc 01       	movw	r30, r24
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	46 96       	adiw	r24, 0x16	; 22
    2c98:	dc 01       	movw	r26, r24
    2c9a:	2d 91       	ld	r18, X+
    2c9c:	3c 91       	ld	r19, X
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	f9 01       	movw	r30, r18
    2ca4:	19 95       	eicall
    2ca6:	00 00       	nop
    2ca8:	2a 96       	adiw	r28, 0x0a	; 10
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	ff 90       	pop	r15
    2cbe:	ef 90       	pop	r14
    2cc0:	08 95       	ret

00002cc2 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    2cc2:	ef 92       	push	r14
    2cc4:	ff 92       	push	r15
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	2a 97       	sbiw	r28, 0x0a	; 10
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	9a 83       	std	Y+2, r25	; 0x02
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	7c 83       	std	Y+4, r23	; 0x04
    2ce4:	6b 83       	std	Y+3, r22	; 0x03
    2ce6:	5e 83       	std	Y+6, r21	; 0x06
    2ce8:	4d 83       	std	Y+5, r20	; 0x05
    2cea:	38 87       	std	Y+8, r19	; 0x08
    2cec:	2f 83       	std	Y+7, r18	; 0x07
    2cee:	1a 87       	std	Y+10, r17	; 0x0a
    2cf0:	09 87       	std	Y+9, r16	; 0x09
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	8d 91       	ld	r24, X+
    2cfa:	9c 91       	ld	r25, X
    2cfc:	0a 96       	adiw	r24, 0x0a	; 10
    2cfe:	fc 01       	movw	r30, r24
    2d00:	20 81       	ld	r18, Z
    2d02:	31 81       	ldd	r19, Z+1	; 0x01
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	9a 81       	ldd	r25, Y+2	; 0x02
    2d08:	f9 01       	movw	r30, r18
    2d0a:	19 95       	eicall
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	dc 01       	movw	r26, r24
    2d12:	8d 91       	ld	r24, X+
    2d14:	9c 91       	ld	r25, X
    2d16:	44 96       	adiw	r24, 0x14	; 20
    2d18:	dc 01       	movw	r26, r24
    2d1a:	ed 91       	ld	r30, X+
    2d1c:	fc 91       	ld	r31, X
    2d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d20:	3c 81       	ldd	r19, Y+4	; 0x04
    2d22:	8f 81       	ldd	r24, Y+7	; 0x07
    2d24:	98 85       	ldd	r25, Y+8	; 0x08
    2d26:	82 0f       	add	r24, r18
    2d28:	93 1f       	adc	r25, r19
    2d2a:	9c 01       	movw	r18, r24
    2d2c:	21 50       	subi	r18, 0x01	; 1
    2d2e:	31 09       	sbc	r19, r1
    2d30:	09 85       	ldd	r16, Y+9	; 0x09
    2d32:	1a 85       	ldd	r17, Y+10	; 0x0a
    2d34:	ad 81       	ldd	r26, Y+5	; 0x05
    2d36:	be 81       	ldd	r27, Y+6	; 0x06
    2d38:	4d 81       	ldd	r20, Y+5	; 0x05
    2d3a:	5e 81       	ldd	r21, Y+6	; 0x06
    2d3c:	6b 81       	ldd	r22, Y+3	; 0x03
    2d3e:	7c 81       	ldd	r23, Y+4	; 0x04
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	9a 81       	ldd	r25, Y+2	; 0x02
    2d44:	78 01       	movw	r14, r16
    2d46:	8d 01       	movw	r16, r26
    2d48:	19 95       	eicall
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	fc 01       	movw	r30, r24
    2d50:	80 81       	ld	r24, Z
    2d52:	91 81       	ldd	r25, Z+1	; 0x01
    2d54:	46 96       	adiw	r24, 0x16	; 22
    2d56:	dc 01       	movw	r26, r24
    2d58:	2d 91       	ld	r18, X+
    2d5a:	3c 91       	ld	r19, X
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d60:	f9 01       	movw	r30, r18
    2d62:	19 95       	eicall
    2d64:	00 00       	nop
    2d66:	2a 96       	adiw	r28, 0x0a	; 10
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	df 91       	pop	r29
    2d74:	cf 91       	pop	r28
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	ff 90       	pop	r15
    2d7c:	ef 90       	pop	r14
    2d7e:	08 95       	ret

00002d80 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    2d80:	ef 92       	push	r14
    2d82:	ff 92       	push	r15
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	2e 97       	sbiw	r28, 0x0e	; 14
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	9c 83       	std	Y+4, r25	; 0x04
    2d9e:	8b 83       	std	Y+3, r24	; 0x03
    2da0:	7e 83       	std	Y+6, r23	; 0x06
    2da2:	6d 83       	std	Y+5, r22	; 0x05
    2da4:	58 87       	std	Y+8, r21	; 0x08
    2da6:	4f 83       	std	Y+7, r20	; 0x07
    2da8:	3a 87       	std	Y+10, r19	; 0x0a
    2daa:	29 87       	std	Y+9, r18	; 0x09
    2dac:	1c 87       	std	Y+12, r17	; 0x0c
    2dae:	0b 87       	std	Y+11, r16	; 0x0b
    2db0:	fe 86       	std	Y+14, r15	; 0x0e
    2db2:	ed 86       	std	Y+13, r14	; 0x0d
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	9c 81       	ldd	r25, Y+4	; 0x04
    2db8:	dc 01       	movw	r26, r24
    2dba:	8d 91       	ld	r24, X+
    2dbc:	9c 91       	ld	r25, X
    2dbe:	0a 96       	adiw	r24, 0x0a	; 10
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	20 81       	ld	r18, Z
    2dc4:	31 81       	ldd	r19, Z+1	; 0x01
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	f9 01       	movw	r30, r18
    2dcc:	19 95       	eicall
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	9a 83       	std	Y+2, r25	; 0x02
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	2d 81       	ldd	r18, Y+5	; 0x05
    2dd8:	3e 81       	ldd	r19, Y+6	; 0x06
    2dda:	89 85       	ldd	r24, Y+9	; 0x09
    2ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dde:	28 0f       	add	r18, r24
    2de0:	39 1f       	adc	r19, r25
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	82 17       	cp	r24, r18
    2de8:	93 07       	cpc	r25, r19
    2dea:	dc f4       	brge	.+54     	; 0x2e22 <_ZN12Adafruit_GFX8fillRectEiiiij+0xa2>
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	9c 81       	ldd	r25, Y+4	; 0x04
    2df0:	dc 01       	movw	r26, r24
    2df2:	8d 91       	ld	r24, X+
    2df4:	9c 91       	ld	r25, X
    2df6:	40 96       	adiw	r24, 0x10	; 16
    2df8:	dc 01       	movw	r26, r24
    2dfa:	ed 91       	ld	r30, X+
    2dfc:	fc 91       	ld	r31, X
    2dfe:	ad 85       	ldd	r26, Y+13	; 0x0d
    2e00:	be 85       	ldd	r27, Y+14	; 0x0e
    2e02:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e04:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e06:	4f 81       	ldd	r20, Y+7	; 0x07
    2e08:	58 85       	ldd	r21, Y+8	; 0x08
    2e0a:	69 81       	ldd	r22, Y+1	; 0x01
    2e0c:	7a 81       	ldd	r23, Y+2	; 0x02
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	9c 81       	ldd	r25, Y+4	; 0x04
    2e12:	8d 01       	movw	r16, r26
    2e14:	19 95       	eicall
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	9a 83       	std	Y+2, r25	; 0x02
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	da cf       	rjmp	.-76     	; 0x2dd6 <_ZN12Adafruit_GFX8fillRectEiiiij+0x56>
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	9c 81       	ldd	r25, Y+4	; 0x04
    2e26:	fc 01       	movw	r30, r24
    2e28:	80 81       	ld	r24, Z
    2e2a:	91 81       	ldd	r25, Z+1	; 0x01
    2e2c:	46 96       	adiw	r24, 0x16	; 22
    2e2e:	dc 01       	movw	r26, r24
    2e30:	2d 91       	ld	r18, X+
    2e32:	3c 91       	ld	r19, X
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	f9 01       	movw	r30, r18
    2e3a:	19 95       	eicall
    2e3c:	00 00       	nop
    2e3e:	2e 96       	adiw	r28, 0x0e	; 14
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	ff 90       	pop	r15
    2e54:	ef 90       	pop	r14
    2e56:	08 95       	ret

00002e58 <_ZN12Adafruit_GFX10fillScreenEj>:
    2e58:	ef 92       	push	r14
    2e5a:	ff 92       	push	r15
    2e5c:	0f 93       	push	r16
    2e5e:	1f 93       	push	r17
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <_ZN12Adafruit_GFX10fillScreenEj+0xe>
    2e66:	1f 92       	push	r1
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	9a 83       	std	Y+2, r25	; 0x02
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	7c 83       	std	Y+4, r23	; 0x04
    2e72:	6b 83       	std	Y+3, r22	; 0x03
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	9a 81       	ldd	r25, Y+2	; 0x02
    2e78:	dc 01       	movw	r26, r24
    2e7a:	8d 91       	ld	r24, X+
    2e7c:	9c 91       	ld	r25, X
    2e7e:	80 96       	adiw	r24, 0x20	; 32
    2e80:	dc 01       	movw	r26, r24
    2e82:	ed 91       	ld	r30, X+
    2e84:	fc 91       	ld	r31, X
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	1a 96       	adiw	r26, 0x0a	; 10
    2e8e:	4d 91       	ld	r20, X+
    2e90:	5c 91       	ld	r21, X
    2e92:	1b 97       	sbiw	r26, 0x0b	; 11
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	9a 81       	ldd	r25, Y+2	; 0x02
    2e98:	dc 01       	movw	r26, r24
    2e9a:	18 96       	adiw	r26, 0x08	; 8
    2e9c:	2d 91       	ld	r18, X+
    2e9e:	3c 91       	ld	r19, X
    2ea0:	19 97       	sbiw	r26, 0x09	; 9
    2ea2:	6b 81       	ldd	r22, Y+3	; 0x03
    2ea4:	7c 81       	ldd	r23, Y+4	; 0x04
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eaa:	7b 01       	movw	r14, r22
    2eac:	8a 01       	movw	r16, r20
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	50 e0       	ldi	r21, 0x00	; 0
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	19 95       	eicall
    2eb8:	00 00       	nop
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ff 90       	pop	r15
    2ecc:	ef 90       	pop	r14
    2ece:	08 95       	ret

00002ed0 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	60 97       	sbiw	r28, 0x10	; 16
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	9e 83       	std	Y+6, r25	; 0x06
    2eee:	8d 83       	std	Y+5, r24	; 0x05
    2ef0:	78 87       	std	Y+8, r23	; 0x08
    2ef2:	6f 83       	std	Y+7, r22	; 0x07
    2ef4:	5a 87       	std	Y+10, r21	; 0x0a
    2ef6:	49 87       	std	Y+9, r20	; 0x09
    2ef8:	3c 87       	std	Y+12, r19	; 0x0c
    2efa:	2b 87       	std	Y+11, r18	; 0x0b
    2efc:	1e 87       	std	Y+14, r17	; 0x0e
    2efe:	0d 87       	std	Y+13, r16	; 0x0d
    2f00:	f8 8a       	std	Y+16, r15	; 0x10
    2f02:	ef 86       	std	Y+15, r14	; 0x0f
    2f04:	2f 81       	ldd	r18, Y+7	; 0x07
    2f06:	38 85       	ldd	r19, Y+8	; 0x08
    2f08:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f0c:	28 17       	cp	r18, r24
    2f0e:	39 07       	cpc	r19, r25
    2f10:	91 f5       	brne	.+100    	; 0x2f76 <_ZN12Adafruit_GFX8drawLineEiiiij+0xa6>
    2f12:	29 85       	ldd	r18, Y+9	; 0x09
    2f14:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1a:	82 17       	cp	r24, r18
    2f1c:	93 07       	cpc	r25, r19
    2f1e:	64 f4       	brge	.+24     	; 0x2f38 <_ZN12Adafruit_GFX8drawLineEiiiij+0x68>
    2f20:	89 85       	ldd	r24, Y+9	; 0x09
    2f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
    2f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2c:	9a 87       	std	Y+10, r25	; 0x0a
    2f2e:	89 87       	std	Y+9, r24	; 0x09
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	9a 81       	ldd	r25, Y+2	; 0x02
    2f34:	9e 87       	std	Y+14, r25	; 0x0e
    2f36:	8d 87       	std	Y+13, r24	; 0x0d
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	8d 91       	ld	r24, X+
    2f40:	9c 91       	ld	r25, X
    2f42:	4c 96       	adiw	r24, 0x1c	; 28
    2f44:	dc 01       	movw	r26, r24
    2f46:	ed 91       	ld	r30, X+
    2f48:	fc 91       	ld	r31, X
    2f4a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f4c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f4e:	89 85       	ldd	r24, Y+9	; 0x09
    2f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f52:	a9 01       	movw	r20, r18
    2f54:	48 1b       	sub	r20, r24
    2f56:	59 0b       	sbc	r21, r25
    2f58:	ca 01       	movw	r24, r20
    2f5a:	9c 01       	movw	r18, r24
    2f5c:	2f 5f       	subi	r18, 0xFF	; 255
    2f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f60:	af 85       	ldd	r26, Y+15	; 0x0f
    2f62:	b8 89       	ldd	r27, Y+16	; 0x10
    2f64:	49 85       	ldd	r20, Y+9	; 0x09
    2f66:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f68:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6a:	78 85       	ldd	r23, Y+8	; 0x08
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	8d 01       	movw	r16, r26
    2f72:	19 95       	eicall
    2f74:	6b c0       	rjmp	.+214    	; 0x304c <_ZN12Adafruit_GFX8drawLineEiiiij+0x17c>
    2f76:	29 85       	ldd	r18, Y+9	; 0x09
    2f78:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7e:	28 17       	cp	r18, r24
    2f80:	39 07       	cpc	r19, r25
    2f82:	91 f5       	brne	.+100    	; 0x2fe8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x118>
    2f84:	2f 81       	ldd	r18, Y+7	; 0x07
    2f86:	38 85       	ldd	r19, Y+8	; 0x08
    2f88:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f8c:	82 17       	cp	r24, r18
    2f8e:	93 07       	cpc	r25, r19
    2f90:	64 f4       	brge	.+24     	; 0x2faa <_ZN12Adafruit_GFX8drawLineEiiiij+0xda>
    2f92:	8f 81       	ldd	r24, Y+7	; 0x07
    2f94:	98 85       	ldd	r25, Y+8	; 0x08
    2f96:	9c 83       	std	Y+4, r25	; 0x04
    2f98:	8b 83       	std	Y+3, r24	; 0x03
    2f9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f9e:	98 87       	std	Y+8, r25	; 0x08
    2fa0:	8f 83       	std	Y+7, r24	; 0x07
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa6:	9c 87       	std	Y+12, r25	; 0x0c
    2fa8:	8b 87       	std	Y+11, r24	; 0x0b
    2faa:	8d 81       	ldd	r24, Y+5	; 0x05
    2fac:	9e 81       	ldd	r25, Y+6	; 0x06
    2fae:	dc 01       	movw	r26, r24
    2fb0:	8d 91       	ld	r24, X+
    2fb2:	9c 91       	ld	r25, X
    2fb4:	4e 96       	adiw	r24, 0x1e	; 30
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	ed 91       	ld	r30, X+
    2fba:	fc 91       	ld	r31, X
    2fbc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fbe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc2:	98 85       	ldd	r25, Y+8	; 0x08
    2fc4:	a9 01       	movw	r20, r18
    2fc6:	48 1b       	sub	r20, r24
    2fc8:	59 0b       	sbc	r21, r25
    2fca:	ca 01       	movw	r24, r20
    2fcc:	9c 01       	movw	r18, r24
    2fce:	2f 5f       	subi	r18, 0xFF	; 255
    2fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd2:	af 85       	ldd	r26, Y+15	; 0x0f
    2fd4:	b8 89       	ldd	r27, Y+16	; 0x10
    2fd6:	49 85       	ldd	r20, Y+9	; 0x09
    2fd8:	5a 85       	ldd	r21, Y+10	; 0x0a
    2fda:	6f 81       	ldd	r22, Y+7	; 0x07
    2fdc:	78 85       	ldd	r23, Y+8	; 0x08
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	8d 01       	movw	r16, r26
    2fe4:	19 95       	eicall
    2fe6:	32 c0       	rjmp	.+100    	; 0x304c <_ZN12Adafruit_GFX8drawLineEiiiij+0x17c>
    2fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fea:	9e 81       	ldd	r25, Y+6	; 0x06
    2fec:	dc 01       	movw	r26, r24
    2fee:	8d 91       	ld	r24, X+
    2ff0:	9c 91       	ld	r25, X
    2ff2:	0a 96       	adiw	r24, 0x0a	; 10
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	20 81       	ld	r18, Z
    2ff8:	31 81       	ldd	r19, Z+1	; 0x01
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	f9 01       	movw	r30, r18
    3000:	19 95       	eicall
    3002:	8d 81       	ldd	r24, Y+5	; 0x05
    3004:	9e 81       	ldd	r25, Y+6	; 0x06
    3006:	dc 01       	movw	r26, r24
    3008:	8d 91       	ld	r24, X+
    300a:	9c 91       	ld	r25, X
    300c:	44 96       	adiw	r24, 0x14	; 20
    300e:	dc 01       	movw	r26, r24
    3010:	ed 91       	ld	r30, X+
    3012:	fc 91       	ld	r31, X
    3014:	0f 85       	ldd	r16, Y+15	; 0x0f
    3016:	18 89       	ldd	r17, Y+16	; 0x10
    3018:	ad 85       	ldd	r26, Y+13	; 0x0d
    301a:	be 85       	ldd	r27, Y+14	; 0x0e
    301c:	2b 85       	ldd	r18, Y+11	; 0x0b
    301e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3020:	49 85       	ldd	r20, Y+9	; 0x09
    3022:	5a 85       	ldd	r21, Y+10	; 0x0a
    3024:	6f 81       	ldd	r22, Y+7	; 0x07
    3026:	78 85       	ldd	r23, Y+8	; 0x08
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	9e 81       	ldd	r25, Y+6	; 0x06
    302c:	78 01       	movw	r14, r16
    302e:	8d 01       	movw	r16, r26
    3030:	19 95       	eicall
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	9e 81       	ldd	r25, Y+6	; 0x06
    3036:	fc 01       	movw	r30, r24
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	46 96       	adiw	r24, 0x16	; 22
    303e:	dc 01       	movw	r26, r24
    3040:	2d 91       	ld	r18, X+
    3042:	3c 91       	ld	r19, X
    3044:	8d 81       	ldd	r24, Y+5	; 0x05
    3046:	9e 81       	ldd	r25, Y+6	; 0x06
    3048:	f9 01       	movw	r30, r18
    304a:	19 95       	eicall
    304c:	00 00       	nop
    304e:	60 96       	adiw	r28, 0x10	; 16
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	df 91       	pop	r29
    305c:	cf 91       	pop	r28
    305e:	1f 91       	pop	r17
    3060:	0f 91       	pop	r16
    3062:	ff 90       	pop	r15
    3064:	ef 90       	pop	r14
    3066:	08 95       	ret

00003068 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    3068:	ef 92       	push	r14
    306a:	ff 92       	push	r15
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	2c 97       	sbiw	r28, 0x0c	; 12
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	f8 94       	cli
    307e:	de bf       	out	0x3e, r29	; 62
    3080:	0f be       	out	0x3f, r0	; 63
    3082:	cd bf       	out	0x3d, r28	; 61
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01
    3088:	7c 83       	std	Y+4, r23	; 0x04
    308a:	6b 83       	std	Y+3, r22	; 0x03
    308c:	5e 83       	std	Y+6, r21	; 0x06
    308e:	4d 83       	std	Y+5, r20	; 0x05
    3090:	38 87       	std	Y+8, r19	; 0x08
    3092:	2f 83       	std	Y+7, r18	; 0x07
    3094:	1a 87       	std	Y+10, r17	; 0x0a
    3096:	09 87       	std	Y+9, r16	; 0x09
    3098:	fc 86       	std	Y+12, r15	; 0x0c
    309a:	eb 86       	std	Y+11, r14	; 0x0b
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	9a 81       	ldd	r25, Y+2	; 0x02
    30a0:	dc 01       	movw	r26, r24
    30a2:	8d 91       	ld	r24, X+
    30a4:	9c 91       	ld	r25, X
    30a6:	0a 96       	adiw	r24, 0x0a	; 10
    30a8:	fc 01       	movw	r30, r24
    30aa:	20 81       	ld	r18, Z
    30ac:	31 81       	ldd	r19, Z+1	; 0x01
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	9a 81       	ldd	r25, Y+2	; 0x02
    30b2:	f9 01       	movw	r30, r18
    30b4:	19 95       	eicall
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ba:	dc 01       	movw	r26, r24
    30bc:	8d 91       	ld	r24, X+
    30be:	9c 91       	ld	r25, X
    30c0:	42 96       	adiw	r24, 0x12	; 18
    30c2:	dc 01       	movw	r26, r24
    30c4:	ed 91       	ld	r30, X+
    30c6:	fc 91       	ld	r31, X
    30c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    30ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    30cc:	2f 81       	ldd	r18, Y+7	; 0x07
    30ce:	38 85       	ldd	r19, Y+8	; 0x08
    30d0:	4d 81       	ldd	r20, Y+5	; 0x05
    30d2:	5e 81       	ldd	r21, Y+6	; 0x06
    30d4:	6b 81       	ldd	r22, Y+3	; 0x03
    30d6:	7c 81       	ldd	r23, Y+4	; 0x04
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	8d 01       	movw	r16, r26
    30de:	19 95       	eicall
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	9a 81       	ldd	r25, Y+2	; 0x02
    30e4:	fc 01       	movw	r30, r24
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	42 96       	adiw	r24, 0x12	; 18
    30ec:	dc 01       	movw	r26, r24
    30ee:	ed 91       	ld	r30, X+
    30f0:	fc 91       	ld	r31, X
    30f2:	2d 81       	ldd	r18, Y+5	; 0x05
    30f4:	3e 81       	ldd	r19, Y+6	; 0x06
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	82 0f       	add	r24, r18
    30fc:	93 1f       	adc	r25, r19
    30fe:	ac 01       	movw	r20, r24
    3100:	41 50       	subi	r20, 0x01	; 1
    3102:	51 09       	sbc	r21, r1
    3104:	ab 85       	ldd	r26, Y+11	; 0x0b
    3106:	bc 85       	ldd	r27, Y+12	; 0x0c
    3108:	2f 81       	ldd	r18, Y+7	; 0x07
    310a:	38 85       	ldd	r19, Y+8	; 0x08
    310c:	6b 81       	ldd	r22, Y+3	; 0x03
    310e:	7c 81       	ldd	r23, Y+4	; 0x04
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	8d 01       	movw	r16, r26
    3116:	19 95       	eicall
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	fc 01       	movw	r30, r24
    311e:	80 81       	ld	r24, Z
    3120:	91 81       	ldd	r25, Z+1	; 0x01
    3122:	40 96       	adiw	r24, 0x10	; 16
    3124:	dc 01       	movw	r26, r24
    3126:	ed 91       	ld	r30, X+
    3128:	fc 91       	ld	r31, X
    312a:	ab 85       	ldd	r26, Y+11	; 0x0b
    312c:	bc 85       	ldd	r27, Y+12	; 0x0c
    312e:	29 85       	ldd	r18, Y+9	; 0x09
    3130:	3a 85       	ldd	r19, Y+10	; 0x0a
    3132:	4d 81       	ldd	r20, Y+5	; 0x05
    3134:	5e 81       	ldd	r21, Y+6	; 0x06
    3136:	6b 81       	ldd	r22, Y+3	; 0x03
    3138:	7c 81       	ldd	r23, Y+4	; 0x04
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	9a 81       	ldd	r25, Y+2	; 0x02
    313e:	8d 01       	movw	r16, r26
    3140:	19 95       	eicall
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	fc 01       	movw	r30, r24
    3148:	80 81       	ld	r24, Z
    314a:	91 81       	ldd	r25, Z+1	; 0x01
    314c:	40 96       	adiw	r24, 0x10	; 16
    314e:	dc 01       	movw	r26, r24
    3150:	ed 91       	ld	r30, X+
    3152:	fc 91       	ld	r31, X
    3154:	2b 81       	ldd	r18, Y+3	; 0x03
    3156:	3c 81       	ldd	r19, Y+4	; 0x04
    3158:	8f 81       	ldd	r24, Y+7	; 0x07
    315a:	98 85       	ldd	r25, Y+8	; 0x08
    315c:	82 0f       	add	r24, r18
    315e:	93 1f       	adc	r25, r19
    3160:	bc 01       	movw	r22, r24
    3162:	61 50       	subi	r22, 0x01	; 1
    3164:	71 09       	sbc	r23, r1
    3166:	ab 85       	ldd	r26, Y+11	; 0x0b
    3168:	bc 85       	ldd	r27, Y+12	; 0x0c
    316a:	29 85       	ldd	r18, Y+9	; 0x09
    316c:	3a 85       	ldd	r19, Y+10	; 0x0a
    316e:	4d 81       	ldd	r20, Y+5	; 0x05
    3170:	5e 81       	ldd	r21, Y+6	; 0x06
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	8d 01       	movw	r16, r26
    3178:	19 95       	eicall
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	fc 01       	movw	r30, r24
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	46 96       	adiw	r24, 0x16	; 22
    3186:	dc 01       	movw	r26, r24
    3188:	2d 91       	ld	r18, X+
    318a:	3c 91       	ld	r19, X
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	f9 01       	movw	r30, r18
    3192:	19 95       	eicall
    3194:	00 00       	nop
    3196:	2c 96       	adiw	r28, 0x0c	; 12
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	ff 90       	pop	r15
    31ac:	ef 90       	pop	r14
    31ae:	08 95       	ret

000031b0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    31b0:	cf 92       	push	r12
    31b2:	df 92       	push	r13
    31b4:	ef 92       	push	r14
    31b6:	ff 92       	push	r15
    31b8:	0f 93       	push	r16
    31ba:	1f 93       	push	r17
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	68 97       	sbiw	r28, 0x18	; 24
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	9c 87       	std	Y+12, r25	; 0x0c
    31d2:	8b 87       	std	Y+11, r24	; 0x0b
    31d4:	7e 87       	std	Y+14, r23	; 0x0e
    31d6:	6d 87       	std	Y+13, r22	; 0x0d
    31d8:	58 8b       	std	Y+16, r21	; 0x10
    31da:	4f 87       	std	Y+15, r20	; 0x0f
    31dc:	3a 8b       	std	Y+18, r19	; 0x12
    31de:	29 8b       	std	Y+17, r18	; 0x11
    31e0:	1c 8b       	std	Y+20, r17	; 0x14
    31e2:	0b 8b       	std	Y+19, r16	; 0x13
    31e4:	fe 8a       	std	Y+22, r15	; 0x16
    31e6:	ed 8a       	std	Y+21, r14	; 0x15
    31e8:	d8 8e       	std	Y+24, r13	; 0x18
    31ea:	cf 8a       	std	Y+23, r12	; 0x17
    31ec:	8b 89       	ldd	r24, Y+19	; 0x13
    31ee:	9c 89       	ldd	r25, Y+20	; 0x14
    31f0:	07 96       	adiw	r24, 0x07	; 7
    31f2:	99 23       	and	r25, r25
    31f4:	0c f4       	brge	.+2      	; 0x31f8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x48>
    31f6:	07 96       	adiw	r24, 0x07	; 7
    31f8:	95 95       	asr	r25
    31fa:	87 95       	ror	r24
    31fc:	95 95       	asr	r25
    31fe:	87 95       	ror	r24
    3200:	95 95       	asr	r25
    3202:	87 95       	ror	r24
    3204:	9f 83       	std	Y+7, r25	; 0x07
    3206:	8e 83       	std	Y+6, r24	; 0x06
    3208:	19 82       	std	Y+1, r1	; 0x01
    320a:	8b 85       	ldd	r24, Y+11	; 0x0b
    320c:	9c 85       	ldd	r25, Y+12	; 0x0c
    320e:	dc 01       	movw	r26, r24
    3210:	8d 91       	ld	r24, X+
    3212:	9c 91       	ld	r25, X
    3214:	0a 96       	adiw	r24, 0x0a	; 10
    3216:	fc 01       	movw	r30, r24
    3218:	20 81       	ld	r18, Z
    321a:	31 81       	ldd	r19, Z+1	; 0x01
    321c:	8b 85       	ldd	r24, Y+11	; 0x0b
    321e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3220:	f9 01       	movw	r30, r18
    3222:	19 95       	eicall
    3224:	1b 82       	std	Y+3, r1	; 0x03
    3226:	1a 82       	std	Y+2, r1	; 0x02
    3228:	2a 81       	ldd	r18, Y+2	; 0x02
    322a:	3b 81       	ldd	r19, Y+3	; 0x03
    322c:	8d 89       	ldd	r24, Y+21	; 0x15
    322e:	9e 89       	ldd	r25, Y+22	; 0x16
    3230:	28 17       	cp	r18, r24
    3232:	39 07       	cpc	r19, r25
    3234:	0c f0       	brlt	.+2      	; 0x3238 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    3236:	65 c0       	rjmp	.+202    	; 0x3302 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x152>
    3238:	1d 82       	std	Y+5, r1	; 0x05
    323a:	1c 82       	std	Y+4, r1	; 0x04
    323c:	2c 81       	ldd	r18, Y+4	; 0x04
    323e:	3d 81       	ldd	r19, Y+5	; 0x05
    3240:	8b 89       	ldd	r24, Y+19	; 0x13
    3242:	9c 89       	ldd	r25, Y+20	; 0x14
    3244:	28 17       	cp	r18, r24
    3246:	39 07       	cpc	r19, r25
    3248:	0c f0       	brlt	.+2      	; 0x324c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x9c>
    324a:	50 c0       	rjmp	.+160    	; 0x32ec <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x13c>
    324c:	8c 81       	ldd	r24, Y+4	; 0x04
    324e:	9d 81       	ldd	r25, Y+5	; 0x05
    3250:	87 70       	andi	r24, 0x07	; 7
    3252:	99 27       	eor	r25, r25
    3254:	89 2b       	or	r24, r25
    3256:	21 f0       	breq	.+8      	; 0x3260 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xb0>
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	88 0f       	add	r24, r24
    325c:	89 83       	std	Y+1, r24	; 0x01
    325e:	26 c0       	rjmp	.+76     	; 0x32ac <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfc>
    3260:	4a 81       	ldd	r20, Y+2	; 0x02
    3262:	5b 81       	ldd	r21, Y+3	; 0x03
    3264:	8e 81       	ldd	r24, Y+6	; 0x06
    3266:	9f 81       	ldd	r25, Y+7	; 0x07
    3268:	48 9f       	mul	r20, r24
    326a:	90 01       	movw	r18, r0
    326c:	49 9f       	mul	r20, r25
    326e:	30 0d       	add	r19, r0
    3270:	58 9f       	mul	r21, r24
    3272:	30 0d       	add	r19, r0
    3274:	11 24       	eor	r1, r1
    3276:	8c 81       	ldd	r24, Y+4	; 0x04
    3278:	9d 81       	ldd	r25, Y+5	; 0x05
    327a:	99 23       	and	r25, r25
    327c:	0c f4       	brge	.+2      	; 0x3280 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xd0>
    327e:	07 96       	adiw	r24, 0x07	; 7
    3280:	95 95       	asr	r25
    3282:	87 95       	ror	r24
    3284:	95 95       	asr	r25
    3286:	87 95       	ror	r24
    3288:	95 95       	asr	r25
    328a:	87 95       	ror	r24
    328c:	82 0f       	add	r24, r18
    328e:	93 1f       	adc	r25, r19
    3290:	9c 01       	movw	r18, r24
    3292:	89 89       	ldd	r24, Y+17	; 0x11
    3294:	9a 89       	ldd	r25, Y+18	; 0x12
    3296:	82 0f       	add	r24, r18
    3298:	93 1f       	adc	r25, r19
    329a:	99 87       	std	Y+9, r25	; 0x09
    329c:	88 87       	std	Y+8, r24	; 0x08
    329e:	88 85       	ldd	r24, Y+8	; 0x08
    32a0:	99 85       	ldd	r25, Y+9	; 0x09
    32a2:	fc 01       	movw	r30, r24
    32a4:	84 91       	lpm	r24, Z
    32a6:	8a 87       	std	Y+10, r24	; 0x0a
    32a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	88 23       	and	r24, r24
    32b0:	bc f4       	brge	.+46     	; 0x32e0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x130>
    32b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    32b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    32b6:	dc 01       	movw	r26, r24
    32b8:	8d 91       	ld	r24, X+
    32ba:	9c 91       	ld	r25, X
    32bc:	0c 96       	adiw	r24, 0x0c	; 12
    32be:	dc 01       	movw	r26, r24
    32c0:	ed 91       	ld	r30, X+
    32c2:	fc 91       	ld	r31, X
    32c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    32c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    32c8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ca:	9d 81       	ldd	r25, Y+5	; 0x05
    32cc:	b9 01       	movw	r22, r18
    32ce:	68 0f       	add	r22, r24
    32d0:	79 1f       	adc	r23, r25
    32d2:	2f 89       	ldd	r18, Y+23	; 0x17
    32d4:	38 8d       	ldd	r19, Y+24	; 0x18
    32d6:	4f 85       	ldd	r20, Y+15	; 0x0f
    32d8:	58 89       	ldd	r21, Y+16	; 0x10
    32da:	8b 85       	ldd	r24, Y+11	; 0x0b
    32dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    32de:	19 95       	eicall
    32e0:	8c 81       	ldd	r24, Y+4	; 0x04
    32e2:	9d 81       	ldd	r25, Y+5	; 0x05
    32e4:	01 96       	adiw	r24, 0x01	; 1
    32e6:	9d 83       	std	Y+5, r25	; 0x05
    32e8:	8c 83       	std	Y+4, r24	; 0x04
    32ea:	a8 cf       	rjmp	.-176    	; 0x323c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x8c>
    32ec:	8a 81       	ldd	r24, Y+2	; 0x02
    32ee:	9b 81       	ldd	r25, Y+3	; 0x03
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	9b 83       	std	Y+3, r25	; 0x03
    32f4:	8a 83       	std	Y+2, r24	; 0x02
    32f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f8:	98 89       	ldd	r25, Y+16	; 0x10
    32fa:	01 96       	adiw	r24, 0x01	; 1
    32fc:	98 8b       	std	Y+16, r25	; 0x10
    32fe:	8f 87       	std	Y+15, r24	; 0x0f
    3300:	93 cf       	rjmp	.-218    	; 0x3228 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x78>
    3302:	8b 85       	ldd	r24, Y+11	; 0x0b
    3304:	9c 85       	ldd	r25, Y+12	; 0x0c
    3306:	fc 01       	movw	r30, r24
    3308:	80 81       	ld	r24, Z
    330a:	91 81       	ldd	r25, Z+1	; 0x01
    330c:	46 96       	adiw	r24, 0x16	; 22
    330e:	dc 01       	movw	r26, r24
    3310:	2d 91       	ld	r18, X+
    3312:	3c 91       	ld	r19, X
    3314:	8b 85       	ldd	r24, Y+11	; 0x0b
    3316:	9c 85       	ldd	r25, Y+12	; 0x0c
    3318:	f9 01       	movw	r30, r18
    331a:	19 95       	eicall
    331c:	00 00       	nop
    331e:	68 96       	adiw	r28, 0x18	; 24
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	1f 91       	pop	r17
    3330:	0f 91       	pop	r16
    3332:	ff 90       	pop	r15
    3334:	ef 90       	pop	r14
    3336:	df 90       	pop	r13
    3338:	cf 90       	pop	r12
    333a:	08 95       	ret

0000333c <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    333c:	af 92       	push	r10
    333e:	cf 92       	push	r12
    3340:	df 92       	push	r13
    3342:	ef 92       	push	r14
    3344:	ff 92       	push	r15
    3346:	0f 93       	push	r16
    3348:	1f 93       	push	r17
    334a:	cf 93       	push	r28
    334c:	df 93       	push	r29
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
    3352:	eb 97       	sbiw	r28, 0x3b	; 59
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	f8 94       	cli
    3358:	de bf       	out	0x3e, r29	; 62
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	cd bf       	out	0x3d, r28	; 61
    335e:	98 ab       	std	Y+48, r25	; 0x30
    3360:	8f a7       	std	Y+47, r24	; 0x2f
    3362:	7a ab       	std	Y+50, r23	; 0x32
    3364:	69 ab       	std	Y+49, r22	; 0x31
    3366:	5c ab       	std	Y+52, r21	; 0x34
    3368:	4b ab       	std	Y+51, r20	; 0x33
    336a:	2d ab       	std	Y+53, r18	; 0x35
    336c:	1f ab       	std	Y+55, r17	; 0x37
    336e:	0e ab       	std	Y+54, r16	; 0x36
    3370:	f9 ae       	std	Y+57, r15	; 0x39
    3372:	e8 ae       	std	Y+56, r14	; 0x38
    3374:	ca ae       	std	Y+58, r12	; 0x3a
    3376:	ab ae       	std	Y+59, r10	; 0x3b
    3378:	8f a5       	ldd	r24, Y+47	; 0x2f
    337a:	98 a9       	ldd	r25, Y+48	; 0x30
    337c:	dc 01       	movw	r26, r24
    337e:	59 96       	adiw	r26, 0x19	; 25
    3380:	8d 91       	ld	r24, X+
    3382:	9c 91       	ld	r25, X
    3384:	5a 97       	sbiw	r26, 0x1a	; 26
    3386:	89 2b       	or	r24, r25
    3388:	09 f0       	breq	.+2      	; 0x338c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x50>
    338a:	c7 c1       	rjmp	.+910    	; 0x371a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3de>
    338c:	8f a5       	ldd	r24, Y+47	; 0x2f
    338e:	98 a9       	ldd	r25, Y+48	; 0x30
    3390:	fc 01       	movw	r30, r24
    3392:	20 85       	ldd	r18, Z+8	; 0x08
    3394:	31 85       	ldd	r19, Z+9	; 0x09
    3396:	89 a9       	ldd	r24, Y+49	; 0x31
    3398:	9a a9       	ldd	r25, Y+50	; 0x32
    339a:	82 17       	cp	r24, r18
    339c:	93 07       	cpc	r25, r19
    339e:	0c f0       	brlt	.+2      	; 0x33a2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x66>
    33a0:	0e c3       	rjmp	.+1564   	; 0x39be <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    33a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    33a4:	98 a9       	ldd	r25, Y+48	; 0x30
    33a6:	dc 01       	movw	r26, r24
    33a8:	1a 96       	adiw	r26, 0x0a	; 10
    33aa:	2d 91       	ld	r18, X+
    33ac:	3c 91       	ld	r19, X
    33ae:	1b 97       	sbiw	r26, 0x0b	; 11
    33b0:	8b a9       	ldd	r24, Y+51	; 0x33
    33b2:	9c a9       	ldd	r25, Y+52	; 0x34
    33b4:	82 17       	cp	r24, r18
    33b6:	93 07       	cpc	r25, r19
    33b8:	0c f0       	brlt	.+2      	; 0x33bc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x80>
    33ba:	01 c3       	rjmp	.+1538   	; 0x39be <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    33bc:	8a ad       	ldd	r24, Y+58	; 0x3a
    33be:	28 2f       	mov	r18, r24
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	c9 01       	movw	r24, r18
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	82 0f       	add	r24, r18
    33ca:	93 1f       	adc	r25, r19
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	9c 01       	movw	r18, r24
    33d2:	89 a9       	ldd	r24, Y+49	; 0x31
    33d4:	9a a9       	ldd	r25, Y+50	; 0x32
    33d6:	82 0f       	add	r24, r18
    33d8:	93 1f       	adc	r25, r19
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	99 23       	and	r25, r25
    33de:	0c f4       	brge	.+2      	; 0x33e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa6>
    33e0:	ee c2       	rjmp	.+1500   	; 0x39be <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    33e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    33e4:	88 2f       	mov	r24, r24
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9c 01       	movw	r18, r24
    33ea:	22 0f       	add	r18, r18
    33ec:	33 1f       	adc	r19, r19
    33ee:	22 0f       	add	r18, r18
    33f0:	33 1f       	adc	r19, r19
    33f2:	22 0f       	add	r18, r18
    33f4:	33 1f       	adc	r19, r19
    33f6:	8b a9       	ldd	r24, Y+51	; 0x33
    33f8:	9c a9       	ldd	r25, Y+52	; 0x34
    33fa:	82 0f       	add	r24, r18
    33fc:	93 1f       	adc	r25, r19
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	99 23       	and	r25, r25
    3402:	0c f4       	brge	.+2      	; 0x3406 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xca>
    3404:	dc c2       	rjmp	.+1464   	; 0x39be <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    3406:	8f a5       	ldd	r24, Y+47	; 0x2f
    3408:	98 a9       	ldd	r25, Y+48	; 0x30
    340a:	fc 01       	movw	r30, r24
    340c:	90 8d       	ldd	r25, Z+24	; 0x18
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	89 27       	eor	r24, r25
    3412:	88 23       	and	r24, r24
    3414:	31 f0       	breq	.+12     	; 0x3422 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xe6>
    3416:	8d a9       	ldd	r24, Y+53	; 0x35
    3418:	80 3b       	cpi	r24, 0xB0	; 176
    341a:	18 f0       	brcs	.+6      	; 0x3422 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xe6>
    341c:	8d a9       	ldd	r24, Y+53	; 0x35
    341e:	8f 5f       	subi	r24, 0xFF	; 255
    3420:	8d ab       	std	Y+53, r24	; 0x35
    3422:	8f a5       	ldd	r24, Y+47	; 0x2f
    3424:	98 a9       	ldd	r25, Y+48	; 0x30
    3426:	dc 01       	movw	r26, r24
    3428:	8d 91       	ld	r24, X+
    342a:	9c 91       	ld	r25, X
    342c:	0a 96       	adiw	r24, 0x0a	; 10
    342e:	fc 01       	movw	r30, r24
    3430:	20 81       	ld	r18, Z
    3432:	31 81       	ldd	r19, Z+1	; 0x01
    3434:	8f a5       	ldd	r24, Y+47	; 0x2f
    3436:	98 a9       	ldd	r25, Y+48	; 0x30
    3438:	f9 01       	movw	r30, r18
    343a:	19 95       	eicall
    343c:	19 82       	std	Y+1, r1	; 0x01
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	85 30       	cpi	r24, 0x05	; 5
    3442:	0c f0       	brlt	.+2      	; 0x3446 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x10a>
    3444:	07 c1       	rjmp	.+526    	; 0x3654 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x318>
    3446:	8d a9       	ldd	r24, Y+53	; 0x35
    3448:	28 2f       	mov	r18, r24
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	c9 01       	movw	r24, r18
    344e:	88 0f       	add	r24, r24
    3450:	99 1f       	adc	r25, r25
    3452:	88 0f       	add	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	28 0f       	add	r18, r24
    3458:	39 1f       	adc	r19, r25
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	08 2e       	mov	r0, r24
    345e:	00 0c       	add	r0, r0
    3460:	99 0b       	sbc	r25, r25
    3462:	82 0f       	add	r24, r18
    3464:	93 1f       	adc	r25, r19
    3466:	80 57       	subi	r24, 0x70	; 112
    3468:	9e 4f       	sbci	r25, 0xFE	; 254
    346a:	9f 87       	std	Y+15, r25	; 0x0f
    346c:	8e 87       	std	Y+14, r24	; 0x0e
    346e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3470:	9f 85       	ldd	r25, Y+15	; 0x0f
    3472:	fc 01       	movw	r30, r24
    3474:	84 91       	lpm	r24, Z
    3476:	88 8b       	std	Y+16, r24	; 0x10
    3478:	88 89       	ldd	r24, Y+16	; 0x10
    347a:	8a 83       	std	Y+2, r24	; 0x02
    347c:	1b 82       	std	Y+3, r1	; 0x03
    347e:	8b 81       	ldd	r24, Y+3	; 0x03
    3480:	88 30       	cpi	r24, 0x08	; 8
    3482:	0c f0       	brlt	.+2      	; 0x3486 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x14a>
    3484:	e3 c0       	rjmp	.+454    	; 0x364c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x310>
    3486:	8a 81       	ldd	r24, Y+2	; 0x02
    3488:	88 2f       	mov	r24, r24
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	81 70       	andi	r24, 0x01	; 1
    348e:	99 27       	eor	r25, r25
    3490:	89 2b       	or	r24, r25
    3492:	09 f4       	brne	.+2      	; 0x3496 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    3494:	65 c0       	rjmp	.+202    	; 0x3560 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x224>
    3496:	8a ad       	ldd	r24, Y+58	; 0x3a
    3498:	81 30       	cpi	r24, 0x01	; 1
    349a:	21 f5       	brne	.+72     	; 0x34e4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a8>
    349c:	8b ad       	ldd	r24, Y+59	; 0x3b
    349e:	81 30       	cpi	r24, 0x01	; 1
    34a0:	09 f5       	brne	.+66     	; 0x34e4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a8>
    34a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a4:	98 a9       	ldd	r25, Y+48	; 0x30
    34a6:	dc 01       	movw	r26, r24
    34a8:	8d 91       	ld	r24, X+
    34aa:	9c 91       	ld	r25, X
    34ac:	0c 96       	adiw	r24, 0x0c	; 12
    34ae:	dc 01       	movw	r26, r24
    34b0:	ed 91       	ld	r30, X+
    34b2:	fc 91       	ld	r31, X
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	28 2f       	mov	r18, r24
    34b8:	88 0f       	add	r24, r24
    34ba:	33 0b       	sbc	r19, r19
    34bc:	8b a9       	ldd	r24, Y+51	; 0x33
    34be:	9c a9       	ldd	r25, Y+52	; 0x34
    34c0:	a9 01       	movw	r20, r18
    34c2:	48 0f       	add	r20, r24
    34c4:	59 1f       	adc	r21, r25
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	28 2f       	mov	r18, r24
    34ca:	88 0f       	add	r24, r24
    34cc:	33 0b       	sbc	r19, r19
    34ce:	89 a9       	ldd	r24, Y+49	; 0x31
    34d0:	9a a9       	ldd	r25, Y+50	; 0x32
    34d2:	b9 01       	movw	r22, r18
    34d4:	68 0f       	add	r22, r24
    34d6:	79 1f       	adc	r23, r25
    34d8:	2e a9       	ldd	r18, Y+54	; 0x36
    34da:	3f a9       	ldd	r19, Y+55	; 0x37
    34dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    34de:	98 a9       	ldd	r25, Y+48	; 0x30
    34e0:	19 95       	eicall
    34e2:	aa c0       	rjmp	.+340    	; 0x3638 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    34e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    34e6:	98 a9       	ldd	r25, Y+48	; 0x30
    34e8:	fc 01       	movw	r30, r24
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	0e 96       	adiw	r24, 0x0e	; 14
    34f0:	dc 01       	movw	r26, r24
    34f2:	ed 91       	ld	r30, X+
    34f4:	fc 91       	ld	r31, X
    34f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    34f8:	08 2f       	mov	r16, r24
    34fa:	10 e0       	ldi	r17, 0x00	; 0
    34fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    34fe:	c8 2e       	mov	r12, r24
    3500:	d1 2c       	mov	r13, r1
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	48 2f       	mov	r20, r24
    3506:	88 0f       	add	r24, r24
    3508:	55 0b       	sbc	r21, r21
    350a:	8b ad       	ldd	r24, Y+59	; 0x3b
    350c:	88 2f       	mov	r24, r24
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	48 9f       	mul	r20, r24
    3512:	90 01       	movw	r18, r0
    3514:	49 9f       	mul	r20, r25
    3516:	30 0d       	add	r19, r0
    3518:	58 9f       	mul	r21, r24
    351a:	30 0d       	add	r19, r0
    351c:	11 24       	eor	r1, r1
    351e:	8b a9       	ldd	r24, Y+51	; 0x33
    3520:	9c a9       	ldd	r25, Y+52	; 0x34
    3522:	d9 01       	movw	r26, r18
    3524:	a8 0f       	add	r26, r24
    3526:	b9 1f       	adc	r27, r25
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	48 2f       	mov	r20, r24
    352c:	88 0f       	add	r24, r24
    352e:	55 0b       	sbc	r21, r21
    3530:	8a ad       	ldd	r24, Y+58	; 0x3a
    3532:	88 2f       	mov	r24, r24
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	48 9f       	mul	r20, r24
    3538:	90 01       	movw	r18, r0
    353a:	49 9f       	mul	r20, r25
    353c:	30 0d       	add	r19, r0
    353e:	58 9f       	mul	r21, r24
    3540:	30 0d       	add	r19, r0
    3542:	11 24       	eor	r1, r1
    3544:	89 a9       	ldd	r24, Y+49	; 0x31
    3546:	9a a9       	ldd	r25, Y+50	; 0x32
    3548:	b9 01       	movw	r22, r18
    354a:	68 0f       	add	r22, r24
    354c:	79 1f       	adc	r23, r25
    354e:	2e a9       	ldd	r18, Y+54	; 0x36
    3550:	3f a9       	ldd	r19, Y+55	; 0x37
    3552:	8f a5       	ldd	r24, Y+47	; 0x2f
    3554:	98 a9       	ldd	r25, Y+48	; 0x30
    3556:	79 01       	movw	r14, r18
    3558:	96 01       	movw	r18, r12
    355a:	ad 01       	movw	r20, r26
    355c:	19 95       	eicall
    355e:	6c c0       	rjmp	.+216    	; 0x3638 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    3560:	28 ad       	ldd	r18, Y+56	; 0x38
    3562:	39 ad       	ldd	r19, Y+57	; 0x39
    3564:	8e a9       	ldd	r24, Y+54	; 0x36
    3566:	9f a9       	ldd	r25, Y+55	; 0x37
    3568:	28 17       	cp	r18, r24
    356a:	39 07       	cpc	r19, r25
    356c:	09 f4       	brne	.+2      	; 0x3570 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x234>
    356e:	64 c0       	rjmp	.+200    	; 0x3638 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    3570:	8a ad       	ldd	r24, Y+58	; 0x3a
    3572:	81 30       	cpi	r24, 0x01	; 1
    3574:	21 f5       	brne	.+72     	; 0x35be <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x282>
    3576:	8b ad       	ldd	r24, Y+59	; 0x3b
    3578:	81 30       	cpi	r24, 0x01	; 1
    357a:	09 f5       	brne	.+66     	; 0x35be <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x282>
    357c:	8f a5       	ldd	r24, Y+47	; 0x2f
    357e:	98 a9       	ldd	r25, Y+48	; 0x30
    3580:	fc 01       	movw	r30, r24
    3582:	80 81       	ld	r24, Z
    3584:	91 81       	ldd	r25, Z+1	; 0x01
    3586:	0c 96       	adiw	r24, 0x0c	; 12
    3588:	dc 01       	movw	r26, r24
    358a:	ed 91       	ld	r30, X+
    358c:	fc 91       	ld	r31, X
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	28 2f       	mov	r18, r24
    3592:	88 0f       	add	r24, r24
    3594:	33 0b       	sbc	r19, r19
    3596:	8b a9       	ldd	r24, Y+51	; 0x33
    3598:	9c a9       	ldd	r25, Y+52	; 0x34
    359a:	a9 01       	movw	r20, r18
    359c:	48 0f       	add	r20, r24
    359e:	59 1f       	adc	r21, r25
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	28 2f       	mov	r18, r24
    35a4:	88 0f       	add	r24, r24
    35a6:	33 0b       	sbc	r19, r19
    35a8:	89 a9       	ldd	r24, Y+49	; 0x31
    35aa:	9a a9       	ldd	r25, Y+50	; 0x32
    35ac:	b9 01       	movw	r22, r18
    35ae:	68 0f       	add	r22, r24
    35b0:	79 1f       	adc	r23, r25
    35b2:	28 ad       	ldd	r18, Y+56	; 0x38
    35b4:	39 ad       	ldd	r19, Y+57	; 0x39
    35b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    35b8:	98 a9       	ldd	r25, Y+48	; 0x30
    35ba:	19 95       	eicall
    35bc:	3d c0       	rjmp	.+122    	; 0x3638 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    35be:	8f a5       	ldd	r24, Y+47	; 0x2f
    35c0:	98 a9       	ldd	r25, Y+48	; 0x30
    35c2:	fc 01       	movw	r30, r24
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	0e 96       	adiw	r24, 0x0e	; 14
    35ca:	dc 01       	movw	r26, r24
    35cc:	ed 91       	ld	r30, X+
    35ce:	fc 91       	ld	r31, X
    35d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    35d2:	08 2f       	mov	r16, r24
    35d4:	10 e0       	ldi	r17, 0x00	; 0
    35d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    35d8:	c8 2e       	mov	r12, r24
    35da:	d1 2c       	mov	r13, r1
    35dc:	8b 81       	ldd	r24, Y+3	; 0x03
    35de:	48 2f       	mov	r20, r24
    35e0:	88 0f       	add	r24, r24
    35e2:	55 0b       	sbc	r21, r21
    35e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    35e6:	88 2f       	mov	r24, r24
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	48 9f       	mul	r20, r24
    35ec:	90 01       	movw	r18, r0
    35ee:	49 9f       	mul	r20, r25
    35f0:	30 0d       	add	r19, r0
    35f2:	58 9f       	mul	r21, r24
    35f4:	30 0d       	add	r19, r0
    35f6:	11 24       	eor	r1, r1
    35f8:	8b a9       	ldd	r24, Y+51	; 0x33
    35fa:	9c a9       	ldd	r25, Y+52	; 0x34
    35fc:	d9 01       	movw	r26, r18
    35fe:	a8 0f       	add	r26, r24
    3600:	b9 1f       	adc	r27, r25
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	48 2f       	mov	r20, r24
    3606:	88 0f       	add	r24, r24
    3608:	55 0b       	sbc	r21, r21
    360a:	8a ad       	ldd	r24, Y+58	; 0x3a
    360c:	88 2f       	mov	r24, r24
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	48 9f       	mul	r20, r24
    3612:	90 01       	movw	r18, r0
    3614:	49 9f       	mul	r20, r25
    3616:	30 0d       	add	r19, r0
    3618:	58 9f       	mul	r21, r24
    361a:	30 0d       	add	r19, r0
    361c:	11 24       	eor	r1, r1
    361e:	89 a9       	ldd	r24, Y+49	; 0x31
    3620:	9a a9       	ldd	r25, Y+50	; 0x32
    3622:	b9 01       	movw	r22, r18
    3624:	68 0f       	add	r22, r24
    3626:	79 1f       	adc	r23, r25
    3628:	28 ad       	ldd	r18, Y+56	; 0x38
    362a:	39 ad       	ldd	r19, Y+57	; 0x39
    362c:	8f a5       	ldd	r24, Y+47	; 0x2f
    362e:	98 a9       	ldd	r25, Y+48	; 0x30
    3630:	79 01       	movw	r14, r18
    3632:	96 01       	movw	r18, r12
    3634:	ad 01       	movw	r20, r26
    3636:	19 95       	eicall
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	8f 5f       	subi	r24, 0xFF	; 255
    363c:	8b 83       	std	Y+3, r24	; 0x03
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	95 95       	asr	r25
    3646:	87 95       	ror	r24
    3648:	8a 83       	std	Y+2, r24	; 0x02
    364a:	19 cf       	rjmp	.-462    	; 0x347e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x142>
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	8f 5f       	subi	r24, 0xFF	; 255
    3650:	89 83       	std	Y+1, r24	; 0x01
    3652:	f5 ce       	rjmp	.-534    	; 0x343e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x102>
    3654:	28 ad       	ldd	r18, Y+56	; 0x38
    3656:	39 ad       	ldd	r19, Y+57	; 0x39
    3658:	8e a9       	ldd	r24, Y+54	; 0x36
    365a:	9f a9       	ldd	r25, Y+55	; 0x37
    365c:	28 17       	cp	r18, r24
    365e:	39 07       	cpc	r19, r25
    3660:	09 f4       	brne	.+2      	; 0x3664 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x328>
    3662:	4d c0       	rjmp	.+154    	; 0x36fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3c2>
    3664:	8a ad       	ldd	r24, Y+58	; 0x3a
    3666:	81 30       	cpi	r24, 0x01	; 1
    3668:	e1 f4       	brne	.+56     	; 0x36a2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x366>
    366a:	8b ad       	ldd	r24, Y+59	; 0x3b
    366c:	81 30       	cpi	r24, 0x01	; 1
    366e:	c9 f4       	brne	.+50     	; 0x36a2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x366>
    3670:	8f a5       	ldd	r24, Y+47	; 0x2f
    3672:	98 a9       	ldd	r25, Y+48	; 0x30
    3674:	fc 01       	movw	r30, r24
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	40 96       	adiw	r24, 0x10	; 16
    367c:	dc 01       	movw	r26, r24
    367e:	ed 91       	ld	r30, X+
    3680:	fc 91       	ld	r31, X
    3682:	89 a9       	ldd	r24, Y+49	; 0x31
    3684:	9a a9       	ldd	r25, Y+50	; 0x32
    3686:	bc 01       	movw	r22, r24
    3688:	6b 5f       	subi	r22, 0xFB	; 251
    368a:	7f 4f       	sbci	r23, 0xFF	; 255
    368c:	28 ad       	ldd	r18, Y+56	; 0x38
    368e:	39 ad       	ldd	r19, Y+57	; 0x39
    3690:	4b a9       	ldd	r20, Y+51	; 0x33
    3692:	5c a9       	ldd	r21, Y+52	; 0x34
    3694:	8f a5       	ldd	r24, Y+47	; 0x2f
    3696:	98 a9       	ldd	r25, Y+48	; 0x30
    3698:	89 01       	movw	r16, r18
    369a:	28 e0       	ldi	r18, 0x08	; 8
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	19 95       	eicall
    36a0:	2e c0       	rjmp	.+92     	; 0x36fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3c2>
    36a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36a4:	98 a9       	ldd	r25, Y+48	; 0x30
    36a6:	fc 01       	movw	r30, r24
    36a8:	80 81       	ld	r24, Z
    36aa:	91 81       	ldd	r25, Z+1	; 0x01
    36ac:	0e 96       	adiw	r24, 0x0e	; 14
    36ae:	dc 01       	movw	r26, r24
    36b0:	ed 91       	ld	r30, X+
    36b2:	fc 91       	ld	r31, X
    36b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    36b6:	88 2f       	mov	r24, r24
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	8c 01       	movw	r16, r24
    36bc:	00 0f       	add	r16, r16
    36be:	11 1f       	adc	r17, r17
    36c0:	00 0f       	add	r16, r16
    36c2:	11 1f       	adc	r17, r17
    36c4:	00 0f       	add	r16, r16
    36c6:	11 1f       	adc	r17, r17
    36c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    36ca:	a8 2f       	mov	r26, r24
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	8a ad       	ldd	r24, Y+58	; 0x3a
    36d0:	28 2f       	mov	r18, r24
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	c9 01       	movw	r24, r18
    36d6:	88 0f       	add	r24, r24
    36d8:	99 1f       	adc	r25, r25
    36da:	88 0f       	add	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	28 0f       	add	r18, r24
    36e0:	39 1f       	adc	r19, r25
    36e2:	89 a9       	ldd	r24, Y+49	; 0x31
    36e4:	9a a9       	ldd	r25, Y+50	; 0x32
    36e6:	b9 01       	movw	r22, r18
    36e8:	68 0f       	add	r22, r24
    36ea:	79 1f       	adc	r23, r25
    36ec:	28 ad       	ldd	r18, Y+56	; 0x38
    36ee:	39 ad       	ldd	r19, Y+57	; 0x39
    36f0:	4b a9       	ldd	r20, Y+51	; 0x33
    36f2:	5c a9       	ldd	r21, Y+52	; 0x34
    36f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36f6:	98 a9       	ldd	r25, Y+48	; 0x30
    36f8:	79 01       	movw	r14, r18
    36fa:	9d 01       	movw	r18, r26
    36fc:	19 95       	eicall
    36fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3700:	98 a9       	ldd	r25, Y+48	; 0x30
    3702:	fc 01       	movw	r30, r24
    3704:	80 81       	ld	r24, Z
    3706:	91 81       	ldd	r25, Z+1	; 0x01
    3708:	46 96       	adiw	r24, 0x16	; 22
    370a:	dc 01       	movw	r26, r24
    370c:	2d 91       	ld	r18, X+
    370e:	3c 91       	ld	r19, X
    3710:	8f a5       	ldd	r24, Y+47	; 0x2f
    3712:	98 a9       	ldd	r25, Y+48	; 0x30
    3714:	f9 01       	movw	r30, r18
    3716:	19 95       	eicall
    3718:	53 c1       	rjmp	.+678    	; 0x39c0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x684>
    371a:	8f a5       	ldd	r24, Y+47	; 0x2f
    371c:	98 a9       	ldd	r25, Y+48	; 0x30
    371e:	dc 01       	movw	r26, r24
    3720:	59 96       	adiw	r26, 0x19	; 25
    3722:	8d 91       	ld	r24, X+
    3724:	9c 91       	ld	r25, X
    3726:	5a 97       	sbiw	r26, 0x1a	; 26
    3728:	04 96       	adiw	r24, 0x04	; 4
    372a:	9a 8b       	std	Y+18, r25	; 0x12
    372c:	89 8b       	std	Y+17, r24	; 0x11
    372e:	89 89       	ldd	r24, Y+17	; 0x11
    3730:	9a 89       	ldd	r25, Y+18	; 0x12
    3732:	fc 01       	movw	r30, r24
    3734:	84 91       	lpm	r24, Z
    3736:	8b 8b       	std	Y+19, r24	; 0x13
    3738:	8b 89       	ldd	r24, Y+19	; 0x13
    373a:	9d a9       	ldd	r25, Y+53	; 0x35
    373c:	f9 2f       	mov	r31, r25
    373e:	f8 1b       	sub	r31, r24
    3740:	8f 2f       	mov	r24, r31
    3742:	8d ab       	std	Y+53, r24	; 0x35
    3744:	8f a5       	ldd	r24, Y+47	; 0x2f
    3746:	98 a9       	ldd	r25, Y+48	; 0x30
    3748:	dc 01       	movw	r26, r24
    374a:	59 96       	adiw	r26, 0x19	; 25
    374c:	8d 91       	ld	r24, X+
    374e:	9c 91       	ld	r25, X
    3750:	5a 97       	sbiw	r26, 0x1a	; 26
    3752:	6d a9       	ldd	r22, Y+53	; 0x35
    3754:	0e 94 24 13 	call	0x2648	; 0x2648 <_Z18pgm_read_glyph_ptrPK7GFXfonth>
    3758:	9d 8b       	std	Y+21, r25	; 0x15
    375a:	8c 8b       	std	Y+20, r24	; 0x14
    375c:	8f a5       	ldd	r24, Y+47	; 0x2f
    375e:	98 a9       	ldd	r25, Y+48	; 0x30
    3760:	fc 01       	movw	r30, r24
    3762:	81 8d       	ldd	r24, Z+25	; 0x19
    3764:	92 8d       	ldd	r25, Z+26	; 0x1a
    3766:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <_Z19pgm_read_bitmap_ptrPK7GFXfont>
    376a:	9f 8b       	std	Y+23, r25	; 0x17
    376c:	8e 8b       	std	Y+22, r24	; 0x16
    376e:	8c 89       	ldd	r24, Y+20	; 0x14
    3770:	9d 89       	ldd	r25, Y+21	; 0x15
    3772:	99 8f       	std	Y+25, r25	; 0x19
    3774:	88 8f       	std	Y+24, r24	; 0x18
    3776:	88 8d       	ldd	r24, Y+24	; 0x18
    3778:	99 8d       	ldd	r25, Y+25	; 0x19
    377a:	fc 01       	movw	r30, r24
    377c:	25 91       	lpm	r18, Z+
    377e:	34 91       	lpm	r19, Z
    3780:	cf 01       	movw	r24, r30
    3782:	3b 8f       	std	Y+27, r19	; 0x1b
    3784:	2a 8f       	std	Y+26, r18	; 0x1a
    3786:	99 8f       	std	Y+25, r25	; 0x19
    3788:	88 8f       	std	Y+24, r24	; 0x18
    378a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    378c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    378e:	9d 83       	std	Y+5, r25	; 0x05
    3790:	8c 83       	std	Y+4, r24	; 0x04
    3792:	8c 89       	ldd	r24, Y+20	; 0x14
    3794:	9d 89       	ldd	r25, Y+21	; 0x15
    3796:	02 96       	adiw	r24, 0x02	; 2
    3798:	9d 8f       	std	Y+29, r25	; 0x1d
    379a:	8c 8f       	std	Y+28, r24	; 0x1c
    379c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    379e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37a0:	fc 01       	movw	r30, r24
    37a2:	84 91       	lpm	r24, Z
    37a4:	8e 8f       	std	Y+30, r24	; 0x1e
    37a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37a8:	8f 8f       	std	Y+31, r24	; 0x1f
    37aa:	8c 89       	ldd	r24, Y+20	; 0x14
    37ac:	9d 89       	ldd	r25, Y+21	; 0x15
    37ae:	03 96       	adiw	r24, 0x03	; 3
    37b0:	99 a3       	std	Y+33, r25	; 0x21
    37b2:	88 a3       	std	Y+32, r24	; 0x20
    37b4:	88 a1       	ldd	r24, Y+32	; 0x20
    37b6:	99 a1       	ldd	r25, Y+33	; 0x21
    37b8:	fc 01       	movw	r30, r24
    37ba:	84 91       	lpm	r24, Z
    37bc:	8a a3       	std	Y+34, r24	; 0x22
    37be:	8a a1       	ldd	r24, Y+34	; 0x22
    37c0:	8b a3       	std	Y+35, r24	; 0x23
    37c2:	8c 89       	ldd	r24, Y+20	; 0x14
    37c4:	9d 89       	ldd	r25, Y+21	; 0x15
    37c6:	05 96       	adiw	r24, 0x05	; 5
    37c8:	9d a3       	std	Y+37, r25	; 0x25
    37ca:	8c a3       	std	Y+36, r24	; 0x24
    37cc:	8c a1       	ldd	r24, Y+36	; 0x24
    37ce:	9d a1       	ldd	r25, Y+37	; 0x25
    37d0:	fc 01       	movw	r30, r24
    37d2:	84 91       	lpm	r24, Z
    37d4:	8e a3       	std	Y+38, r24	; 0x26
    37d6:	8e a1       	ldd	r24, Y+38	; 0x26
    37d8:	8f a3       	std	Y+39, r24	; 0x27
    37da:	8c 89       	ldd	r24, Y+20	; 0x14
    37dc:	9d 89       	ldd	r25, Y+21	; 0x15
    37de:	06 96       	adiw	r24, 0x06	; 6
    37e0:	99 a7       	std	Y+41, r25	; 0x29
    37e2:	88 a7       	std	Y+40, r24	; 0x28
    37e4:	88 a5       	ldd	r24, Y+40	; 0x28
    37e6:	99 a5       	ldd	r25, Y+41	; 0x29
    37e8:	fc 01       	movw	r30, r24
    37ea:	84 91       	lpm	r24, Z
    37ec:	8a a7       	std	Y+42, r24	; 0x2a
    37ee:	8a a5       	ldd	r24, Y+42	; 0x2a
    37f0:	8b a7       	std	Y+43, r24	; 0x2b
    37f2:	18 86       	std	Y+8, r1	; 0x08
    37f4:	19 86       	std	Y+9, r1	; 0x09
    37f6:	1b 86       	std	Y+11, r1	; 0x0b
    37f8:	1a 86       	std	Y+10, r1	; 0x0a
    37fa:	1d 86       	std	Y+13, r1	; 0x0d
    37fc:	1c 86       	std	Y+12, r1	; 0x0c
    37fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    3800:	82 30       	cpi	r24, 0x02	; 2
    3802:	18 f4       	brcc	.+6      	; 0x380a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x4ce>
    3804:	8b ad       	ldd	r24, Y+59	; 0x3b
    3806:	82 30       	cpi	r24, 0x02	; 2
    3808:	60 f0       	brcs	.+24     	; 0x3822 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x4e6>
    380a:	8f a1       	ldd	r24, Y+39	; 0x27
    380c:	08 2e       	mov	r0, r24
    380e:	00 0c       	add	r0, r0
    3810:	99 0b       	sbc	r25, r25
    3812:	9b 87       	std	Y+11, r25	; 0x0b
    3814:	8a 87       	std	Y+10, r24	; 0x0a
    3816:	8b a5       	ldd	r24, Y+43	; 0x2b
    3818:	08 2e       	mov	r0, r24
    381a:	00 0c       	add	r0, r0
    381c:	99 0b       	sbc	r25, r25
    381e:	9d 87       	std	Y+13, r25	; 0x0d
    3820:	8c 87       	std	Y+12, r24	; 0x0c
    3822:	8f a5       	ldd	r24, Y+47	; 0x2f
    3824:	98 a9       	ldd	r25, Y+48	; 0x30
    3826:	dc 01       	movw	r26, r24
    3828:	8d 91       	ld	r24, X+
    382a:	9c 91       	ld	r25, X
    382c:	0a 96       	adiw	r24, 0x0a	; 10
    382e:	fc 01       	movw	r30, r24
    3830:	20 81       	ld	r18, Z
    3832:	31 81       	ldd	r19, Z+1	; 0x01
    3834:	8f a5       	ldd	r24, Y+47	; 0x2f
    3836:	98 a9       	ldd	r25, Y+48	; 0x30
    3838:	f9 01       	movw	r30, r18
    383a:	19 95       	eicall
    383c:	1f 82       	std	Y+7, r1	; 0x07
    383e:	9f 81       	ldd	r25, Y+7	; 0x07
    3840:	8b a1       	ldd	r24, Y+35	; 0x23
    3842:	98 17       	cp	r25, r24
    3844:	08 f0       	brcs	.+2      	; 0x3848 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x50c>
    3846:	ad c0       	rjmp	.+346    	; 0x39a2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x666>
    3848:	1e 82       	std	Y+6, r1	; 0x06
    384a:	9e 81       	ldd	r25, Y+6	; 0x06
    384c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    384e:	98 17       	cp	r25, r24
    3850:	08 f0       	brcs	.+2      	; 0x3854 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x518>
    3852:	a3 c0       	rjmp	.+326    	; 0x399a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x65e>
    3854:	89 85       	ldd	r24, Y+9	; 0x09
    3856:	91 e0       	ldi	r25, 0x01	; 1
    3858:	98 0f       	add	r25, r24
    385a:	99 87       	std	Y+9, r25	; 0x09
    385c:	88 2f       	mov	r24, r24
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	87 70       	andi	r24, 0x07	; 7
    3862:	99 27       	eor	r25, r25
    3864:	21 e0       	ldi	r18, 0x01	; 1
    3866:	89 2b       	or	r24, r25
    3868:	09 f0       	breq	.+2      	; 0x386c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x530>
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	22 23       	and	r18, r18
    386e:	a1 f0       	breq	.+40     	; 0x3898 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x55c>
    3870:	8c 81       	ldd	r24, Y+4	; 0x04
    3872:	9d 81       	ldd	r25, Y+5	; 0x05
    3874:	9c 01       	movw	r18, r24
    3876:	2f 5f       	subi	r18, 0xFF	; 255
    3878:	3f 4f       	sbci	r19, 0xFF	; 255
    387a:	3d 83       	std	Y+5, r19	; 0x05
    387c:	2c 83       	std	Y+4, r18	; 0x04
    387e:	2e 89       	ldd	r18, Y+22	; 0x16
    3880:	3f 89       	ldd	r19, Y+23	; 0x17
    3882:	82 0f       	add	r24, r18
    3884:	93 1f       	adc	r25, r19
    3886:	9d a7       	std	Y+45, r25	; 0x2d
    3888:	8c a7       	std	Y+44, r24	; 0x2c
    388a:	8c a5       	ldd	r24, Y+44	; 0x2c
    388c:	9d a5       	ldd	r25, Y+45	; 0x2d
    388e:	fc 01       	movw	r30, r24
    3890:	84 91       	lpm	r24, Z
    3892:	8e a7       	std	Y+46, r24	; 0x2e
    3894:	8e a5       	ldd	r24, Y+46	; 0x2e
    3896:	88 87       	std	Y+8, r24	; 0x08
    3898:	88 85       	ldd	r24, Y+8	; 0x08
    389a:	88 23       	and	r24, r24
    389c:	0c f0       	brlt	.+2      	; 0x38a0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x564>
    389e:	76 c0       	rjmp	.+236    	; 0x398c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x650>
    38a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    38a2:	81 30       	cpi	r24, 0x01	; 1
    38a4:	71 f5       	brne	.+92     	; 0x3902 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5c6>
    38a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    38a8:	81 30       	cpi	r24, 0x01	; 1
    38aa:	59 f5       	brne	.+86     	; 0x3902 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5c6>
    38ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ae:	98 a9       	ldd	r25, Y+48	; 0x30
    38b0:	dc 01       	movw	r26, r24
    38b2:	8d 91       	ld	r24, X+
    38b4:	9c 91       	ld	r25, X
    38b6:	0c 96       	adiw	r24, 0x0c	; 12
    38b8:	dc 01       	movw	r26, r24
    38ba:	ed 91       	ld	r30, X+
    38bc:	fc 91       	ld	r31, X
    38be:	8b a5       	ldd	r24, Y+43	; 0x2b
    38c0:	28 2f       	mov	r18, r24
    38c2:	88 0f       	add	r24, r24
    38c4:	33 0b       	sbc	r19, r19
    38c6:	8b a9       	ldd	r24, Y+51	; 0x33
    38c8:	9c a9       	ldd	r25, Y+52	; 0x34
    38ca:	28 0f       	add	r18, r24
    38cc:	39 1f       	adc	r19, r25
    38ce:	8f 81       	ldd	r24, Y+7	; 0x07
    38d0:	88 2f       	mov	r24, r24
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	a9 01       	movw	r20, r18
    38d6:	48 0f       	add	r20, r24
    38d8:	59 1f       	adc	r21, r25
    38da:	8f a1       	ldd	r24, Y+39	; 0x27
    38dc:	28 2f       	mov	r18, r24
    38de:	88 0f       	add	r24, r24
    38e0:	33 0b       	sbc	r19, r19
    38e2:	89 a9       	ldd	r24, Y+49	; 0x31
    38e4:	9a a9       	ldd	r25, Y+50	; 0x32
    38e6:	28 0f       	add	r18, r24
    38e8:	39 1f       	adc	r19, r25
    38ea:	8e 81       	ldd	r24, Y+6	; 0x06
    38ec:	88 2f       	mov	r24, r24
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	b9 01       	movw	r22, r18
    38f2:	68 0f       	add	r22, r24
    38f4:	79 1f       	adc	r23, r25
    38f6:	2e a9       	ldd	r18, Y+54	; 0x36
    38f8:	3f a9       	ldd	r19, Y+55	; 0x37
    38fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    38fc:	98 a9       	ldd	r25, Y+48	; 0x30
    38fe:	19 95       	eicall
    3900:	45 c0       	rjmp	.+138    	; 0x398c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x650>
    3902:	8f a5       	ldd	r24, Y+47	; 0x2f
    3904:	98 a9       	ldd	r25, Y+48	; 0x30
    3906:	fc 01       	movw	r30, r24
    3908:	80 81       	ld	r24, Z
    390a:	91 81       	ldd	r25, Z+1	; 0x01
    390c:	0e 96       	adiw	r24, 0x0e	; 14
    390e:	dc 01       	movw	r26, r24
    3910:	ed 91       	ld	r30, X+
    3912:	fc 91       	ld	r31, X
    3914:	8b ad       	ldd	r24, Y+59	; 0x3b
    3916:	08 2f       	mov	r16, r24
    3918:	10 e0       	ldi	r17, 0x00	; 0
    391a:	8a ad       	ldd	r24, Y+58	; 0x3a
    391c:	c8 2e       	mov	r12, r24
    391e:	d1 2c       	mov	r13, r1
    3920:	8f 81       	ldd	r24, Y+7	; 0x07
    3922:	28 2f       	mov	r18, r24
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	8c 85       	ldd	r24, Y+12	; 0x0c
    3928:	9d 85       	ldd	r25, Y+13	; 0x0d
    392a:	a9 01       	movw	r20, r18
    392c:	48 0f       	add	r20, r24
    392e:	59 1f       	adc	r21, r25
    3930:	8b ad       	ldd	r24, Y+59	; 0x3b
    3932:	88 2f       	mov	r24, r24
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	48 9f       	mul	r20, r24
    3938:	90 01       	movw	r18, r0
    393a:	49 9f       	mul	r20, r25
    393c:	30 0d       	add	r19, r0
    393e:	58 9f       	mul	r21, r24
    3940:	30 0d       	add	r19, r0
    3942:	11 24       	eor	r1, r1
    3944:	8b a9       	ldd	r24, Y+51	; 0x33
    3946:	9c a9       	ldd	r25, Y+52	; 0x34
    3948:	d9 01       	movw	r26, r18
    394a:	a8 0f       	add	r26, r24
    394c:	b9 1f       	adc	r27, r25
    394e:	8e 81       	ldd	r24, Y+6	; 0x06
    3950:	28 2f       	mov	r18, r24
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	8a 85       	ldd	r24, Y+10	; 0x0a
    3956:	9b 85       	ldd	r25, Y+11	; 0x0b
    3958:	a9 01       	movw	r20, r18
    395a:	48 0f       	add	r20, r24
    395c:	59 1f       	adc	r21, r25
    395e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3960:	88 2f       	mov	r24, r24
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	48 9f       	mul	r20, r24
    3966:	90 01       	movw	r18, r0
    3968:	49 9f       	mul	r20, r25
    396a:	30 0d       	add	r19, r0
    396c:	58 9f       	mul	r21, r24
    396e:	30 0d       	add	r19, r0
    3970:	11 24       	eor	r1, r1
    3972:	89 a9       	ldd	r24, Y+49	; 0x31
    3974:	9a a9       	ldd	r25, Y+50	; 0x32
    3976:	b9 01       	movw	r22, r18
    3978:	68 0f       	add	r22, r24
    397a:	79 1f       	adc	r23, r25
    397c:	2e a9       	ldd	r18, Y+54	; 0x36
    397e:	3f a9       	ldd	r19, Y+55	; 0x37
    3980:	8f a5       	ldd	r24, Y+47	; 0x2f
    3982:	98 a9       	ldd	r25, Y+48	; 0x30
    3984:	79 01       	movw	r14, r18
    3986:	96 01       	movw	r18, r12
    3988:	ad 01       	movw	r20, r26
    398a:	19 95       	eicall
    398c:	88 85       	ldd	r24, Y+8	; 0x08
    398e:	88 0f       	add	r24, r24
    3990:	88 87       	std	Y+8, r24	; 0x08
    3992:	8e 81       	ldd	r24, Y+6	; 0x06
    3994:	8f 5f       	subi	r24, 0xFF	; 255
    3996:	8e 83       	std	Y+6, r24	; 0x06
    3998:	58 cf       	rjmp	.-336    	; 0x384a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x50e>
    399a:	8f 81       	ldd	r24, Y+7	; 0x07
    399c:	8f 5f       	subi	r24, 0xFF	; 255
    399e:	8f 83       	std	Y+7, r24	; 0x07
    39a0:	4e cf       	rjmp	.-356    	; 0x383e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x502>
    39a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    39a4:	98 a9       	ldd	r25, Y+48	; 0x30
    39a6:	fc 01       	movw	r30, r24
    39a8:	80 81       	ld	r24, Z
    39aa:	91 81       	ldd	r25, Z+1	; 0x01
    39ac:	46 96       	adiw	r24, 0x16	; 22
    39ae:	dc 01       	movw	r26, r24
    39b0:	2d 91       	ld	r18, X+
    39b2:	3c 91       	ld	r19, X
    39b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    39b6:	98 a9       	ldd	r25, Y+48	; 0x30
    39b8:	f9 01       	movw	r30, r18
    39ba:	19 95       	eicall
    39bc:	01 c0       	rjmp	.+2      	; 0x39c0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x684>
    39be:	00 00       	nop
    39c0:	eb 96       	adiw	r28, 0x3b	; 59
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	cd bf       	out	0x3d, r28	; 61
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	0f 91       	pop	r16
    39d4:	ff 90       	pop	r15
    39d6:	ef 90       	pop	r14
    39d8:	df 90       	pop	r13
    39da:	cf 90       	pop	r12
    39dc:	af 90       	pop	r10
    39de:	08 95       	ret

000039e0 <_ZN12Adafruit_GFX5writeEh>:
    39e0:	af 92       	push	r10
    39e2:	cf 92       	push	r12
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	cf 93       	push	r28
    39ee:	df 93       	push	r29
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	a4 97       	sbiw	r28, 0x24	; 36
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	99 a3       	std	Y+33, r25	; 0x21
    3a02:	88 a3       	std	Y+32, r24	; 0x20
    3a04:	6a a3       	std	Y+34, r22	; 0x22
    3a06:	88 a1       	ldd	r24, Y+32	; 0x20
    3a08:	99 a1       	ldd	r25, Y+33	; 0x21
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	81 8d       	ldd	r24, Z+25	; 0x19
    3a0e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a10:	89 2b       	or	r24, r25
    3a12:	09 f0       	breq	.+2      	; 0x3a16 <_ZN12Adafruit_GFX5writeEh+0x36>
    3a14:	a8 c0       	rjmp	.+336    	; 0x3b66 <_ZN12Adafruit_GFX5writeEh+0x186>
    3a16:	8a a1       	ldd	r24, Y+34	; 0x22
    3a18:	8a 30       	cpi	r24, 0x0A	; 10
    3a1a:	f1 f4       	brne	.+60     	; 0x3a58 <_ZN12Adafruit_GFX5writeEh+0x78>
    3a1c:	88 a1       	ldd	r24, Y+32	; 0x20
    3a1e:	99 a1       	ldd	r25, Y+33	; 0x21
    3a20:	fc 01       	movw	r30, r24
    3a22:	15 86       	std	Z+13, r1	; 0x0d
    3a24:	14 86       	std	Z+12, r1	; 0x0c
    3a26:	88 a1       	ldd	r24, Y+32	; 0x20
    3a28:	99 a1       	ldd	r25, Y+33	; 0x21
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	26 85       	ldd	r18, Z+14	; 0x0e
    3a2e:	37 85       	ldd	r19, Z+15	; 0x0f
    3a30:	88 a1       	ldd	r24, Y+32	; 0x20
    3a32:	99 a1       	ldd	r25, Y+33	; 0x21
    3a34:	fc 01       	movw	r30, r24
    3a36:	85 89       	ldd	r24, Z+21	; 0x15
    3a38:	88 2f       	mov	r24, r24
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	88 0f       	add	r24, r24
    3a42:	99 1f       	adc	r25, r25
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	28 0f       	add	r18, r24
    3a4a:	39 1f       	adc	r19, r25
    3a4c:	88 a1       	ldd	r24, Y+32	; 0x20
    3a4e:	99 a1       	ldd	r25, Y+33	; 0x21
    3a50:	fc 01       	movw	r30, r24
    3a52:	37 87       	std	Z+15, r19	; 0x0f
    3a54:	26 87       	std	Z+14, r18	; 0x0e
    3a56:	cb c1       	rjmp	.+918    	; 0x3dee <_ZN12Adafruit_GFX5writeEh+0x40e>
    3a58:	8a a1       	ldd	r24, Y+34	; 0x22
    3a5a:	8d 30       	cpi	r24, 0x0D	; 13
    3a5c:	09 f4       	brne	.+2      	; 0x3a60 <_ZN12Adafruit_GFX5writeEh+0x80>
    3a5e:	c7 c1       	rjmp	.+910    	; 0x3dee <_ZN12Adafruit_GFX5writeEh+0x40e>
    3a60:	88 a1       	ldd	r24, Y+32	; 0x20
    3a62:	99 a1       	ldd	r25, Y+33	; 0x21
    3a64:	fc 01       	movw	r30, r24
    3a66:	87 89       	ldd	r24, Z+23	; 0x17
    3a68:	88 23       	and	r24, r24
    3a6a:	d1 f1       	breq	.+116    	; 0x3ae0 <_ZN12Adafruit_GFX5writeEh+0x100>
    3a6c:	88 a1       	ldd	r24, Y+32	; 0x20
    3a6e:	99 a1       	ldd	r25, Y+33	; 0x21
    3a70:	fc 01       	movw	r30, r24
    3a72:	44 85       	ldd	r20, Z+12	; 0x0c
    3a74:	55 85       	ldd	r21, Z+13	; 0x0d
    3a76:	88 a1       	ldd	r24, Y+32	; 0x20
    3a78:	99 a1       	ldd	r25, Y+33	; 0x21
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	84 89       	ldd	r24, Z+20	; 0x14
    3a7e:	28 2f       	mov	r18, r24
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	c9 01       	movw	r24, r18
    3a84:	88 0f       	add	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	82 0f       	add	r24, r18
    3a8a:	93 1f       	adc	r25, r19
    3a8c:	88 0f       	add	r24, r24
    3a8e:	99 1f       	adc	r25, r25
    3a90:	9a 01       	movw	r18, r20
    3a92:	28 0f       	add	r18, r24
    3a94:	39 1f       	adc	r19, r25
    3a96:	88 a1       	ldd	r24, Y+32	; 0x20
    3a98:	99 a1       	ldd	r25, Y+33	; 0x21
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	80 85       	ldd	r24, Z+8	; 0x08
    3a9e:	91 85       	ldd	r25, Z+9	; 0x09
    3aa0:	82 17       	cp	r24, r18
    3aa2:	93 07       	cpc	r25, r19
    3aa4:	ec f4       	brge	.+58     	; 0x3ae0 <_ZN12Adafruit_GFX5writeEh+0x100>
    3aa6:	88 a1       	ldd	r24, Y+32	; 0x20
    3aa8:	99 a1       	ldd	r25, Y+33	; 0x21
    3aaa:	fc 01       	movw	r30, r24
    3aac:	15 86       	std	Z+13, r1	; 0x0d
    3aae:	14 86       	std	Z+12, r1	; 0x0c
    3ab0:	88 a1       	ldd	r24, Y+32	; 0x20
    3ab2:	99 a1       	ldd	r25, Y+33	; 0x21
    3ab4:	fc 01       	movw	r30, r24
    3ab6:	26 85       	ldd	r18, Z+14	; 0x0e
    3ab8:	37 85       	ldd	r19, Z+15	; 0x0f
    3aba:	88 a1       	ldd	r24, Y+32	; 0x20
    3abc:	99 a1       	ldd	r25, Y+33	; 0x21
    3abe:	fc 01       	movw	r30, r24
    3ac0:	85 89       	ldd	r24, Z+21	; 0x15
    3ac2:	88 2f       	mov	r24, r24
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	88 0f       	add	r24, r24
    3ac8:	99 1f       	adc	r25, r25
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	88 0f       	add	r24, r24
    3ad0:	99 1f       	adc	r25, r25
    3ad2:	28 0f       	add	r18, r24
    3ad4:	39 1f       	adc	r19, r25
    3ad6:	88 a1       	ldd	r24, Y+32	; 0x20
    3ad8:	99 a1       	ldd	r25, Y+33	; 0x21
    3ada:	fc 01       	movw	r30, r24
    3adc:	37 87       	std	Z+15, r19	; 0x0f
    3ade:	26 87       	std	Z+14, r18	; 0x0e
    3ae0:	88 a1       	ldd	r24, Y+32	; 0x20
    3ae2:	99 a1       	ldd	r25, Y+33	; 0x21
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	b5 89       	ldd	r27, Z+21	; 0x15
    3ae8:	88 a1       	ldd	r24, Y+32	; 0x20
    3aea:	99 a1       	ldd	r25, Y+33	; 0x21
    3aec:	fc 01       	movw	r30, r24
    3aee:	a4 89       	ldd	r26, Z+20	; 0x14
    3af0:	88 a1       	ldd	r24, Y+32	; 0x20
    3af2:	99 a1       	ldd	r25, Y+33	; 0x21
    3af4:	fc 01       	movw	r30, r24
    3af6:	02 88       	ldd	r0, Z+18	; 0x12
    3af8:	f3 89       	ldd	r31, Z+19	; 0x13
    3afa:	e0 2d       	mov	r30, r0
    3afc:	fc a3       	std	Y+36, r31	; 0x24
    3afe:	eb a3       	std	Y+35, r30	; 0x23
    3b00:	88 a1       	ldd	r24, Y+32	; 0x20
    3b02:	99 a1       	ldd	r25, Y+33	; 0x21
    3b04:	fc 01       	movw	r30, r24
    3b06:	20 89       	ldd	r18, Z+16	; 0x10
    3b08:	31 89       	ldd	r19, Z+17	; 0x11
    3b0a:	88 a1       	ldd	r24, Y+32	; 0x20
    3b0c:	99 a1       	ldd	r25, Y+33	; 0x21
    3b0e:	fc 01       	movw	r30, r24
    3b10:	46 85       	ldd	r20, Z+14	; 0x0e
    3b12:	57 85       	ldd	r21, Z+15	; 0x0f
    3b14:	88 a1       	ldd	r24, Y+32	; 0x20
    3b16:	99 a1       	ldd	r25, Y+33	; 0x21
    3b18:	fc 01       	movw	r30, r24
    3b1a:	64 85       	ldd	r22, Z+12	; 0x0c
    3b1c:	75 85       	ldd	r23, Z+13	; 0x0d
    3b1e:	88 a1       	ldd	r24, Y+32	; 0x20
    3b20:	99 a1       	ldd	r25, Y+33	; 0x21
    3b22:	ab 2e       	mov	r10, r27
    3b24:	ca 2e       	mov	r12, r26
    3b26:	eb a0       	ldd	r14, Y+35	; 0x23
    3b28:	fc a0       	ldd	r15, Y+36	; 0x24
    3b2a:	89 01       	movw	r16, r18
    3b2c:	2a a1       	ldd	r18, Y+34	; 0x22
    3b2e:	06 dc       	rcall	.-2036   	; 0x333c <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    3b30:	88 a1       	ldd	r24, Y+32	; 0x20
    3b32:	99 a1       	ldd	r25, Y+33	; 0x21
    3b34:	fc 01       	movw	r30, r24
    3b36:	44 85       	ldd	r20, Z+12	; 0x0c
    3b38:	55 85       	ldd	r21, Z+13	; 0x0d
    3b3a:	88 a1       	ldd	r24, Y+32	; 0x20
    3b3c:	99 a1       	ldd	r25, Y+33	; 0x21
    3b3e:	fc 01       	movw	r30, r24
    3b40:	84 89       	ldd	r24, Z+20	; 0x14
    3b42:	28 2f       	mov	r18, r24
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	c9 01       	movw	r24, r18
    3b48:	88 0f       	add	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	82 0f       	add	r24, r18
    3b4e:	93 1f       	adc	r25, r19
    3b50:	88 0f       	add	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	9a 01       	movw	r18, r20
    3b56:	28 0f       	add	r18, r24
    3b58:	39 1f       	adc	r19, r25
    3b5a:	88 a1       	ldd	r24, Y+32	; 0x20
    3b5c:	99 a1       	ldd	r25, Y+33	; 0x21
    3b5e:	fc 01       	movw	r30, r24
    3b60:	35 87       	std	Z+13, r19	; 0x0d
    3b62:	24 87       	std	Z+12, r18	; 0x0c
    3b64:	44 c1       	rjmp	.+648    	; 0x3dee <_ZN12Adafruit_GFX5writeEh+0x40e>
    3b66:	8a a1       	ldd	r24, Y+34	; 0x22
    3b68:	8a 30       	cpi	r24, 0x0A	; 10
    3b6a:	79 f5       	brne	.+94     	; 0x3bca <_ZN12Adafruit_GFX5writeEh+0x1ea>
    3b6c:	88 a1       	ldd	r24, Y+32	; 0x20
    3b6e:	99 a1       	ldd	r25, Y+33	; 0x21
    3b70:	fc 01       	movw	r30, r24
    3b72:	15 86       	std	Z+13, r1	; 0x0d
    3b74:	14 86       	std	Z+12, r1	; 0x0c
    3b76:	88 a1       	ldd	r24, Y+32	; 0x20
    3b78:	99 a1       	ldd	r25, Y+33	; 0x21
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	85 89       	ldd	r24, Z+21	; 0x15
    3b7e:	48 2f       	mov	r20, r24
    3b80:	50 e0       	ldi	r21, 0x00	; 0
    3b82:	88 a1       	ldd	r24, Y+32	; 0x20
    3b84:	99 a1       	ldd	r25, Y+33	; 0x21
    3b86:	fc 01       	movw	r30, r24
    3b88:	81 8d       	ldd	r24, Z+25	; 0x19
    3b8a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3b8c:	08 96       	adiw	r24, 0x08	; 8
    3b8e:	9a 83       	std	Y+2, r25	; 0x02
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	9a 81       	ldd	r25, Y+2	; 0x02
    3b96:	fc 01       	movw	r30, r24
    3b98:	84 91       	lpm	r24, Z
    3b9a:	8b 83       	std	Y+3, r24	; 0x03
    3b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9e:	28 2f       	mov	r18, r24
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	42 9f       	mul	r20, r18
    3ba4:	c0 01       	movw	r24, r0
    3ba6:	43 9f       	mul	r20, r19
    3ba8:	90 0d       	add	r25, r0
    3baa:	52 9f       	mul	r21, r18
    3bac:	90 0d       	add	r25, r0
    3bae:	11 24       	eor	r1, r1
    3bb0:	28 a1       	ldd	r18, Y+32	; 0x20
    3bb2:	39 a1       	ldd	r19, Y+33	; 0x21
    3bb4:	f9 01       	movw	r30, r18
    3bb6:	26 85       	ldd	r18, Z+14	; 0x0e
    3bb8:	37 85       	ldd	r19, Z+15	; 0x0f
    3bba:	28 0f       	add	r18, r24
    3bbc:	39 1f       	adc	r19, r25
    3bbe:	88 a1       	ldd	r24, Y+32	; 0x20
    3bc0:	99 a1       	ldd	r25, Y+33	; 0x21
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	37 87       	std	Z+15, r19	; 0x0f
    3bc6:	26 87       	std	Z+14, r18	; 0x0e
    3bc8:	12 c1       	rjmp	.+548    	; 0x3dee <_ZN12Adafruit_GFX5writeEh+0x40e>
    3bca:	8a a1       	ldd	r24, Y+34	; 0x22
    3bcc:	8d 30       	cpi	r24, 0x0D	; 13
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <_ZN12Adafruit_GFX5writeEh+0x1f2>
    3bd0:	0e c1       	rjmp	.+540    	; 0x3dee <_ZN12Adafruit_GFX5writeEh+0x40e>
    3bd2:	88 a1       	ldd	r24, Y+32	; 0x20
    3bd4:	99 a1       	ldd	r25, Y+33	; 0x21
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	81 8d       	ldd	r24, Z+25	; 0x19
    3bda:	92 8d       	ldd	r25, Z+26	; 0x1a
    3bdc:	04 96       	adiw	r24, 0x04	; 4
    3bde:	9d 83       	std	Y+5, r25	; 0x05
    3be0:	8c 83       	std	Y+4, r24	; 0x04
    3be2:	8c 81       	ldd	r24, Y+4	; 0x04
    3be4:	9d 81       	ldd	r25, Y+5	; 0x05
    3be6:	fc 01       	movw	r30, r24
    3be8:	84 91       	lpm	r24, Z
    3bea:	8e 83       	std	Y+6, r24	; 0x06
    3bec:	8e 81       	ldd	r24, Y+6	; 0x06
    3bee:	8f 83       	std	Y+7, r24	; 0x07
    3bf0:	9a a1       	ldd	r25, Y+34	; 0x22
    3bf2:	8f 81       	ldd	r24, Y+7	; 0x07
    3bf4:	98 17       	cp	r25, r24
    3bf6:	98 f0       	brcs	.+38     	; 0x3c1e <_ZN12Adafruit_GFX5writeEh+0x23e>
    3bf8:	88 a1       	ldd	r24, Y+32	; 0x20
    3bfa:	99 a1       	ldd	r25, Y+33	; 0x21
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	81 8d       	ldd	r24, Z+25	; 0x19
    3c00:	92 8d       	ldd	r25, Z+26	; 0x1a
    3c02:	06 96       	adiw	r24, 0x06	; 6
    3c04:	99 87       	std	Y+9, r25	; 0x09
    3c06:	88 87       	std	Y+8, r24	; 0x08
    3c08:	88 85       	ldd	r24, Y+8	; 0x08
    3c0a:	99 85       	ldd	r25, Y+9	; 0x09
    3c0c:	fc 01       	movw	r30, r24
    3c0e:	84 91       	lpm	r24, Z
    3c10:	8a 87       	std	Y+10, r24	; 0x0a
    3c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c14:	8a a1       	ldd	r24, Y+34	; 0x22
    3c16:	98 17       	cp	r25, r24
    3c18:	10 f0       	brcs	.+4      	; 0x3c1e <_ZN12Adafruit_GFX5writeEh+0x23e>
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	01 c0       	rjmp	.+2      	; 0x3c20 <_ZN12Adafruit_GFX5writeEh+0x240>
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	88 23       	and	r24, r24
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <_ZN12Adafruit_GFX5writeEh+0x246>
    3c24:	e4 c0       	rjmp	.+456    	; 0x3dee <_ZN12Adafruit_GFX5writeEh+0x40e>
    3c26:	9a a1       	ldd	r25, Y+34	; 0x22
    3c28:	8f 81       	ldd	r24, Y+7	; 0x07
    3c2a:	29 2f       	mov	r18, r25
    3c2c:	28 1b       	sub	r18, r24
    3c2e:	88 a1       	ldd	r24, Y+32	; 0x20
    3c30:	99 a1       	ldd	r25, Y+33	; 0x21
    3c32:	fc 01       	movw	r30, r24
    3c34:	81 8d       	ldd	r24, Z+25	; 0x19
    3c36:	92 8d       	ldd	r25, Z+26	; 0x1a
    3c38:	62 2f       	mov	r22, r18
    3c3a:	0e 94 24 13 	call	0x2648	; 0x2648 <_Z18pgm_read_glyph_ptrPK7GFXfonth>
    3c3e:	9c 87       	std	Y+12, r25	; 0x0c
    3c40:	8b 87       	std	Y+11, r24	; 0x0b
    3c42:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c44:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c46:	02 96       	adiw	r24, 0x02	; 2
    3c48:	9e 87       	std	Y+14, r25	; 0x0e
    3c4a:	8d 87       	std	Y+13, r24	; 0x0d
    3c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c50:	fc 01       	movw	r30, r24
    3c52:	84 91       	lpm	r24, Z
    3c54:	8f 87       	std	Y+15, r24	; 0x0f
    3c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c58:	88 8b       	std	Y+16, r24	; 0x10
    3c5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c5e:	03 96       	adiw	r24, 0x03	; 3
    3c60:	9a 8b       	std	Y+18, r25	; 0x12
    3c62:	89 8b       	std	Y+17, r24	; 0x11
    3c64:	89 89       	ldd	r24, Y+17	; 0x11
    3c66:	9a 89       	ldd	r25, Y+18	; 0x12
    3c68:	fc 01       	movw	r30, r24
    3c6a:	84 91       	lpm	r24, Z
    3c6c:	8b 8b       	std	Y+19, r24	; 0x13
    3c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c70:	8c 8b       	std	Y+20, r24	; 0x14
    3c72:	88 89       	ldd	r24, Y+16	; 0x10
    3c74:	88 23       	and	r24, r24
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <_ZN12Adafruit_GFX5writeEh+0x29a>
    3c78:	94 c0       	rjmp	.+296    	; 0x3da2 <_ZN12Adafruit_GFX5writeEh+0x3c2>
    3c7a:	8c 89       	ldd	r24, Y+20	; 0x14
    3c7c:	88 23       	and	r24, r24
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <_ZN12Adafruit_GFX5writeEh+0x2a2>
    3c80:	90 c0       	rjmp	.+288    	; 0x3da2 <_ZN12Adafruit_GFX5writeEh+0x3c2>
    3c82:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c84:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c86:	05 96       	adiw	r24, 0x05	; 5
    3c88:	9e 8b       	std	Y+22, r25	; 0x16
    3c8a:	8d 8b       	std	Y+21, r24	; 0x15
    3c8c:	8d 89       	ldd	r24, Y+21	; 0x15
    3c8e:	9e 89       	ldd	r25, Y+22	; 0x16
    3c90:	fc 01       	movw	r30, r24
    3c92:	84 91       	lpm	r24, Z
    3c94:	8f 8b       	std	Y+23, r24	; 0x17
    3c96:	8f 89       	ldd	r24, Y+23	; 0x17
    3c98:	08 2e       	mov	r0, r24
    3c9a:	00 0c       	add	r0, r0
    3c9c:	99 0b       	sbc	r25, r25
    3c9e:	99 8f       	std	Y+25, r25	; 0x19
    3ca0:	88 8f       	std	Y+24, r24	; 0x18
    3ca2:	88 a1       	ldd	r24, Y+32	; 0x20
    3ca4:	99 a1       	ldd	r25, Y+33	; 0x21
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	87 89       	ldd	r24, Z+23	; 0x17
    3caa:	88 23       	and	r24, r24
    3cac:	09 f4       	brne	.+2      	; 0x3cb0 <_ZN12Adafruit_GFX5writeEh+0x2d0>
    3cae:	51 c0       	rjmp	.+162    	; 0x3d52 <_ZN12Adafruit_GFX5writeEh+0x372>
    3cb0:	88 a1       	ldd	r24, Y+32	; 0x20
    3cb2:	99 a1       	ldd	r25, Y+33	; 0x21
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	24 85       	ldd	r18, Z+12	; 0x0c
    3cb8:	35 85       	ldd	r19, Z+13	; 0x0d
    3cba:	88 a1       	ldd	r24, Y+32	; 0x20
    3cbc:	99 a1       	ldd	r25, Y+33	; 0x21
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	84 89       	ldd	r24, Z+20	; 0x14
    3cc2:	68 2f       	mov	r22, r24
    3cc4:	70 e0       	ldi	r23, 0x00	; 0
    3cc6:	88 89       	ldd	r24, Y+16	; 0x10
    3cc8:	48 2f       	mov	r20, r24
    3cca:	50 e0       	ldi	r21, 0x00	; 0
    3ccc:	88 8d       	ldd	r24, Y+24	; 0x18
    3cce:	99 8d       	ldd	r25, Y+25	; 0x19
    3cd0:	48 0f       	add	r20, r24
    3cd2:	59 1f       	adc	r21, r25
    3cd4:	64 9f       	mul	r22, r20
    3cd6:	c0 01       	movw	r24, r0
    3cd8:	65 9f       	mul	r22, r21
    3cda:	90 0d       	add	r25, r0
    3cdc:	74 9f       	mul	r23, r20
    3cde:	90 0d       	add	r25, r0
    3ce0:	11 24       	eor	r1, r1
    3ce2:	28 0f       	add	r18, r24
    3ce4:	39 1f       	adc	r19, r25
    3ce6:	88 a1       	ldd	r24, Y+32	; 0x20
    3ce8:	99 a1       	ldd	r25, Y+33	; 0x21
    3cea:	fc 01       	movw	r30, r24
    3cec:	80 85       	ldd	r24, Z+8	; 0x08
    3cee:	91 85       	ldd	r25, Z+9	; 0x09
    3cf0:	82 17       	cp	r24, r18
    3cf2:	93 07       	cpc	r25, r19
    3cf4:	74 f5       	brge	.+92     	; 0x3d52 <_ZN12Adafruit_GFX5writeEh+0x372>
    3cf6:	88 a1       	ldd	r24, Y+32	; 0x20
    3cf8:	99 a1       	ldd	r25, Y+33	; 0x21
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	15 86       	std	Z+13, r1	; 0x0d
    3cfe:	14 86       	std	Z+12, r1	; 0x0c
    3d00:	88 a1       	ldd	r24, Y+32	; 0x20
    3d02:	99 a1       	ldd	r25, Y+33	; 0x21
    3d04:	fc 01       	movw	r30, r24
    3d06:	85 89       	ldd	r24, Z+21	; 0x15
    3d08:	48 2f       	mov	r20, r24
    3d0a:	50 e0       	ldi	r21, 0x00	; 0
    3d0c:	88 a1       	ldd	r24, Y+32	; 0x20
    3d0e:	99 a1       	ldd	r25, Y+33	; 0x21
    3d10:	fc 01       	movw	r30, r24
    3d12:	81 8d       	ldd	r24, Z+25	; 0x19
    3d14:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d16:	08 96       	adiw	r24, 0x08	; 8
    3d18:	9b 8f       	std	Y+27, r25	; 0x1b
    3d1a:	8a 8f       	std	Y+26, r24	; 0x1a
    3d1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d1e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d20:	fc 01       	movw	r30, r24
    3d22:	84 91       	lpm	r24, Z
    3d24:	8c 8f       	std	Y+28, r24	; 0x1c
    3d26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d28:	28 2f       	mov	r18, r24
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	42 9f       	mul	r20, r18
    3d2e:	c0 01       	movw	r24, r0
    3d30:	43 9f       	mul	r20, r19
    3d32:	90 0d       	add	r25, r0
    3d34:	52 9f       	mul	r21, r18
    3d36:	90 0d       	add	r25, r0
    3d38:	11 24       	eor	r1, r1
    3d3a:	28 a1       	ldd	r18, Y+32	; 0x20
    3d3c:	39 a1       	ldd	r19, Y+33	; 0x21
    3d3e:	f9 01       	movw	r30, r18
    3d40:	26 85       	ldd	r18, Z+14	; 0x0e
    3d42:	37 85       	ldd	r19, Z+15	; 0x0f
    3d44:	28 0f       	add	r18, r24
    3d46:	39 1f       	adc	r19, r25
    3d48:	88 a1       	ldd	r24, Y+32	; 0x20
    3d4a:	99 a1       	ldd	r25, Y+33	; 0x21
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	37 87       	std	Z+15, r19	; 0x0f
    3d50:	26 87       	std	Z+14, r18	; 0x0e
    3d52:	88 a1       	ldd	r24, Y+32	; 0x20
    3d54:	99 a1       	ldd	r25, Y+33	; 0x21
    3d56:	fc 01       	movw	r30, r24
    3d58:	b5 89       	ldd	r27, Z+21	; 0x15
    3d5a:	88 a1       	ldd	r24, Y+32	; 0x20
    3d5c:	99 a1       	ldd	r25, Y+33	; 0x21
    3d5e:	fc 01       	movw	r30, r24
    3d60:	a4 89       	ldd	r26, Z+20	; 0x14
    3d62:	88 a1       	ldd	r24, Y+32	; 0x20
    3d64:	99 a1       	ldd	r25, Y+33	; 0x21
    3d66:	fc 01       	movw	r30, r24
    3d68:	02 88       	ldd	r0, Z+18	; 0x12
    3d6a:	f3 89       	ldd	r31, Z+19	; 0x13
    3d6c:	e0 2d       	mov	r30, r0
    3d6e:	fc a3       	std	Y+36, r31	; 0x24
    3d70:	eb a3       	std	Y+35, r30	; 0x23
    3d72:	88 a1       	ldd	r24, Y+32	; 0x20
    3d74:	99 a1       	ldd	r25, Y+33	; 0x21
    3d76:	fc 01       	movw	r30, r24
    3d78:	20 89       	ldd	r18, Z+16	; 0x10
    3d7a:	31 89       	ldd	r19, Z+17	; 0x11
    3d7c:	88 a1       	ldd	r24, Y+32	; 0x20
    3d7e:	99 a1       	ldd	r25, Y+33	; 0x21
    3d80:	fc 01       	movw	r30, r24
    3d82:	46 85       	ldd	r20, Z+14	; 0x0e
    3d84:	57 85       	ldd	r21, Z+15	; 0x0f
    3d86:	88 a1       	ldd	r24, Y+32	; 0x20
    3d88:	99 a1       	ldd	r25, Y+33	; 0x21
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	64 85       	ldd	r22, Z+12	; 0x0c
    3d8e:	75 85       	ldd	r23, Z+13	; 0x0d
    3d90:	88 a1       	ldd	r24, Y+32	; 0x20
    3d92:	99 a1       	ldd	r25, Y+33	; 0x21
    3d94:	ab 2e       	mov	r10, r27
    3d96:	ca 2e       	mov	r12, r26
    3d98:	eb a0       	ldd	r14, Y+35	; 0x23
    3d9a:	fc a0       	ldd	r15, Y+36	; 0x24
    3d9c:	89 01       	movw	r16, r18
    3d9e:	2a a1       	ldd	r18, Y+34	; 0x22
    3da0:	cd da       	rcall	.-2662   	; 0x333c <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    3da2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3da4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3da6:	04 96       	adiw	r24, 0x04	; 4
    3da8:	9e 8f       	std	Y+30, r25	; 0x1e
    3daa:	8d 8f       	std	Y+29, r24	; 0x1d
    3dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3db0:	fc 01       	movw	r30, r24
    3db2:	84 91       	lpm	r24, Z
    3db4:	8f 8f       	std	Y+31, r24	; 0x1f
    3db6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3db8:	48 2f       	mov	r20, r24
    3dba:	50 e0       	ldi	r21, 0x00	; 0
    3dbc:	88 a1       	ldd	r24, Y+32	; 0x20
    3dbe:	99 a1       	ldd	r25, Y+33	; 0x21
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	84 89       	ldd	r24, Z+20	; 0x14
    3dc4:	28 2f       	mov	r18, r24
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	42 9f       	mul	r20, r18
    3dca:	c0 01       	movw	r24, r0
    3dcc:	43 9f       	mul	r20, r19
    3dce:	90 0d       	add	r25, r0
    3dd0:	52 9f       	mul	r21, r18
    3dd2:	90 0d       	add	r25, r0
    3dd4:	11 24       	eor	r1, r1
    3dd6:	28 a1       	ldd	r18, Y+32	; 0x20
    3dd8:	39 a1       	ldd	r19, Y+33	; 0x21
    3dda:	f9 01       	movw	r30, r18
    3ddc:	24 85       	ldd	r18, Z+12	; 0x0c
    3dde:	35 85       	ldd	r19, Z+13	; 0x0d
    3de0:	28 0f       	add	r18, r24
    3de2:	39 1f       	adc	r19, r25
    3de4:	88 a1       	ldd	r24, Y+32	; 0x20
    3de6:	99 a1       	ldd	r25, Y+33	; 0x21
    3de8:	fc 01       	movw	r30, r24
    3dea:	35 87       	std	Z+13, r19	; 0x0d
    3dec:	24 87       	std	Z+12, r18	; 0x0c
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	a4 96       	adiw	r28, 0x24	; 36
    3df4:	0f b6       	in	r0, 0x3f	; 63
    3df6:	f8 94       	cli
    3df8:	de bf       	out	0x3e, r29	; 62
    3dfa:	0f be       	out	0x3f, r0	; 63
    3dfc:	cd bf       	out	0x3d, r28	; 61
    3dfe:	df 91       	pop	r29
    3e00:	cf 91       	pop	r28
    3e02:	1f 91       	pop	r17
    3e04:	0f 91       	pop	r16
    3e06:	ff 90       	pop	r15
    3e08:	ef 90       	pop	r14
    3e0a:	cf 90       	pop	r12
    3e0c:	af 90       	pop	r10
    3e0e:	08 95       	ret

00003e10 <_ZN12Adafruit_GFX11setTextSizeEh>:
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	00 d0       	rcall	.+0      	; 0x3e16 <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
    3e16:	cd b7       	in	r28, 0x3d	; 61
    3e18:	de b7       	in	r29, 0x3e	; 62
    3e1a:	9a 83       	std	Y+2, r25	; 0x02
    3e1c:	89 83       	std	Y+1, r24	; 0x01
    3e1e:	6b 83       	std	Y+3, r22	; 0x03
    3e20:	89 81       	ldd	r24, Y+1	; 0x01
    3e22:	9a 81       	ldd	r25, Y+2	; 0x02
    3e24:	4b 81       	ldd	r20, Y+3	; 0x03
    3e26:	6b 81       	ldd	r22, Y+3	; 0x03
    3e28:	07 d0       	rcall	.+14     	; 0x3e38 <_ZN12Adafruit_GFX11setTextSizeEhh>
    3e2a:	00 00       	nop
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	df 91       	pop	r29
    3e34:	cf 91       	pop	r28
    3e36:	08 95       	ret

00003e38 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    3e3e:	1f 92       	push	r1
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	9a 83       	std	Y+2, r25	; 0x02
    3e46:	89 83       	std	Y+1, r24	; 0x01
    3e48:	6b 83       	std	Y+3, r22	; 0x03
    3e4a:	4c 83       	std	Y+4, r20	; 0x04
    3e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4e:	88 23       	and	r24, r24
    3e50:	11 f0       	breq	.+4      	; 0x3e56 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1e>
    3e52:	2b 81       	ldd	r18, Y+3	; 0x03
    3e54:	01 c0       	rjmp	.+2      	; 0x3e58 <_ZN12Adafruit_GFX11setTextSizeEhh+0x20>
    3e56:	21 e0       	ldi	r18, 0x01	; 1
    3e58:	89 81       	ldd	r24, Y+1	; 0x01
    3e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	24 8b       	std	Z+20, r18	; 0x14
    3e60:	8c 81       	ldd	r24, Y+4	; 0x04
    3e62:	88 23       	and	r24, r24
    3e64:	11 f0       	breq	.+4      	; 0x3e6a <_ZN12Adafruit_GFX11setTextSizeEhh+0x32>
    3e66:	2c 81       	ldd	r18, Y+4	; 0x04
    3e68:	01 c0       	rjmp	.+2      	; 0x3e6c <_ZN12Adafruit_GFX11setTextSizeEhh+0x34>
    3e6a:	21 e0       	ldi	r18, 0x01	; 1
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e70:	fc 01       	movw	r30, r24
    3e72:	25 8b       	std	Z+21, r18	; 0x15
    3e74:	00 00       	nop
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	df 91       	pop	r29
    3e80:	cf 91       	pop	r28
    3e82:	08 95       	ret

00003e84 <_ZN12Adafruit_GFX11setRotationEh>:
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <_ZN12Adafruit_GFX11setRotationEh+0x6>
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	9a 83       	std	Y+2, r25	; 0x02
    3e90:	89 83       	std	Y+1, r24	; 0x01
    3e92:	6b 83       	std	Y+3, r22	; 0x03
    3e94:	8b 81       	ldd	r24, Y+3	; 0x03
    3e96:	28 2f       	mov	r18, r24
    3e98:	23 70       	andi	r18, 0x03	; 3
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	26 8b       	std	Z+22, r18	; 0x16
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	86 89       	ldd	r24, Z+22	; 0x16
    3eaa:	88 2f       	mov	r24, r24
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	81 30       	cpi	r24, 0x01	; 1
    3eb0:	91 05       	cpc	r25, r1
    3eb2:	09 f1       	breq	.+66     	; 0x3ef6 <_ZN12Adafruit_GFX11setRotationEh+0x72>
    3eb4:	82 30       	cpi	r24, 0x02	; 2
    3eb6:	91 05       	cpc	r25, r1
    3eb8:	1c f4       	brge	.+6      	; 0x3ec0 <_ZN12Adafruit_GFX11setRotationEh+0x3c>
    3eba:	89 2b       	or	r24, r25
    3ebc:	39 f0       	breq	.+14     	; 0x3ecc <_ZN12Adafruit_GFX11setRotationEh+0x48>
    3ebe:	30 c0       	rjmp	.+96     	; 0x3f20 <_ZN12Adafruit_GFX11setRotationEh+0x9c>
    3ec0:	82 30       	cpi	r24, 0x02	; 2
    3ec2:	91 05       	cpc	r25, r1
    3ec4:	19 f0       	breq	.+6      	; 0x3ecc <_ZN12Adafruit_GFX11setRotationEh+0x48>
    3ec6:	03 97       	sbiw	r24, 0x03	; 3
    3ec8:	b1 f0       	breq	.+44     	; 0x3ef6 <_ZN12Adafruit_GFX11setRotationEh+0x72>
    3eca:	2a c0       	rjmp	.+84     	; 0x3f20 <_ZN12Adafruit_GFX11setRotationEh+0x9c>
    3ecc:	89 81       	ldd	r24, Y+1	; 0x01
    3ece:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	24 81       	ldd	r18, Z+4	; 0x04
    3ed4:	35 81       	ldd	r19, Z+5	; 0x05
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eda:	fc 01       	movw	r30, r24
    3edc:	31 87       	std	Z+9, r19	; 0x09
    3ede:	20 87       	std	Z+8, r18	; 0x08
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	26 81       	ldd	r18, Z+6	; 0x06
    3ee8:	37 81       	ldd	r19, Z+7	; 0x07
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	9a 81       	ldd	r25, Y+2	; 0x02
    3eee:	fc 01       	movw	r30, r24
    3ef0:	33 87       	std	Z+11, r19	; 0x0b
    3ef2:	22 87       	std	Z+10, r18	; 0x0a
    3ef4:	15 c0       	rjmp	.+42     	; 0x3f20 <_ZN12Adafruit_GFX11setRotationEh+0x9c>
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    3efa:	fc 01       	movw	r30, r24
    3efc:	26 81       	ldd	r18, Z+6	; 0x06
    3efe:	37 81       	ldd	r19, Z+7	; 0x07
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	9a 81       	ldd	r25, Y+2	; 0x02
    3f04:	fc 01       	movw	r30, r24
    3f06:	31 87       	std	Z+9, r19	; 0x09
    3f08:	20 87       	std	Z+8, r18	; 0x08
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0e:	fc 01       	movw	r30, r24
    3f10:	24 81       	ldd	r18, Z+4	; 0x04
    3f12:	35 81       	ldd	r19, Z+5	; 0x05
    3f14:	89 81       	ldd	r24, Y+1	; 0x01
    3f16:	9a 81       	ldd	r25, Y+2	; 0x02
    3f18:	fc 01       	movw	r30, r24
    3f1a:	33 87       	std	Z+11, r19	; 0x0b
    3f1c:	22 87       	std	Z+10, r18	; 0x0a
    3f1e:	00 00       	nop
    3f20:	00 00       	nop
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	df 91       	pop	r29
    3f2a:	cf 91       	pop	r28
    3f2c:	08 95       	ret

00003f2e <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
    3f2e:	cf 93       	push	r28
    3f30:	df 93       	push	r29
    3f32:	00 d0       	rcall	.+0      	; 0x3f34 <_ZN12Adafruit_GFX13invertDisplayEb+0x6>
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
    3f38:	9a 83       	std	Y+2, r25	; 0x02
    3f3a:	89 83       	std	Y+1, r24	; 0x01
    3f3c:	6b 83       	std	Y+3, r22	; 0x03
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    3f3e:	00 00       	nop
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	df 91       	pop	r29
    3f48:	cf 91       	pop	r28
    3f4a:	08 95       	ret

00003f4c <_ZN8SPIClass8transferEh>:
    SPCR = settings.spcr;
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	1f 92       	push	r1
    3f52:	cd b7       	in	r28, 0x3d	; 61
    3f54:	de b7       	in	r29, 0x3e	; 62
    3f56:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    3f58:	8e e4       	ldi	r24, 0x4E	; 78
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	29 81       	ldd	r18, Y+1	; 0x01
    3f5e:	fc 01       	movw	r30, r24
    3f60:	20 83       	st	Z, r18
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3f62:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    3f64:	8d e4       	ldi	r24, 0x4D	; 77
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	fc 01       	movw	r30, r24
    3f6a:	80 81       	ld	r24, Z
    3f6c:	80 95       	com	r24
    3f6e:	88 1f       	adc	r24, r24
    3f70:	88 27       	eor	r24, r24
    3f72:	88 1f       	adc	r24, r24
    3f74:	88 23       	and	r24, r24
    3f76:	09 f0       	breq	.+2      	; 0x3f7a <_ZN8SPIClass8transferEh+0x2e>
    3f78:	f5 cf       	rjmp	.-22     	; 0x3f64 <_ZN8SPIClass8transferEh+0x18>
    return SPDR;
    3f7a:	8e e4       	ldi	r24, 0x4E	; 78
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	fc 01       	movw	r30, r24
    3f80:	80 81       	ld	r24, Z
  }
    3f82:	0f 90       	pop	r0
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	08 95       	ret

00003f8a <_ZN11SPISettingsC1Ev>:
*/
void Adafruit_SSD1306::stopscroll(void) {
  TRANSACTION_START
  ssd1306_command1(SSD1306_DEACTIVATE_SCROLL);
  TRANSACTION_END
}
    3f8a:	cf 93       	push	r28
    3f8c:	df 93       	push	r29
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	2f 97       	sbiw	r28, 0x0f	; 15
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	9f 87       	std	Y+15, r25	; 0x0f
    3fa0:	8e 87       	std	Y+14, r24	; 0x0e
    3fa2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fa4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fa6:	9a 83       	std	Y+2, r25	; 0x02
    3fa8:	89 83       	std	Y+1, r24	; 0x01
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	99 e0       	ldi	r25, 0x09	; 9
    3fae:	ad e3       	ldi	r26, 0x3D	; 61
    3fb0:	b0 e0       	ldi	r27, 0x00	; 0
    3fb2:	8b 83       	std	Y+3, r24	; 0x03
    3fb4:	9c 83       	std	Y+4, r25	; 0x04
    3fb6:	ad 83       	std	Y+5, r26	; 0x05
    3fb8:	be 83       	std	Y+6, r27	; 0x06
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	8f 83       	std	Y+7, r24	; 0x07
    3fbe:	18 86       	std	Y+8, r1	; 0x08
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	92 e1       	ldi	r25, 0x12	; 18
    3fc4:	aa e7       	ldi	r26, 0x7A	; 122
    3fc6:	b0 e0       	ldi	r27, 0x00	; 0
    3fc8:	89 87       	std	Y+9, r24	; 0x09
    3fca:	9a 87       	std	Y+10, r25	; 0x0a
    3fcc:	ab 87       	std	Y+11, r26	; 0x0b
    3fce:	bc 87       	std	Y+12, r27	; 0x0c
    3fd0:	1d 86       	std	Y+13, r1	; 0x0d
    3fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd4:	86 30       	cpi	r24, 0x06	; 6
    3fd6:	e8 f4       	brcc	.+58     	; 0x4012 <_ZN11SPISettingsC1Ev+0x88>
    3fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    3fda:	3c 81       	ldd	r19, Y+4	; 0x04
    3fdc:	4d 81       	ldd	r20, Y+5	; 0x05
    3fde:	5e 81       	ldd	r21, Y+6	; 0x06
    3fe0:	89 85       	ldd	r24, Y+9	; 0x09
    3fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe4:	ab 85       	ldd	r26, Y+11	; 0x0b
    3fe6:	bc 85       	ldd	r27, Y+12	; 0x0c
    3fe8:	28 17       	cp	r18, r24
    3fea:	39 07       	cpc	r19, r25
    3fec:	4a 07       	cpc	r20, r26
    3fee:	5b 07       	cpc	r21, r27
    3ff0:	80 f4       	brcc	.+32     	; 0x4012 <_ZN11SPISettingsC1Ev+0x88>
    3ff2:	89 85       	ldd	r24, Y+9	; 0x09
    3ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff6:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ff8:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ffa:	b6 95       	lsr	r27
    3ffc:	a7 95       	ror	r26
    3ffe:	97 95       	ror	r25
    4000:	87 95       	ror	r24
    4002:	89 87       	std	Y+9, r24	; 0x09
    4004:	9a 87       	std	Y+10, r25	; 0x0a
    4006:	ab 87       	std	Y+11, r26	; 0x0b
    4008:	bc 87       	std	Y+12, r27	; 0x0c
    400a:	8d 85       	ldd	r24, Y+13	; 0x0d
    400c:	8f 5f       	subi	r24, 0xFF	; 255
    400e:	8d 87       	std	Y+13, r24	; 0x0d
    4010:	e0 cf       	rjmp	.-64     	; 0x3fd2 <_ZN11SPISettingsC1Ev+0x48>
    4012:	8d 85       	ldd	r24, Y+13	; 0x0d
    4014:	86 30       	cpi	r24, 0x06	; 6
    4016:	11 f4       	brne	.+4      	; 0x401c <_ZN11SPISettingsC1Ev+0x92>
    4018:	87 e0       	ldi	r24, 0x07	; 7
    401a:	8d 87       	std	Y+13, r24	; 0x0d
    401c:	9d 85       	ldd	r25, Y+13	; 0x0d
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	89 27       	eor	r24, r25
    4022:	8d 87       	std	Y+13, r24	; 0x0d
    4024:	8f 81       	ldd	r24, Y+7	; 0x07
    4026:	88 23       	and	r24, r24
    4028:	11 f4       	brne	.+4      	; 0x402e <_ZN11SPISettingsC1Ev+0xa4>
    402a:	80 e7       	ldi	r24, 0x70	; 112
    402c:	01 c0       	rjmp	.+2      	; 0x4030 <_ZN11SPISettingsC1Ev+0xa6>
    402e:	80 e5       	ldi	r24, 0x50	; 80
    4030:	98 85       	ldd	r25, Y+8	; 0x08
    4032:	9c 70       	andi	r25, 0x0C	; 12
    4034:	29 2f       	mov	r18, r25
    4036:	28 2b       	or	r18, r24
    4038:	8d 85       	ldd	r24, Y+13	; 0x0d
    403a:	88 2f       	mov	r24, r24
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	95 95       	asr	r25
    4040:	87 95       	ror	r24
    4042:	83 70       	andi	r24, 0x03	; 3
    4044:	82 2b       	or	r24, r18
    4046:	28 2f       	mov	r18, r24
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	9a 81       	ldd	r25, Y+2	; 0x02
    404c:	fc 01       	movw	r30, r24
    404e:	20 83       	st	Z, r18
    4050:	8d 85       	ldd	r24, Y+13	; 0x0d
    4052:	28 2f       	mov	r18, r24
    4054:	21 70       	andi	r18, 0x01	; 1
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	9a 81       	ldd	r25, Y+2	; 0x02
    405a:	fc 01       	movw	r30, r24
    405c:	21 83       	std	Z+1, r18	; 0x01
    405e:	00 00       	nop
    4060:	2f 96       	adiw	r28, 0x0f	; 15
    4062:	0f b6       	in	r0, 0x3f	; 63
    4064:	f8 94       	cli
    4066:	de bf       	out	0x3e, r29	; 62
    4068:	0f be       	out	0x3f, r0	; 63
    406a:	cd bf       	out	0x3d, r28	; 61
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	08 95       	ret

00004072 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    4072:	8f 92       	push	r8
    4074:	9f 92       	push	r9
    4076:	af 92       	push	r10
    4078:	bf 92       	push	r11
    407a:	cf 92       	push	r12
    407c:	df 92       	push	r13
    407e:	ef 92       	push	r14
    4080:	ff 92       	push	r15
    4082:	0f 93       	push	r16
    4084:	cf 93       	push	r28
    4086:	df 93       	push	r29
    4088:	cd b7       	in	r28, 0x3d	; 61
    408a:	de b7       	in	r29, 0x3e	; 62
    408c:	2f 97       	sbiw	r28, 0x0f	; 15
    408e:	0f b6       	in	r0, 0x3f	; 63
    4090:	f8 94       	cli
    4092:	de bf       	out	0x3e, r29	; 62
    4094:	0f be       	out	0x3f, r0	; 63
    4096:	cd bf       	out	0x3d, r28	; 61
    4098:	9a 83       	std	Y+2, r25	; 0x02
    409a:	89 83       	std	Y+1, r24	; 0x01
    409c:	6b 83       	std	Y+3, r22	; 0x03
    409e:	4c 83       	std	Y+4, r20	; 0x04
    40a0:	3e 83       	std	Y+6, r19	; 0x06
    40a2:	2d 83       	std	Y+5, r18	; 0x05
    40a4:	0f 83       	std	Y+7, r16	; 0x07
    40a6:	c8 86       	std	Y+8, r12	; 0x08
    40a8:	d9 86       	std	Y+9, r13	; 0x09
    40aa:	ea 86       	std	Y+10, r14	; 0x0a
    40ac:	fb 86       	std	Y+11, r15	; 0x0b
    40ae:	8c 86       	std	Y+12, r8	; 0x0c
    40b0:	9d 86       	std	Y+13, r9	; 0x0d
    40b2:	ae 86       	std	Y+14, r10	; 0x0e
    40b4:	bf 86       	std	Y+15, r11	; 0x0f
    40b6:	8c 81       	ldd	r24, Y+4	; 0x04
    40b8:	48 2f       	mov	r20, r24
    40ba:	50 e0       	ldi	r21, 0x00	; 0
    40bc:	8b 81       	ldd	r24, Y+3	; 0x03
    40be:	28 2f       	mov	r18, r24
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	9a 81       	ldd	r25, Y+2	; 0x02
    40c6:	b9 01       	movw	r22, r18
    40c8:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_ZN12Adafruit_GFXC1Eii>
    40cc:	29 ec       	ldi	r18, 0xC9	; 201
    40ce:	32 e0       	ldi	r19, 0x02	; 2
    40d0:	89 81       	ldd	r24, Y+1	; 0x01
    40d2:	9a 81       	ldd	r25, Y+2	; 0x02
    40d4:	fc 01       	movw	r30, r24
    40d6:	31 83       	std	Z+1, r19	; 0x01
    40d8:	20 83       	st	Z, r18
    40da:	89 81       	ldd	r24, Y+1	; 0x01
    40dc:	9a 81       	ldd	r25, Y+2	; 0x02
    40de:	fc 01       	movw	r30, r24
    40e0:	14 8e       	std	Z+28, r1	; 0x1c
    40e2:	13 8e       	std	Z+27, r1	; 0x1b
    40e4:	8d 81       	ldd	r24, Y+5	; 0x05
    40e6:	9e 81       	ldd	r25, Y+6	; 0x06
    40e8:	89 2b       	or	r24, r25
    40ea:	19 f0       	breq	.+6      	; 0x40f2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x80>
    40ec:	8d 81       	ldd	r24, Y+5	; 0x05
    40ee:	9e 81       	ldd	r25, Y+6	; 0x06
    40f0:	02 c0       	rjmp	.+4      	; 0x40f6 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x84>
    40f2:	81 ec       	ldi	r24, 0xC1	; 193
    40f4:	95 e0       	ldi	r25, 0x05	; 5
    40f6:	29 81       	ldd	r18, Y+1	; 0x01
    40f8:	3a 81       	ldd	r19, Y+2	; 0x02
    40fa:	f9 01       	movw	r30, r18
    40fc:	96 8f       	std	Z+30, r25	; 0x1e
    40fe:	85 8f       	std	Z+29, r24	; 0x1d
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	9a 81       	ldd	r25, Y+2	; 0x02
    4104:	fc 01       	movw	r30, r24
    4106:	10 a2       	std	Z+32, r1	; 0x20
    4108:	17 8e       	std	Z+31, r1	; 0x1f
    410a:	89 81       	ldd	r24, Y+1	; 0x01
    410c:	9a 81       	ldd	r25, Y+2	; 0x02
    410e:	2f ef       	ldi	r18, 0xFF	; 255
    4110:	fc 01       	movw	r30, r24
    4112:	24 a3       	std	Z+36, r18	; 0x24
    4114:	89 81       	ldd	r24, Y+1	; 0x01
    4116:	9a 81       	ldd	r25, Y+2	; 0x02
    4118:	2f ef       	ldi	r18, 0xFF	; 255
    411a:	fc 01       	movw	r30, r24
    411c:	25 a3       	std	Z+37, r18	; 0x25
    411e:	89 81       	ldd	r24, Y+1	; 0x01
    4120:	9a 81       	ldd	r25, Y+2	; 0x02
    4122:	2f ef       	ldi	r18, 0xFF	; 255
    4124:	fc 01       	movw	r30, r24
    4126:	26 a3       	std	Z+38, r18	; 0x26
    4128:	89 81       	ldd	r24, Y+1	; 0x01
    412a:	9a 81       	ldd	r25, Y+2	; 0x02
    412c:	2f ef       	ldi	r18, 0xFF	; 255
    412e:	fc 01       	movw	r30, r24
    4130:	27 a3       	std	Z+39, r18	; 0x27
    4132:	89 81       	ldd	r24, Y+1	; 0x01
    4134:	9a 81       	ldd	r25, Y+2	; 0x02
    4136:	2f 81       	ldd	r18, Y+7	; 0x07
    4138:	fc 01       	movw	r30, r24
    413a:	20 a7       	std	Z+40, r18	; 0x28
    413c:	29 81       	ldd	r18, Y+1	; 0x01
    413e:	3a 81       	ldd	r19, Y+2	; 0x02
    4140:	88 85       	ldd	r24, Y+8	; 0x08
    4142:	99 85       	ldd	r25, Y+9	; 0x09
    4144:	aa 85       	ldd	r26, Y+10	; 0x0a
    4146:	bb 85       	ldd	r27, Y+11	; 0x0b
    4148:	f9 01       	movw	r30, r18
    414a:	85 ab       	std	Z+53, r24	; 0x35
    414c:	96 ab       	std	Z+54, r25	; 0x36
    414e:	a7 ab       	std	Z+55, r26	; 0x37
    4150:	b0 af       	std	Z+56, r27	; 0x38
    4152:	29 81       	ldd	r18, Y+1	; 0x01
    4154:	3a 81       	ldd	r19, Y+2	; 0x02
    4156:	8c 85       	ldd	r24, Y+12	; 0x0c
    4158:	9d 85       	ldd	r25, Y+13	; 0x0d
    415a:	ae 85       	ldd	r26, Y+14	; 0x0e
    415c:	bf 85       	ldd	r27, Y+15	; 0x0f
    415e:	f9 01       	movw	r30, r18
    4160:	81 af       	std	Z+57, r24	; 0x39
    4162:	92 af       	std	Z+58, r25	; 0x3a
    4164:	a3 af       	std	Z+59, r26	; 0x3b
    4166:	b4 af       	std	Z+60, r27	; 0x3c
    4168:	89 81       	ldd	r24, Y+1	; 0x01
    416a:	9a 81       	ldd	r25, Y+2	; 0x02
    416c:	ce 96       	adiw	r24, 0x3e	; 62
    416e:	0d df       	rcall	.-486    	; 0x3f8a <_ZN11SPISettingsC1Ev>
    4170:	00 00       	nop
    4172:	2f 96       	adiw	r28, 0x0f	; 15
    4174:	0f b6       	in	r0, 0x3f	; 63
    4176:	f8 94       	cli
    4178:	de bf       	out	0x3e, r29	; 62
    417a:	0f be       	out	0x3f, r0	; 63
    417c:	cd bf       	out	0x3d, r28	; 61
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	0f 91       	pop	r16
    4184:	ff 90       	pop	r15
    4186:	ef 90       	pop	r14
    4188:	df 90       	pop	r13
    418a:	cf 90       	pop	r12
    418c:	bf 90       	pop	r11
    418e:	af 90       	pop	r10
    4190:	9f 90       	pop	r9
    4192:	8f 90       	pop	r8
    4194:	08 95       	ret

00004196 <_ZN16Adafruit_SSD1306D1Ev>:
    4196:	cf 93       	push	r28
    4198:	df 93       	push	r29
    419a:	1f 92       	push	r1
    419c:	1f 92       	push	r1
    419e:	cd b7       	in	r28, 0x3d	; 61
    41a0:	de b7       	in	r29, 0x3e	; 62
    41a2:	9a 83       	std	Y+2, r25	; 0x02
    41a4:	89 83       	std	Y+1, r24	; 0x01
    41a6:	29 ec       	ldi	r18, 0xC9	; 201
    41a8:	32 e0       	ldi	r19, 0x02	; 2
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	9a 81       	ldd	r25, Y+2	; 0x02
    41ae:	fc 01       	movw	r30, r24
    41b0:	31 83       	std	Z+1, r19	; 0x01
    41b2:	20 83       	st	Z, r18
    41b4:	89 81       	ldd	r24, Y+1	; 0x01
    41b6:	9a 81       	ldd	r25, Y+2	; 0x02
    41b8:	fc 01       	movw	r30, r24
    41ba:	87 8d       	ldd	r24, Z+31	; 0x1f
    41bc:	90 a1       	ldd	r25, Z+32	; 0x20
    41be:	89 2b       	or	r24, r25
    41c0:	61 f0       	breq	.+24     	; 0x41da <_ZN16Adafruit_SSD1306D1Ev+0x44>
    41c2:	89 81       	ldd	r24, Y+1	; 0x01
    41c4:	9a 81       	ldd	r25, Y+2	; 0x02
    41c6:	fc 01       	movw	r30, r24
    41c8:	87 8d       	ldd	r24, Z+31	; 0x1f
    41ca:	90 a1       	ldd	r25, Z+32	; 0x20
    41cc:	0e 94 06 64 	call	0xc80c	; 0xc80c <free>
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	9a 81       	ldd	r25, Y+2	; 0x02
    41d4:	fc 01       	movw	r30, r24
    41d6:	10 a2       	std	Z+32, r1	; 0x20
    41d8:	17 8e       	std	Z+31, r1	; 0x1f
    41da:	00 00       	nop
    41dc:	0f 90       	pop	r0
    41de:	0f 90       	pop	r0
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	08 95       	ret

000041e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
    41ee:	27 97       	sbiw	r28, 0x07	; 7
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	f8 94       	cli
    41f4:	de bf       	out	0x3e, r29	; 62
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	cd bf       	out	0x3d, r28	; 61
    41fa:	9e 83       	std	Y+6, r25	; 0x06
    41fc:	8d 83       	std	Y+5, r24	; 0x05
    41fe:	6f 83       	std	Y+7, r22	; 0x07
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	fc 01       	movw	r30, r24
    4206:	85 8d       	ldd	r24, Z+29	; 0x1d
    4208:	96 8d       	ldd	r25, Z+30	; 0x1e
    420a:	89 2b       	or	r24, r25
    420c:	e9 f1       	breq	.+122    	; 0x4288 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xa2>
    420e:	8d 81       	ldd	r24, Y+5	; 0x05
    4210:	9e 81       	ldd	r25, Y+6	; 0x06
    4212:	fc 01       	movw	r30, r24
    4214:	81 a1       	ldd	r24, Z+33	; 0x21
    4216:	28 2f       	mov	r18, r24
    4218:	88 0f       	add	r24, r24
    421a:	33 0b       	sbc	r19, r19
    421c:	8d 81       	ldd	r24, Y+5	; 0x05
    421e:	9e 81       	ldd	r25, Y+6	; 0x06
    4220:	fc 01       	movw	r30, r24
    4222:	85 8d       	ldd	r24, Z+29	; 0x1d
    4224:	96 8d       	ldd	r25, Z+30	; 0x1e
    4226:	b9 01       	movw	r22, r18
    4228:	0e 94 e7 55 	call	0xabce	; 0xabce <_ZN7TwoWire17beginTransmissionEi>
    422c:	8d 81       	ldd	r24, Y+5	; 0x05
    422e:	9e 81       	ldd	r25, Y+6	; 0x06
    4230:	fc 01       	movw	r30, r24
    4232:	85 8d       	ldd	r24, Z+29	; 0x1d
    4234:	96 8d       	ldd	r25, Z+30	; 0x1e
    4236:	fc 01       	movw	r30, r24
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	fc 01       	movw	r30, r24
    423e:	20 81       	ld	r18, Z
    4240:	31 81       	ldd	r19, Z+1	; 0x01
    4242:	8d 81       	ldd	r24, Y+5	; 0x05
    4244:	9e 81       	ldd	r25, Y+6	; 0x06
    4246:	fc 01       	movw	r30, r24
    4248:	85 8d       	ldd	r24, Z+29	; 0x1d
    424a:	96 8d       	ldd	r25, Z+30	; 0x1e
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	f9 01       	movw	r30, r18
    4250:	19 95       	eicall
    4252:	8d 81       	ldd	r24, Y+5	; 0x05
    4254:	9e 81       	ldd	r25, Y+6	; 0x06
    4256:	fc 01       	movw	r30, r24
    4258:	85 8d       	ldd	r24, Z+29	; 0x1d
    425a:	96 8d       	ldd	r25, Z+30	; 0x1e
    425c:	fc 01       	movw	r30, r24
    425e:	80 81       	ld	r24, Z
    4260:	91 81       	ldd	r25, Z+1	; 0x01
    4262:	fc 01       	movw	r30, r24
    4264:	20 81       	ld	r18, Z
    4266:	31 81       	ldd	r19, Z+1	; 0x01
    4268:	8d 81       	ldd	r24, Y+5	; 0x05
    426a:	9e 81       	ldd	r25, Y+6	; 0x06
    426c:	fc 01       	movw	r30, r24
    426e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4270:	96 8d       	ldd	r25, Z+30	; 0x1e
    4272:	6f 81       	ldd	r22, Y+7	; 0x07
    4274:	f9 01       	movw	r30, r18
    4276:	19 95       	eicall
    4278:	8d 81       	ldd	r24, Y+5	; 0x05
    427a:	9e 81       	ldd	r25, Y+6	; 0x06
    427c:	fc 01       	movw	r30, r24
    427e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4280:	96 8d       	ldd	r25, Z+30	; 0x1e
    4282:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>
    4286:	88 c0       	rjmp	.+272    	; 0x4398 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x1b2>
    4288:	8d 81       	ldd	r24, Y+5	; 0x05
    428a:	9e 81       	ldd	r25, Y+6	; 0x06
    428c:	fc 01       	movw	r30, r24
    428e:	85 a5       	ldd	r24, Z+45	; 0x2d
    4290:	96 a5       	ldd	r25, Z+46	; 0x2e
    4292:	2d 81       	ldd	r18, Y+5	; 0x05
    4294:	3e 81       	ldd	r19, Y+6	; 0x06
    4296:	f9 01       	movw	r30, r18
    4298:	25 a5       	ldd	r18, Z+45	; 0x2d
    429a:	36 a5       	ldd	r19, Z+46	; 0x2e
    429c:	f9 01       	movw	r30, r18
    429e:	20 81       	ld	r18, Z
    42a0:	42 2f       	mov	r20, r18
    42a2:	2d 81       	ldd	r18, Y+5	; 0x05
    42a4:	3e 81       	ldd	r19, Y+6	; 0x06
    42a6:	f9 01       	movw	r30, r18
    42a8:	23 a9       	ldd	r18, Z+51	; 0x33
    42aa:	20 95       	com	r18
    42ac:	24 23       	and	r18, r20
    42ae:	fc 01       	movw	r30, r24
    42b0:	20 83       	st	Z, r18
    42b2:	8d 81       	ldd	r24, Y+5	; 0x05
    42b4:	9e 81       	ldd	r25, Y+6	; 0x06
    42b6:	9a 83       	std	Y+2, r25	; 0x02
    42b8:	89 83       	std	Y+1, r24	; 0x01
    42ba:	8f 81       	ldd	r24, Y+7	; 0x07
    42bc:	8b 83       	std	Y+3, r24	; 0x03
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	9a 81       	ldd	r25, Y+2	; 0x02
    42c2:	fc 01       	movw	r30, r24
    42c4:	83 8d       	ldd	r24, Z+27	; 0x1b
    42c6:	94 8d       	ldd	r25, Z+28	; 0x1c
    42c8:	89 2b       	or	r24, r25
    42ca:	19 f0       	breq	.+6      	; 0x42d2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xec>
    42cc:	8b 81       	ldd	r24, Y+3	; 0x03
    42ce:	3e de       	rcall	.-900    	; 0x3f4c <_ZN8SPIClass8transferEh>
    42d0:	63 c0       	rjmp	.+198    	; 0x4398 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x1b2>
    42d2:	80 e8       	ldi	r24, 0x80	; 128
    42d4:	8c 83       	std	Y+4, r24	; 0x04
    42d6:	8c 81       	ldd	r24, Y+4	; 0x04
    42d8:	88 23       	and	r24, r24
    42da:	09 f4       	brne	.+2      	; 0x42de <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xf8>
    42dc:	5d c0       	rjmp	.+186    	; 0x4398 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x1b2>
    42de:	9b 81       	ldd	r25, Y+3	; 0x03
    42e0:	8c 81       	ldd	r24, Y+4	; 0x04
    42e2:	89 23       	and	r24, r25
    42e4:	88 23       	and	r24, r24
    42e6:	a1 f0       	breq	.+40     	; 0x4310 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x12a>
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	9a 81       	ldd	r25, Y+2	; 0x02
    42ec:	fc 01       	movw	r30, r24
    42ee:	81 a5       	ldd	r24, Z+41	; 0x29
    42f0:	92 a5       	ldd	r25, Z+42	; 0x2a
    42f2:	29 81       	ldd	r18, Y+1	; 0x01
    42f4:	3a 81       	ldd	r19, Y+2	; 0x02
    42f6:	f9 01       	movw	r30, r18
    42f8:	21 a5       	ldd	r18, Z+41	; 0x29
    42fa:	32 a5       	ldd	r19, Z+42	; 0x2a
    42fc:	f9 01       	movw	r30, r18
    42fe:	40 81       	ld	r20, Z
    4300:	29 81       	ldd	r18, Y+1	; 0x01
    4302:	3a 81       	ldd	r19, Y+2	; 0x02
    4304:	f9 01       	movw	r30, r18
    4306:	21 a9       	ldd	r18, Z+49	; 0x31
    4308:	24 2b       	or	r18, r20
    430a:	fc 01       	movw	r30, r24
    430c:	20 83       	st	Z, r18
    430e:	15 c0       	rjmp	.+42     	; 0x433a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x154>
    4310:	89 81       	ldd	r24, Y+1	; 0x01
    4312:	9a 81       	ldd	r25, Y+2	; 0x02
    4314:	fc 01       	movw	r30, r24
    4316:	81 a5       	ldd	r24, Z+41	; 0x29
    4318:	92 a5       	ldd	r25, Z+42	; 0x2a
    431a:	29 81       	ldd	r18, Y+1	; 0x01
    431c:	3a 81       	ldd	r19, Y+2	; 0x02
    431e:	f9 01       	movw	r30, r18
    4320:	21 a5       	ldd	r18, Z+41	; 0x29
    4322:	32 a5       	ldd	r19, Z+42	; 0x2a
    4324:	f9 01       	movw	r30, r18
    4326:	20 81       	ld	r18, Z
    4328:	42 2f       	mov	r20, r18
    432a:	29 81       	ldd	r18, Y+1	; 0x01
    432c:	3a 81       	ldd	r19, Y+2	; 0x02
    432e:	f9 01       	movw	r30, r18
    4330:	21 a9       	ldd	r18, Z+49	; 0x31
    4332:	20 95       	com	r18
    4334:	24 23       	and	r18, r20
    4336:	fc 01       	movw	r30, r24
    4338:	20 83       	st	Z, r18
    433a:	89 81       	ldd	r24, Y+1	; 0x01
    433c:	9a 81       	ldd	r25, Y+2	; 0x02
    433e:	fc 01       	movw	r30, r24
    4340:	83 a5       	ldd	r24, Z+43	; 0x2b
    4342:	94 a5       	ldd	r25, Z+44	; 0x2c
    4344:	29 81       	ldd	r18, Y+1	; 0x01
    4346:	3a 81       	ldd	r19, Y+2	; 0x02
    4348:	f9 01       	movw	r30, r18
    434a:	23 a5       	ldd	r18, Z+43	; 0x2b
    434c:	34 a5       	ldd	r19, Z+44	; 0x2c
    434e:	f9 01       	movw	r30, r18
    4350:	40 81       	ld	r20, Z
    4352:	29 81       	ldd	r18, Y+1	; 0x01
    4354:	3a 81       	ldd	r19, Y+2	; 0x02
    4356:	f9 01       	movw	r30, r18
    4358:	22 a9       	ldd	r18, Z+50	; 0x32
    435a:	24 2b       	or	r18, r20
    435c:	fc 01       	movw	r30, r24
    435e:	20 83       	st	Z, r18
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	9a 81       	ldd	r25, Y+2	; 0x02
    4364:	fc 01       	movw	r30, r24
    4366:	83 a5       	ldd	r24, Z+43	; 0x2b
    4368:	94 a5       	ldd	r25, Z+44	; 0x2c
    436a:	29 81       	ldd	r18, Y+1	; 0x01
    436c:	3a 81       	ldd	r19, Y+2	; 0x02
    436e:	f9 01       	movw	r30, r18
    4370:	23 a5       	ldd	r18, Z+43	; 0x2b
    4372:	34 a5       	ldd	r19, Z+44	; 0x2c
    4374:	f9 01       	movw	r30, r18
    4376:	20 81       	ld	r18, Z
    4378:	42 2f       	mov	r20, r18
    437a:	29 81       	ldd	r18, Y+1	; 0x01
    437c:	3a 81       	ldd	r19, Y+2	; 0x02
    437e:	f9 01       	movw	r30, r18
    4380:	22 a9       	ldd	r18, Z+50	; 0x32
    4382:	20 95       	com	r18
    4384:	24 23       	and	r18, r20
    4386:	fc 01       	movw	r30, r24
    4388:	20 83       	st	Z, r18
    438a:	8c 81       	ldd	r24, Y+4	; 0x04
    438c:	88 2f       	mov	r24, r24
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	95 95       	asr	r25
    4392:	87 95       	ror	r24
    4394:	8c 83       	std	Y+4, r24	; 0x04
    4396:	9f cf       	rjmp	.-194    	; 0x42d6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xf0>
    4398:	00 00       	nop
    439a:	27 96       	adiw	r28, 0x07	; 7
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	f8 94       	cli
    43a0:	de bf       	out	0x3e, r29	; 62
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	cd bf       	out	0x3d, r28	; 61
    43a6:	df 91       	pop	r29
    43a8:	cf 91       	pop	r28
    43aa:	08 95       	ret

000043ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    43ac:	cf 93       	push	r28
    43ae:	df 93       	push	r29
    43b0:	cd b7       	in	r28, 0x3d	; 61
    43b2:	de b7       	in	r29, 0x3e	; 62
    43b4:	61 97       	sbiw	r28, 0x11	; 17
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	f8 94       	cli
    43ba:	de bf       	out	0x3e, r29	; 62
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	cd bf       	out	0x3d, r28	; 61
    43c0:	9e 87       	std	Y+14, r25	; 0x0e
    43c2:	8d 87       	std	Y+13, r24	; 0x0d
    43c4:	78 8b       	std	Y+16, r23	; 0x10
    43c6:	6f 87       	std	Y+15, r22	; 0x0f
    43c8:	49 8b       	std	Y+17, r20	; 0x11
    43ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    43cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ce:	fc 01       	movw	r30, r24
    43d0:	85 8d       	ldd	r24, Z+29	; 0x1d
    43d2:	96 8d       	ldd	r25, Z+30	; 0x1e
    43d4:	89 2b       	or	r24, r25
    43d6:	09 f4       	brne	.+2      	; 0x43da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x2e>
    43d8:	92 c0       	rjmp	.+292    	; 0x44fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x152>
    43da:	8d 85       	ldd	r24, Y+13	; 0x0d
    43dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43de:	fc 01       	movw	r30, r24
    43e0:	81 a1       	ldd	r24, Z+33	; 0x21
    43e2:	28 2f       	mov	r18, r24
    43e4:	88 0f       	add	r24, r24
    43e6:	33 0b       	sbc	r19, r19
    43e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ec:	fc 01       	movw	r30, r24
    43ee:	85 8d       	ldd	r24, Z+29	; 0x1d
    43f0:	96 8d       	ldd	r25, Z+30	; 0x1e
    43f2:	b9 01       	movw	r22, r18
    43f4:	0e 94 e7 55 	call	0xabce	; 0xabce <_ZN7TwoWire17beginTransmissionEi>
    43f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    43fc:	fc 01       	movw	r30, r24
    43fe:	85 8d       	ldd	r24, Z+29	; 0x1d
    4400:	96 8d       	ldd	r25, Z+30	; 0x1e
    4402:	fc 01       	movw	r30, r24
    4404:	80 81       	ld	r24, Z
    4406:	91 81       	ldd	r25, Z+1	; 0x01
    4408:	fc 01       	movw	r30, r24
    440a:	20 81       	ld	r18, Z
    440c:	31 81       	ldd	r19, Z+1	; 0x01
    440e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4410:	9e 85       	ldd	r25, Y+14	; 0x0e
    4412:	fc 01       	movw	r30, r24
    4414:	85 8d       	ldd	r24, Z+29	; 0x1d
    4416:	96 8d       	ldd	r25, Z+30	; 0x1e
    4418:	60 e0       	ldi	r22, 0x00	; 0
    441a:	f9 01       	movw	r30, r18
    441c:	19 95       	eicall
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	9a 83       	std	Y+2, r25	; 0x02
    4424:	89 83       	std	Y+1, r24	; 0x01
    4426:	89 89       	ldd	r24, Y+17	; 0x11
    4428:	9f ef       	ldi	r25, 0xFF	; 255
    442a:	98 0f       	add	r25, r24
    442c:	99 8b       	std	Y+17, r25	; 0x11
    442e:	91 e0       	ldi	r25, 0x01	; 1
    4430:	88 23       	and	r24, r24
    4432:	09 f4       	brne	.+2      	; 0x4436 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8a>
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	99 23       	and	r25, r25
    4438:	09 f4       	brne	.+2      	; 0x443c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x90>
    443a:	59 c0       	rjmp	.+178    	; 0x44ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x142>
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	9a 81       	ldd	r25, Y+2	; 0x02
    4440:	80 97       	sbiw	r24, 0x20	; 32
    4442:	68 f1       	brcs	.+90     	; 0x449e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf2>
    4444:	8d 85       	ldd	r24, Y+13	; 0x0d
    4446:	9e 85       	ldd	r25, Y+14	; 0x0e
    4448:	fc 01       	movw	r30, r24
    444a:	85 8d       	ldd	r24, Z+29	; 0x1d
    444c:	96 8d       	ldd	r25, Z+30	; 0x1e
    444e:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>
    4452:	8d 85       	ldd	r24, Y+13	; 0x0d
    4454:	9e 85       	ldd	r25, Y+14	; 0x0e
    4456:	fc 01       	movw	r30, r24
    4458:	81 a1       	ldd	r24, Z+33	; 0x21
    445a:	28 2f       	mov	r18, r24
    445c:	88 0f       	add	r24, r24
    445e:	33 0b       	sbc	r19, r19
    4460:	8d 85       	ldd	r24, Y+13	; 0x0d
    4462:	9e 85       	ldd	r25, Y+14	; 0x0e
    4464:	fc 01       	movw	r30, r24
    4466:	85 8d       	ldd	r24, Z+29	; 0x1d
    4468:	96 8d       	ldd	r25, Z+30	; 0x1e
    446a:	b9 01       	movw	r22, r18
    446c:	0e 94 e7 55 	call	0xabce	; 0xabce <_ZN7TwoWire17beginTransmissionEi>
    4470:	8d 85       	ldd	r24, Y+13	; 0x0d
    4472:	9e 85       	ldd	r25, Y+14	; 0x0e
    4474:	fc 01       	movw	r30, r24
    4476:	85 8d       	ldd	r24, Z+29	; 0x1d
    4478:	96 8d       	ldd	r25, Z+30	; 0x1e
    447a:	fc 01       	movw	r30, r24
    447c:	80 81       	ld	r24, Z
    447e:	91 81       	ldd	r25, Z+1	; 0x01
    4480:	fc 01       	movw	r30, r24
    4482:	20 81       	ld	r18, Z
    4484:	31 81       	ldd	r19, Z+1	; 0x01
    4486:	8d 85       	ldd	r24, Y+13	; 0x0d
    4488:	9e 85       	ldd	r25, Y+14	; 0x0e
    448a:	fc 01       	movw	r30, r24
    448c:	85 8d       	ldd	r24, Z+29	; 0x1d
    448e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4490:	60 e0       	ldi	r22, 0x00	; 0
    4492:	f9 01       	movw	r30, r18
    4494:	19 95       	eicall
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	9a 83       	std	Y+2, r25	; 0x02
    449c:	89 83       	std	Y+1, r24	; 0x01
    449e:	8d 85       	ldd	r24, Y+13	; 0x0d
    44a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a2:	fc 01       	movw	r30, r24
    44a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    44a6:	96 8d       	ldd	r25, Z+30	; 0x1e
    44a8:	fc 01       	movw	r30, r24
    44aa:	80 81       	ld	r24, Z
    44ac:	91 81       	ldd	r25, Z+1	; 0x01
    44ae:	fc 01       	movw	r30, r24
    44b0:	20 81       	ld	r18, Z
    44b2:	31 81       	ldd	r19, Z+1	; 0x01
    44b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    44b6:	98 89       	ldd	r25, Y+16	; 0x10
    44b8:	ac 01       	movw	r20, r24
    44ba:	4f 5f       	subi	r20, 0xFF	; 255
    44bc:	5f 4f       	sbci	r21, 0xFF	; 255
    44be:	58 8b       	std	Y+16, r21	; 0x10
    44c0:	4f 87       	std	Y+15, r20	; 0x0f
    44c2:	9c 83       	std	Y+4, r25	; 0x04
    44c4:	8b 83       	std	Y+3, r24	; 0x03
    44c6:	8b 81       	ldd	r24, Y+3	; 0x03
    44c8:	9c 81       	ldd	r25, Y+4	; 0x04
    44ca:	fc 01       	movw	r30, r24
    44cc:	84 91       	lpm	r24, Z
    44ce:	8d 83       	std	Y+5, r24	; 0x05
    44d0:	4d 81       	ldd	r20, Y+5	; 0x05
    44d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d6:	fc 01       	movw	r30, r24
    44d8:	85 8d       	ldd	r24, Z+29	; 0x1d
    44da:	96 8d       	ldd	r25, Z+30	; 0x1e
    44dc:	64 2f       	mov	r22, r20
    44de:	f9 01       	movw	r30, r18
    44e0:	19 95       	eicall
    44e2:	89 81       	ldd	r24, Y+1	; 0x01
    44e4:	9a 81       	ldd	r25, Y+2	; 0x02
    44e6:	01 96       	adiw	r24, 0x01	; 1
    44e8:	9a 83       	std	Y+2, r25	; 0x02
    44ea:	89 83       	std	Y+1, r24	; 0x01
    44ec:	9c cf       	rjmp	.-200    	; 0x4426 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7a>
    44ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    44f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44f2:	fc 01       	movw	r30, r24
    44f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    44f6:	96 8d       	ldd	r25, Z+30	; 0x1e
    44f8:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>
    44fc:	a0 c0       	rjmp	.+320    	; 0x463e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x292>
    44fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4500:	9e 85       	ldd	r25, Y+14	; 0x0e
    4502:	fc 01       	movw	r30, r24
    4504:	85 a5       	ldd	r24, Z+45	; 0x2d
    4506:	96 a5       	ldd	r25, Z+46	; 0x2e
    4508:	2d 85       	ldd	r18, Y+13	; 0x0d
    450a:	3e 85       	ldd	r19, Y+14	; 0x0e
    450c:	f9 01       	movw	r30, r18
    450e:	25 a5       	ldd	r18, Z+45	; 0x2d
    4510:	36 a5       	ldd	r19, Z+46	; 0x2e
    4512:	f9 01       	movw	r30, r18
    4514:	20 81       	ld	r18, Z
    4516:	42 2f       	mov	r20, r18
    4518:	2d 85       	ldd	r18, Y+13	; 0x0d
    451a:	3e 85       	ldd	r19, Y+14	; 0x0e
    451c:	f9 01       	movw	r30, r18
    451e:	23 a9       	ldd	r18, Z+51	; 0x33
    4520:	20 95       	com	r18
    4522:	24 23       	and	r18, r20
    4524:	fc 01       	movw	r30, r24
    4526:	20 83       	st	Z, r18
    4528:	89 89       	ldd	r24, Y+17	; 0x11
    452a:	9f ef       	ldi	r25, 0xFF	; 255
    452c:	98 0f       	add	r25, r24
    452e:	99 8b       	std	Y+17, r25	; 0x11
    4530:	91 e0       	ldi	r25, 0x01	; 1
    4532:	88 23       	and	r24, r24
    4534:	09 f4       	brne	.+2      	; 0x4538 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x18c>
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	99 23       	and	r25, r25
    453a:	09 f4       	brne	.+2      	; 0x453e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x192>
    453c:	80 c0       	rjmp	.+256    	; 0x463e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x292>
    453e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4540:	98 89       	ldd	r25, Y+16	; 0x10
    4542:	9c 01       	movw	r18, r24
    4544:	2f 5f       	subi	r18, 0xFF	; 255
    4546:	3f 4f       	sbci	r19, 0xFF	; 255
    4548:	38 8b       	std	Y+16, r19	; 0x10
    454a:	2f 87       	std	Y+15, r18	; 0x0f
    454c:	9f 83       	std	Y+7, r25	; 0x07
    454e:	8e 83       	std	Y+6, r24	; 0x06
    4550:	8e 81       	ldd	r24, Y+6	; 0x06
    4552:	9f 81       	ldd	r25, Y+7	; 0x07
    4554:	fc 01       	movw	r30, r24
    4556:	84 91       	lpm	r24, Z
    4558:	88 87       	std	Y+8, r24	; 0x08
    455a:	28 85       	ldd	r18, Y+8	; 0x08
    455c:	8d 85       	ldd	r24, Y+13	; 0x0d
    455e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4560:	9a 87       	std	Y+10, r25	; 0x0a
    4562:	89 87       	std	Y+9, r24	; 0x09
    4564:	2b 87       	std	Y+11, r18	; 0x0b
    4566:	89 85       	ldd	r24, Y+9	; 0x09
    4568:	9a 85       	ldd	r25, Y+10	; 0x0a
    456a:	fc 01       	movw	r30, r24
    456c:	83 8d       	ldd	r24, Z+27	; 0x1b
    456e:	94 8d       	ldd	r25, Z+28	; 0x1c
    4570:	89 2b       	or	r24, r25
    4572:	19 f0       	breq	.+6      	; 0x457a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x1ce>
    4574:	8b 85       	ldd	r24, Y+11	; 0x0b
    4576:	ea dc       	rcall	.-1580   	; 0x3f4c <_ZN8SPIClass8transferEh>
    4578:	d7 cf       	rjmp	.-82     	; 0x4528 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x17c>
    457a:	80 e8       	ldi	r24, 0x80	; 128
    457c:	8c 87       	std	Y+12, r24	; 0x0c
    457e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4580:	88 23       	and	r24, r24
    4582:	91 f2       	breq	.-92     	; 0x4528 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x17c>
    4584:	9b 85       	ldd	r25, Y+11	; 0x0b
    4586:	8c 85       	ldd	r24, Y+12	; 0x0c
    4588:	89 23       	and	r24, r25
    458a:	88 23       	and	r24, r24
    458c:	a1 f0       	breq	.+40     	; 0x45b6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20a>
    458e:	89 85       	ldd	r24, Y+9	; 0x09
    4590:	9a 85       	ldd	r25, Y+10	; 0x0a
    4592:	fc 01       	movw	r30, r24
    4594:	81 a5       	ldd	r24, Z+41	; 0x29
    4596:	92 a5       	ldd	r25, Z+42	; 0x2a
    4598:	29 85       	ldd	r18, Y+9	; 0x09
    459a:	3a 85       	ldd	r19, Y+10	; 0x0a
    459c:	f9 01       	movw	r30, r18
    459e:	21 a5       	ldd	r18, Z+41	; 0x29
    45a0:	32 a5       	ldd	r19, Z+42	; 0x2a
    45a2:	f9 01       	movw	r30, r18
    45a4:	40 81       	ld	r20, Z
    45a6:	29 85       	ldd	r18, Y+9	; 0x09
    45a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    45aa:	f9 01       	movw	r30, r18
    45ac:	21 a9       	ldd	r18, Z+49	; 0x31
    45ae:	24 2b       	or	r18, r20
    45b0:	fc 01       	movw	r30, r24
    45b2:	20 83       	st	Z, r18
    45b4:	15 c0       	rjmp	.+42     	; 0x45e0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x234>
    45b6:	89 85       	ldd	r24, Y+9	; 0x09
    45b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ba:	fc 01       	movw	r30, r24
    45bc:	81 a5       	ldd	r24, Z+41	; 0x29
    45be:	92 a5       	ldd	r25, Z+42	; 0x2a
    45c0:	29 85       	ldd	r18, Y+9	; 0x09
    45c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    45c4:	f9 01       	movw	r30, r18
    45c6:	21 a5       	ldd	r18, Z+41	; 0x29
    45c8:	32 a5       	ldd	r19, Z+42	; 0x2a
    45ca:	f9 01       	movw	r30, r18
    45cc:	20 81       	ld	r18, Z
    45ce:	42 2f       	mov	r20, r18
    45d0:	29 85       	ldd	r18, Y+9	; 0x09
    45d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    45d4:	f9 01       	movw	r30, r18
    45d6:	21 a9       	ldd	r18, Z+49	; 0x31
    45d8:	20 95       	com	r18
    45da:	24 23       	and	r18, r20
    45dc:	fc 01       	movw	r30, r24
    45de:	20 83       	st	Z, r18
    45e0:	89 85       	ldd	r24, Y+9	; 0x09
    45e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e4:	fc 01       	movw	r30, r24
    45e6:	83 a5       	ldd	r24, Z+43	; 0x2b
    45e8:	94 a5       	ldd	r25, Z+44	; 0x2c
    45ea:	29 85       	ldd	r18, Y+9	; 0x09
    45ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    45ee:	f9 01       	movw	r30, r18
    45f0:	23 a5       	ldd	r18, Z+43	; 0x2b
    45f2:	34 a5       	ldd	r19, Z+44	; 0x2c
    45f4:	f9 01       	movw	r30, r18
    45f6:	40 81       	ld	r20, Z
    45f8:	29 85       	ldd	r18, Y+9	; 0x09
    45fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    45fc:	f9 01       	movw	r30, r18
    45fe:	22 a9       	ldd	r18, Z+50	; 0x32
    4600:	24 2b       	or	r18, r20
    4602:	fc 01       	movw	r30, r24
    4604:	20 83       	st	Z, r18
    4606:	89 85       	ldd	r24, Y+9	; 0x09
    4608:	9a 85       	ldd	r25, Y+10	; 0x0a
    460a:	fc 01       	movw	r30, r24
    460c:	83 a5       	ldd	r24, Z+43	; 0x2b
    460e:	94 a5       	ldd	r25, Z+44	; 0x2c
    4610:	29 85       	ldd	r18, Y+9	; 0x09
    4612:	3a 85       	ldd	r19, Y+10	; 0x0a
    4614:	f9 01       	movw	r30, r18
    4616:	23 a5       	ldd	r18, Z+43	; 0x2b
    4618:	34 a5       	ldd	r19, Z+44	; 0x2c
    461a:	f9 01       	movw	r30, r18
    461c:	20 81       	ld	r18, Z
    461e:	42 2f       	mov	r20, r18
    4620:	29 85       	ldd	r18, Y+9	; 0x09
    4622:	3a 85       	ldd	r19, Y+10	; 0x0a
    4624:	f9 01       	movw	r30, r18
    4626:	22 a9       	ldd	r18, Z+50	; 0x32
    4628:	20 95       	com	r18
    462a:	24 23       	and	r18, r20
    462c:	fc 01       	movw	r30, r24
    462e:	20 83       	st	Z, r18
    4630:	8c 85       	ldd	r24, Y+12	; 0x0c
    4632:	88 2f       	mov	r24, r24
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	95 95       	asr	r25
    4638:	87 95       	ror	r24
    463a:	8c 87       	std	Y+12, r24	; 0x0c
    463c:	a0 cf       	rjmp	.-192    	; 0x457e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x1d2>
    463e:	00 00       	nop
    4640:	61 96       	adiw	r28, 0x11	; 17
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	f8 94       	cli
    4646:	de bf       	out	0x3e, r29	; 62
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	cd bf       	out	0x3d, r28	; 61
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	08 95       	ret

00004652 <_ZN16Adafruit_SSD13065beginEhhbb>:
    4652:	cf 92       	push	r12
    4654:	df 92       	push	r13
    4656:	ef 92       	push	r14
    4658:	ff 92       	push	r15
    465a:	0f 93       	push	r16
    465c:	1f 93       	push	r17
    465e:	cf 93       	push	r28
    4660:	df 93       	push	r29
    4662:	cd b7       	in	r28, 0x3d	; 61
    4664:	de b7       	in	r29, 0x3e	; 62
    4666:	af 97       	sbiw	r28, 0x2f	; 47
    4668:	0f b6       	in	r0, 0x3f	; 63
    466a:	f8 94       	cli
    466c:	de bf       	out	0x3e, r29	; 62
    466e:	0f be       	out	0x3f, r0	; 63
    4670:	cd bf       	out	0x3d, r28	; 61
    4672:	9b a7       	std	Y+43, r25	; 0x2b
    4674:	8a a7       	std	Y+42, r24	; 0x2a
    4676:	6c a7       	std	Y+44, r22	; 0x2c
    4678:	4d a7       	std	Y+45, r20	; 0x2d
    467a:	2e a7       	std	Y+46, r18	; 0x2e
    467c:	0f a7       	std	Y+47, r16	; 0x2f
    467e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4680:	9b a5       	ldd	r25, Y+43	; 0x2b
    4682:	fc 01       	movw	r30, r24
    4684:	87 8d       	ldd	r24, Z+31	; 0x1f
    4686:	90 a1       	ldd	r25, Z+32	; 0x20
    4688:	89 2b       	or	r24, r25
    468a:	69 f5       	brne	.+90     	; 0x46e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    468c:	8a a5       	ldd	r24, Y+42	; 0x2a
    468e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4690:	fc 01       	movw	r30, r24
    4692:	24 81       	ldd	r18, Z+4	; 0x04
    4694:	35 81       	ldd	r19, Z+5	; 0x05
    4696:	8a a5       	ldd	r24, Y+42	; 0x2a
    4698:	9b a5       	ldd	r25, Y+43	; 0x2b
    469a:	fc 01       	movw	r30, r24
    469c:	86 81       	ldd	r24, Z+6	; 0x06
    469e:	97 81       	ldd	r25, Z+7	; 0x07
    46a0:	07 96       	adiw	r24, 0x07	; 7
    46a2:	99 23       	and	r25, r25
    46a4:	0c f4       	brge	.+2      	; 0x46a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x56>
    46a6:	07 96       	adiw	r24, 0x07	; 7
    46a8:	95 95       	asr	r25
    46aa:	87 95       	ror	r24
    46ac:	95 95       	asr	r25
    46ae:	87 95       	ror	r24
    46b0:	95 95       	asr	r25
    46b2:	87 95       	ror	r24
    46b4:	ac 01       	movw	r20, r24
    46b6:	24 9f       	mul	r18, r20
    46b8:	c0 01       	movw	r24, r0
    46ba:	25 9f       	mul	r18, r21
    46bc:	90 0d       	add	r25, r0
    46be:	34 9f       	mul	r19, r20
    46c0:	90 0d       	add	r25, r0
    46c2:	11 24       	eor	r1, r1
    46c4:	0e 94 6e 63 	call	0xc6dc	; 0xc6dc <malloc>
    46c8:	9c 01       	movw	r18, r24
    46ca:	8a a5       	ldd	r24, Y+42	; 0x2a
    46cc:	9b a5       	ldd	r25, Y+43	; 0x2b
    46ce:	fc 01       	movw	r30, r24
    46d0:	30 a3       	std	Z+32, r19	; 0x20
    46d2:	27 8f       	std	Z+31, r18	; 0x1f
    46d4:	8a a5       	ldd	r24, Y+42	; 0x2a
    46d6:	9b a5       	ldd	r25, Y+43	; 0x2b
    46d8:	fc 01       	movw	r30, r24
    46da:	87 8d       	ldd	r24, Z+31	; 0x1f
    46dc:	90 a1       	ldd	r25, Z+32	; 0x20
    46de:	89 2b       	or	r24, r25
    46e0:	11 f4       	brne	.+4      	; 0x46e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	01 c0       	rjmp	.+2      	; 0x46e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    46e6:	80 e0       	ldi	r24, 0x00	; 0
    46e8:	88 23       	and	r24, r24
    46ea:	11 f0       	breq	.+4      	; 0x46f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x9e>
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	31 c3       	rjmp	.+1634   	; 0x4d52 <_ZN16Adafruit_SSD13065beginEhhbb+0x700>
    46f0:	8a a5       	ldd	r24, Y+42	; 0x2a
    46f2:	9b a5       	ldd	r25, Y+43	; 0x2b
    46f4:	fe d4       	rcall	.+2556   	; 0x50f2 <_ZN16Adafruit_SSD130612clearDisplayEv>
    46f6:	8a a5       	ldd	r24, Y+42	; 0x2a
    46f8:	9b a5       	ldd	r25, Y+43	; 0x2b
    46fa:	fc 01       	movw	r30, r24
    46fc:	86 81       	ldd	r24, Z+6	; 0x06
    46fe:	97 81       	ldd	r25, Z+7	; 0x07
    4700:	81 97       	sbiw	r24, 0x21	; 33
    4702:	54 f1       	brlt	.+84     	; 0x4758 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
    4704:	8a a5       	ldd	r24, Y+42	; 0x2a
    4706:	9b a5       	ldd	r25, Y+43	; 0x2b
    4708:	fc 01       	movw	r30, r24
    470a:	86 81       	ldd	r24, Z+6	; 0x06
    470c:	97 81       	ldd	r25, Z+7	; 0x07
    470e:	80 54       	subi	r24, 0x40	; 64
    4710:	91 09       	sbc	r25, r1
    4712:	99 23       	and	r25, r25
    4714:	0c f4       	brge	.+2      	; 0x4718 <_ZN16Adafruit_SSD13065beginEhhbb+0xc6>
    4716:	01 96       	adiw	r24, 0x01	; 1
    4718:	95 95       	asr	r25
    471a:	87 95       	ror	r24
    471c:	ac 01       	movw	r20, r24
    471e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4720:	9b a5       	ldd	r25, Y+43	; 0x2b
    4722:	fc 01       	movw	r30, r24
    4724:	84 81       	ldd	r24, Z+4	; 0x04
    4726:	95 81       	ldd	r25, Z+5	; 0x05
    4728:	82 55       	subi	r24, 0x52	; 82
    472a:	91 09       	sbc	r25, r1
    472c:	99 23       	and	r25, r25
    472e:	0c f4       	brge	.+2      	; 0x4732 <_ZN16Adafruit_SSD13065beginEhhbb+0xe0>
    4730:	01 96       	adiw	r24, 0x01	; 1
    4732:	95 95       	asr	r25
    4734:	87 95       	ror	r24
    4736:	bc 01       	movw	r22, r24
    4738:	8a a5       	ldd	r24, Y+42	; 0x2a
    473a:	9b a5       	ldd	r25, Y+43	; 0x2b
    473c:	cc 24       	eor	r12, r12
    473e:	c3 94       	inc	r12
    4740:	d1 2c       	mov	r13, r1
    4742:	68 94       	set
    4744:	ee 24       	eor	r14, r14
    4746:	e6 f8       	bld	r14, 6
    4748:	f1 2c       	mov	r15, r1
    474a:	02 e5       	ldi	r16, 0x52	; 82
    474c:	10 e0       	ldi	r17, 0x00	; 0
    474e:	20 e9       	ldi	r18, 0x90	; 144
    4750:	36 e0       	ldi	r19, 0x06	; 6
    4752:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    4756:	28 c0       	rjmp	.+80     	; 0x47a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x156>
    4758:	8a a5       	ldd	r24, Y+42	; 0x2a
    475a:	9b a5       	ldd	r25, Y+43	; 0x2b
    475c:	fc 01       	movw	r30, r24
    475e:	86 81       	ldd	r24, Z+6	; 0x06
    4760:	97 81       	ldd	r25, Z+7	; 0x07
    4762:	80 97       	sbiw	r24, 0x20	; 32
    4764:	99 23       	and	r25, r25
    4766:	0c f4       	brge	.+2      	; 0x476a <_ZN16Adafruit_SSD13065beginEhhbb+0x118>
    4768:	01 96       	adiw	r24, 0x01	; 1
    476a:	95 95       	asr	r25
    476c:	87 95       	ror	r24
    476e:	ac 01       	movw	r20, r24
    4770:	8a a5       	ldd	r24, Y+42	; 0x2a
    4772:	9b a5       	ldd	r25, Y+43	; 0x2b
    4774:	fc 01       	movw	r30, r24
    4776:	84 81       	ldd	r24, Z+4	; 0x04
    4778:	95 81       	ldd	r25, Z+5	; 0x05
    477a:	83 57       	subi	r24, 0x73	; 115
    477c:	91 09       	sbc	r25, r1
    477e:	99 23       	and	r25, r25
    4780:	0c f4       	brge	.+2      	; 0x4784 <_ZN16Adafruit_SSD13065beginEhhbb+0x132>
    4782:	01 96       	adiw	r24, 0x01	; 1
    4784:	95 95       	asr	r25
    4786:	87 95       	ror	r24
    4788:	bc 01       	movw	r22, r24
    478a:	8a a5       	ldd	r24, Y+42	; 0x2a
    478c:	9b a5       	ldd	r25, Y+43	; 0x2b
    478e:	cc 24       	eor	r12, r12
    4790:	c3 94       	inc	r12
    4792:	d1 2c       	mov	r13, r1
    4794:	68 94       	set
    4796:	ee 24       	eor	r14, r14
    4798:	e5 f8       	bld	r14, 5
    479a:	f1 2c       	mov	r15, r1
    479c:	03 e7       	ldi	r16, 0x73	; 115
    479e:	10 e0       	ldi	r17, 0x00	; 0
    47a0:	20 e5       	ldi	r18, 0x50	; 80
    47a2:	39 e0       	ldi	r19, 0x09	; 9
    47a4:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    47a8:	2c a5       	ldd	r18, Y+44	; 0x2c
    47aa:	8a a5       	ldd	r24, Y+42	; 0x2a
    47ac:	9b a5       	ldd	r25, Y+43	; 0x2b
    47ae:	fc 01       	movw	r30, r24
    47b0:	22 a3       	std	Z+34, r18	; 0x22
    47b2:	8a a5       	ldd	r24, Y+42	; 0x2a
    47b4:	9b a5       	ldd	r25, Y+43	; 0x2b
    47b6:	fc 01       	movw	r30, r24
    47b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    47ba:	96 8d       	ldd	r25, Z+30	; 0x1e
    47bc:	89 2b       	or	r24, r25
    47be:	f9 f0       	breq	.+62     	; 0x47fe <_ZN16Adafruit_SSD13065beginEhhbb+0x1ac>
    47c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    47c2:	88 23       	and	r24, r24
    47c4:	59 f4       	brne	.+22     	; 0x47dc <_ZN16Adafruit_SSD13065beginEhhbb+0x18a>
    47c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    47c8:	9b a5       	ldd	r25, Y+43	; 0x2b
    47ca:	fc 01       	movw	r30, r24
    47cc:	86 81       	ldd	r24, Z+6	; 0x06
    47ce:	97 81       	ldd	r25, Z+7	; 0x07
    47d0:	80 97       	sbiw	r24, 0x20	; 32
    47d2:	11 f4       	brne	.+4      	; 0x47d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x186>
    47d4:	2c e3       	ldi	r18, 0x3C	; 60
    47d6:	03 c0       	rjmp	.+6      	; 0x47de <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    47d8:	2d e3       	ldi	r18, 0x3D	; 61
    47da:	01 c0       	rjmp	.+2      	; 0x47de <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    47dc:	2d a5       	ldd	r18, Y+45	; 0x2d
    47de:	8a a5       	ldd	r24, Y+42	; 0x2a
    47e0:	9b a5       	ldd	r25, Y+43	; 0x2b
    47e2:	fc 01       	movw	r30, r24
    47e4:	21 a3       	std	Z+33, r18	; 0x21
    47e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    47e8:	88 23       	and	r24, r24
    47ea:	09 f4       	brne	.+2      	; 0x47ee <_ZN16Adafruit_SSD13065beginEhhbb+0x19c>
    47ec:	5a c1       	rjmp	.+692    	; 0x4aa2 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    47ee:	8a a5       	ldd	r24, Y+42	; 0x2a
    47f0:	9b a5       	ldd	r25, Y+43	; 0x2b
    47f2:	fc 01       	movw	r30, r24
    47f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    47f6:	96 8d       	ldd	r25, Z+30	; 0x1e
    47f8:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <_ZN7TwoWire5beginEv>
    47fc:	52 c1       	rjmp	.+676    	; 0x4aa2 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    47fe:	8a a5       	ldd	r24, Y+42	; 0x2a
    4800:	9b a5       	ldd	r25, Y+43	; 0x2b
    4802:	fc 01       	movw	r30, r24
    4804:	86 a1       	ldd	r24, Z+38	; 0x26
    4806:	61 e0       	ldi	r22, 0x01	; 1
    4808:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    480c:	8a a5       	ldd	r24, Y+42	; 0x2a
    480e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4810:	fc 01       	movw	r30, r24
    4812:	87 a1       	ldd	r24, Z+39	; 0x27
    4814:	61 e0       	ldi	r22, 0x01	; 1
    4816:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    481a:	8a a5       	ldd	r24, Y+42	; 0x2a
    481c:	9b a5       	ldd	r25, Y+43	; 0x2b
    481e:	fc 01       	movw	r30, r24
    4820:	86 a1       	ldd	r24, Z+38	; 0x26
    4822:	08 2e       	mov	r0, r24
    4824:	00 0c       	add	r0, r0
    4826:	99 0b       	sbc	r25, r25
    4828:	81 51       	subi	r24, 0x11	; 17
    482a:	94 4f       	sbci	r25, 0xF4	; 244
    482c:	9b 83       	std	Y+3, r25	; 0x03
    482e:	8a 83       	std	Y+2, r24	; 0x02
    4830:	8a 81       	ldd	r24, Y+2	; 0x02
    4832:	9b 81       	ldd	r25, Y+3	; 0x03
    4834:	fc 01       	movw	r30, r24
    4836:	84 91       	lpm	r24, Z
    4838:	8c 83       	std	Y+4, r24	; 0x04
    483a:	8c 81       	ldd	r24, Y+4	; 0x04
    483c:	88 2f       	mov	r24, r24
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	88 0f       	add	r24, r24
    4842:	99 1f       	adc	r25, r25
    4844:	81 5b       	subi	r24, 0xB1	; 177
    4846:	93 4f       	sbci	r25, 0xF3	; 243
    4848:	9e 83       	std	Y+6, r25	; 0x06
    484a:	8d 83       	std	Y+5, r24	; 0x05
    484c:	8d 81       	ldd	r24, Y+5	; 0x05
    484e:	9e 81       	ldd	r25, Y+6	; 0x06
    4850:	fc 01       	movw	r30, r24
    4852:	25 91       	lpm	r18, Z+
    4854:	34 91       	lpm	r19, Z
    4856:	cf 01       	movw	r24, r30
    4858:	38 87       	std	Y+8, r19	; 0x08
    485a:	2f 83       	std	Y+7, r18	; 0x07
    485c:	9e 83       	std	Y+6, r25	; 0x06
    485e:	8d 83       	std	Y+5, r24	; 0x05
    4860:	8f 81       	ldd	r24, Y+7	; 0x07
    4862:	98 85       	ldd	r25, Y+8	; 0x08
    4864:	9c 01       	movw	r18, r24
    4866:	8a a5       	ldd	r24, Y+42	; 0x2a
    4868:	9b a5       	ldd	r25, Y+43	; 0x2b
    486a:	fc 01       	movw	r30, r24
    486c:	36 a7       	std	Z+46, r19	; 0x2e
    486e:	25 a7       	std	Z+45, r18	; 0x2d
    4870:	8a a5       	ldd	r24, Y+42	; 0x2a
    4872:	9b a5       	ldd	r25, Y+43	; 0x2b
    4874:	fc 01       	movw	r30, r24
    4876:	86 a1       	ldd	r24, Z+38	; 0x26
    4878:	08 2e       	mov	r0, r24
    487a:	00 0c       	add	r0, r0
    487c:	99 0b       	sbc	r25, r25
    487e:	87 55       	subi	r24, 0x57	; 87
    4880:	94 4f       	sbci	r25, 0xF4	; 244
    4882:	9a 87       	std	Y+10, r25	; 0x0a
    4884:	89 87       	std	Y+9, r24	; 0x09
    4886:	89 85       	ldd	r24, Y+9	; 0x09
    4888:	9a 85       	ldd	r25, Y+10	; 0x0a
    488a:	fc 01       	movw	r30, r24
    488c:	84 91       	lpm	r24, Z
    488e:	8b 87       	std	Y+11, r24	; 0x0b
    4890:	8a a5       	ldd	r24, Y+42	; 0x2a
    4892:	9b a5       	ldd	r25, Y+43	; 0x2b
    4894:	2b 85       	ldd	r18, Y+11	; 0x0b
    4896:	fc 01       	movw	r30, r24
    4898:	23 ab       	std	Z+51, r18	; 0x33
    489a:	8a a5       	ldd	r24, Y+42	; 0x2a
    489c:	9b a5       	ldd	r25, Y+43	; 0x2b
    489e:	fc 01       	movw	r30, r24
    48a0:	87 a1       	ldd	r24, Z+39	; 0x27
    48a2:	08 2e       	mov	r0, r24
    48a4:	00 0c       	add	r0, r0
    48a6:	99 0b       	sbc	r25, r25
    48a8:	81 51       	subi	r24, 0x11	; 17
    48aa:	94 4f       	sbci	r25, 0xF4	; 244
    48ac:	9d 87       	std	Y+13, r25	; 0x0d
    48ae:	8c 87       	std	Y+12, r24	; 0x0c
    48b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    48b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    48b4:	fc 01       	movw	r30, r24
    48b6:	84 91       	lpm	r24, Z
    48b8:	8e 87       	std	Y+14, r24	; 0x0e
    48ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    48bc:	88 2f       	mov	r24, r24
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	88 0f       	add	r24, r24
    48c2:	99 1f       	adc	r25, r25
    48c4:	81 5b       	subi	r24, 0xB1	; 177
    48c6:	93 4f       	sbci	r25, 0xF3	; 243
    48c8:	98 8b       	std	Y+16, r25	; 0x10
    48ca:	8f 87       	std	Y+15, r24	; 0x0f
    48cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    48ce:	98 89       	ldd	r25, Y+16	; 0x10
    48d0:	fc 01       	movw	r30, r24
    48d2:	25 91       	lpm	r18, Z+
    48d4:	34 91       	lpm	r19, Z
    48d6:	cf 01       	movw	r24, r30
    48d8:	3a 8b       	std	Y+18, r19	; 0x12
    48da:	29 8b       	std	Y+17, r18	; 0x11
    48dc:	98 8b       	std	Y+16, r25	; 0x10
    48de:	8f 87       	std	Y+15, r24	; 0x0f
    48e0:	89 89       	ldd	r24, Y+17	; 0x11
    48e2:	9a 89       	ldd	r25, Y+18	; 0x12
    48e4:	9c 01       	movw	r18, r24
    48e6:	8a a5       	ldd	r24, Y+42	; 0x2a
    48e8:	9b a5       	ldd	r25, Y+43	; 0x2b
    48ea:	fc 01       	movw	r30, r24
    48ec:	30 ab       	std	Z+48, r19	; 0x30
    48ee:	27 a7       	std	Z+47, r18	; 0x2f
    48f0:	8a a5       	ldd	r24, Y+42	; 0x2a
    48f2:	9b a5       	ldd	r25, Y+43	; 0x2b
    48f4:	fc 01       	movw	r30, r24
    48f6:	87 a1       	ldd	r24, Z+39	; 0x27
    48f8:	08 2e       	mov	r0, r24
    48fa:	00 0c       	add	r0, r0
    48fc:	99 0b       	sbc	r25, r25
    48fe:	87 55       	subi	r24, 0x57	; 87
    4900:	94 4f       	sbci	r25, 0xF4	; 244
    4902:	9c 8b       	std	Y+20, r25	; 0x14
    4904:	8b 8b       	std	Y+19, r24	; 0x13
    4906:	8b 89       	ldd	r24, Y+19	; 0x13
    4908:	9c 89       	ldd	r25, Y+20	; 0x14
    490a:	fc 01       	movw	r30, r24
    490c:	84 91       	lpm	r24, Z
    490e:	8d 8b       	std	Y+21, r24	; 0x15
    4910:	8a a5       	ldd	r24, Y+42	; 0x2a
    4912:	9b a5       	ldd	r25, Y+43	; 0x2b
    4914:	2d 89       	ldd	r18, Y+21	; 0x15
    4916:	fc 01       	movw	r30, r24
    4918:	24 ab       	std	Z+52, r18	; 0x34
    491a:	8a a5       	ldd	r24, Y+42	; 0x2a
    491c:	9b a5       	ldd	r25, Y+43	; 0x2b
    491e:	fc 01       	movw	r30, r24
    4920:	87 a5       	ldd	r24, Z+47	; 0x2f
    4922:	90 a9       	ldd	r25, Z+48	; 0x30
    4924:	2a a5       	ldd	r18, Y+42	; 0x2a
    4926:	3b a5       	ldd	r19, Y+43	; 0x2b
    4928:	f9 01       	movw	r30, r18
    492a:	27 a5       	ldd	r18, Z+47	; 0x2f
    492c:	30 a9       	ldd	r19, Z+48	; 0x30
    492e:	f9 01       	movw	r30, r18
    4930:	40 81       	ld	r20, Z
    4932:	2a a5       	ldd	r18, Y+42	; 0x2a
    4934:	3b a5       	ldd	r19, Y+43	; 0x2b
    4936:	f9 01       	movw	r30, r18
    4938:	24 a9       	ldd	r18, Z+52	; 0x34
    493a:	24 2b       	or	r18, r20
    493c:	fc 01       	movw	r30, r24
    493e:	20 83       	st	Z, r18
    4940:	8a a5       	ldd	r24, Y+42	; 0x2a
    4942:	9b a5       	ldd	r25, Y+43	; 0x2b
    4944:	fc 01       	movw	r30, r24
    4946:	83 8d       	ldd	r24, Z+27	; 0x1b
    4948:	94 8d       	ldd	r25, Z+28	; 0x1c
    494a:	89 2b       	or	r24, r25
    494c:	39 f0       	breq	.+14     	; 0x495c <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    494e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4950:	88 23       	and	r24, r24
    4952:	09 f4       	brne	.+2      	; 0x4956 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    4954:	a6 c0       	rjmp	.+332    	; 0x4aa2 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    4956:	0e 94 d0 4f 	call	0x9fa0	; 0x9fa0 <_ZN8SPIClass5beginEv>
    495a:	a3 c0       	rjmp	.+326    	; 0x4aa2 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    495c:	8a a5       	ldd	r24, Y+42	; 0x2a
    495e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4960:	fc 01       	movw	r30, r24
    4962:	84 a1       	ldd	r24, Z+36	; 0x24
    4964:	61 e0       	ldi	r22, 0x01	; 1
    4966:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    496a:	8a a5       	ldd	r24, Y+42	; 0x2a
    496c:	9b a5       	ldd	r25, Y+43	; 0x2b
    496e:	fc 01       	movw	r30, r24
    4970:	85 a1       	ldd	r24, Z+37	; 0x25
    4972:	61 e0       	ldi	r22, 0x01	; 1
    4974:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    4978:	8a a5       	ldd	r24, Y+42	; 0x2a
    497a:	9b a5       	ldd	r25, Y+43	; 0x2b
    497c:	fc 01       	movw	r30, r24
    497e:	84 a1       	ldd	r24, Z+36	; 0x24
    4980:	08 2e       	mov	r0, r24
    4982:	00 0c       	add	r0, r0
    4984:	99 0b       	sbc	r25, r25
    4986:	81 51       	subi	r24, 0x11	; 17
    4988:	94 4f       	sbci	r25, 0xF4	; 244
    498a:	9f 8b       	std	Y+23, r25	; 0x17
    498c:	8e 8b       	std	Y+22, r24	; 0x16
    498e:	8e 89       	ldd	r24, Y+22	; 0x16
    4990:	9f 89       	ldd	r25, Y+23	; 0x17
    4992:	fc 01       	movw	r30, r24
    4994:	84 91       	lpm	r24, Z
    4996:	88 8f       	std	Y+24, r24	; 0x18
    4998:	88 8d       	ldd	r24, Y+24	; 0x18
    499a:	88 2f       	mov	r24, r24
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	88 0f       	add	r24, r24
    49a0:	99 1f       	adc	r25, r25
    49a2:	81 5b       	subi	r24, 0xB1	; 177
    49a4:	93 4f       	sbci	r25, 0xF3	; 243
    49a6:	9a 8f       	std	Y+26, r25	; 0x1a
    49a8:	89 8f       	std	Y+25, r24	; 0x19
    49aa:	89 8d       	ldd	r24, Y+25	; 0x19
    49ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    49ae:	fc 01       	movw	r30, r24
    49b0:	25 91       	lpm	r18, Z+
    49b2:	34 91       	lpm	r19, Z
    49b4:	cf 01       	movw	r24, r30
    49b6:	3c 8f       	std	Y+28, r19	; 0x1c
    49b8:	2b 8f       	std	Y+27, r18	; 0x1b
    49ba:	9a 8f       	std	Y+26, r25	; 0x1a
    49bc:	89 8f       	std	Y+25, r24	; 0x19
    49be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49c2:	9c 01       	movw	r18, r24
    49c4:	8a a5       	ldd	r24, Y+42	; 0x2a
    49c6:	9b a5       	ldd	r25, Y+43	; 0x2b
    49c8:	fc 01       	movw	r30, r24
    49ca:	32 a7       	std	Z+42, r19	; 0x2a
    49cc:	21 a7       	std	Z+41, r18	; 0x29
    49ce:	8a a5       	ldd	r24, Y+42	; 0x2a
    49d0:	9b a5       	ldd	r25, Y+43	; 0x2b
    49d2:	fc 01       	movw	r30, r24
    49d4:	84 a1       	ldd	r24, Z+36	; 0x24
    49d6:	08 2e       	mov	r0, r24
    49d8:	00 0c       	add	r0, r0
    49da:	99 0b       	sbc	r25, r25
    49dc:	87 55       	subi	r24, 0x57	; 87
    49de:	94 4f       	sbci	r25, 0xF4	; 244
    49e0:	9e 8f       	std	Y+30, r25	; 0x1e
    49e2:	8d 8f       	std	Y+29, r24	; 0x1d
    49e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49e8:	fc 01       	movw	r30, r24
    49ea:	84 91       	lpm	r24, Z
    49ec:	8f 8f       	std	Y+31, r24	; 0x1f
    49ee:	8a a5       	ldd	r24, Y+42	; 0x2a
    49f0:	9b a5       	ldd	r25, Y+43	; 0x2b
    49f2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    49f4:	fc 01       	movw	r30, r24
    49f6:	21 ab       	std	Z+49, r18	; 0x31
    49f8:	8a a5       	ldd	r24, Y+42	; 0x2a
    49fa:	9b a5       	ldd	r25, Y+43	; 0x2b
    49fc:	fc 01       	movw	r30, r24
    49fe:	85 a1       	ldd	r24, Z+37	; 0x25
    4a00:	08 2e       	mov	r0, r24
    4a02:	00 0c       	add	r0, r0
    4a04:	99 0b       	sbc	r25, r25
    4a06:	81 51       	subi	r24, 0x11	; 17
    4a08:	94 4f       	sbci	r25, 0xF4	; 244
    4a0a:	99 a3       	std	Y+33, r25	; 0x21
    4a0c:	88 a3       	std	Y+32, r24	; 0x20
    4a0e:	88 a1       	ldd	r24, Y+32	; 0x20
    4a10:	99 a1       	ldd	r25, Y+33	; 0x21
    4a12:	fc 01       	movw	r30, r24
    4a14:	84 91       	lpm	r24, Z
    4a16:	8a a3       	std	Y+34, r24	; 0x22
    4a18:	8a a1       	ldd	r24, Y+34	; 0x22
    4a1a:	88 2f       	mov	r24, r24
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	88 0f       	add	r24, r24
    4a20:	99 1f       	adc	r25, r25
    4a22:	81 5b       	subi	r24, 0xB1	; 177
    4a24:	93 4f       	sbci	r25, 0xF3	; 243
    4a26:	9c a3       	std	Y+36, r25	; 0x24
    4a28:	8b a3       	std	Y+35, r24	; 0x23
    4a2a:	8b a1       	ldd	r24, Y+35	; 0x23
    4a2c:	9c a1       	ldd	r25, Y+36	; 0x24
    4a2e:	fc 01       	movw	r30, r24
    4a30:	25 91       	lpm	r18, Z+
    4a32:	34 91       	lpm	r19, Z
    4a34:	cf 01       	movw	r24, r30
    4a36:	3e a3       	std	Y+38, r19	; 0x26
    4a38:	2d a3       	std	Y+37, r18	; 0x25
    4a3a:	9c a3       	std	Y+36, r25	; 0x24
    4a3c:	8b a3       	std	Y+35, r24	; 0x23
    4a3e:	8d a1       	ldd	r24, Y+37	; 0x25
    4a40:	9e a1       	ldd	r25, Y+38	; 0x26
    4a42:	9c 01       	movw	r18, r24
    4a44:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a46:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a48:	fc 01       	movw	r30, r24
    4a4a:	34 a7       	std	Z+44, r19	; 0x2c
    4a4c:	23 a7       	std	Z+43, r18	; 0x2b
    4a4e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a50:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a52:	fc 01       	movw	r30, r24
    4a54:	85 a1       	ldd	r24, Z+37	; 0x25
    4a56:	08 2e       	mov	r0, r24
    4a58:	00 0c       	add	r0, r0
    4a5a:	99 0b       	sbc	r25, r25
    4a5c:	87 55       	subi	r24, 0x57	; 87
    4a5e:	94 4f       	sbci	r25, 0xF4	; 244
    4a60:	98 a7       	std	Y+40, r25	; 0x28
    4a62:	8f a3       	std	Y+39, r24	; 0x27
    4a64:	8f a1       	ldd	r24, Y+39	; 0x27
    4a66:	98 a5       	ldd	r25, Y+40	; 0x28
    4a68:	fc 01       	movw	r30, r24
    4a6a:	84 91       	lpm	r24, Z
    4a6c:	89 a7       	std	Y+41, r24	; 0x29
    4a6e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a70:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a72:	29 a5       	ldd	r18, Y+41	; 0x29
    4a74:	fc 01       	movw	r30, r24
    4a76:	22 ab       	std	Z+50, r18	; 0x32
    4a78:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a7a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	83 a5       	ldd	r24, Z+43	; 0x2b
    4a80:	94 a5       	ldd	r25, Z+44	; 0x2c
    4a82:	2a a5       	ldd	r18, Y+42	; 0x2a
    4a84:	3b a5       	ldd	r19, Y+43	; 0x2b
    4a86:	f9 01       	movw	r30, r18
    4a88:	23 a5       	ldd	r18, Z+43	; 0x2b
    4a8a:	34 a5       	ldd	r19, Z+44	; 0x2c
    4a8c:	f9 01       	movw	r30, r18
    4a8e:	20 81       	ld	r18, Z
    4a90:	42 2f       	mov	r20, r18
    4a92:	2a a5       	ldd	r18, Y+42	; 0x2a
    4a94:	3b a5       	ldd	r19, Y+43	; 0x2b
    4a96:	f9 01       	movw	r30, r18
    4a98:	22 a9       	ldd	r18, Z+50	; 0x32
    4a9a:	20 95       	com	r18
    4a9c:	24 23       	and	r18, r20
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	20 83       	st	Z, r18
    4aa2:	8e a5       	ldd	r24, Y+46	; 0x2e
    4aa4:	88 23       	and	r24, r24
    4aa6:	71 f1       	breq	.+92     	; 0x4b04 <_ZN16Adafruit_SSD13065beginEhhbb+0x4b2>
    4aa8:	8a a5       	ldd	r24, Y+42	; 0x2a
    4aaa:	9b a5       	ldd	r25, Y+43	; 0x2b
    4aac:	fc 01       	movw	r30, r24
    4aae:	80 a5       	ldd	r24, Z+40	; 0x28
    4ab0:	88 23       	and	r24, r24
    4ab2:	44 f1       	brlt	.+80     	; 0x4b04 <_ZN16Adafruit_SSD13065beginEhhbb+0x4b2>
    4ab4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ab6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ab8:	fc 01       	movw	r30, r24
    4aba:	80 a5       	ldd	r24, Z+40	; 0x28
    4abc:	61 e0       	ldi	r22, 0x01	; 1
    4abe:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    4ac2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ac4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ac6:	fc 01       	movw	r30, r24
    4ac8:	80 a5       	ldd	r24, Z+40	; 0x28
    4aca:	61 e0       	ldi	r22, 0x01	; 1
    4acc:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    4ad0:	61 e0       	ldi	r22, 0x01	; 1
    4ad2:	70 e0       	ldi	r23, 0x00	; 0
    4ad4:	80 e0       	ldi	r24, 0x00	; 0
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	0e 94 a6 5e 	call	0xbd4c	; 0xbd4c <delay>
    4adc:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ade:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ae0:	fc 01       	movw	r30, r24
    4ae2:	80 a5       	ldd	r24, Z+40	; 0x28
    4ae4:	60 e0       	ldi	r22, 0x00	; 0
    4ae6:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    4aea:	6a e0       	ldi	r22, 0x0A	; 10
    4aec:	70 e0       	ldi	r23, 0x00	; 0
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	0e 94 a6 5e 	call	0xbd4c	; 0xbd4c <delay>
    4af6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4af8:	9b a5       	ldd	r25, Y+43	; 0x2b
    4afa:	fc 01       	movw	r30, r24
    4afc:	80 a5       	ldd	r24, Z+40	; 0x28
    4afe:	61 e0       	ldi	r22, 0x01	; 1
    4b00:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    4b04:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b06:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b08:	fc 01       	movw	r30, r24
    4b0a:	85 8d       	ldd	r24, Z+29	; 0x1d
    4b0c:	96 8d       	ldd	r25, Z+30	; 0x1e
    4b0e:	89 2b       	or	r24, r25
    4b10:	91 f0       	breq	.+36     	; 0x4b36 <_ZN16Adafruit_SSD13065beginEhhbb+0x4e4>
    4b12:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b14:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b16:	fc 01       	movw	r30, r24
    4b18:	85 a9       	ldd	r24, Z+53	; 0x35
    4b1a:	96 a9       	ldd	r25, Z+54	; 0x36
    4b1c:	a7 a9       	ldd	r26, Z+55	; 0x37
    4b1e:	b0 ad       	ldd	r27, Z+56	; 0x38
    4b20:	2a a5       	ldd	r18, Y+42	; 0x2a
    4b22:	3b a5       	ldd	r19, Y+43	; 0x2b
    4b24:	f9 01       	movw	r30, r18
    4b26:	25 8d       	ldd	r18, Z+29	; 0x1d
    4b28:	36 8d       	ldd	r19, Z+30	; 0x1e
    4b2a:	ac 01       	movw	r20, r24
    4b2c:	bd 01       	movw	r22, r26
    4b2e:	c9 01       	movw	r24, r18
    4b30:	0e 94 fa 54 	call	0xa9f4	; 0xa9f4 <_ZN7TwoWire8setClockEm>
    4b34:	23 c0       	rjmp	.+70     	; 0x4b7c <_ZN16Adafruit_SSD13065beginEhhbb+0x52a>
    4b36:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b38:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	83 8d       	ldd	r24, Z+27	; 0x1b
    4b3e:	94 8d       	ldd	r25, Z+28	; 0x1c
    4b40:	89 2b       	or	r24, r25
    4b42:	39 f0       	breq	.+14     	; 0x4b52 <_ZN16Adafruit_SSD13065beginEhhbb+0x500>
    4b44:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b46:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b48:	fc 01       	movw	r30, r24
    4b4a:	86 ad       	ldd	r24, Z+62	; 0x3e
    4b4c:	97 ad       	ldd	r25, Z+63	; 0x3f
    4b4e:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4b52:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b54:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b56:	fc 01       	movw	r30, r24
    4b58:	87 a5       	ldd	r24, Z+47	; 0x2f
    4b5a:	90 a9       	ldd	r25, Z+48	; 0x30
    4b5c:	2a a5       	ldd	r18, Y+42	; 0x2a
    4b5e:	3b a5       	ldd	r19, Y+43	; 0x2b
    4b60:	f9 01       	movw	r30, r18
    4b62:	27 a5       	ldd	r18, Z+47	; 0x2f
    4b64:	30 a9       	ldd	r19, Z+48	; 0x30
    4b66:	f9 01       	movw	r30, r18
    4b68:	20 81       	ld	r18, Z
    4b6a:	42 2f       	mov	r20, r18
    4b6c:	2a a5       	ldd	r18, Y+42	; 0x2a
    4b6e:	3b a5       	ldd	r19, Y+43	; 0x2b
    4b70:	f9 01       	movw	r30, r18
    4b72:	24 a9       	ldd	r18, Z+52	; 0x34
    4b74:	20 95       	com	r18
    4b76:	24 23       	and	r18, r20
    4b78:	fc 01       	movw	r30, r24
    4b7a:	20 83       	st	Z, r18
    4b7c:	24 e0       	ldi	r18, 0x04	; 4
    4b7e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b80:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b82:	42 2f       	mov	r20, r18
    4b84:	60 e3       	ldi	r22, 0x30	; 48
    4b86:	7b e0       	ldi	r23, 0x0B	; 11
    4b88:	11 dc       	rcall	.-2014   	; 0x43ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4b8a:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b8c:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b8e:	fc 01       	movw	r30, r24
    4b90:	86 81       	ldd	r24, Z+6	; 0x06
    4b92:	97 81       	ldd	r25, Z+7	; 0x07
    4b94:	2f ef       	ldi	r18, 0xFF	; 255
    4b96:	28 0f       	add	r18, r24
    4b98:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b9a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b9c:	62 2f       	mov	r22, r18
    4b9e:	23 db       	rcall	.-2490   	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4ba0:	24 e0       	ldi	r18, 0x04	; 4
    4ba2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ba4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ba6:	42 2f       	mov	r20, r18
    4ba8:	64 e3       	ldi	r22, 0x34	; 52
    4baa:	7b e0       	ldi	r23, 0x0B	; 11
    4bac:	ff db       	rcall	.-2050   	; 0x43ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4bae:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bb0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bb2:	fc 01       	movw	r30, r24
    4bb4:	82 a1       	ldd	r24, Z+34	; 0x22
    4bb6:	81 30       	cpi	r24, 0x01	; 1
    4bb8:	11 f4       	brne	.+4      	; 0x4bbe <_ZN16Adafruit_SSD13065beginEhhbb+0x56c>
    4bba:	20 e1       	ldi	r18, 0x10	; 16
    4bbc:	01 c0       	rjmp	.+2      	; 0x4bc0 <_ZN16Adafruit_SSD13065beginEhhbb+0x56e>
    4bbe:	24 e1       	ldi	r18, 0x14	; 20
    4bc0:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bc2:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bc4:	62 2f       	mov	r22, r18
    4bc6:	0f db       	rcall	.-2530   	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4bc8:	24 e0       	ldi	r18, 0x04	; 4
    4bca:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bcc:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bce:	42 2f       	mov	r20, r18
    4bd0:	68 e3       	ldi	r22, 0x38	; 56
    4bd2:	7b e0       	ldi	r23, 0x0B	; 11
    4bd4:	eb db       	rcall	.-2090   	; 0x43ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4bd6:	82 e0       	ldi	r24, 0x02	; 2
    4bd8:	89 83       	std	Y+1, r24	; 0x01
    4bda:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bdc:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bde:	2f e8       	ldi	r18, 0x8F	; 143
    4be0:	fc 01       	movw	r30, r24
    4be2:	25 af       	std	Z+61, r18	; 0x3d
    4be4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4be6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4be8:	fc 01       	movw	r30, r24
    4bea:	84 81       	ldd	r24, Z+4	; 0x04
    4bec:	95 81       	ldd	r25, Z+5	; 0x05
    4bee:	80 38       	cpi	r24, 0x80	; 128
    4bf0:	91 05       	cpc	r25, r1
    4bf2:	79 f4       	brne	.+30     	; 0x4c12 <_ZN16Adafruit_SSD13065beginEhhbb+0x5c0>
    4bf4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bf6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	86 81       	ldd	r24, Z+6	; 0x06
    4bfc:	97 81       	ldd	r25, Z+7	; 0x07
    4bfe:	80 97       	sbiw	r24, 0x20	; 32
    4c00:	41 f4       	brne	.+16     	; 0x4c12 <_ZN16Adafruit_SSD13065beginEhhbb+0x5c0>
    4c02:	82 e0       	ldi	r24, 0x02	; 2
    4c04:	89 83       	std	Y+1, r24	; 0x01
    4c06:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c08:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c0a:	2f e8       	ldi	r18, 0x8F	; 143
    4c0c:	fc 01       	movw	r30, r24
    4c0e:	25 af       	std	Z+61, r18	; 0x3d
    4c10:	3e c0       	rjmp	.+124    	; 0x4c8e <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4c12:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c14:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c16:	fc 01       	movw	r30, r24
    4c18:	84 81       	ldd	r24, Z+4	; 0x04
    4c1a:	95 81       	ldd	r25, Z+5	; 0x05
    4c1c:	80 38       	cpi	r24, 0x80	; 128
    4c1e:	91 05       	cpc	r25, r1
    4c20:	c1 f4       	brne	.+48     	; 0x4c52 <_ZN16Adafruit_SSD13065beginEhhbb+0x600>
    4c22:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c24:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c26:	fc 01       	movw	r30, r24
    4c28:	86 81       	ldd	r24, Z+6	; 0x06
    4c2a:	97 81       	ldd	r25, Z+7	; 0x07
    4c2c:	80 34       	cpi	r24, 0x40	; 64
    4c2e:	91 05       	cpc	r25, r1
    4c30:	81 f4       	brne	.+32     	; 0x4c52 <_ZN16Adafruit_SSD13065beginEhhbb+0x600>
    4c32:	82 e1       	ldi	r24, 0x12	; 18
    4c34:	89 83       	std	Y+1, r24	; 0x01
    4c36:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c38:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c3a:	fc 01       	movw	r30, r24
    4c3c:	82 a1       	ldd	r24, Z+34	; 0x22
    4c3e:	81 30       	cpi	r24, 0x01	; 1
    4c40:	11 f4       	brne	.+4      	; 0x4c46 <_ZN16Adafruit_SSD13065beginEhhbb+0x5f4>
    4c42:	2f e9       	ldi	r18, 0x9F	; 159
    4c44:	01 c0       	rjmp	.+2      	; 0x4c48 <_ZN16Adafruit_SSD13065beginEhhbb+0x5f6>
    4c46:	2f ec       	ldi	r18, 0xCF	; 207
    4c48:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c4a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c4c:	fc 01       	movw	r30, r24
    4c4e:	25 af       	std	Z+61, r18	; 0x3d
    4c50:	1e c0       	rjmp	.+60     	; 0x4c8e <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4c52:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c54:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c56:	fc 01       	movw	r30, r24
    4c58:	84 81       	ldd	r24, Z+4	; 0x04
    4c5a:	95 81       	ldd	r25, Z+5	; 0x05
    4c5c:	80 36       	cpi	r24, 0x60	; 96
    4c5e:	91 05       	cpc	r25, r1
    4c60:	b1 f4       	brne	.+44     	; 0x4c8e <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4c62:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c64:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c66:	fc 01       	movw	r30, r24
    4c68:	86 81       	ldd	r24, Z+6	; 0x06
    4c6a:	97 81       	ldd	r25, Z+7	; 0x07
    4c6c:	40 97       	sbiw	r24, 0x10	; 16
    4c6e:	79 f4       	brne	.+30     	; 0x4c8e <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4c70:	82 e0       	ldi	r24, 0x02	; 2
    4c72:	89 83       	std	Y+1, r24	; 0x01
    4c74:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c76:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c78:	fc 01       	movw	r30, r24
    4c7a:	82 a1       	ldd	r24, Z+34	; 0x22
    4c7c:	81 30       	cpi	r24, 0x01	; 1
    4c7e:	11 f4       	brne	.+4      	; 0x4c84 <_ZN16Adafruit_SSD13065beginEhhbb+0x632>
    4c80:	20 e1       	ldi	r18, 0x10	; 16
    4c82:	01 c0       	rjmp	.+2      	; 0x4c86 <_ZN16Adafruit_SSD13065beginEhhbb+0x634>
    4c84:	2f ea       	ldi	r18, 0xAF	; 175
    4c86:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c88:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	25 af       	std	Z+61, r18	; 0x3d
    4c8e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c90:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c92:	6a ed       	ldi	r22, 0xDA	; 218
    4c94:	a8 da       	rcall	.-2736   	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4c96:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c98:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c9a:	69 81       	ldd	r22, Y+1	; 0x01
    4c9c:	a4 da       	rcall	.-2744   	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4c9e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ca0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ca2:	61 e8       	ldi	r22, 0x81	; 129
    4ca4:	a0 da       	rcall	.-2752   	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4ca6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ca8:	9b a5       	ldd	r25, Y+43	; 0x2b
    4caa:	fc 01       	movw	r30, r24
    4cac:	25 ad       	ldd	r18, Z+61	; 0x3d
    4cae:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cb0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cb2:	62 2f       	mov	r22, r18
    4cb4:	98 da       	rcall	.-2768   	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4cb6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cb8:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cba:	69 ed       	ldi	r22, 0xD9	; 217
    4cbc:	94 da       	rcall	.-2776   	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4cbe:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cc0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	82 a1       	ldd	r24, Z+34	; 0x22
    4cc6:	81 30       	cpi	r24, 0x01	; 1
    4cc8:	11 f4       	brne	.+4      	; 0x4cce <_ZN16Adafruit_SSD13065beginEhhbb+0x67c>
    4cca:	22 e2       	ldi	r18, 0x22	; 34
    4ccc:	01 c0       	rjmp	.+2      	; 0x4cd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x67e>
    4cce:	21 ef       	ldi	r18, 0xF1	; 241
    4cd0:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cd2:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cd4:	62 2f       	mov	r22, r18
    4cd6:	87 da       	rcall	.-2802   	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4cd8:	26 e0       	ldi	r18, 0x06	; 6
    4cda:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cdc:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cde:	42 2f       	mov	r20, r18
    4ce0:	6c e3       	ldi	r22, 0x3C	; 60
    4ce2:	7b e0       	ldi	r23, 0x0B	; 11
    4ce4:	63 db       	rcall	.-2362   	; 0x43ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4ce6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ce8:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cea:	fc 01       	movw	r30, r24
    4cec:	85 8d       	ldd	r24, Z+29	; 0x1d
    4cee:	96 8d       	ldd	r25, Z+30	; 0x1e
    4cf0:	89 2b       	or	r24, r25
    4cf2:	91 f0       	breq	.+36     	; 0x4d18 <_ZN16Adafruit_SSD13065beginEhhbb+0x6c6>
    4cf4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cf6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	81 ad       	ldd	r24, Z+57	; 0x39
    4cfc:	92 ad       	ldd	r25, Z+58	; 0x3a
    4cfe:	a3 ad       	ldd	r26, Z+59	; 0x3b
    4d00:	b4 ad       	ldd	r27, Z+60	; 0x3c
    4d02:	2a a5       	ldd	r18, Y+42	; 0x2a
    4d04:	3b a5       	ldd	r19, Y+43	; 0x2b
    4d06:	f9 01       	movw	r30, r18
    4d08:	25 8d       	ldd	r18, Z+29	; 0x1d
    4d0a:	36 8d       	ldd	r19, Z+30	; 0x1e
    4d0c:	ac 01       	movw	r20, r24
    4d0e:	bd 01       	movw	r22, r26
    4d10:	c9 01       	movw	r24, r18
    4d12:	0e 94 fa 54 	call	0xa9f4	; 0xa9f4 <_ZN7TwoWire8setClockEm>
    4d16:	1c c0       	rjmp	.+56     	; 0x4d50 <_ZN16Adafruit_SSD13065beginEhhbb+0x6fe>
    4d18:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d1a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d1c:	fc 01       	movw	r30, r24
    4d1e:	87 a5       	ldd	r24, Z+47	; 0x2f
    4d20:	90 a9       	ldd	r25, Z+48	; 0x30
    4d22:	2a a5       	ldd	r18, Y+42	; 0x2a
    4d24:	3b a5       	ldd	r19, Y+43	; 0x2b
    4d26:	f9 01       	movw	r30, r18
    4d28:	27 a5       	ldd	r18, Z+47	; 0x2f
    4d2a:	30 a9       	ldd	r19, Z+48	; 0x30
    4d2c:	f9 01       	movw	r30, r18
    4d2e:	40 81       	ld	r20, Z
    4d30:	2a a5       	ldd	r18, Y+42	; 0x2a
    4d32:	3b a5       	ldd	r19, Y+43	; 0x2b
    4d34:	f9 01       	movw	r30, r18
    4d36:	24 a9       	ldd	r18, Z+52	; 0x34
    4d38:	24 2b       	or	r18, r20
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	20 83       	st	Z, r18
    4d3e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d40:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d42:	fc 01       	movw	r30, r24
    4d44:	83 8d       	ldd	r24, Z+27	; 0x1b
    4d46:	94 8d       	ldd	r25, Z+28	; 0x1c
    4d48:	89 2b       	or	r24, r25
    4d4a:	11 f0       	breq	.+4      	; 0x4d50 <_ZN16Adafruit_SSD13065beginEhhbb+0x6fe>
    4d4c:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN8SPIClass14endTransactionEv>
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	af 96       	adiw	r28, 0x2f	; 47
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	f8 94       	cli
    4d58:	de bf       	out	0x3e, r29	; 62
    4d5a:	0f be       	out	0x3f, r0	; 63
    4d5c:	cd bf       	out	0x3d, r28	; 61
    4d5e:	df 91       	pop	r29
    4d60:	cf 91       	pop	r28
    4d62:	1f 91       	pop	r17
    4d64:	0f 91       	pop	r16
    4d66:	ff 90       	pop	r15
    4d68:	ef 90       	pop	r14
    4d6a:	df 90       	pop	r13
    4d6c:	cf 90       	pop	r12
    4d6e:	08 95       	ret

00004d70 <_ZN16Adafruit_SSD13069drawPixelEiij>:
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	cd b7       	in	r28, 0x3d	; 61
    4d76:	de b7       	in	r29, 0x3e	; 62
    4d78:	28 97       	sbiw	r28, 0x08	; 8
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	f8 94       	cli
    4d7e:	de bf       	out	0x3e, r29	; 62
    4d80:	0f be       	out	0x3f, r0	; 63
    4d82:	cd bf       	out	0x3d, r28	; 61
    4d84:	9a 83       	std	Y+2, r25	; 0x02
    4d86:	89 83       	std	Y+1, r24	; 0x01
    4d88:	7c 83       	std	Y+4, r23	; 0x04
    4d8a:	6b 83       	std	Y+3, r22	; 0x03
    4d8c:	5e 83       	std	Y+6, r21	; 0x06
    4d8e:	4d 83       	std	Y+5, r20	; 0x05
    4d90:	38 87       	std	Y+8, r19	; 0x08
    4d92:	2f 83       	std	Y+7, r18	; 0x07
    4d94:	8b 81       	ldd	r24, Y+3	; 0x03
    4d96:	9c 81       	ldd	r25, Y+4	; 0x04
    4d98:	99 23       	and	r25, r25
    4d9a:	d4 f0       	brlt	.+52     	; 0x4dd0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4d9c:	89 81       	ldd	r24, Y+1	; 0x01
    4d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4da0:	0e 94 ef 12 	call	0x25de	; 0x25de <_ZNK12Adafruit_GFX5widthEv>
    4da4:	9c 01       	movw	r18, r24
    4da6:	8b 81       	ldd	r24, Y+3	; 0x03
    4da8:	9c 81       	ldd	r25, Y+4	; 0x04
    4daa:	82 17       	cp	r24, r18
    4dac:	93 07       	cpc	r25, r19
    4dae:	84 f4       	brge	.+32     	; 0x4dd0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4db0:	8d 81       	ldd	r24, Y+5	; 0x05
    4db2:	9e 81       	ldd	r25, Y+6	; 0x06
    4db4:	99 23       	and	r25, r25
    4db6:	64 f0       	brlt	.+24     	; 0x4dd0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4db8:	89 81       	ldd	r24, Y+1	; 0x01
    4dba:	9a 81       	ldd	r25, Y+2	; 0x02
    4dbc:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZNK12Adafruit_GFX6heightEv>
    4dc0:	9c 01       	movw	r18, r24
    4dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4dc6:	82 17       	cp	r24, r18
    4dc8:	93 07       	cpc	r25, r19
    4dca:	14 f4       	brge	.+4      	; 0x4dd0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	01 c0       	rjmp	.+2      	; 0x4dd2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	88 23       	and	r24, r24
    4dd4:	09 f4       	brne	.+2      	; 0x4dd8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x68>
    4dd6:	83 c1       	rjmp	.+774    	; 0x50de <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	9a 81       	ldd	r25, Y+2	; 0x02
    4ddc:	0e 94 13 13 	call	0x2626	; 0x2626 <_ZNK12Adafruit_GFX11getRotationEv>
    4de0:	88 2f       	mov	r24, r24
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	82 30       	cpi	r24, 0x02	; 2
    4de6:	91 05       	cpc	r25, r1
    4de8:	81 f1       	breq	.+96     	; 0x4e4a <_ZN16Adafruit_SSD13069drawPixelEiij+0xda>
    4dea:	83 30       	cpi	r24, 0x03	; 3
    4dec:	91 05       	cpc	r25, r1
    4dee:	09 f4       	brne	.+2      	; 0x4df2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    4df0:	4d c0       	rjmp	.+154    	; 0x4e8c <_ZN16Adafruit_SSD13069drawPixelEiij+0x11c>
    4df2:	01 97       	sbiw	r24, 0x01	; 1
    4df4:	09 f0       	breq	.+2      	; 0x4df8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x88>
    4df6:	73 c0       	rjmp	.+230    	; 0x4ede <_ZN16Adafruit_SSD13069drawPixelEiij+0x16e>
    4df8:	2b 81       	ldd	r18, Y+3	; 0x03
    4dfa:	3c 81       	ldd	r19, Y+4	; 0x04
    4dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    4dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    4e00:	82 27       	eor	r24, r18
    4e02:	93 27       	eor	r25, r19
    4e04:	9c 83       	std	Y+4, r25	; 0x04
    4e06:	8b 83       	std	Y+3, r24	; 0x03
    4e08:	2d 81       	ldd	r18, Y+5	; 0x05
    4e0a:	3e 81       	ldd	r19, Y+6	; 0x06
    4e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e10:	82 27       	eor	r24, r18
    4e12:	93 27       	eor	r25, r19
    4e14:	9e 83       	std	Y+6, r25	; 0x06
    4e16:	8d 83       	std	Y+5, r24	; 0x05
    4e18:	2b 81       	ldd	r18, Y+3	; 0x03
    4e1a:	3c 81       	ldd	r19, Y+4	; 0x04
    4e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e20:	82 27       	eor	r24, r18
    4e22:	93 27       	eor	r25, r19
    4e24:	9c 83       	std	Y+4, r25	; 0x04
    4e26:	8b 83       	std	Y+3, r24	; 0x03
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	14 96       	adiw	r26, 0x04	; 4
    4e30:	2d 91       	ld	r18, X+
    4e32:	3c 91       	ld	r19, X
    4e34:	15 97       	sbiw	r26, 0x05	; 5
    4e36:	8b 81       	ldd	r24, Y+3	; 0x03
    4e38:	9c 81       	ldd	r25, Y+4	; 0x04
    4e3a:	f9 01       	movw	r30, r18
    4e3c:	e8 1b       	sub	r30, r24
    4e3e:	f9 0b       	sbc	r31, r25
    4e40:	cf 01       	movw	r24, r30
    4e42:	01 97       	sbiw	r24, 0x01	; 1
    4e44:	9c 83       	std	Y+4, r25	; 0x04
    4e46:	8b 83       	std	Y+3, r24	; 0x03
    4e48:	4a c0       	rjmp	.+148    	; 0x4ede <_ZN16Adafruit_SSD13069drawPixelEiij+0x16e>
    4e4a:	89 81       	ldd	r24, Y+1	; 0x01
    4e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e4e:	dc 01       	movw	r26, r24
    4e50:	14 96       	adiw	r26, 0x04	; 4
    4e52:	2d 91       	ld	r18, X+
    4e54:	3c 91       	ld	r19, X
    4e56:	15 97       	sbiw	r26, 0x05	; 5
    4e58:	8b 81       	ldd	r24, Y+3	; 0x03
    4e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e5c:	f9 01       	movw	r30, r18
    4e5e:	e8 1b       	sub	r30, r24
    4e60:	f9 0b       	sbc	r31, r25
    4e62:	cf 01       	movw	r24, r30
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	9c 83       	std	Y+4, r25	; 0x04
    4e68:	8b 83       	std	Y+3, r24	; 0x03
    4e6a:	89 81       	ldd	r24, Y+1	; 0x01
    4e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e6e:	dc 01       	movw	r26, r24
    4e70:	16 96       	adiw	r26, 0x06	; 6
    4e72:	2d 91       	ld	r18, X+
    4e74:	3c 91       	ld	r19, X
    4e76:	17 97       	sbiw	r26, 0x07	; 7
    4e78:	8d 81       	ldd	r24, Y+5	; 0x05
    4e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e7c:	f9 01       	movw	r30, r18
    4e7e:	e8 1b       	sub	r30, r24
    4e80:	f9 0b       	sbc	r31, r25
    4e82:	cf 01       	movw	r24, r30
    4e84:	01 97       	sbiw	r24, 0x01	; 1
    4e86:	9e 83       	std	Y+6, r25	; 0x06
    4e88:	8d 83       	std	Y+5, r24	; 0x05
    4e8a:	29 c0       	rjmp	.+82     	; 0x4ede <_ZN16Adafruit_SSD13069drawPixelEiij+0x16e>
    4e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    4e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    4e90:	8d 81       	ldd	r24, Y+5	; 0x05
    4e92:	9e 81       	ldd	r25, Y+6	; 0x06
    4e94:	82 27       	eor	r24, r18
    4e96:	93 27       	eor	r25, r19
    4e98:	9c 83       	std	Y+4, r25	; 0x04
    4e9a:	8b 83       	std	Y+3, r24	; 0x03
    4e9c:	2d 81       	ldd	r18, Y+5	; 0x05
    4e9e:	3e 81       	ldd	r19, Y+6	; 0x06
    4ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ea4:	82 27       	eor	r24, r18
    4ea6:	93 27       	eor	r25, r19
    4ea8:	9e 83       	std	Y+6, r25	; 0x06
    4eaa:	8d 83       	std	Y+5, r24	; 0x05
    4eac:	2b 81       	ldd	r18, Y+3	; 0x03
    4eae:	3c 81       	ldd	r19, Y+4	; 0x04
    4eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb4:	82 27       	eor	r24, r18
    4eb6:	93 27       	eor	r25, r19
    4eb8:	9c 83       	std	Y+4, r25	; 0x04
    4eba:	8b 83       	std	Y+3, r24	; 0x03
    4ebc:	89 81       	ldd	r24, Y+1	; 0x01
    4ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec0:	dc 01       	movw	r26, r24
    4ec2:	16 96       	adiw	r26, 0x06	; 6
    4ec4:	2d 91       	ld	r18, X+
    4ec6:	3c 91       	ld	r19, X
    4ec8:	17 97       	sbiw	r26, 0x07	; 7
    4eca:	8d 81       	ldd	r24, Y+5	; 0x05
    4ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ece:	f9 01       	movw	r30, r18
    4ed0:	e8 1b       	sub	r30, r24
    4ed2:	f9 0b       	sbc	r31, r25
    4ed4:	cf 01       	movw	r24, r30
    4ed6:	01 97       	sbiw	r24, 0x01	; 1
    4ed8:	9e 83       	std	Y+6, r25	; 0x06
    4eda:	8d 83       	std	Y+5, r24	; 0x05
    4edc:	00 00       	nop
    4ede:	8f 81       	ldd	r24, Y+7	; 0x07
    4ee0:	98 85       	ldd	r25, Y+8	; 0x08
    4ee2:	81 30       	cpi	r24, 0x01	; 1
    4ee4:	91 05       	cpc	r25, r1
    4ee6:	41 f0       	breq	.+16     	; 0x4ef8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x188>
    4ee8:	81 30       	cpi	r24, 0x01	; 1
    4eea:	91 05       	cpc	r25, r1
    4eec:	08 f4       	brcc	.+2      	; 0x4ef0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x180>
    4eee:	56 c0       	rjmp	.+172    	; 0x4f9c <_ZN16Adafruit_SSD13069drawPixelEiij+0x22c>
    4ef0:	02 97       	sbiw	r24, 0x02	; 2
    4ef2:	09 f4       	brne	.+2      	; 0x4ef6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x186>
    4ef4:	a4 c0       	rjmp	.+328    	; 0x503e <_ZN16Adafruit_SSD13069drawPixelEiij+0x2ce>
    4ef6:	f3 c0       	rjmp	.+486    	; 0x50de <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    4ef8:	89 81       	ldd	r24, Y+1	; 0x01
    4efa:	9a 81       	ldd	r25, Y+2	; 0x02
    4efc:	dc 01       	movw	r26, r24
    4efe:	5f 96       	adiw	r26, 0x1f	; 31
    4f00:	2d 91       	ld	r18, X+
    4f02:	3c 91       	ld	r19, X
    4f04:	90 97       	sbiw	r26, 0x20	; 32
    4f06:	8d 81       	ldd	r24, Y+5	; 0x05
    4f08:	9e 81       	ldd	r25, Y+6	; 0x06
    4f0a:	99 23       	and	r25, r25
    4f0c:	0c f4       	brge	.+2      	; 0x4f10 <_ZN16Adafruit_SSD13069drawPixelEiij+0x1a0>
    4f0e:	07 96       	adiw	r24, 0x07	; 7
    4f10:	95 95       	asr	r25
    4f12:	87 95       	ror	r24
    4f14:	95 95       	asr	r25
    4f16:	87 95       	ror	r24
    4f18:	95 95       	asr	r25
    4f1a:	87 95       	ror	r24
    4f1c:	49 81       	ldd	r20, Y+1	; 0x01
    4f1e:	5a 81       	ldd	r21, Y+2	; 0x02
    4f20:	fa 01       	movw	r30, r20
    4f22:	44 81       	ldd	r20, Z+4	; 0x04
    4f24:	55 81       	ldd	r21, Z+5	; 0x05
    4f26:	84 9f       	mul	r24, r20
    4f28:	b0 01       	movw	r22, r0
    4f2a:	85 9f       	mul	r24, r21
    4f2c:	70 0d       	add	r23, r0
    4f2e:	94 9f       	mul	r25, r20
    4f30:	70 0d       	add	r23, r0
    4f32:	11 24       	eor	r1, r1
    4f34:	4b 81       	ldd	r20, Y+3	; 0x03
    4f36:	5c 81       	ldd	r21, Y+4	; 0x04
    4f38:	46 0f       	add	r20, r22
    4f3a:	57 1f       	adc	r21, r23
    4f3c:	24 0f       	add	r18, r20
    4f3e:	35 1f       	adc	r19, r21
    4f40:	49 81       	ldd	r20, Y+1	; 0x01
    4f42:	5a 81       	ldd	r21, Y+2	; 0x02
    4f44:	da 01       	movw	r26, r20
    4f46:	5f 96       	adiw	r26, 0x1f	; 31
    4f48:	4d 91       	ld	r20, X+
    4f4a:	5c 91       	ld	r21, X
    4f4c:	90 97       	sbiw	r26, 0x20	; 32
    4f4e:	69 81       	ldd	r22, Y+1	; 0x01
    4f50:	7a 81       	ldd	r23, Y+2	; 0x02
    4f52:	db 01       	movw	r26, r22
    4f54:	14 96       	adiw	r26, 0x04	; 4
    4f56:	ed 91       	ld	r30, X+
    4f58:	fc 91       	ld	r31, X
    4f5a:	15 97       	sbiw	r26, 0x05	; 5
    4f5c:	8e 9f       	mul	r24, r30
    4f5e:	b0 01       	movw	r22, r0
    4f60:	8f 9f       	mul	r24, r31
    4f62:	70 0d       	add	r23, r0
    4f64:	9e 9f       	mul	r25, r30
    4f66:	70 0d       	add	r23, r0
    4f68:	11 24       	eor	r1, r1
    4f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f6e:	86 0f       	add	r24, r22
    4f70:	97 1f       	adc	r25, r23
    4f72:	84 0f       	add	r24, r20
    4f74:	95 1f       	adc	r25, r21
    4f76:	fc 01       	movw	r30, r24
    4f78:	80 81       	ld	r24, Z
    4f7a:	68 2f       	mov	r22, r24
    4f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f80:	ac 01       	movw	r20, r24
    4f82:	47 70       	andi	r20, 0x07	; 7
    4f84:	55 27       	eor	r21, r21
    4f86:	81 e0       	ldi	r24, 0x01	; 1
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	02 c0       	rjmp	.+4      	; 0x4f90 <_ZN16Adafruit_SSD13069drawPixelEiij+0x220>
    4f8c:	88 0f       	add	r24, r24
    4f8e:	99 1f       	adc	r25, r25
    4f90:	4a 95       	dec	r20
    4f92:	e2 f7       	brpl	.-8      	; 0x4f8c <_ZN16Adafruit_SSD13069drawPixelEiij+0x21c>
    4f94:	86 2b       	or	r24, r22
    4f96:	d9 01       	movw	r26, r18
    4f98:	8c 93       	st	X, r24
    4f9a:	a1 c0       	rjmp	.+322    	; 0x50de <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    4f9c:	89 81       	ldd	r24, Y+1	; 0x01
    4f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa0:	fc 01       	movw	r30, r24
    4fa2:	27 8d       	ldd	r18, Z+31	; 0x1f
    4fa4:	30 a1       	ldd	r19, Z+32	; 0x20
    4fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    4faa:	99 23       	and	r25, r25
    4fac:	0c f4       	brge	.+2      	; 0x4fb0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x240>
    4fae:	07 96       	adiw	r24, 0x07	; 7
    4fb0:	95 95       	asr	r25
    4fb2:	87 95       	ror	r24
    4fb4:	95 95       	asr	r25
    4fb6:	87 95       	ror	r24
    4fb8:	95 95       	asr	r25
    4fba:	87 95       	ror	r24
    4fbc:	49 81       	ldd	r20, Y+1	; 0x01
    4fbe:	5a 81       	ldd	r21, Y+2	; 0x02
    4fc0:	da 01       	movw	r26, r20
    4fc2:	14 96       	adiw	r26, 0x04	; 4
    4fc4:	4d 91       	ld	r20, X+
    4fc6:	5c 91       	ld	r21, X
    4fc8:	15 97       	sbiw	r26, 0x05	; 5
    4fca:	84 9f       	mul	r24, r20
    4fcc:	b0 01       	movw	r22, r0
    4fce:	85 9f       	mul	r24, r21
    4fd0:	70 0d       	add	r23, r0
    4fd2:	94 9f       	mul	r25, r20
    4fd4:	70 0d       	add	r23, r0
    4fd6:	11 24       	eor	r1, r1
    4fd8:	4b 81       	ldd	r20, Y+3	; 0x03
    4fda:	5c 81       	ldd	r21, Y+4	; 0x04
    4fdc:	46 0f       	add	r20, r22
    4fde:	57 1f       	adc	r21, r23
    4fe0:	24 0f       	add	r18, r20
    4fe2:	35 1f       	adc	r19, r21
    4fe4:	49 81       	ldd	r20, Y+1	; 0x01
    4fe6:	5a 81       	ldd	r21, Y+2	; 0x02
    4fe8:	fa 01       	movw	r30, r20
    4fea:	47 8d       	ldd	r20, Z+31	; 0x1f
    4fec:	50 a1       	ldd	r21, Z+32	; 0x20
    4fee:	69 81       	ldd	r22, Y+1	; 0x01
    4ff0:	7a 81       	ldd	r23, Y+2	; 0x02
    4ff2:	db 01       	movw	r26, r22
    4ff4:	14 96       	adiw	r26, 0x04	; 4
    4ff6:	ed 91       	ld	r30, X+
    4ff8:	fc 91       	ld	r31, X
    4ffa:	15 97       	sbiw	r26, 0x05	; 5
    4ffc:	8e 9f       	mul	r24, r30
    4ffe:	b0 01       	movw	r22, r0
    5000:	8f 9f       	mul	r24, r31
    5002:	70 0d       	add	r23, r0
    5004:	9e 9f       	mul	r25, r30
    5006:	70 0d       	add	r23, r0
    5008:	11 24       	eor	r1, r1
    500a:	8b 81       	ldd	r24, Y+3	; 0x03
    500c:	9c 81       	ldd	r25, Y+4	; 0x04
    500e:	86 0f       	add	r24, r22
    5010:	97 1f       	adc	r25, r23
    5012:	84 0f       	add	r24, r20
    5014:	95 1f       	adc	r25, r21
    5016:	fc 01       	movw	r30, r24
    5018:	80 81       	ld	r24, Z
    501a:	68 2f       	mov	r22, r24
    501c:	8d 81       	ldd	r24, Y+5	; 0x05
    501e:	9e 81       	ldd	r25, Y+6	; 0x06
    5020:	ac 01       	movw	r20, r24
    5022:	47 70       	andi	r20, 0x07	; 7
    5024:	55 27       	eor	r21, r21
    5026:	81 e0       	ldi	r24, 0x01	; 1
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	02 c0       	rjmp	.+4      	; 0x5030 <_ZN16Adafruit_SSD13069drawPixelEiij+0x2c0>
    502c:	88 0f       	add	r24, r24
    502e:	99 1f       	adc	r25, r25
    5030:	4a 95       	dec	r20
    5032:	e2 f7       	brpl	.-8      	; 0x502c <_ZN16Adafruit_SSD13069drawPixelEiij+0x2bc>
    5034:	80 95       	com	r24
    5036:	86 23       	and	r24, r22
    5038:	d9 01       	movw	r26, r18
    503a:	8c 93       	st	X, r24
    503c:	50 c0       	rjmp	.+160    	; 0x50de <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	9a 81       	ldd	r25, Y+2	; 0x02
    5042:	fc 01       	movw	r30, r24
    5044:	27 8d       	ldd	r18, Z+31	; 0x1f
    5046:	30 a1       	ldd	r19, Z+32	; 0x20
    5048:	8d 81       	ldd	r24, Y+5	; 0x05
    504a:	9e 81       	ldd	r25, Y+6	; 0x06
    504c:	99 23       	and	r25, r25
    504e:	0c f4       	brge	.+2      	; 0x5052 <_ZN16Adafruit_SSD13069drawPixelEiij+0x2e2>
    5050:	07 96       	adiw	r24, 0x07	; 7
    5052:	95 95       	asr	r25
    5054:	87 95       	ror	r24
    5056:	95 95       	asr	r25
    5058:	87 95       	ror	r24
    505a:	95 95       	asr	r25
    505c:	87 95       	ror	r24
    505e:	49 81       	ldd	r20, Y+1	; 0x01
    5060:	5a 81       	ldd	r21, Y+2	; 0x02
    5062:	da 01       	movw	r26, r20
    5064:	14 96       	adiw	r26, 0x04	; 4
    5066:	4d 91       	ld	r20, X+
    5068:	5c 91       	ld	r21, X
    506a:	15 97       	sbiw	r26, 0x05	; 5
    506c:	84 9f       	mul	r24, r20
    506e:	b0 01       	movw	r22, r0
    5070:	85 9f       	mul	r24, r21
    5072:	70 0d       	add	r23, r0
    5074:	94 9f       	mul	r25, r20
    5076:	70 0d       	add	r23, r0
    5078:	11 24       	eor	r1, r1
    507a:	4b 81       	ldd	r20, Y+3	; 0x03
    507c:	5c 81       	ldd	r21, Y+4	; 0x04
    507e:	46 0f       	add	r20, r22
    5080:	57 1f       	adc	r21, r23
    5082:	24 0f       	add	r18, r20
    5084:	35 1f       	adc	r19, r21
    5086:	49 81       	ldd	r20, Y+1	; 0x01
    5088:	5a 81       	ldd	r21, Y+2	; 0x02
    508a:	fa 01       	movw	r30, r20
    508c:	47 8d       	ldd	r20, Z+31	; 0x1f
    508e:	50 a1       	ldd	r21, Z+32	; 0x20
    5090:	69 81       	ldd	r22, Y+1	; 0x01
    5092:	7a 81       	ldd	r23, Y+2	; 0x02
    5094:	db 01       	movw	r26, r22
    5096:	14 96       	adiw	r26, 0x04	; 4
    5098:	ed 91       	ld	r30, X+
    509a:	fc 91       	ld	r31, X
    509c:	15 97       	sbiw	r26, 0x05	; 5
    509e:	8e 9f       	mul	r24, r30
    50a0:	b0 01       	movw	r22, r0
    50a2:	8f 9f       	mul	r24, r31
    50a4:	70 0d       	add	r23, r0
    50a6:	9e 9f       	mul	r25, r30
    50a8:	70 0d       	add	r23, r0
    50aa:	11 24       	eor	r1, r1
    50ac:	8b 81       	ldd	r24, Y+3	; 0x03
    50ae:	9c 81       	ldd	r25, Y+4	; 0x04
    50b0:	86 0f       	add	r24, r22
    50b2:	97 1f       	adc	r25, r23
    50b4:	84 0f       	add	r24, r20
    50b6:	95 1f       	adc	r25, r21
    50b8:	fc 01       	movw	r30, r24
    50ba:	80 81       	ld	r24, Z
    50bc:	68 2f       	mov	r22, r24
    50be:	8d 81       	ldd	r24, Y+5	; 0x05
    50c0:	9e 81       	ldd	r25, Y+6	; 0x06
    50c2:	ac 01       	movw	r20, r24
    50c4:	47 70       	andi	r20, 0x07	; 7
    50c6:	55 27       	eor	r21, r21
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	02 c0       	rjmp	.+4      	; 0x50d2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x362>
    50ce:	88 0f       	add	r24, r24
    50d0:	99 1f       	adc	r25, r25
    50d2:	4a 95       	dec	r20
    50d4:	e2 f7       	brpl	.-8      	; 0x50ce <_ZN16Adafruit_SSD13069drawPixelEiij+0x35e>
    50d6:	86 27       	eor	r24, r22
    50d8:	d9 01       	movw	r26, r18
    50da:	8c 93       	st	X, r24
    50dc:	00 00       	nop
    50de:	00 00       	nop
    50e0:	28 96       	adiw	r28, 0x08	; 8
    50e2:	0f b6       	in	r0, 0x3f	; 63
    50e4:	f8 94       	cli
    50e6:	de bf       	out	0x3e, r29	; 62
    50e8:	0f be       	out	0x3f, r0	; 63
    50ea:	cd bf       	out	0x3d, r28	; 61
    50ec:	df 91       	pop	r29
    50ee:	cf 91       	pop	r28
    50f0:	08 95       	ret

000050f2 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    50f2:	cf 93       	push	r28
    50f4:	df 93       	push	r29
    50f6:	1f 92       	push	r1
    50f8:	1f 92       	push	r1
    50fa:	cd b7       	in	r28, 0x3d	; 61
    50fc:	de b7       	in	r29, 0x3e	; 62
    50fe:	9a 83       	std	Y+2, r25	; 0x02
    5100:	89 83       	std	Y+1, r24	; 0x01
    5102:	89 81       	ldd	r24, Y+1	; 0x01
    5104:	9a 81       	ldd	r25, Y+2	; 0x02
    5106:	fc 01       	movw	r30, r24
    5108:	24 81       	ldd	r18, Z+4	; 0x04
    510a:	35 81       	ldd	r19, Z+5	; 0x05
    510c:	89 81       	ldd	r24, Y+1	; 0x01
    510e:	9a 81       	ldd	r25, Y+2	; 0x02
    5110:	fc 01       	movw	r30, r24
    5112:	86 81       	ldd	r24, Z+6	; 0x06
    5114:	97 81       	ldd	r25, Z+7	; 0x07
    5116:	07 96       	adiw	r24, 0x07	; 7
    5118:	99 23       	and	r25, r25
    511a:	0c f4       	brge	.+2      	; 0x511e <_ZN16Adafruit_SSD130612clearDisplayEv+0x2c>
    511c:	07 96       	adiw	r24, 0x07	; 7
    511e:	95 95       	asr	r25
    5120:	87 95       	ror	r24
    5122:	95 95       	asr	r25
    5124:	87 95       	ror	r24
    5126:	95 95       	asr	r25
    5128:	87 95       	ror	r24
    512a:	ac 01       	movw	r20, r24
    512c:	24 9f       	mul	r18, r20
    512e:	c0 01       	movw	r24, r0
    5130:	25 9f       	mul	r18, r21
    5132:	90 0d       	add	r25, r0
    5134:	34 9f       	mul	r19, r20
    5136:	90 0d       	add	r25, r0
    5138:	11 24       	eor	r1, r1
    513a:	9c 01       	movw	r18, r24
    513c:	89 81       	ldd	r24, Y+1	; 0x01
    513e:	9a 81       	ldd	r25, Y+2	; 0x02
    5140:	fc 01       	movw	r30, r24
    5142:	87 8d       	ldd	r24, Z+31	; 0x1f
    5144:	90 a1       	ldd	r25, Z+32	; 0x20
    5146:	a9 01       	movw	r20, r18
    5148:	60 e0       	ldi	r22, 0x00	; 0
    514a:	70 e0       	ldi	r23, 0x00	; 0
    514c:	0e 94 84 65 	call	0xcb08	; 0xcb08 <memset>
    5150:	00 00       	nop
    5152:	0f 90       	pop	r0
    5154:	0f 90       	pop	r0
    5156:	df 91       	pop	r29
    5158:	cf 91       	pop	r28
    515a:	08 95       	ret

0000515c <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    515c:	0f 93       	push	r16
    515e:	1f 93       	push	r17
    5160:	cf 93       	push	r28
    5162:	df 93       	push	r29
    5164:	cd b7       	in	r28, 0x3d	; 61
    5166:	de b7       	in	r29, 0x3e	; 62
    5168:	2b 97       	sbiw	r28, 0x0b	; 11
    516a:	0f b6       	in	r0, 0x3f	; 63
    516c:	f8 94       	cli
    516e:	de bf       	out	0x3e, r29	; 62
    5170:	0f be       	out	0x3f, r0	; 63
    5172:	cd bf       	out	0x3d, r28	; 61
    5174:	9b 83       	std	Y+3, r25	; 0x03
    5176:	8a 83       	std	Y+2, r24	; 0x02
    5178:	7d 83       	std	Y+5, r23	; 0x05
    517a:	6c 83       	std	Y+4, r22	; 0x04
    517c:	5f 83       	std	Y+7, r21	; 0x07
    517e:	4e 83       	std	Y+6, r20	; 0x06
    5180:	39 87       	std	Y+9, r19	; 0x09
    5182:	28 87       	std	Y+8, r18	; 0x08
    5184:	1b 87       	std	Y+11, r17	; 0x0b
    5186:	0a 87       	std	Y+10, r16	; 0x0a
    5188:	19 82       	std	Y+1, r1	; 0x01
    518a:	8a 81       	ldd	r24, Y+2	; 0x02
    518c:	9b 81       	ldd	r25, Y+3	; 0x03
    518e:	fc 01       	movw	r30, r24
    5190:	86 89       	ldd	r24, Z+22	; 0x16
    5192:	88 2f       	mov	r24, r24
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	82 30       	cpi	r24, 0x02	; 2
    5198:	91 05       	cpc	r25, r1
    519a:	81 f1       	breq	.+96     	; 0x51fc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xa0>
    519c:	83 30       	cpi	r24, 0x03	; 3
    519e:	91 05       	cpc	r25, r1
    51a0:	09 f4       	brne	.+2      	; 0x51a4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x48>
    51a2:	54 c0       	rjmp	.+168    	; 0x524c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xf0>
    51a4:	01 97       	sbiw	r24, 0x01	; 1
    51a6:	09 f0       	breq	.+2      	; 0x51aa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4e>
    51a8:	85 c0       	rjmp	.+266    	; 0x52b4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x158>
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	89 83       	std	Y+1, r24	; 0x01
    51ae:	2c 81       	ldd	r18, Y+4	; 0x04
    51b0:	3d 81       	ldd	r19, Y+5	; 0x05
    51b2:	8e 81       	ldd	r24, Y+6	; 0x06
    51b4:	9f 81       	ldd	r25, Y+7	; 0x07
    51b6:	82 27       	eor	r24, r18
    51b8:	93 27       	eor	r25, r19
    51ba:	9d 83       	std	Y+5, r25	; 0x05
    51bc:	8c 83       	std	Y+4, r24	; 0x04
    51be:	2e 81       	ldd	r18, Y+6	; 0x06
    51c0:	3f 81       	ldd	r19, Y+7	; 0x07
    51c2:	8c 81       	ldd	r24, Y+4	; 0x04
    51c4:	9d 81       	ldd	r25, Y+5	; 0x05
    51c6:	82 27       	eor	r24, r18
    51c8:	93 27       	eor	r25, r19
    51ca:	9f 83       	std	Y+7, r25	; 0x07
    51cc:	8e 83       	std	Y+6, r24	; 0x06
    51ce:	2c 81       	ldd	r18, Y+4	; 0x04
    51d0:	3d 81       	ldd	r19, Y+5	; 0x05
    51d2:	8e 81       	ldd	r24, Y+6	; 0x06
    51d4:	9f 81       	ldd	r25, Y+7	; 0x07
    51d6:	82 27       	eor	r24, r18
    51d8:	93 27       	eor	r25, r19
    51da:	9d 83       	std	Y+5, r25	; 0x05
    51dc:	8c 83       	std	Y+4, r24	; 0x04
    51de:	8a 81       	ldd	r24, Y+2	; 0x02
    51e0:	9b 81       	ldd	r25, Y+3	; 0x03
    51e2:	fc 01       	movw	r30, r24
    51e4:	24 81       	ldd	r18, Z+4	; 0x04
    51e6:	35 81       	ldd	r19, Z+5	; 0x05
    51e8:	8c 81       	ldd	r24, Y+4	; 0x04
    51ea:	9d 81       	ldd	r25, Y+5	; 0x05
    51ec:	a9 01       	movw	r20, r18
    51ee:	48 1b       	sub	r20, r24
    51f0:	59 0b       	sbc	r21, r25
    51f2:	ca 01       	movw	r24, r20
    51f4:	01 97       	sbiw	r24, 0x01	; 1
    51f6:	9d 83       	std	Y+5, r25	; 0x05
    51f8:	8c 83       	std	Y+4, r24	; 0x04
    51fa:	5c c0       	rjmp	.+184    	; 0x52b4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x158>
    51fc:	8a 81       	ldd	r24, Y+2	; 0x02
    51fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5200:	fc 01       	movw	r30, r24
    5202:	24 81       	ldd	r18, Z+4	; 0x04
    5204:	35 81       	ldd	r19, Z+5	; 0x05
    5206:	8c 81       	ldd	r24, Y+4	; 0x04
    5208:	9d 81       	ldd	r25, Y+5	; 0x05
    520a:	a9 01       	movw	r20, r18
    520c:	48 1b       	sub	r20, r24
    520e:	59 0b       	sbc	r21, r25
    5210:	ca 01       	movw	r24, r20
    5212:	01 97       	sbiw	r24, 0x01	; 1
    5214:	9d 83       	std	Y+5, r25	; 0x05
    5216:	8c 83       	std	Y+4, r24	; 0x04
    5218:	8a 81       	ldd	r24, Y+2	; 0x02
    521a:	9b 81       	ldd	r25, Y+3	; 0x03
    521c:	fc 01       	movw	r30, r24
    521e:	26 81       	ldd	r18, Z+6	; 0x06
    5220:	37 81       	ldd	r19, Z+7	; 0x07
    5222:	8e 81       	ldd	r24, Y+6	; 0x06
    5224:	9f 81       	ldd	r25, Y+7	; 0x07
    5226:	a9 01       	movw	r20, r18
    5228:	48 1b       	sub	r20, r24
    522a:	59 0b       	sbc	r21, r25
    522c:	ca 01       	movw	r24, r20
    522e:	01 97       	sbiw	r24, 0x01	; 1
    5230:	9f 83       	std	Y+7, r25	; 0x07
    5232:	8e 83       	std	Y+6, r24	; 0x06
    5234:	88 85       	ldd	r24, Y+8	; 0x08
    5236:	99 85       	ldd	r25, Y+9	; 0x09
    5238:	01 97       	sbiw	r24, 0x01	; 1
    523a:	2c 81       	ldd	r18, Y+4	; 0x04
    523c:	3d 81       	ldd	r19, Y+5	; 0x05
    523e:	f9 01       	movw	r30, r18
    5240:	e8 1b       	sub	r30, r24
    5242:	f9 0b       	sbc	r31, r25
    5244:	cf 01       	movw	r24, r30
    5246:	9d 83       	std	Y+5, r25	; 0x05
    5248:	8c 83       	std	Y+4, r24	; 0x04
    524a:	34 c0       	rjmp	.+104    	; 0x52b4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x158>
    524c:	81 e0       	ldi	r24, 0x01	; 1
    524e:	89 83       	std	Y+1, r24	; 0x01
    5250:	2c 81       	ldd	r18, Y+4	; 0x04
    5252:	3d 81       	ldd	r19, Y+5	; 0x05
    5254:	8e 81       	ldd	r24, Y+6	; 0x06
    5256:	9f 81       	ldd	r25, Y+7	; 0x07
    5258:	82 27       	eor	r24, r18
    525a:	93 27       	eor	r25, r19
    525c:	9d 83       	std	Y+5, r25	; 0x05
    525e:	8c 83       	std	Y+4, r24	; 0x04
    5260:	2e 81       	ldd	r18, Y+6	; 0x06
    5262:	3f 81       	ldd	r19, Y+7	; 0x07
    5264:	8c 81       	ldd	r24, Y+4	; 0x04
    5266:	9d 81       	ldd	r25, Y+5	; 0x05
    5268:	82 27       	eor	r24, r18
    526a:	93 27       	eor	r25, r19
    526c:	9f 83       	std	Y+7, r25	; 0x07
    526e:	8e 83       	std	Y+6, r24	; 0x06
    5270:	2c 81       	ldd	r18, Y+4	; 0x04
    5272:	3d 81       	ldd	r19, Y+5	; 0x05
    5274:	8e 81       	ldd	r24, Y+6	; 0x06
    5276:	9f 81       	ldd	r25, Y+7	; 0x07
    5278:	82 27       	eor	r24, r18
    527a:	93 27       	eor	r25, r19
    527c:	9d 83       	std	Y+5, r25	; 0x05
    527e:	8c 83       	std	Y+4, r24	; 0x04
    5280:	8a 81       	ldd	r24, Y+2	; 0x02
    5282:	9b 81       	ldd	r25, Y+3	; 0x03
    5284:	fc 01       	movw	r30, r24
    5286:	26 81       	ldd	r18, Z+6	; 0x06
    5288:	37 81       	ldd	r19, Z+7	; 0x07
    528a:	8e 81       	ldd	r24, Y+6	; 0x06
    528c:	9f 81       	ldd	r25, Y+7	; 0x07
    528e:	a9 01       	movw	r20, r18
    5290:	48 1b       	sub	r20, r24
    5292:	59 0b       	sbc	r21, r25
    5294:	ca 01       	movw	r24, r20
    5296:	01 97       	sbiw	r24, 0x01	; 1
    5298:	9f 83       	std	Y+7, r25	; 0x07
    529a:	8e 83       	std	Y+6, r24	; 0x06
    529c:	88 85       	ldd	r24, Y+8	; 0x08
    529e:	99 85       	ldd	r25, Y+9	; 0x09
    52a0:	01 97       	sbiw	r24, 0x01	; 1
    52a2:	2e 81       	ldd	r18, Y+6	; 0x06
    52a4:	3f 81       	ldd	r19, Y+7	; 0x07
    52a6:	f9 01       	movw	r30, r18
    52a8:	e8 1b       	sub	r30, r24
    52aa:	f9 0b       	sbc	r31, r25
    52ac:	cf 01       	movw	r24, r30
    52ae:	9f 83       	std	Y+7, r25	; 0x07
    52b0:	8e 83       	std	Y+6, r24	; 0x06
    52b2:	00 00       	nop
    52b4:	89 81       	ldd	r24, Y+1	; 0x01
    52b6:	88 23       	and	r24, r24
    52b8:	69 f0       	breq	.+26     	; 0x52d4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x178>
    52ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    52bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    52be:	28 85       	ldd	r18, Y+8	; 0x08
    52c0:	39 85       	ldd	r19, Y+9	; 0x09
    52c2:	4e 81       	ldd	r20, Y+6	; 0x06
    52c4:	5f 81       	ldd	r21, Y+7	; 0x07
    52c6:	6c 81       	ldd	r22, Y+4	; 0x04
    52c8:	7d 81       	ldd	r23, Y+5	; 0x05
    52ca:	8a 81       	ldd	r24, Y+2	; 0x02
    52cc:	9b 81       	ldd	r25, Y+3	; 0x03
    52ce:	8f 01       	movw	r16, r30
    52d0:	e5 d1       	rcall	.+970    	; 0x569c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    52d2:	0c c0       	rjmp	.+24     	; 0x52ec <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x190>
    52d4:	ea 85       	ldd	r30, Y+10	; 0x0a
    52d6:	fb 85       	ldd	r31, Y+11	; 0x0b
    52d8:	28 85       	ldd	r18, Y+8	; 0x08
    52da:	39 85       	ldd	r19, Y+9	; 0x09
    52dc:	4e 81       	ldd	r20, Y+6	; 0x06
    52de:	5f 81       	ldd	r21, Y+7	; 0x07
    52e0:	6c 81       	ldd	r22, Y+4	; 0x04
    52e2:	7d 81       	ldd	r23, Y+5	; 0x05
    52e4:	8a 81       	ldd	r24, Y+2	; 0x02
    52e6:	9b 81       	ldd	r25, Y+3	; 0x03
    52e8:	8f 01       	movw	r16, r30
    52ea:	0c d0       	rcall	.+24     	; 0x5304 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    52ec:	00 00       	nop
    52ee:	2b 96       	adiw	r28, 0x0b	; 11
    52f0:	0f b6       	in	r0, 0x3f	; 63
    52f2:	f8 94       	cli
    52f4:	de bf       	out	0x3e, r29	; 62
    52f6:	0f be       	out	0x3f, r0	; 63
    52f8:	cd bf       	out	0x3d, r28	; 61
    52fa:	df 91       	pop	r29
    52fc:	cf 91       	pop	r28
    52fe:	1f 91       	pop	r17
    5300:	0f 91       	pop	r16
    5302:	08 95       	ret

00005304 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    5304:	0f 93       	push	r16
    5306:	1f 93       	push	r17
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	cd b7       	in	r28, 0x3d	; 61
    530e:	de b7       	in	r29, 0x3e	; 62
    5310:	2d 97       	sbiw	r28, 0x0d	; 13
    5312:	0f b6       	in	r0, 0x3f	; 63
    5314:	f8 94       	cli
    5316:	de bf       	out	0x3e, r29	; 62
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	cd bf       	out	0x3d, r28	; 61
    531c:	9d 83       	std	Y+5, r25	; 0x05
    531e:	8c 83       	std	Y+4, r24	; 0x04
    5320:	7f 83       	std	Y+7, r23	; 0x07
    5322:	6e 83       	std	Y+6, r22	; 0x06
    5324:	59 87       	std	Y+9, r21	; 0x09
    5326:	48 87       	std	Y+8, r20	; 0x08
    5328:	3b 87       	std	Y+11, r19	; 0x0b
    532a:	2a 87       	std	Y+10, r18	; 0x0a
    532c:	1d 87       	std	Y+13, r17	; 0x0d
    532e:	0c 87       	std	Y+12, r16	; 0x0c
    5330:	88 85       	ldd	r24, Y+8	; 0x08
    5332:	99 85       	ldd	r25, Y+9	; 0x09
    5334:	99 23       	and	r25, r25
    5336:	0c f4       	brge	.+2      	; 0x533a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x36>
    5338:	d1 c0       	rjmp	.+418    	; 0x54dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    533a:	8c 81       	ldd	r24, Y+4	; 0x04
    533c:	9d 81       	ldd	r25, Y+5	; 0x05
    533e:	fc 01       	movw	r30, r24
    5340:	26 81       	ldd	r18, Z+6	; 0x06
    5342:	37 81       	ldd	r19, Z+7	; 0x07
    5344:	88 85       	ldd	r24, Y+8	; 0x08
    5346:	99 85       	ldd	r25, Y+9	; 0x09
    5348:	82 17       	cp	r24, r18
    534a:	93 07       	cpc	r25, r19
    534c:	0c f0       	brlt	.+2      	; 0x5350 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    534e:	c6 c0       	rjmp	.+396    	; 0x54dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    5350:	8e 81       	ldd	r24, Y+6	; 0x06
    5352:	9f 81       	ldd	r25, Y+7	; 0x07
    5354:	99 23       	and	r25, r25
    5356:	54 f4       	brge	.+20     	; 0x536c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x68>
    5358:	2a 85       	ldd	r18, Y+10	; 0x0a
    535a:	3b 85       	ldd	r19, Y+11	; 0x0b
    535c:	8e 81       	ldd	r24, Y+6	; 0x06
    535e:	9f 81       	ldd	r25, Y+7	; 0x07
    5360:	82 0f       	add	r24, r18
    5362:	93 1f       	adc	r25, r19
    5364:	9b 87       	std	Y+11, r25	; 0x0b
    5366:	8a 87       	std	Y+10, r24	; 0x0a
    5368:	1f 82       	std	Y+7, r1	; 0x07
    536a:	1e 82       	std	Y+6, r1	; 0x06
    536c:	2e 81       	ldd	r18, Y+6	; 0x06
    536e:	3f 81       	ldd	r19, Y+7	; 0x07
    5370:	8a 85       	ldd	r24, Y+10	; 0x0a
    5372:	9b 85       	ldd	r25, Y+11	; 0x0b
    5374:	28 0f       	add	r18, r24
    5376:	39 1f       	adc	r19, r25
    5378:	8c 81       	ldd	r24, Y+4	; 0x04
    537a:	9d 81       	ldd	r25, Y+5	; 0x05
    537c:	fc 01       	movw	r30, r24
    537e:	84 81       	ldd	r24, Z+4	; 0x04
    5380:	95 81       	ldd	r25, Z+5	; 0x05
    5382:	82 17       	cp	r24, r18
    5384:	93 07       	cpc	r25, r19
    5386:	6c f4       	brge	.+26     	; 0x53a2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x9e>
    5388:	8c 81       	ldd	r24, Y+4	; 0x04
    538a:	9d 81       	ldd	r25, Y+5	; 0x05
    538c:	fc 01       	movw	r30, r24
    538e:	24 81       	ldd	r18, Z+4	; 0x04
    5390:	35 81       	ldd	r19, Z+5	; 0x05
    5392:	8e 81       	ldd	r24, Y+6	; 0x06
    5394:	9f 81       	ldd	r25, Y+7	; 0x07
    5396:	a9 01       	movw	r20, r18
    5398:	48 1b       	sub	r20, r24
    539a:	59 0b       	sbc	r21, r25
    539c:	ca 01       	movw	r24, r20
    539e:	9b 87       	std	Y+11, r25	; 0x0b
    53a0:	8a 87       	std	Y+10, r24	; 0x0a
    53a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    53a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    53a6:	18 16       	cp	r1, r24
    53a8:	19 06       	cpc	r1, r25
    53aa:	0c f0       	brlt	.+2      	; 0x53ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xaa>
    53ac:	97 c0       	rjmp	.+302    	; 0x54dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    53ae:	8c 81       	ldd	r24, Y+4	; 0x04
    53b0:	9d 81       	ldd	r25, Y+5	; 0x05
    53b2:	fc 01       	movw	r30, r24
    53b4:	27 8d       	ldd	r18, Z+31	; 0x1f
    53b6:	30 a1       	ldd	r19, Z+32	; 0x20
    53b8:	88 85       	ldd	r24, Y+8	; 0x08
    53ba:	99 85       	ldd	r25, Y+9	; 0x09
    53bc:	99 23       	and	r25, r25
    53be:	0c f4       	brge	.+2      	; 0x53c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xbe>
    53c0:	07 96       	adiw	r24, 0x07	; 7
    53c2:	95 95       	asr	r25
    53c4:	87 95       	ror	r24
    53c6:	95 95       	asr	r25
    53c8:	87 95       	ror	r24
    53ca:	95 95       	asr	r25
    53cc:	87 95       	ror	r24
    53ce:	bc 01       	movw	r22, r24
    53d0:	8c 81       	ldd	r24, Y+4	; 0x04
    53d2:	9d 81       	ldd	r25, Y+5	; 0x05
    53d4:	fc 01       	movw	r30, r24
    53d6:	84 81       	ldd	r24, Z+4	; 0x04
    53d8:	95 81       	ldd	r25, Z+5	; 0x05
    53da:	68 9f       	mul	r22, r24
    53dc:	a0 01       	movw	r20, r0
    53de:	69 9f       	mul	r22, r25
    53e0:	50 0d       	add	r21, r0
    53e2:	78 9f       	mul	r23, r24
    53e4:	50 0d       	add	r21, r0
    53e6:	11 24       	eor	r1, r1
    53e8:	8e 81       	ldd	r24, Y+6	; 0x06
    53ea:	9f 81       	ldd	r25, Y+7	; 0x07
    53ec:	84 0f       	add	r24, r20
    53ee:	95 1f       	adc	r25, r21
    53f0:	82 0f       	add	r24, r18
    53f2:	93 1f       	adc	r25, r19
    53f4:	9a 83       	std	Y+2, r25	; 0x02
    53f6:	89 83       	std	Y+1, r24	; 0x01
    53f8:	88 85       	ldd	r24, Y+8	; 0x08
    53fa:	99 85       	ldd	r25, Y+9	; 0x09
    53fc:	9c 01       	movw	r18, r24
    53fe:	27 70       	andi	r18, 0x07	; 7
    5400:	33 27       	eor	r19, r19
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	02 c0       	rjmp	.+4      	; 0x540c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x108>
    5408:	88 0f       	add	r24, r24
    540a:	99 1f       	adc	r25, r25
    540c:	2a 95       	dec	r18
    540e:	e2 f7       	brpl	.-8      	; 0x5408 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x104>
    5410:	8b 83       	std	Y+3, r24	; 0x03
    5412:	8c 85       	ldd	r24, Y+12	; 0x0c
    5414:	9d 85       	ldd	r25, Y+13	; 0x0d
    5416:	81 30       	cpi	r24, 0x01	; 1
    5418:	91 05       	cpc	r25, r1
    541a:	31 f0       	breq	.+12     	; 0x5428 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x124>
    541c:	81 30       	cpi	r24, 0x01	; 1
    541e:	91 05       	cpc	r25, r1
    5420:	f8 f0       	brcs	.+62     	; 0x5460 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x15c>
    5422:	02 97       	sbiw	r24, 0x02	; 2
    5424:	d9 f1       	breq	.+118    	; 0x549c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x198>
    5426:	5a c0       	rjmp	.+180    	; 0x54dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    5428:	8a 85       	ldd	r24, Y+10	; 0x0a
    542a:	9b 85       	ldd	r25, Y+11	; 0x0b
    542c:	9c 01       	movw	r18, r24
    542e:	21 50       	subi	r18, 0x01	; 1
    5430:	31 09       	sbc	r19, r1
    5432:	3b 87       	std	Y+11, r19	; 0x0b
    5434:	2a 87       	std	Y+10, r18	; 0x0a
    5436:	21 e0       	ldi	r18, 0x01	; 1
    5438:	89 2b       	or	r24, r25
    543a:	09 f4       	brne	.+2      	; 0x543e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x13a>
    543c:	20 e0       	ldi	r18, 0x00	; 0
    543e:	22 23       	and	r18, r18
    5440:	09 f4       	brne	.+2      	; 0x5444 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x140>
    5442:	47 c0       	rjmp	.+142    	; 0x54d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1ce>
    5444:	89 81       	ldd	r24, Y+1	; 0x01
    5446:	9a 81       	ldd	r25, Y+2	; 0x02
    5448:	9c 01       	movw	r18, r24
    544a:	2f 5f       	subi	r18, 0xFF	; 255
    544c:	3f 4f       	sbci	r19, 0xFF	; 255
    544e:	3a 83       	std	Y+2, r19	; 0x02
    5450:	29 83       	std	Y+1, r18	; 0x01
    5452:	fc 01       	movw	r30, r24
    5454:	30 81       	ld	r19, Z
    5456:	2b 81       	ldd	r18, Y+3	; 0x03
    5458:	23 2b       	or	r18, r19
    545a:	fc 01       	movw	r30, r24
    545c:	20 83       	st	Z, r18
    545e:	e4 cf       	rjmp	.-56     	; 0x5428 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x124>
    5460:	8b 81       	ldd	r24, Y+3	; 0x03
    5462:	80 95       	com	r24
    5464:	8b 83       	std	Y+3, r24	; 0x03
    5466:	8a 85       	ldd	r24, Y+10	; 0x0a
    5468:	9b 85       	ldd	r25, Y+11	; 0x0b
    546a:	9c 01       	movw	r18, r24
    546c:	21 50       	subi	r18, 0x01	; 1
    546e:	31 09       	sbc	r19, r1
    5470:	3b 87       	std	Y+11, r19	; 0x0b
    5472:	2a 87       	std	Y+10, r18	; 0x0a
    5474:	21 e0       	ldi	r18, 0x01	; 1
    5476:	89 2b       	or	r24, r25
    5478:	09 f4       	brne	.+2      	; 0x547c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x178>
    547a:	20 e0       	ldi	r18, 0x00	; 0
    547c:	22 23       	and	r18, r18
    547e:	59 f1       	breq	.+86     	; 0x54d6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d2>
    5480:	89 81       	ldd	r24, Y+1	; 0x01
    5482:	9a 81       	ldd	r25, Y+2	; 0x02
    5484:	9c 01       	movw	r18, r24
    5486:	2f 5f       	subi	r18, 0xFF	; 255
    5488:	3f 4f       	sbci	r19, 0xFF	; 255
    548a:	3a 83       	std	Y+2, r19	; 0x02
    548c:	29 83       	std	Y+1, r18	; 0x01
    548e:	fc 01       	movw	r30, r24
    5490:	30 81       	ld	r19, Z
    5492:	2b 81       	ldd	r18, Y+3	; 0x03
    5494:	23 23       	and	r18, r19
    5496:	fc 01       	movw	r30, r24
    5498:	20 83       	st	Z, r18
    549a:	e5 cf       	rjmp	.-54     	; 0x5466 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x162>
    549c:	8a 85       	ldd	r24, Y+10	; 0x0a
    549e:	9b 85       	ldd	r25, Y+11	; 0x0b
    54a0:	9c 01       	movw	r18, r24
    54a2:	21 50       	subi	r18, 0x01	; 1
    54a4:	31 09       	sbc	r19, r1
    54a6:	3b 87       	std	Y+11, r19	; 0x0b
    54a8:	2a 87       	std	Y+10, r18	; 0x0a
    54aa:	21 e0       	ldi	r18, 0x01	; 1
    54ac:	89 2b       	or	r24, r25
    54ae:	09 f4       	brne	.+2      	; 0x54b2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1ae>
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	22 23       	and	r18, r18
    54b4:	91 f0       	breq	.+36     	; 0x54da <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d6>
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ba:	9c 01       	movw	r18, r24
    54bc:	2f 5f       	subi	r18, 0xFF	; 255
    54be:	3f 4f       	sbci	r19, 0xFF	; 255
    54c0:	3a 83       	std	Y+2, r19	; 0x02
    54c2:	29 83       	std	Y+1, r18	; 0x01
    54c4:	fc 01       	movw	r30, r24
    54c6:	30 81       	ld	r19, Z
    54c8:	2b 81       	ldd	r18, Y+3	; 0x03
    54ca:	23 27       	eor	r18, r19
    54cc:	fc 01       	movw	r30, r24
    54ce:	20 83       	st	Z, r18
    54d0:	e5 cf       	rjmp	.-54     	; 0x549c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x198>
    54d2:	00 00       	nop
    54d4:	03 c0       	rjmp	.+6      	; 0x54dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    54d6:	00 00       	nop
    54d8:	01 c0       	rjmp	.+2      	; 0x54dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    54da:	00 00       	nop
    54dc:	00 00       	nop
    54de:	2d 96       	adiw	r28, 0x0d	; 13
    54e0:	0f b6       	in	r0, 0x3f	; 63
    54e2:	f8 94       	cli
    54e4:	de bf       	out	0x3e, r29	; 62
    54e6:	0f be       	out	0x3f, r0	; 63
    54e8:	cd bf       	out	0x3d, r28	; 61
    54ea:	df 91       	pop	r29
    54ec:	cf 91       	pop	r28
    54ee:	1f 91       	pop	r17
    54f0:	0f 91       	pop	r16
    54f2:	08 95       	ret

000054f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    54f4:	0f 93       	push	r16
    54f6:	1f 93       	push	r17
    54f8:	cf 93       	push	r28
    54fa:	df 93       	push	r29
    54fc:	cd b7       	in	r28, 0x3d	; 61
    54fe:	de b7       	in	r29, 0x3e	; 62
    5500:	2b 97       	sbiw	r28, 0x0b	; 11
    5502:	0f b6       	in	r0, 0x3f	; 63
    5504:	f8 94       	cli
    5506:	de bf       	out	0x3e, r29	; 62
    5508:	0f be       	out	0x3f, r0	; 63
    550a:	cd bf       	out	0x3d, r28	; 61
    550c:	9b 83       	std	Y+3, r25	; 0x03
    550e:	8a 83       	std	Y+2, r24	; 0x02
    5510:	7d 83       	std	Y+5, r23	; 0x05
    5512:	6c 83       	std	Y+4, r22	; 0x04
    5514:	5f 83       	std	Y+7, r21	; 0x07
    5516:	4e 83       	std	Y+6, r20	; 0x06
    5518:	39 87       	std	Y+9, r19	; 0x09
    551a:	28 87       	std	Y+8, r18	; 0x08
    551c:	1b 87       	std	Y+11, r17	; 0x0b
    551e:	0a 87       	std	Y+10, r16	; 0x0a
    5520:	19 82       	std	Y+1, r1	; 0x01
    5522:	8a 81       	ldd	r24, Y+2	; 0x02
    5524:	9b 81       	ldd	r25, Y+3	; 0x03
    5526:	fc 01       	movw	r30, r24
    5528:	86 89       	ldd	r24, Z+22	; 0x16
    552a:	88 2f       	mov	r24, r24
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	82 30       	cpi	r24, 0x02	; 2
    5530:	91 05       	cpc	r25, r1
    5532:	d9 f1       	breq	.+118    	; 0x55aa <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xb6>
    5534:	83 30       	cpi	r24, 0x03	; 3
    5536:	91 05       	cpc	r25, r1
    5538:	09 f4       	brne	.+2      	; 0x553c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x48>
    553a:	5f c0       	rjmp	.+190    	; 0x55fa <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x106>
    553c:	01 97       	sbiw	r24, 0x01	; 1
    553e:	09 f0       	breq	.+2      	; 0x5542 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4e>
    5540:	85 c0       	rjmp	.+266    	; 0x564c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x158>
    5542:	81 e0       	ldi	r24, 0x01	; 1
    5544:	89 83       	std	Y+1, r24	; 0x01
    5546:	2c 81       	ldd	r18, Y+4	; 0x04
    5548:	3d 81       	ldd	r19, Y+5	; 0x05
    554a:	8e 81       	ldd	r24, Y+6	; 0x06
    554c:	9f 81       	ldd	r25, Y+7	; 0x07
    554e:	82 27       	eor	r24, r18
    5550:	93 27       	eor	r25, r19
    5552:	9d 83       	std	Y+5, r25	; 0x05
    5554:	8c 83       	std	Y+4, r24	; 0x04
    5556:	2e 81       	ldd	r18, Y+6	; 0x06
    5558:	3f 81       	ldd	r19, Y+7	; 0x07
    555a:	8c 81       	ldd	r24, Y+4	; 0x04
    555c:	9d 81       	ldd	r25, Y+5	; 0x05
    555e:	82 27       	eor	r24, r18
    5560:	93 27       	eor	r25, r19
    5562:	9f 83       	std	Y+7, r25	; 0x07
    5564:	8e 83       	std	Y+6, r24	; 0x06
    5566:	2c 81       	ldd	r18, Y+4	; 0x04
    5568:	3d 81       	ldd	r19, Y+5	; 0x05
    556a:	8e 81       	ldd	r24, Y+6	; 0x06
    556c:	9f 81       	ldd	r25, Y+7	; 0x07
    556e:	82 27       	eor	r24, r18
    5570:	93 27       	eor	r25, r19
    5572:	9d 83       	std	Y+5, r25	; 0x05
    5574:	8c 83       	std	Y+4, r24	; 0x04
    5576:	8a 81       	ldd	r24, Y+2	; 0x02
    5578:	9b 81       	ldd	r25, Y+3	; 0x03
    557a:	fc 01       	movw	r30, r24
    557c:	24 81       	ldd	r18, Z+4	; 0x04
    557e:	35 81       	ldd	r19, Z+5	; 0x05
    5580:	8c 81       	ldd	r24, Y+4	; 0x04
    5582:	9d 81       	ldd	r25, Y+5	; 0x05
    5584:	a9 01       	movw	r20, r18
    5586:	48 1b       	sub	r20, r24
    5588:	59 0b       	sbc	r21, r25
    558a:	ca 01       	movw	r24, r20
    558c:	01 97       	sbiw	r24, 0x01	; 1
    558e:	9d 83       	std	Y+5, r25	; 0x05
    5590:	8c 83       	std	Y+4, r24	; 0x04
    5592:	88 85       	ldd	r24, Y+8	; 0x08
    5594:	99 85       	ldd	r25, Y+9	; 0x09
    5596:	01 97       	sbiw	r24, 0x01	; 1
    5598:	2c 81       	ldd	r18, Y+4	; 0x04
    559a:	3d 81       	ldd	r19, Y+5	; 0x05
    559c:	f9 01       	movw	r30, r18
    559e:	e8 1b       	sub	r30, r24
    55a0:	f9 0b       	sbc	r31, r25
    55a2:	cf 01       	movw	r24, r30
    55a4:	9d 83       	std	Y+5, r25	; 0x05
    55a6:	8c 83       	std	Y+4, r24	; 0x04
    55a8:	51 c0       	rjmp	.+162    	; 0x564c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x158>
    55aa:	8a 81       	ldd	r24, Y+2	; 0x02
    55ac:	9b 81       	ldd	r25, Y+3	; 0x03
    55ae:	fc 01       	movw	r30, r24
    55b0:	24 81       	ldd	r18, Z+4	; 0x04
    55b2:	35 81       	ldd	r19, Z+5	; 0x05
    55b4:	8c 81       	ldd	r24, Y+4	; 0x04
    55b6:	9d 81       	ldd	r25, Y+5	; 0x05
    55b8:	a9 01       	movw	r20, r18
    55ba:	48 1b       	sub	r20, r24
    55bc:	59 0b       	sbc	r21, r25
    55be:	ca 01       	movw	r24, r20
    55c0:	01 97       	sbiw	r24, 0x01	; 1
    55c2:	9d 83       	std	Y+5, r25	; 0x05
    55c4:	8c 83       	std	Y+4, r24	; 0x04
    55c6:	8a 81       	ldd	r24, Y+2	; 0x02
    55c8:	9b 81       	ldd	r25, Y+3	; 0x03
    55ca:	fc 01       	movw	r30, r24
    55cc:	26 81       	ldd	r18, Z+6	; 0x06
    55ce:	37 81       	ldd	r19, Z+7	; 0x07
    55d0:	8e 81       	ldd	r24, Y+6	; 0x06
    55d2:	9f 81       	ldd	r25, Y+7	; 0x07
    55d4:	a9 01       	movw	r20, r18
    55d6:	48 1b       	sub	r20, r24
    55d8:	59 0b       	sbc	r21, r25
    55da:	ca 01       	movw	r24, r20
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	9f 83       	std	Y+7, r25	; 0x07
    55e0:	8e 83       	std	Y+6, r24	; 0x06
    55e2:	88 85       	ldd	r24, Y+8	; 0x08
    55e4:	99 85       	ldd	r25, Y+9	; 0x09
    55e6:	01 97       	sbiw	r24, 0x01	; 1
    55e8:	2e 81       	ldd	r18, Y+6	; 0x06
    55ea:	3f 81       	ldd	r19, Y+7	; 0x07
    55ec:	f9 01       	movw	r30, r18
    55ee:	e8 1b       	sub	r30, r24
    55f0:	f9 0b       	sbc	r31, r25
    55f2:	cf 01       	movw	r24, r30
    55f4:	9f 83       	std	Y+7, r25	; 0x07
    55f6:	8e 83       	std	Y+6, r24	; 0x06
    55f8:	29 c0       	rjmp	.+82     	; 0x564c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x158>
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	89 83       	std	Y+1, r24	; 0x01
    55fe:	2c 81       	ldd	r18, Y+4	; 0x04
    5600:	3d 81       	ldd	r19, Y+5	; 0x05
    5602:	8e 81       	ldd	r24, Y+6	; 0x06
    5604:	9f 81       	ldd	r25, Y+7	; 0x07
    5606:	82 27       	eor	r24, r18
    5608:	93 27       	eor	r25, r19
    560a:	9d 83       	std	Y+5, r25	; 0x05
    560c:	8c 83       	std	Y+4, r24	; 0x04
    560e:	2e 81       	ldd	r18, Y+6	; 0x06
    5610:	3f 81       	ldd	r19, Y+7	; 0x07
    5612:	8c 81       	ldd	r24, Y+4	; 0x04
    5614:	9d 81       	ldd	r25, Y+5	; 0x05
    5616:	82 27       	eor	r24, r18
    5618:	93 27       	eor	r25, r19
    561a:	9f 83       	std	Y+7, r25	; 0x07
    561c:	8e 83       	std	Y+6, r24	; 0x06
    561e:	2c 81       	ldd	r18, Y+4	; 0x04
    5620:	3d 81       	ldd	r19, Y+5	; 0x05
    5622:	8e 81       	ldd	r24, Y+6	; 0x06
    5624:	9f 81       	ldd	r25, Y+7	; 0x07
    5626:	82 27       	eor	r24, r18
    5628:	93 27       	eor	r25, r19
    562a:	9d 83       	std	Y+5, r25	; 0x05
    562c:	8c 83       	std	Y+4, r24	; 0x04
    562e:	8a 81       	ldd	r24, Y+2	; 0x02
    5630:	9b 81       	ldd	r25, Y+3	; 0x03
    5632:	fc 01       	movw	r30, r24
    5634:	26 81       	ldd	r18, Z+6	; 0x06
    5636:	37 81       	ldd	r19, Z+7	; 0x07
    5638:	8e 81       	ldd	r24, Y+6	; 0x06
    563a:	9f 81       	ldd	r25, Y+7	; 0x07
    563c:	a9 01       	movw	r20, r18
    563e:	48 1b       	sub	r20, r24
    5640:	59 0b       	sbc	r21, r25
    5642:	ca 01       	movw	r24, r20
    5644:	01 97       	sbiw	r24, 0x01	; 1
    5646:	9f 83       	std	Y+7, r25	; 0x07
    5648:	8e 83       	std	Y+6, r24	; 0x06
    564a:	00 00       	nop
    564c:	89 81       	ldd	r24, Y+1	; 0x01
    564e:	88 23       	and	r24, r24
    5650:	69 f0       	breq	.+26     	; 0x566c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x178>
    5652:	ea 85       	ldd	r30, Y+10	; 0x0a
    5654:	fb 85       	ldd	r31, Y+11	; 0x0b
    5656:	28 85       	ldd	r18, Y+8	; 0x08
    5658:	39 85       	ldd	r19, Y+9	; 0x09
    565a:	4e 81       	ldd	r20, Y+6	; 0x06
    565c:	5f 81       	ldd	r21, Y+7	; 0x07
    565e:	6c 81       	ldd	r22, Y+4	; 0x04
    5660:	7d 81       	ldd	r23, Y+5	; 0x05
    5662:	8a 81       	ldd	r24, Y+2	; 0x02
    5664:	9b 81       	ldd	r25, Y+3	; 0x03
    5666:	8f 01       	movw	r16, r30
    5668:	4d de       	rcall	.-870    	; 0x5304 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    566a:	0c c0       	rjmp	.+24     	; 0x5684 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x190>
    566c:	ea 85       	ldd	r30, Y+10	; 0x0a
    566e:	fb 85       	ldd	r31, Y+11	; 0x0b
    5670:	28 85       	ldd	r18, Y+8	; 0x08
    5672:	39 85       	ldd	r19, Y+9	; 0x09
    5674:	4e 81       	ldd	r20, Y+6	; 0x06
    5676:	5f 81       	ldd	r21, Y+7	; 0x07
    5678:	6c 81       	ldd	r22, Y+4	; 0x04
    567a:	7d 81       	ldd	r23, Y+5	; 0x05
    567c:	8a 81       	ldd	r24, Y+2	; 0x02
    567e:	9b 81       	ldd	r25, Y+3	; 0x03
    5680:	8f 01       	movw	r16, r30
    5682:	0c d0       	rcall	.+24     	; 0x569c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    5684:	00 00       	nop
    5686:	2b 96       	adiw	r28, 0x0b	; 11
    5688:	0f b6       	in	r0, 0x3f	; 63
    568a:	f8 94       	cli
    568c:	de bf       	out	0x3e, r29	; 62
    568e:	0f be       	out	0x3f, r0	; 63
    5690:	cd bf       	out	0x3d, r28	; 61
    5692:	df 91       	pop	r29
    5694:	cf 91       	pop	r28
    5696:	1f 91       	pop	r17
    5698:	0f 91       	pop	r16
    569a:	08 95       	ret

0000569c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    569c:	0f 93       	push	r16
    569e:	1f 93       	push	r17
    56a0:	cf 93       	push	r28
    56a2:	df 93       	push	r29
    56a4:	cd b7       	in	r28, 0x3d	; 61
    56a6:	de b7       	in	r29, 0x3e	; 62
    56a8:	68 97       	sbiw	r28, 0x18	; 24
    56aa:	0f b6       	in	r0, 0x3f	; 63
    56ac:	f8 94       	cli
    56ae:	de bf       	out	0x3e, r29	; 62
    56b0:	0f be       	out	0x3f, r0	; 63
    56b2:	cd bf       	out	0x3d, r28	; 61
    56b4:	98 8b       	std	Y+16, r25	; 0x10
    56b6:	8f 87       	std	Y+15, r24	; 0x0f
    56b8:	7a 8b       	std	Y+18, r23	; 0x12
    56ba:	69 8b       	std	Y+17, r22	; 0x11
    56bc:	5c 8b       	std	Y+20, r21	; 0x14
    56be:	4b 8b       	std	Y+19, r20	; 0x13
    56c0:	3e 8b       	std	Y+22, r19	; 0x16
    56c2:	2d 8b       	std	Y+21, r18	; 0x15
    56c4:	18 8f       	std	Y+24, r17	; 0x18
    56c6:	0f 8b       	std	Y+23, r16	; 0x17
    56c8:	89 89       	ldd	r24, Y+17	; 0x11
    56ca:	9a 89       	ldd	r25, Y+18	; 0x12
    56cc:	99 23       	and	r25, r25
    56ce:	0c f4       	brge	.+2      	; 0x56d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x36>
    56d0:	62 c1       	rjmp	.+708    	; 0x5996 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    56d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    56d4:	98 89       	ldd	r25, Y+16	; 0x10
    56d6:	fc 01       	movw	r30, r24
    56d8:	24 81       	ldd	r18, Z+4	; 0x04
    56da:	35 81       	ldd	r19, Z+5	; 0x05
    56dc:	89 89       	ldd	r24, Y+17	; 0x11
    56de:	9a 89       	ldd	r25, Y+18	; 0x12
    56e0:	82 17       	cp	r24, r18
    56e2:	93 07       	cpc	r25, r19
    56e4:	0c f0       	brlt	.+2      	; 0x56e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x4c>
    56e6:	57 c1       	rjmp	.+686    	; 0x5996 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    56e8:	8b 89       	ldd	r24, Y+19	; 0x13
    56ea:	9c 89       	ldd	r25, Y+20	; 0x14
    56ec:	99 23       	and	r25, r25
    56ee:	54 f4       	brge	.+20     	; 0x5704 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x68>
    56f0:	2d 89       	ldd	r18, Y+21	; 0x15
    56f2:	3e 89       	ldd	r19, Y+22	; 0x16
    56f4:	8b 89       	ldd	r24, Y+19	; 0x13
    56f6:	9c 89       	ldd	r25, Y+20	; 0x14
    56f8:	82 0f       	add	r24, r18
    56fa:	93 1f       	adc	r25, r19
    56fc:	9e 8b       	std	Y+22, r25	; 0x16
    56fe:	8d 8b       	std	Y+21, r24	; 0x15
    5700:	1c 8a       	std	Y+20, r1	; 0x14
    5702:	1b 8a       	std	Y+19, r1	; 0x13
    5704:	2b 89       	ldd	r18, Y+19	; 0x13
    5706:	3c 89       	ldd	r19, Y+20	; 0x14
    5708:	8d 89       	ldd	r24, Y+21	; 0x15
    570a:	9e 89       	ldd	r25, Y+22	; 0x16
    570c:	28 0f       	add	r18, r24
    570e:	39 1f       	adc	r19, r25
    5710:	8f 85       	ldd	r24, Y+15	; 0x0f
    5712:	98 89       	ldd	r25, Y+16	; 0x10
    5714:	fc 01       	movw	r30, r24
    5716:	86 81       	ldd	r24, Z+6	; 0x06
    5718:	97 81       	ldd	r25, Z+7	; 0x07
    571a:	82 17       	cp	r24, r18
    571c:	93 07       	cpc	r25, r19
    571e:	6c f4       	brge	.+26     	; 0x573a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x9e>
    5720:	8f 85       	ldd	r24, Y+15	; 0x0f
    5722:	98 89       	ldd	r25, Y+16	; 0x10
    5724:	fc 01       	movw	r30, r24
    5726:	26 81       	ldd	r18, Z+6	; 0x06
    5728:	37 81       	ldd	r19, Z+7	; 0x07
    572a:	8b 89       	ldd	r24, Y+19	; 0x13
    572c:	9c 89       	ldd	r25, Y+20	; 0x14
    572e:	a9 01       	movw	r20, r18
    5730:	48 1b       	sub	r20, r24
    5732:	59 0b       	sbc	r21, r25
    5734:	ca 01       	movw	r24, r20
    5736:	9e 8b       	std	Y+22, r25	; 0x16
    5738:	8d 8b       	std	Y+21, r24	; 0x15
    573a:	8d 89       	ldd	r24, Y+21	; 0x15
    573c:	9e 89       	ldd	r25, Y+22	; 0x16
    573e:	18 16       	cp	r1, r24
    5740:	19 06       	cpc	r1, r25
    5742:	0c f0       	brlt	.+2      	; 0x5746 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xaa>
    5744:	28 c1       	rjmp	.+592    	; 0x5996 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5746:	8b 89       	ldd	r24, Y+19	; 0x13
    5748:	8e 83       	std	Y+6, r24	; 0x06
    574a:	8d 89       	ldd	r24, Y+21	; 0x15
    574c:	89 83       	std	Y+1, r24	; 0x01
    574e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5750:	98 89       	ldd	r25, Y+16	; 0x10
    5752:	fc 01       	movw	r30, r24
    5754:	87 8d       	ldd	r24, Z+31	; 0x1f
    5756:	90 a1       	ldd	r25, Z+32	; 0x20
    5758:	2e 81       	ldd	r18, Y+6	; 0x06
    575a:	26 95       	lsr	r18
    575c:	26 95       	lsr	r18
    575e:	26 95       	lsr	r18
    5760:	62 2f       	mov	r22, r18
    5762:	70 e0       	ldi	r23, 0x00	; 0
    5764:	2f 85       	ldd	r18, Y+15	; 0x0f
    5766:	38 89       	ldd	r19, Y+16	; 0x10
    5768:	f9 01       	movw	r30, r18
    576a:	24 81       	ldd	r18, Z+4	; 0x04
    576c:	35 81       	ldd	r19, Z+5	; 0x05
    576e:	62 9f       	mul	r22, r18
    5770:	a0 01       	movw	r20, r0
    5772:	63 9f       	mul	r22, r19
    5774:	50 0d       	add	r21, r0
    5776:	72 9f       	mul	r23, r18
    5778:	50 0d       	add	r21, r0
    577a:	11 24       	eor	r1, r1
    577c:	29 89       	ldd	r18, Y+17	; 0x11
    577e:	3a 89       	ldd	r19, Y+18	; 0x12
    5780:	24 0f       	add	r18, r20
    5782:	35 1f       	adc	r19, r21
    5784:	82 0f       	add	r24, r18
    5786:	93 1f       	adc	r25, r19
    5788:	9b 83       	std	Y+3, r25	; 0x03
    578a:	8a 83       	std	Y+2, r24	; 0x02
    578c:	8e 81       	ldd	r24, Y+6	; 0x06
    578e:	87 70       	andi	r24, 0x07	; 7
    5790:	8c 83       	std	Y+4, r24	; 0x04
    5792:	8c 81       	ldd	r24, Y+4	; 0x04
    5794:	88 23       	and	r24, r24
    5796:	09 f4       	brne	.+2      	; 0x579a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    5798:	68 c0       	rjmp	.+208    	; 0x586a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1ce>
    579a:	98 e0       	ldi	r25, 0x08	; 8
    579c:	8c 81       	ldd	r24, Y+4	; 0x04
    579e:	f9 2f       	mov	r31, r25
    57a0:	f8 1b       	sub	r31, r24
    57a2:	8f 2f       	mov	r24, r31
    57a4:	8c 83       	std	Y+4, r24	; 0x04
    57a6:	8c 81       	ldd	r24, Y+4	; 0x04
    57a8:	88 2f       	mov	r24, r24
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	8e 5b       	subi	r24, 0xBE	; 190
    57ae:	94 4f       	sbci	r25, 0xF4	; 244
    57b0:	98 87       	std	Y+8, r25	; 0x08
    57b2:	8f 83       	std	Y+7, r24	; 0x07
    57b4:	8f 81       	ldd	r24, Y+7	; 0x07
    57b6:	98 85       	ldd	r25, Y+8	; 0x08
    57b8:	fc 01       	movw	r30, r24
    57ba:	84 91       	lpm	r24, Z
    57bc:	89 87       	std	Y+9, r24	; 0x09
    57be:	89 85       	ldd	r24, Y+9	; 0x09
    57c0:	8d 83       	std	Y+5, r24	; 0x05
    57c2:	99 81       	ldd	r25, Y+1	; 0x01
    57c4:	8c 81       	ldd	r24, Y+4	; 0x04
    57c6:	98 17       	cp	r25, r24
    57c8:	98 f4       	brcc	.+38     	; 0x57f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x154>
    57ca:	8c 81       	ldd	r24, Y+4	; 0x04
    57cc:	28 2f       	mov	r18, r24
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	89 81       	ldd	r24, Y+1	; 0x01
    57d2:	88 2f       	mov	r24, r24
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	28 1b       	sub	r18, r24
    57d8:	39 0b       	sbc	r19, r25
    57da:	8f ef       	ldi	r24, 0xFF	; 255
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	02 c0       	rjmp	.+4      	; 0x57e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x148>
    57e0:	95 95       	asr	r25
    57e2:	87 95       	ror	r24
    57e4:	2a 95       	dec	r18
    57e6:	e2 f7       	brpl	.-8      	; 0x57e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    57e8:	98 2f       	mov	r25, r24
    57ea:	8d 81       	ldd	r24, Y+5	; 0x05
    57ec:	89 23       	and	r24, r25
    57ee:	8d 83       	std	Y+5, r24	; 0x05
    57f0:	8f 89       	ldd	r24, Y+23	; 0x17
    57f2:	98 8d       	ldd	r25, Y+24	; 0x18
    57f4:	81 30       	cpi	r24, 0x01	; 1
    57f6:	91 05       	cpc	r25, r1
    57f8:	31 f0       	breq	.+12     	; 0x5806 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x16a>
    57fa:	81 30       	cpi	r24, 0x01	; 1
    57fc:	91 05       	cpc	r25, r1
    57fe:	78 f0       	brcs	.+30     	; 0x581e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x182>
    5800:	02 97       	sbiw	r24, 0x02	; 2
    5802:	d9 f0       	breq	.+54     	; 0x583a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x19e>
    5804:	26 c0       	rjmp	.+76     	; 0x5852 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1b6>
    5806:	8a 81       	ldd	r24, Y+2	; 0x02
    5808:	9b 81       	ldd	r25, Y+3	; 0x03
    580a:	fc 01       	movw	r30, r24
    580c:	90 81       	ld	r25, Z
    580e:	8d 81       	ldd	r24, Y+5	; 0x05
    5810:	29 2f       	mov	r18, r25
    5812:	28 2b       	or	r18, r24
    5814:	8a 81       	ldd	r24, Y+2	; 0x02
    5816:	9b 81       	ldd	r25, Y+3	; 0x03
    5818:	fc 01       	movw	r30, r24
    581a:	20 83       	st	Z, r18
    581c:	1a c0       	rjmp	.+52     	; 0x5852 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1b6>
    581e:	8a 81       	ldd	r24, Y+2	; 0x02
    5820:	9b 81       	ldd	r25, Y+3	; 0x03
    5822:	fc 01       	movw	r30, r24
    5824:	80 81       	ld	r24, Z
    5826:	98 2f       	mov	r25, r24
    5828:	8d 81       	ldd	r24, Y+5	; 0x05
    582a:	80 95       	com	r24
    582c:	89 23       	and	r24, r25
    582e:	28 2f       	mov	r18, r24
    5830:	8a 81       	ldd	r24, Y+2	; 0x02
    5832:	9b 81       	ldd	r25, Y+3	; 0x03
    5834:	fc 01       	movw	r30, r24
    5836:	20 83       	st	Z, r18
    5838:	0c c0       	rjmp	.+24     	; 0x5852 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1b6>
    583a:	8a 81       	ldd	r24, Y+2	; 0x02
    583c:	9b 81       	ldd	r25, Y+3	; 0x03
    583e:	fc 01       	movw	r30, r24
    5840:	90 81       	ld	r25, Z
    5842:	8d 81       	ldd	r24, Y+5	; 0x05
    5844:	29 2f       	mov	r18, r25
    5846:	28 27       	eor	r18, r24
    5848:	8a 81       	ldd	r24, Y+2	; 0x02
    584a:	9b 81       	ldd	r25, Y+3	; 0x03
    584c:	fc 01       	movw	r30, r24
    584e:	20 83       	st	Z, r18
    5850:	00 00       	nop
    5852:	8f 85       	ldd	r24, Y+15	; 0x0f
    5854:	98 89       	ldd	r25, Y+16	; 0x10
    5856:	fc 01       	movw	r30, r24
    5858:	84 81       	ldd	r24, Z+4	; 0x04
    585a:	95 81       	ldd	r25, Z+5	; 0x05
    585c:	9c 01       	movw	r18, r24
    585e:	8a 81       	ldd	r24, Y+2	; 0x02
    5860:	9b 81       	ldd	r25, Y+3	; 0x03
    5862:	82 0f       	add	r24, r18
    5864:	93 1f       	adc	r25, r19
    5866:	9b 83       	std	Y+3, r25	; 0x03
    5868:	8a 83       	std	Y+2, r24	; 0x02
    586a:	99 81       	ldd	r25, Y+1	; 0x01
    586c:	8c 81       	ldd	r24, Y+4	; 0x04
    586e:	98 17       	cp	r25, r24
    5870:	08 f4       	brcc	.+2      	; 0x5874 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1d8>
    5872:	91 c0       	rjmp	.+290    	; 0x5996 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5874:	99 81       	ldd	r25, Y+1	; 0x01
    5876:	8c 81       	ldd	r24, Y+4	; 0x04
    5878:	f9 2f       	mov	r31, r25
    587a:	f8 1b       	sub	r31, r24
    587c:	8f 2f       	mov	r24, r31
    587e:	89 83       	std	Y+1, r24	; 0x01
    5880:	89 81       	ldd	r24, Y+1	; 0x01
    5882:	88 30       	cpi	r24, 0x08	; 8
    5884:	08 f4       	brcc	.+2      	; 0x5888 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1ec>
    5886:	41 c0       	rjmp	.+130    	; 0x590a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x26e>
    5888:	8f 89       	ldd	r24, Y+23	; 0x17
    588a:	98 8d       	ldd	r25, Y+24	; 0x18
    588c:	02 97       	sbiw	r24, 0x02	; 2
    588e:	e9 f4       	brne	.+58     	; 0x58ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x22e>
    5890:	8a 81       	ldd	r24, Y+2	; 0x02
    5892:	9b 81       	ldd	r25, Y+3	; 0x03
    5894:	fc 01       	movw	r30, r24
    5896:	80 81       	ld	r24, Z
    5898:	28 2f       	mov	r18, r24
    589a:	20 95       	com	r18
    589c:	8a 81       	ldd	r24, Y+2	; 0x02
    589e:	9b 81       	ldd	r25, Y+3	; 0x03
    58a0:	fc 01       	movw	r30, r24
    58a2:	20 83       	st	Z, r18
    58a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    58a6:	98 89       	ldd	r25, Y+16	; 0x10
    58a8:	fc 01       	movw	r30, r24
    58aa:	84 81       	ldd	r24, Z+4	; 0x04
    58ac:	95 81       	ldd	r25, Z+5	; 0x05
    58ae:	9c 01       	movw	r18, r24
    58b0:	8a 81       	ldd	r24, Y+2	; 0x02
    58b2:	9b 81       	ldd	r25, Y+3	; 0x03
    58b4:	82 0f       	add	r24, r18
    58b6:	93 1f       	adc	r25, r19
    58b8:	9b 83       	std	Y+3, r25	; 0x03
    58ba:	8a 83       	std	Y+2, r24	; 0x02
    58bc:	89 81       	ldd	r24, Y+1	; 0x01
    58be:	88 50       	subi	r24, 0x08	; 8
    58c0:	89 83       	std	Y+1, r24	; 0x01
    58c2:	89 81       	ldd	r24, Y+1	; 0x01
    58c4:	88 30       	cpi	r24, 0x08	; 8
    58c6:	08 f1       	brcs	.+66     	; 0x590a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x26e>
    58c8:	e3 cf       	rjmp	.-58     	; 0x5890 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1f4>
    58ca:	8f 89       	ldd	r24, Y+23	; 0x17
    58cc:	98 8d       	ldd	r25, Y+24	; 0x18
    58ce:	89 2b       	or	r24, r25
    58d0:	11 f0       	breq	.+4      	; 0x58d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x23a>
    58d2:	8f ef       	ldi	r24, 0xFF	; 255
    58d4:	01 c0       	rjmp	.+2      	; 0x58d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x23c>
    58d6:	80 e0       	ldi	r24, 0x00	; 0
    58d8:	8a 87       	std	Y+10, r24	; 0x0a
    58da:	8a 81       	ldd	r24, Y+2	; 0x02
    58dc:	9b 81       	ldd	r25, Y+3	; 0x03
    58de:	2a 85       	ldd	r18, Y+10	; 0x0a
    58e0:	fc 01       	movw	r30, r24
    58e2:	20 83       	st	Z, r18
    58e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    58e6:	98 89       	ldd	r25, Y+16	; 0x10
    58e8:	fc 01       	movw	r30, r24
    58ea:	84 81       	ldd	r24, Z+4	; 0x04
    58ec:	95 81       	ldd	r25, Z+5	; 0x05
    58ee:	9c 01       	movw	r18, r24
    58f0:	8a 81       	ldd	r24, Y+2	; 0x02
    58f2:	9b 81       	ldd	r25, Y+3	; 0x03
    58f4:	82 0f       	add	r24, r18
    58f6:	93 1f       	adc	r25, r19
    58f8:	9b 83       	std	Y+3, r25	; 0x03
    58fa:	8a 83       	std	Y+2, r24	; 0x02
    58fc:	89 81       	ldd	r24, Y+1	; 0x01
    58fe:	88 50       	subi	r24, 0x08	; 8
    5900:	89 83       	std	Y+1, r24	; 0x01
    5902:	89 81       	ldd	r24, Y+1	; 0x01
    5904:	88 30       	cpi	r24, 0x08	; 8
    5906:	08 f0       	brcs	.+2      	; 0x590a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x26e>
    5908:	e8 cf       	rjmp	.-48     	; 0x58da <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x23e>
    590a:	89 81       	ldd	r24, Y+1	; 0x01
    590c:	88 23       	and	r24, r24
    590e:	09 f4       	brne	.+2      	; 0x5912 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x276>
    5910:	42 c0       	rjmp	.+132    	; 0x5996 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5912:	89 81       	ldd	r24, Y+1	; 0x01
    5914:	87 70       	andi	r24, 0x07	; 7
    5916:	8c 83       	std	Y+4, r24	; 0x04
    5918:	8c 81       	ldd	r24, Y+4	; 0x04
    591a:	88 2f       	mov	r24, r24
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	86 5b       	subi	r24, 0xB6	; 182
    5920:	94 4f       	sbci	r25, 0xF4	; 244
    5922:	9c 87       	std	Y+12, r25	; 0x0c
    5924:	8b 87       	std	Y+11, r24	; 0x0b
    5926:	8b 85       	ldd	r24, Y+11	; 0x0b
    5928:	9c 85       	ldd	r25, Y+12	; 0x0c
    592a:	fc 01       	movw	r30, r24
    592c:	84 91       	lpm	r24, Z
    592e:	8d 87       	std	Y+13, r24	; 0x0d
    5930:	8d 85       	ldd	r24, Y+13	; 0x0d
    5932:	8e 87       	std	Y+14, r24	; 0x0e
    5934:	8f 89       	ldd	r24, Y+23	; 0x17
    5936:	98 8d       	ldd	r25, Y+24	; 0x18
    5938:	81 30       	cpi	r24, 0x01	; 1
    593a:	91 05       	cpc	r25, r1
    593c:	31 f0       	breq	.+12     	; 0x594a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2ae>
    593e:	81 30       	cpi	r24, 0x01	; 1
    5940:	91 05       	cpc	r25, r1
    5942:	78 f0       	brcs	.+30     	; 0x5962 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2c6>
    5944:	02 97       	sbiw	r24, 0x02	; 2
    5946:	d9 f0       	breq	.+54     	; 0x597e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2e2>
    5948:	26 c0       	rjmp	.+76     	; 0x5996 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    594a:	8a 81       	ldd	r24, Y+2	; 0x02
    594c:	9b 81       	ldd	r25, Y+3	; 0x03
    594e:	fc 01       	movw	r30, r24
    5950:	90 81       	ld	r25, Z
    5952:	8e 85       	ldd	r24, Y+14	; 0x0e
    5954:	29 2f       	mov	r18, r25
    5956:	28 2b       	or	r18, r24
    5958:	8a 81       	ldd	r24, Y+2	; 0x02
    595a:	9b 81       	ldd	r25, Y+3	; 0x03
    595c:	fc 01       	movw	r30, r24
    595e:	20 83       	st	Z, r18
    5960:	1a c0       	rjmp	.+52     	; 0x5996 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5962:	8a 81       	ldd	r24, Y+2	; 0x02
    5964:	9b 81       	ldd	r25, Y+3	; 0x03
    5966:	fc 01       	movw	r30, r24
    5968:	80 81       	ld	r24, Z
    596a:	98 2f       	mov	r25, r24
    596c:	8e 85       	ldd	r24, Y+14	; 0x0e
    596e:	80 95       	com	r24
    5970:	89 23       	and	r24, r25
    5972:	28 2f       	mov	r18, r24
    5974:	8a 81       	ldd	r24, Y+2	; 0x02
    5976:	9b 81       	ldd	r25, Y+3	; 0x03
    5978:	fc 01       	movw	r30, r24
    597a:	20 83       	st	Z, r18
    597c:	0c c0       	rjmp	.+24     	; 0x5996 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    597e:	8a 81       	ldd	r24, Y+2	; 0x02
    5980:	9b 81       	ldd	r25, Y+3	; 0x03
    5982:	fc 01       	movw	r30, r24
    5984:	90 81       	ld	r25, Z
    5986:	8e 85       	ldd	r24, Y+14	; 0x0e
    5988:	29 2f       	mov	r18, r25
    598a:	28 27       	eor	r18, r24
    598c:	8a 81       	ldd	r24, Y+2	; 0x02
    598e:	9b 81       	ldd	r25, Y+3	; 0x03
    5990:	fc 01       	movw	r30, r24
    5992:	20 83       	st	Z, r18
    5994:	00 00       	nop
    5996:	00 00       	nop
    5998:	68 96       	adiw	r28, 0x18	; 24
    599a:	0f b6       	in	r0, 0x3f	; 63
    599c:	f8 94       	cli
    599e:	de bf       	out	0x3e, r29	; 62
    59a0:	0f be       	out	0x3f, r0	; 63
    59a2:	cd bf       	out	0x3d, r28	; 61
    59a4:	df 91       	pop	r29
    59a6:	cf 91       	pop	r28
    59a8:	1f 91       	pop	r17
    59aa:	0f 91       	pop	r16
    59ac:	08 95       	ret

000059ae <_ZN16Adafruit_SSD13067displayEv>:
    59ae:	cf 93       	push	r28
    59b0:	df 93       	push	r29
    59b2:	cd b7       	in	r28, 0x3d	; 61
    59b4:	de b7       	in	r29, 0x3e	; 62
    59b6:	2c 97       	sbiw	r28, 0x0c	; 12
    59b8:	0f b6       	in	r0, 0x3f	; 63
    59ba:	f8 94       	cli
    59bc:	de bf       	out	0x3e, r29	; 62
    59be:	0f be       	out	0x3f, r0	; 63
    59c0:	cd bf       	out	0x3d, r28	; 61
    59c2:	9c 87       	std	Y+12, r25	; 0x0c
    59c4:	8b 87       	std	Y+11, r24	; 0x0b
    59c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    59c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    59ca:	fc 01       	movw	r30, r24
    59cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    59ce:	96 8d       	ldd	r25, Z+30	; 0x1e
    59d0:	89 2b       	or	r24, r25
    59d2:	91 f0       	breq	.+36     	; 0x59f8 <_ZN16Adafruit_SSD13067displayEv+0x4a>
    59d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    59d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    59d8:	fc 01       	movw	r30, r24
    59da:	85 a9       	ldd	r24, Z+53	; 0x35
    59dc:	96 a9       	ldd	r25, Z+54	; 0x36
    59de:	a7 a9       	ldd	r26, Z+55	; 0x37
    59e0:	b0 ad       	ldd	r27, Z+56	; 0x38
    59e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    59e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    59e6:	f9 01       	movw	r30, r18
    59e8:	25 8d       	ldd	r18, Z+29	; 0x1d
    59ea:	36 8d       	ldd	r19, Z+30	; 0x1e
    59ec:	ac 01       	movw	r20, r24
    59ee:	bd 01       	movw	r22, r26
    59f0:	c9 01       	movw	r24, r18
    59f2:	0e 94 fa 54 	call	0xa9f4	; 0xa9f4 <_ZN7TwoWire8setClockEm>
    59f6:	23 c0       	rjmp	.+70     	; 0x5a3e <_ZN16Adafruit_SSD13067displayEv+0x90>
    59f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    59fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    59fc:	fc 01       	movw	r30, r24
    59fe:	83 8d       	ldd	r24, Z+27	; 0x1b
    5a00:	94 8d       	ldd	r25, Z+28	; 0x1c
    5a02:	89 2b       	or	r24, r25
    5a04:	39 f0       	breq	.+14     	; 0x5a14 <_ZN16Adafruit_SSD13067displayEv+0x66>
    5a06:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a08:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	86 ad       	ldd	r24, Z+62	; 0x3e
    5a0e:	97 ad       	ldd	r25, Z+63	; 0x3f
    5a10:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5a14:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a16:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a18:	fc 01       	movw	r30, r24
    5a1a:	87 a5       	ldd	r24, Z+47	; 0x2f
    5a1c:	90 a9       	ldd	r25, Z+48	; 0x30
    5a1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a20:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a22:	f9 01       	movw	r30, r18
    5a24:	27 a5       	ldd	r18, Z+47	; 0x2f
    5a26:	30 a9       	ldd	r19, Z+48	; 0x30
    5a28:	f9 01       	movw	r30, r18
    5a2a:	20 81       	ld	r18, Z
    5a2c:	42 2f       	mov	r20, r18
    5a2e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a30:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a32:	f9 01       	movw	r30, r18
    5a34:	24 a9       	ldd	r18, Z+52	; 0x34
    5a36:	20 95       	com	r18
    5a38:	24 23       	and	r18, r20
    5a3a:	fc 01       	movw	r30, r24
    5a3c:	20 83       	st	Z, r18
    5a3e:	25 e0       	ldi	r18, 0x05	; 5
    5a40:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a42:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a44:	42 2f       	mov	r20, r18
    5a46:	62 e5       	ldi	r22, 0x52	; 82
    5a48:	7b e0       	ldi	r23, 0x0B	; 11
    5a4a:	0e 94 d6 21 	call	0x43ac	; 0x43ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    5a4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a50:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a52:	fc 01       	movw	r30, r24
    5a54:	84 81       	ldd	r24, Z+4	; 0x04
    5a56:	95 81       	ldd	r25, Z+5	; 0x05
    5a58:	2f ef       	ldi	r18, 0xFF	; 255
    5a5a:	28 0f       	add	r18, r24
    5a5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a60:	62 2f       	mov	r22, r18
    5a62:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5a66:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a68:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a6a:	fc 01       	movw	r30, r24
    5a6c:	24 81       	ldd	r18, Z+4	; 0x04
    5a6e:	35 81       	ldd	r19, Z+5	; 0x05
    5a70:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a72:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a74:	fc 01       	movw	r30, r24
    5a76:	86 81       	ldd	r24, Z+6	; 0x06
    5a78:	97 81       	ldd	r25, Z+7	; 0x07
    5a7a:	07 96       	adiw	r24, 0x07	; 7
    5a7c:	99 23       	and	r25, r25
    5a7e:	0c f4       	brge	.+2      	; 0x5a82 <_ZN16Adafruit_SSD13067displayEv+0xd4>
    5a80:	07 96       	adiw	r24, 0x07	; 7
    5a82:	95 95       	asr	r25
    5a84:	87 95       	ror	r24
    5a86:	95 95       	asr	r25
    5a88:	87 95       	ror	r24
    5a8a:	95 95       	asr	r25
    5a8c:	87 95       	ror	r24
    5a8e:	ac 01       	movw	r20, r24
    5a90:	24 9f       	mul	r18, r20
    5a92:	c0 01       	movw	r24, r0
    5a94:	25 9f       	mul	r18, r21
    5a96:	90 0d       	add	r25, r0
    5a98:	34 9f       	mul	r19, r20
    5a9a:	90 0d       	add	r25, r0
    5a9c:	11 24       	eor	r1, r1
    5a9e:	9a 83       	std	Y+2, r25	; 0x02
    5aa0:	89 83       	std	Y+1, r24	; 0x01
    5aa2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5aa4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5aa6:	fc 01       	movw	r30, r24
    5aa8:	87 8d       	ldd	r24, Z+31	; 0x1f
    5aaa:	90 a1       	ldd	r25, Z+32	; 0x20
    5aac:	9c 83       	std	Y+4, r25	; 0x04
    5aae:	8b 83       	std	Y+3, r24	; 0x03
    5ab0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ab2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ab8:	96 8d       	ldd	r25, Z+30	; 0x1e
    5aba:	89 2b       	or	r24, r25
    5abc:	09 f4       	brne	.+2      	; 0x5ac0 <_ZN16Adafruit_SSD13067displayEv+0x112>
    5abe:	8f c0       	rjmp	.+286    	; 0x5bde <_ZN16Adafruit_SSD13067displayEv+0x230>
    5ac0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ac2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ac4:	fc 01       	movw	r30, r24
    5ac6:	81 a1       	ldd	r24, Z+33	; 0x21
    5ac8:	28 2f       	mov	r18, r24
    5aca:	88 0f       	add	r24, r24
    5acc:	33 0b       	sbc	r19, r19
    5ace:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ad0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ad2:	fc 01       	movw	r30, r24
    5ad4:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ad6:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ad8:	b9 01       	movw	r22, r18
    5ada:	0e 94 e7 55 	call	0xabce	; 0xabce <_ZN7TwoWire17beginTransmissionEi>
    5ade:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ae0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ae2:	fc 01       	movw	r30, r24
    5ae4:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ae6:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ae8:	fc 01       	movw	r30, r24
    5aea:	80 81       	ld	r24, Z
    5aec:	91 81       	ldd	r25, Z+1	; 0x01
    5aee:	fc 01       	movw	r30, r24
    5af0:	20 81       	ld	r18, Z
    5af2:	31 81       	ldd	r19, Z+1	; 0x01
    5af4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5af6:	9c 85       	ldd	r25, Y+12	; 0x0c
    5af8:	fc 01       	movw	r30, r24
    5afa:	85 8d       	ldd	r24, Z+29	; 0x1d
    5afc:	96 8d       	ldd	r25, Z+30	; 0x1e
    5afe:	60 e4       	ldi	r22, 0x40	; 64
    5b00:	f9 01       	movw	r30, r18
    5b02:	19 95       	eicall
    5b04:	81 e0       	ldi	r24, 0x01	; 1
    5b06:	90 e0       	ldi	r25, 0x00	; 0
    5b08:	9e 83       	std	Y+6, r25	; 0x06
    5b0a:	8d 83       	std	Y+5, r24	; 0x05
    5b0c:	89 81       	ldd	r24, Y+1	; 0x01
    5b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b10:	9c 01       	movw	r18, r24
    5b12:	21 50       	subi	r18, 0x01	; 1
    5b14:	31 09       	sbc	r19, r1
    5b16:	3a 83       	std	Y+2, r19	; 0x02
    5b18:	29 83       	std	Y+1, r18	; 0x01
    5b1a:	21 e0       	ldi	r18, 0x01	; 1
    5b1c:	89 2b       	or	r24, r25
    5b1e:	09 f4       	brne	.+2      	; 0x5b22 <_ZN16Adafruit_SSD13067displayEv+0x174>
    5b20:	20 e0       	ldi	r18, 0x00	; 0
    5b22:	22 23       	and	r18, r18
    5b24:	09 f4       	brne	.+2      	; 0x5b28 <_ZN16Adafruit_SSD13067displayEv+0x17a>
    5b26:	53 c0       	rjmp	.+166    	; 0x5bce <_ZN16Adafruit_SSD13067displayEv+0x220>
    5b28:	8d 81       	ldd	r24, Y+5	; 0x05
    5b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b2c:	80 97       	sbiw	r24, 0x20	; 32
    5b2e:	68 f1       	brcs	.+90     	; 0x5b8a <_ZN16Adafruit_SSD13067displayEv+0x1dc>
    5b30:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b32:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b34:	fc 01       	movw	r30, r24
    5b36:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b38:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b3a:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>
    5b3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b40:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b42:	fc 01       	movw	r30, r24
    5b44:	81 a1       	ldd	r24, Z+33	; 0x21
    5b46:	28 2f       	mov	r18, r24
    5b48:	88 0f       	add	r24, r24
    5b4a:	33 0b       	sbc	r19, r19
    5b4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b50:	fc 01       	movw	r30, r24
    5b52:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b54:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b56:	b9 01       	movw	r22, r18
    5b58:	0e 94 e7 55 	call	0xabce	; 0xabce <_ZN7TwoWire17beginTransmissionEi>
    5b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b60:	fc 01       	movw	r30, r24
    5b62:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b64:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b66:	fc 01       	movw	r30, r24
    5b68:	80 81       	ld	r24, Z
    5b6a:	91 81       	ldd	r25, Z+1	; 0x01
    5b6c:	fc 01       	movw	r30, r24
    5b6e:	20 81       	ld	r18, Z
    5b70:	31 81       	ldd	r19, Z+1	; 0x01
    5b72:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b74:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b76:	fc 01       	movw	r30, r24
    5b78:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b7a:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b7c:	60 e4       	ldi	r22, 0x40	; 64
    5b7e:	f9 01       	movw	r30, r18
    5b80:	19 95       	eicall
    5b82:	81 e0       	ldi	r24, 0x01	; 1
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	9e 83       	std	Y+6, r25	; 0x06
    5b88:	8d 83       	std	Y+5, r24	; 0x05
    5b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b8e:	fc 01       	movw	r30, r24
    5b90:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b92:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b94:	fc 01       	movw	r30, r24
    5b96:	80 81       	ld	r24, Z
    5b98:	91 81       	ldd	r25, Z+1	; 0x01
    5b9a:	fc 01       	movw	r30, r24
    5b9c:	20 81       	ld	r18, Z
    5b9e:	31 81       	ldd	r19, Z+1	; 0x01
    5ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    5ba4:	ac 01       	movw	r20, r24
    5ba6:	4f 5f       	subi	r20, 0xFF	; 255
    5ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    5baa:	5c 83       	std	Y+4, r21	; 0x04
    5bac:	4b 83       	std	Y+3, r20	; 0x03
    5bae:	fc 01       	movw	r30, r24
    5bb0:	40 81       	ld	r20, Z
    5bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bb6:	fc 01       	movw	r30, r24
    5bb8:	85 8d       	ldd	r24, Z+29	; 0x1d
    5bba:	96 8d       	ldd	r25, Z+30	; 0x1e
    5bbc:	64 2f       	mov	r22, r20
    5bbe:	f9 01       	movw	r30, r18
    5bc0:	19 95       	eicall
    5bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    5bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    5bc6:	01 96       	adiw	r24, 0x01	; 1
    5bc8:	9e 83       	std	Y+6, r25	; 0x06
    5bca:	8d 83       	std	Y+5, r24	; 0x05
    5bcc:	9f cf       	rjmp	.-194    	; 0x5b0c <_ZN16Adafruit_SSD13067displayEv+0x15e>
    5bce:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bd2:	fc 01       	movw	r30, r24
    5bd4:	85 8d       	ldd	r24, Z+29	; 0x1d
    5bd6:	96 8d       	ldd	r25, Z+30	; 0x1e
    5bd8:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>
    5bdc:	9c c0       	rjmp	.+312    	; 0x5d16 <_ZN16Adafruit_SSD13067displayEv+0x368>
    5bde:	8b 85       	ldd	r24, Y+11	; 0x0b
    5be0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5be2:	fc 01       	movw	r30, r24
    5be4:	85 a5       	ldd	r24, Z+45	; 0x2d
    5be6:	96 a5       	ldd	r25, Z+46	; 0x2e
    5be8:	2b 85       	ldd	r18, Y+11	; 0x0b
    5bea:	3c 85       	ldd	r19, Y+12	; 0x0c
    5bec:	f9 01       	movw	r30, r18
    5bee:	25 a5       	ldd	r18, Z+45	; 0x2d
    5bf0:	36 a5       	ldd	r19, Z+46	; 0x2e
    5bf2:	f9 01       	movw	r30, r18
    5bf4:	40 81       	ld	r20, Z
    5bf6:	2b 85       	ldd	r18, Y+11	; 0x0b
    5bf8:	3c 85       	ldd	r19, Y+12	; 0x0c
    5bfa:	f9 01       	movw	r30, r18
    5bfc:	23 a9       	ldd	r18, Z+51	; 0x33
    5bfe:	24 2b       	or	r18, r20
    5c00:	fc 01       	movw	r30, r24
    5c02:	20 83       	st	Z, r18
    5c04:	89 81       	ldd	r24, Y+1	; 0x01
    5c06:	9a 81       	ldd	r25, Y+2	; 0x02
    5c08:	9c 01       	movw	r18, r24
    5c0a:	21 50       	subi	r18, 0x01	; 1
    5c0c:	31 09       	sbc	r19, r1
    5c0e:	3a 83       	std	Y+2, r19	; 0x02
    5c10:	29 83       	std	Y+1, r18	; 0x01
    5c12:	21 e0       	ldi	r18, 0x01	; 1
    5c14:	89 2b       	or	r24, r25
    5c16:	09 f4       	brne	.+2      	; 0x5c1a <_ZN16Adafruit_SSD13067displayEv+0x26c>
    5c18:	20 e0       	ldi	r18, 0x00	; 0
    5c1a:	22 23       	and	r18, r18
    5c1c:	09 f4       	brne	.+2      	; 0x5c20 <_ZN16Adafruit_SSD13067displayEv+0x272>
    5c1e:	7b c0       	rjmp	.+246    	; 0x5d16 <_ZN16Adafruit_SSD13067displayEv+0x368>
    5c20:	8b 81       	ldd	r24, Y+3	; 0x03
    5c22:	9c 81       	ldd	r25, Y+4	; 0x04
    5c24:	9c 01       	movw	r18, r24
    5c26:	2f 5f       	subi	r18, 0xFF	; 255
    5c28:	3f 4f       	sbci	r19, 0xFF	; 255
    5c2a:	3c 83       	std	Y+4, r19	; 0x04
    5c2c:	2b 83       	std	Y+3, r18	; 0x03
    5c2e:	fc 01       	movw	r30, r24
    5c30:	20 81       	ld	r18, Z
    5c32:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c34:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c36:	98 87       	std	Y+8, r25	; 0x08
    5c38:	8f 83       	std	Y+7, r24	; 0x07
    5c3a:	29 87       	std	Y+9, r18	; 0x09
    5c3c:	8f 81       	ldd	r24, Y+7	; 0x07
    5c3e:	98 85       	ldd	r25, Y+8	; 0x08
    5c40:	fc 01       	movw	r30, r24
    5c42:	83 8d       	ldd	r24, Z+27	; 0x1b
    5c44:	94 8d       	ldd	r25, Z+28	; 0x1c
    5c46:	89 2b       	or	r24, r25
    5c48:	21 f0       	breq	.+8      	; 0x5c52 <_ZN16Adafruit_SSD13067displayEv+0x2a4>
    5c4a:	89 85       	ldd	r24, Y+9	; 0x09
    5c4c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    5c50:	d9 cf       	rjmp	.-78     	; 0x5c04 <_ZN16Adafruit_SSD13067displayEv+0x256>
    5c52:	80 e8       	ldi	r24, 0x80	; 128
    5c54:	8a 87       	std	Y+10, r24	; 0x0a
    5c56:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c58:	88 23       	and	r24, r24
    5c5a:	a1 f2       	breq	.-88     	; 0x5c04 <_ZN16Adafruit_SSD13067displayEv+0x256>
    5c5c:	99 85       	ldd	r25, Y+9	; 0x09
    5c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c60:	89 23       	and	r24, r25
    5c62:	88 23       	and	r24, r24
    5c64:	a1 f0       	breq	.+40     	; 0x5c8e <_ZN16Adafruit_SSD13067displayEv+0x2e0>
    5c66:	8f 81       	ldd	r24, Y+7	; 0x07
    5c68:	98 85       	ldd	r25, Y+8	; 0x08
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	81 a5       	ldd	r24, Z+41	; 0x29
    5c6e:	92 a5       	ldd	r25, Z+42	; 0x2a
    5c70:	2f 81       	ldd	r18, Y+7	; 0x07
    5c72:	38 85       	ldd	r19, Y+8	; 0x08
    5c74:	f9 01       	movw	r30, r18
    5c76:	21 a5       	ldd	r18, Z+41	; 0x29
    5c78:	32 a5       	ldd	r19, Z+42	; 0x2a
    5c7a:	f9 01       	movw	r30, r18
    5c7c:	40 81       	ld	r20, Z
    5c7e:	2f 81       	ldd	r18, Y+7	; 0x07
    5c80:	38 85       	ldd	r19, Y+8	; 0x08
    5c82:	f9 01       	movw	r30, r18
    5c84:	21 a9       	ldd	r18, Z+49	; 0x31
    5c86:	24 2b       	or	r18, r20
    5c88:	fc 01       	movw	r30, r24
    5c8a:	20 83       	st	Z, r18
    5c8c:	15 c0       	rjmp	.+42     	; 0x5cb8 <_ZN16Adafruit_SSD13067displayEv+0x30a>
    5c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    5c90:	98 85       	ldd	r25, Y+8	; 0x08
    5c92:	fc 01       	movw	r30, r24
    5c94:	81 a5       	ldd	r24, Z+41	; 0x29
    5c96:	92 a5       	ldd	r25, Z+42	; 0x2a
    5c98:	2f 81       	ldd	r18, Y+7	; 0x07
    5c9a:	38 85       	ldd	r19, Y+8	; 0x08
    5c9c:	f9 01       	movw	r30, r18
    5c9e:	21 a5       	ldd	r18, Z+41	; 0x29
    5ca0:	32 a5       	ldd	r19, Z+42	; 0x2a
    5ca2:	f9 01       	movw	r30, r18
    5ca4:	20 81       	ld	r18, Z
    5ca6:	42 2f       	mov	r20, r18
    5ca8:	2f 81       	ldd	r18, Y+7	; 0x07
    5caa:	38 85       	ldd	r19, Y+8	; 0x08
    5cac:	f9 01       	movw	r30, r18
    5cae:	21 a9       	ldd	r18, Z+49	; 0x31
    5cb0:	20 95       	com	r18
    5cb2:	24 23       	and	r18, r20
    5cb4:	fc 01       	movw	r30, r24
    5cb6:	20 83       	st	Z, r18
    5cb8:	8f 81       	ldd	r24, Y+7	; 0x07
    5cba:	98 85       	ldd	r25, Y+8	; 0x08
    5cbc:	fc 01       	movw	r30, r24
    5cbe:	83 a5       	ldd	r24, Z+43	; 0x2b
    5cc0:	94 a5       	ldd	r25, Z+44	; 0x2c
    5cc2:	2f 81       	ldd	r18, Y+7	; 0x07
    5cc4:	38 85       	ldd	r19, Y+8	; 0x08
    5cc6:	f9 01       	movw	r30, r18
    5cc8:	23 a5       	ldd	r18, Z+43	; 0x2b
    5cca:	34 a5       	ldd	r19, Z+44	; 0x2c
    5ccc:	f9 01       	movw	r30, r18
    5cce:	40 81       	ld	r20, Z
    5cd0:	2f 81       	ldd	r18, Y+7	; 0x07
    5cd2:	38 85       	ldd	r19, Y+8	; 0x08
    5cd4:	f9 01       	movw	r30, r18
    5cd6:	22 a9       	ldd	r18, Z+50	; 0x32
    5cd8:	24 2b       	or	r18, r20
    5cda:	fc 01       	movw	r30, r24
    5cdc:	20 83       	st	Z, r18
    5cde:	8f 81       	ldd	r24, Y+7	; 0x07
    5ce0:	98 85       	ldd	r25, Y+8	; 0x08
    5ce2:	fc 01       	movw	r30, r24
    5ce4:	83 a5       	ldd	r24, Z+43	; 0x2b
    5ce6:	94 a5       	ldd	r25, Z+44	; 0x2c
    5ce8:	2f 81       	ldd	r18, Y+7	; 0x07
    5cea:	38 85       	ldd	r19, Y+8	; 0x08
    5cec:	f9 01       	movw	r30, r18
    5cee:	23 a5       	ldd	r18, Z+43	; 0x2b
    5cf0:	34 a5       	ldd	r19, Z+44	; 0x2c
    5cf2:	f9 01       	movw	r30, r18
    5cf4:	20 81       	ld	r18, Z
    5cf6:	42 2f       	mov	r20, r18
    5cf8:	2f 81       	ldd	r18, Y+7	; 0x07
    5cfa:	38 85       	ldd	r19, Y+8	; 0x08
    5cfc:	f9 01       	movw	r30, r18
    5cfe:	22 a9       	ldd	r18, Z+50	; 0x32
    5d00:	20 95       	com	r18
    5d02:	24 23       	and	r18, r20
    5d04:	fc 01       	movw	r30, r24
    5d06:	20 83       	st	Z, r18
    5d08:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d0a:	88 2f       	mov	r24, r24
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	95 95       	asr	r25
    5d10:	87 95       	ror	r24
    5d12:	8a 87       	std	Y+10, r24	; 0x0a
    5d14:	a0 cf       	rjmp	.-192    	; 0x5c56 <_ZN16Adafruit_SSD13067displayEv+0x2a8>
    5d16:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d18:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d1a:	fc 01       	movw	r30, r24
    5d1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    5d1e:	96 8d       	ldd	r25, Z+30	; 0x1e
    5d20:	89 2b       	or	r24, r25
    5d22:	91 f0       	breq	.+36     	; 0x5d48 <_ZN16Adafruit_SSD13067displayEv+0x39a>
    5d24:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d26:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d28:	fc 01       	movw	r30, r24
    5d2a:	81 ad       	ldd	r24, Z+57	; 0x39
    5d2c:	92 ad       	ldd	r25, Z+58	; 0x3a
    5d2e:	a3 ad       	ldd	r26, Z+59	; 0x3b
    5d30:	b4 ad       	ldd	r27, Z+60	; 0x3c
    5d32:	2b 85       	ldd	r18, Y+11	; 0x0b
    5d34:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d36:	f9 01       	movw	r30, r18
    5d38:	25 8d       	ldd	r18, Z+29	; 0x1d
    5d3a:	36 8d       	ldd	r19, Z+30	; 0x1e
    5d3c:	ac 01       	movw	r20, r24
    5d3e:	bd 01       	movw	r22, r26
    5d40:	c9 01       	movw	r24, r18
    5d42:	0e 94 fa 54 	call	0xa9f4	; 0xa9f4 <_ZN7TwoWire8setClockEm>
    5d46:	1c c0       	rjmp	.+56     	; 0x5d80 <_ZN16Adafruit_SSD13067displayEv+0x3d2>
    5d48:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d4c:	fc 01       	movw	r30, r24
    5d4e:	87 a5       	ldd	r24, Z+47	; 0x2f
    5d50:	90 a9       	ldd	r25, Z+48	; 0x30
    5d52:	2b 85       	ldd	r18, Y+11	; 0x0b
    5d54:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d56:	f9 01       	movw	r30, r18
    5d58:	27 a5       	ldd	r18, Z+47	; 0x2f
    5d5a:	30 a9       	ldd	r19, Z+48	; 0x30
    5d5c:	f9 01       	movw	r30, r18
    5d5e:	40 81       	ld	r20, Z
    5d60:	2b 85       	ldd	r18, Y+11	; 0x0b
    5d62:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d64:	f9 01       	movw	r30, r18
    5d66:	24 a9       	ldd	r18, Z+52	; 0x34
    5d68:	24 2b       	or	r18, r20
    5d6a:	fc 01       	movw	r30, r24
    5d6c:	20 83       	st	Z, r18
    5d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d70:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d72:	fc 01       	movw	r30, r24
    5d74:	83 8d       	ldd	r24, Z+27	; 0x1b
    5d76:	94 8d       	ldd	r25, Z+28	; 0x1c
    5d78:	89 2b       	or	r24, r25
    5d7a:	11 f0       	breq	.+4      	; 0x5d80 <_ZN16Adafruit_SSD13067displayEv+0x3d2>
    5d7c:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN8SPIClass14endTransactionEv>
    5d80:	00 00       	nop
    5d82:	2c 96       	adiw	r28, 0x0c	; 12
    5d84:	0f b6       	in	r0, 0x3f	; 63
    5d86:	f8 94       	cli
    5d88:	de bf       	out	0x3e, r29	; 62
    5d8a:	0f be       	out	0x3f, r0	; 63
    5d8c:	cd bf       	out	0x3d, r28	; 61
    5d8e:	df 91       	pop	r29
    5d90:	cf 91       	pop	r28
    5d92:	08 95       	ret

00005d94 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    5d94:	cf 93       	push	r28
    5d96:	df 93       	push	r29
    5d98:	00 d0       	rcall	.+0      	; 0x5d9a <_ZN16Adafruit_SSD130613invertDisplayEb+0x6>
    5d9a:	cd b7       	in	r28, 0x3d	; 61
    5d9c:	de b7       	in	r29, 0x3e	; 62
    5d9e:	9a 83       	std	Y+2, r25	; 0x02
    5da0:	89 83       	std	Y+1, r24	; 0x01
    5da2:	6b 83       	std	Y+3, r22	; 0x03
  TRANSACTION_START
    5da4:	89 81       	ldd	r24, Y+1	; 0x01
    5da6:	9a 81       	ldd	r25, Y+2	; 0x02
    5da8:	fc 01       	movw	r30, r24
    5daa:	85 8d       	ldd	r24, Z+29	; 0x1d
    5dac:	96 8d       	ldd	r25, Z+30	; 0x1e
    5dae:	89 2b       	or	r24, r25
    5db0:	91 f0       	breq	.+36     	; 0x5dd6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x42>
    5db2:	89 81       	ldd	r24, Y+1	; 0x01
    5db4:	9a 81       	ldd	r25, Y+2	; 0x02
    5db6:	fc 01       	movw	r30, r24
    5db8:	85 a9       	ldd	r24, Z+53	; 0x35
    5dba:	96 a9       	ldd	r25, Z+54	; 0x36
    5dbc:	a7 a9       	ldd	r26, Z+55	; 0x37
    5dbe:	b0 ad       	ldd	r27, Z+56	; 0x38
    5dc0:	29 81       	ldd	r18, Y+1	; 0x01
    5dc2:	3a 81       	ldd	r19, Y+2	; 0x02
    5dc4:	f9 01       	movw	r30, r18
    5dc6:	25 8d       	ldd	r18, Z+29	; 0x1d
    5dc8:	36 8d       	ldd	r19, Z+30	; 0x1e
    5dca:	ac 01       	movw	r20, r24
    5dcc:	bd 01       	movw	r22, r26
    5dce:	c9 01       	movw	r24, r18
    5dd0:	0e 94 fa 54 	call	0xa9f4	; 0xa9f4 <_ZN7TwoWire8setClockEm>
    5dd4:	23 c0       	rjmp	.+70     	; 0x5e1c <_ZN16Adafruit_SSD130613invertDisplayEb+0x88>
    5dd6:	89 81       	ldd	r24, Y+1	; 0x01
    5dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    5dda:	fc 01       	movw	r30, r24
    5ddc:	83 8d       	ldd	r24, Z+27	; 0x1b
    5dde:	94 8d       	ldd	r25, Z+28	; 0x1c
    5de0:	89 2b       	or	r24, r25
    5de2:	39 f0       	breq	.+14     	; 0x5df2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
    5de4:	89 81       	ldd	r24, Y+1	; 0x01
    5de6:	9a 81       	ldd	r25, Y+2	; 0x02
    5de8:	fc 01       	movw	r30, r24
    5dea:	86 ad       	ldd	r24, Z+62	; 0x3e
    5dec:	97 ad       	ldd	r25, Z+63	; 0x3f
    5dee:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5df2:	89 81       	ldd	r24, Y+1	; 0x01
    5df4:	9a 81       	ldd	r25, Y+2	; 0x02
    5df6:	fc 01       	movw	r30, r24
    5df8:	87 a5       	ldd	r24, Z+47	; 0x2f
    5dfa:	90 a9       	ldd	r25, Z+48	; 0x30
    5dfc:	29 81       	ldd	r18, Y+1	; 0x01
    5dfe:	3a 81       	ldd	r19, Y+2	; 0x02
    5e00:	f9 01       	movw	r30, r18
    5e02:	27 a5       	ldd	r18, Z+47	; 0x2f
    5e04:	30 a9       	ldd	r19, Z+48	; 0x30
    5e06:	f9 01       	movw	r30, r18
    5e08:	20 81       	ld	r18, Z
    5e0a:	42 2f       	mov	r20, r18
    5e0c:	29 81       	ldd	r18, Y+1	; 0x01
    5e0e:	3a 81       	ldd	r19, Y+2	; 0x02
    5e10:	f9 01       	movw	r30, r18
    5e12:	24 a9       	ldd	r18, Z+52	; 0x34
    5e14:	20 95       	com	r18
    5e16:	24 23       	and	r18, r20
    5e18:	fc 01       	movw	r30, r24
    5e1a:	20 83       	st	Z, r18
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    5e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e1e:	88 23       	and	r24, r24
    5e20:	11 f0       	breq	.+4      	; 0x5e26 <_ZN16Adafruit_SSD130613invertDisplayEb+0x92>
    5e22:	27 ea       	ldi	r18, 0xA7	; 167
    5e24:	01 c0       	rjmp	.+2      	; 0x5e28 <_ZN16Adafruit_SSD130613invertDisplayEb+0x94>
    5e26:	26 ea       	ldi	r18, 0xA6	; 166
    5e28:	89 81       	ldd	r24, Y+1	; 0x01
    5e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e2c:	62 2f       	mov	r22, r18
    5e2e:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
    5e32:	89 81       	ldd	r24, Y+1	; 0x01
    5e34:	9a 81       	ldd	r25, Y+2	; 0x02
    5e36:	fc 01       	movw	r30, r24
    5e38:	85 8d       	ldd	r24, Z+29	; 0x1d
    5e3a:	96 8d       	ldd	r25, Z+30	; 0x1e
    5e3c:	89 2b       	or	r24, r25
    5e3e:	91 f0       	breq	.+36     	; 0x5e64 <_ZN16Adafruit_SSD130613invertDisplayEb+0xd0>
    5e40:	89 81       	ldd	r24, Y+1	; 0x01
    5e42:	9a 81       	ldd	r25, Y+2	; 0x02
    5e44:	fc 01       	movw	r30, r24
    5e46:	81 ad       	ldd	r24, Z+57	; 0x39
    5e48:	92 ad       	ldd	r25, Z+58	; 0x3a
    5e4a:	a3 ad       	ldd	r26, Z+59	; 0x3b
    5e4c:	b4 ad       	ldd	r27, Z+60	; 0x3c
    5e4e:	29 81       	ldd	r18, Y+1	; 0x01
    5e50:	3a 81       	ldd	r19, Y+2	; 0x02
    5e52:	f9 01       	movw	r30, r18
    5e54:	25 8d       	ldd	r18, Z+29	; 0x1d
    5e56:	36 8d       	ldd	r19, Z+30	; 0x1e
    5e58:	ac 01       	movw	r20, r24
    5e5a:	bd 01       	movw	r22, r26
    5e5c:	c9 01       	movw	r24, r18
    5e5e:	0e 94 fa 54 	call	0xa9f4	; 0xa9f4 <_ZN7TwoWire8setClockEm>
}
    5e62:	1c c0       	rjmp	.+56     	; 0x5e9c <_ZN16Adafruit_SSD130613invertDisplayEb+0x108>
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
    5e64:	89 81       	ldd	r24, Y+1	; 0x01
    5e66:	9a 81       	ldd	r25, Y+2	; 0x02
    5e68:	fc 01       	movw	r30, r24
    5e6a:	87 a5       	ldd	r24, Z+47	; 0x2f
    5e6c:	90 a9       	ldd	r25, Z+48	; 0x30
    5e6e:	29 81       	ldd	r18, Y+1	; 0x01
    5e70:	3a 81       	ldd	r19, Y+2	; 0x02
    5e72:	f9 01       	movw	r30, r18
    5e74:	27 a5       	ldd	r18, Z+47	; 0x2f
    5e76:	30 a9       	ldd	r19, Z+48	; 0x30
    5e78:	f9 01       	movw	r30, r18
    5e7a:	40 81       	ld	r20, Z
    5e7c:	29 81       	ldd	r18, Y+1	; 0x01
    5e7e:	3a 81       	ldd	r19, Y+2	; 0x02
    5e80:	f9 01       	movw	r30, r18
    5e82:	24 a9       	ldd	r18, Z+52	; 0x34
    5e84:	24 2b       	or	r18, r20
    5e86:	fc 01       	movw	r30, r24
    5e88:	20 83       	st	Z, r18
    5e8a:	89 81       	ldd	r24, Y+1	; 0x01
    5e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e8e:	fc 01       	movw	r30, r24
    5e90:	83 8d       	ldd	r24, Z+27	; 0x1b
    5e92:	94 8d       	ldd	r25, Z+28	; 0x1c
    5e94:	89 2b       	or	r24, r25
    5e96:	11 f0       	breq	.+4      	; 0x5e9c <_ZN16Adafruit_SSD130613invertDisplayEb+0x108>
    5e98:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN8SPIClass14endTransactionEv>
}
    5e9c:	00 00       	nop
    5e9e:	0f 90       	pop	r0
    5ea0:	0f 90       	pop	r0
    5ea2:	0f 90       	pop	r0
    5ea4:	df 91       	pop	r29
    5ea6:	cf 91       	pop	r28
    5ea8:	08 95       	ret

00005eaa <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    5eaa:	cf 93       	push	r28
    5eac:	df 93       	push	r29
    5eae:	1f 92       	push	r1
    5eb0:	1f 92       	push	r1
    5eb2:	cd b7       	in	r28, 0x3d	; 61
    5eb4:	de b7       	in	r29, 0x3e	; 62
    5eb6:	9a 83       	std	Y+2, r25	; 0x02
    5eb8:	89 83       	std	Y+1, r24	; 0x01
    5eba:	f8 94       	cli
    5ebc:	00 00       	nop
    5ebe:	0f 90       	pop	r0
    5ec0:	0f 90       	pop	r0
    5ec2:	df 91       	pop	r29
    5ec4:	cf 91       	pop	r28
    5ec6:	08 95       	ret

00005ec8 <_ZN13InterruptLockD1Ev>:
    5ec8:	cf 93       	push	r28
    5eca:	df 93       	push	r29
    5ecc:	1f 92       	push	r1
    5ece:	1f 92       	push	r1
    5ed0:	cd b7       	in	r28, 0x3d	; 61
    5ed2:	de b7       	in	r29, 0x3e	; 62
    5ed4:	9a 83       	std	Y+2, r25	; 0x02
    5ed6:	89 83       	std	Y+1, r24	; 0x01
    5ed8:	78 94       	sei
    5eda:	00 00       	nop
    5edc:	0f 90       	pop	r0
    5ede:	0f 90       	pop	r0
    5ee0:	df 91       	pop	r29
    5ee2:	cf 91       	pop	r28
    5ee4:	08 95       	ret

00005ee6 <_ZN3DHTC1Ehhh>:
    5ee6:	cf 93       	push	r28
    5ee8:	df 93       	push	r29
    5eea:	cd b7       	in	r28, 0x3d	; 61
    5eec:	de b7       	in	r29, 0x3e	; 62
    5eee:	2b 97       	sbiw	r28, 0x0b	; 11
    5ef0:	0f b6       	in	r0, 0x3f	; 63
    5ef2:	f8 94       	cli
    5ef4:	de bf       	out	0x3e, r29	; 62
    5ef6:	0f be       	out	0x3f, r0	; 63
    5ef8:	cd bf       	out	0x3d, r28	; 61
    5efa:	98 87       	std	Y+8, r25	; 0x08
    5efc:	8f 83       	std	Y+7, r24	; 0x07
    5efe:	69 87       	std	Y+9, r22	; 0x09
    5f00:	4a 87       	std	Y+10, r20	; 0x0a
    5f02:	2b 87       	std	Y+11, r18	; 0x0b
    5f04:	8f 81       	ldd	r24, Y+7	; 0x07
    5f06:	98 85       	ldd	r25, Y+8	; 0x08
    5f08:	29 85       	ldd	r18, Y+9	; 0x09
    5f0a:	fc 01       	movw	r30, r24
    5f0c:	25 83       	std	Z+5, r18	; 0x05
    5f0e:	8f 81       	ldd	r24, Y+7	; 0x07
    5f10:	98 85       	ldd	r25, Y+8	; 0x08
    5f12:	2a 85       	ldd	r18, Y+10	; 0x0a
    5f14:	fc 01       	movw	r30, r24
    5f16:	26 83       	std	Z+6, r18	; 0x06
    5f18:	89 85       	ldd	r24, Y+9	; 0x09
    5f1a:	88 2f       	mov	r24, r24
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	87 55       	subi	r24, 0x57	; 87
    5f20:	94 4f       	sbci	r25, 0xF4	; 244
    5f22:	9a 83       	std	Y+2, r25	; 0x02
    5f24:	89 83       	std	Y+1, r24	; 0x01
    5f26:	89 81       	ldd	r24, Y+1	; 0x01
    5f28:	9a 81       	ldd	r25, Y+2	; 0x02
    5f2a:	fc 01       	movw	r30, r24
    5f2c:	84 91       	lpm	r24, Z
    5f2e:	8b 83       	std	Y+3, r24	; 0x03
    5f30:	8f 81       	ldd	r24, Y+7	; 0x07
    5f32:	98 85       	ldd	r25, Y+8	; 0x08
    5f34:	2b 81       	ldd	r18, Y+3	; 0x03
    5f36:	fc 01       	movw	r30, r24
    5f38:	27 83       	std	Z+7, r18	; 0x07
    5f3a:	89 85       	ldd	r24, Y+9	; 0x09
    5f3c:	88 2f       	mov	r24, r24
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	81 51       	subi	r24, 0x11	; 17
    5f42:	94 4f       	sbci	r25, 0xF4	; 244
    5f44:	9d 83       	std	Y+5, r25	; 0x05
    5f46:	8c 83       	std	Y+4, r24	; 0x04
    5f48:	8c 81       	ldd	r24, Y+4	; 0x04
    5f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    5f4c:	fc 01       	movw	r30, r24
    5f4e:	84 91       	lpm	r24, Z
    5f50:	8e 83       	std	Y+6, r24	; 0x06
    5f52:	8f 81       	ldd	r24, Y+7	; 0x07
    5f54:	98 85       	ldd	r25, Y+8	; 0x08
    5f56:	2e 81       	ldd	r18, Y+6	; 0x06
    5f58:	fc 01       	movw	r30, r24
    5f5a:	20 87       	std	Z+8, r18	; 0x08
    5f5c:	2f 81       	ldd	r18, Y+7	; 0x07
    5f5e:	38 85       	ldd	r19, Y+8	; 0x08
    5f60:	80 e8       	ldi	r24, 0x80	; 128
    5f62:	9e e3       	ldi	r25, 0x3E	; 62
    5f64:	a0 e0       	ldi	r26, 0x00	; 0
    5f66:	b0 e0       	ldi	r27, 0x00	; 0
    5f68:	f9 01       	movw	r30, r18
    5f6a:	85 87       	std	Z+13, r24	; 0x0d
    5f6c:	96 87       	std	Z+14, r25	; 0x0e
    5f6e:	a7 87       	std	Z+15, r26	; 0x0f
    5f70:	b0 8b       	std	Z+16, r27	; 0x10
    5f72:	00 00       	nop
    5f74:	2b 96       	adiw	r28, 0x0b	; 11
    5f76:	0f b6       	in	r0, 0x3f	; 63
    5f78:	f8 94       	cli
    5f7a:	de bf       	out	0x3e, r29	; 62
    5f7c:	0f be       	out	0x3f, r0	; 63
    5f7e:	cd bf       	out	0x3d, r28	; 61
    5f80:	df 91       	pop	r29
    5f82:	cf 91       	pop	r28
    5f84:	08 95       	ret

00005f86 <_ZN3DHT5beginEh>:
    5f86:	cf 93       	push	r28
    5f88:	df 93       	push	r29
    5f8a:	00 d0       	rcall	.+0      	; 0x5f8c <_ZN3DHT5beginEh+0x6>
    5f8c:	cd b7       	in	r28, 0x3d	; 61
    5f8e:	de b7       	in	r29, 0x3e	; 62
    5f90:	9a 83       	std	Y+2, r25	; 0x02
    5f92:	89 83       	std	Y+1, r24	; 0x01
    5f94:	6b 83       	std	Y+3, r22	; 0x03
    5f96:	89 81       	ldd	r24, Y+1	; 0x01
    5f98:	9a 81       	ldd	r25, Y+2	; 0x02
    5f9a:	fc 01       	movw	r30, r24
    5f9c:	85 81       	ldd	r24, Z+5	; 0x05
    5f9e:	62 e0       	ldi	r22, 0x02	; 2
    5fa0:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    5fa4:	0e 94 75 5e 	call	0xbcea	; 0xbcea <millis>
    5fa8:	dc 01       	movw	r26, r24
    5faa:	cb 01       	movw	r24, r22
    5fac:	80 5d       	subi	r24, 0xD0	; 208
    5fae:	97 40       	sbci	r25, 0x07	; 7
    5fb0:	a1 09       	sbc	r26, r1
    5fb2:	b1 09       	sbc	r27, r1
    5fb4:	29 81       	ldd	r18, Y+1	; 0x01
    5fb6:	3a 81       	ldd	r19, Y+2	; 0x02
    5fb8:	f9 01       	movw	r30, r18
    5fba:	81 87       	std	Z+9, r24	; 0x09
    5fbc:	92 87       	std	Z+10, r25	; 0x0a
    5fbe:	a3 87       	std	Z+11, r26	; 0x0b
    5fc0:	b4 87       	std	Z+12, r27	; 0x0c
    5fc2:	89 81       	ldd	r24, Y+1	; 0x01
    5fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc6:	2b 81       	ldd	r18, Y+3	; 0x03
    5fc8:	fc 01       	movw	r30, r24
    5fca:	22 8b       	std	Z+18, r18	; 0x12
    5fcc:	00 00       	nop
    5fce:	0f 90       	pop	r0
    5fd0:	0f 90       	pop	r0
    5fd2:	0f 90       	pop	r0
    5fd4:	df 91       	pop	r29
    5fd6:	cf 91       	pop	r28
    5fd8:	08 95       	ret

00005fda <_ZN3DHT15readTemperatureEbb>:
    5fda:	cf 93       	push	r28
    5fdc:	df 93       	push	r29
    5fde:	cd b7       	in	r28, 0x3d	; 61
    5fe0:	de b7       	in	r29, 0x3e	; 62
    5fe2:	28 97       	sbiw	r28, 0x08	; 8
    5fe4:	0f b6       	in	r0, 0x3f	; 63
    5fe6:	f8 94       	cli
    5fe8:	de bf       	out	0x3e, r29	; 62
    5fea:	0f be       	out	0x3f, r0	; 63
    5fec:	cd bf       	out	0x3d, r28	; 61
    5fee:	9e 83       	std	Y+6, r25	; 0x06
    5ff0:	8d 83       	std	Y+5, r24	; 0x05
    5ff2:	6f 83       	std	Y+7, r22	; 0x07
    5ff4:	48 87       	std	Y+8, r20	; 0x08
    5ff6:	80 e0       	ldi	r24, 0x00	; 0
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	a0 ec       	ldi	r26, 0xC0	; 192
    5ffc:	bf e7       	ldi	r27, 0x7F	; 127
    5ffe:	89 83       	std	Y+1, r24	; 0x01
    6000:	9a 83       	std	Y+2, r25	; 0x02
    6002:	ab 83       	std	Y+3, r26	; 0x03
    6004:	bc 83       	std	Y+4, r27	; 0x04
    6006:	8d 81       	ldd	r24, Y+5	; 0x05
    6008:	9e 81       	ldd	r25, Y+6	; 0x06
    600a:	68 85       	ldd	r22, Y+8	; 0x08
    600c:	1d d2       	rcall	.+1082   	; 0x6448 <_ZN3DHT4readEb>
    600e:	88 23       	and	r24, r24
    6010:	09 f4       	brne	.+2      	; 0x6014 <_ZN3DHT15readTemperatureEbb+0x3a>
    6012:	34 c1       	rjmp	.+616    	; 0x627c <_ZN3DHT15readTemperatureEbb+0x2a2>
    6014:	8d 81       	ldd	r24, Y+5	; 0x05
    6016:	9e 81       	ldd	r25, Y+6	; 0x06
    6018:	fc 01       	movw	r30, r24
    601a:	86 81       	ldd	r24, Z+6	; 0x06
    601c:	88 2f       	mov	r24, r24
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	8c 30       	cpi	r24, 0x0C	; 12
    6022:	91 05       	cpc	r25, r1
    6024:	09 f4       	brne	.+2      	; 0x6028 <_ZN3DHT15readTemperatureEbb+0x4e>
    6026:	72 c0       	rjmp	.+228    	; 0x610c <_ZN3DHT15readTemperatureEbb+0x132>
    6028:	8d 30       	cpi	r24, 0x0D	; 13
    602a:	91 05       	cpc	r25, r1
    602c:	1c f4       	brge	.+6      	; 0x6034 <_ZN3DHT15readTemperatureEbb+0x5a>
    602e:	0b 97       	sbiw	r24, 0x0b	; 11
    6030:	31 f0       	breq	.+12     	; 0x603e <_ZN3DHT15readTemperatureEbb+0x64>
    6032:	24 c1       	rjmp	.+584    	; 0x627c <_ZN3DHT15readTemperatureEbb+0x2a2>
    6034:	45 97       	sbiw	r24, 0x15	; 21
    6036:	02 97       	sbiw	r24, 0x02	; 2
    6038:	08 f0       	brcs	.+2      	; 0x603c <_ZN3DHT15readTemperatureEbb+0x62>
    603a:	20 c1       	rjmp	.+576    	; 0x627c <_ZN3DHT15readTemperatureEbb+0x2a2>
    603c:	c7 c0       	rjmp	.+398    	; 0x61cc <_ZN3DHT15readTemperatureEbb+0x1f2>
    603e:	8d 81       	ldd	r24, Y+5	; 0x05
    6040:	9e 81       	ldd	r25, Y+6	; 0x06
    6042:	fc 01       	movw	r30, r24
    6044:	82 81       	ldd	r24, Z+2	; 0x02
    6046:	88 2f       	mov	r24, r24
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	a0 e0       	ldi	r26, 0x00	; 0
    604c:	b0 e0       	ldi	r27, 0x00	; 0
    604e:	bc 01       	movw	r22, r24
    6050:	cd 01       	movw	r24, r26
    6052:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__floatunsisf>
    6056:	dc 01       	movw	r26, r24
    6058:	cb 01       	movw	r24, r22
    605a:	89 83       	std	Y+1, r24	; 0x01
    605c:	9a 83       	std	Y+2, r25	; 0x02
    605e:	ab 83       	std	Y+3, r26	; 0x03
    6060:	bc 83       	std	Y+4, r27	; 0x04
    6062:	8d 81       	ldd	r24, Y+5	; 0x05
    6064:	9e 81       	ldd	r25, Y+6	; 0x06
    6066:	fc 01       	movw	r30, r24
    6068:	83 81       	ldd	r24, Z+3	; 0x03
    606a:	88 23       	and	r24, r24
    606c:	84 f4       	brge	.+32     	; 0x608e <_ZN3DHT15readTemperatureEbb+0xb4>
    606e:	29 81       	ldd	r18, Y+1	; 0x01
    6070:	3a 81       	ldd	r19, Y+2	; 0x02
    6072:	4b 81       	ldd	r20, Y+3	; 0x03
    6074:	5c 81       	ldd	r21, Y+4	; 0x04
    6076:	60 e0       	ldi	r22, 0x00	; 0
    6078:	70 e0       	ldi	r23, 0x00	; 0
    607a:	80 e8       	ldi	r24, 0x80	; 128
    607c:	9f eb       	ldi	r25, 0xBF	; 191
    607e:	0e 94 eb 57 	call	0xafd6	; 0xafd6 <__subsf3>
    6082:	dc 01       	movw	r26, r24
    6084:	cb 01       	movw	r24, r22
    6086:	89 83       	std	Y+1, r24	; 0x01
    6088:	9a 83       	std	Y+2, r25	; 0x02
    608a:	ab 83       	std	Y+3, r26	; 0x03
    608c:	bc 83       	std	Y+4, r27	; 0x04
    608e:	8d 81       	ldd	r24, Y+5	; 0x05
    6090:	9e 81       	ldd	r25, Y+6	; 0x06
    6092:	fc 01       	movw	r30, r24
    6094:	83 81       	ldd	r24, Z+3	; 0x03
    6096:	88 2f       	mov	r24, r24
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	8f 70       	andi	r24, 0x0F	; 15
    609c:	99 27       	eor	r25, r25
    609e:	09 2e       	mov	r0, r25
    60a0:	00 0c       	add	r0, r0
    60a2:	aa 0b       	sbc	r26, r26
    60a4:	bb 0b       	sbc	r27, r27
    60a6:	bc 01       	movw	r22, r24
    60a8:	cd 01       	movw	r24, r26
    60aa:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__floatsisf>
    60ae:	dc 01       	movw	r26, r24
    60b0:	cb 01       	movw	r24, r22
    60b2:	2d ec       	ldi	r18, 0xCD	; 205
    60b4:	3c ec       	ldi	r19, 0xCC	; 204
    60b6:	4c ec       	ldi	r20, 0xCC	; 204
    60b8:	5d e3       	ldi	r21, 0x3D	; 61
    60ba:	bc 01       	movw	r22, r24
    60bc:	cd 01       	movw	r24, r26
    60be:	0e 94 9e 59 	call	0xb33c	; 0xb33c <__mulsf3>
    60c2:	dc 01       	movw	r26, r24
    60c4:	cb 01       	movw	r24, r22
    60c6:	9c 01       	movw	r18, r24
    60c8:	ad 01       	movw	r20, r26
    60ca:	69 81       	ldd	r22, Y+1	; 0x01
    60cc:	7a 81       	ldd	r23, Y+2	; 0x02
    60ce:	8b 81       	ldd	r24, Y+3	; 0x03
    60d0:	9c 81       	ldd	r25, Y+4	; 0x04
    60d2:	0e 94 ec 57 	call	0xafd8	; 0xafd8 <__addsf3>
    60d6:	dc 01       	movw	r26, r24
    60d8:	cb 01       	movw	r24, r22
    60da:	89 83       	std	Y+1, r24	; 0x01
    60dc:	9a 83       	std	Y+2, r25	; 0x02
    60de:	ab 83       	std	Y+3, r26	; 0x03
    60e0:	bc 83       	std	Y+4, r27	; 0x04
    60e2:	8f 81       	ldd	r24, Y+7	; 0x07
    60e4:	88 23       	and	r24, r24
    60e6:	09 f4       	brne	.+2      	; 0x60ea <_ZN3DHT15readTemperatureEbb+0x110>
    60e8:	c4 c0       	rjmp	.+392    	; 0x6272 <_ZN3DHT15readTemperatureEbb+0x298>
    60ea:	89 81       	ldd	r24, Y+1	; 0x01
    60ec:	9a 81       	ldd	r25, Y+2	; 0x02
    60ee:	ab 81       	ldd	r26, Y+3	; 0x03
    60f0:	bc 81       	ldd	r27, Y+4	; 0x04
    60f2:	2d 81       	ldd	r18, Y+5	; 0x05
    60f4:	3e 81       	ldd	r19, Y+6	; 0x06
    60f6:	ac 01       	movw	r20, r24
    60f8:	bd 01       	movw	r22, r26
    60fa:	c9 01       	movw	r24, r18
    60fc:	ce d0       	rcall	.+412    	; 0x629a <_ZN3DHT11convertCtoFEf>
    60fe:	dc 01       	movw	r26, r24
    6100:	cb 01       	movw	r24, r22
    6102:	89 83       	std	Y+1, r24	; 0x01
    6104:	9a 83       	std	Y+2, r25	; 0x02
    6106:	ab 83       	std	Y+3, r26	; 0x03
    6108:	bc 83       	std	Y+4, r27	; 0x04
    610a:	b3 c0       	rjmp	.+358    	; 0x6272 <_ZN3DHT15readTemperatureEbb+0x298>
    610c:	8d 81       	ldd	r24, Y+5	; 0x05
    610e:	9e 81       	ldd	r25, Y+6	; 0x06
    6110:	fc 01       	movw	r30, r24
    6112:	82 81       	ldd	r24, Z+2	; 0x02
    6114:	88 2f       	mov	r24, r24
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	a0 e0       	ldi	r26, 0x00	; 0
    611a:	b0 e0       	ldi	r27, 0x00	; 0
    611c:	bc 01       	movw	r22, r24
    611e:	cd 01       	movw	r24, r26
    6120:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__floatunsisf>
    6124:	dc 01       	movw	r26, r24
    6126:	cb 01       	movw	r24, r22
    6128:	89 83       	std	Y+1, r24	; 0x01
    612a:	9a 83       	std	Y+2, r25	; 0x02
    612c:	ab 83       	std	Y+3, r26	; 0x03
    612e:	bc 83       	std	Y+4, r27	; 0x04
    6130:	8d 81       	ldd	r24, Y+5	; 0x05
    6132:	9e 81       	ldd	r25, Y+6	; 0x06
    6134:	fc 01       	movw	r30, r24
    6136:	83 81       	ldd	r24, Z+3	; 0x03
    6138:	88 2f       	mov	r24, r24
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	8f 70       	andi	r24, 0x0F	; 15
    613e:	99 27       	eor	r25, r25
    6140:	09 2e       	mov	r0, r25
    6142:	00 0c       	add	r0, r0
    6144:	aa 0b       	sbc	r26, r26
    6146:	bb 0b       	sbc	r27, r27
    6148:	bc 01       	movw	r22, r24
    614a:	cd 01       	movw	r24, r26
    614c:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__floatsisf>
    6150:	dc 01       	movw	r26, r24
    6152:	cb 01       	movw	r24, r22
    6154:	2d ec       	ldi	r18, 0xCD	; 205
    6156:	3c ec       	ldi	r19, 0xCC	; 204
    6158:	4c ec       	ldi	r20, 0xCC	; 204
    615a:	5d e3       	ldi	r21, 0x3D	; 61
    615c:	bc 01       	movw	r22, r24
    615e:	cd 01       	movw	r24, r26
    6160:	0e 94 9e 59 	call	0xb33c	; 0xb33c <__mulsf3>
    6164:	dc 01       	movw	r26, r24
    6166:	cb 01       	movw	r24, r22
    6168:	9c 01       	movw	r18, r24
    616a:	ad 01       	movw	r20, r26
    616c:	69 81       	ldd	r22, Y+1	; 0x01
    616e:	7a 81       	ldd	r23, Y+2	; 0x02
    6170:	8b 81       	ldd	r24, Y+3	; 0x03
    6172:	9c 81       	ldd	r25, Y+4	; 0x04
    6174:	0e 94 ec 57 	call	0xafd8	; 0xafd8 <__addsf3>
    6178:	dc 01       	movw	r26, r24
    617a:	cb 01       	movw	r24, r22
    617c:	89 83       	std	Y+1, r24	; 0x01
    617e:	9a 83       	std	Y+2, r25	; 0x02
    6180:	ab 83       	std	Y+3, r26	; 0x03
    6182:	bc 83       	std	Y+4, r27	; 0x04
    6184:	8d 81       	ldd	r24, Y+5	; 0x05
    6186:	9e 81       	ldd	r25, Y+6	; 0x06
    6188:	fc 01       	movw	r30, r24
    618a:	82 81       	ldd	r24, Z+2	; 0x02
    618c:	88 23       	and	r24, r24
    618e:	4c f4       	brge	.+18     	; 0x61a2 <_ZN3DHT15readTemperatureEbb+0x1c8>
    6190:	89 81       	ldd	r24, Y+1	; 0x01
    6192:	9a 81       	ldd	r25, Y+2	; 0x02
    6194:	ab 81       	ldd	r26, Y+3	; 0x03
    6196:	bc 81       	ldd	r27, Y+4	; 0x04
    6198:	b0 58       	subi	r27, 0x80	; 128
    619a:	89 83       	std	Y+1, r24	; 0x01
    619c:	9a 83       	std	Y+2, r25	; 0x02
    619e:	ab 83       	std	Y+3, r26	; 0x03
    61a0:	bc 83       	std	Y+4, r27	; 0x04
    61a2:	8f 81       	ldd	r24, Y+7	; 0x07
    61a4:	88 23       	and	r24, r24
    61a6:	09 f4       	brne	.+2      	; 0x61aa <_ZN3DHT15readTemperatureEbb+0x1d0>
    61a8:	66 c0       	rjmp	.+204    	; 0x6276 <_ZN3DHT15readTemperatureEbb+0x29c>
    61aa:	89 81       	ldd	r24, Y+1	; 0x01
    61ac:	9a 81       	ldd	r25, Y+2	; 0x02
    61ae:	ab 81       	ldd	r26, Y+3	; 0x03
    61b0:	bc 81       	ldd	r27, Y+4	; 0x04
    61b2:	2d 81       	ldd	r18, Y+5	; 0x05
    61b4:	3e 81       	ldd	r19, Y+6	; 0x06
    61b6:	ac 01       	movw	r20, r24
    61b8:	bd 01       	movw	r22, r26
    61ba:	c9 01       	movw	r24, r18
    61bc:	6e d0       	rcall	.+220    	; 0x629a <_ZN3DHT11convertCtoFEf>
    61be:	dc 01       	movw	r26, r24
    61c0:	cb 01       	movw	r24, r22
    61c2:	89 83       	std	Y+1, r24	; 0x01
    61c4:	9a 83       	std	Y+2, r25	; 0x02
    61c6:	ab 83       	std	Y+3, r26	; 0x03
    61c8:	bc 83       	std	Y+4, r27	; 0x04
    61ca:	55 c0       	rjmp	.+170    	; 0x6276 <_ZN3DHT15readTemperatureEbb+0x29c>
    61cc:	8d 81       	ldd	r24, Y+5	; 0x05
    61ce:	9e 81       	ldd	r25, Y+6	; 0x06
    61d0:	fc 01       	movw	r30, r24
    61d2:	82 81       	ldd	r24, Z+2	; 0x02
    61d4:	88 2f       	mov	r24, r24
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	8f 77       	andi	r24, 0x7F	; 127
    61da:	99 27       	eor	r25, r25
    61dc:	38 2f       	mov	r19, r24
    61de:	22 27       	eor	r18, r18
    61e0:	8d 81       	ldd	r24, Y+5	; 0x05
    61e2:	9e 81       	ldd	r25, Y+6	; 0x06
    61e4:	fc 01       	movw	r30, r24
    61e6:	83 81       	ldd	r24, Z+3	; 0x03
    61e8:	88 2f       	mov	r24, r24
    61ea:	90 e0       	ldi	r25, 0x00	; 0
    61ec:	82 2b       	or	r24, r18
    61ee:	93 2b       	or	r25, r19
    61f0:	cc 01       	movw	r24, r24
    61f2:	a0 e0       	ldi	r26, 0x00	; 0
    61f4:	b0 e0       	ldi	r27, 0x00	; 0
    61f6:	bc 01       	movw	r22, r24
    61f8:	cd 01       	movw	r24, r26
    61fa:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__floatunsisf>
    61fe:	dc 01       	movw	r26, r24
    6200:	cb 01       	movw	r24, r22
    6202:	89 83       	std	Y+1, r24	; 0x01
    6204:	9a 83       	std	Y+2, r25	; 0x02
    6206:	ab 83       	std	Y+3, r26	; 0x03
    6208:	bc 83       	std	Y+4, r27	; 0x04
    620a:	2d ec       	ldi	r18, 0xCD	; 205
    620c:	3c ec       	ldi	r19, 0xCC	; 204
    620e:	4c ec       	ldi	r20, 0xCC	; 204
    6210:	5d e3       	ldi	r21, 0x3D	; 61
    6212:	69 81       	ldd	r22, Y+1	; 0x01
    6214:	7a 81       	ldd	r23, Y+2	; 0x02
    6216:	8b 81       	ldd	r24, Y+3	; 0x03
    6218:	9c 81       	ldd	r25, Y+4	; 0x04
    621a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <__mulsf3>
    621e:	dc 01       	movw	r26, r24
    6220:	cb 01       	movw	r24, r22
    6222:	89 83       	std	Y+1, r24	; 0x01
    6224:	9a 83       	std	Y+2, r25	; 0x02
    6226:	ab 83       	std	Y+3, r26	; 0x03
    6228:	bc 83       	std	Y+4, r27	; 0x04
    622a:	8d 81       	ldd	r24, Y+5	; 0x05
    622c:	9e 81       	ldd	r25, Y+6	; 0x06
    622e:	fc 01       	movw	r30, r24
    6230:	82 81       	ldd	r24, Z+2	; 0x02
    6232:	88 23       	and	r24, r24
    6234:	4c f4       	brge	.+18     	; 0x6248 <_ZN3DHT15readTemperatureEbb+0x26e>
    6236:	89 81       	ldd	r24, Y+1	; 0x01
    6238:	9a 81       	ldd	r25, Y+2	; 0x02
    623a:	ab 81       	ldd	r26, Y+3	; 0x03
    623c:	bc 81       	ldd	r27, Y+4	; 0x04
    623e:	b0 58       	subi	r27, 0x80	; 128
    6240:	89 83       	std	Y+1, r24	; 0x01
    6242:	9a 83       	std	Y+2, r25	; 0x02
    6244:	ab 83       	std	Y+3, r26	; 0x03
    6246:	bc 83       	std	Y+4, r27	; 0x04
    6248:	8f 81       	ldd	r24, Y+7	; 0x07
    624a:	88 23       	and	r24, r24
    624c:	b1 f0       	breq	.+44     	; 0x627a <_ZN3DHT15readTemperatureEbb+0x2a0>
    624e:	89 81       	ldd	r24, Y+1	; 0x01
    6250:	9a 81       	ldd	r25, Y+2	; 0x02
    6252:	ab 81       	ldd	r26, Y+3	; 0x03
    6254:	bc 81       	ldd	r27, Y+4	; 0x04
    6256:	2d 81       	ldd	r18, Y+5	; 0x05
    6258:	3e 81       	ldd	r19, Y+6	; 0x06
    625a:	ac 01       	movw	r20, r24
    625c:	bd 01       	movw	r22, r26
    625e:	c9 01       	movw	r24, r18
    6260:	1c d0       	rcall	.+56     	; 0x629a <_ZN3DHT11convertCtoFEf>
    6262:	dc 01       	movw	r26, r24
    6264:	cb 01       	movw	r24, r22
    6266:	89 83       	std	Y+1, r24	; 0x01
    6268:	9a 83       	std	Y+2, r25	; 0x02
    626a:	ab 83       	std	Y+3, r26	; 0x03
    626c:	bc 83       	std	Y+4, r27	; 0x04
    626e:	00 00       	nop
    6270:	04 c0       	rjmp	.+8      	; 0x627a <_ZN3DHT15readTemperatureEbb+0x2a0>
    6272:	00 00       	nop
    6274:	03 c0       	rjmp	.+6      	; 0x627c <_ZN3DHT15readTemperatureEbb+0x2a2>
    6276:	00 00       	nop
    6278:	01 c0       	rjmp	.+2      	; 0x627c <_ZN3DHT15readTemperatureEbb+0x2a2>
    627a:	00 00       	nop
    627c:	89 81       	ldd	r24, Y+1	; 0x01
    627e:	9a 81       	ldd	r25, Y+2	; 0x02
    6280:	ab 81       	ldd	r26, Y+3	; 0x03
    6282:	bc 81       	ldd	r27, Y+4	; 0x04
    6284:	bc 01       	movw	r22, r24
    6286:	cd 01       	movw	r24, r26
    6288:	28 96       	adiw	r28, 0x08	; 8
    628a:	0f b6       	in	r0, 0x3f	; 63
    628c:	f8 94       	cli
    628e:	de bf       	out	0x3e, r29	; 62
    6290:	0f be       	out	0x3f, r0	; 63
    6292:	cd bf       	out	0x3d, r28	; 61
    6294:	df 91       	pop	r29
    6296:	cf 91       	pop	r28
    6298:	08 95       	ret

0000629a <_ZN3DHT11convertCtoFEf>:
    629a:	cf 93       	push	r28
    629c:	df 93       	push	r29
    629e:	00 d0       	rcall	.+0      	; 0x62a0 <_ZN3DHT11convertCtoFEf+0x6>
    62a0:	00 d0       	rcall	.+0      	; 0x62a2 <_ZN3DHT11convertCtoFEf+0x8>
    62a2:	cd b7       	in	r28, 0x3d	; 61
    62a4:	de b7       	in	r29, 0x3e	; 62
    62a6:	9a 83       	std	Y+2, r25	; 0x02
    62a8:	89 83       	std	Y+1, r24	; 0x01
    62aa:	4b 83       	std	Y+3, r20	; 0x03
    62ac:	5c 83       	std	Y+4, r21	; 0x04
    62ae:	6d 83       	std	Y+5, r22	; 0x05
    62b0:	7e 83       	std	Y+6, r23	; 0x06
    62b2:	26 e6       	ldi	r18, 0x66	; 102
    62b4:	36 e6       	ldi	r19, 0x66	; 102
    62b6:	46 ee       	ldi	r20, 0xE6	; 230
    62b8:	5f e3       	ldi	r21, 0x3F	; 63
    62ba:	6b 81       	ldd	r22, Y+3	; 0x03
    62bc:	7c 81       	ldd	r23, Y+4	; 0x04
    62be:	8d 81       	ldd	r24, Y+5	; 0x05
    62c0:	9e 81       	ldd	r25, Y+6	; 0x06
    62c2:	0e 94 9e 59 	call	0xb33c	; 0xb33c <__mulsf3>
    62c6:	dc 01       	movw	r26, r24
    62c8:	cb 01       	movw	r24, r22
    62ca:	20 e0       	ldi	r18, 0x00	; 0
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	40 e0       	ldi	r20, 0x00	; 0
    62d0:	52 e4       	ldi	r21, 0x42	; 66
    62d2:	bc 01       	movw	r22, r24
    62d4:	cd 01       	movw	r24, r26
    62d6:	0e 94 ec 57 	call	0xafd8	; 0xafd8 <__addsf3>
    62da:	dc 01       	movw	r26, r24
    62dc:	cb 01       	movw	r24, r22
    62de:	bc 01       	movw	r22, r24
    62e0:	cd 01       	movw	r24, r26
    62e2:	26 96       	adiw	r28, 0x06	; 6
    62e4:	0f b6       	in	r0, 0x3f	; 63
    62e6:	f8 94       	cli
    62e8:	de bf       	out	0x3e, r29	; 62
    62ea:	0f be       	out	0x3f, r0	; 63
    62ec:	cd bf       	out	0x3d, r28	; 61
    62ee:	df 91       	pop	r29
    62f0:	cf 91       	pop	r28
    62f2:	08 95       	ret

000062f4 <_ZN3DHT12readHumidityEb>:
    62f4:	cf 92       	push	r12
    62f6:	df 92       	push	r13
    62f8:	ef 92       	push	r14
    62fa:	ff 92       	push	r15
    62fc:	cf 93       	push	r28
    62fe:	df 93       	push	r29
    6300:	cd b7       	in	r28, 0x3d	; 61
    6302:	de b7       	in	r29, 0x3e	; 62
    6304:	27 97       	sbiw	r28, 0x07	; 7
    6306:	0f b6       	in	r0, 0x3f	; 63
    6308:	f8 94       	cli
    630a:	de bf       	out	0x3e, r29	; 62
    630c:	0f be       	out	0x3f, r0	; 63
    630e:	cd bf       	out	0x3d, r28	; 61
    6310:	9e 83       	std	Y+6, r25	; 0x06
    6312:	8d 83       	std	Y+5, r24	; 0x05
    6314:	6f 83       	std	Y+7, r22	; 0x07
    6316:	80 e0       	ldi	r24, 0x00	; 0
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	a0 ec       	ldi	r26, 0xC0	; 192
    631c:	bf e7       	ldi	r27, 0x7F	; 127
    631e:	89 83       	std	Y+1, r24	; 0x01
    6320:	9a 83       	std	Y+2, r25	; 0x02
    6322:	ab 83       	std	Y+3, r26	; 0x03
    6324:	bc 83       	std	Y+4, r27	; 0x04
    6326:	8d 81       	ldd	r24, Y+5	; 0x05
    6328:	9e 81       	ldd	r25, Y+6	; 0x06
    632a:	6f 81       	ldd	r22, Y+7	; 0x07
    632c:	8d d0       	rcall	.+282    	; 0x6448 <_ZN3DHT4readEb>
    632e:	88 23       	and	r24, r24
    6330:	09 f4       	brne	.+2      	; 0x6334 <_ZN3DHT12readHumidityEb+0x40>
    6332:	77 c0       	rjmp	.+238    	; 0x6422 <_ZN3DHT12readHumidityEb+0x12e>
    6334:	8d 81       	ldd	r24, Y+5	; 0x05
    6336:	9e 81       	ldd	r25, Y+6	; 0x06
    6338:	fc 01       	movw	r30, r24
    633a:	86 81       	ldd	r24, Z+6	; 0x06
    633c:	88 2f       	mov	r24, r24
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	8b 30       	cpi	r24, 0x0B	; 11
    6342:	91 05       	cpc	r25, r1
    6344:	0c f4       	brge	.+2      	; 0x6348 <_ZN3DHT12readHumidityEb+0x54>
    6346:	6d c0       	rjmp	.+218    	; 0x6422 <_ZN3DHT12readHumidityEb+0x12e>
    6348:	8d 30       	cpi	r24, 0x0D	; 13
    634a:	91 05       	cpc	r25, r1
    634c:	2c f0       	brlt	.+10     	; 0x6358 <_ZN3DHT12readHumidityEb+0x64>
    634e:	45 97       	sbiw	r24, 0x15	; 21
    6350:	02 97       	sbiw	r24, 0x02	; 2
    6352:	08 f0       	brcs	.+2      	; 0x6356 <_ZN3DHT12readHumidityEb+0x62>
    6354:	66 c0       	rjmp	.+204    	; 0x6422 <_ZN3DHT12readHumidityEb+0x12e>
    6356:	37 c0       	rjmp	.+110    	; 0x63c6 <_ZN3DHT12readHumidityEb+0xd2>
    6358:	8d 81       	ldd	r24, Y+5	; 0x05
    635a:	9e 81       	ldd	r25, Y+6	; 0x06
    635c:	fc 01       	movw	r30, r24
    635e:	80 81       	ld	r24, Z
    6360:	88 2f       	mov	r24, r24
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	09 2e       	mov	r0, r25
    6366:	00 0c       	add	r0, r0
    6368:	aa 0b       	sbc	r26, r26
    636a:	bb 0b       	sbc	r27, r27
    636c:	bc 01       	movw	r22, r24
    636e:	cd 01       	movw	r24, r26
    6370:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__floatsisf>
    6374:	6b 01       	movw	r12, r22
    6376:	7c 01       	movw	r14, r24
    6378:	8d 81       	ldd	r24, Y+5	; 0x05
    637a:	9e 81       	ldd	r25, Y+6	; 0x06
    637c:	fc 01       	movw	r30, r24
    637e:	81 81       	ldd	r24, Z+1	; 0x01
    6380:	88 2f       	mov	r24, r24
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	09 2e       	mov	r0, r25
    6386:	00 0c       	add	r0, r0
    6388:	aa 0b       	sbc	r26, r26
    638a:	bb 0b       	sbc	r27, r27
    638c:	bc 01       	movw	r22, r24
    638e:	cd 01       	movw	r24, r26
    6390:	0e 94 ea 58 	call	0xb1d4	; 0xb1d4 <__floatsisf>
    6394:	dc 01       	movw	r26, r24
    6396:	cb 01       	movw	r24, r22
    6398:	2d ec       	ldi	r18, 0xCD	; 205
    639a:	3c ec       	ldi	r19, 0xCC	; 204
    639c:	4c ec       	ldi	r20, 0xCC	; 204
    639e:	5d e3       	ldi	r21, 0x3D	; 61
    63a0:	bc 01       	movw	r22, r24
    63a2:	cd 01       	movw	r24, r26
    63a4:	0e 94 9e 59 	call	0xb33c	; 0xb33c <__mulsf3>
    63a8:	dc 01       	movw	r26, r24
    63aa:	cb 01       	movw	r24, r22
    63ac:	9c 01       	movw	r18, r24
    63ae:	ad 01       	movw	r20, r26
    63b0:	c7 01       	movw	r24, r14
    63b2:	b6 01       	movw	r22, r12
    63b4:	0e 94 ec 57 	call	0xafd8	; 0xafd8 <__addsf3>
    63b8:	dc 01       	movw	r26, r24
    63ba:	cb 01       	movw	r24, r22
    63bc:	89 83       	std	Y+1, r24	; 0x01
    63be:	9a 83       	std	Y+2, r25	; 0x02
    63c0:	ab 83       	std	Y+3, r26	; 0x03
    63c2:	bc 83       	std	Y+4, r27	; 0x04
    63c4:	2e c0       	rjmp	.+92     	; 0x6422 <_ZN3DHT12readHumidityEb+0x12e>
    63c6:	8d 81       	ldd	r24, Y+5	; 0x05
    63c8:	9e 81       	ldd	r25, Y+6	; 0x06
    63ca:	fc 01       	movw	r30, r24
    63cc:	80 81       	ld	r24, Z
    63ce:	88 2f       	mov	r24, r24
    63d0:	90 e0       	ldi	r25, 0x00	; 0
    63d2:	38 2f       	mov	r19, r24
    63d4:	22 27       	eor	r18, r18
    63d6:	8d 81       	ldd	r24, Y+5	; 0x05
    63d8:	9e 81       	ldd	r25, Y+6	; 0x06
    63da:	fc 01       	movw	r30, r24
    63dc:	81 81       	ldd	r24, Z+1	; 0x01
    63de:	88 2f       	mov	r24, r24
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	82 2b       	or	r24, r18
    63e4:	93 2b       	or	r25, r19
    63e6:	cc 01       	movw	r24, r24
    63e8:	a0 e0       	ldi	r26, 0x00	; 0
    63ea:	b0 e0       	ldi	r27, 0x00	; 0
    63ec:	bc 01       	movw	r22, r24
    63ee:	cd 01       	movw	r24, r26
    63f0:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__floatunsisf>
    63f4:	dc 01       	movw	r26, r24
    63f6:	cb 01       	movw	r24, r22
    63f8:	89 83       	std	Y+1, r24	; 0x01
    63fa:	9a 83       	std	Y+2, r25	; 0x02
    63fc:	ab 83       	std	Y+3, r26	; 0x03
    63fe:	bc 83       	std	Y+4, r27	; 0x04
    6400:	2d ec       	ldi	r18, 0xCD	; 205
    6402:	3c ec       	ldi	r19, 0xCC	; 204
    6404:	4c ec       	ldi	r20, 0xCC	; 204
    6406:	5d e3       	ldi	r21, 0x3D	; 61
    6408:	69 81       	ldd	r22, Y+1	; 0x01
    640a:	7a 81       	ldd	r23, Y+2	; 0x02
    640c:	8b 81       	ldd	r24, Y+3	; 0x03
    640e:	9c 81       	ldd	r25, Y+4	; 0x04
    6410:	0e 94 9e 59 	call	0xb33c	; 0xb33c <__mulsf3>
    6414:	dc 01       	movw	r26, r24
    6416:	cb 01       	movw	r24, r22
    6418:	89 83       	std	Y+1, r24	; 0x01
    641a:	9a 83       	std	Y+2, r25	; 0x02
    641c:	ab 83       	std	Y+3, r26	; 0x03
    641e:	bc 83       	std	Y+4, r27	; 0x04
    6420:	00 00       	nop
    6422:	89 81       	ldd	r24, Y+1	; 0x01
    6424:	9a 81       	ldd	r25, Y+2	; 0x02
    6426:	ab 81       	ldd	r26, Y+3	; 0x03
    6428:	bc 81       	ldd	r27, Y+4	; 0x04
    642a:	bc 01       	movw	r22, r24
    642c:	cd 01       	movw	r24, r26
    642e:	27 96       	adiw	r28, 0x07	; 7
    6430:	0f b6       	in	r0, 0x3f	; 63
    6432:	f8 94       	cli
    6434:	de bf       	out	0x3e, r29	; 62
    6436:	0f be       	out	0x3f, r0	; 63
    6438:	cd bf       	out	0x3d, r28	; 61
    643a:	df 91       	pop	r29
    643c:	cf 91       	pop	r28
    643e:	ff 90       	pop	r15
    6440:	ef 90       	pop	r14
    6442:	df 90       	pop	r13
    6444:	cf 90       	pop	r12
    6446:	08 95       	ret

00006448 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    6448:	af 92       	push	r10
    644a:	bf 92       	push	r11
    644c:	cf 92       	push	r12
    644e:	df 92       	push	r13
    6450:	ff 92       	push	r15
    6452:	0f 93       	push	r16
    6454:	1f 93       	push	r17
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	cd b7       	in	r28, 0x3d	; 61
    645c:	de b7       	in	r29, 0x3e	; 62
    645e:	c4 55       	subi	r28, 0x54	; 84
    6460:	d1 40       	sbci	r29, 0x01	; 1
    6462:	0f b6       	in	r0, 0x3f	; 63
    6464:	f8 94       	cli
    6466:	de bf       	out	0x3e, r29	; 62
    6468:	0f be       	out	0x3f, r0	; 63
    646a:	cd bf       	out	0x3d, r28	; 61
    646c:	9e 01       	movw	r18, r28
    646e:	2e 5a       	subi	r18, 0xAE	; 174
    6470:	3e 4f       	sbci	r19, 0xFE	; 254
    6472:	f9 01       	movw	r30, r18
    6474:	91 83       	std	Z+1, r25	; 0x01
    6476:	80 83       	st	Z, r24
    6478:	ce 01       	movw	r24, r28
    647a:	8c 5a       	subi	r24, 0xAC	; 172
    647c:	9e 4f       	sbci	r25, 0xFE	; 254
    647e:	fc 01       	movw	r30, r24
    6480:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    6482:	0e 94 75 5e 	call	0xbcea	; 0xbcea <millis>
    6486:	dc 01       	movw	r26, r24
    6488:	cb 01       	movw	r24, r22
    648a:	8d 83       	std	Y+5, r24	; 0x05
    648c:	9e 83       	std	Y+6, r25	; 0x06
    648e:	af 83       	std	Y+7, r26	; 0x07
    6490:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    6492:	ce 01       	movw	r24, r28
    6494:	8c 5a       	subi	r24, 0xAC	; 172
    6496:	9e 4f       	sbci	r25, 0xFE	; 254
    6498:	fc 01       	movw	r30, r24
    649a:	90 81       	ld	r25, Z
    649c:	81 e0       	ldi	r24, 0x01	; 1
    649e:	89 27       	eor	r24, r25
    64a0:	88 23       	and	r24, r24
    64a2:	29 f1       	breq	.+74     	; 0x64ee <_ZN3DHT4readEb+0xa6>
    64a4:	ce 01       	movw	r24, r28
    64a6:	8e 5a       	subi	r24, 0xAE	; 174
    64a8:	9e 4f       	sbci	r25, 0xFE	; 254
    64aa:	fc 01       	movw	r30, r24
    64ac:	80 81       	ld	r24, Z
    64ae:	91 81       	ldd	r25, Z+1	; 0x01
    64b0:	fc 01       	movw	r30, r24
    64b2:	81 85       	ldd	r24, Z+9	; 0x09
    64b4:	92 85       	ldd	r25, Z+10	; 0x0a
    64b6:	a3 85       	ldd	r26, Z+11	; 0x0b
    64b8:	b4 85       	ldd	r27, Z+12	; 0x0c
    64ba:	2d 81       	ldd	r18, Y+5	; 0x05
    64bc:	3e 81       	ldd	r19, Y+6	; 0x06
    64be:	4f 81       	ldd	r20, Y+7	; 0x07
    64c0:	58 85       	ldd	r21, Y+8	; 0x08
    64c2:	59 01       	movw	r10, r18
    64c4:	6a 01       	movw	r12, r20
    64c6:	a8 1a       	sub	r10, r24
    64c8:	b9 0a       	sbc	r11, r25
    64ca:	ca 0a       	sbc	r12, r26
    64cc:	db 0a       	sbc	r13, r27
    64ce:	d6 01       	movw	r26, r12
    64d0:	c5 01       	movw	r24, r10
    64d2:	80 3d       	cpi	r24, 0xD0	; 208
    64d4:	97 40       	sbci	r25, 0x07	; 7
    64d6:	a1 05       	cpc	r26, r1
    64d8:	b1 05       	cpc	r27, r1
    64da:	48 f4       	brcc	.+18     	; 0x64ee <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    64dc:	ce 01       	movw	r24, r28
    64de:	8e 5a       	subi	r24, 0xAE	; 174
    64e0:	9e 4f       	sbci	r25, 0xFE	; 254
    64e2:	fc 01       	movw	r30, r24
    64e4:	80 81       	ld	r24, Z
    64e6:	91 81       	ldd	r25, Z+1	; 0x01
    64e8:	fc 01       	movw	r30, r24
    64ea:	f1 88       	ldd	r15, Z+17	; 0x11
    64ec:	5f c2       	rjmp	.+1214   	; 0x69ac <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    64ee:	ce 01       	movw	r24, r28
    64f0:	8e 5a       	subi	r24, 0xAE	; 174
    64f2:	9e 4f       	sbci	r25, 0xFE	; 254
    64f4:	fc 01       	movw	r30, r24
    64f6:	20 81       	ld	r18, Z
    64f8:	31 81       	ldd	r19, Z+1	; 0x01
    64fa:	8d 81       	ldd	r24, Y+5	; 0x05
    64fc:	9e 81       	ldd	r25, Y+6	; 0x06
    64fe:	af 81       	ldd	r26, Y+7	; 0x07
    6500:	b8 85       	ldd	r27, Y+8	; 0x08
    6502:	f9 01       	movw	r30, r18
    6504:	81 87       	std	Z+9, r24	; 0x09
    6506:	92 87       	std	Z+10, r25	; 0x0a
    6508:	a3 87       	std	Z+11, r26	; 0x0b
    650a:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    650c:	ce 01       	movw	r24, r28
    650e:	8e 5a       	subi	r24, 0xAE	; 174
    6510:	9e 4f       	sbci	r25, 0xFE	; 254
    6512:	fc 01       	movw	r30, r24
    6514:	80 81       	ld	r24, Z
    6516:	91 81       	ldd	r25, Z+1	; 0x01
    6518:	fc 01       	movw	r30, r24
    651a:	14 82       	std	Z+4, r1	; 0x04
    651c:	ce 01       	movw	r24, r28
    651e:	8e 5a       	subi	r24, 0xAE	; 174
    6520:	9e 4f       	sbci	r25, 0xFE	; 254
    6522:	fc 01       	movw	r30, r24
    6524:	80 81       	ld	r24, Z
    6526:	91 81       	ldd	r25, Z+1	; 0x01
    6528:	fc 01       	movw	r30, r24
    652a:	24 81       	ldd	r18, Z+4	; 0x04
    652c:	ce 01       	movw	r24, r28
    652e:	8e 5a       	subi	r24, 0xAE	; 174
    6530:	9e 4f       	sbci	r25, 0xFE	; 254
    6532:	fc 01       	movw	r30, r24
    6534:	80 81       	ld	r24, Z
    6536:	91 81       	ldd	r25, Z+1	; 0x01
    6538:	fc 01       	movw	r30, r24
    653a:	23 83       	std	Z+3, r18	; 0x03
    653c:	ce 01       	movw	r24, r28
    653e:	8e 5a       	subi	r24, 0xAE	; 174
    6540:	9e 4f       	sbci	r25, 0xFE	; 254
    6542:	fc 01       	movw	r30, r24
    6544:	80 81       	ld	r24, Z
    6546:	91 81       	ldd	r25, Z+1	; 0x01
    6548:	fc 01       	movw	r30, r24
    654a:	23 81       	ldd	r18, Z+3	; 0x03
    654c:	ce 01       	movw	r24, r28
    654e:	8e 5a       	subi	r24, 0xAE	; 174
    6550:	9e 4f       	sbci	r25, 0xFE	; 254
    6552:	fc 01       	movw	r30, r24
    6554:	80 81       	ld	r24, Z
    6556:	91 81       	ldd	r25, Z+1	; 0x01
    6558:	fc 01       	movw	r30, r24
    655a:	22 83       	std	Z+2, r18	; 0x02
    655c:	ce 01       	movw	r24, r28
    655e:	8e 5a       	subi	r24, 0xAE	; 174
    6560:	9e 4f       	sbci	r25, 0xFE	; 254
    6562:	fc 01       	movw	r30, r24
    6564:	80 81       	ld	r24, Z
    6566:	91 81       	ldd	r25, Z+1	; 0x01
    6568:	fc 01       	movw	r30, r24
    656a:	22 81       	ldd	r18, Z+2	; 0x02
    656c:	ce 01       	movw	r24, r28
    656e:	8e 5a       	subi	r24, 0xAE	; 174
    6570:	9e 4f       	sbci	r25, 0xFE	; 254
    6572:	fc 01       	movw	r30, r24
    6574:	80 81       	ld	r24, Z
    6576:	91 81       	ldd	r25, Z+1	; 0x01
    6578:	fc 01       	movw	r30, r24
    657a:	21 83       	std	Z+1, r18	; 0x01
    657c:	ce 01       	movw	r24, r28
    657e:	8e 5a       	subi	r24, 0xAE	; 174
    6580:	9e 4f       	sbci	r25, 0xFE	; 254
    6582:	fc 01       	movw	r30, r24
    6584:	80 81       	ld	r24, Z
    6586:	91 81       	ldd	r25, Z+1	; 0x01
    6588:	fc 01       	movw	r30, r24
    658a:	21 81       	ldd	r18, Z+1	; 0x01
    658c:	ce 01       	movw	r24, r28
    658e:	8e 5a       	subi	r24, 0xAE	; 174
    6590:	9e 4f       	sbci	r25, 0xFE	; 254
    6592:	fc 01       	movw	r30, r24
    6594:	80 81       	ld	r24, Z
    6596:	91 81       	ldd	r25, Z+1	; 0x01
    6598:	fc 01       	movw	r30, r24
    659a:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    659c:	ce 01       	movw	r24, r28
    659e:	8e 5a       	subi	r24, 0xAE	; 174
    65a0:	9e 4f       	sbci	r25, 0xFE	; 254
    65a2:	fc 01       	movw	r30, r24
    65a4:	80 81       	ld	r24, Z
    65a6:	91 81       	ldd	r25, Z+1	; 0x01
    65a8:	fc 01       	movw	r30, r24
    65aa:	85 81       	ldd	r24, Z+5	; 0x05
    65ac:	62 e0       	ldi	r22, 0x02	; 2
    65ae:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
  delay(1);
    65b2:	61 e0       	ldi	r22, 0x01	; 1
    65b4:	70 e0       	ldi	r23, 0x00	; 0
    65b6:	80 e0       	ldi	r24, 0x00	; 0
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	0e 94 a6 5e 	call	0xbd4c	; 0xbd4c <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    65be:	ce 01       	movw	r24, r28
    65c0:	8e 5a       	subi	r24, 0xAE	; 174
    65c2:	9e 4f       	sbci	r25, 0xFE	; 254
    65c4:	fc 01       	movw	r30, r24
    65c6:	80 81       	ld	r24, Z
    65c8:	91 81       	ldd	r25, Z+1	; 0x01
    65ca:	fc 01       	movw	r30, r24
    65cc:	85 81       	ldd	r24, Z+5	; 0x05
    65ce:	61 e0       	ldi	r22, 0x01	; 1
    65d0:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
  digitalWrite(_pin, LOW);
    65d4:	ce 01       	movw	r24, r28
    65d6:	8e 5a       	subi	r24, 0xAE	; 174
    65d8:	9e 4f       	sbci	r25, 0xFE	; 254
    65da:	fc 01       	movw	r30, r24
    65dc:	80 81       	ld	r24, Z
    65de:	91 81       	ldd	r25, Z+1	; 0x01
    65e0:	fc 01       	movw	r30, r24
    65e2:	85 81       	ldd	r24, Z+5	; 0x05
    65e4:	60 e0       	ldi	r22, 0x00	; 0
    65e6:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
  switch (_type) {
    65ea:	ce 01       	movw	r24, r28
    65ec:	8e 5a       	subi	r24, 0xAE	; 174
    65ee:	9e 4f       	sbci	r25, 0xFE	; 254
    65f0:	fc 01       	movw	r30, r24
    65f2:	80 81       	ld	r24, Z
    65f4:	91 81       	ldd	r25, Z+1	; 0x01
    65f6:	fc 01       	movw	r30, r24
    65f8:	86 81       	ldd	r24, Z+6	; 0x06
    65fa:	88 2f       	mov	r24, r24
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	45 97       	sbiw	r24, 0x15	; 21
    6600:	02 97       	sbiw	r24, 0x02	; 2
    6602:	28 f4       	brcc	.+10     	; 0x660e <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    6604:	8c e4       	ldi	r24, 0x4C	; 76
    6606:	94 e0       	ldi	r25, 0x04	; 4
    6608:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
    break;
    660c:	07 c0       	rjmp	.+14     	; 0x661c <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    660e:	64 e1       	ldi	r22, 0x14	; 20
    6610:	70 e0       	ldi	r23, 0x00	; 0
    6612:	80 e0       	ldi	r24, 0x00	; 0
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	0e 94 a6 5e 	call	0xbd4c	; 0xbd4c <delay>
    break;
    661a:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    661c:	ce 01       	movw	r24, r28
    661e:	8e 5a       	subi	r24, 0xAE	; 174
    6620:	9e 4f       	sbci	r25, 0xFE	; 254
    6622:	fc 01       	movw	r30, r24
    6624:	80 81       	ld	r24, Z
    6626:	91 81       	ldd	r25, Z+1	; 0x01
    6628:	fc 01       	movw	r30, r24
    662a:	85 81       	ldd	r24, Z+5	; 0x05
    662c:	62 e0       	ldi	r22, 0x02	; 2
    662e:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    6632:	ce 01       	movw	r24, r28
    6634:	8e 5a       	subi	r24, 0xAE	; 174
    6636:	9e 4f       	sbci	r25, 0xFE	; 254
    6638:	fc 01       	movw	r30, r24
    663a:	80 81       	ld	r24, Z
    663c:	91 81       	ldd	r25, Z+1	; 0x01
    663e:	fc 01       	movw	r30, r24
    6640:	82 89       	ldd	r24, Z+18	; 0x12
    6642:	88 2f       	mov	r24, r24
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    664a:	ce 01       	movw	r24, r28
    664c:	8f 5a       	subi	r24, 0xAF	; 175
    664e:	9e 4f       	sbci	r25, 0xFE	; 254
    6650:	2c dc       	rcall	.-1960   	; 0x5eaa <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    6652:	ce 01       	movw	r24, r28
    6654:	8e 5a       	subi	r24, 0xAE	; 174
    6656:	9e 4f       	sbci	r25, 0xFE	; 254
    6658:	fc 01       	movw	r30, r24
    665a:	80 81       	ld	r24, Z
    665c:	91 81       	ldd	r25, Z+1	; 0x01
    665e:	60 e0       	ldi	r22, 0x00	; 0
    6660:	b7 d1       	rcall	.+878    	; 0x69d0 <_ZN3DHT11expectPulseEb>
    6662:	dc 01       	movw	r26, r24
    6664:	cb 01       	movw	r24, r22
    6666:	21 e0       	ldi	r18, 0x01	; 1
    6668:	8f 3f       	cpi	r24, 0xFF	; 255
    666a:	9f 4f       	sbci	r25, 0xFF	; 255
    666c:	af 4f       	sbci	r26, 0xFF	; 255
    666e:	bf 4f       	sbci	r27, 0xFF	; 255
    6670:	09 f0       	breq	.+2      	; 0x6674 <_ZN3DHT4readEb+0x22c>
    6672:	20 e0       	ldi	r18, 0x00	; 0
    6674:	22 23       	and	r18, r18
    6676:	99 f0       	breq	.+38     	; 0x669e <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    6678:	ce 01       	movw	r24, r28
    667a:	8e 5a       	subi	r24, 0xAE	; 174
    667c:	9e 4f       	sbci	r25, 0xFE	; 254
    667e:	fc 01       	movw	r30, r24
    6680:	80 81       	ld	r24, Z
    6682:	91 81       	ldd	r25, Z+1	; 0x01
    6684:	fc 01       	movw	r30, r24
    6686:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    6688:	ce 01       	movw	r24, r28
    668a:	8e 5a       	subi	r24, 0xAE	; 174
    668c:	9e 4f       	sbci	r25, 0xFE	; 254
    668e:	fc 01       	movw	r30, r24
    6690:	80 81       	ld	r24, Z
    6692:	91 81       	ldd	r25, Z+1	; 0x01
    6694:	fc 01       	movw	r30, r24
    6696:	f1 88       	ldd	r15, Z+17	; 0x11
    6698:	00 e0       	ldi	r16, 0x00	; 0
    669a:	10 e0       	ldi	r17, 0x00	; 0
    669c:	72 c0       	rjmp	.+228    	; 0x6782 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    669e:	ce 01       	movw	r24, r28
    66a0:	8e 5a       	subi	r24, 0xAE	; 174
    66a2:	9e 4f       	sbci	r25, 0xFE	; 254
    66a4:	fc 01       	movw	r30, r24
    66a6:	80 81       	ld	r24, Z
    66a8:	91 81       	ldd	r25, Z+1	; 0x01
    66aa:	61 e0       	ldi	r22, 0x01	; 1
    66ac:	91 d1       	rcall	.+802    	; 0x69d0 <_ZN3DHT11expectPulseEb>
    66ae:	dc 01       	movw	r26, r24
    66b0:	cb 01       	movw	r24, r22
    66b2:	21 e0       	ldi	r18, 0x01	; 1
    66b4:	8f 3f       	cpi	r24, 0xFF	; 255
    66b6:	9f 4f       	sbci	r25, 0xFF	; 255
    66b8:	af 4f       	sbci	r26, 0xFF	; 255
    66ba:	bf 4f       	sbci	r27, 0xFF	; 255
    66bc:	09 f0       	breq	.+2      	; 0x66c0 <_ZN3DHT4readEb+0x278>
    66be:	20 e0       	ldi	r18, 0x00	; 0
    66c0:	22 23       	and	r18, r18
    66c2:	99 f0       	breq	.+38     	; 0x66ea <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    66c4:	ce 01       	movw	r24, r28
    66c6:	8e 5a       	subi	r24, 0xAE	; 174
    66c8:	9e 4f       	sbci	r25, 0xFE	; 254
    66ca:	fc 01       	movw	r30, r24
    66cc:	80 81       	ld	r24, Z
    66ce:	91 81       	ldd	r25, Z+1	; 0x01
    66d0:	fc 01       	movw	r30, r24
    66d2:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    66d4:	ce 01       	movw	r24, r28
    66d6:	8e 5a       	subi	r24, 0xAE	; 174
    66d8:	9e 4f       	sbci	r25, 0xFE	; 254
    66da:	fc 01       	movw	r30, r24
    66dc:	80 81       	ld	r24, Z
    66de:	91 81       	ldd	r25, Z+1	; 0x01
    66e0:	fc 01       	movw	r30, r24
    66e2:	f1 88       	ldd	r15, Z+17	; 0x11
    66e4:	00 e0       	ldi	r16, 0x00	; 0
    66e6:	10 e0       	ldi	r17, 0x00	; 0
    66e8:	4c c0       	rjmp	.+152    	; 0x6782 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    66ea:	1a 82       	std	Y+2, r1	; 0x02
    66ec:	19 82       	std	Y+1, r1	; 0x01
    66ee:	89 81       	ldd	r24, Y+1	; 0x01
    66f0:	9a 81       	ldd	r25, Y+2	; 0x02
    66f2:	80 35       	cpi	r24, 0x50	; 80
    66f4:	91 05       	cpc	r25, r1
    66f6:	0c f0       	brlt	.+2      	; 0x66fa <_ZN3DHT4readEb+0x2b2>
    66f8:	42 c0       	rjmp	.+132    	; 0x677e <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    66fa:	ce 01       	movw	r24, r28
    66fc:	8e 5a       	subi	r24, 0xAE	; 174
    66fe:	9e 4f       	sbci	r25, 0xFE	; 254
    6700:	fc 01       	movw	r30, r24
    6702:	80 81       	ld	r24, Z
    6704:	91 81       	ldd	r25, Z+1	; 0x01
    6706:	60 e0       	ldi	r22, 0x00	; 0
    6708:	63 d1       	rcall	.+710    	; 0x69d0 <_ZN3DHT11expectPulseEb>
    670a:	dc 01       	movw	r26, r24
    670c:	cb 01       	movw	r24, r22
    670e:	29 81       	ldd	r18, Y+1	; 0x01
    6710:	3a 81       	ldd	r19, Y+2	; 0x02
    6712:	22 0f       	add	r18, r18
    6714:	33 1f       	adc	r19, r19
    6716:	22 0f       	add	r18, r18
    6718:	33 1f       	adc	r19, r19
    671a:	ae 01       	movw	r20, r28
    671c:	4f 5f       	subi	r20, 0xFF	; 255
    671e:	5f 4f       	sbci	r21, 0xFF	; 255
    6720:	24 0f       	add	r18, r20
    6722:	35 1f       	adc	r19, r21
    6724:	20 5f       	subi	r18, 0xF0	; 240
    6726:	3f 4f       	sbci	r19, 0xFF	; 255
    6728:	f9 01       	movw	r30, r18
    672a:	80 83       	st	Z, r24
    672c:	91 83       	std	Z+1, r25	; 0x01
    672e:	a2 83       	std	Z+2, r26	; 0x02
    6730:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    6732:	89 81       	ldd	r24, Y+1	; 0x01
    6734:	9a 81       	ldd	r25, Y+2	; 0x02
    6736:	8c 01       	movw	r16, r24
    6738:	0f 5f       	subi	r16, 0xFF	; 255
    673a:	1f 4f       	sbci	r17, 0xFF	; 255
    673c:	ce 01       	movw	r24, r28
    673e:	8e 5a       	subi	r24, 0xAE	; 174
    6740:	9e 4f       	sbci	r25, 0xFE	; 254
    6742:	fc 01       	movw	r30, r24
    6744:	80 81       	ld	r24, Z
    6746:	91 81       	ldd	r25, Z+1	; 0x01
    6748:	61 e0       	ldi	r22, 0x01	; 1
    674a:	42 d1       	rcall	.+644    	; 0x69d0 <_ZN3DHT11expectPulseEb>
    674c:	dc 01       	movw	r26, r24
    674e:	cb 01       	movw	r24, r22
    6750:	98 01       	movw	r18, r16
    6752:	22 0f       	add	r18, r18
    6754:	33 1f       	adc	r19, r19
    6756:	22 0f       	add	r18, r18
    6758:	33 1f       	adc	r19, r19
    675a:	ae 01       	movw	r20, r28
    675c:	4f 5f       	subi	r20, 0xFF	; 255
    675e:	5f 4f       	sbci	r21, 0xFF	; 255
    6760:	24 0f       	add	r18, r20
    6762:	35 1f       	adc	r19, r21
    6764:	20 5f       	subi	r18, 0xF0	; 240
    6766:	3f 4f       	sbci	r19, 0xFF	; 255
    6768:	f9 01       	movw	r30, r18
    676a:	80 83       	st	Z, r24
    676c:	91 83       	std	Z+1, r25	; 0x01
    676e:	a2 83       	std	Z+2, r26	; 0x02
    6770:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    6772:	89 81       	ldd	r24, Y+1	; 0x01
    6774:	9a 81       	ldd	r25, Y+2	; 0x02
    6776:	02 96       	adiw	r24, 0x02	; 2
    6778:	9a 83       	std	Y+2, r25	; 0x02
    677a:	89 83       	std	Y+1, r24	; 0x01
    677c:	b8 cf       	rjmp	.-144    	; 0x66ee <_ZN3DHT4readEb+0x2a6>
    677e:	01 e0       	ldi	r16, 0x01	; 1
    6780:	10 e0       	ldi	r17, 0x00	; 0
    6782:	ce 01       	movw	r24, r28
    6784:	8f 5a       	subi	r24, 0xAF	; 175
    6786:	9e 4f       	sbci	r25, 0xFE	; 254
    6788:	9f db       	rcall	.-2242   	; 0x5ec8 <_ZN13InterruptLockD1Ev>
    678a:	01 30       	cpi	r16, 0x01	; 1
    678c:	11 05       	cpc	r17, r1
    678e:	09 f0       	breq	.+2      	; 0x6792 <_ZN3DHT4readEb+0x34a>
    6790:	0d c1       	rjmp	.+538    	; 0x69ac <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    6792:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    6794:	1c 82       	std	Y+4, r1	; 0x04
    6796:	1b 82       	std	Y+3, r1	; 0x03
    6798:	8b 81       	ldd	r24, Y+3	; 0x03
    679a:	9c 81       	ldd	r25, Y+4	; 0x04
    679c:	88 97       	sbiw	r24, 0x28	; 40
    679e:	0c f0       	brlt	.+2      	; 0x67a2 <_ZN3DHT4readEb+0x35a>
    67a0:	a7 c0       	rjmp	.+334    	; 0x68f0 <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    67a2:	8b 81       	ldd	r24, Y+3	; 0x03
    67a4:	9c 81       	ldd	r25, Y+4	; 0x04
    67a6:	88 0f       	add	r24, r24
    67a8:	99 1f       	adc	r25, r25
    67aa:	88 0f       	add	r24, r24
    67ac:	99 1f       	adc	r25, r25
    67ae:	88 0f       	add	r24, r24
    67b0:	99 1f       	adc	r25, r25
    67b2:	9e 01       	movw	r18, r28
    67b4:	2f 5f       	subi	r18, 0xFF	; 255
    67b6:	3f 4f       	sbci	r19, 0xFF	; 255
    67b8:	82 0f       	add	r24, r18
    67ba:	93 1f       	adc	r25, r19
    67bc:	40 96       	adiw	r24, 0x10	; 16
    67be:	fc 01       	movw	r30, r24
    67c0:	80 81       	ld	r24, Z
    67c2:	91 81       	ldd	r25, Z+1	; 0x01
    67c4:	a2 81       	ldd	r26, Z+2	; 0x02
    67c6:	b3 81       	ldd	r27, Z+3	; 0x03
    67c8:	89 87       	std	Y+9, r24	; 0x09
    67ca:	9a 87       	std	Y+10, r25	; 0x0a
    67cc:	ab 87       	std	Y+11, r26	; 0x0b
    67ce:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    67d0:	8b 81       	ldd	r24, Y+3	; 0x03
    67d2:	9c 81       	ldd	r25, Y+4	; 0x04
    67d4:	88 0f       	add	r24, r24
    67d6:	99 1f       	adc	r25, r25
    67d8:	01 96       	adiw	r24, 0x01	; 1
    67da:	88 0f       	add	r24, r24
    67dc:	99 1f       	adc	r25, r25
    67de:	88 0f       	add	r24, r24
    67e0:	99 1f       	adc	r25, r25
    67e2:	9e 01       	movw	r18, r28
    67e4:	2f 5f       	subi	r18, 0xFF	; 255
    67e6:	3f 4f       	sbci	r19, 0xFF	; 255
    67e8:	82 0f       	add	r24, r18
    67ea:	93 1f       	adc	r25, r19
    67ec:	40 96       	adiw	r24, 0x10	; 16
    67ee:	fc 01       	movw	r30, r24
    67f0:	80 81       	ld	r24, Z
    67f2:	91 81       	ldd	r25, Z+1	; 0x01
    67f4:	a2 81       	ldd	r26, Z+2	; 0x02
    67f6:	b3 81       	ldd	r27, Z+3	; 0x03
    67f8:	8d 87       	std	Y+13, r24	; 0x0d
    67fa:	9e 87       	std	Y+14, r25	; 0x0e
    67fc:	af 87       	std	Y+15, r26	; 0x0f
    67fe:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    6800:	89 85       	ldd	r24, Y+9	; 0x09
    6802:	9a 85       	ldd	r25, Y+10	; 0x0a
    6804:	ab 85       	ldd	r26, Y+11	; 0x0b
    6806:	bc 85       	ldd	r27, Y+12	; 0x0c
    6808:	8f 3f       	cpi	r24, 0xFF	; 255
    680a:	9f 4f       	sbci	r25, 0xFF	; 255
    680c:	af 4f       	sbci	r26, 0xFF	; 255
    680e:	bf 4f       	sbci	r27, 0xFF	; 255
    6810:	49 f0       	breq	.+18     	; 0x6824 <_ZN3DHT4readEb+0x3dc>
    6812:	8d 85       	ldd	r24, Y+13	; 0x0d
    6814:	9e 85       	ldd	r25, Y+14	; 0x0e
    6816:	af 85       	ldd	r26, Y+15	; 0x0f
    6818:	b8 89       	ldd	r27, Y+16	; 0x10
    681a:	8f 3f       	cpi	r24, 0xFF	; 255
    681c:	9f 4f       	sbci	r25, 0xFF	; 255
    681e:	af 4f       	sbci	r26, 0xFF	; 255
    6820:	bf 4f       	sbci	r27, 0xFF	; 255
    6822:	89 f4       	brne	.+34     	; 0x6846 <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    6824:	ce 01       	movw	r24, r28
    6826:	8e 5a       	subi	r24, 0xAE	; 174
    6828:	9e 4f       	sbci	r25, 0xFE	; 254
    682a:	fc 01       	movw	r30, r24
    682c:	80 81       	ld	r24, Z
    682e:	91 81       	ldd	r25, Z+1	; 0x01
    6830:	fc 01       	movw	r30, r24
    6832:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    6834:	ce 01       	movw	r24, r28
    6836:	8e 5a       	subi	r24, 0xAE	; 174
    6838:	9e 4f       	sbci	r25, 0xFE	; 254
    683a:	fc 01       	movw	r30, r24
    683c:	80 81       	ld	r24, Z
    683e:	91 81       	ldd	r25, Z+1	; 0x01
    6840:	fc 01       	movw	r30, r24
    6842:	f1 88       	ldd	r15, Z+17	; 0x11
    6844:	b3 c0       	rjmp	.+358    	; 0x69ac <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    6846:	8b 81       	ldd	r24, Y+3	; 0x03
    6848:	9c 81       	ldd	r25, Y+4	; 0x04
    684a:	99 23       	and	r25, r25
    684c:	0c f4       	brge	.+2      	; 0x6850 <_ZN3DHT4readEb+0x408>
    684e:	07 96       	adiw	r24, 0x07	; 7
    6850:	95 95       	asr	r25
    6852:	87 95       	ror	r24
    6854:	95 95       	asr	r25
    6856:	87 95       	ror	r24
    6858:	95 95       	asr	r25
    685a:	87 95       	ror	r24
    685c:	9e 01       	movw	r18, r28
    685e:	2e 5a       	subi	r18, 0xAE	; 174
    6860:	3e 4f       	sbci	r19, 0xFE	; 254
    6862:	f9 01       	movw	r30, r18
    6864:	20 81       	ld	r18, Z
    6866:	31 81       	ldd	r19, Z+1	; 0x01
    6868:	28 0f       	add	r18, r24
    686a:	39 1f       	adc	r19, r25
    686c:	f9 01       	movw	r30, r18
    686e:	20 81       	ld	r18, Z
    6870:	42 2f       	mov	r20, r18
    6872:	44 0f       	add	r20, r20
    6874:	9e 01       	movw	r18, r28
    6876:	2e 5a       	subi	r18, 0xAE	; 174
    6878:	3e 4f       	sbci	r19, 0xFE	; 254
    687a:	f9 01       	movw	r30, r18
    687c:	20 81       	ld	r18, Z
    687e:	31 81       	ldd	r19, Z+1	; 0x01
    6880:	82 0f       	add	r24, r18
    6882:	93 1f       	adc	r25, r19
    6884:	fc 01       	movw	r30, r24
    6886:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    6888:	2d 85       	ldd	r18, Y+13	; 0x0d
    688a:	3e 85       	ldd	r19, Y+14	; 0x0e
    688c:	4f 85       	ldd	r20, Y+15	; 0x0f
    688e:	58 89       	ldd	r21, Y+16	; 0x10
    6890:	89 85       	ldd	r24, Y+9	; 0x09
    6892:	9a 85       	ldd	r25, Y+10	; 0x0a
    6894:	ab 85       	ldd	r26, Y+11	; 0x0b
    6896:	bc 85       	ldd	r27, Y+12	; 0x0c
    6898:	82 17       	cp	r24, r18
    689a:	93 07       	cpc	r25, r19
    689c:	a4 07       	cpc	r26, r20
    689e:	b5 07       	cpc	r27, r21
    68a0:	08 f5       	brcc	.+66     	; 0x68e4 <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    68a2:	8b 81       	ldd	r24, Y+3	; 0x03
    68a4:	9c 81       	ldd	r25, Y+4	; 0x04
    68a6:	99 23       	and	r25, r25
    68a8:	0c f4       	brge	.+2      	; 0x68ac <_ZN3DHT4readEb+0x464>
    68aa:	07 96       	adiw	r24, 0x07	; 7
    68ac:	95 95       	asr	r25
    68ae:	87 95       	ror	r24
    68b0:	95 95       	asr	r25
    68b2:	87 95       	ror	r24
    68b4:	95 95       	asr	r25
    68b6:	87 95       	ror	r24
    68b8:	9e 01       	movw	r18, r28
    68ba:	2e 5a       	subi	r18, 0xAE	; 174
    68bc:	3e 4f       	sbci	r19, 0xFE	; 254
    68be:	f9 01       	movw	r30, r18
    68c0:	20 81       	ld	r18, Z
    68c2:	31 81       	ldd	r19, Z+1	; 0x01
    68c4:	28 0f       	add	r18, r24
    68c6:	39 1f       	adc	r19, r25
    68c8:	f9 01       	movw	r30, r18
    68ca:	20 81       	ld	r18, Z
    68cc:	42 2f       	mov	r20, r18
    68ce:	41 60       	ori	r20, 0x01	; 1
    68d0:	9e 01       	movw	r18, r28
    68d2:	2e 5a       	subi	r18, 0xAE	; 174
    68d4:	3e 4f       	sbci	r19, 0xFE	; 254
    68d6:	f9 01       	movw	r30, r18
    68d8:	20 81       	ld	r18, Z
    68da:	31 81       	ldd	r19, Z+1	; 0x01
    68dc:	82 0f       	add	r24, r18
    68de:	93 1f       	adc	r25, r19
    68e0:	fc 01       	movw	r30, r24
    68e2:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    68e4:	8b 81       	ldd	r24, Y+3	; 0x03
    68e6:	9c 81       	ldd	r25, Y+4	; 0x04
    68e8:	01 96       	adiw	r24, 0x01	; 1
    68ea:	9c 83       	std	Y+4, r25	; 0x04
    68ec:	8b 83       	std	Y+3, r24	; 0x03
    68ee:	54 cf       	rjmp	.-344    	; 0x6798 <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    68f0:	ce 01       	movw	r24, r28
    68f2:	8e 5a       	subi	r24, 0xAE	; 174
    68f4:	9e 4f       	sbci	r25, 0xFE	; 254
    68f6:	fc 01       	movw	r30, r24
    68f8:	80 81       	ld	r24, Z
    68fa:	91 81       	ldd	r25, Z+1	; 0x01
    68fc:	fc 01       	movw	r30, r24
    68fe:	84 81       	ldd	r24, Z+4	; 0x04
    6900:	28 2f       	mov	r18, r24
    6902:	30 e0       	ldi	r19, 0x00	; 0
    6904:	ce 01       	movw	r24, r28
    6906:	8e 5a       	subi	r24, 0xAE	; 174
    6908:	9e 4f       	sbci	r25, 0xFE	; 254
    690a:	fc 01       	movw	r30, r24
    690c:	80 81       	ld	r24, Z
    690e:	91 81       	ldd	r25, Z+1	; 0x01
    6910:	fc 01       	movw	r30, r24
    6912:	80 81       	ld	r24, Z
    6914:	48 2f       	mov	r20, r24
    6916:	50 e0       	ldi	r21, 0x00	; 0
    6918:	ce 01       	movw	r24, r28
    691a:	8e 5a       	subi	r24, 0xAE	; 174
    691c:	9e 4f       	sbci	r25, 0xFE	; 254
    691e:	fc 01       	movw	r30, r24
    6920:	80 81       	ld	r24, Z
    6922:	91 81       	ldd	r25, Z+1	; 0x01
    6924:	fc 01       	movw	r30, r24
    6926:	81 81       	ldd	r24, Z+1	; 0x01
    6928:	88 2f       	mov	r24, r24
    692a:	90 e0       	ldi	r25, 0x00	; 0
    692c:	48 0f       	add	r20, r24
    692e:	59 1f       	adc	r21, r25
    6930:	ce 01       	movw	r24, r28
    6932:	8e 5a       	subi	r24, 0xAE	; 174
    6934:	9e 4f       	sbci	r25, 0xFE	; 254
    6936:	fc 01       	movw	r30, r24
    6938:	80 81       	ld	r24, Z
    693a:	91 81       	ldd	r25, Z+1	; 0x01
    693c:	fc 01       	movw	r30, r24
    693e:	82 81       	ldd	r24, Z+2	; 0x02
    6940:	88 2f       	mov	r24, r24
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	48 0f       	add	r20, r24
    6946:	59 1f       	adc	r21, r25
    6948:	ce 01       	movw	r24, r28
    694a:	8e 5a       	subi	r24, 0xAE	; 174
    694c:	9e 4f       	sbci	r25, 0xFE	; 254
    694e:	fc 01       	movw	r30, r24
    6950:	80 81       	ld	r24, Z
    6952:	91 81       	ldd	r25, Z+1	; 0x01
    6954:	fc 01       	movw	r30, r24
    6956:	83 81       	ldd	r24, Z+3	; 0x03
    6958:	88 2f       	mov	r24, r24
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	84 0f       	add	r24, r20
    695e:	95 1f       	adc	r25, r21
    6960:	99 27       	eor	r25, r25
    6962:	28 17       	cp	r18, r24
    6964:	39 07       	cpc	r19, r25
    6966:	91 f4       	brne	.+36     	; 0x698c <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    6968:	ce 01       	movw	r24, r28
    696a:	8e 5a       	subi	r24, 0xAE	; 174
    696c:	9e 4f       	sbci	r25, 0xFE	; 254
    696e:	fc 01       	movw	r30, r24
    6970:	80 81       	ld	r24, Z
    6972:	91 81       	ldd	r25, Z+1	; 0x01
    6974:	21 e0       	ldi	r18, 0x01	; 1
    6976:	fc 01       	movw	r30, r24
    6978:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    697a:	ce 01       	movw	r24, r28
    697c:	8e 5a       	subi	r24, 0xAE	; 174
    697e:	9e 4f       	sbci	r25, 0xFE	; 254
    6980:	fc 01       	movw	r30, r24
    6982:	80 81       	ld	r24, Z
    6984:	91 81       	ldd	r25, Z+1	; 0x01
    6986:	fc 01       	movw	r30, r24
    6988:	f1 88       	ldd	r15, Z+17	; 0x11
    698a:	10 c0       	rjmp	.+32     	; 0x69ac <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    698c:	ce 01       	movw	r24, r28
    698e:	8e 5a       	subi	r24, 0xAE	; 174
    6990:	9e 4f       	sbci	r25, 0xFE	; 254
    6992:	fc 01       	movw	r30, r24
    6994:	80 81       	ld	r24, Z
    6996:	91 81       	ldd	r25, Z+1	; 0x01
    6998:	fc 01       	movw	r30, r24
    699a:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    699c:	ce 01       	movw	r24, r28
    699e:	8e 5a       	subi	r24, 0xAE	; 174
    69a0:	9e 4f       	sbci	r25, 0xFE	; 254
    69a2:	fc 01       	movw	r30, r24
    69a4:	80 81       	ld	r24, Z
    69a6:	91 81       	ldd	r25, Z+1	; 0x01
    69a8:	fc 01       	movw	r30, r24
    69aa:	f1 88       	ldd	r15, Z+17	; 0x11
    69ac:	8f 2d       	mov	r24, r15
  }
}
    69ae:	cc 5a       	subi	r28, 0xAC	; 172
    69b0:	de 4f       	sbci	r29, 0xFE	; 254
    69b2:	0f b6       	in	r0, 0x3f	; 63
    69b4:	f8 94       	cli
    69b6:	de bf       	out	0x3e, r29	; 62
    69b8:	0f be       	out	0x3f, r0	; 63
    69ba:	cd bf       	out	0x3d, r28	; 61
    69bc:	df 91       	pop	r29
    69be:	cf 91       	pop	r28
    69c0:	1f 91       	pop	r17
    69c2:	0f 91       	pop	r16
    69c4:	ff 90       	pop	r15
    69c6:	df 90       	pop	r13
    69c8:	cf 90       	pop	r12
    69ca:	bf 90       	pop	r11
    69cc:	af 90       	pop	r10
    69ce:	08 95       	ret

000069d0 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    69d0:	cf 93       	push	r28
    69d2:	df 93       	push	r29
    69d4:	cd b7       	in	r28, 0x3d	; 61
    69d6:	de b7       	in	r29, 0x3e	; 62
    69d8:	2a 97       	sbiw	r28, 0x0a	; 10
    69da:	0f b6       	in	r0, 0x3f	; 63
    69dc:	f8 94       	cli
    69de:	de bf       	out	0x3e, r29	; 62
    69e0:	0f be       	out	0x3f, r0	; 63
    69e2:	cd bf       	out	0x3d, r28	; 61
    69e4:	99 87       	std	Y+9, r25	; 0x09
    69e6:	88 87       	std	Y+8, r24	; 0x08
    69e8:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    69ea:	1a 82       	std	Y+2, r1	; 0x02
    69ec:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    69ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    69f0:	88 23       	and	r24, r24
    69f2:	29 f0       	breq	.+10     	; 0x69fe <_ZN3DHT11expectPulseEb+0x2e>
    69f4:	88 85       	ldd	r24, Y+8	; 0x08
    69f6:	99 85       	ldd	r25, Y+9	; 0x09
    69f8:	fc 01       	movw	r30, r24
    69fa:	87 81       	ldd	r24, Z+7	; 0x07
    69fc:	01 c0       	rjmp	.+2      	; 0x6a00 <_ZN3DHT11expectPulseEb+0x30>
    69fe:	80 e0       	ldi	r24, 0x00	; 0
    6a00:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    6a02:	88 85       	ldd	r24, Y+8	; 0x08
    6a04:	99 85       	ldd	r25, Y+9	; 0x09
    6a06:	fc 01       	movw	r30, r24
    6a08:	80 85       	ldd	r24, Z+8	; 0x08
    6a0a:	88 2f       	mov	r24, r24
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	88 0f       	add	r24, r24
    6a10:	99 1f       	adc	r25, r25
    6a12:	8b 5c       	subi	r24, 0xCB	; 203
    6a14:	93 4f       	sbci	r25, 0xF3	; 243
    6a16:	9d 83       	std	Y+5, r25	; 0x05
    6a18:	8c 83       	std	Y+4, r24	; 0x04
    6a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    6a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    6a1e:	fc 01       	movw	r30, r24
    6a20:	25 91       	lpm	r18, Z+
    6a22:	34 91       	lpm	r19, Z
    6a24:	cf 01       	movw	r24, r30
    6a26:	3f 83       	std	Y+7, r19	; 0x07
    6a28:	2e 83       	std	Y+6, r18	; 0x06
    6a2a:	9d 83       	std	Y+5, r25	; 0x05
    6a2c:	8c 83       	std	Y+4, r24	; 0x04
    6a2e:	8e 81       	ldd	r24, Y+6	; 0x06
    6a30:	9f 81       	ldd	r25, Y+7	; 0x07
    6a32:	fc 01       	movw	r30, r24
    6a34:	20 81       	ld	r18, Z
    6a36:	88 85       	ldd	r24, Y+8	; 0x08
    6a38:	99 85       	ldd	r25, Y+9	; 0x09
    6a3a:	fc 01       	movw	r30, r24
    6a3c:	87 81       	ldd	r24, Z+7	; 0x07
    6a3e:	28 23       	and	r18, r24
    6a40:	81 e0       	ldi	r24, 0x01	; 1
    6a42:	9b 81       	ldd	r25, Y+3	; 0x03
    6a44:	29 17       	cp	r18, r25
    6a46:	09 f0       	breq	.+2      	; 0x6a4a <_ZN3DHT11expectPulseEb+0x7a>
    6a48:	80 e0       	ldi	r24, 0x00	; 0
    6a4a:	88 23       	and	r24, r24
    6a4c:	f9 f0       	breq	.+62     	; 0x6a8c <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    6a4e:	89 81       	ldd	r24, Y+1	; 0x01
    6a50:	9a 81       	ldd	r25, Y+2	; 0x02
    6a52:	9c 01       	movw	r18, r24
    6a54:	2f 5f       	subi	r18, 0xFF	; 255
    6a56:	3f 4f       	sbci	r19, 0xFF	; 255
    6a58:	3a 83       	std	Y+2, r19	; 0x02
    6a5a:	29 83       	std	Y+1, r18	; 0x01
    6a5c:	9c 01       	movw	r18, r24
    6a5e:	40 e0       	ldi	r20, 0x00	; 0
    6a60:	50 e0       	ldi	r21, 0x00	; 0
    6a62:	88 85       	ldd	r24, Y+8	; 0x08
    6a64:	99 85       	ldd	r25, Y+9	; 0x09
    6a66:	fc 01       	movw	r30, r24
    6a68:	85 85       	ldd	r24, Z+13	; 0x0d
    6a6a:	96 85       	ldd	r25, Z+14	; 0x0e
    6a6c:	a7 85       	ldd	r26, Z+15	; 0x0f
    6a6e:	b0 89       	ldd	r27, Z+16	; 0x10
    6a70:	61 e0       	ldi	r22, 0x01	; 1
    6a72:	28 17       	cp	r18, r24
    6a74:	39 07       	cpc	r19, r25
    6a76:	4a 07       	cpc	r20, r26
    6a78:	5b 07       	cpc	r21, r27
    6a7a:	08 f4       	brcc	.+2      	; 0x6a7e <_ZN3DHT11expectPulseEb+0xae>
    6a7c:	60 e0       	ldi	r22, 0x00	; 0
    6a7e:	66 23       	and	r22, r22
    6a80:	09 f4       	brne	.+2      	; 0x6a84 <_ZN3DHT11expectPulseEb+0xb4>
    6a82:	bf cf       	rjmp	.-130    	; 0x6a02 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    6a84:	8f ef       	ldi	r24, 0xFF	; 255
    6a86:	9f ef       	ldi	r25, 0xFF	; 255
    6a88:	dc 01       	movw	r26, r24
    6a8a:	05 c0       	rjmp	.+10     	; 0x6a96 <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    6a8c:	89 81       	ldd	r24, Y+1	; 0x01
    6a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a90:	cc 01       	movw	r24, r24
    6a92:	a0 e0       	ldi	r26, 0x00	; 0
    6a94:	b0 e0       	ldi	r27, 0x00	; 0
}
    6a96:	bc 01       	movw	r22, r24
    6a98:	cd 01       	movw	r24, r26
    6a9a:	2a 96       	adiw	r28, 0x0a	; 10
    6a9c:	0f b6       	in	r0, 0x3f	; 63
    6a9e:	f8 94       	cli
    6aa0:	de bf       	out	0x3e, r29	; 62
    6aa2:	0f be       	out	0x3f, r0	; 63
    6aa4:	cd bf       	out	0x3d, r28	; 61
    6aa6:	df 91       	pop	r29
    6aa8:	cf 91       	pop	r28
    6aaa:	08 95       	ret

00006aac <_ZN7TwoWire5writeEi>:
	{
		return 7;
	}

	return dow;
}
    6aac:	cf 93       	push	r28
    6aae:	df 93       	push	r29
    6ab0:	00 d0       	rcall	.+0      	; 0x6ab2 <_ZN7TwoWire5writeEi+0x6>
    6ab2:	1f 92       	push	r1
    6ab4:	cd b7       	in	r28, 0x3d	; 61
    6ab6:	de b7       	in	r29, 0x3e	; 62
    6ab8:	9a 83       	std	Y+2, r25	; 0x02
    6aba:	89 83       	std	Y+1, r24	; 0x01
    6abc:	7c 83       	std	Y+4, r23	; 0x04
    6abe:	6b 83       	std	Y+3, r22	; 0x03
    6ac0:	89 81       	ldd	r24, Y+1	; 0x01
    6ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ac4:	fc 01       	movw	r30, r24
    6ac6:	80 81       	ld	r24, Z
    6ac8:	91 81       	ldd	r25, Z+1	; 0x01
    6aca:	fc 01       	movw	r30, r24
    6acc:	20 81       	ld	r18, Z
    6ace:	31 81       	ldd	r19, Z+1	; 0x01
    6ad0:	4b 81       	ldd	r20, Y+3	; 0x03
    6ad2:	89 81       	ldd	r24, Y+1	; 0x01
    6ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ad6:	64 2f       	mov	r22, r20
    6ad8:	f9 01       	movw	r30, r18
    6ada:	19 95       	eicall
    6adc:	0f 90       	pop	r0
    6ade:	0f 90       	pop	r0
    6ae0:	0f 90       	pop	r0
    6ae2:	0f 90       	pop	r0
    6ae4:	df 91       	pop	r29
    6ae6:	cf 91       	pop	r28
    6ae8:	08 95       	ret

00006aea <_ZN6DS32315beginEv>:
    6aea:	cf 93       	push	r28
    6aec:	df 93       	push	r29
    6aee:	1f 92       	push	r1
    6af0:	1f 92       	push	r1
    6af2:	cd b7       	in	r28, 0x3d	; 61
    6af4:	de b7       	in	r29, 0x3e	; 62
    6af6:	9a 83       	std	Y+2, r25	; 0x02
    6af8:	89 83       	std	Y+1, r24	; 0x01
    6afa:	81 ec       	ldi	r24, 0xC1	; 193
    6afc:	95 e0       	ldi	r25, 0x05	; 5
    6afe:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <_ZN7TwoWire5beginEv>
    6b02:	89 81       	ldd	r24, Y+1	; 0x01
    6b04:	9a 81       	ldd	r25, Y+2	; 0x02
    6b06:	40 e0       	ldi	r20, 0x00	; 0
    6b08:	61 e0       	ldi	r22, 0x01	; 1
    6b0a:	e3 d0       	rcall	.+454    	; 0x6cd2 <_ZN6DS323110setBatteryEbb>
    6b0c:	89 81       	ldd	r24, Y+1	; 0x01
    6b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    6b10:	20 ed       	ldi	r18, 0xD0	; 208
    6b12:	37 e0       	ldi	r19, 0x07	; 7
    6b14:	fc 01       	movw	r30, r24
    6b16:	31 83       	std	Z+1, r19	; 0x01
    6b18:	20 83       	st	Z, r18
    6b1a:	89 81       	ldd	r24, Y+1	; 0x01
    6b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    6b1e:	21 e0       	ldi	r18, 0x01	; 1
    6b20:	fc 01       	movw	r30, r24
    6b22:	22 83       	std	Z+2, r18	; 0x02
    6b24:	89 81       	ldd	r24, Y+1	; 0x01
    6b26:	9a 81       	ldd	r25, Y+2	; 0x02
    6b28:	21 e0       	ldi	r18, 0x01	; 1
    6b2a:	fc 01       	movw	r30, r24
    6b2c:	23 83       	std	Z+3, r18	; 0x03
    6b2e:	89 81       	ldd	r24, Y+1	; 0x01
    6b30:	9a 81       	ldd	r25, Y+2	; 0x02
    6b32:	fc 01       	movw	r30, r24
    6b34:	14 82       	std	Z+4, r1	; 0x04
    6b36:	89 81       	ldd	r24, Y+1	; 0x01
    6b38:	9a 81       	ldd	r25, Y+2	; 0x02
    6b3a:	fc 01       	movw	r30, r24
    6b3c:	15 82       	std	Z+5, r1	; 0x05
    6b3e:	89 81       	ldd	r24, Y+1	; 0x01
    6b40:	9a 81       	ldd	r25, Y+2	; 0x02
    6b42:	fc 01       	movw	r30, r24
    6b44:	16 82       	std	Z+6, r1	; 0x06
    6b46:	89 81       	ldd	r24, Y+1	; 0x01
    6b48:	9a 81       	ldd	r25, Y+2	; 0x02
    6b4a:	26 e0       	ldi	r18, 0x06	; 6
    6b4c:	fc 01       	movw	r30, r24
    6b4e:	27 83       	std	Z+7, r18	; 0x07
    6b50:	29 81       	ldd	r18, Y+1	; 0x01
    6b52:	3a 81       	ldd	r19, Y+2	; 0x02
    6b54:	80 e7       	ldi	r24, 0x70	; 112
    6b56:	95 e3       	ldi	r25, 0x35	; 53
    6b58:	ad e6       	ldi	r26, 0x6D	; 109
    6b5a:	b8 e3       	ldi	r27, 0x38	; 56
    6b5c:	f9 01       	movw	r30, r18
    6b5e:	80 87       	std	Z+8, r24	; 0x08
    6b60:	91 87       	std	Z+9, r25	; 0x09
    6b62:	a2 87       	std	Z+10, r26	; 0x0a
    6b64:	b3 87       	std	Z+11, r27	; 0x0b
    6b66:	81 e0       	ldi	r24, 0x01	; 1
    6b68:	0f 90       	pop	r0
    6b6a:	0f 90       	pop	r0
    6b6c:	df 91       	pop	r29
    6b6e:	cf 91       	pop	r28
    6b70:	08 95       	ret

00006b72 <_ZN6DS323111getDateTimeEv>:
    6b72:	cf 93       	push	r28
    6b74:	df 93       	push	r29
    6b76:	cd b7       	in	r28, 0x3d	; 61
    6b78:	de b7       	in	r29, 0x3e	; 62
    6b7a:	64 97       	sbiw	r28, 0x14	; 20
    6b7c:	0f b6       	in	r0, 0x3f	; 63
    6b7e:	f8 94       	cli
    6b80:	de bf       	out	0x3e, r29	; 62
    6b82:	0f be       	out	0x3f, r0	; 63
    6b84:	cd bf       	out	0x3d, r28	; 61
    6b86:	9a 8b       	std	Y+18, r25	; 0x12
    6b88:	89 8b       	std	Y+17, r24	; 0x11
    6b8a:	7c 8b       	std	Y+20, r23	; 0x14
    6b8c:	6b 8b       	std	Y+19, r22	; 0x13
    6b8e:	68 e6       	ldi	r22, 0x68	; 104
    6b90:	70 e0       	ldi	r23, 0x00	; 0
    6b92:	81 ec       	ldi	r24, 0xC1	; 193
    6b94:	95 e0       	ldi	r25, 0x05	; 5
    6b96:	0e 94 e7 55 	call	0xabce	; 0xabce <_ZN7TwoWire17beginTransmissionEi>
    6b9a:	60 e0       	ldi	r22, 0x00	; 0
    6b9c:	70 e0       	ldi	r23, 0x00	; 0
    6b9e:	81 ec       	ldi	r24, 0xC1	; 193
    6ba0:	95 e0       	ldi	r25, 0x05	; 5
    6ba2:	84 df       	rcall	.-248    	; 0x6aac <_ZN7TwoWire5writeEi>
    6ba4:	81 ec       	ldi	r24, 0xC1	; 193
    6ba6:	95 e0       	ldi	r25, 0x05	; 5
    6ba8:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>
    6bac:	47 e0       	ldi	r20, 0x07	; 7
    6bae:	50 e0       	ldi	r21, 0x00	; 0
    6bb0:	68 e6       	ldi	r22, 0x68	; 104
    6bb2:	70 e0       	ldi	r23, 0x00	; 0
    6bb4:	81 ec       	ldi	r24, 0xC1	; 193
    6bb6:	95 e0       	ldi	r25, 0x05	; 5
    6bb8:	0e 94 b2 55 	call	0xab64	; 0xab64 <_ZN7TwoWire11requestFromEii>
    6bbc:	81 ec       	ldi	r24, 0xC1	; 193
    6bbe:	95 e0       	ldi	r25, 0x05	; 5
    6bc0:	0e 94 b2 56 	call	0xad64	; 0xad64 <_ZN7TwoWire9availableEv>
    6bc4:	21 e0       	ldi	r18, 0x01	; 1
    6bc6:	89 2b       	or	r24, r25
    6bc8:	09 f0       	breq	.+2      	; 0x6bcc <_ZN6DS323111getDateTimeEv+0x5a>
    6bca:	20 e0       	ldi	r18, 0x00	; 0
    6bcc:	22 23       	and	r18, r18
    6bce:	09 f0       	breq	.+2      	; 0x6bd2 <_ZN6DS323111getDateTimeEv+0x60>
    6bd0:	f5 cf       	rjmp	.-22     	; 0x6bbc <_ZN6DS323111getDateTimeEv+0x4a>
    6bd2:	86 e0       	ldi	r24, 0x06	; 6
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	9a 83       	std	Y+2, r25	; 0x02
    6bd8:	89 83       	std	Y+1, r24	; 0x01
    6bda:	89 81       	ldd	r24, Y+1	; 0x01
    6bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    6bde:	99 23       	and	r25, r25
    6be0:	f4 f0       	brlt	.+60     	; 0x6c1e <_ZN6DS323111getDateTimeEv+0xac>
    6be2:	81 ec       	ldi	r24, 0xC1	; 193
    6be4:	95 e0       	ldi	r25, 0x05	; 5
    6be6:	0e 94 cb 56 	call	0xad96	; 0xad96 <_ZN7TwoWire4readEv>
    6bea:	28 2f       	mov	r18, r24
    6bec:	8b 89       	ldd	r24, Y+19	; 0x13
    6bee:	9c 89       	ldd	r25, Y+20	; 0x14
    6bf0:	62 2f       	mov	r22, r18
    6bf2:	a1 d0       	rcall	.+322    	; 0x6d36 <_ZN6DS32317bcd2decEh>
    6bf4:	28 2f       	mov	r18, r24
    6bf6:	30 e0       	ldi	r19, 0x00	; 0
    6bf8:	89 81       	ldd	r24, Y+1	; 0x01
    6bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    6bfc:	88 0f       	add	r24, r24
    6bfe:	99 1f       	adc	r25, r25
    6c00:	ae 01       	movw	r20, r28
    6c02:	4f 5f       	subi	r20, 0xFF	; 255
    6c04:	5f 4f       	sbci	r21, 0xFF	; 255
    6c06:	84 0f       	add	r24, r20
    6c08:	95 1f       	adc	r25, r21
    6c0a:	02 96       	adiw	r24, 0x02	; 2
    6c0c:	fc 01       	movw	r30, r24
    6c0e:	31 83       	std	Z+1, r19	; 0x01
    6c10:	20 83       	st	Z, r18
    6c12:	89 81       	ldd	r24, Y+1	; 0x01
    6c14:	9a 81       	ldd	r25, Y+2	; 0x02
    6c16:	01 97       	sbiw	r24, 0x01	; 1
    6c18:	9a 83       	std	Y+2, r25	; 0x02
    6c1a:	89 83       	std	Y+1, r24	; 0x01
    6c1c:	de cf       	rjmp	.-68     	; 0x6bda <_ZN6DS323111getDateTimeEv+0x68>
    6c1e:	81 ec       	ldi	r24, 0xC1	; 193
    6c20:	95 e0       	ldi	r25, 0x05	; 5
    6c22:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>
    6c26:	8b 81       	ldd	r24, Y+3	; 0x03
    6c28:	9c 81       	ldd	r25, Y+4	; 0x04
    6c2a:	80 53       	subi	r24, 0x30	; 48
    6c2c:	98 4f       	sbci	r25, 0xF8	; 248
    6c2e:	9c 01       	movw	r18, r24
    6c30:	8b 89       	ldd	r24, Y+19	; 0x13
    6c32:	9c 89       	ldd	r25, Y+20	; 0x14
    6c34:	fc 01       	movw	r30, r24
    6c36:	31 83       	std	Z+1, r19	; 0x01
    6c38:	20 83       	st	Z, r18
    6c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    6c3e:	28 2f       	mov	r18, r24
    6c40:	8b 89       	ldd	r24, Y+19	; 0x13
    6c42:	9c 89       	ldd	r25, Y+20	; 0x14
    6c44:	fc 01       	movw	r30, r24
    6c46:	22 83       	std	Z+2, r18	; 0x02
    6c48:	8f 81       	ldd	r24, Y+7	; 0x07
    6c4a:	98 85       	ldd	r25, Y+8	; 0x08
    6c4c:	28 2f       	mov	r18, r24
    6c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    6c50:	9c 89       	ldd	r25, Y+20	; 0x14
    6c52:	fc 01       	movw	r30, r24
    6c54:	23 83       	std	Z+3, r18	; 0x03
    6c56:	89 85       	ldd	r24, Y+9	; 0x09
    6c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c5a:	28 2f       	mov	r18, r24
    6c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    6c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    6c60:	fc 01       	movw	r30, r24
    6c62:	27 83       	std	Z+7, r18	; 0x07
    6c64:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c66:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c68:	28 2f       	mov	r18, r24
    6c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    6c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    6c6e:	fc 01       	movw	r30, r24
    6c70:	24 83       	std	Z+4, r18	; 0x04
    6c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c76:	28 2f       	mov	r18, r24
    6c78:	8b 89       	ldd	r24, Y+19	; 0x13
    6c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    6c7c:	fc 01       	movw	r30, r24
    6c7e:	25 83       	std	Z+5, r18	; 0x05
    6c80:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c82:	98 89       	ldd	r25, Y+16	; 0x10
    6c84:	28 2f       	mov	r18, r24
    6c86:	8b 89       	ldd	r24, Y+19	; 0x13
    6c88:	9c 89       	ldd	r25, Y+20	; 0x14
    6c8a:	fc 01       	movw	r30, r24
    6c8c:	26 83       	std	Z+6, r18	; 0x06
    6c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    6c90:	9c 89       	ldd	r25, Y+20	; 0x14
    6c92:	5a d1       	rcall	.+692    	; 0x6f48 <_ZN6DS32318unixtimeEv>
    6c94:	dc 01       	movw	r26, r24
    6c96:	cb 01       	movw	r24, r22
    6c98:	2b 89       	ldd	r18, Y+19	; 0x13
    6c9a:	3c 89       	ldd	r19, Y+20	; 0x14
    6c9c:	f9 01       	movw	r30, r18
    6c9e:	80 87       	std	Z+8, r24	; 0x08
    6ca0:	91 87       	std	Z+9, r25	; 0x09
    6ca2:	a2 87       	std	Z+10, r26	; 0x0a
    6ca4:	b3 87       	std	Z+11, r27	; 0x0b
    6ca6:	89 89       	ldd	r24, Y+17	; 0x11
    6ca8:	9a 89       	ldd	r25, Y+18	; 0x12
    6caa:	2b 89       	ldd	r18, Y+19	; 0x13
    6cac:	3c 89       	ldd	r19, Y+20	; 0x14
    6cae:	4c e0       	ldi	r20, 0x0C	; 12
    6cb0:	f9 01       	movw	r30, r18
    6cb2:	dc 01       	movw	r26, r24
    6cb4:	01 90       	ld	r0, Z+
    6cb6:	0d 92       	st	X+, r0
    6cb8:	4a 95       	dec	r20
    6cba:	e1 f7       	brne	.-8      	; 0x6cb4 <_ZN6DS323111getDateTimeEv+0x142>
    6cbc:	89 89       	ldd	r24, Y+17	; 0x11
    6cbe:	9a 89       	ldd	r25, Y+18	; 0x12
    6cc0:	64 96       	adiw	r28, 0x14	; 20
    6cc2:	0f b6       	in	r0, 0x3f	; 63
    6cc4:	f8 94       	cli
    6cc6:	de bf       	out	0x3e, r29	; 62
    6cc8:	0f be       	out	0x3f, r0	; 63
    6cca:	cd bf       	out	0x3d, r28	; 61
    6ccc:	df 91       	pop	r29
    6cce:	cf 91       	pop	r28
    6cd0:	08 95       	ret

00006cd2 <_ZN6DS323110setBatteryEbb>:
    6cd2:	cf 93       	push	r28
    6cd4:	df 93       	push	r29
    6cd6:	00 d0       	rcall	.+0      	; 0x6cd8 <_ZN6DS323110setBatteryEbb+0x6>
    6cd8:	1f 92       	push	r1
    6cda:	1f 92       	push	r1
    6cdc:	cd b7       	in	r28, 0x3d	; 61
    6cde:	de b7       	in	r29, 0x3e	; 62
    6ce0:	9b 83       	std	Y+3, r25	; 0x03
    6ce2:	8a 83       	std	Y+2, r24	; 0x02
    6ce4:	6c 83       	std	Y+4, r22	; 0x04
    6ce6:	4d 83       	std	Y+5, r20	; 0x05
    6ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    6cea:	9b 81       	ldd	r25, Y+3	; 0x03
    6cec:	6e e0       	ldi	r22, 0x0E	; 14
    6cee:	a4 d1       	rcall	.+840    	; 0x7038 <_ZN6DS323113readRegister8Eh>
    6cf0:	89 83       	std	Y+1, r24	; 0x01
    6cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    6cf4:	88 23       	and	r24, r24
    6cf6:	21 f0       	breq	.+8      	; 0x6d00 <_ZN6DS323110setBatteryEbb+0x2e>
    6cf8:	89 81       	ldd	r24, Y+1	; 0x01
    6cfa:	80 64       	ori	r24, 0x40	; 64
    6cfc:	89 83       	std	Y+1, r24	; 0x01
    6cfe:	03 c0       	rjmp	.+6      	; 0x6d06 <_ZN6DS323110setBatteryEbb+0x34>
    6d00:	89 81       	ldd	r24, Y+1	; 0x01
    6d02:	8f 7b       	andi	r24, 0xBF	; 191
    6d04:	89 83       	std	Y+1, r24	; 0x01
    6d06:	8c 81       	ldd	r24, Y+4	; 0x04
    6d08:	88 23       	and	r24, r24
    6d0a:	21 f0       	breq	.+8      	; 0x6d14 <_ZN6DS323110setBatteryEbb+0x42>
    6d0c:	89 81       	ldd	r24, Y+1	; 0x01
    6d0e:	8b 77       	andi	r24, 0x7B	; 123
    6d10:	89 83       	std	Y+1, r24	; 0x01
    6d12:	03 c0       	rjmp	.+6      	; 0x6d1a <_ZN6DS323110setBatteryEbb+0x48>
    6d14:	89 81       	ldd	r24, Y+1	; 0x01
    6d16:	80 68       	ori	r24, 0x80	; 128
    6d18:	89 83       	std	Y+1, r24	; 0x01
    6d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    6d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    6d1e:	49 81       	ldd	r20, Y+1	; 0x01
    6d20:	6e e0       	ldi	r22, 0x0E	; 14
    6d22:	64 d1       	rcall	.+712    	; 0x6fec <_ZN6DS323114writeRegister8Ehh>
    6d24:	00 00       	nop
    6d26:	0f 90       	pop	r0
    6d28:	0f 90       	pop	r0
    6d2a:	0f 90       	pop	r0
    6d2c:	0f 90       	pop	r0
    6d2e:	0f 90       	pop	r0
    6d30:	df 91       	pop	r29
    6d32:	cf 91       	pop	r28
    6d34:	08 95       	ret

00006d36 <_ZN6DS32317bcd2decEh>:
    6d36:	cf 93       	push	r28
    6d38:	df 93       	push	r29
    6d3a:	00 d0       	rcall	.+0      	; 0x6d3c <_ZN6DS32317bcd2decEh+0x6>
    6d3c:	cd b7       	in	r28, 0x3d	; 61
    6d3e:	de b7       	in	r29, 0x3e	; 62
    6d40:	9a 83       	std	Y+2, r25	; 0x02
    6d42:	89 83       	std	Y+1, r24	; 0x01
    6d44:	6b 83       	std	Y+3, r22	; 0x03
    6d46:	8b 81       	ldd	r24, Y+3	; 0x03
    6d48:	82 95       	swap	r24
    6d4a:	8f 70       	andi	r24, 0x0F	; 15
    6d4c:	88 0f       	add	r24, r24
    6d4e:	98 2f       	mov	r25, r24
    6d50:	99 0f       	add	r25, r25
    6d52:	99 0f       	add	r25, r25
    6d54:	98 0f       	add	r25, r24
    6d56:	8b 81       	ldd	r24, Y+3	; 0x03
    6d58:	8f 70       	andi	r24, 0x0F	; 15
    6d5a:	89 0f       	add	r24, r25
    6d5c:	0f 90       	pop	r0
    6d5e:	0f 90       	pop	r0
    6d60:	0f 90       	pop	r0
    6d62:	df 91       	pop	r29
    6d64:	cf 91       	pop	r28
    6d66:	08 95       	ret

00006d68 <_ZN6DS32319time2longEjhhh>:
    6d68:	0f 93       	push	r16
    6d6a:	cf 93       	push	r28
    6d6c:	df 93       	push	r29
    6d6e:	cd b7       	in	r28, 0x3d	; 61
    6d70:	de b7       	in	r29, 0x3e	; 62
    6d72:	27 97       	sbiw	r28, 0x07	; 7
    6d74:	0f b6       	in	r0, 0x3f	; 63
    6d76:	f8 94       	cli
    6d78:	de bf       	out	0x3e, r29	; 62
    6d7a:	0f be       	out	0x3f, r0	; 63
    6d7c:	cd bf       	out	0x3d, r28	; 61
    6d7e:	9a 83       	std	Y+2, r25	; 0x02
    6d80:	89 83       	std	Y+1, r24	; 0x01
    6d82:	7c 83       	std	Y+4, r23	; 0x04
    6d84:	6b 83       	std	Y+3, r22	; 0x03
    6d86:	4d 83       	std	Y+5, r20	; 0x05
    6d88:	2e 83       	std	Y+6, r18	; 0x06
    6d8a:	0f 83       	std	Y+7, r16	; 0x07
    6d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    6d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    6d90:	9c 01       	movw	r18, r24
    6d92:	40 e0       	ldi	r20, 0x00	; 0
    6d94:	50 e0       	ldi	r21, 0x00	; 0
    6d96:	da 01       	movw	r26, r20
    6d98:	c9 01       	movw	r24, r18
    6d9a:	88 0f       	add	r24, r24
    6d9c:	99 1f       	adc	r25, r25
    6d9e:	aa 1f       	adc	r26, r26
    6da0:	bb 1f       	adc	r27, r27
    6da2:	82 0f       	add	r24, r18
    6da4:	93 1f       	adc	r25, r19
    6da6:	a4 1f       	adc	r26, r20
    6da8:	b5 1f       	adc	r27, r21
    6daa:	88 0f       	add	r24, r24
    6dac:	99 1f       	adc	r25, r25
    6dae:	aa 1f       	adc	r26, r26
    6db0:	bb 1f       	adc	r27, r27
    6db2:	88 0f       	add	r24, r24
    6db4:	99 1f       	adc	r25, r25
    6db6:	aa 1f       	adc	r26, r26
    6db8:	bb 1f       	adc	r27, r27
    6dba:	88 0f       	add	r24, r24
    6dbc:	99 1f       	adc	r25, r25
    6dbe:	aa 1f       	adc	r26, r26
    6dc0:	bb 1f       	adc	r27, r27
    6dc2:	9c 01       	movw	r18, r24
    6dc4:	ad 01       	movw	r20, r26
    6dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    6dc8:	88 2f       	mov	r24, r24
    6dca:	90 e0       	ldi	r25, 0x00	; 0
    6dcc:	a0 e0       	ldi	r26, 0x00	; 0
    6dce:	b0 e0       	ldi	r27, 0x00	; 0
    6dd0:	28 0f       	add	r18, r24
    6dd2:	39 1f       	adc	r19, r25
    6dd4:	4a 1f       	adc	r20, r26
    6dd6:	5b 1f       	adc	r21, r27
    6dd8:	8c e3       	ldi	r24, 0x3C	; 60
    6dda:	90 e0       	ldi	r25, 0x00	; 0
    6ddc:	dc 01       	movw	r26, r24
    6dde:	0e 94 64 63 	call	0xc6c8	; 0xc6c8 <__muluhisi3>
    6de2:	9b 01       	movw	r18, r22
    6de4:	ac 01       	movw	r20, r24
    6de6:	8e 81       	ldd	r24, Y+6	; 0x06
    6de8:	88 2f       	mov	r24, r24
    6dea:	90 e0       	ldi	r25, 0x00	; 0
    6dec:	a0 e0       	ldi	r26, 0x00	; 0
    6dee:	b0 e0       	ldi	r27, 0x00	; 0
    6df0:	28 0f       	add	r18, r24
    6df2:	39 1f       	adc	r19, r25
    6df4:	4a 1f       	adc	r20, r26
    6df6:	5b 1f       	adc	r21, r27
    6df8:	8c e3       	ldi	r24, 0x3C	; 60
    6dfa:	90 e0       	ldi	r25, 0x00	; 0
    6dfc:	dc 01       	movw	r26, r24
    6dfe:	0e 94 64 63 	call	0xc6c8	; 0xc6c8 <__muluhisi3>
    6e02:	9b 01       	movw	r18, r22
    6e04:	ac 01       	movw	r20, r24
    6e06:	8f 81       	ldd	r24, Y+7	; 0x07
    6e08:	88 2f       	mov	r24, r24
    6e0a:	90 e0       	ldi	r25, 0x00	; 0
    6e0c:	a0 e0       	ldi	r26, 0x00	; 0
    6e0e:	b0 e0       	ldi	r27, 0x00	; 0
    6e10:	82 0f       	add	r24, r18
    6e12:	93 1f       	adc	r25, r19
    6e14:	a4 1f       	adc	r26, r20
    6e16:	b5 1f       	adc	r27, r21
    6e18:	bc 01       	movw	r22, r24
    6e1a:	cd 01       	movw	r24, r26
    6e1c:	27 96       	adiw	r28, 0x07	; 7
    6e1e:	0f b6       	in	r0, 0x3f	; 63
    6e20:	f8 94       	cli
    6e22:	de bf       	out	0x3e, r29	; 62
    6e24:	0f be       	out	0x3f, r0	; 63
    6e26:	cd bf       	out	0x3d, r28	; 61
    6e28:	df 91       	pop	r29
    6e2a:	cf 91       	pop	r28
    6e2c:	0f 91       	pop	r16
    6e2e:	08 95       	ret

00006e30 <_ZN6DS323110isLeapYearEj>:
    6e30:	cf 93       	push	r28
    6e32:	df 93       	push	r29
    6e34:	00 d0       	rcall	.+0      	; 0x6e36 <_ZN6DS323110isLeapYearEj+0x6>
    6e36:	1f 92       	push	r1
    6e38:	cd b7       	in	r28, 0x3d	; 61
    6e3a:	de b7       	in	r29, 0x3e	; 62
    6e3c:	9a 83       	std	Y+2, r25	; 0x02
    6e3e:	89 83       	std	Y+1, r24	; 0x01
    6e40:	7c 83       	std	Y+4, r23	; 0x04
    6e42:	6b 83       	std	Y+3, r22	; 0x03
    6e44:	8b 81       	ldd	r24, Y+3	; 0x03
    6e46:	9c 81       	ldd	r25, Y+4	; 0x04
    6e48:	83 70       	andi	r24, 0x03	; 3
    6e4a:	99 27       	eor	r25, r25
    6e4c:	21 e0       	ldi	r18, 0x01	; 1
    6e4e:	89 2b       	or	r24, r25
    6e50:	09 f0       	breq	.+2      	; 0x6e54 <_ZN6DS323110isLeapYearEj+0x24>
    6e52:	20 e0       	ldi	r18, 0x00	; 0
    6e54:	82 2f       	mov	r24, r18
    6e56:	0f 90       	pop	r0
    6e58:	0f 90       	pop	r0
    6e5a:	0f 90       	pop	r0
    6e5c:	0f 90       	pop	r0
    6e5e:	df 91       	pop	r29
    6e60:	cf 91       	pop	r28
    6e62:	08 95       	ret

00006e64 <_ZN6DS32319date2daysEjhh>:
    6e64:	cf 93       	push	r28
    6e66:	df 93       	push	r29
    6e68:	cd b7       	in	r28, 0x3d	; 61
    6e6a:	de b7       	in	r29, 0x3e	; 62
    6e6c:	2c 97       	sbiw	r28, 0x0c	; 12
    6e6e:	0f b6       	in	r0, 0x3f	; 63
    6e70:	f8 94       	cli
    6e72:	de bf       	out	0x3e, r29	; 62
    6e74:	0f be       	out	0x3f, r0	; 63
    6e76:	cd bf       	out	0x3d, r28	; 61
    6e78:	98 87       	std	Y+8, r25	; 0x08
    6e7a:	8f 83       	std	Y+7, r24	; 0x07
    6e7c:	7a 87       	std	Y+10, r23	; 0x0a
    6e7e:	69 87       	std	Y+9, r22	; 0x09
    6e80:	4b 87       	std	Y+11, r20	; 0x0b
    6e82:	2c 87       	std	Y+12, r18	; 0x0c
    6e84:	89 85       	ldd	r24, Y+9	; 0x09
    6e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e88:	80 5d       	subi	r24, 0xD0	; 208
    6e8a:	97 40       	sbci	r25, 0x07	; 7
    6e8c:	9a 87       	std	Y+10, r25	; 0x0a
    6e8e:	89 87       	std	Y+9, r24	; 0x09
    6e90:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e92:	88 2f       	mov	r24, r24
    6e94:	90 e0       	ldi	r25, 0x00	; 0
    6e96:	9a 83       	std	Y+2, r25	; 0x02
    6e98:	89 83       	std	Y+1, r24	; 0x01
    6e9a:	81 e0       	ldi	r24, 0x01	; 1
    6e9c:	8b 83       	std	Y+3, r24	; 0x03
    6e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    6ea0:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ea2:	98 17       	cp	r25, r24
    6ea4:	d0 f4       	brcc	.+52     	; 0x6eda <_ZN6DS32319date2daysEjhh+0x76>
    6ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ea8:	88 2f       	mov	r24, r24
    6eaa:	90 e0       	ldi	r25, 0x00	; 0
    6eac:	01 97       	sbiw	r24, 0x01	; 1
    6eae:	89 5a       	subi	r24, 0xA9	; 169
    6eb0:	94 4f       	sbci	r25, 0xF4	; 244
    6eb2:	9d 83       	std	Y+5, r25	; 0x05
    6eb4:	8c 83       	std	Y+4, r24	; 0x04
    6eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    6eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    6eba:	fc 01       	movw	r30, r24
    6ebc:	84 91       	lpm	r24, Z
    6ebe:	8e 83       	std	Y+6, r24	; 0x06
    6ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    6ec2:	88 2f       	mov	r24, r24
    6ec4:	90 e0       	ldi	r25, 0x00	; 0
    6ec6:	29 81       	ldd	r18, Y+1	; 0x01
    6ec8:	3a 81       	ldd	r19, Y+2	; 0x02
    6eca:	82 0f       	add	r24, r18
    6ecc:	93 1f       	adc	r25, r19
    6ece:	9a 83       	std	Y+2, r25	; 0x02
    6ed0:	89 83       	std	Y+1, r24	; 0x01
    6ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    6ed4:	8f 5f       	subi	r24, 0xFF	; 255
    6ed6:	8b 83       	std	Y+3, r24	; 0x03
    6ed8:	e2 cf       	rjmp	.-60     	; 0x6e9e <_ZN6DS32319date2daysEjhh+0x3a>
    6eda:	8b 85       	ldd	r24, Y+11	; 0x0b
    6edc:	82 30       	cpi	r24, 0x02	; 2
    6ede:	51 f4       	brne	.+20     	; 0x6ef4 <_ZN6DS32319date2daysEjhh+0x90>
    6ee0:	29 85       	ldd	r18, Y+9	; 0x09
    6ee2:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    6ee6:	98 85       	ldd	r25, Y+8	; 0x08
    6ee8:	b9 01       	movw	r22, r18
    6eea:	a2 df       	rcall	.-188    	; 0x6e30 <_ZN6DS323110isLeapYearEj>
    6eec:	88 23       	and	r24, r24
    6eee:	11 f0       	breq	.+4      	; 0x6ef4 <_ZN6DS32319date2daysEjhh+0x90>
    6ef0:	81 e0       	ldi	r24, 0x01	; 1
    6ef2:	01 c0       	rjmp	.+2      	; 0x6ef6 <_ZN6DS32319date2daysEjhh+0x92>
    6ef4:	80 e0       	ldi	r24, 0x00	; 0
    6ef6:	88 23       	and	r24, r24
    6ef8:	29 f0       	breq	.+10     	; 0x6f04 <_ZN6DS32319date2daysEjhh+0xa0>
    6efa:	89 81       	ldd	r24, Y+1	; 0x01
    6efc:	9a 81       	ldd	r25, Y+2	; 0x02
    6efe:	01 96       	adiw	r24, 0x01	; 1
    6f00:	9a 83       	std	Y+2, r25	; 0x02
    6f02:	89 83       	std	Y+1, r24	; 0x01
    6f04:	49 85       	ldd	r20, Y+9	; 0x09
    6f06:	5a 85       	ldd	r21, Y+10	; 0x0a
    6f08:	8d e6       	ldi	r24, 0x6D	; 109
    6f0a:	91 e0       	ldi	r25, 0x01	; 1
    6f0c:	48 9f       	mul	r20, r24
    6f0e:	90 01       	movw	r18, r0
    6f10:	49 9f       	mul	r20, r25
    6f12:	30 0d       	add	r19, r0
    6f14:	58 9f       	mul	r21, r24
    6f16:	30 0d       	add	r19, r0
    6f18:	11 24       	eor	r1, r1
    6f1a:	89 81       	ldd	r24, Y+1	; 0x01
    6f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    6f1e:	28 0f       	add	r18, r24
    6f20:	39 1f       	adc	r19, r25
    6f22:	89 85       	ldd	r24, Y+9	; 0x09
    6f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f26:	03 96       	adiw	r24, 0x03	; 3
    6f28:	96 95       	lsr	r25
    6f2a:	87 95       	ror	r24
    6f2c:	96 95       	lsr	r25
    6f2e:	87 95       	ror	r24
    6f30:	82 0f       	add	r24, r18
    6f32:	93 1f       	adc	r25, r19
    6f34:	01 97       	sbiw	r24, 0x01	; 1
    6f36:	2c 96       	adiw	r28, 0x0c	; 12
    6f38:	0f b6       	in	r0, 0x3f	; 63
    6f3a:	f8 94       	cli
    6f3c:	de bf       	out	0x3e, r29	; 62
    6f3e:	0f be       	out	0x3f, r0	; 63
    6f40:	cd bf       	out	0x3d, r28	; 61
    6f42:	df 91       	pop	r29
    6f44:	cf 91       	pop	r28
    6f46:	08 95       	ret

00006f48 <_ZN6DS32318unixtimeEv>:
    6f48:	ff 92       	push	r15
    6f4a:	0f 93       	push	r16
    6f4c:	1f 93       	push	r17
    6f4e:	cf 93       	push	r28
    6f50:	df 93       	push	r29
    6f52:	00 d0       	rcall	.+0      	; 0x6f54 <_ZN6DS32318unixtimeEv+0xc>
    6f54:	00 d0       	rcall	.+0      	; 0x6f56 <_ZN6DS32318unixtimeEv+0xe>
    6f56:	cd b7       	in	r28, 0x3d	; 61
    6f58:	de b7       	in	r29, 0x3e	; 62
    6f5a:	9e 83       	std	Y+6, r25	; 0x06
    6f5c:	8d 83       	std	Y+5, r24	; 0x05
    6f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    6f60:	9e 81       	ldd	r25, Y+6	; 0x06
    6f62:	fc 01       	movw	r30, r24
    6f64:	06 81       	ldd	r16, Z+6	; 0x06
    6f66:	8d 81       	ldd	r24, Y+5	; 0x05
    6f68:	9e 81       	ldd	r25, Y+6	; 0x06
    6f6a:	fc 01       	movw	r30, r24
    6f6c:	f5 80       	ldd	r15, Z+5	; 0x05
    6f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    6f70:	9e 81       	ldd	r25, Y+6	; 0x06
    6f72:	fc 01       	movw	r30, r24
    6f74:	14 81       	ldd	r17, Z+4	; 0x04
    6f76:	8d 81       	ldd	r24, Y+5	; 0x05
    6f78:	9e 81       	ldd	r25, Y+6	; 0x06
    6f7a:	fc 01       	movw	r30, r24
    6f7c:	23 81       	ldd	r18, Z+3	; 0x03
    6f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    6f80:	9e 81       	ldd	r25, Y+6	; 0x06
    6f82:	fc 01       	movw	r30, r24
    6f84:	32 81       	ldd	r19, Z+2	; 0x02
    6f86:	8d 81       	ldd	r24, Y+5	; 0x05
    6f88:	9e 81       	ldd	r25, Y+6	; 0x06
    6f8a:	fc 01       	movw	r30, r24
    6f8c:	60 81       	ld	r22, Z
    6f8e:	71 81       	ldd	r23, Z+1	; 0x01
    6f90:	8d 81       	ldd	r24, Y+5	; 0x05
    6f92:	9e 81       	ldd	r25, Y+6	; 0x06
    6f94:	43 2f       	mov	r20, r19
    6f96:	66 df       	rcall	.-308    	; 0x6e64 <_ZN6DS32319date2daysEjhh>
    6f98:	bc 01       	movw	r22, r24
    6f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    6f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    6f9e:	2f 2d       	mov	r18, r15
    6fa0:	41 2f       	mov	r20, r17
    6fa2:	e2 de       	rcall	.-572    	; 0x6d68 <_ZN6DS32319time2longEjhhh>
    6fa4:	dc 01       	movw	r26, r24
    6fa6:	cb 01       	movw	r24, r22
    6fa8:	89 83       	std	Y+1, r24	; 0x01
    6faa:	9a 83       	std	Y+2, r25	; 0x02
    6fac:	ab 83       	std	Y+3, r26	; 0x03
    6fae:	bc 83       	std	Y+4, r27	; 0x04
    6fb0:	89 81       	ldd	r24, Y+1	; 0x01
    6fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    6fb4:	ab 81       	ldd	r26, Y+3	; 0x03
    6fb6:	bc 81       	ldd	r27, Y+4	; 0x04
    6fb8:	80 59       	subi	r24, 0x90	; 144
    6fba:	9a 4c       	sbci	r25, 0xCA	; 202
    6fbc:	a2 49       	sbci	r26, 0x92	; 146
    6fbe:	b7 4c       	sbci	r27, 0xC7	; 199
    6fc0:	89 83       	std	Y+1, r24	; 0x01
    6fc2:	9a 83       	std	Y+2, r25	; 0x02
    6fc4:	ab 83       	std	Y+3, r26	; 0x03
    6fc6:	bc 83       	std	Y+4, r27	; 0x04
    6fc8:	89 81       	ldd	r24, Y+1	; 0x01
    6fca:	9a 81       	ldd	r25, Y+2	; 0x02
    6fcc:	ab 81       	ldd	r26, Y+3	; 0x03
    6fce:	bc 81       	ldd	r27, Y+4	; 0x04
    6fd0:	bc 01       	movw	r22, r24
    6fd2:	cd 01       	movw	r24, r26
    6fd4:	26 96       	adiw	r28, 0x06	; 6
    6fd6:	0f b6       	in	r0, 0x3f	; 63
    6fd8:	f8 94       	cli
    6fda:	de bf       	out	0x3e, r29	; 62
    6fdc:	0f be       	out	0x3f, r0	; 63
    6fde:	cd bf       	out	0x3d, r28	; 61
    6fe0:	df 91       	pop	r29
    6fe2:	cf 91       	pop	r28
    6fe4:	1f 91       	pop	r17
    6fe6:	0f 91       	pop	r16
    6fe8:	ff 90       	pop	r15
    6fea:	08 95       	ret

00006fec <_ZN6DS323114writeRegister8Ehh>:

void DS3231::writeRegister8(uint8_t reg, uint8_t value)
{
    6fec:	cf 93       	push	r28
    6fee:	df 93       	push	r29
    6ff0:	00 d0       	rcall	.+0      	; 0x6ff2 <_ZN6DS323114writeRegister8Ehh+0x6>
    6ff2:	1f 92       	push	r1
    6ff4:	cd b7       	in	r28, 0x3d	; 61
    6ff6:	de b7       	in	r29, 0x3e	; 62
    6ff8:	9a 83       	std	Y+2, r25	; 0x02
    6ffa:	89 83       	std	Y+1, r24	; 0x01
    6ffc:	6b 83       	std	Y+3, r22	; 0x03
    6ffe:	4c 83       	std	Y+4, r20	; 0x04
	Wire.beginTransmission(DS3231_ADDRESS);
    7000:	68 e6       	ldi	r22, 0x68	; 104
    7002:	70 e0       	ldi	r23, 0x00	; 0
    7004:	81 ec       	ldi	r24, 0xC1	; 193
    7006:	95 e0       	ldi	r25, 0x05	; 5
    7008:	0e 94 e7 55 	call	0xabce	; 0xabce <_ZN7TwoWire17beginTransmissionEi>
	#if ARDUINO >= 100
	Wire.write(reg);
    700c:	6b 81       	ldd	r22, Y+3	; 0x03
    700e:	81 ec       	ldi	r24, 0xC1	; 193
    7010:	95 e0       	ldi	r25, 0x05	; 5
    7012:	0e 94 33 56 	call	0xac66	; 0xac66 <_ZN7TwoWire5writeEh>
	Wire.write(value);
    7016:	6c 81       	ldd	r22, Y+4	; 0x04
    7018:	81 ec       	ldi	r24, 0xC1	; 193
    701a:	95 e0       	ldi	r25, 0x05	; 5
    701c:	0e 94 33 56 	call	0xac66	; 0xac66 <_ZN7TwoWire5writeEh>
	#else
	Wire.send(reg);
	Wire.send(value);
	#endif
	Wire.endTransmission();
    7020:	81 ec       	ldi	r24, 0xC1	; 193
    7022:	95 e0       	ldi	r25, 0x05	; 5
    7024:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>
}
    7028:	00 00       	nop
    702a:	0f 90       	pop	r0
    702c:	0f 90       	pop	r0
    702e:	0f 90       	pop	r0
    7030:	0f 90       	pop	r0
    7032:	df 91       	pop	r29
    7034:	cf 91       	pop	r28
    7036:	08 95       	ret

00007038 <_ZN6DS323113readRegister8Eh>:

uint8_t DS3231::readRegister8(uint8_t reg)
{
    7038:	cf 93       	push	r28
    703a:	df 93       	push	r29
    703c:	00 d0       	rcall	.+0      	; 0x703e <_ZN6DS323113readRegister8Eh+0x6>
    703e:	1f 92       	push	r1
    7040:	cd b7       	in	r28, 0x3d	; 61
    7042:	de b7       	in	r29, 0x3e	; 62
    7044:	9b 83       	std	Y+3, r25	; 0x03
    7046:	8a 83       	std	Y+2, r24	; 0x02
    7048:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t value;
	Wire.beginTransmission(DS3231_ADDRESS);
    704a:	68 e6       	ldi	r22, 0x68	; 104
    704c:	70 e0       	ldi	r23, 0x00	; 0
    704e:	81 ec       	ldi	r24, 0xC1	; 193
    7050:	95 e0       	ldi	r25, 0x05	; 5
    7052:	0e 94 e7 55 	call	0xabce	; 0xabce <_ZN7TwoWire17beginTransmissionEi>
	#if ARDUINO >= 100
	Wire.write(reg);
    7056:	6c 81       	ldd	r22, Y+4	; 0x04
    7058:	81 ec       	ldi	r24, 0xC1	; 193
    705a:	95 e0       	ldi	r25, 0x05	; 5
    705c:	0e 94 33 56 	call	0xac66	; 0xac66 <_ZN7TwoWire5writeEh>
	#else
	Wire.send(reg);
	#endif
	Wire.endTransmission();
    7060:	81 ec       	ldi	r24, 0xC1	; 193
    7062:	95 e0       	ldi	r25, 0x05	; 5
    7064:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(DS3231_ADDRESS, 1);
    7068:	41 e0       	ldi	r20, 0x01	; 1
    706a:	50 e0       	ldi	r21, 0x00	; 0
    706c:	68 e6       	ldi	r22, 0x68	; 104
    706e:	70 e0       	ldi	r23, 0x00	; 0
    7070:	81 ec       	ldi	r24, 0xC1	; 193
    7072:	95 e0       	ldi	r25, 0x05	; 5
    7074:	0e 94 b2 55 	call	0xab64	; 0xab64 <_ZN7TwoWire11requestFromEii>
	while(!Wire.available()) {};
    7078:	81 ec       	ldi	r24, 0xC1	; 193
    707a:	95 e0       	ldi	r25, 0x05	; 5
    707c:	0e 94 b2 56 	call	0xad64	; 0xad64 <_ZN7TwoWire9availableEv>
    7080:	21 e0       	ldi	r18, 0x01	; 1
    7082:	89 2b       	or	r24, r25
    7084:	09 f0       	breq	.+2      	; 0x7088 <_ZN6DS323113readRegister8Eh+0x50>
    7086:	20 e0       	ldi	r18, 0x00	; 0
    7088:	22 23       	and	r18, r18
    708a:	09 f0       	breq	.+2      	; 0x708e <_ZN6DS323113readRegister8Eh+0x56>
    708c:	f5 cf       	rjmp	.-22     	; 0x7078 <_ZN6DS323113readRegister8Eh+0x40>
	#if ARDUINO >= 100
	value = Wire.read();
    708e:	81 ec       	ldi	r24, 0xC1	; 193
    7090:	95 e0       	ldi	r25, 0x05	; 5
    7092:	0e 94 cb 56 	call	0xad96	; 0xad96 <_ZN7TwoWire4readEv>
    7096:	89 83       	std	Y+1, r24	; 0x01
	#else
	value = Wire.receive();
	#endif;
	Wire.endTransmission();
    7098:	81 ec       	ldi	r24, 0xC1	; 193
    709a:	95 e0       	ldi	r25, 0x05	; 5
    709c:	0e 94 22 56 	call	0xac44	; 0xac44 <_ZN7TwoWire15endTransmissionEv>

	return value;
    70a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    70a2:	0f 90       	pop	r0
    70a4:	0f 90       	pop	r0
    70a6:	0f 90       	pop	r0
    70a8:	0f 90       	pop	r0
    70aa:	df 91       	pop	r29
    70ac:	cf 91       	pop	r28
    70ae:	08 95       	ret

000070b0 <_ZN6HCSR044initEiPii>:
	this->n = n;
	pinMode(this->out, OUTPUT);
	for(int i=0;i<n;i++){ pinMode(this->echo[i], INPUT); }
}
HCSR04::HCSR04(int out,int echo){this->init(out,new int[1]{echo},1);}
HCSR04::HCSR04(int out,int echo[],int n){this->init(out,echo,n);}
    70b0:	cf 93       	push	r28
    70b2:	df 93       	push	r29
    70b4:	cd b7       	in	r28, 0x3d	; 61
    70b6:	de b7       	in	r29, 0x3e	; 62
    70b8:	2a 97       	sbiw	r28, 0x0a	; 10
    70ba:	0f b6       	in	r0, 0x3f	; 63
    70bc:	f8 94       	cli
    70be:	de bf       	out	0x3e, r29	; 62
    70c0:	0f be       	out	0x3f, r0	; 63
    70c2:	cd bf       	out	0x3d, r28	; 61
    70c4:	9c 83       	std	Y+4, r25	; 0x04
    70c6:	8b 83       	std	Y+3, r24	; 0x03
    70c8:	7e 83       	std	Y+6, r23	; 0x06
    70ca:	6d 83       	std	Y+5, r22	; 0x05
    70cc:	58 87       	std	Y+8, r21	; 0x08
    70ce:	4f 83       	std	Y+7, r20	; 0x07
    70d0:	3a 87       	std	Y+10, r19	; 0x0a
    70d2:	29 87       	std	Y+9, r18	; 0x09
    70d4:	8b 81       	ldd	r24, Y+3	; 0x03
    70d6:	9c 81       	ldd	r25, Y+4	; 0x04
    70d8:	2d 81       	ldd	r18, Y+5	; 0x05
    70da:	3e 81       	ldd	r19, Y+6	; 0x06
    70dc:	fc 01       	movw	r30, r24
    70de:	31 83       	std	Z+1, r19	; 0x01
    70e0:	20 83       	st	Z, r18
    70e2:	8b 81       	ldd	r24, Y+3	; 0x03
    70e4:	9c 81       	ldd	r25, Y+4	; 0x04
    70e6:	2f 81       	ldd	r18, Y+7	; 0x07
    70e8:	38 85       	ldd	r19, Y+8	; 0x08
    70ea:	fc 01       	movw	r30, r24
    70ec:	33 83       	std	Z+3, r19	; 0x03
    70ee:	22 83       	std	Z+2, r18	; 0x02
    70f0:	8b 81       	ldd	r24, Y+3	; 0x03
    70f2:	9c 81       	ldd	r25, Y+4	; 0x04
    70f4:	29 85       	ldd	r18, Y+9	; 0x09
    70f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    70f8:	fc 01       	movw	r30, r24
    70fa:	35 83       	std	Z+5, r19	; 0x05
    70fc:	24 83       	std	Z+4, r18	; 0x04
    70fe:	8b 81       	ldd	r24, Y+3	; 0x03
    7100:	9c 81       	ldd	r25, Y+4	; 0x04
    7102:	fc 01       	movw	r30, r24
    7104:	80 81       	ld	r24, Z
    7106:	91 81       	ldd	r25, Z+1	; 0x01
    7108:	61 e0       	ldi	r22, 0x01	; 1
    710a:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    710e:	1a 82       	std	Y+2, r1	; 0x02
    7110:	19 82       	std	Y+1, r1	; 0x01
    7112:	29 81       	ldd	r18, Y+1	; 0x01
    7114:	3a 81       	ldd	r19, Y+2	; 0x02
    7116:	89 85       	ldd	r24, Y+9	; 0x09
    7118:	9a 85       	ldd	r25, Y+10	; 0x0a
    711a:	28 17       	cp	r18, r24
    711c:	39 07       	cpc	r19, r25
    711e:	bc f4       	brge	.+46     	; 0x714e <_ZN6HCSR044initEiPii+0x9e>
    7120:	8b 81       	ldd	r24, Y+3	; 0x03
    7122:	9c 81       	ldd	r25, Y+4	; 0x04
    7124:	fc 01       	movw	r30, r24
    7126:	22 81       	ldd	r18, Z+2	; 0x02
    7128:	33 81       	ldd	r19, Z+3	; 0x03
    712a:	89 81       	ldd	r24, Y+1	; 0x01
    712c:	9a 81       	ldd	r25, Y+2	; 0x02
    712e:	88 0f       	add	r24, r24
    7130:	99 1f       	adc	r25, r25
    7132:	82 0f       	add	r24, r18
    7134:	93 1f       	adc	r25, r19
    7136:	fc 01       	movw	r30, r24
    7138:	80 81       	ld	r24, Z
    713a:	91 81       	ldd	r25, Z+1	; 0x01
    713c:	60 e0       	ldi	r22, 0x00	; 0
    713e:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    7142:	89 81       	ldd	r24, Y+1	; 0x01
    7144:	9a 81       	ldd	r25, Y+2	; 0x02
    7146:	01 96       	adiw	r24, 0x01	; 1
    7148:	9a 83       	std	Y+2, r25	; 0x02
    714a:	89 83       	std	Y+1, r24	; 0x01
    714c:	e2 cf       	rjmp	.-60     	; 0x7112 <_ZN6HCSR044initEiPii+0x62>
    714e:	00 00       	nop
    7150:	2a 96       	adiw	r28, 0x0a	; 10
    7152:	0f b6       	in	r0, 0x3f	; 63
    7154:	f8 94       	cli
    7156:	de bf       	out	0x3e, r29	; 62
    7158:	0f be       	out	0x3f, r0	; 63
    715a:	cd bf       	out	0x3d, r28	; 61
    715c:	df 91       	pop	r29
    715e:	cf 91       	pop	r28
    7160:	08 95       	ret

00007162 <_ZN6HCSR04C1Eii>:
    7162:	cf 93       	push	r28
    7164:	df 93       	push	r29
    7166:	00 d0       	rcall	.+0      	; 0x7168 <_ZN6HCSR04C1Eii+0x6>
    7168:	00 d0       	rcall	.+0      	; 0x716a <_ZN6HCSR04C1Eii+0x8>
    716a:	cd b7       	in	r28, 0x3d	; 61
    716c:	de b7       	in	r29, 0x3e	; 62
    716e:	9a 83       	std	Y+2, r25	; 0x02
    7170:	89 83       	std	Y+1, r24	; 0x01
    7172:	7c 83       	std	Y+4, r23	; 0x04
    7174:	6b 83       	std	Y+3, r22	; 0x03
    7176:	5e 83       	std	Y+6, r21	; 0x06
    7178:	4d 83       	std	Y+5, r20	; 0x05
    717a:	82 e0       	ldi	r24, 0x02	; 2
    717c:	90 e0       	ldi	r25, 0x00	; 0
    717e:	0e 94 10 5c 	call	0xb820	; 0xb820 <_Znaj>
    7182:	ac 01       	movw	r20, r24
    7184:	9a 01       	movw	r18, r20
    7186:	8d 81       	ldd	r24, Y+5	; 0x05
    7188:	9e 81       	ldd	r25, Y+6	; 0x06
    718a:	f9 01       	movw	r30, r18
    718c:	91 83       	std	Z+1, r25	; 0x01
    718e:	80 83       	st	Z, r24
    7190:	6b 81       	ldd	r22, Y+3	; 0x03
    7192:	7c 81       	ldd	r23, Y+4	; 0x04
    7194:	89 81       	ldd	r24, Y+1	; 0x01
    7196:	9a 81       	ldd	r25, Y+2	; 0x02
    7198:	21 e0       	ldi	r18, 0x01	; 1
    719a:	30 e0       	ldi	r19, 0x00	; 0
    719c:	89 df       	rcall	.-238    	; 0x70b0 <_ZN6HCSR044initEiPii>
    719e:	00 00       	nop
    71a0:	26 96       	adiw	r28, 0x06	; 6
    71a2:	0f b6       	in	r0, 0x3f	; 63
    71a4:	f8 94       	cli
    71a6:	de bf       	out	0x3e, r29	; 62
    71a8:	0f be       	out	0x3f, r0	; 63
    71aa:	cd bf       	out	0x3d, r28	; 61
    71ac:	df 91       	pop	r29
    71ae:	cf 91       	pop	r28
    71b0:	08 95       	ret

000071b2 <_ZN6HCSR04D1Ev>:
HCSR04::~HCSR04()
    71b2:	cf 93       	push	r28
    71b4:	df 93       	push	r29
    71b6:	1f 92       	push	r1
    71b8:	1f 92       	push	r1
    71ba:	cd b7       	in	r28, 0x3d	; 61
    71bc:	de b7       	in	r29, 0x3e	; 62
    71be:	9a 83       	std	Y+2, r25	; 0x02
    71c0:	89 83       	std	Y+1, r24	; 0x01
{
	~this->out;
	delete[] this->echo;
    71c2:	89 81       	ldd	r24, Y+1	; 0x01
    71c4:	9a 81       	ldd	r25, Y+2	; 0x02
    71c6:	fc 01       	movw	r30, r24
    71c8:	82 81       	ldd	r24, Z+2	; 0x02
    71ca:	93 81       	ldd	r25, Z+3	; 0x03
    71cc:	89 2b       	or	r24, r25
    71ce:	39 f0       	breq	.+14     	; 0x71de <_ZN6HCSR04D1Ev+0x2c>
    71d0:	89 81       	ldd	r24, Y+1	; 0x01
    71d2:	9a 81       	ldd	r25, Y+2	; 0x02
    71d4:	fc 01       	movw	r30, r24
    71d6:	82 81       	ldd	r24, Z+2	; 0x02
    71d8:	93 81       	ldd	r25, Z+3	; 0x03
    71da:	0e 94 11 5c 	call	0xb822	; 0xb822 <_ZdaPv>
	~this->n;
}
    71de:	00 00       	nop
    71e0:	0f 90       	pop	r0
    71e2:	0f 90       	pop	r0
    71e4:	df 91       	pop	r29
    71e6:	cf 91       	pop	r28
    71e8:	08 95       	ret

000071ea <_ZNK6HCSR044distEi>:
///////////////////////////////////////////////////dist
float HCSR04::dist(int n) const
{
    71ea:	cf 93       	push	r28
    71ec:	df 93       	push	r29
    71ee:	cd b7       	in	r28, 0x3d	; 61
    71f0:	de b7       	in	r29, 0x3e	; 62
    71f2:	28 97       	sbiw	r28, 0x08	; 8
    71f4:	0f b6       	in	r0, 0x3f	; 63
    71f6:	f8 94       	cli
    71f8:	de bf       	out	0x3e, r29	; 62
    71fa:	0f be       	out	0x3f, r0	; 63
    71fc:	cd bf       	out	0x3d, r28	; 61
    71fe:	9e 83       	std	Y+6, r25	; 0x06
    7200:	8d 83       	std	Y+5, r24	; 0x05
    7202:	78 87       	std	Y+8, r23	; 0x08
    7204:	6f 83       	std	Y+7, r22	; 0x07
	digitalWrite(this->out, LOW);
    7206:	8d 81       	ldd	r24, Y+5	; 0x05
    7208:	9e 81       	ldd	r25, Y+6	; 0x06
    720a:	fc 01       	movw	r30, r24
    720c:	80 81       	ld	r24, Z
    720e:	91 81       	ldd	r25, Z+1	; 0x01
    7210:	60 e0       	ldi	r22, 0x00	; 0
    7212:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
	delayMicroseconds(2);
    7216:	82 e0       	ldi	r24, 0x02	; 2
    7218:	90 e0       	ldi	r25, 0x00	; 0
    721a:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
	digitalWrite(this->out, HIGH);
    721e:	8d 81       	ldd	r24, Y+5	; 0x05
    7220:	9e 81       	ldd	r25, Y+6	; 0x06
    7222:	fc 01       	movw	r30, r24
    7224:	80 81       	ld	r24, Z
    7226:	91 81       	ldd	r25, Z+1	; 0x01
    7228:	61 e0       	ldi	r22, 0x01	; 1
    722a:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
	delayMicroseconds(10);
    722e:	8a e0       	ldi	r24, 0x0A	; 10
    7230:	90 e0       	ldi	r25, 0x00	; 0
    7232:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
	digitalWrite(this->out, LOW);
    7236:	8d 81       	ldd	r24, Y+5	; 0x05
    7238:	9e 81       	ldd	r25, Y+6	; 0x06
    723a:	fc 01       	movw	r30, r24
    723c:	80 81       	ld	r24, Z
    723e:	91 81       	ldd	r25, Z+1	; 0x01
    7240:	60 e0       	ldi	r22, 0x00	; 0
    7242:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
	noInterrupts();
    7246:	f8 94       	cli
	float d=pulseIn(this->echo[n], HIGH);
    7248:	8d 81       	ldd	r24, Y+5	; 0x05
    724a:	9e 81       	ldd	r25, Y+6	; 0x06
    724c:	fc 01       	movw	r30, r24
    724e:	22 81       	ldd	r18, Z+2	; 0x02
    7250:	33 81       	ldd	r19, Z+3	; 0x03
    7252:	8f 81       	ldd	r24, Y+7	; 0x07
    7254:	98 85       	ldd	r25, Y+8	; 0x08
    7256:	88 0f       	add	r24, r24
    7258:	99 1f       	adc	r25, r25
    725a:	82 0f       	add	r24, r18
    725c:	93 1f       	adc	r25, r19
    725e:	fc 01       	movw	r30, r24
    7260:	80 81       	ld	r24, Z
    7262:	91 81       	ldd	r25, Z+1	; 0x01
    7264:	20 e4       	ldi	r18, 0x40	; 64
    7266:	32 e4       	ldi	r19, 0x42	; 66
    7268:	4f e0       	ldi	r20, 0x0F	; 15
    726a:	50 e0       	ldi	r21, 0x00	; 0
    726c:	61 e0       	ldi	r22, 0x01	; 1
    726e:	0e 94 1e 61 	call	0xc23c	; 0xc23c <pulseIn>
    7272:	dc 01       	movw	r26, r24
    7274:	cb 01       	movw	r24, r22
    7276:	bc 01       	movw	r22, r24
    7278:	cd 01       	movw	r24, r26
    727a:	0e 94 e8 58 	call	0xb1d0	; 0xb1d0 <__floatunsisf>
    727e:	dc 01       	movw	r26, r24
    7280:	cb 01       	movw	r24, r22
    7282:	89 83       	std	Y+1, r24	; 0x01
    7284:	9a 83       	std	Y+2, r25	; 0x02
    7286:	ab 83       	std	Y+3, r26	; 0x03
    7288:	bc 83       	std	Y+4, r27	; 0x04
	interrupts();
    728a:	78 94       	sei
	return d / 58.0;
    728c:	20 e0       	ldi	r18, 0x00	; 0
    728e:	30 e0       	ldi	r19, 0x00	; 0
    7290:	48 e6       	ldi	r20, 0x68	; 104
    7292:	52 e4       	ldi	r21, 0x42	; 66
    7294:	69 81       	ldd	r22, Y+1	; 0x01
    7296:	7a 81       	ldd	r23, Y+2	; 0x02
    7298:	8b 81       	ldd	r24, Y+3	; 0x03
    729a:	9c 81       	ldd	r25, Y+4	; 0x04
    729c:	0e 94 54 58 	call	0xb0a8	; 0xb0a8 <__divsf3>
    72a0:	dc 01       	movw	r26, r24
    72a2:	cb 01       	movw	r24, r22
}
    72a4:	bc 01       	movw	r22, r24
    72a6:	cd 01       	movw	r24, r26
    72a8:	28 96       	adiw	r28, 0x08	; 8
    72aa:	0f b6       	in	r0, 0x3f	; 63
    72ac:	f8 94       	cli
    72ae:	de bf       	out	0x3e, r29	; 62
    72b0:	0f be       	out	0x3f, r0	; 63
    72b2:	cd bf       	out	0x3d, r28	; 61
    72b4:	df 91       	pop	r29
    72b6:	cf 91       	pop	r28
    72b8:	08 95       	ret

000072ba <_ZNK6HCSR044distEv>:
float HCSR04::dist() const{return this->dist(0);}
    72ba:	cf 93       	push	r28
    72bc:	df 93       	push	r29
    72be:	1f 92       	push	r1
    72c0:	1f 92       	push	r1
    72c2:	cd b7       	in	r28, 0x3d	; 61
    72c4:	de b7       	in	r29, 0x3e	; 62
    72c6:	9a 83       	std	Y+2, r25	; 0x02
    72c8:	89 83       	std	Y+1, r24	; 0x01
    72ca:	89 81       	ldd	r24, Y+1	; 0x01
    72cc:	9a 81       	ldd	r25, Y+2	; 0x02
    72ce:	60 e0       	ldi	r22, 0x00	; 0
    72d0:	70 e0       	ldi	r23, 0x00	; 0
    72d2:	8b df       	rcall	.-234    	; 0x71ea <_ZNK6HCSR044distEi>
    72d4:	dc 01       	movw	r26, r24
    72d6:	cb 01       	movw	r24, r22
    72d8:	bc 01       	movw	r22, r24
    72da:	cd 01       	movw	r24, r26
    72dc:	0f 90       	pop	r0
    72de:	0f 90       	pop	r0
    72e0:	df 91       	pop	r29
    72e2:	cf 91       	pop	r28
    72e4:	08 95       	ret

000072e6 <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
    72e6:	cf 93       	push	r28
    72e8:	df 93       	push	r29
    72ea:	1f 92       	push	r1
    72ec:	1f 92       	push	r1
    72ee:	cd b7       	in	r28, 0x3d	; 61
    72f0:	de b7       	in	r29, 0x3e	; 62
    72f2:	9a 83       	std	Y+2, r25	; 0x02
    72f4:	89 83       	std	Y+1, r24	; 0x01
	kchar = NO_KEY;
    72f6:	89 81       	ldd	r24, Y+1	; 0x01
    72f8:	9a 81       	ldd	r25, Y+2	; 0x02
    72fa:	fc 01       	movw	r30, r24
    72fc:	10 82       	st	Z, r1
	kstate = IDLE;
    72fe:	89 81       	ldd	r24, Y+1	; 0x01
    7300:	9a 81       	ldd	r25, Y+2	; 0x02
    7302:	fc 01       	movw	r30, r24
    7304:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
    7306:	89 81       	ldd	r24, Y+1	; 0x01
    7308:	9a 81       	ldd	r25, Y+2	; 0x02
    730a:	fc 01       	movw	r30, r24
    730c:	14 82       	std	Z+4, r1	; 0x04
}
    730e:	00 00       	nop
    7310:	0f 90       	pop	r0
    7312:	0f 90       	pop	r0
    7314:	df 91       	pop	r29
    7316:	cf 91       	pop	r28
    7318:	08 95       	ret

0000731a <_ZN6Keypad8pin_modeEhh>:
    holdTime = hold;
}

void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
}
    731a:	cf 93       	push	r28
    731c:	df 93       	push	r29
    731e:	00 d0       	rcall	.+0      	; 0x7320 <_ZN6Keypad8pin_modeEhh+0x6>
    7320:	1f 92       	push	r1
    7322:	cd b7       	in	r28, 0x3d	; 61
    7324:	de b7       	in	r29, 0x3e	; 62
    7326:	9a 83       	std	Y+2, r25	; 0x02
    7328:	89 83       	std	Y+1, r24	; 0x01
    732a:	6b 83       	std	Y+3, r22	; 0x03
    732c:	4c 83       	std	Y+4, r20	; 0x04
    732e:	6c 81       	ldd	r22, Y+4	; 0x04
    7330:	8b 81       	ldd	r24, Y+3	; 0x03
    7332:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    7336:	00 00       	nop
    7338:	0f 90       	pop	r0
    733a:	0f 90       	pop	r0
    733c:	0f 90       	pop	r0
    733e:	0f 90       	pop	r0
    7340:	df 91       	pop	r29
    7342:	cf 91       	pop	r28
    7344:	08 95       	ret

00007346 <_ZN6Keypad9pin_writeEhb>:
    7346:	cf 93       	push	r28
    7348:	df 93       	push	r29
    734a:	00 d0       	rcall	.+0      	; 0x734c <_ZN6Keypad9pin_writeEhb+0x6>
    734c:	1f 92       	push	r1
    734e:	cd b7       	in	r28, 0x3d	; 61
    7350:	de b7       	in	r29, 0x3e	; 62
    7352:	9a 83       	std	Y+2, r25	; 0x02
    7354:	89 83       	std	Y+1, r24	; 0x01
    7356:	6b 83       	std	Y+3, r22	; 0x03
    7358:	4c 83       	std	Y+4, r20	; 0x04
    735a:	8c 81       	ldd	r24, Y+4	; 0x04
    735c:	68 2f       	mov	r22, r24
    735e:	8b 81       	ldd	r24, Y+3	; 0x03
    7360:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    7364:	00 00       	nop
    7366:	0f 90       	pop	r0
    7368:	0f 90       	pop	r0
    736a:	0f 90       	pop	r0
    736c:	0f 90       	pop	r0
    736e:	df 91       	pop	r29
    7370:	cf 91       	pop	r28
    7372:	08 95       	ret

00007374 <_ZN6Keypad8pin_readEh>:
    7374:	cf 93       	push	r28
    7376:	df 93       	push	r29
    7378:	00 d0       	rcall	.+0      	; 0x737a <_ZN6Keypad8pin_readEh+0x6>
    737a:	cd b7       	in	r28, 0x3d	; 61
    737c:	de b7       	in	r29, 0x3e	; 62
    737e:	9a 83       	std	Y+2, r25	; 0x02
    7380:	89 83       	std	Y+1, r24	; 0x01
    7382:	6b 83       	std	Y+3, r22	; 0x03
    7384:	8b 81       	ldd	r24, Y+3	; 0x03
    7386:	0e 94 f6 60 	call	0xc1ec	; 0xc1ec <digitalRead>
    738a:	0f 90       	pop	r0
    738c:	0f 90       	pop	r0
    738e:	0f 90       	pop	r0
    7390:	df 91       	pop	r29
    7392:	cf 91       	pop	r28
    7394:	08 95       	ret

00007396 <_ZN6KeypadC1EPcPhS1_hh>:
    7396:	ef 92       	push	r14
    7398:	ff 92       	push	r15
    739a:	0f 93       	push	r16
    739c:	1f 93       	push	r17
    739e:	cf 93       	push	r28
    73a0:	df 93       	push	r29
    73a2:	cd b7       	in	r28, 0x3d	; 61
    73a4:	de b7       	in	r29, 0x3e	; 62
    73a6:	2a 97       	sbiw	r28, 0x0a	; 10
    73a8:	0f b6       	in	r0, 0x3f	; 63
    73aa:	f8 94       	cli
    73ac:	de bf       	out	0x3e, r29	; 62
    73ae:	0f be       	out	0x3f, r0	; 63
    73b0:	cd bf       	out	0x3d, r28	; 61
    73b2:	9a 83       	std	Y+2, r25	; 0x02
    73b4:	89 83       	std	Y+1, r24	; 0x01
    73b6:	7c 83       	std	Y+4, r23	; 0x04
    73b8:	6b 83       	std	Y+3, r22	; 0x03
    73ba:	5e 83       	std	Y+6, r21	; 0x06
    73bc:	4d 83       	std	Y+5, r20	; 0x05
    73be:	38 87       	std	Y+8, r19	; 0x08
    73c0:	2f 83       	std	Y+7, r18	; 0x07
    73c2:	09 87       	std	Y+9, r16	; 0x09
    73c4:	ea 86       	std	Y+10, r14	; 0x0a
    73c6:	89 81       	ldd	r24, Y+1	; 0x01
    73c8:	9a 81       	ldd	r25, Y+2	; 0x02
    73ca:	02 96       	adiw	r24, 0x02	; 2
    73cc:	8c df       	rcall	.-232    	; 0x72e6 <_ZN3KeyC1Ev>
    73ce:	25 ef       	ldi	r18, 0xF5	; 245
    73d0:	32 e0       	ldi	r19, 0x02	; 2
    73d2:	89 81       	ldd	r24, Y+1	; 0x01
    73d4:	9a 81       	ldd	r25, Y+2	; 0x02
    73d6:	fc 01       	movw	r30, r24
    73d8:	31 83       	std	Z+1, r19	; 0x01
    73da:	20 83       	st	Z, r18
    73dc:	89 81       	ldd	r24, Y+1	; 0x01
    73de:	9a 81       	ldd	r25, Y+2	; 0x02
    73e0:	4b 96       	adiw	r24, 0x1b	; 27
    73e2:	09 e0       	ldi	r16, 0x09	; 9
    73e4:	10 e0       	ldi	r17, 0x00	; 0
    73e6:	7c 01       	movw	r14, r24
    73e8:	0f 3f       	cpi	r16, 0xFF	; 255
    73ea:	ff ef       	ldi	r31, 0xFF	; 255
    73ec:	1f 07       	cpc	r17, r31
    73ee:	41 f0       	breq	.+16     	; 0x7400 <_ZN6KeypadC1EPcPhS1_hh+0x6a>
    73f0:	c7 01       	movw	r24, r14
    73f2:	79 df       	rcall	.-270    	; 0x72e6 <_ZN3KeyC1Ev>
    73f4:	85 e0       	ldi	r24, 0x05	; 5
    73f6:	e8 0e       	add	r14, r24
    73f8:	f1 1c       	adc	r15, r1
    73fa:	01 50       	subi	r16, 0x01	; 1
    73fc:	11 09       	sbc	r17, r1
    73fe:	f4 cf       	rjmp	.-24     	; 0x73e8 <_ZN6KeypadC1EPcPhS1_hh+0x52>
    7400:	89 81       	ldd	r24, Y+1	; 0x01
    7402:	9a 81       	ldd	r25, Y+2	; 0x02
    7404:	89 5a       	subi	r24, 0xA9	; 169
    7406:	9f 4f       	sbci	r25, 0xFF	; 255
    7408:	2d 81       	ldd	r18, Y+5	; 0x05
    740a:	3e 81       	ldd	r19, Y+6	; 0x06
    740c:	fc 01       	movw	r30, r24
    740e:	31 83       	std	Z+1, r19	; 0x01
    7410:	20 83       	st	Z, r18
    7412:	89 81       	ldd	r24, Y+1	; 0x01
    7414:	9a 81       	ldd	r25, Y+2	; 0x02
    7416:	87 5a       	subi	r24, 0xA7	; 167
    7418:	9f 4f       	sbci	r25, 0xFF	; 255
    741a:	2f 81       	ldd	r18, Y+7	; 0x07
    741c:	38 85       	ldd	r19, Y+8	; 0x08
    741e:	fc 01       	movw	r30, r24
    7420:	31 83       	std	Z+1, r19	; 0x01
    7422:	20 83       	st	Z, r18
    7424:	89 81       	ldd	r24, Y+1	; 0x01
    7426:	9a 81       	ldd	r25, Y+2	; 0x02
    7428:	85 5a       	subi	r24, 0xA5	; 165
    742a:	9f 4f       	sbci	r25, 0xFF	; 255
    742c:	29 85       	ldd	r18, Y+9	; 0x09
    742e:	fc 01       	movw	r30, r24
    7430:	20 83       	st	Z, r18
    7432:	89 81       	ldd	r24, Y+1	; 0x01
    7434:	9a 81       	ldd	r25, Y+2	; 0x02
    7436:	84 5a       	subi	r24, 0xA4	; 164
    7438:	9f 4f       	sbci	r25, 0xFF	; 255
    743a:	2a 85       	ldd	r18, Y+10	; 0x0a
    743c:	fc 01       	movw	r30, r24
    743e:	20 83       	st	Z, r18
    7440:	2b 81       	ldd	r18, Y+3	; 0x03
    7442:	3c 81       	ldd	r19, Y+4	; 0x04
    7444:	89 81       	ldd	r24, Y+1	; 0x01
    7446:	9a 81       	ldd	r25, Y+2	; 0x02
    7448:	b9 01       	movw	r22, r18
    744a:	2e d0       	rcall	.+92     	; 0x74a8 <_ZN6Keypad5beginEPc>
    744c:	89 81       	ldd	r24, Y+1	; 0x01
    744e:	9a 81       	ldd	r25, Y+2	; 0x02
    7450:	6a e0       	ldi	r22, 0x0A	; 10
    7452:	70 e0       	ldi	r23, 0x00	; 0
    7454:	55 d4       	rcall	.+2218   	; 0x7d00 <_ZN6Keypad15setDebounceTimeEj>
    7456:	89 81       	ldd	r24, Y+1	; 0x01
    7458:	9a 81       	ldd	r25, Y+2	; 0x02
    745a:	64 ef       	ldi	r22, 0xF4	; 244
    745c:	71 e0       	ldi	r23, 0x01	; 1
    745e:	79 d4       	rcall	.+2290   	; 0x7d52 <_ZN6Keypad11setHoldTimeEj>
    7460:	89 81       	ldd	r24, Y+1	; 0x01
    7462:	9a 81       	ldd	r25, Y+2	; 0x02
    7464:	8e 59       	subi	r24, 0x9E	; 158
    7466:	9f 4f       	sbci	r25, 0xFF	; 255
    7468:	fc 01       	movw	r30, r24
    746a:	11 82       	std	Z+1, r1	; 0x01
    746c:	10 82       	st	Z, r1
    746e:	89 81       	ldd	r24, Y+1	; 0x01
    7470:	9a 81       	ldd	r25, Y+2	; 0x02
    7472:	8f 5a       	subi	r24, 0xAF	; 175
    7474:	9f 4f       	sbci	r25, 0xFF	; 255
    7476:	fc 01       	movw	r30, r24
    7478:	10 82       	st	Z, r1
    747a:	11 82       	std	Z+1, r1	; 0x01
    747c:	12 82       	std	Z+2, r1	; 0x02
    747e:	13 82       	std	Z+3, r1	; 0x03
    7480:	89 81       	ldd	r24, Y+1	; 0x01
    7482:	9a 81       	ldd	r25, Y+2	; 0x02
    7484:	8f 59       	subi	r24, 0x9F	; 159
    7486:	9f 4f       	sbci	r25, 0xFF	; 255
    7488:	fc 01       	movw	r30, r24
    748a:	10 82       	st	Z, r1
    748c:	00 00       	nop
    748e:	2a 96       	adiw	r28, 0x0a	; 10
    7490:	0f b6       	in	r0, 0x3f	; 63
    7492:	f8 94       	cli
    7494:	de bf       	out	0x3e, r29	; 62
    7496:	0f be       	out	0x3f, r0	; 63
    7498:	cd bf       	out	0x3d, r28	; 61
    749a:	df 91       	pop	r29
    749c:	cf 91       	pop	r28
    749e:	1f 91       	pop	r17
    74a0:	0f 91       	pop	r16
    74a2:	ff 90       	pop	r15
    74a4:	ef 90       	pop	r14
    74a6:	08 95       	ret

000074a8 <_ZN6Keypad5beginEPc>:
    74a8:	cf 93       	push	r28
    74aa:	df 93       	push	r29
    74ac:	00 d0       	rcall	.+0      	; 0x74ae <_ZN6Keypad5beginEPc+0x6>
    74ae:	1f 92       	push	r1
    74b0:	cd b7       	in	r28, 0x3d	; 61
    74b2:	de b7       	in	r29, 0x3e	; 62
    74b4:	9a 83       	std	Y+2, r25	; 0x02
    74b6:	89 83       	std	Y+1, r24	; 0x01
    74b8:	7c 83       	std	Y+4, r23	; 0x04
    74ba:	6b 83       	std	Y+3, r22	; 0x03
    74bc:	89 81       	ldd	r24, Y+1	; 0x01
    74be:	9a 81       	ldd	r25, Y+2	; 0x02
    74c0:	8b 5a       	subi	r24, 0xAB	; 171
    74c2:	9f 4f       	sbci	r25, 0xFF	; 255
    74c4:	2b 81       	ldd	r18, Y+3	; 0x03
    74c6:	3c 81       	ldd	r19, Y+4	; 0x04
    74c8:	fc 01       	movw	r30, r24
    74ca:	31 83       	std	Z+1, r19	; 0x01
    74cc:	20 83       	st	Z, r18
    74ce:	00 00       	nop
    74d0:	0f 90       	pop	r0
    74d2:	0f 90       	pop	r0
    74d4:	0f 90       	pop	r0
    74d6:	0f 90       	pop	r0
    74d8:	df 91       	pop	r29
    74da:	cf 91       	pop	r28
    74dc:	08 95       	ret

000074de <_ZN6Keypad6getKeyEv>:
    74de:	cf 93       	push	r28
    74e0:	df 93       	push	r29
    74e2:	1f 92       	push	r1
    74e4:	1f 92       	push	r1
    74e6:	cd b7       	in	r28, 0x3d	; 61
    74e8:	de b7       	in	r29, 0x3e	; 62
    74ea:	9a 83       	std	Y+2, r25	; 0x02
    74ec:	89 83       	std	Y+1, r24	; 0x01
    74ee:	89 81       	ldd	r24, Y+1	; 0x01
    74f0:	9a 81       	ldd	r25, Y+2	; 0x02
    74f2:	8f 59       	subi	r24, 0x9F	; 159
    74f4:	9f 4f       	sbci	r25, 0xFF	; 255
    74f6:	21 e0       	ldi	r18, 0x01	; 1
    74f8:	fc 01       	movw	r30, r24
    74fa:	20 83       	st	Z, r18
    74fc:	89 81       	ldd	r24, Y+1	; 0x01
    74fe:	9a 81       	ldd	r25, Y+2	; 0x02
    7500:	24 d0       	rcall	.+72     	; 0x754a <_ZN6Keypad7getKeysEv>
    7502:	88 23       	and	r24, r24
    7504:	71 f0       	breq	.+28     	; 0x7522 <_ZN6Keypad6getKeyEv+0x44>
    7506:	89 81       	ldd	r24, Y+1	; 0x01
    7508:	9a 81       	ldd	r25, Y+2	; 0x02
    750a:	fc 01       	movw	r30, r24
    750c:	87 8d       	ldd	r24, Z+31	; 0x1f
    750e:	88 23       	and	r24, r24
    7510:	41 f0       	breq	.+16     	; 0x7522 <_ZN6Keypad6getKeyEv+0x44>
    7512:	89 81       	ldd	r24, Y+1	; 0x01
    7514:	9a 81       	ldd	r25, Y+2	; 0x02
    7516:	fc 01       	movw	r30, r24
    7518:	86 8d       	ldd	r24, Z+30	; 0x1e
    751a:	81 30       	cpi	r24, 0x01	; 1
    751c:	11 f4       	brne	.+4      	; 0x7522 <_ZN6Keypad6getKeyEv+0x44>
    751e:	81 e0       	ldi	r24, 0x01	; 1
    7520:	01 c0       	rjmp	.+2      	; 0x7524 <_ZN6Keypad6getKeyEv+0x46>
    7522:	80 e0       	ldi	r24, 0x00	; 0
    7524:	88 23       	and	r24, r24
    7526:	29 f0       	breq	.+10     	; 0x7532 <_ZN6Keypad6getKeyEv+0x54>
    7528:	89 81       	ldd	r24, Y+1	; 0x01
    752a:	9a 81       	ldd	r25, Y+2	; 0x02
    752c:	fc 01       	movw	r30, r24
    752e:	83 8d       	ldd	r24, Z+27	; 0x1b
    7530:	07 c0       	rjmp	.+14     	; 0x7540 <_ZN6Keypad6getKeyEv+0x62>
    7532:	89 81       	ldd	r24, Y+1	; 0x01
    7534:	9a 81       	ldd	r25, Y+2	; 0x02
    7536:	8f 59       	subi	r24, 0x9F	; 159
    7538:	9f 4f       	sbci	r25, 0xFF	; 255
    753a:	fc 01       	movw	r30, r24
    753c:	10 82       	st	Z, r1
    753e:	80 e0       	ldi	r24, 0x00	; 0
    7540:	0f 90       	pop	r0
    7542:	0f 90       	pop	r0
    7544:	df 91       	pop	r29
    7546:	cf 91       	pop	r28
    7548:	08 95       	ret

0000754a <_ZN6Keypad7getKeysEv>:
    754a:	cf 93       	push	r28
    754c:	df 93       	push	r29
    754e:	00 d0       	rcall	.+0      	; 0x7550 <_ZN6Keypad7getKeysEv+0x6>
    7550:	cd b7       	in	r28, 0x3d	; 61
    7552:	de b7       	in	r29, 0x3e	; 62
    7554:	9b 83       	std	Y+3, r25	; 0x03
    7556:	8a 83       	std	Y+2, r24	; 0x02
    7558:	19 82       	std	Y+1, r1	; 0x01
    755a:	0e 94 75 5e 	call	0xbcea	; 0xbcea <millis>
    755e:	9b 01       	movw	r18, r22
    7560:	ac 01       	movw	r20, r24
    7562:	8a 81       	ldd	r24, Y+2	; 0x02
    7564:	9b 81       	ldd	r25, Y+3	; 0x03
    7566:	8f 5a       	subi	r24, 0xAF	; 175
    7568:	9f 4f       	sbci	r25, 0xFF	; 255
    756a:	fc 01       	movw	r30, r24
    756c:	80 81       	ld	r24, Z
    756e:	91 81       	ldd	r25, Z+1	; 0x01
    7570:	a2 81       	ldd	r26, Z+2	; 0x02
    7572:	b3 81       	ldd	r27, Z+3	; 0x03
    7574:	28 1b       	sub	r18, r24
    7576:	39 0b       	sbc	r19, r25
    7578:	4a 0b       	sbc	r20, r26
    757a:	5b 0b       	sbc	r21, r27
    757c:	8a 81       	ldd	r24, Y+2	; 0x02
    757e:	9b 81       	ldd	r25, Y+3	; 0x03
    7580:	83 5a       	subi	r24, 0xA3	; 163
    7582:	9f 4f       	sbci	r25, 0xFF	; 255
    7584:	fc 01       	movw	r30, r24
    7586:	80 81       	ld	r24, Z
    7588:	91 81       	ldd	r25, Z+1	; 0x01
    758a:	cc 01       	movw	r24, r24
    758c:	a0 e0       	ldi	r26, 0x00	; 0
    758e:	b0 e0       	ldi	r27, 0x00	; 0
    7590:	61 e0       	ldi	r22, 0x01	; 1
    7592:	82 17       	cp	r24, r18
    7594:	93 07       	cpc	r25, r19
    7596:	a4 07       	cpc	r26, r20
    7598:	b5 07       	cpc	r27, r21
    759a:	08 f0       	brcs	.+2      	; 0x759e <_ZN6Keypad7getKeysEv+0x54>
    759c:	60 e0       	ldi	r22, 0x00	; 0
    759e:	66 23       	and	r22, r22
    75a0:	a1 f0       	breq	.+40     	; 0x75ca <_ZN6Keypad7getKeysEv+0x80>
    75a2:	8a 81       	ldd	r24, Y+2	; 0x02
    75a4:	9b 81       	ldd	r25, Y+3	; 0x03
    75a6:	18 d0       	rcall	.+48     	; 0x75d8 <_ZN6Keypad8scanKeysEv>
    75a8:	8a 81       	ldd	r24, Y+2	; 0x02
    75aa:	9b 81       	ldd	r25, Y+3	; 0x03
    75ac:	58 d1       	rcall	.+688    	; 0x785e <_ZN6Keypad10updateListEv>
    75ae:	89 83       	std	Y+1, r24	; 0x01
    75b0:	0e 94 75 5e 	call	0xbcea	; 0xbcea <millis>
    75b4:	dc 01       	movw	r26, r24
    75b6:	cb 01       	movw	r24, r22
    75b8:	2a 81       	ldd	r18, Y+2	; 0x02
    75ba:	3b 81       	ldd	r19, Y+3	; 0x03
    75bc:	2f 5a       	subi	r18, 0xAF	; 175
    75be:	3f 4f       	sbci	r19, 0xFF	; 255
    75c0:	f9 01       	movw	r30, r18
    75c2:	80 83       	st	Z, r24
    75c4:	91 83       	std	Z+1, r25	; 0x01
    75c6:	a2 83       	std	Z+2, r26	; 0x02
    75c8:	b3 83       	std	Z+3, r27	; 0x03
    75ca:	89 81       	ldd	r24, Y+1	; 0x01
    75cc:	0f 90       	pop	r0
    75ce:	0f 90       	pop	r0
    75d0:	0f 90       	pop	r0
    75d2:	df 91       	pop	r29
    75d4:	cf 91       	pop	r28
    75d6:	08 95       	ret

000075d8 <_ZN6Keypad8scanKeysEv>:
    75d8:	cf 93       	push	r28
    75da:	df 93       	push	r29
    75dc:	00 d0       	rcall	.+0      	; 0x75de <_ZN6Keypad8scanKeysEv+0x6>
    75de:	1f 92       	push	r1
    75e0:	1f 92       	push	r1
    75e2:	cd b7       	in	r28, 0x3d	; 61
    75e4:	de b7       	in	r29, 0x3e	; 62
    75e6:	9d 83       	std	Y+5, r25	; 0x05
    75e8:	8c 83       	std	Y+4, r24	; 0x04
    75ea:	19 82       	std	Y+1, r1	; 0x01
    75ec:	8c 81       	ldd	r24, Y+4	; 0x04
    75ee:	9d 81       	ldd	r25, Y+5	; 0x05
    75f0:	85 5a       	subi	r24, 0xA5	; 165
    75f2:	9f 4f       	sbci	r25, 0xFF	; 255
    75f4:	fc 01       	movw	r30, r24
    75f6:	90 81       	ld	r25, Z
    75f8:	89 81       	ldd	r24, Y+1	; 0x01
    75fa:	89 17       	cp	r24, r25
    75fc:	00 f5       	brcc	.+64     	; 0x763e <_ZN6Keypad8scanKeysEv+0x66>
    75fe:	8c 81       	ldd	r24, Y+4	; 0x04
    7600:	9d 81       	ldd	r25, Y+5	; 0x05
    7602:	fc 01       	movw	r30, r24
    7604:	80 81       	ld	r24, Z
    7606:	91 81       	ldd	r25, Z+1	; 0x01
    7608:	fc 01       	movw	r30, r24
    760a:	20 81       	ld	r18, Z
    760c:	31 81       	ldd	r19, Z+1	; 0x01
    760e:	8c 81       	ldd	r24, Y+4	; 0x04
    7610:	9d 81       	ldd	r25, Y+5	; 0x05
    7612:	89 5a       	subi	r24, 0xA9	; 169
    7614:	9f 4f       	sbci	r25, 0xFF	; 255
    7616:	fc 01       	movw	r30, r24
    7618:	40 81       	ld	r20, Z
    761a:	51 81       	ldd	r21, Z+1	; 0x01
    761c:	89 81       	ldd	r24, Y+1	; 0x01
    761e:	88 2f       	mov	r24, r24
    7620:	90 e0       	ldi	r25, 0x00	; 0
    7622:	84 0f       	add	r24, r20
    7624:	95 1f       	adc	r25, r21
    7626:	fc 01       	movw	r30, r24
    7628:	50 81       	ld	r21, Z
    762a:	8c 81       	ldd	r24, Y+4	; 0x04
    762c:	9d 81       	ldd	r25, Y+5	; 0x05
    762e:	42 e0       	ldi	r20, 0x02	; 2
    7630:	65 2f       	mov	r22, r21
    7632:	f9 01       	movw	r30, r18
    7634:	19 95       	eicall
    7636:	89 81       	ldd	r24, Y+1	; 0x01
    7638:	8f 5f       	subi	r24, 0xFF	; 255
    763a:	89 83       	std	Y+1, r24	; 0x01
    763c:	d7 cf       	rjmp	.-82     	; 0x75ec <_ZN6Keypad8scanKeysEv+0x14>
    763e:	1a 82       	std	Y+2, r1	; 0x02
    7640:	8c 81       	ldd	r24, Y+4	; 0x04
    7642:	9d 81       	ldd	r25, Y+5	; 0x05
    7644:	84 5a       	subi	r24, 0xA4	; 164
    7646:	9f 4f       	sbci	r25, 0xFF	; 255
    7648:	fc 01       	movw	r30, r24
    764a:	90 81       	ld	r25, Z
    764c:	8a 81       	ldd	r24, Y+2	; 0x02
    764e:	89 17       	cp	r24, r25
    7650:	08 f0       	brcs	.+2      	; 0x7654 <_ZN6Keypad8scanKeysEv+0x7c>
    7652:	fc c0       	rjmp	.+504    	; 0x784c <_ZN6Keypad8scanKeysEv+0x274>
    7654:	8c 81       	ldd	r24, Y+4	; 0x04
    7656:	9d 81       	ldd	r25, Y+5	; 0x05
    7658:	fc 01       	movw	r30, r24
    765a:	80 81       	ld	r24, Z
    765c:	91 81       	ldd	r25, Z+1	; 0x01
    765e:	fc 01       	movw	r30, r24
    7660:	20 81       	ld	r18, Z
    7662:	31 81       	ldd	r19, Z+1	; 0x01
    7664:	8c 81       	ldd	r24, Y+4	; 0x04
    7666:	9d 81       	ldd	r25, Y+5	; 0x05
    7668:	87 5a       	subi	r24, 0xA7	; 167
    766a:	9f 4f       	sbci	r25, 0xFF	; 255
    766c:	fc 01       	movw	r30, r24
    766e:	40 81       	ld	r20, Z
    7670:	51 81       	ldd	r21, Z+1	; 0x01
    7672:	8a 81       	ldd	r24, Y+2	; 0x02
    7674:	88 2f       	mov	r24, r24
    7676:	90 e0       	ldi	r25, 0x00	; 0
    7678:	84 0f       	add	r24, r20
    767a:	95 1f       	adc	r25, r21
    767c:	fc 01       	movw	r30, r24
    767e:	50 81       	ld	r21, Z
    7680:	8c 81       	ldd	r24, Y+4	; 0x04
    7682:	9d 81       	ldd	r25, Y+5	; 0x05
    7684:	41 e0       	ldi	r20, 0x01	; 1
    7686:	65 2f       	mov	r22, r21
    7688:	f9 01       	movw	r30, r18
    768a:	19 95       	eicall
    768c:	8c 81       	ldd	r24, Y+4	; 0x04
    768e:	9d 81       	ldd	r25, Y+5	; 0x05
    7690:	fc 01       	movw	r30, r24
    7692:	80 81       	ld	r24, Z
    7694:	91 81       	ldd	r25, Z+1	; 0x01
    7696:	02 96       	adiw	r24, 0x02	; 2
    7698:	fc 01       	movw	r30, r24
    769a:	20 81       	ld	r18, Z
    769c:	31 81       	ldd	r19, Z+1	; 0x01
    769e:	8c 81       	ldd	r24, Y+4	; 0x04
    76a0:	9d 81       	ldd	r25, Y+5	; 0x05
    76a2:	87 5a       	subi	r24, 0xA7	; 167
    76a4:	9f 4f       	sbci	r25, 0xFF	; 255
    76a6:	fc 01       	movw	r30, r24
    76a8:	40 81       	ld	r20, Z
    76aa:	51 81       	ldd	r21, Z+1	; 0x01
    76ac:	8a 81       	ldd	r24, Y+2	; 0x02
    76ae:	88 2f       	mov	r24, r24
    76b0:	90 e0       	ldi	r25, 0x00	; 0
    76b2:	84 0f       	add	r24, r20
    76b4:	95 1f       	adc	r25, r21
    76b6:	fc 01       	movw	r30, r24
    76b8:	50 81       	ld	r21, Z
    76ba:	8c 81       	ldd	r24, Y+4	; 0x04
    76bc:	9d 81       	ldd	r25, Y+5	; 0x05
    76be:	40 e0       	ldi	r20, 0x00	; 0
    76c0:	65 2f       	mov	r22, r21
    76c2:	f9 01       	movw	r30, r18
    76c4:	19 95       	eicall
    76c6:	1b 82       	std	Y+3, r1	; 0x03
    76c8:	8c 81       	ldd	r24, Y+4	; 0x04
    76ca:	9d 81       	ldd	r25, Y+5	; 0x05
    76cc:	85 5a       	subi	r24, 0xA5	; 165
    76ce:	9f 4f       	sbci	r25, 0xFF	; 255
    76d0:	fc 01       	movw	r30, r24
    76d2:	90 81       	ld	r25, Z
    76d4:	8b 81       	ldd	r24, Y+3	; 0x03
    76d6:	89 17       	cp	r24, r25
    76d8:	08 f0       	brcs	.+2      	; 0x76dc <_ZN6Keypad8scanKeysEv+0x104>
    76da:	7b c0       	rjmp	.+246    	; 0x77d2 <_ZN6Keypad8scanKeysEv+0x1fa>
    76dc:	8c 81       	ldd	r24, Y+4	; 0x04
    76de:	9d 81       	ldd	r25, Y+5	; 0x05
    76e0:	fc 01       	movw	r30, r24
    76e2:	80 81       	ld	r24, Z
    76e4:	91 81       	ldd	r25, Z+1	; 0x01
    76e6:	04 96       	adiw	r24, 0x04	; 4
    76e8:	fc 01       	movw	r30, r24
    76ea:	20 81       	ld	r18, Z
    76ec:	31 81       	ldd	r19, Z+1	; 0x01
    76ee:	8c 81       	ldd	r24, Y+4	; 0x04
    76f0:	9d 81       	ldd	r25, Y+5	; 0x05
    76f2:	89 5a       	subi	r24, 0xA9	; 169
    76f4:	9f 4f       	sbci	r25, 0xFF	; 255
    76f6:	fc 01       	movw	r30, r24
    76f8:	40 81       	ld	r20, Z
    76fa:	51 81       	ldd	r21, Z+1	; 0x01
    76fc:	8b 81       	ldd	r24, Y+3	; 0x03
    76fe:	88 2f       	mov	r24, r24
    7700:	90 e0       	ldi	r25, 0x00	; 0
    7702:	84 0f       	add	r24, r20
    7704:	95 1f       	adc	r25, r21
    7706:	fc 01       	movw	r30, r24
    7708:	40 81       	ld	r20, Z
    770a:	8c 81       	ldd	r24, Y+4	; 0x04
    770c:	9d 81       	ldd	r25, Y+5	; 0x05
    770e:	64 2f       	mov	r22, r20
    7710:	f9 01       	movw	r30, r18
    7712:	19 95       	eicall
    7714:	89 2b       	or	r24, r25
    7716:	61 f5       	brne	.+88     	; 0x7770 <_ZN6Keypad8scanKeysEv+0x198>
    7718:	8b 81       	ldd	r24, Y+3	; 0x03
    771a:	68 2f       	mov	r22, r24
    771c:	70 e0       	ldi	r23, 0x00	; 0
    771e:	8b 81       	ldd	r24, Y+3	; 0x03
    7720:	88 2f       	mov	r24, r24
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	2c 81       	ldd	r18, Y+4	; 0x04
    7726:	3d 81       	ldd	r19, Y+5	; 0x05
    7728:	88 0f       	add	r24, r24
    772a:	99 1f       	adc	r25, r25
    772c:	82 0f       	add	r24, r18
    772e:	93 1f       	adc	r25, r19
    7730:	07 96       	adiw	r24, 0x07	; 7
    7732:	fc 01       	movw	r30, r24
    7734:	20 81       	ld	r18, Z
    7736:	31 81       	ldd	r19, Z+1	; 0x01
    7738:	8a 81       	ldd	r24, Y+2	; 0x02
    773a:	48 2f       	mov	r20, r24
    773c:	50 e0       	ldi	r21, 0x00	; 0
    773e:	81 e0       	ldi	r24, 0x01	; 1
    7740:	90 e0       	ldi	r25, 0x00	; 0
    7742:	a0 e0       	ldi	r26, 0x00	; 0
    7744:	b0 e0       	ldi	r27, 0x00	; 0
    7746:	04 c0       	rjmp	.+8      	; 0x7750 <_ZN6Keypad8scanKeysEv+0x178>
    7748:	88 0f       	add	r24, r24
    774a:	99 1f       	adc	r25, r25
    774c:	aa 1f       	adc	r26, r26
    774e:	bb 1f       	adc	r27, r27
    7750:	4a 95       	dec	r20
    7752:	d2 f7       	brpl	.-12     	; 0x7748 <_ZN6Keypad8scanKeysEv+0x170>
    7754:	28 2b       	or	r18, r24
    7756:	39 2b       	or	r19, r25
    7758:	4c 81       	ldd	r20, Y+4	; 0x04
    775a:	5d 81       	ldd	r21, Y+5	; 0x05
    775c:	cb 01       	movw	r24, r22
    775e:	88 0f       	add	r24, r24
    7760:	99 1f       	adc	r25, r25
    7762:	84 0f       	add	r24, r20
    7764:	95 1f       	adc	r25, r21
    7766:	07 96       	adiw	r24, 0x07	; 7
    7768:	fc 01       	movw	r30, r24
    776a:	31 83       	std	Z+1, r19	; 0x01
    776c:	20 83       	st	Z, r18
    776e:	2d c0       	rjmp	.+90     	; 0x77ca <_ZN6Keypad8scanKeysEv+0x1f2>
    7770:	8b 81       	ldd	r24, Y+3	; 0x03
    7772:	68 2f       	mov	r22, r24
    7774:	70 e0       	ldi	r23, 0x00	; 0
    7776:	8b 81       	ldd	r24, Y+3	; 0x03
    7778:	88 2f       	mov	r24, r24
    777a:	90 e0       	ldi	r25, 0x00	; 0
    777c:	2c 81       	ldd	r18, Y+4	; 0x04
    777e:	3d 81       	ldd	r19, Y+5	; 0x05
    7780:	88 0f       	add	r24, r24
    7782:	99 1f       	adc	r25, r25
    7784:	82 0f       	add	r24, r18
    7786:	93 1f       	adc	r25, r19
    7788:	07 96       	adiw	r24, 0x07	; 7
    778a:	fc 01       	movw	r30, r24
    778c:	20 81       	ld	r18, Z
    778e:	31 81       	ldd	r19, Z+1	; 0x01
    7790:	8a 81       	ldd	r24, Y+2	; 0x02
    7792:	48 2f       	mov	r20, r24
    7794:	50 e0       	ldi	r21, 0x00	; 0
    7796:	81 e0       	ldi	r24, 0x01	; 1
    7798:	90 e0       	ldi	r25, 0x00	; 0
    779a:	a0 e0       	ldi	r26, 0x00	; 0
    779c:	b0 e0       	ldi	r27, 0x00	; 0
    779e:	04 c0       	rjmp	.+8      	; 0x77a8 <_ZN6Keypad8scanKeysEv+0x1d0>
    77a0:	88 0f       	add	r24, r24
    77a2:	99 1f       	adc	r25, r25
    77a4:	aa 1f       	adc	r26, r26
    77a6:	bb 1f       	adc	r27, r27
    77a8:	4a 95       	dec	r20
    77aa:	d2 f7       	brpl	.-12     	; 0x77a0 <_ZN6Keypad8scanKeysEv+0x1c8>
    77ac:	80 95       	com	r24
    77ae:	90 95       	com	r25
    77b0:	28 23       	and	r18, r24
    77b2:	39 23       	and	r19, r25
    77b4:	4c 81       	ldd	r20, Y+4	; 0x04
    77b6:	5d 81       	ldd	r21, Y+5	; 0x05
    77b8:	cb 01       	movw	r24, r22
    77ba:	88 0f       	add	r24, r24
    77bc:	99 1f       	adc	r25, r25
    77be:	84 0f       	add	r24, r20
    77c0:	95 1f       	adc	r25, r21
    77c2:	07 96       	adiw	r24, 0x07	; 7
    77c4:	fc 01       	movw	r30, r24
    77c6:	31 83       	std	Z+1, r19	; 0x01
    77c8:	20 83       	st	Z, r18
    77ca:	8b 81       	ldd	r24, Y+3	; 0x03
    77cc:	8f 5f       	subi	r24, 0xFF	; 255
    77ce:	8b 83       	std	Y+3, r24	; 0x03
    77d0:	7b cf       	rjmp	.-266    	; 0x76c8 <_ZN6Keypad8scanKeysEv+0xf0>
    77d2:	8c 81       	ldd	r24, Y+4	; 0x04
    77d4:	9d 81       	ldd	r25, Y+5	; 0x05
    77d6:	fc 01       	movw	r30, r24
    77d8:	80 81       	ld	r24, Z
    77da:	91 81       	ldd	r25, Z+1	; 0x01
    77dc:	02 96       	adiw	r24, 0x02	; 2
    77de:	fc 01       	movw	r30, r24
    77e0:	20 81       	ld	r18, Z
    77e2:	31 81       	ldd	r19, Z+1	; 0x01
    77e4:	8c 81       	ldd	r24, Y+4	; 0x04
    77e6:	9d 81       	ldd	r25, Y+5	; 0x05
    77e8:	87 5a       	subi	r24, 0xA7	; 167
    77ea:	9f 4f       	sbci	r25, 0xFF	; 255
    77ec:	fc 01       	movw	r30, r24
    77ee:	40 81       	ld	r20, Z
    77f0:	51 81       	ldd	r21, Z+1	; 0x01
    77f2:	8a 81       	ldd	r24, Y+2	; 0x02
    77f4:	88 2f       	mov	r24, r24
    77f6:	90 e0       	ldi	r25, 0x00	; 0
    77f8:	84 0f       	add	r24, r20
    77fa:	95 1f       	adc	r25, r21
    77fc:	fc 01       	movw	r30, r24
    77fe:	50 81       	ld	r21, Z
    7800:	8c 81       	ldd	r24, Y+4	; 0x04
    7802:	9d 81       	ldd	r25, Y+5	; 0x05
    7804:	41 e0       	ldi	r20, 0x01	; 1
    7806:	65 2f       	mov	r22, r21
    7808:	f9 01       	movw	r30, r18
    780a:	19 95       	eicall
    780c:	8c 81       	ldd	r24, Y+4	; 0x04
    780e:	9d 81       	ldd	r25, Y+5	; 0x05
    7810:	fc 01       	movw	r30, r24
    7812:	80 81       	ld	r24, Z
    7814:	91 81       	ldd	r25, Z+1	; 0x01
    7816:	fc 01       	movw	r30, r24
    7818:	20 81       	ld	r18, Z
    781a:	31 81       	ldd	r19, Z+1	; 0x01
    781c:	8c 81       	ldd	r24, Y+4	; 0x04
    781e:	9d 81       	ldd	r25, Y+5	; 0x05
    7820:	87 5a       	subi	r24, 0xA7	; 167
    7822:	9f 4f       	sbci	r25, 0xFF	; 255
    7824:	fc 01       	movw	r30, r24
    7826:	40 81       	ld	r20, Z
    7828:	51 81       	ldd	r21, Z+1	; 0x01
    782a:	8a 81       	ldd	r24, Y+2	; 0x02
    782c:	88 2f       	mov	r24, r24
    782e:	90 e0       	ldi	r25, 0x00	; 0
    7830:	84 0f       	add	r24, r20
    7832:	95 1f       	adc	r25, r21
    7834:	fc 01       	movw	r30, r24
    7836:	50 81       	ld	r21, Z
    7838:	8c 81       	ldd	r24, Y+4	; 0x04
    783a:	9d 81       	ldd	r25, Y+5	; 0x05
    783c:	40 e0       	ldi	r20, 0x00	; 0
    783e:	65 2f       	mov	r22, r21
    7840:	f9 01       	movw	r30, r18
    7842:	19 95       	eicall
    7844:	8a 81       	ldd	r24, Y+2	; 0x02
    7846:	8f 5f       	subi	r24, 0xFF	; 255
    7848:	8a 83       	std	Y+2, r24	; 0x02
    784a:	fa ce       	rjmp	.-524    	; 0x7640 <_ZN6Keypad8scanKeysEv+0x68>
    784c:	00 00       	nop
    784e:	0f 90       	pop	r0
    7850:	0f 90       	pop	r0
    7852:	0f 90       	pop	r0
    7854:	0f 90       	pop	r0
    7856:	0f 90       	pop	r0
    7858:	df 91       	pop	r29
    785a:	cf 91       	pop	r28
    785c:	08 95       	ret

0000785e <_ZN6Keypad10updateListEv>:
    785e:	cf 93       	push	r28
    7860:	df 93       	push	r29
    7862:	cd b7       	in	r28, 0x3d	; 61
    7864:	de b7       	in	r29, 0x3e	; 62
    7866:	2e 97       	sbiw	r28, 0x0e	; 14
    7868:	0f b6       	in	r0, 0x3f	; 63
    786a:	f8 94       	cli
    786c:	de bf       	out	0x3e, r29	; 62
    786e:	0f be       	out	0x3f, r0	; 63
    7870:	cd bf       	out	0x3d, r28	; 61
    7872:	9e 87       	std	Y+14, r25	; 0x0e
    7874:	8d 87       	std	Y+13, r24	; 0x0d
    7876:	19 82       	std	Y+1, r1	; 0x01
    7878:	1a 82       	std	Y+2, r1	; 0x02
    787a:	8a 81       	ldd	r24, Y+2	; 0x02
    787c:	8a 30       	cpi	r24, 0x0A	; 10
    787e:	08 f0       	brcs	.+2      	; 0x7882 <_ZN6Keypad10updateListEv+0x24>
    7880:	4d c0       	rjmp	.+154    	; 0x791c <_ZN6Keypad10updateListEv+0xbe>
    7882:	8a 81       	ldd	r24, Y+2	; 0x02
    7884:	28 2f       	mov	r18, r24
    7886:	30 e0       	ldi	r19, 0x00	; 0
    7888:	4d 85       	ldd	r20, Y+13	; 0x0d
    788a:	5e 85       	ldd	r21, Y+14	; 0x0e
    788c:	c9 01       	movw	r24, r18
    788e:	88 0f       	add	r24, r24
    7890:	99 1f       	adc	r25, r25
    7892:	88 0f       	add	r24, r24
    7894:	99 1f       	adc	r25, r25
    7896:	82 0f       	add	r24, r18
    7898:	93 1f       	adc	r25, r19
    789a:	84 0f       	add	r24, r20
    789c:	95 1f       	adc	r25, r21
    789e:	4e 96       	adiw	r24, 0x1e	; 30
    78a0:	fc 01       	movw	r30, r24
    78a2:	80 81       	ld	r24, Z
    78a4:	88 23       	and	r24, r24
    78a6:	b1 f5       	brne	.+108    	; 0x7914 <_ZN6Keypad10updateListEv+0xb6>
    78a8:	8a 81       	ldd	r24, Y+2	; 0x02
    78aa:	28 2f       	mov	r18, r24
    78ac:	30 e0       	ldi	r19, 0x00	; 0
    78ae:	4d 85       	ldd	r20, Y+13	; 0x0d
    78b0:	5e 85       	ldd	r21, Y+14	; 0x0e
    78b2:	c9 01       	movw	r24, r18
    78b4:	88 0f       	add	r24, r24
    78b6:	99 1f       	adc	r25, r25
    78b8:	88 0f       	add	r24, r24
    78ba:	99 1f       	adc	r25, r25
    78bc:	82 0f       	add	r24, r18
    78be:	93 1f       	adc	r25, r19
    78c0:	84 0f       	add	r24, r20
    78c2:	95 1f       	adc	r25, r21
    78c4:	4b 96       	adiw	r24, 0x1b	; 27
    78c6:	fc 01       	movw	r30, r24
    78c8:	10 82       	st	Z, r1
    78ca:	8a 81       	ldd	r24, Y+2	; 0x02
    78cc:	28 2f       	mov	r18, r24
    78ce:	30 e0       	ldi	r19, 0x00	; 0
    78d0:	4d 85       	ldd	r20, Y+13	; 0x0d
    78d2:	5e 85       	ldd	r21, Y+14	; 0x0e
    78d4:	c9 01       	movw	r24, r18
    78d6:	88 0f       	add	r24, r24
    78d8:	99 1f       	adc	r25, r25
    78da:	88 0f       	add	r24, r24
    78dc:	99 1f       	adc	r25, r25
    78de:	82 0f       	add	r24, r18
    78e0:	93 1f       	adc	r25, r19
    78e2:	84 0f       	add	r24, r20
    78e4:	95 1f       	adc	r25, r21
    78e6:	4c 96       	adiw	r24, 0x1c	; 28
    78e8:	2f ef       	ldi	r18, 0xFF	; 255
    78ea:	3f ef       	ldi	r19, 0xFF	; 255
    78ec:	fc 01       	movw	r30, r24
    78ee:	31 83       	std	Z+1, r19	; 0x01
    78f0:	20 83       	st	Z, r18
    78f2:	8a 81       	ldd	r24, Y+2	; 0x02
    78f4:	28 2f       	mov	r18, r24
    78f6:	30 e0       	ldi	r19, 0x00	; 0
    78f8:	4d 85       	ldd	r20, Y+13	; 0x0d
    78fa:	5e 85       	ldd	r21, Y+14	; 0x0e
    78fc:	c9 01       	movw	r24, r18
    78fe:	88 0f       	add	r24, r24
    7900:	99 1f       	adc	r25, r25
    7902:	88 0f       	add	r24, r24
    7904:	99 1f       	adc	r25, r25
    7906:	82 0f       	add	r24, r18
    7908:	93 1f       	adc	r25, r19
    790a:	84 0f       	add	r24, r20
    790c:	95 1f       	adc	r25, r21
    790e:	4f 96       	adiw	r24, 0x1f	; 31
    7910:	fc 01       	movw	r30, r24
    7912:	10 82       	st	Z, r1
    7914:	8a 81       	ldd	r24, Y+2	; 0x02
    7916:	8f 5f       	subi	r24, 0xFF	; 255
    7918:	8a 83       	std	Y+2, r24	; 0x02
    791a:	af cf       	rjmp	.-162    	; 0x787a <_ZN6Keypad10updateListEv+0x1c>
    791c:	1b 82       	std	Y+3, r1	; 0x03
    791e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7920:	9e 85       	ldd	r25, Y+14	; 0x0e
    7922:	85 5a       	subi	r24, 0xA5	; 165
    7924:	9f 4f       	sbci	r25, 0xFF	; 255
    7926:	fc 01       	movw	r30, r24
    7928:	90 81       	ld	r25, Z
    792a:	8b 81       	ldd	r24, Y+3	; 0x03
    792c:	89 17       	cp	r24, r25
    792e:	08 f0       	brcs	.+2      	; 0x7932 <_ZN6Keypad10updateListEv+0xd4>
    7930:	df c0       	rjmp	.+446    	; 0x7af0 <_ZN6Keypad10updateListEv+0x292>
    7932:	1c 82       	std	Y+4, r1	; 0x04
    7934:	8d 85       	ldd	r24, Y+13	; 0x0d
    7936:	9e 85       	ldd	r25, Y+14	; 0x0e
    7938:	84 5a       	subi	r24, 0xA4	; 164
    793a:	9f 4f       	sbci	r25, 0xFF	; 255
    793c:	fc 01       	movw	r30, r24
    793e:	90 81       	ld	r25, Z
    7940:	8c 81       	ldd	r24, Y+4	; 0x04
    7942:	89 17       	cp	r24, r25
    7944:	08 f0       	brcs	.+2      	; 0x7948 <_ZN6Keypad10updateListEv+0xea>
    7946:	d0 c0       	rjmp	.+416    	; 0x7ae8 <_ZN6Keypad10updateListEv+0x28a>
    7948:	8b 81       	ldd	r24, Y+3	; 0x03
    794a:	88 2f       	mov	r24, r24
    794c:	90 e0       	ldi	r25, 0x00	; 0
    794e:	2d 85       	ldd	r18, Y+13	; 0x0d
    7950:	3e 85       	ldd	r19, Y+14	; 0x0e
    7952:	88 0f       	add	r24, r24
    7954:	99 1f       	adc	r25, r25
    7956:	82 0f       	add	r24, r18
    7958:	93 1f       	adc	r25, r19
    795a:	07 96       	adiw	r24, 0x07	; 7
    795c:	fc 01       	movw	r30, r24
    795e:	80 81       	ld	r24, Z
    7960:	91 81       	ldd	r25, Z+1	; 0x01
    7962:	2c 81       	ldd	r18, Y+4	; 0x04
    7964:	22 2f       	mov	r18, r18
    7966:	30 e0       	ldi	r19, 0x00	; 0
    7968:	02 c0       	rjmp	.+4      	; 0x796e <_ZN6Keypad10updateListEv+0x110>
    796a:	96 95       	lsr	r25
    796c:	87 95       	ror	r24
    796e:	2a 95       	dec	r18
    7970:	e2 f7       	brpl	.-8      	; 0x796a <_ZN6Keypad10updateListEv+0x10c>
    7972:	81 70       	andi	r24, 0x01	; 1
    7974:	99 27       	eor	r25, r25
    7976:	21 e0       	ldi	r18, 0x01	; 1
    7978:	89 2b       	or	r24, r25
    797a:	09 f4       	brne	.+2      	; 0x797e <_ZN6Keypad10updateListEv+0x120>
    797c:	20 e0       	ldi	r18, 0x00	; 0
    797e:	2f 83       	std	Y+7, r18	; 0x07
    7980:	8d 85       	ldd	r24, Y+13	; 0x0d
    7982:	9e 85       	ldd	r25, Y+14	; 0x0e
    7984:	8b 5a       	subi	r24, 0xAB	; 171
    7986:	9f 4f       	sbci	r25, 0xFF	; 255
    7988:	fc 01       	movw	r30, r24
    798a:	80 81       	ld	r24, Z
    798c:	91 81       	ldd	r25, Z+1	; 0x01
    798e:	2b 81       	ldd	r18, Y+3	; 0x03
    7990:	62 2f       	mov	r22, r18
    7992:	70 e0       	ldi	r23, 0x00	; 0
    7994:	2d 85       	ldd	r18, Y+13	; 0x0d
    7996:	3e 85       	ldd	r19, Y+14	; 0x0e
    7998:	24 5a       	subi	r18, 0xA4	; 164
    799a:	3f 4f       	sbci	r19, 0xFF	; 255
    799c:	f9 01       	movw	r30, r18
    799e:	20 81       	ld	r18, Z
    79a0:	22 2f       	mov	r18, r18
    79a2:	30 e0       	ldi	r19, 0x00	; 0
    79a4:	62 9f       	mul	r22, r18
    79a6:	a0 01       	movw	r20, r0
    79a8:	63 9f       	mul	r22, r19
    79aa:	50 0d       	add	r21, r0
    79ac:	72 9f       	mul	r23, r18
    79ae:	50 0d       	add	r21, r0
    79b0:	11 24       	eor	r1, r1
    79b2:	2c 81       	ldd	r18, Y+4	; 0x04
    79b4:	22 2f       	mov	r18, r18
    79b6:	30 e0       	ldi	r19, 0x00	; 0
    79b8:	24 0f       	add	r18, r20
    79ba:	35 1f       	adc	r19, r21
    79bc:	82 0f       	add	r24, r18
    79be:	93 1f       	adc	r25, r19
    79c0:	fc 01       	movw	r30, r24
    79c2:	80 81       	ld	r24, Z
    79c4:	88 87       	std	Y+8, r24	; 0x08
    79c6:	8b 81       	ldd	r24, Y+3	; 0x03
    79c8:	48 2f       	mov	r20, r24
    79ca:	50 e0       	ldi	r21, 0x00	; 0
    79cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    79ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    79d0:	84 5a       	subi	r24, 0xA4	; 164
    79d2:	9f 4f       	sbci	r25, 0xFF	; 255
    79d4:	fc 01       	movw	r30, r24
    79d6:	80 81       	ld	r24, Z
    79d8:	88 2f       	mov	r24, r24
    79da:	90 e0       	ldi	r25, 0x00	; 0
    79dc:	48 9f       	mul	r20, r24
    79de:	90 01       	movw	r18, r0
    79e0:	49 9f       	mul	r20, r25
    79e2:	30 0d       	add	r19, r0
    79e4:	58 9f       	mul	r21, r24
    79e6:	30 0d       	add	r19, r0
    79e8:	11 24       	eor	r1, r1
    79ea:	8c 81       	ldd	r24, Y+4	; 0x04
    79ec:	88 2f       	mov	r24, r24
    79ee:	90 e0       	ldi	r25, 0x00	; 0
    79f0:	82 0f       	add	r24, r18
    79f2:	93 1f       	adc	r25, r19
    79f4:	9a 87       	std	Y+10, r25	; 0x0a
    79f6:	89 87       	std	Y+9, r24	; 0x09
    79f8:	29 85       	ldd	r18, Y+9	; 0x09
    79fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    79fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    79fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a00:	b9 01       	movw	r22, r18
    7a02:	46 d1       	rcall	.+652    	; 0x7c90 <_ZN6Keypad10findInListEi>
    7a04:	9c 87       	std	Y+12, r25	; 0x0c
    7a06:	8b 87       	std	Y+11, r24	; 0x0b
    7a08:	8b 85       	ldd	r24, Y+11	; 0x0b
    7a0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    7a0c:	99 23       	and	r25, r25
    7a0e:	34 f0       	brlt	.+12     	; 0x7a1c <_ZN6Keypad10updateListEv+0x1be>
    7a10:	2b 85       	ldd	r18, Y+11	; 0x0b
    7a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a16:	4f 81       	ldd	r20, Y+7	; 0x07
    7a18:	62 2f       	mov	r22, r18
    7a1a:	91 d0       	rcall	.+290    	; 0x7b3e <_ZN6Keypad12nextKeyStateEhb>
    7a1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    7a1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7a20:	01 96       	adiw	r24, 0x01	; 1
    7a22:	09 f0       	breq	.+2      	; 0x7a26 <_ZN6Keypad10updateListEv+0x1c8>
    7a24:	5d c0       	rjmp	.+186    	; 0x7ae0 <_ZN6Keypad10updateListEv+0x282>
    7a26:	8f 81       	ldd	r24, Y+7	; 0x07
    7a28:	88 23       	and	r24, r24
    7a2a:	09 f4       	brne	.+2      	; 0x7a2e <_ZN6Keypad10updateListEv+0x1d0>
    7a2c:	59 c0       	rjmp	.+178    	; 0x7ae0 <_ZN6Keypad10updateListEv+0x282>
    7a2e:	1d 82       	std	Y+5, r1	; 0x05
    7a30:	8d 81       	ldd	r24, Y+5	; 0x05
    7a32:	8a 30       	cpi	r24, 0x0A	; 10
    7a34:	08 f0       	brcs	.+2      	; 0x7a38 <_ZN6Keypad10updateListEv+0x1da>
    7a36:	54 c0       	rjmp	.+168    	; 0x7ae0 <_ZN6Keypad10updateListEv+0x282>
    7a38:	8d 81       	ldd	r24, Y+5	; 0x05
    7a3a:	28 2f       	mov	r18, r24
    7a3c:	30 e0       	ldi	r19, 0x00	; 0
    7a3e:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a40:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a42:	c9 01       	movw	r24, r18
    7a44:	88 0f       	add	r24, r24
    7a46:	99 1f       	adc	r25, r25
    7a48:	88 0f       	add	r24, r24
    7a4a:	99 1f       	adc	r25, r25
    7a4c:	82 0f       	add	r24, r18
    7a4e:	93 1f       	adc	r25, r19
    7a50:	84 0f       	add	r24, r20
    7a52:	95 1f       	adc	r25, r21
    7a54:	4b 96       	adiw	r24, 0x1b	; 27
    7a56:	fc 01       	movw	r30, r24
    7a58:	80 81       	ld	r24, Z
    7a5a:	88 23       	and	r24, r24
    7a5c:	e9 f5       	brne	.+122    	; 0x7ad8 <_ZN6Keypad10updateListEv+0x27a>
    7a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    7a60:	28 2f       	mov	r18, r24
    7a62:	30 e0       	ldi	r19, 0x00	; 0
    7a64:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a66:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a68:	c9 01       	movw	r24, r18
    7a6a:	88 0f       	add	r24, r24
    7a6c:	99 1f       	adc	r25, r25
    7a6e:	88 0f       	add	r24, r24
    7a70:	99 1f       	adc	r25, r25
    7a72:	82 0f       	add	r24, r18
    7a74:	93 1f       	adc	r25, r19
    7a76:	84 0f       	add	r24, r20
    7a78:	95 1f       	adc	r25, r21
    7a7a:	4b 96       	adiw	r24, 0x1b	; 27
    7a7c:	28 85       	ldd	r18, Y+8	; 0x08
    7a7e:	fc 01       	movw	r30, r24
    7a80:	20 83       	st	Z, r18
    7a82:	8d 81       	ldd	r24, Y+5	; 0x05
    7a84:	28 2f       	mov	r18, r24
    7a86:	30 e0       	ldi	r19, 0x00	; 0
    7a88:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a8a:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a8c:	c9 01       	movw	r24, r18
    7a8e:	88 0f       	add	r24, r24
    7a90:	99 1f       	adc	r25, r25
    7a92:	88 0f       	add	r24, r24
    7a94:	99 1f       	adc	r25, r25
    7a96:	82 0f       	add	r24, r18
    7a98:	93 1f       	adc	r25, r19
    7a9a:	84 0f       	add	r24, r20
    7a9c:	95 1f       	adc	r25, r21
    7a9e:	4c 96       	adiw	r24, 0x1c	; 28
    7aa0:	29 85       	ldd	r18, Y+9	; 0x09
    7aa2:	3a 85       	ldd	r19, Y+10	; 0x0a
    7aa4:	fc 01       	movw	r30, r24
    7aa6:	31 83       	std	Z+1, r19	; 0x01
    7aa8:	20 83       	st	Z, r18
    7aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    7aac:	28 2f       	mov	r18, r24
    7aae:	30 e0       	ldi	r19, 0x00	; 0
    7ab0:	4d 85       	ldd	r20, Y+13	; 0x0d
    7ab2:	5e 85       	ldd	r21, Y+14	; 0x0e
    7ab4:	c9 01       	movw	r24, r18
    7ab6:	88 0f       	add	r24, r24
    7ab8:	99 1f       	adc	r25, r25
    7aba:	88 0f       	add	r24, r24
    7abc:	99 1f       	adc	r25, r25
    7abe:	82 0f       	add	r24, r18
    7ac0:	93 1f       	adc	r25, r19
    7ac2:	84 0f       	add	r24, r20
    7ac4:	95 1f       	adc	r25, r21
    7ac6:	4e 96       	adiw	r24, 0x1e	; 30
    7ac8:	fc 01       	movw	r30, r24
    7aca:	10 82       	st	Z, r1
    7acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    7ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    7ad0:	4f 81       	ldd	r20, Y+7	; 0x07
    7ad2:	6d 81       	ldd	r22, Y+5	; 0x05
    7ad4:	34 d0       	rcall	.+104    	; 0x7b3e <_ZN6Keypad12nextKeyStateEhb>
    7ad6:	04 c0       	rjmp	.+8      	; 0x7ae0 <_ZN6Keypad10updateListEv+0x282>
    7ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    7ada:	8f 5f       	subi	r24, 0xFF	; 255
    7adc:	8d 83       	std	Y+5, r24	; 0x05
    7ade:	a8 cf       	rjmp	.-176    	; 0x7a30 <_ZN6Keypad10updateListEv+0x1d2>
    7ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    7ae2:	8f 5f       	subi	r24, 0xFF	; 255
    7ae4:	8c 83       	std	Y+4, r24	; 0x04
    7ae6:	26 cf       	rjmp	.-436    	; 0x7934 <_ZN6Keypad10updateListEv+0xd6>
    7ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    7aea:	8f 5f       	subi	r24, 0xFF	; 255
    7aec:	8b 83       	std	Y+3, r24	; 0x03
    7aee:	17 cf       	rjmp	.-466    	; 0x791e <_ZN6Keypad10updateListEv+0xc0>
    7af0:	1e 82       	std	Y+6, r1	; 0x06
    7af2:	8e 81       	ldd	r24, Y+6	; 0x06
    7af4:	8a 30       	cpi	r24, 0x0A	; 10
    7af6:	c8 f4       	brcc	.+50     	; 0x7b2a <_ZN6Keypad10updateListEv+0x2cc>
    7af8:	8e 81       	ldd	r24, Y+6	; 0x06
    7afa:	28 2f       	mov	r18, r24
    7afc:	30 e0       	ldi	r19, 0x00	; 0
    7afe:	4d 85       	ldd	r20, Y+13	; 0x0d
    7b00:	5e 85       	ldd	r21, Y+14	; 0x0e
    7b02:	c9 01       	movw	r24, r18
    7b04:	88 0f       	add	r24, r24
    7b06:	99 1f       	adc	r25, r25
    7b08:	88 0f       	add	r24, r24
    7b0a:	99 1f       	adc	r25, r25
    7b0c:	82 0f       	add	r24, r18
    7b0e:	93 1f       	adc	r25, r19
    7b10:	84 0f       	add	r24, r20
    7b12:	95 1f       	adc	r25, r21
    7b14:	4f 96       	adiw	r24, 0x1f	; 31
    7b16:	fc 01       	movw	r30, r24
    7b18:	80 81       	ld	r24, Z
    7b1a:	88 23       	and	r24, r24
    7b1c:	11 f0       	breq	.+4      	; 0x7b22 <_ZN6Keypad10updateListEv+0x2c4>
    7b1e:	81 e0       	ldi	r24, 0x01	; 1
    7b20:	89 83       	std	Y+1, r24	; 0x01
    7b22:	8e 81       	ldd	r24, Y+6	; 0x06
    7b24:	8f 5f       	subi	r24, 0xFF	; 255
    7b26:	8e 83       	std	Y+6, r24	; 0x06
    7b28:	e4 cf       	rjmp	.-56     	; 0x7af2 <_ZN6Keypad10updateListEv+0x294>
    7b2a:	89 81       	ldd	r24, Y+1	; 0x01
    7b2c:	2e 96       	adiw	r28, 0x0e	; 14
    7b2e:	0f b6       	in	r0, 0x3f	; 63
    7b30:	f8 94       	cli
    7b32:	de bf       	out	0x3e, r29	; 62
    7b34:	0f be       	out	0x3f, r0	; 63
    7b36:	cd bf       	out	0x3d, r28	; 61
    7b38:	df 91       	pop	r29
    7b3a:	cf 91       	pop	r28
    7b3c:	08 95       	ret

00007b3e <_ZN6Keypad12nextKeyStateEhb>:
    7b3e:	cf 93       	push	r28
    7b40:	df 93       	push	r29
    7b42:	00 d0       	rcall	.+0      	; 0x7b44 <_ZN6Keypad12nextKeyStateEhb+0x6>
    7b44:	1f 92       	push	r1
    7b46:	cd b7       	in	r28, 0x3d	; 61
    7b48:	de b7       	in	r29, 0x3e	; 62
    7b4a:	9a 83       	std	Y+2, r25	; 0x02
    7b4c:	89 83       	std	Y+1, r24	; 0x01
    7b4e:	6b 83       	std	Y+3, r22	; 0x03
    7b50:	4c 83       	std	Y+4, r20	; 0x04
    7b52:	8b 81       	ldd	r24, Y+3	; 0x03
    7b54:	28 2f       	mov	r18, r24
    7b56:	30 e0       	ldi	r19, 0x00	; 0
    7b58:	49 81       	ldd	r20, Y+1	; 0x01
    7b5a:	5a 81       	ldd	r21, Y+2	; 0x02
    7b5c:	c9 01       	movw	r24, r18
    7b5e:	88 0f       	add	r24, r24
    7b60:	99 1f       	adc	r25, r25
    7b62:	88 0f       	add	r24, r24
    7b64:	99 1f       	adc	r25, r25
    7b66:	82 0f       	add	r24, r18
    7b68:	93 1f       	adc	r25, r19
    7b6a:	84 0f       	add	r24, r20
    7b6c:	95 1f       	adc	r25, r21
    7b6e:	4f 96       	adiw	r24, 0x1f	; 31
    7b70:	fc 01       	movw	r30, r24
    7b72:	10 82       	st	Z, r1
    7b74:	8b 81       	ldd	r24, Y+3	; 0x03
    7b76:	28 2f       	mov	r18, r24
    7b78:	30 e0       	ldi	r19, 0x00	; 0
    7b7a:	49 81       	ldd	r20, Y+1	; 0x01
    7b7c:	5a 81       	ldd	r21, Y+2	; 0x02
    7b7e:	c9 01       	movw	r24, r18
    7b80:	88 0f       	add	r24, r24
    7b82:	99 1f       	adc	r25, r25
    7b84:	88 0f       	add	r24, r24
    7b86:	99 1f       	adc	r25, r25
    7b88:	82 0f       	add	r24, r18
    7b8a:	93 1f       	adc	r25, r19
    7b8c:	84 0f       	add	r24, r20
    7b8e:	95 1f       	adc	r25, r21
    7b90:	4e 96       	adiw	r24, 0x1e	; 30
    7b92:	fc 01       	movw	r30, r24
    7b94:	80 81       	ld	r24, Z
    7b96:	88 2f       	mov	r24, r24
    7b98:	90 e0       	ldi	r25, 0x00	; 0
    7b9a:	81 30       	cpi	r24, 0x01	; 1
    7b9c:	91 05       	cpc	r25, r1
    7b9e:	29 f1       	breq	.+74     	; 0x7bea <_ZN6Keypad12nextKeyStateEhb+0xac>
    7ba0:	82 30       	cpi	r24, 0x02	; 2
    7ba2:	91 05       	cpc	r25, r1
    7ba4:	1c f4       	brge	.+6      	; 0x7bac <_ZN6Keypad12nextKeyStateEhb+0x6e>
    7ba6:	89 2b       	or	r24, r25
    7ba8:	49 f0       	breq	.+18     	; 0x7bbc <_ZN6Keypad12nextKeyStateEhb+0x7e>
    7baa:	6a c0       	rjmp	.+212    	; 0x7c80 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7bac:	82 30       	cpi	r24, 0x02	; 2
    7bae:	91 05       	cpc	r25, r1
    7bb0:	09 f4       	brne	.+2      	; 0x7bb4 <_ZN6Keypad12nextKeyStateEhb+0x76>
    7bb2:	50 c0       	rjmp	.+160    	; 0x7c54 <_ZN6Keypad12nextKeyStateEhb+0x116>
    7bb4:	03 97       	sbiw	r24, 0x03	; 3
    7bb6:	09 f4       	brne	.+2      	; 0x7bba <_ZN6Keypad12nextKeyStateEhb+0x7c>
    7bb8:	58 c0       	rjmp	.+176    	; 0x7c6a <_ZN6Keypad12nextKeyStateEhb+0x12c>
    7bba:	62 c0       	rjmp	.+196    	; 0x7c80 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    7bbe:	88 23       	and	r24, r24
    7bc0:	09 f4       	brne	.+2      	; 0x7bc4 <_ZN6Keypad12nextKeyStateEhb+0x86>
    7bc2:	59 c0       	rjmp	.+178    	; 0x7c76 <_ZN6Keypad12nextKeyStateEhb+0x138>
    7bc4:	89 81       	ldd	r24, Y+1	; 0x01
    7bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    7bc8:	41 e0       	ldi	r20, 0x01	; 1
    7bca:	6b 81       	ldd	r22, Y+3	; 0x03
    7bcc:	dd d0       	rcall	.+442    	; 0x7d88 <_ZN6Keypad12transitionToEh8KeyState>
    7bce:	0e 94 75 5e 	call	0xbcea	; 0xbcea <millis>
    7bd2:	dc 01       	movw	r26, r24
    7bd4:	cb 01       	movw	r24, r22
    7bd6:	29 81       	ldd	r18, Y+1	; 0x01
    7bd8:	3a 81       	ldd	r19, Y+2	; 0x02
    7bda:	23 5b       	subi	r18, 0xB3	; 179
    7bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    7bde:	f9 01       	movw	r30, r18
    7be0:	80 83       	st	Z, r24
    7be2:	91 83       	std	Z+1, r25	; 0x01
    7be4:	a2 83       	std	Z+2, r26	; 0x02
    7be6:	b3 83       	std	Z+3, r27	; 0x03
    7be8:	46 c0       	rjmp	.+140    	; 0x7c76 <_ZN6Keypad12nextKeyStateEhb+0x138>
    7bea:	0e 94 75 5e 	call	0xbcea	; 0xbcea <millis>
    7bee:	9b 01       	movw	r18, r22
    7bf0:	ac 01       	movw	r20, r24
    7bf2:	89 81       	ldd	r24, Y+1	; 0x01
    7bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    7bf6:	83 5b       	subi	r24, 0xB3	; 179
    7bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bfa:	fc 01       	movw	r30, r24
    7bfc:	80 81       	ld	r24, Z
    7bfe:	91 81       	ldd	r25, Z+1	; 0x01
    7c00:	a2 81       	ldd	r26, Z+2	; 0x02
    7c02:	b3 81       	ldd	r27, Z+3	; 0x03
    7c04:	28 1b       	sub	r18, r24
    7c06:	39 0b       	sbc	r19, r25
    7c08:	4a 0b       	sbc	r20, r26
    7c0a:	5b 0b       	sbc	r21, r27
    7c0c:	89 81       	ldd	r24, Y+1	; 0x01
    7c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    7c10:	81 5a       	subi	r24, 0xA1	; 161
    7c12:	9f 4f       	sbci	r25, 0xFF	; 255
    7c14:	fc 01       	movw	r30, r24
    7c16:	80 81       	ld	r24, Z
    7c18:	91 81       	ldd	r25, Z+1	; 0x01
    7c1a:	cc 01       	movw	r24, r24
    7c1c:	a0 e0       	ldi	r26, 0x00	; 0
    7c1e:	b0 e0       	ldi	r27, 0x00	; 0
    7c20:	61 e0       	ldi	r22, 0x01	; 1
    7c22:	82 17       	cp	r24, r18
    7c24:	93 07       	cpc	r25, r19
    7c26:	a4 07       	cpc	r26, r20
    7c28:	b5 07       	cpc	r27, r21
    7c2a:	08 f0       	brcs	.+2      	; 0x7c2e <_ZN6Keypad12nextKeyStateEhb+0xf0>
    7c2c:	60 e0       	ldi	r22, 0x00	; 0
    7c2e:	66 23       	and	r22, r22
    7c30:	31 f0       	breq	.+12     	; 0x7c3e <_ZN6Keypad12nextKeyStateEhb+0x100>
    7c32:	89 81       	ldd	r24, Y+1	; 0x01
    7c34:	9a 81       	ldd	r25, Y+2	; 0x02
    7c36:	42 e0       	ldi	r20, 0x02	; 2
    7c38:	6b 81       	ldd	r22, Y+3	; 0x03
    7c3a:	a6 d0       	rcall	.+332    	; 0x7d88 <_ZN6Keypad12transitionToEh8KeyState>
    7c3c:	1e c0       	rjmp	.+60     	; 0x7c7a <_ZN6Keypad12nextKeyStateEhb+0x13c>
    7c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    7c40:	81 e0       	ldi	r24, 0x01	; 1
    7c42:	89 27       	eor	r24, r25
    7c44:	88 23       	and	r24, r24
    7c46:	c9 f0       	breq	.+50     	; 0x7c7a <_ZN6Keypad12nextKeyStateEhb+0x13c>
    7c48:	89 81       	ldd	r24, Y+1	; 0x01
    7c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    7c4c:	43 e0       	ldi	r20, 0x03	; 3
    7c4e:	6b 81       	ldd	r22, Y+3	; 0x03
    7c50:	9b d0       	rcall	.+310    	; 0x7d88 <_ZN6Keypad12transitionToEh8KeyState>
    7c52:	13 c0       	rjmp	.+38     	; 0x7c7a <_ZN6Keypad12nextKeyStateEhb+0x13c>
    7c54:	9c 81       	ldd	r25, Y+4	; 0x04
    7c56:	81 e0       	ldi	r24, 0x01	; 1
    7c58:	89 27       	eor	r24, r25
    7c5a:	88 23       	and	r24, r24
    7c5c:	81 f0       	breq	.+32     	; 0x7c7e <_ZN6Keypad12nextKeyStateEhb+0x140>
    7c5e:	89 81       	ldd	r24, Y+1	; 0x01
    7c60:	9a 81       	ldd	r25, Y+2	; 0x02
    7c62:	43 e0       	ldi	r20, 0x03	; 3
    7c64:	6b 81       	ldd	r22, Y+3	; 0x03
    7c66:	90 d0       	rcall	.+288    	; 0x7d88 <_ZN6Keypad12transitionToEh8KeyState>
    7c68:	0a c0       	rjmp	.+20     	; 0x7c7e <_ZN6Keypad12nextKeyStateEhb+0x140>
    7c6a:	89 81       	ldd	r24, Y+1	; 0x01
    7c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    7c6e:	40 e0       	ldi	r20, 0x00	; 0
    7c70:	6b 81       	ldd	r22, Y+3	; 0x03
    7c72:	8a d0       	rcall	.+276    	; 0x7d88 <_ZN6Keypad12transitionToEh8KeyState>
    7c74:	05 c0       	rjmp	.+10     	; 0x7c80 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7c76:	00 00       	nop
    7c78:	03 c0       	rjmp	.+6      	; 0x7c80 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7c7a:	00 00       	nop
    7c7c:	01 c0       	rjmp	.+2      	; 0x7c80 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7c7e:	00 00       	nop
    7c80:	00 00       	nop
    7c82:	0f 90       	pop	r0
    7c84:	0f 90       	pop	r0
    7c86:	0f 90       	pop	r0
    7c88:	0f 90       	pop	r0
    7c8a:	df 91       	pop	r29
    7c8c:	cf 91       	pop	r28
    7c8e:	08 95       	ret

00007c90 <_ZN6Keypad10findInListEi>:
    7c90:	cf 93       	push	r28
    7c92:	df 93       	push	r29
    7c94:	00 d0       	rcall	.+0      	; 0x7c96 <_ZN6Keypad10findInListEi+0x6>
    7c96:	1f 92       	push	r1
    7c98:	1f 92       	push	r1
    7c9a:	cd b7       	in	r28, 0x3d	; 61
    7c9c:	de b7       	in	r29, 0x3e	; 62
    7c9e:	9b 83       	std	Y+3, r25	; 0x03
    7ca0:	8a 83       	std	Y+2, r24	; 0x02
    7ca2:	7d 83       	std	Y+5, r23	; 0x05
    7ca4:	6c 83       	std	Y+4, r22	; 0x04
    7ca6:	19 82       	std	Y+1, r1	; 0x01
    7ca8:	89 81       	ldd	r24, Y+1	; 0x01
    7caa:	8a 30       	cpi	r24, 0x0A	; 10
    7cac:	f8 f4       	brcc	.+62     	; 0x7cec <_ZN6Keypad10findInListEi+0x5c>
    7cae:	89 81       	ldd	r24, Y+1	; 0x01
    7cb0:	28 2f       	mov	r18, r24
    7cb2:	30 e0       	ldi	r19, 0x00	; 0
    7cb4:	4a 81       	ldd	r20, Y+2	; 0x02
    7cb6:	5b 81       	ldd	r21, Y+3	; 0x03
    7cb8:	c9 01       	movw	r24, r18
    7cba:	88 0f       	add	r24, r24
    7cbc:	99 1f       	adc	r25, r25
    7cbe:	88 0f       	add	r24, r24
    7cc0:	99 1f       	adc	r25, r25
    7cc2:	82 0f       	add	r24, r18
    7cc4:	93 1f       	adc	r25, r19
    7cc6:	84 0f       	add	r24, r20
    7cc8:	95 1f       	adc	r25, r21
    7cca:	4c 96       	adiw	r24, 0x1c	; 28
    7ccc:	fc 01       	movw	r30, r24
    7cce:	20 81       	ld	r18, Z
    7cd0:	31 81       	ldd	r19, Z+1	; 0x01
    7cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    7cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    7cd6:	28 17       	cp	r18, r24
    7cd8:	39 07       	cpc	r19, r25
    7cda:	21 f4       	brne	.+8      	; 0x7ce4 <_ZN6Keypad10findInListEi+0x54>
    7cdc:	89 81       	ldd	r24, Y+1	; 0x01
    7cde:	88 2f       	mov	r24, r24
    7ce0:	90 e0       	ldi	r25, 0x00	; 0
    7ce2:	06 c0       	rjmp	.+12     	; 0x7cf0 <_ZN6Keypad10findInListEi+0x60>
    7ce4:	89 81       	ldd	r24, Y+1	; 0x01
    7ce6:	8f 5f       	subi	r24, 0xFF	; 255
    7ce8:	89 83       	std	Y+1, r24	; 0x01
    7cea:	de cf       	rjmp	.-68     	; 0x7ca8 <_ZN6Keypad10findInListEi+0x18>
    7cec:	8f ef       	ldi	r24, 0xFF	; 255
    7cee:	9f ef       	ldi	r25, 0xFF	; 255
    7cf0:	0f 90       	pop	r0
    7cf2:	0f 90       	pop	r0
    7cf4:	0f 90       	pop	r0
    7cf6:	0f 90       	pop	r0
    7cf8:	0f 90       	pop	r0
    7cfa:	df 91       	pop	r29
    7cfc:	cf 91       	pop	r28
    7cfe:	08 95       	ret

00007d00 <_ZN6Keypad15setDebounceTimeEj>:
    7d00:	cf 93       	push	r28
    7d02:	df 93       	push	r29
    7d04:	00 d0       	rcall	.+0      	; 0x7d06 <_ZN6Keypad15setDebounceTimeEj+0x6>
    7d06:	1f 92       	push	r1
    7d08:	cd b7       	in	r28, 0x3d	; 61
    7d0a:	de b7       	in	r29, 0x3e	; 62
    7d0c:	9a 83       	std	Y+2, r25	; 0x02
    7d0e:	89 83       	std	Y+1, r24	; 0x01
    7d10:	7c 83       	std	Y+4, r23	; 0x04
    7d12:	6b 83       	std	Y+3, r22	; 0x03
    7d14:	8b 81       	ldd	r24, Y+3	; 0x03
    7d16:	9c 81       	ldd	r25, Y+4	; 0x04
    7d18:	89 2b       	or	r24, r25
    7d1a:	51 f4       	brne	.+20     	; 0x7d30 <_ZN6Keypad15setDebounceTimeEj+0x30>
    7d1c:	89 81       	ldd	r24, Y+1	; 0x01
    7d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    7d20:	83 5a       	subi	r24, 0xA3	; 163
    7d22:	9f 4f       	sbci	r25, 0xFF	; 255
    7d24:	21 e0       	ldi	r18, 0x01	; 1
    7d26:	30 e0       	ldi	r19, 0x00	; 0
    7d28:	fc 01       	movw	r30, r24
    7d2a:	31 83       	std	Z+1, r19	; 0x01
    7d2c:	20 83       	st	Z, r18
    7d2e:	09 c0       	rjmp	.+18     	; 0x7d42 <_ZN6Keypad15setDebounceTimeEj+0x42>
    7d30:	89 81       	ldd	r24, Y+1	; 0x01
    7d32:	9a 81       	ldd	r25, Y+2	; 0x02
    7d34:	83 5a       	subi	r24, 0xA3	; 163
    7d36:	9f 4f       	sbci	r25, 0xFF	; 255
    7d38:	2b 81       	ldd	r18, Y+3	; 0x03
    7d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    7d3c:	fc 01       	movw	r30, r24
    7d3e:	31 83       	std	Z+1, r19	; 0x01
    7d40:	20 83       	st	Z, r18
    7d42:	00 00       	nop
    7d44:	0f 90       	pop	r0
    7d46:	0f 90       	pop	r0
    7d48:	0f 90       	pop	r0
    7d4a:	0f 90       	pop	r0
    7d4c:	df 91       	pop	r29
    7d4e:	cf 91       	pop	r28
    7d50:	08 95       	ret

00007d52 <_ZN6Keypad11setHoldTimeEj>:
    7d52:	cf 93       	push	r28
    7d54:	df 93       	push	r29
    7d56:	00 d0       	rcall	.+0      	; 0x7d58 <_ZN6Keypad11setHoldTimeEj+0x6>
    7d58:	1f 92       	push	r1
    7d5a:	cd b7       	in	r28, 0x3d	; 61
    7d5c:	de b7       	in	r29, 0x3e	; 62
    7d5e:	9a 83       	std	Y+2, r25	; 0x02
    7d60:	89 83       	std	Y+1, r24	; 0x01
    7d62:	7c 83       	std	Y+4, r23	; 0x04
    7d64:	6b 83       	std	Y+3, r22	; 0x03
    7d66:	89 81       	ldd	r24, Y+1	; 0x01
    7d68:	9a 81       	ldd	r25, Y+2	; 0x02
    7d6a:	81 5a       	subi	r24, 0xA1	; 161
    7d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    7d70:	3c 81       	ldd	r19, Y+4	; 0x04
    7d72:	fc 01       	movw	r30, r24
    7d74:	31 83       	std	Z+1, r19	; 0x01
    7d76:	20 83       	st	Z, r18
    7d78:	00 00       	nop
    7d7a:	0f 90       	pop	r0
    7d7c:	0f 90       	pop	r0
    7d7e:	0f 90       	pop	r0
    7d80:	0f 90       	pop	r0
    7d82:	df 91       	pop	r29
    7d84:	cf 91       	pop	r28
    7d86:	08 95       	ret

00007d88 <_ZN6Keypad12transitionToEh8KeyState>:

void Keypad::transitionTo(byte idx, KeyState nextState) {
    7d88:	cf 93       	push	r28
    7d8a:	df 93       	push	r29
    7d8c:	00 d0       	rcall	.+0      	; 0x7d8e <_ZN6Keypad12transitionToEh8KeyState+0x6>
    7d8e:	1f 92       	push	r1
    7d90:	cd b7       	in	r28, 0x3d	; 61
    7d92:	de b7       	in	r29, 0x3e	; 62
    7d94:	9a 83       	std	Y+2, r25	; 0x02
    7d96:	89 83       	std	Y+1, r24	; 0x01
    7d98:	6b 83       	std	Y+3, r22	; 0x03
    7d9a:	4c 83       	std	Y+4, r20	; 0x04
	key[idx].kstate = nextState;
    7d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    7d9e:	28 2f       	mov	r18, r24
    7da0:	30 e0       	ldi	r19, 0x00	; 0
    7da2:	49 81       	ldd	r20, Y+1	; 0x01
    7da4:	5a 81       	ldd	r21, Y+2	; 0x02
    7da6:	c9 01       	movw	r24, r18
    7da8:	88 0f       	add	r24, r24
    7daa:	99 1f       	adc	r25, r25
    7dac:	88 0f       	add	r24, r24
    7dae:	99 1f       	adc	r25, r25
    7db0:	82 0f       	add	r24, r18
    7db2:	93 1f       	adc	r25, r19
    7db4:	84 0f       	add	r24, r20
    7db6:	95 1f       	adc	r25, r21
    7db8:	4e 96       	adiw	r24, 0x1e	; 30
    7dba:	2c 81       	ldd	r18, Y+4	; 0x04
    7dbc:	fc 01       	movw	r30, r24
    7dbe:	20 83       	st	Z, r18
	key[idx].stateChanged = true;
    7dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    7dc2:	28 2f       	mov	r18, r24
    7dc4:	30 e0       	ldi	r19, 0x00	; 0
    7dc6:	49 81       	ldd	r20, Y+1	; 0x01
    7dc8:	5a 81       	ldd	r21, Y+2	; 0x02
    7dca:	c9 01       	movw	r24, r18
    7dcc:	88 0f       	add	r24, r24
    7dce:	99 1f       	adc	r25, r25
    7dd0:	88 0f       	add	r24, r24
    7dd2:	99 1f       	adc	r25, r25
    7dd4:	82 0f       	add	r24, r18
    7dd6:	93 1f       	adc	r25, r19
    7dd8:	84 0f       	add	r24, r20
    7dda:	95 1f       	adc	r25, r21
    7ddc:	4f 96       	adiw	r24, 0x1f	; 31
    7dde:	21 e0       	ldi	r18, 0x01	; 1
    7de0:	fc 01       	movw	r30, r24
    7de2:	20 83       	st	Z, r18

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    7de4:	89 81       	ldd	r24, Y+1	; 0x01
    7de6:	9a 81       	ldd	r25, Y+2	; 0x02
    7de8:	8f 59       	subi	r24, 0x9F	; 159
    7dea:	9f 4f       	sbci	r25, 0xFF	; 255
    7dec:	fc 01       	movw	r30, r24
    7dee:	80 81       	ld	r24, Z
    7df0:	88 23       	and	r24, r24
    7df2:	d1 f0       	breq	.+52     	; 0x7e28 <_ZN6Keypad12transitionToEh8KeyState+0xa0>
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    7df4:	89 81       	ldd	r24, Y+1	; 0x01
    7df6:	9a 81       	ldd	r25, Y+2	; 0x02
    7df8:	8e 59       	subi	r24, 0x9E	; 158
    7dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    7dfc:	fc 01       	movw	r30, r24
    7dfe:	80 81       	ld	r24, Z
    7e00:	91 81       	ldd	r25, Z+1	; 0x01
    7e02:	89 2b       	or	r24, r25
    7e04:	a1 f1       	breq	.+104    	; 0x7e6e <_ZN6Keypad12transitionToEh8KeyState+0xe6>
    7e06:	8b 81       	ldd	r24, Y+3	; 0x03
    7e08:	88 23       	and	r24, r24
    7e0a:	89 f5       	brne	.+98     	; 0x7e6e <_ZN6Keypad12transitionToEh8KeyState+0xe6>
			keypadEventListener(key[0].kchar);
    7e0c:	89 81       	ldd	r24, Y+1	; 0x01
    7e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    7e10:	8e 59       	subi	r24, 0x9E	; 158
    7e12:	9f 4f       	sbci	r25, 0xFF	; 255
    7e14:	fc 01       	movw	r30, r24
    7e16:	20 81       	ld	r18, Z
    7e18:	31 81       	ldd	r19, Z+1	; 0x01
    7e1a:	89 81       	ldd	r24, Y+1	; 0x01
    7e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e1e:	fc 01       	movw	r30, r24
    7e20:	83 8d       	ldd	r24, Z+27	; 0x1b
    7e22:	f9 01       	movw	r30, r18
    7e24:	19 95       	eicall
	else {
	  	if (keypadEventListener!=NULL)  {
			keypadEventListener(key[idx].kchar);
		}
	}
}
    7e26:	23 c0       	rjmp	.+70     	; 0x7e6e <_ZN6Keypad12transitionToEh8KeyState+0xe6>
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
    7e28:	89 81       	ldd	r24, Y+1	; 0x01
    7e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    7e2c:	8e 59       	subi	r24, 0x9E	; 158
    7e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e30:	fc 01       	movw	r30, r24
    7e32:	80 81       	ld	r24, Z
    7e34:	91 81       	ldd	r25, Z+1	; 0x01
    7e36:	89 2b       	or	r24, r25
    7e38:	d1 f0       	breq	.+52     	; 0x7e6e <_ZN6Keypad12transitionToEh8KeyState+0xe6>
			keypadEventListener(key[idx].kchar);
    7e3a:	89 81       	ldd	r24, Y+1	; 0x01
    7e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e3e:	8e 59       	subi	r24, 0x9E	; 158
    7e40:	9f 4f       	sbci	r25, 0xFF	; 255
    7e42:	fc 01       	movw	r30, r24
    7e44:	40 81       	ld	r20, Z
    7e46:	51 81       	ldd	r21, Z+1	; 0x01
    7e48:	8b 81       	ldd	r24, Y+3	; 0x03
    7e4a:	28 2f       	mov	r18, r24
    7e4c:	30 e0       	ldi	r19, 0x00	; 0
    7e4e:	69 81       	ldd	r22, Y+1	; 0x01
    7e50:	7a 81       	ldd	r23, Y+2	; 0x02
    7e52:	c9 01       	movw	r24, r18
    7e54:	88 0f       	add	r24, r24
    7e56:	99 1f       	adc	r25, r25
    7e58:	88 0f       	add	r24, r24
    7e5a:	99 1f       	adc	r25, r25
    7e5c:	82 0f       	add	r24, r18
    7e5e:	93 1f       	adc	r25, r19
    7e60:	86 0f       	add	r24, r22
    7e62:	97 1f       	adc	r25, r23
    7e64:	4b 96       	adiw	r24, 0x1b	; 27
    7e66:	fc 01       	movw	r30, r24
    7e68:	80 81       	ld	r24, Z
    7e6a:	fa 01       	movw	r30, r20
    7e6c:	19 95       	eicall
		}
	}
}
    7e6e:	00 00       	nop
    7e70:	0f 90       	pop	r0
    7e72:	0f 90       	pop	r0
    7e74:	0f 90       	pop	r0
    7e76:	0f 90       	pop	r0
    7e78:	df 91       	pop	r29
    7e7a:	cf 91       	pop	r28
    7e7c:	08 95       	ret

00007e7e <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    7e7e:	8f 92       	push	r8
    7e80:	af 92       	push	r10
    7e82:	cf 92       	push	r12
    7e84:	ef 92       	push	r14
    7e86:	0f 93       	push	r16
    7e88:	cf 93       	push	r28
    7e8a:	df 93       	push	r29
    7e8c:	cd b7       	in	r28, 0x3d	; 61
    7e8e:	de b7       	in	r29, 0x3e	; 62
    7e90:	28 97       	sbiw	r28, 0x08	; 8
    7e92:	0f b6       	in	r0, 0x3f	; 63
    7e94:	f8 94       	cli
    7e96:	de bf       	out	0x3e, r29	; 62
    7e98:	0f be       	out	0x3f, r0	; 63
    7e9a:	cd bf       	out	0x3d, r28	; 61
    7e9c:	9a 83       	std	Y+2, r25	; 0x02
    7e9e:	89 83       	std	Y+1, r24	; 0x01
    7ea0:	6b 83       	std	Y+3, r22	; 0x03
    7ea2:	4c 83       	std	Y+4, r20	; 0x04
    7ea4:	2d 83       	std	Y+5, r18	; 0x05
    7ea6:	0e 83       	std	Y+6, r16	; 0x06
    7ea8:	ef 82       	std	Y+7, r14	; 0x07
    7eaa:	c8 86       	std	Y+8, r12	; 0x08
    7eac:	89 81       	ldd	r24, Y+1	; 0x01
    7eae:	9a 81       	ldd	r25, Y+2	; 0x02
    7eb0:	0e 94 b8 12 	call	0x2570	; 0x2570 <_ZN5PrintC1Ev>
    7eb4:	2f ef       	ldi	r18, 0xFF	; 255
    7eb6:	32 e0       	ldi	r19, 0x02	; 2
    7eb8:	89 81       	ldd	r24, Y+1	; 0x01
    7eba:	9a 81       	ldd	r25, Y+2	; 0x02
    7ebc:	fc 01       	movw	r30, r24
    7ebe:	31 83       	std	Z+1, r19	; 0x01
    7ec0:	20 83       	st	Z, r18
    7ec2:	89 81       	ldd	r24, Y+1	; 0x01
    7ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    7ec6:	1f 92       	push	r1
    7ec8:	1f 92       	push	r1
    7eca:	1f 92       	push	r1
    7ecc:	1f 92       	push	r1
    7ece:	88 84       	ldd	r8, Y+8	; 0x08
    7ed0:	af 80       	ldd	r10, Y+7	; 0x07
    7ed2:	ce 80       	ldd	r12, Y+6	; 0x06
    7ed4:	ed 80       	ldd	r14, Y+5	; 0x05
    7ed6:	0c 81       	ldd	r16, Y+4	; 0x04
    7ed8:	2f ef       	ldi	r18, 0xFF	; 255
    7eda:	4b 81       	ldd	r20, Y+3	; 0x03
    7edc:	61 e0       	ldi	r22, 0x01	; 1
    7ede:	13 d0       	rcall	.+38     	; 0x7f06 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    7ee0:	0f 90       	pop	r0
    7ee2:	0f 90       	pop	r0
    7ee4:	0f 90       	pop	r0
    7ee6:	0f 90       	pop	r0
    7ee8:	00 00       	nop
    7eea:	28 96       	adiw	r28, 0x08	; 8
    7eec:	0f b6       	in	r0, 0x3f	; 63
    7eee:	f8 94       	cli
    7ef0:	de bf       	out	0x3e, r29	; 62
    7ef2:	0f be       	out	0x3f, r0	; 63
    7ef4:	cd bf       	out	0x3d, r28	; 61
    7ef6:	df 91       	pop	r29
    7ef8:	cf 91       	pop	r28
    7efa:	0f 91       	pop	r16
    7efc:	ef 90       	pop	r14
    7efe:	cf 90       	pop	r12
    7f00:	af 90       	pop	r10
    7f02:	8f 90       	pop	r8
    7f04:	08 95       	ret

00007f06 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
    7f06:	8f 92       	push	r8
    7f08:	af 92       	push	r10
    7f0a:	cf 92       	push	r12
    7f0c:	ef 92       	push	r14
    7f0e:	0f 93       	push	r16
    7f10:	cf 93       	push	r28
    7f12:	df 93       	push	r29
    7f14:	cd b7       	in	r28, 0x3d	; 61
    7f16:	de b7       	in	r29, 0x3e	; 62
    7f18:	2a 97       	sbiw	r28, 0x0a	; 10
    7f1a:	0f b6       	in	r0, 0x3f	; 63
    7f1c:	f8 94       	cli
    7f1e:	de bf       	out	0x3e, r29	; 62
    7f20:	0f be       	out	0x3f, r0	; 63
    7f22:	cd bf       	out	0x3d, r28	; 61
    7f24:	9a 83       	std	Y+2, r25	; 0x02
    7f26:	89 83       	std	Y+1, r24	; 0x01
    7f28:	6b 83       	std	Y+3, r22	; 0x03
    7f2a:	4c 83       	std	Y+4, r20	; 0x04
    7f2c:	2d 83       	std	Y+5, r18	; 0x05
    7f2e:	0e 83       	std	Y+6, r16	; 0x06
    7f30:	ef 82       	std	Y+7, r14	; 0x07
    7f32:	c8 86       	std	Y+8, r12	; 0x08
    7f34:	a9 86       	std	Y+9, r10	; 0x09
    7f36:	8a 86       	std	Y+10, r8	; 0x0a
    7f38:	89 81       	ldd	r24, Y+1	; 0x01
    7f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    7f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    7f3e:	fc 01       	movw	r30, r24
    7f40:	24 83       	std	Z+4, r18	; 0x04
    7f42:	89 81       	ldd	r24, Y+1	; 0x01
    7f44:	9a 81       	ldd	r25, Y+2	; 0x02
    7f46:	2d 81       	ldd	r18, Y+5	; 0x05
    7f48:	fc 01       	movw	r30, r24
    7f4a:	25 83       	std	Z+5, r18	; 0x05
    7f4c:	89 81       	ldd	r24, Y+1	; 0x01
    7f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    7f50:	2e 81       	ldd	r18, Y+6	; 0x06
    7f52:	fc 01       	movw	r30, r24
    7f54:	26 83       	std	Z+6, r18	; 0x06
    7f56:	89 81       	ldd	r24, Y+1	; 0x01
    7f58:	9a 81       	ldd	r25, Y+2	; 0x02
    7f5a:	2f 81       	ldd	r18, Y+7	; 0x07
    7f5c:	fc 01       	movw	r30, r24
    7f5e:	27 83       	std	Z+7, r18	; 0x07
    7f60:	89 81       	ldd	r24, Y+1	; 0x01
    7f62:	9a 81       	ldd	r25, Y+2	; 0x02
    7f64:	28 85       	ldd	r18, Y+8	; 0x08
    7f66:	fc 01       	movw	r30, r24
    7f68:	20 87       	std	Z+8, r18	; 0x08
    7f6a:	89 81       	ldd	r24, Y+1	; 0x01
    7f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    7f6e:	29 85       	ldd	r18, Y+9	; 0x09
    7f70:	fc 01       	movw	r30, r24
    7f72:	21 87       	std	Z+9, r18	; 0x09
    7f74:	89 81       	ldd	r24, Y+1	; 0x01
    7f76:	9a 81       	ldd	r25, Y+2	; 0x02
    7f78:	2a 85       	ldd	r18, Y+10	; 0x0a
    7f7a:	fc 01       	movw	r30, r24
    7f7c:	22 87       	std	Z+10, r18	; 0x0a
    7f7e:	89 81       	ldd	r24, Y+1	; 0x01
    7f80:	9a 81       	ldd	r25, Y+2	; 0x02
    7f82:	2d 89       	ldd	r18, Y+21	; 0x15
    7f84:	fc 01       	movw	r30, r24
    7f86:	23 87       	std	Z+11, r18	; 0x0b
    7f88:	89 81       	ldd	r24, Y+1	; 0x01
    7f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    7f8c:	2e 89       	ldd	r18, Y+22	; 0x16
    7f8e:	fc 01       	movw	r30, r24
    7f90:	24 87       	std	Z+12, r18	; 0x0c
    7f92:	89 81       	ldd	r24, Y+1	; 0x01
    7f94:	9a 81       	ldd	r25, Y+2	; 0x02
    7f96:	2f 89       	ldd	r18, Y+23	; 0x17
    7f98:	fc 01       	movw	r30, r24
    7f9a:	25 87       	std	Z+13, r18	; 0x0d
    7f9c:	89 81       	ldd	r24, Y+1	; 0x01
    7f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    7fa0:	28 8d       	ldd	r18, Y+24	; 0x18
    7fa2:	fc 01       	movw	r30, r24
    7fa4:	26 87       	std	Z+14, r18	; 0x0e
    7fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    7fa8:	88 23       	and	r24, r24
    7faa:	29 f0       	breq	.+10     	; 0x7fb6 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xb0>
    7fac:	89 81       	ldd	r24, Y+1	; 0x01
    7fae:	9a 81       	ldd	r25, Y+2	; 0x02
    7fb0:	fc 01       	movw	r30, r24
    7fb2:	17 86       	std	Z+15, r1	; 0x0f
    7fb4:	05 c0       	rjmp	.+10     	; 0x7fc0 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xba>
    7fb6:	89 81       	ldd	r24, Y+1	; 0x01
    7fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    7fba:	20 e1       	ldi	r18, 0x10	; 16
    7fbc:	fc 01       	movw	r30, r24
    7fbe:	27 87       	std	Z+15, r18	; 0x0f
    7fc0:	89 81       	ldd	r24, Y+1	; 0x01
    7fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    7fc4:	20 e0       	ldi	r18, 0x00	; 0
    7fc6:	41 e0       	ldi	r20, 0x01	; 1
    7fc8:	60 e1       	ldi	r22, 0x10	; 16
    7fca:	0f d0       	rcall	.+30     	; 0x7fea <_ZN13LiquidCrystal5beginEhhh>
    7fcc:	00 00       	nop
    7fce:	2a 96       	adiw	r28, 0x0a	; 10
    7fd0:	0f b6       	in	r0, 0x3f	; 63
    7fd2:	f8 94       	cli
    7fd4:	de bf       	out	0x3e, r29	; 62
    7fd6:	0f be       	out	0x3f, r0	; 63
    7fd8:	cd bf       	out	0x3d, r28	; 61
    7fda:	df 91       	pop	r29
    7fdc:	cf 91       	pop	r28
    7fde:	0f 91       	pop	r16
    7fe0:	ef 90       	pop	r14
    7fe2:	cf 90       	pop	r12
    7fe4:	af 90       	pop	r10
    7fe6:	8f 90       	pop	r8
    7fe8:	08 95       	ret

00007fea <_ZN13LiquidCrystal5beginEhhh>:
    7fea:	0f 93       	push	r16
    7fec:	1f 93       	push	r17
    7fee:	cf 93       	push	r28
    7ff0:	df 93       	push	r29
    7ff2:	cd b7       	in	r28, 0x3d	; 61
    7ff4:	de b7       	in	r29, 0x3e	; 62
    7ff6:	27 97       	sbiw	r28, 0x07	; 7
    7ff8:	0f b6       	in	r0, 0x3f	; 63
    7ffa:	f8 94       	cli
    7ffc:	de bf       	out	0x3e, r29	; 62
    7ffe:	0f be       	out	0x3f, r0	; 63
    8000:	cd bf       	out	0x3d, r28	; 61
    8002:	9c 83       	std	Y+4, r25	; 0x04
    8004:	8b 83       	std	Y+3, r24	; 0x03
    8006:	6d 83       	std	Y+5, r22	; 0x05
    8008:	4e 83       	std	Y+6, r20	; 0x06
    800a:	2f 83       	std	Y+7, r18	; 0x07
    800c:	8e 81       	ldd	r24, Y+6	; 0x06
    800e:	82 30       	cpi	r24, 0x02	; 2
    8010:	50 f0       	brcs	.+20     	; 0x8026 <_ZN13LiquidCrystal5beginEhhh+0x3c>
    8012:	8b 81       	ldd	r24, Y+3	; 0x03
    8014:	9c 81       	ldd	r25, Y+4	; 0x04
    8016:	fc 01       	movw	r30, r24
    8018:	87 85       	ldd	r24, Z+15	; 0x0f
    801a:	28 2f       	mov	r18, r24
    801c:	28 60       	ori	r18, 0x08	; 8
    801e:	8b 81       	ldd	r24, Y+3	; 0x03
    8020:	9c 81       	ldd	r25, Y+4	; 0x04
    8022:	fc 01       	movw	r30, r24
    8024:	27 87       	std	Z+15, r18	; 0x0f
    8026:	8b 81       	ldd	r24, Y+3	; 0x03
    8028:	9c 81       	ldd	r25, Y+4	; 0x04
    802a:	2e 81       	ldd	r18, Y+6	; 0x06
    802c:	fc 01       	movw	r30, r24
    802e:	23 8b       	std	Z+19, r18	; 0x13
    8030:	8d 81       	ldd	r24, Y+5	; 0x05
    8032:	88 2f       	mov	r24, r24
    8034:	90 e0       	ldi	r25, 0x00	; 0
    8036:	ac 01       	movw	r20, r24
    8038:	40 5c       	subi	r20, 0xC0	; 192
    803a:	5f 4f       	sbci	r21, 0xFF	; 255
    803c:	8d 81       	ldd	r24, Y+5	; 0x05
    803e:	28 2f       	mov	r18, r24
    8040:	30 e0       	ldi	r19, 0x00	; 0
    8042:	8b 81       	ldd	r24, Y+3	; 0x03
    8044:	9c 81       	ldd	r25, Y+4	; 0x04
    8046:	8a 01       	movw	r16, r20
    8048:	40 e4       	ldi	r20, 0x40	; 64
    804a:	50 e0       	ldi	r21, 0x00	; 0
    804c:	60 e0       	ldi	r22, 0x00	; 0
    804e:	70 e0       	ldi	r23, 0x00	; 0
    8050:	ef d0       	rcall	.+478    	; 0x8230 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    8052:	8f 81       	ldd	r24, Y+7	; 0x07
    8054:	88 23       	and	r24, r24
    8056:	69 f0       	breq	.+26     	; 0x8072 <_ZN13LiquidCrystal5beginEhhh+0x88>
    8058:	8e 81       	ldd	r24, Y+6	; 0x06
    805a:	81 30       	cpi	r24, 0x01	; 1
    805c:	51 f4       	brne	.+20     	; 0x8072 <_ZN13LiquidCrystal5beginEhhh+0x88>
    805e:	8b 81       	ldd	r24, Y+3	; 0x03
    8060:	9c 81       	ldd	r25, Y+4	; 0x04
    8062:	fc 01       	movw	r30, r24
    8064:	87 85       	ldd	r24, Z+15	; 0x0f
    8066:	28 2f       	mov	r18, r24
    8068:	24 60       	ori	r18, 0x04	; 4
    806a:	8b 81       	ldd	r24, Y+3	; 0x03
    806c:	9c 81       	ldd	r25, Y+4	; 0x04
    806e:	fc 01       	movw	r30, r24
    8070:	27 87       	std	Z+15, r18	; 0x0f
    8072:	8b 81       	ldd	r24, Y+3	; 0x03
    8074:	9c 81       	ldd	r25, Y+4	; 0x04
    8076:	fc 01       	movw	r30, r24
    8078:	84 81       	ldd	r24, Z+4	; 0x04
    807a:	61 e0       	ldi	r22, 0x01	; 1
    807c:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    8080:	8b 81       	ldd	r24, Y+3	; 0x03
    8082:	9c 81       	ldd	r25, Y+4	; 0x04
    8084:	fc 01       	movw	r30, r24
    8086:	85 81       	ldd	r24, Z+5	; 0x05
    8088:	8f 3f       	cpi	r24, 0xFF	; 255
    808a:	39 f0       	breq	.+14     	; 0x809a <_ZN13LiquidCrystal5beginEhhh+0xb0>
    808c:	8b 81       	ldd	r24, Y+3	; 0x03
    808e:	9c 81       	ldd	r25, Y+4	; 0x04
    8090:	fc 01       	movw	r30, r24
    8092:	85 81       	ldd	r24, Z+5	; 0x05
    8094:	61 e0       	ldi	r22, 0x01	; 1
    8096:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    809a:	8b 81       	ldd	r24, Y+3	; 0x03
    809c:	9c 81       	ldd	r25, Y+4	; 0x04
    809e:	fc 01       	movw	r30, r24
    80a0:	86 81       	ldd	r24, Z+6	; 0x06
    80a2:	61 e0       	ldi	r22, 0x01	; 1
    80a4:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    80a8:	1a 82       	std	Y+2, r1	; 0x02
    80aa:	19 82       	std	Y+1, r1	; 0x01
    80ac:	8b 81       	ldd	r24, Y+3	; 0x03
    80ae:	9c 81       	ldd	r25, Y+4	; 0x04
    80b0:	fc 01       	movw	r30, r24
    80b2:	87 85       	ldd	r24, Z+15	; 0x0f
    80b4:	88 2f       	mov	r24, r24
    80b6:	90 e0       	ldi	r25, 0x00	; 0
    80b8:	80 71       	andi	r24, 0x10	; 16
    80ba:	99 27       	eor	r25, r25
    80bc:	89 2b       	or	r24, r25
    80be:	19 f0       	breq	.+6      	; 0x80c6 <_ZN13LiquidCrystal5beginEhhh+0xdc>
    80c0:	88 e0       	ldi	r24, 0x08	; 8
    80c2:	90 e0       	ldi	r25, 0x00	; 0
    80c4:	02 c0       	rjmp	.+4      	; 0x80ca <_ZN13LiquidCrystal5beginEhhh+0xe0>
    80c6:	84 e0       	ldi	r24, 0x04	; 4
    80c8:	90 e0       	ldi	r25, 0x00	; 0
    80ca:	29 81       	ldd	r18, Y+1	; 0x01
    80cc:	3a 81       	ldd	r19, Y+2	; 0x02
    80ce:	28 17       	cp	r18, r24
    80d0:	39 07       	cpc	r19, r25
    80d2:	94 f4       	brge	.+36     	; 0x80f8 <_ZN13LiquidCrystal5beginEhhh+0x10e>
    80d4:	2b 81       	ldd	r18, Y+3	; 0x03
    80d6:	3c 81       	ldd	r19, Y+4	; 0x04
    80d8:	89 81       	ldd	r24, Y+1	; 0x01
    80da:	9a 81       	ldd	r25, Y+2	; 0x02
    80dc:	82 0f       	add	r24, r18
    80de:	93 1f       	adc	r25, r19
    80e0:	07 96       	adiw	r24, 0x07	; 7
    80e2:	fc 01       	movw	r30, r24
    80e4:	80 81       	ld	r24, Z
    80e6:	61 e0       	ldi	r22, 0x01	; 1
    80e8:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    80ec:	89 81       	ldd	r24, Y+1	; 0x01
    80ee:	9a 81       	ldd	r25, Y+2	; 0x02
    80f0:	01 96       	adiw	r24, 0x01	; 1
    80f2:	9a 83       	std	Y+2, r25	; 0x02
    80f4:	89 83       	std	Y+1, r24	; 0x01
    80f6:	da cf       	rjmp	.-76     	; 0x80ac <_ZN13LiquidCrystal5beginEhhh+0xc2>
    80f8:	80 e5       	ldi	r24, 0x50	; 80
    80fa:	93 ec       	ldi	r25, 0xC3	; 195
    80fc:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
    8100:	8b 81       	ldd	r24, Y+3	; 0x03
    8102:	9c 81       	ldd	r25, Y+4	; 0x04
    8104:	fc 01       	movw	r30, r24
    8106:	84 81       	ldd	r24, Z+4	; 0x04
    8108:	60 e0       	ldi	r22, 0x00	; 0
    810a:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    810e:	8b 81       	ldd	r24, Y+3	; 0x03
    8110:	9c 81       	ldd	r25, Y+4	; 0x04
    8112:	fc 01       	movw	r30, r24
    8114:	86 81       	ldd	r24, Z+6	; 0x06
    8116:	60 e0       	ldi	r22, 0x00	; 0
    8118:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    811c:	8b 81       	ldd	r24, Y+3	; 0x03
    811e:	9c 81       	ldd	r25, Y+4	; 0x04
    8120:	fc 01       	movw	r30, r24
    8122:	85 81       	ldd	r24, Z+5	; 0x05
    8124:	8f 3f       	cpi	r24, 0xFF	; 255
    8126:	39 f0       	breq	.+14     	; 0x8136 <_ZN13LiquidCrystal5beginEhhh+0x14c>
    8128:	8b 81       	ldd	r24, Y+3	; 0x03
    812a:	9c 81       	ldd	r25, Y+4	; 0x04
    812c:	fc 01       	movw	r30, r24
    812e:	85 81       	ldd	r24, Z+5	; 0x05
    8130:	60 e0       	ldi	r22, 0x00	; 0
    8132:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    8136:	8b 81       	ldd	r24, Y+3	; 0x03
    8138:	9c 81       	ldd	r25, Y+4	; 0x04
    813a:	fc 01       	movw	r30, r24
    813c:	87 85       	ldd	r24, Z+15	; 0x0f
    813e:	88 2f       	mov	r24, r24
    8140:	90 e0       	ldi	r25, 0x00	; 0
    8142:	80 71       	andi	r24, 0x10	; 16
    8144:	99 27       	eor	r25, r25
    8146:	89 2b       	or	r24, r25
    8148:	e9 f4       	brne	.+58     	; 0x8184 <_ZN13LiquidCrystal5beginEhhh+0x19a>
    814a:	8b 81       	ldd	r24, Y+3	; 0x03
    814c:	9c 81       	ldd	r25, Y+4	; 0x04
    814e:	63 e0       	ldi	r22, 0x03	; 3
    8150:	ba d1       	rcall	.+884    	; 0x84c6 <_ZN13LiquidCrystal10write4bitsEh>
    8152:	84 e9       	ldi	r24, 0x94	; 148
    8154:	91 e1       	ldi	r25, 0x11	; 17
    8156:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
    815a:	8b 81       	ldd	r24, Y+3	; 0x03
    815c:	9c 81       	ldd	r25, Y+4	; 0x04
    815e:	63 e0       	ldi	r22, 0x03	; 3
    8160:	b2 d1       	rcall	.+868    	; 0x84c6 <_ZN13LiquidCrystal10write4bitsEh>
    8162:	84 e9       	ldi	r24, 0x94	; 148
    8164:	91 e1       	ldi	r25, 0x11	; 17
    8166:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
    816a:	8b 81       	ldd	r24, Y+3	; 0x03
    816c:	9c 81       	ldd	r25, Y+4	; 0x04
    816e:	63 e0       	ldi	r22, 0x03	; 3
    8170:	aa d1       	rcall	.+852    	; 0x84c6 <_ZN13LiquidCrystal10write4bitsEh>
    8172:	86 e9       	ldi	r24, 0x96	; 150
    8174:	90 e0       	ldi	r25, 0x00	; 0
    8176:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
    817a:	8b 81       	ldd	r24, Y+3	; 0x03
    817c:	9c 81       	ldd	r25, Y+4	; 0x04
    817e:	62 e0       	ldi	r22, 0x02	; 2
    8180:	a2 d1       	rcall	.+836    	; 0x84c6 <_ZN13LiquidCrystal10write4bitsEh>
    8182:	26 c0       	rjmp	.+76     	; 0x81d0 <_ZN13LiquidCrystal5beginEhhh+0x1e6>
    8184:	8b 81       	ldd	r24, Y+3	; 0x03
    8186:	9c 81       	ldd	r25, Y+4	; 0x04
    8188:	fc 01       	movw	r30, r24
    818a:	87 85       	ldd	r24, Z+15	; 0x0f
    818c:	28 2f       	mov	r18, r24
    818e:	20 62       	ori	r18, 0x20	; 32
    8190:	8b 81       	ldd	r24, Y+3	; 0x03
    8192:	9c 81       	ldd	r25, Y+4	; 0x04
    8194:	62 2f       	mov	r22, r18
    8196:	f6 d0       	rcall	.+492    	; 0x8384 <_ZN13LiquidCrystal7commandEh>
    8198:	84 e9       	ldi	r24, 0x94	; 148
    819a:	91 e1       	ldi	r25, 0x11	; 17
    819c:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
    81a0:	8b 81       	ldd	r24, Y+3	; 0x03
    81a2:	9c 81       	ldd	r25, Y+4	; 0x04
    81a4:	fc 01       	movw	r30, r24
    81a6:	87 85       	ldd	r24, Z+15	; 0x0f
    81a8:	28 2f       	mov	r18, r24
    81aa:	20 62       	ori	r18, 0x20	; 32
    81ac:	8b 81       	ldd	r24, Y+3	; 0x03
    81ae:	9c 81       	ldd	r25, Y+4	; 0x04
    81b0:	62 2f       	mov	r22, r18
    81b2:	e8 d0       	rcall	.+464    	; 0x8384 <_ZN13LiquidCrystal7commandEh>
    81b4:	86 e9       	ldi	r24, 0x96	; 150
    81b6:	90 e0       	ldi	r25, 0x00	; 0
    81b8:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
    81bc:	8b 81       	ldd	r24, Y+3	; 0x03
    81be:	9c 81       	ldd	r25, Y+4	; 0x04
    81c0:	fc 01       	movw	r30, r24
    81c2:	87 85       	ldd	r24, Z+15	; 0x0f
    81c4:	28 2f       	mov	r18, r24
    81c6:	20 62       	ori	r18, 0x20	; 32
    81c8:	8b 81       	ldd	r24, Y+3	; 0x03
    81ca:	9c 81       	ldd	r25, Y+4	; 0x04
    81cc:	62 2f       	mov	r22, r18
    81ce:	da d0       	rcall	.+436    	; 0x8384 <_ZN13LiquidCrystal7commandEh>
    81d0:	8b 81       	ldd	r24, Y+3	; 0x03
    81d2:	9c 81       	ldd	r25, Y+4	; 0x04
    81d4:	fc 01       	movw	r30, r24
    81d6:	87 85       	ldd	r24, Z+15	; 0x0f
    81d8:	28 2f       	mov	r18, r24
    81da:	20 62       	ori	r18, 0x20	; 32
    81dc:	8b 81       	ldd	r24, Y+3	; 0x03
    81de:	9c 81       	ldd	r25, Y+4	; 0x04
    81e0:	62 2f       	mov	r22, r18
    81e2:	d0 d0       	rcall	.+416    	; 0x8384 <_ZN13LiquidCrystal7commandEh>
    81e4:	8b 81       	ldd	r24, Y+3	; 0x03
    81e6:	9c 81       	ldd	r25, Y+4	; 0x04
    81e8:	24 e0       	ldi	r18, 0x04	; 4
    81ea:	fc 01       	movw	r30, r24
    81ec:	20 8b       	std	Z+16, r18	; 0x10
    81ee:	8b 81       	ldd	r24, Y+3	; 0x03
    81f0:	9c 81       	ldd	r25, Y+4	; 0x04
    81f2:	a6 d0       	rcall	.+332    	; 0x8340 <_ZN13LiquidCrystal7displayEv>
    81f4:	8b 81       	ldd	r24, Y+3	; 0x03
    81f6:	9c 81       	ldd	r25, Y+4	; 0x04
    81f8:	51 d0       	rcall	.+162    	; 0x829c <_ZN13LiquidCrystal5clearEv>
    81fa:	8b 81       	ldd	r24, Y+3	; 0x03
    81fc:	9c 81       	ldd	r25, Y+4	; 0x04
    81fe:	22 e0       	ldi	r18, 0x02	; 2
    8200:	fc 01       	movw	r30, r24
    8202:	21 8b       	std	Z+17, r18	; 0x11
    8204:	8b 81       	ldd	r24, Y+3	; 0x03
    8206:	9c 81       	ldd	r25, Y+4	; 0x04
    8208:	fc 01       	movw	r30, r24
    820a:	81 89       	ldd	r24, Z+17	; 0x11
    820c:	28 2f       	mov	r18, r24
    820e:	24 60       	ori	r18, 0x04	; 4
    8210:	8b 81       	ldd	r24, Y+3	; 0x03
    8212:	9c 81       	ldd	r25, Y+4	; 0x04
    8214:	62 2f       	mov	r22, r18
    8216:	b6 d0       	rcall	.+364    	; 0x8384 <_ZN13LiquidCrystal7commandEh>
    8218:	00 00       	nop
    821a:	27 96       	adiw	r28, 0x07	; 7
    821c:	0f b6       	in	r0, 0x3f	; 63
    821e:	f8 94       	cli
    8220:	de bf       	out	0x3e, r29	; 62
    8222:	0f be       	out	0x3f, r0	; 63
    8224:	cd bf       	out	0x3d, r28	; 61
    8226:	df 91       	pop	r29
    8228:	cf 91       	pop	r28
    822a:	1f 91       	pop	r17
    822c:	0f 91       	pop	r16
    822e:	08 95       	ret

00008230 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    8230:	0f 93       	push	r16
    8232:	1f 93       	push	r17
    8234:	cf 93       	push	r28
    8236:	df 93       	push	r29
    8238:	cd b7       	in	r28, 0x3d	; 61
    823a:	de b7       	in	r29, 0x3e	; 62
    823c:	2a 97       	sbiw	r28, 0x0a	; 10
    823e:	0f b6       	in	r0, 0x3f	; 63
    8240:	f8 94       	cli
    8242:	de bf       	out	0x3e, r29	; 62
    8244:	0f be       	out	0x3f, r0	; 63
    8246:	cd bf       	out	0x3d, r28	; 61
    8248:	9a 83       	std	Y+2, r25	; 0x02
    824a:	89 83       	std	Y+1, r24	; 0x01
    824c:	7c 83       	std	Y+4, r23	; 0x04
    824e:	6b 83       	std	Y+3, r22	; 0x03
    8250:	5e 83       	std	Y+6, r21	; 0x06
    8252:	4d 83       	std	Y+5, r20	; 0x05
    8254:	38 87       	std	Y+8, r19	; 0x08
    8256:	2f 83       	std	Y+7, r18	; 0x07
    8258:	1a 87       	std	Y+10, r17	; 0x0a
    825a:	09 87       	std	Y+9, r16	; 0x09
    825c:	2b 81       	ldd	r18, Y+3	; 0x03
    825e:	89 81       	ldd	r24, Y+1	; 0x01
    8260:	9a 81       	ldd	r25, Y+2	; 0x02
    8262:	fc 01       	movw	r30, r24
    8264:	24 8b       	std	Z+20, r18	; 0x14
    8266:	2d 81       	ldd	r18, Y+5	; 0x05
    8268:	89 81       	ldd	r24, Y+1	; 0x01
    826a:	9a 81       	ldd	r25, Y+2	; 0x02
    826c:	fc 01       	movw	r30, r24
    826e:	25 8b       	std	Z+21, r18	; 0x15
    8270:	2f 81       	ldd	r18, Y+7	; 0x07
    8272:	89 81       	ldd	r24, Y+1	; 0x01
    8274:	9a 81       	ldd	r25, Y+2	; 0x02
    8276:	fc 01       	movw	r30, r24
    8278:	26 8b       	std	Z+22, r18	; 0x16
    827a:	29 85       	ldd	r18, Y+9	; 0x09
    827c:	89 81       	ldd	r24, Y+1	; 0x01
    827e:	9a 81       	ldd	r25, Y+2	; 0x02
    8280:	fc 01       	movw	r30, r24
    8282:	27 8b       	std	Z+23, r18	; 0x17
    8284:	00 00       	nop
    8286:	2a 96       	adiw	r28, 0x0a	; 10
    8288:	0f b6       	in	r0, 0x3f	; 63
    828a:	f8 94       	cli
    828c:	de bf       	out	0x3e, r29	; 62
    828e:	0f be       	out	0x3f, r0	; 63
    8290:	cd bf       	out	0x3d, r28	; 61
    8292:	df 91       	pop	r29
    8294:	cf 91       	pop	r28
    8296:	1f 91       	pop	r17
    8298:	0f 91       	pop	r16
    829a:	08 95       	ret

0000829c <_ZN13LiquidCrystal5clearEv>:
    829c:	cf 93       	push	r28
    829e:	df 93       	push	r29
    82a0:	1f 92       	push	r1
    82a2:	1f 92       	push	r1
    82a4:	cd b7       	in	r28, 0x3d	; 61
    82a6:	de b7       	in	r29, 0x3e	; 62
    82a8:	9a 83       	std	Y+2, r25	; 0x02
    82aa:	89 83       	std	Y+1, r24	; 0x01
    82ac:	89 81       	ldd	r24, Y+1	; 0x01
    82ae:	9a 81       	ldd	r25, Y+2	; 0x02
    82b0:	61 e0       	ldi	r22, 0x01	; 1
    82b2:	68 d0       	rcall	.+208    	; 0x8384 <_ZN13LiquidCrystal7commandEh>
    82b4:	80 ed       	ldi	r24, 0xD0	; 208
    82b6:	97 e0       	ldi	r25, 0x07	; 7
    82b8:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
    82bc:	00 00       	nop
    82be:	0f 90       	pop	r0
    82c0:	0f 90       	pop	r0
    82c2:	df 91       	pop	r29
    82c4:	cf 91       	pop	r28
    82c6:	08 95       	ret

000082c8 <_ZN13LiquidCrystal9setCursorEhh>:
    82c8:	cf 93       	push	r28
    82ca:	df 93       	push	r29
    82cc:	00 d0       	rcall	.+0      	; 0x82ce <_ZN13LiquidCrystal9setCursorEhh+0x6>
    82ce:	00 d0       	rcall	.+0      	; 0x82d0 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    82d0:	cd b7       	in	r28, 0x3d	; 61
    82d2:	de b7       	in	r29, 0x3e	; 62
    82d4:	9c 83       	std	Y+4, r25	; 0x04
    82d6:	8b 83       	std	Y+3, r24	; 0x03
    82d8:	6d 83       	std	Y+5, r22	; 0x05
    82da:	4e 83       	std	Y+6, r20	; 0x06
    82dc:	84 e0       	ldi	r24, 0x04	; 4
    82de:	90 e0       	ldi	r25, 0x00	; 0
    82e0:	9a 83       	std	Y+2, r25	; 0x02
    82e2:	89 83       	std	Y+1, r24	; 0x01
    82e4:	8e 81       	ldd	r24, Y+6	; 0x06
    82e6:	84 30       	cpi	r24, 0x04	; 4
    82e8:	10 f0       	brcs	.+4      	; 0x82ee <_ZN13LiquidCrystal9setCursorEhh+0x26>
    82ea:	83 e0       	ldi	r24, 0x03	; 3
    82ec:	8e 83       	std	Y+6, r24	; 0x06
    82ee:	8b 81       	ldd	r24, Y+3	; 0x03
    82f0:	9c 81       	ldd	r25, Y+4	; 0x04
    82f2:	fc 01       	movw	r30, r24
    82f4:	93 89       	ldd	r25, Z+19	; 0x13
    82f6:	8e 81       	ldd	r24, Y+6	; 0x06
    82f8:	89 17       	cp	r24, r25
    82fa:	30 f0       	brcs	.+12     	; 0x8308 <_ZN13LiquidCrystal9setCursorEhh+0x40>
    82fc:	8b 81       	ldd	r24, Y+3	; 0x03
    82fe:	9c 81       	ldd	r25, Y+4	; 0x04
    8300:	fc 01       	movw	r30, r24
    8302:	83 89       	ldd	r24, Z+19	; 0x13
    8304:	81 50       	subi	r24, 0x01	; 1
    8306:	8e 83       	std	Y+6, r24	; 0x06
    8308:	8e 81       	ldd	r24, Y+6	; 0x06
    830a:	88 2f       	mov	r24, r24
    830c:	90 e0       	ldi	r25, 0x00	; 0
    830e:	2b 81       	ldd	r18, Y+3	; 0x03
    8310:	3c 81       	ldd	r19, Y+4	; 0x04
    8312:	82 0f       	add	r24, r18
    8314:	93 1f       	adc	r25, r19
    8316:	44 96       	adiw	r24, 0x14	; 20
    8318:	fc 01       	movw	r30, r24
    831a:	90 81       	ld	r25, Z
    831c:	8d 81       	ldd	r24, Y+5	; 0x05
    831e:	89 0f       	add	r24, r25
    8320:	80 68       	ori	r24, 0x80	; 128
    8322:	28 2f       	mov	r18, r24
    8324:	8b 81       	ldd	r24, Y+3	; 0x03
    8326:	9c 81       	ldd	r25, Y+4	; 0x04
    8328:	62 2f       	mov	r22, r18
    832a:	2c d0       	rcall	.+88     	; 0x8384 <_ZN13LiquidCrystal7commandEh>
    832c:	00 00       	nop
    832e:	26 96       	adiw	r28, 0x06	; 6
    8330:	0f b6       	in	r0, 0x3f	; 63
    8332:	f8 94       	cli
    8334:	de bf       	out	0x3e, r29	; 62
    8336:	0f be       	out	0x3f, r0	; 63
    8338:	cd bf       	out	0x3d, r28	; 61
    833a:	df 91       	pop	r29
    833c:	cf 91       	pop	r28
    833e:	08 95       	ret

00008340 <_ZN13LiquidCrystal7displayEv>:
    8340:	cf 93       	push	r28
    8342:	df 93       	push	r29
    8344:	1f 92       	push	r1
    8346:	1f 92       	push	r1
    8348:	cd b7       	in	r28, 0x3d	; 61
    834a:	de b7       	in	r29, 0x3e	; 62
    834c:	9a 83       	std	Y+2, r25	; 0x02
    834e:	89 83       	std	Y+1, r24	; 0x01
    8350:	89 81       	ldd	r24, Y+1	; 0x01
    8352:	9a 81       	ldd	r25, Y+2	; 0x02
    8354:	fc 01       	movw	r30, r24
    8356:	80 89       	ldd	r24, Z+16	; 0x10
    8358:	28 2f       	mov	r18, r24
    835a:	24 60       	ori	r18, 0x04	; 4
    835c:	89 81       	ldd	r24, Y+1	; 0x01
    835e:	9a 81       	ldd	r25, Y+2	; 0x02
    8360:	fc 01       	movw	r30, r24
    8362:	20 8b       	std	Z+16, r18	; 0x10
    8364:	89 81       	ldd	r24, Y+1	; 0x01
    8366:	9a 81       	ldd	r25, Y+2	; 0x02
    8368:	fc 01       	movw	r30, r24
    836a:	80 89       	ldd	r24, Z+16	; 0x10
    836c:	28 2f       	mov	r18, r24
    836e:	28 60       	ori	r18, 0x08	; 8
    8370:	89 81       	ldd	r24, Y+1	; 0x01
    8372:	9a 81       	ldd	r25, Y+2	; 0x02
    8374:	62 2f       	mov	r22, r18
    8376:	06 d0       	rcall	.+12     	; 0x8384 <_ZN13LiquidCrystal7commandEh>
    8378:	00 00       	nop
    837a:	0f 90       	pop	r0
    837c:	0f 90       	pop	r0
    837e:	df 91       	pop	r29
    8380:	cf 91       	pop	r28
    8382:	08 95       	ret

00008384 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    8384:	cf 93       	push	r28
    8386:	df 93       	push	r29
    8388:	00 d0       	rcall	.+0      	; 0x838a <_ZN13LiquidCrystal7commandEh+0x6>
    838a:	cd b7       	in	r28, 0x3d	; 61
    838c:	de b7       	in	r29, 0x3e	; 62
    838e:	9a 83       	std	Y+2, r25	; 0x02
    8390:	89 83       	std	Y+1, r24	; 0x01
    8392:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    8394:	89 81       	ldd	r24, Y+1	; 0x01
    8396:	9a 81       	ldd	r25, Y+2	; 0x02
    8398:	40 e0       	ldi	r20, 0x00	; 0
    839a:	6b 81       	ldd	r22, Y+3	; 0x03
    839c:	1c d0       	rcall	.+56     	; 0x83d6 <_ZN13LiquidCrystal4sendEhh>
}
    839e:	00 00       	nop
    83a0:	0f 90       	pop	r0
    83a2:	0f 90       	pop	r0
    83a4:	0f 90       	pop	r0
    83a6:	df 91       	pop	r29
    83a8:	cf 91       	pop	r28
    83aa:	08 95       	ret

000083ac <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    83ac:	cf 93       	push	r28
    83ae:	df 93       	push	r29
    83b0:	00 d0       	rcall	.+0      	; 0x83b2 <_ZN13LiquidCrystal5writeEh+0x6>
    83b2:	cd b7       	in	r28, 0x3d	; 61
    83b4:	de b7       	in	r29, 0x3e	; 62
    83b6:	9a 83       	std	Y+2, r25	; 0x02
    83b8:	89 83       	std	Y+1, r24	; 0x01
    83ba:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    83bc:	89 81       	ldd	r24, Y+1	; 0x01
    83be:	9a 81       	ldd	r25, Y+2	; 0x02
    83c0:	41 e0       	ldi	r20, 0x01	; 1
    83c2:	6b 81       	ldd	r22, Y+3	; 0x03
    83c4:	08 d0       	rcall	.+16     	; 0x83d6 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    83c6:	81 e0       	ldi	r24, 0x01	; 1
    83c8:	90 e0       	ldi	r25, 0x00	; 0
}
    83ca:	0f 90       	pop	r0
    83cc:	0f 90       	pop	r0
    83ce:	0f 90       	pop	r0
    83d0:	df 91       	pop	r29
    83d2:	cf 91       	pop	r28
    83d4:	08 95       	ret

000083d6 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    83d6:	cf 93       	push	r28
    83d8:	df 93       	push	r29
    83da:	00 d0       	rcall	.+0      	; 0x83dc <_ZN13LiquidCrystal4sendEhh+0x6>
    83dc:	1f 92       	push	r1
    83de:	cd b7       	in	r28, 0x3d	; 61
    83e0:	de b7       	in	r29, 0x3e	; 62
    83e2:	9a 83       	std	Y+2, r25	; 0x02
    83e4:	89 83       	std	Y+1, r24	; 0x01
    83e6:	6b 83       	std	Y+3, r22	; 0x03
    83e8:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    83ea:	89 81       	ldd	r24, Y+1	; 0x01
    83ec:	9a 81       	ldd	r25, Y+2	; 0x02
    83ee:	fc 01       	movw	r30, r24
    83f0:	84 81       	ldd	r24, Z+4	; 0x04
    83f2:	6c 81       	ldd	r22, Y+4	; 0x04
    83f4:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    83f8:	89 81       	ldd	r24, Y+1	; 0x01
    83fa:	9a 81       	ldd	r25, Y+2	; 0x02
    83fc:	fc 01       	movw	r30, r24
    83fe:	85 81       	ldd	r24, Z+5	; 0x05
    8400:	8f 3f       	cpi	r24, 0xFF	; 255
    8402:	39 f0       	breq	.+14     	; 0x8412 <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    8404:	89 81       	ldd	r24, Y+1	; 0x01
    8406:	9a 81       	ldd	r25, Y+2	; 0x02
    8408:	fc 01       	movw	r30, r24
    840a:	85 81       	ldd	r24, Z+5	; 0x05
    840c:	60 e0       	ldi	r22, 0x00	; 0
    840e:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    8412:	89 81       	ldd	r24, Y+1	; 0x01
    8414:	9a 81       	ldd	r25, Y+2	; 0x02
    8416:	fc 01       	movw	r30, r24
    8418:	87 85       	ldd	r24, Z+15	; 0x0f
    841a:	88 2f       	mov	r24, r24
    841c:	90 e0       	ldi	r25, 0x00	; 0
    841e:	80 71       	andi	r24, 0x10	; 16
    8420:	99 27       	eor	r25, r25
    8422:	89 2b       	or	r24, r25
    8424:	29 f0       	breq	.+10     	; 0x8430 <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    8426:	89 81       	ldd	r24, Y+1	; 0x01
    8428:	9a 81       	ldd	r25, Y+2	; 0x02
    842a:	6b 81       	ldd	r22, Y+3	; 0x03
    842c:	85 d0       	rcall	.+266    	; 0x8538 <_ZN13LiquidCrystal10write8bitsEh>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
    842e:	14 c0       	rjmp	.+40     	; 0x8458 <_ZN13LiquidCrystal4sendEhh+0x82>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    8430:	8b 81       	ldd	r24, Y+3	; 0x03
    8432:	88 2f       	mov	r24, r24
    8434:	90 e0       	ldi	r25, 0x00	; 0
    8436:	95 95       	asr	r25
    8438:	87 95       	ror	r24
    843a:	95 95       	asr	r25
    843c:	87 95       	ror	r24
    843e:	95 95       	asr	r25
    8440:	87 95       	ror	r24
    8442:	95 95       	asr	r25
    8444:	87 95       	ror	r24
    8446:	28 2f       	mov	r18, r24
    8448:	89 81       	ldd	r24, Y+1	; 0x01
    844a:	9a 81       	ldd	r25, Y+2	; 0x02
    844c:	62 2f       	mov	r22, r18
    844e:	3b d0       	rcall	.+118    	; 0x84c6 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    8450:	89 81       	ldd	r24, Y+1	; 0x01
    8452:	9a 81       	ldd	r25, Y+2	; 0x02
    8454:	6b 81       	ldd	r22, Y+3	; 0x03
    8456:	37 d0       	rcall	.+110    	; 0x84c6 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    8458:	00 00       	nop
    845a:	0f 90       	pop	r0
    845c:	0f 90       	pop	r0
    845e:	0f 90       	pop	r0
    8460:	0f 90       	pop	r0
    8462:	df 91       	pop	r29
    8464:	cf 91       	pop	r28
    8466:	08 95       	ret

00008468 <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    8468:	cf 93       	push	r28
    846a:	df 93       	push	r29
    846c:	1f 92       	push	r1
    846e:	1f 92       	push	r1
    8470:	cd b7       	in	r28, 0x3d	; 61
    8472:	de b7       	in	r29, 0x3e	; 62
    8474:	9a 83       	std	Y+2, r25	; 0x02
    8476:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    8478:	89 81       	ldd	r24, Y+1	; 0x01
    847a:	9a 81       	ldd	r25, Y+2	; 0x02
    847c:	fc 01       	movw	r30, r24
    847e:	86 81       	ldd	r24, Z+6	; 0x06
    8480:	60 e0       	ldi	r22, 0x00	; 0
    8482:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
  delayMicroseconds(1);    
    8486:	81 e0       	ldi	r24, 0x01	; 1
    8488:	90 e0       	ldi	r25, 0x00	; 0
    848a:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    848e:	89 81       	ldd	r24, Y+1	; 0x01
    8490:	9a 81       	ldd	r25, Y+2	; 0x02
    8492:	fc 01       	movw	r30, r24
    8494:	86 81       	ldd	r24, Z+6	; 0x06
    8496:	61 e0       	ldi	r22, 0x01	; 1
    8498:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    849c:	81 e0       	ldi	r24, 0x01	; 1
    849e:	90 e0       	ldi	r25, 0x00	; 0
    84a0:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    84a4:	89 81       	ldd	r24, Y+1	; 0x01
    84a6:	9a 81       	ldd	r25, Y+2	; 0x02
    84a8:	fc 01       	movw	r30, r24
    84aa:	86 81       	ldd	r24, Z+6	; 0x06
    84ac:	60 e0       	ldi	r22, 0x00	; 0
    84ae:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    84b2:	84 e6       	ldi	r24, 0x64	; 100
    84b4:	90 e0       	ldi	r25, 0x00	; 0
    84b6:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
}
    84ba:	00 00       	nop
    84bc:	0f 90       	pop	r0
    84be:	0f 90       	pop	r0
    84c0:	df 91       	pop	r29
    84c2:	cf 91       	pop	r28
    84c4:	08 95       	ret

000084c6 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    84c6:	cf 93       	push	r28
    84c8:	df 93       	push	r29
    84ca:	00 d0       	rcall	.+0      	; 0x84cc <_ZN13LiquidCrystal10write4bitsEh+0x6>
    84cc:	1f 92       	push	r1
    84ce:	1f 92       	push	r1
    84d0:	cd b7       	in	r28, 0x3d	; 61
    84d2:	de b7       	in	r29, 0x3e	; 62
    84d4:	9c 83       	std	Y+4, r25	; 0x04
    84d6:	8b 83       	std	Y+3, r24	; 0x03
    84d8:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    84da:	1a 82       	std	Y+2, r1	; 0x02
    84dc:	19 82       	std	Y+1, r1	; 0x01
    84de:	89 81       	ldd	r24, Y+1	; 0x01
    84e0:	9a 81       	ldd	r25, Y+2	; 0x02
    84e2:	04 97       	sbiw	r24, 0x04	; 4
    84e4:	ec f4       	brge	.+58     	; 0x8520 <_ZN13LiquidCrystal10write4bitsEh+0x5a>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    84e6:	8d 81       	ldd	r24, Y+5	; 0x05
    84e8:	88 2f       	mov	r24, r24
    84ea:	90 e0       	ldi	r25, 0x00	; 0
    84ec:	09 80       	ldd	r0, Y+1	; 0x01
    84ee:	02 c0       	rjmp	.+4      	; 0x84f4 <_ZN13LiquidCrystal10write4bitsEh+0x2e>
    84f0:	95 95       	asr	r25
    84f2:	87 95       	ror	r24
    84f4:	0a 94       	dec	r0
    84f6:	e2 f7       	brpl	.-8      	; 0x84f0 <_ZN13LiquidCrystal10write4bitsEh+0x2a>
    84f8:	48 2f       	mov	r20, r24
    84fa:	41 70       	andi	r20, 0x01	; 1
    84fc:	2b 81       	ldd	r18, Y+3	; 0x03
    84fe:	3c 81       	ldd	r19, Y+4	; 0x04
    8500:	89 81       	ldd	r24, Y+1	; 0x01
    8502:	9a 81       	ldd	r25, Y+2	; 0x02
    8504:	82 0f       	add	r24, r18
    8506:	93 1f       	adc	r25, r19
    8508:	07 96       	adiw	r24, 0x07	; 7
    850a:	fc 01       	movw	r30, r24
    850c:	80 81       	ld	r24, Z
    850e:	64 2f       	mov	r22, r20
    8510:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    8514:	89 81       	ldd	r24, Y+1	; 0x01
    8516:	9a 81       	ldd	r25, Y+2	; 0x02
    8518:	01 96       	adiw	r24, 0x01	; 1
    851a:	9a 83       	std	Y+2, r25	; 0x02
    851c:	89 83       	std	Y+1, r24	; 0x01
    851e:	df cf       	rjmp	.-66     	; 0x84de <_ZN13LiquidCrystal10write4bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    8520:	8b 81       	ldd	r24, Y+3	; 0x03
    8522:	9c 81       	ldd	r25, Y+4	; 0x04
    8524:	a1 df       	rcall	.-190    	; 0x8468 <_ZN13LiquidCrystal11pulseEnableEv>
}
    8526:	00 00       	nop
    8528:	0f 90       	pop	r0
    852a:	0f 90       	pop	r0
    852c:	0f 90       	pop	r0
    852e:	0f 90       	pop	r0
    8530:	0f 90       	pop	r0
    8532:	df 91       	pop	r29
    8534:	cf 91       	pop	r28
    8536:	08 95       	ret

00008538 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    8538:	cf 93       	push	r28
    853a:	df 93       	push	r29
    853c:	00 d0       	rcall	.+0      	; 0x853e <_ZN13LiquidCrystal10write8bitsEh+0x6>
    853e:	1f 92       	push	r1
    8540:	1f 92       	push	r1
    8542:	cd b7       	in	r28, 0x3d	; 61
    8544:	de b7       	in	r29, 0x3e	; 62
    8546:	9c 83       	std	Y+4, r25	; 0x04
    8548:	8b 83       	std	Y+3, r24	; 0x03
    854a:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    854c:	1a 82       	std	Y+2, r1	; 0x02
    854e:	19 82       	std	Y+1, r1	; 0x01
    8550:	89 81       	ldd	r24, Y+1	; 0x01
    8552:	9a 81       	ldd	r25, Y+2	; 0x02
    8554:	08 97       	sbiw	r24, 0x08	; 8
    8556:	ec f4       	brge	.+58     	; 0x8592 <_ZN13LiquidCrystal10write8bitsEh+0x5a>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    8558:	8d 81       	ldd	r24, Y+5	; 0x05
    855a:	88 2f       	mov	r24, r24
    855c:	90 e0       	ldi	r25, 0x00	; 0
    855e:	09 80       	ldd	r0, Y+1	; 0x01
    8560:	02 c0       	rjmp	.+4      	; 0x8566 <_ZN13LiquidCrystal10write8bitsEh+0x2e>
    8562:	95 95       	asr	r25
    8564:	87 95       	ror	r24
    8566:	0a 94       	dec	r0
    8568:	e2 f7       	brpl	.-8      	; 0x8562 <_ZN13LiquidCrystal10write8bitsEh+0x2a>
    856a:	48 2f       	mov	r20, r24
    856c:	41 70       	andi	r20, 0x01	; 1
    856e:	2b 81       	ldd	r18, Y+3	; 0x03
    8570:	3c 81       	ldd	r19, Y+4	; 0x04
    8572:	89 81       	ldd	r24, Y+1	; 0x01
    8574:	9a 81       	ldd	r25, Y+2	; 0x02
    8576:	82 0f       	add	r24, r18
    8578:	93 1f       	adc	r25, r19
    857a:	07 96       	adiw	r24, 0x07	; 7
    857c:	fc 01       	movw	r30, r24
    857e:	80 81       	ld	r24, Z
    8580:	64 2f       	mov	r22, r20
    8582:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    8586:	89 81       	ldd	r24, Y+1	; 0x01
    8588:	9a 81       	ldd	r25, Y+2	; 0x02
    858a:	01 96       	adiw	r24, 0x01	; 1
    858c:	9a 83       	std	Y+2, r25	; 0x02
    858e:	89 83       	std	Y+1, r24	; 0x01
    8590:	df cf       	rjmp	.-66     	; 0x8550 <_ZN13LiquidCrystal10write8bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    8592:	8b 81       	ldd	r24, Y+3	; 0x03
    8594:	9c 81       	ldd	r25, Y+4	; 0x04
    8596:	68 df       	rcall	.-304    	; 0x8468 <_ZN13LiquidCrystal11pulseEnableEv>
}
    8598:	00 00       	nop
    859a:	0f 90       	pop	r0
    859c:	0f 90       	pop	r0
    859e:	0f 90       	pop	r0
    85a0:	0f 90       	pop	r0
    85a2:	0f 90       	pop	r0
    85a4:	df 91       	pop	r29
    85a6:	cf 91       	pop	r28
    85a8:	08 95       	ret

000085aa <_ZN7MFRC522C1Ehh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    85aa:	cf 93       	push	r28
    85ac:	df 93       	push	r29
    85ae:	00 d0       	rcall	.+0      	; 0x85b0 <_ZN7MFRC522C1Ehh+0x6>
    85b0:	1f 92       	push	r1
    85b2:	cd b7       	in	r28, 0x3d	; 61
    85b4:	de b7       	in	r29, 0x3e	; 62
    85b6:	9a 83       	std	Y+2, r25	; 0x02
    85b8:	89 83       	std	Y+1, r24	; 0x01
    85ba:	6b 83       	std	Y+3, r22	; 0x03
    85bc:	4c 83       	std	Y+4, r20	; 0x04
    85be:	2b e0       	ldi	r18, 0x0B	; 11
    85c0:	33 e0       	ldi	r19, 0x03	; 3
    85c2:	89 81       	ldd	r24, Y+1	; 0x01
    85c4:	9a 81       	ldd	r25, Y+2	; 0x02
    85c6:	fc 01       	movw	r30, r24
    85c8:	31 83       	std	Z+1, r19	; 0x01
    85ca:	20 83       	st	Z, r18
    85cc:	89 81       	ldd	r24, Y+1	; 0x01
    85ce:	9a 81       	ldd	r25, Y+2	; 0x02
    85d0:	2b 81       	ldd	r18, Y+3	; 0x03
    85d2:	fc 01       	movw	r30, r24
    85d4:	26 87       	std	Z+14, r18	; 0x0e
    85d6:	89 81       	ldd	r24, Y+1	; 0x01
    85d8:	9a 81       	ldd	r25, Y+2	; 0x02
    85da:	2c 81       	ldd	r18, Y+4	; 0x04
    85dc:	fc 01       	movw	r30, r24
    85de:	27 87       	std	Z+15, r18	; 0x0f
    85e0:	00 00       	nop
    85e2:	0f 90       	pop	r0
    85e4:	0f 90       	pop	r0
    85e6:	0f 90       	pop	r0
    85e8:	0f 90       	pop	r0
    85ea:	df 91       	pop	r29
    85ec:	cf 91       	pop	r28
    85ee:	08 95       	ret

000085f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    85f0:	0f 93       	push	r16
    85f2:	cf 93       	push	r28
    85f4:	df 93       	push	r29
    85f6:	00 d0       	rcall	.+0      	; 0x85f8 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0x8>
    85f8:	00 d0       	rcall	.+0      	; 0x85fa <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0xa>
    85fa:	cd b7       	in	r28, 0x3d	; 61
    85fc:	de b7       	in	r29, 0x3e	; 62
    85fe:	9c 83       	std	Y+4, r25	; 0x04
    8600:	8b 83       	std	Y+3, r24	; 0x03
    8602:	6d 83       	std	Y+5, r22	; 0x05
    8604:	4e 83       	std	Y+6, r20	; 0x06
    8606:	00 e0       	ldi	r16, 0x00	; 0
    8608:	21 e0       	ldi	r18, 0x01	; 1
    860a:	40 e0       	ldi	r20, 0x00	; 0
    860c:	59 e0       	ldi	r21, 0x09	; 9
    860e:	6d e3       	ldi	r22, 0x3D	; 61
    8610:	70 e0       	ldi	r23, 0x00	; 0
    8612:	ce 01       	movw	r24, r28
    8614:	01 96       	adiw	r24, 0x01	; 1
    8616:	0e 94 a5 11 	call	0x234a	; 0x234a <_ZN11SPISettingsC1Emhh>
    861a:	89 81       	ldd	r24, Y+1	; 0x01
    861c:	9a 81       	ldd	r25, Y+2	; 0x02
    861e:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8622:	8b 81       	ldd	r24, Y+3	; 0x03
    8624:	9c 81       	ldd	r25, Y+4	; 0x04
    8626:	fc 01       	movw	r30, r24
    8628:	86 85       	ldd	r24, Z+14	; 0x0e
    862a:	60 e0       	ldi	r22, 0x00	; 0
    862c:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    8630:	8d 81       	ldd	r24, Y+5	; 0x05
    8632:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    8636:	8e 81       	ldd	r24, Y+6	; 0x06
    8638:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    863c:	8b 81       	ldd	r24, Y+3	; 0x03
    863e:	9c 81       	ldd	r25, Y+4	; 0x04
    8640:	fc 01       	movw	r30, r24
    8642:	86 85       	ldd	r24, Z+14	; 0x0e
    8644:	61 e0       	ldi	r22, 0x01	; 1
    8646:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    864a:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN8SPIClass14endTransactionEv>
    864e:	00 00       	nop
    8650:	26 96       	adiw	r28, 0x06	; 6
    8652:	0f b6       	in	r0, 0x3f	; 63
    8654:	f8 94       	cli
    8656:	de bf       	out	0x3e, r29	; 62
    8658:	0f be       	out	0x3f, r0	; 63
    865a:	cd bf       	out	0x3d, r28	; 61
    865c:	df 91       	pop	r29
    865e:	cf 91       	pop	r28
    8660:	0f 91       	pop	r16
    8662:	08 95       	ret

00008664 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    8664:	0f 93       	push	r16
    8666:	cf 93       	push	r28
    8668:	df 93       	push	r29
    866a:	cd b7       	in	r28, 0x3d	; 61
    866c:	de b7       	in	r29, 0x3e	; 62
    866e:	29 97       	sbiw	r28, 0x09	; 9
    8670:	0f b6       	in	r0, 0x3f	; 63
    8672:	f8 94       	cli
    8674:	de bf       	out	0x3e, r29	; 62
    8676:	0f be       	out	0x3f, r0	; 63
    8678:	cd bf       	out	0x3d, r28	; 61
    867a:	9d 83       	std	Y+5, r25	; 0x05
    867c:	8c 83       	std	Y+4, r24	; 0x04
    867e:	6e 83       	std	Y+6, r22	; 0x06
    8680:	4f 83       	std	Y+7, r20	; 0x07
    8682:	39 87       	std	Y+9, r19	; 0x09
    8684:	28 87       	std	Y+8, r18	; 0x08
    8686:	ce 01       	movw	r24, r28
    8688:	02 96       	adiw	r24, 0x02	; 2
    868a:	00 e0       	ldi	r16, 0x00	; 0
    868c:	21 e0       	ldi	r18, 0x01	; 1
    868e:	40 e0       	ldi	r20, 0x00	; 0
    8690:	59 e0       	ldi	r21, 0x09	; 9
    8692:	6d e3       	ldi	r22, 0x3D	; 61
    8694:	70 e0       	ldi	r23, 0x00	; 0
    8696:	0e 94 a5 11 	call	0x234a	; 0x234a <_ZN11SPISettingsC1Emhh>
    869a:	8a 81       	ldd	r24, Y+2	; 0x02
    869c:	9b 81       	ldd	r25, Y+3	; 0x03
    869e:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN8SPIClass16beginTransactionE11SPISettings>
    86a2:	8c 81       	ldd	r24, Y+4	; 0x04
    86a4:	9d 81       	ldd	r25, Y+5	; 0x05
    86a6:	fc 01       	movw	r30, r24
    86a8:	86 85       	ldd	r24, Z+14	; 0x0e
    86aa:	60 e0       	ldi	r22, 0x00	; 0
    86ac:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    86b0:	8e 81       	ldd	r24, Y+6	; 0x06
    86b2:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    86b6:	19 82       	std	Y+1, r1	; 0x01
    86b8:	99 81       	ldd	r25, Y+1	; 0x01
    86ba:	8f 81       	ldd	r24, Y+7	; 0x07
    86bc:	98 17       	cp	r25, r24
    86be:	78 f4       	brcc	.+30     	; 0x86de <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x7a>
    86c0:	89 81       	ldd	r24, Y+1	; 0x01
    86c2:	88 2f       	mov	r24, r24
    86c4:	90 e0       	ldi	r25, 0x00	; 0
    86c6:	28 85       	ldd	r18, Y+8	; 0x08
    86c8:	39 85       	ldd	r19, Y+9	; 0x09
    86ca:	82 0f       	add	r24, r18
    86cc:	93 1f       	adc	r25, r19
    86ce:	fc 01       	movw	r30, r24
    86d0:	80 81       	ld	r24, Z
    86d2:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    86d6:	89 81       	ldd	r24, Y+1	; 0x01
    86d8:	8f 5f       	subi	r24, 0xFF	; 255
    86da:	89 83       	std	Y+1, r24	; 0x01
    86dc:	ed cf       	rjmp	.-38     	; 0x86b8 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x54>
    86de:	8c 81       	ldd	r24, Y+4	; 0x04
    86e0:	9d 81       	ldd	r25, Y+5	; 0x05
    86e2:	fc 01       	movw	r30, r24
    86e4:	86 85       	ldd	r24, Z+14	; 0x0e
    86e6:	61 e0       	ldi	r22, 0x01	; 1
    86e8:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    86ec:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN8SPIClass14endTransactionEv>
    86f0:	00 00       	nop
    86f2:	29 96       	adiw	r28, 0x09	; 9
    86f4:	0f b6       	in	r0, 0x3f	; 63
    86f6:	f8 94       	cli
    86f8:	de bf       	out	0x3e, r29	; 62
    86fa:	0f be       	out	0x3f, r0	; 63
    86fc:	cd bf       	out	0x3d, r28	; 61
    86fe:	df 91       	pop	r29
    8700:	cf 91       	pop	r28
    8702:	0f 91       	pop	r16
    8704:	08 95       	ret

00008706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    8706:	0f 93       	push	r16
    8708:	cf 93       	push	r28
    870a:	df 93       	push	r29
    870c:	00 d0       	rcall	.+0      	; 0x870e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0x8>
    870e:	00 d0       	rcall	.+0      	; 0x8710 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0xa>
    8710:	cd b7       	in	r28, 0x3d	; 61
    8712:	de b7       	in	r29, 0x3e	; 62
    8714:	9d 83       	std	Y+5, r25	; 0x05
    8716:	8c 83       	std	Y+4, r24	; 0x04
    8718:	6e 83       	std	Y+6, r22	; 0x06
    871a:	ce 01       	movw	r24, r28
    871c:	02 96       	adiw	r24, 0x02	; 2
    871e:	00 e0       	ldi	r16, 0x00	; 0
    8720:	21 e0       	ldi	r18, 0x01	; 1
    8722:	40 e0       	ldi	r20, 0x00	; 0
    8724:	59 e0       	ldi	r21, 0x09	; 9
    8726:	6d e3       	ldi	r22, 0x3D	; 61
    8728:	70 e0       	ldi	r23, 0x00	; 0
    872a:	0e 94 a5 11 	call	0x234a	; 0x234a <_ZN11SPISettingsC1Emhh>
    872e:	8a 81       	ldd	r24, Y+2	; 0x02
    8730:	9b 81       	ldd	r25, Y+3	; 0x03
    8732:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8736:	8c 81       	ldd	r24, Y+4	; 0x04
    8738:	9d 81       	ldd	r25, Y+5	; 0x05
    873a:	fc 01       	movw	r30, r24
    873c:	86 85       	ldd	r24, Z+14	; 0x0e
    873e:	60 e0       	ldi	r22, 0x00	; 0
    8740:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    8744:	8e 81       	ldd	r24, Y+6	; 0x06
    8746:	80 68       	ori	r24, 0x80	; 128
    8748:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    874c:	80 e0       	ldi	r24, 0x00	; 0
    874e:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    8752:	89 83       	std	Y+1, r24	; 0x01
    8754:	8c 81       	ldd	r24, Y+4	; 0x04
    8756:	9d 81       	ldd	r25, Y+5	; 0x05
    8758:	fc 01       	movw	r30, r24
    875a:	86 85       	ldd	r24, Z+14	; 0x0e
    875c:	61 e0       	ldi	r22, 0x01	; 1
    875e:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    8762:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN8SPIClass14endTransactionEv>
    8766:	89 81       	ldd	r24, Y+1	; 0x01
    8768:	26 96       	adiw	r28, 0x06	; 6
    876a:	0f b6       	in	r0, 0x3f	; 63
    876c:	f8 94       	cli
    876e:	de bf       	out	0x3e, r29	; 62
    8770:	0f be       	out	0x3f, r0	; 63
    8772:	cd bf       	out	0x3d, r28	; 61
    8774:	df 91       	pop	r29
    8776:	cf 91       	pop	r28
    8778:	0f 91       	pop	r16
    877a:	08 95       	ret

0000877c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    877c:	0f 93       	push	r16
    877e:	1f 93       	push	r17
    8780:	cf 93       	push	r28
    8782:	df 93       	push	r29
    8784:	cd b7       	in	r28, 0x3d	; 61
    8786:	de b7       	in	r29, 0x3e	; 62
    8788:	2d 97       	sbiw	r28, 0x0d	; 13
    878a:	0f b6       	in	r0, 0x3f	; 63
    878c:	f8 94       	cli
    878e:	de bf       	out	0x3e, r29	; 62
    8790:	0f be       	out	0x3f, r0	; 63
    8792:	cd bf       	out	0x3d, r28	; 61
    8794:	98 87       	std	Y+8, r25	; 0x08
    8796:	8f 83       	std	Y+7, r24	; 0x07
    8798:	69 87       	std	Y+9, r22	; 0x09
    879a:	4a 87       	std	Y+10, r20	; 0x0a
    879c:	3c 87       	std	Y+12, r19	; 0x0c
    879e:	2b 87       	std	Y+11, r18	; 0x0b
    87a0:	0d 87       	std	Y+13, r16	; 0x0d
    87a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    87a4:	88 23       	and	r24, r24
    87a6:	09 f4       	brne	.+2      	; 0x87aa <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x2e>
    87a8:	71 c0       	rjmp	.+226    	; 0x888c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x110>
    87aa:	89 85       	ldd	r24, Y+9	; 0x09
    87ac:	80 68       	ori	r24, 0x80	; 128
    87ae:	8a 83       	std	Y+2, r24	; 0x02
    87b0:	19 82       	std	Y+1, r1	; 0x01
    87b2:	ce 01       	movw	r24, r28
    87b4:	05 96       	adiw	r24, 0x05	; 5
    87b6:	00 e0       	ldi	r16, 0x00	; 0
    87b8:	21 e0       	ldi	r18, 0x01	; 1
    87ba:	40 e0       	ldi	r20, 0x00	; 0
    87bc:	59 e0       	ldi	r21, 0x09	; 9
    87be:	6d e3       	ldi	r22, 0x3D	; 61
    87c0:	70 e0       	ldi	r23, 0x00	; 0
    87c2:	0e 94 a5 11 	call	0x234a	; 0x234a <_ZN11SPISettingsC1Emhh>
    87c6:	8d 81       	ldd	r24, Y+5	; 0x05
    87c8:	9e 81       	ldd	r25, Y+6	; 0x06
    87ca:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN8SPIClass16beginTransactionE11SPISettings>
    87ce:	8f 81       	ldd	r24, Y+7	; 0x07
    87d0:	98 85       	ldd	r25, Y+8	; 0x08
    87d2:	fc 01       	movw	r30, r24
    87d4:	86 85       	ldd	r24, Z+14	; 0x0e
    87d6:	60 e0       	ldi	r22, 0x00	; 0
    87d8:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    87dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    87de:	81 50       	subi	r24, 0x01	; 1
    87e0:	8a 87       	std	Y+10, r24	; 0x0a
    87e2:	8a 81       	ldd	r24, Y+2	; 0x02
    87e4:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    87e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    87ea:	88 23       	and	r24, r24
    87ec:	19 f1       	breq	.+70     	; 0x8834 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xb8>
    87ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    87f0:	28 2f       	mov	r18, r24
    87f2:	30 e0       	ldi	r19, 0x00	; 0
    87f4:	8f ef       	ldi	r24, 0xFF	; 255
    87f6:	90 e0       	ldi	r25, 0x00	; 0
    87f8:	02 c0       	rjmp	.+4      	; 0x87fe <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x82>
    87fa:	88 0f       	add	r24, r24
    87fc:	99 1f       	adc	r25, r25
    87fe:	2a 95       	dec	r18
    8800:	e2 f7       	brpl	.-8      	; 0x87fa <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x7e>
    8802:	8b 83       	std	Y+3, r24	; 0x03
    8804:	8a 81       	ldd	r24, Y+2	; 0x02
    8806:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    880a:	8c 83       	std	Y+4, r24	; 0x04
    880c:	8b 85       	ldd	r24, Y+11	; 0x0b
    880e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8810:	fc 01       	movw	r30, r24
    8812:	80 81       	ld	r24, Z
    8814:	98 2f       	mov	r25, r24
    8816:	8b 81       	ldd	r24, Y+3	; 0x03
    8818:	80 95       	com	r24
    881a:	89 23       	and	r24, r25
    881c:	2c 81       	ldd	r18, Y+4	; 0x04
    881e:	9b 81       	ldd	r25, Y+3	; 0x03
    8820:	92 23       	and	r25, r18
    8822:	89 2b       	or	r24, r25
    8824:	28 2f       	mov	r18, r24
    8826:	8b 85       	ldd	r24, Y+11	; 0x0b
    8828:	9c 85       	ldd	r25, Y+12	; 0x0c
    882a:	fc 01       	movw	r30, r24
    882c:	20 83       	st	Z, r18
    882e:	89 81       	ldd	r24, Y+1	; 0x01
    8830:	8f 5f       	subi	r24, 0xFF	; 255
    8832:	89 83       	std	Y+1, r24	; 0x01
    8834:	99 81       	ldd	r25, Y+1	; 0x01
    8836:	8a 85       	ldd	r24, Y+10	; 0x0a
    8838:	98 17       	cp	r25, r24
    883a:	88 f4       	brcc	.+34     	; 0x885e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xe2>
    883c:	89 81       	ldd	r24, Y+1	; 0x01
    883e:	88 2f       	mov	r24, r24
    8840:	90 e0       	ldi	r25, 0x00	; 0
    8842:	2b 85       	ldd	r18, Y+11	; 0x0b
    8844:	3c 85       	ldd	r19, Y+12	; 0x0c
    8846:	89 01       	movw	r16, r18
    8848:	08 0f       	add	r16, r24
    884a:	19 1f       	adc	r17, r25
    884c:	8a 81       	ldd	r24, Y+2	; 0x02
    884e:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    8852:	f8 01       	movw	r30, r16
    8854:	80 83       	st	Z, r24
    8856:	89 81       	ldd	r24, Y+1	; 0x01
    8858:	8f 5f       	subi	r24, 0xFF	; 255
    885a:	89 83       	std	Y+1, r24	; 0x01
    885c:	eb cf       	rjmp	.-42     	; 0x8834 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xb8>
    885e:	89 81       	ldd	r24, Y+1	; 0x01
    8860:	88 2f       	mov	r24, r24
    8862:	90 e0       	ldi	r25, 0x00	; 0
    8864:	2b 85       	ldd	r18, Y+11	; 0x0b
    8866:	3c 85       	ldd	r19, Y+12	; 0x0c
    8868:	89 01       	movw	r16, r18
    886a:	08 0f       	add	r16, r24
    886c:	19 1f       	adc	r17, r25
    886e:	80 e0       	ldi	r24, 0x00	; 0
    8870:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <_ZN8SPIClass8transferEh>
    8874:	f8 01       	movw	r30, r16
    8876:	80 83       	st	Z, r24
    8878:	8f 81       	ldd	r24, Y+7	; 0x07
    887a:	98 85       	ldd	r25, Y+8	; 0x08
    887c:	fc 01       	movw	r30, r24
    887e:	86 85       	ldd	r24, Z+14	; 0x0e
    8880:	61 e0       	ldi	r22, 0x01	; 1
    8882:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    8886:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN8SPIClass14endTransactionEv>
    888a:	01 c0       	rjmp	.+2      	; 0x888e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x112>
    888c:	00 00       	nop
    888e:	2d 96       	adiw	r28, 0x0d	; 13
    8890:	0f b6       	in	r0, 0x3f	; 63
    8892:	f8 94       	cli
    8894:	de bf       	out	0x3e, r29	; 62
    8896:	0f be       	out	0x3f, r0	; 63
    8898:	cd bf       	out	0x3d, r28	; 61
    889a:	df 91       	pop	r29
    889c:	cf 91       	pop	r28
    889e:	1f 91       	pop	r17
    88a0:	0f 91       	pop	r16
    88a2:	08 95       	ret

000088a4 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    88a4:	cf 93       	push	r28
    88a6:	df 93       	push	r29
    88a8:	00 d0       	rcall	.+0      	; 0x88aa <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh+0x6>
    88aa:	1f 92       	push	r1
    88ac:	1f 92       	push	r1
    88ae:	cd b7       	in	r28, 0x3d	; 61
    88b0:	de b7       	in	r29, 0x3e	; 62
    88b2:	9b 83       	std	Y+3, r25	; 0x03
    88b4:	8a 83       	std	Y+2, r24	; 0x02
    88b6:	6c 83       	std	Y+4, r22	; 0x04
    88b8:	4d 83       	std	Y+5, r20	; 0x05
    88ba:	8a 81       	ldd	r24, Y+2	; 0x02
    88bc:	9b 81       	ldd	r25, Y+3	; 0x03
    88be:	6c 81       	ldd	r22, Y+4	; 0x04
    88c0:	22 df       	rcall	.-444    	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    88c2:	89 83       	std	Y+1, r24	; 0x01
    88c4:	99 81       	ldd	r25, Y+1	; 0x01
    88c6:	8d 81       	ldd	r24, Y+5	; 0x05
    88c8:	29 2f       	mov	r18, r25
    88ca:	28 2b       	or	r18, r24
    88cc:	8a 81       	ldd	r24, Y+2	; 0x02
    88ce:	9b 81       	ldd	r25, Y+3	; 0x03
    88d0:	42 2f       	mov	r20, r18
    88d2:	6c 81       	ldd	r22, Y+4	; 0x04
    88d4:	8d de       	rcall	.-742    	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    88d6:	00 00       	nop
    88d8:	0f 90       	pop	r0
    88da:	0f 90       	pop	r0
    88dc:	0f 90       	pop	r0
    88de:	0f 90       	pop	r0
    88e0:	0f 90       	pop	r0
    88e2:	df 91       	pop	r29
    88e4:	cf 91       	pop	r28
    88e6:	08 95       	ret

000088e8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    88e8:	cf 93       	push	r28
    88ea:	df 93       	push	r29
    88ec:	00 d0       	rcall	.+0      	; 0x88ee <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh+0x6>
    88ee:	1f 92       	push	r1
    88f0:	1f 92       	push	r1
    88f2:	cd b7       	in	r28, 0x3d	; 61
    88f4:	de b7       	in	r29, 0x3e	; 62
    88f6:	9b 83       	std	Y+3, r25	; 0x03
    88f8:	8a 83       	std	Y+2, r24	; 0x02
    88fa:	6c 83       	std	Y+4, r22	; 0x04
    88fc:	4d 83       	std	Y+5, r20	; 0x05
    88fe:	8a 81       	ldd	r24, Y+2	; 0x02
    8900:	9b 81       	ldd	r25, Y+3	; 0x03
    8902:	6c 81       	ldd	r22, Y+4	; 0x04
    8904:	00 df       	rcall	.-512    	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8906:	89 83       	std	Y+1, r24	; 0x01
    8908:	8d 81       	ldd	r24, Y+5	; 0x05
    890a:	98 2f       	mov	r25, r24
    890c:	90 95       	com	r25
    890e:	89 81       	ldd	r24, Y+1	; 0x01
    8910:	89 23       	and	r24, r25
    8912:	28 2f       	mov	r18, r24
    8914:	8a 81       	ldd	r24, Y+2	; 0x02
    8916:	9b 81       	ldd	r25, Y+3	; 0x03
    8918:	42 2f       	mov	r20, r18
    891a:	6c 81       	ldd	r22, Y+4	; 0x04
    891c:	69 de       	rcall	.-814    	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    891e:	00 00       	nop
    8920:	0f 90       	pop	r0
    8922:	0f 90       	pop	r0
    8924:	0f 90       	pop	r0
    8926:	0f 90       	pop	r0
    8928:	0f 90       	pop	r0
    892a:	df 91       	pop	r29
    892c:	cf 91       	pop	r28
    892e:	08 95       	ret

00008930 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    8930:	0f 93       	push	r16
    8932:	1f 93       	push	r17
    8934:	cf 93       	push	r28
    8936:	df 93       	push	r29
    8938:	cd b7       	in	r28, 0x3d	; 61
    893a:	de b7       	in	r29, 0x3e	; 62
    893c:	2a 97       	sbiw	r28, 0x0a	; 10
    893e:	0f b6       	in	r0, 0x3f	; 63
    8940:	f8 94       	cli
    8942:	de bf       	out	0x3e, r29	; 62
    8944:	0f be       	out	0x3f, r0	; 63
    8946:	cd bf       	out	0x3d, r28	; 61
    8948:	9d 83       	std	Y+5, r25	; 0x05
    894a:	8c 83       	std	Y+4, r24	; 0x04
    894c:	7f 83       	std	Y+7, r23	; 0x07
    894e:	6e 83       	std	Y+6, r22	; 0x06
    8950:	48 87       	std	Y+8, r20	; 0x08
    8952:	3a 87       	std	Y+10, r19	; 0x0a
    8954:	29 87       	std	Y+9, r18	; 0x09
    8956:	8c 81       	ldd	r24, Y+4	; 0x04
    8958:	9d 81       	ldd	r25, Y+5	; 0x05
    895a:	40 e0       	ldi	r20, 0x00	; 0
    895c:	62 e0       	ldi	r22, 0x02	; 2
    895e:	48 de       	rcall	.-880    	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8960:	8c 81       	ldd	r24, Y+4	; 0x04
    8962:	9d 81       	ldd	r25, Y+5	; 0x05
    8964:	44 e0       	ldi	r20, 0x04	; 4
    8966:	6a e0       	ldi	r22, 0x0A	; 10
    8968:	43 de       	rcall	.-890    	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    896a:	8c 81       	ldd	r24, Y+4	; 0x04
    896c:	9d 81       	ldd	r25, Y+5	; 0x05
    896e:	40 e8       	ldi	r20, 0x80	; 128
    8970:	64 e1       	ldi	r22, 0x14	; 20
    8972:	3e de       	rcall	.-900    	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8974:	2e 81       	ldd	r18, Y+6	; 0x06
    8976:	3f 81       	ldd	r19, Y+7	; 0x07
    8978:	8c 81       	ldd	r24, Y+4	; 0x04
    897a:	9d 81       	ldd	r25, Y+5	; 0x05
    897c:	48 85       	ldd	r20, Y+8	; 0x08
    897e:	62 e1       	ldi	r22, 0x12	; 18
    8980:	71 de       	rcall	.-798    	; 0x8664 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    8982:	8c 81       	ldd	r24, Y+4	; 0x04
    8984:	9d 81       	ldd	r25, Y+5	; 0x05
    8986:	43 e0       	ldi	r20, 0x03	; 3
    8988:	62 e0       	ldi	r22, 0x02	; 2
    898a:	32 de       	rcall	.-924    	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    898c:	88 e8       	ldi	r24, 0x88	; 136
    898e:	93 e1       	ldi	r25, 0x13	; 19
    8990:	9a 83       	std	Y+2, r25	; 0x02
    8992:	89 83       	std	Y+1, r24	; 0x01
    8994:	89 81       	ldd	r24, Y+1	; 0x01
    8996:	9a 81       	ldd	r25, Y+2	; 0x02
    8998:	89 2b       	or	r24, r25
    899a:	69 f1       	breq	.+90     	; 0x89f6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xc6>
    899c:	8c 81       	ldd	r24, Y+4	; 0x04
    899e:	9d 81       	ldd	r25, Y+5	; 0x05
    89a0:	6a e0       	ldi	r22, 0x0A	; 10
    89a2:	b1 de       	rcall	.-670    	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    89a4:	8b 83       	std	Y+3, r24	; 0x03
    89a6:	8b 81       	ldd	r24, Y+3	; 0x03
    89a8:	88 2f       	mov	r24, r24
    89aa:	90 e0       	ldi	r25, 0x00	; 0
    89ac:	84 70       	andi	r24, 0x04	; 4
    89ae:	99 27       	eor	r25, r25
    89b0:	89 2b       	or	r24, r25
    89b2:	d9 f0       	breq	.+54     	; 0x89ea <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xba>
    89b4:	8c 81       	ldd	r24, Y+4	; 0x04
    89b6:	9d 81       	ldd	r25, Y+5	; 0x05
    89b8:	40 e0       	ldi	r20, 0x00	; 0
    89ba:	62 e0       	ldi	r22, 0x02	; 2
    89bc:	19 de       	rcall	.-974    	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    89be:	8c 81       	ldd	r24, Y+4	; 0x04
    89c0:	9d 81       	ldd	r25, Y+5	; 0x05
    89c2:	64 e4       	ldi	r22, 0x44	; 68
    89c4:	a0 de       	rcall	.-704    	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    89c6:	28 2f       	mov	r18, r24
    89c8:	89 85       	ldd	r24, Y+9	; 0x09
    89ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    89cc:	fc 01       	movw	r30, r24
    89ce:	20 83       	st	Z, r18
    89d0:	89 85       	ldd	r24, Y+9	; 0x09
    89d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    89d4:	8c 01       	movw	r16, r24
    89d6:	0f 5f       	subi	r16, 0xFF	; 255
    89d8:	1f 4f       	sbci	r17, 0xFF	; 255
    89da:	8c 81       	ldd	r24, Y+4	; 0x04
    89dc:	9d 81       	ldd	r25, Y+5	; 0x05
    89de:	62 e4       	ldi	r22, 0x42	; 66
    89e0:	92 de       	rcall	.-732    	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    89e2:	f8 01       	movw	r30, r16
    89e4:	80 83       	st	Z, r24
    89e6:	80 e0       	ldi	r24, 0x00	; 0
    89e8:	07 c0       	rjmp	.+14     	; 0x89f8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xc8>
    89ea:	89 81       	ldd	r24, Y+1	; 0x01
    89ec:	9a 81       	ldd	r25, Y+2	; 0x02
    89ee:	01 97       	sbiw	r24, 0x01	; 1
    89f0:	9a 83       	std	Y+2, r25	; 0x02
    89f2:	89 83       	std	Y+1, r24	; 0x01
    89f4:	cf cf       	rjmp	.-98     	; 0x8994 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    89f6:	83 e0       	ldi	r24, 0x03	; 3
    89f8:	2a 96       	adiw	r28, 0x0a	; 10
    89fa:	0f b6       	in	r0, 0x3f	; 63
    89fc:	f8 94       	cli
    89fe:	de bf       	out	0x3e, r29	; 62
    8a00:	0f be       	out	0x3f, r0	; 63
    8a02:	cd bf       	out	0x3d, r28	; 61
    8a04:	df 91       	pop	r29
    8a06:	cf 91       	pop	r28
    8a08:	1f 91       	pop	r17
    8a0a:	0f 91       	pop	r16
    8a0c:	08 95       	ret

00008a0e <_ZN7MFRC5228PCD_InitEv>:
    8a0e:	cf 93       	push	r28
    8a10:	df 93       	push	r29
    8a12:	00 d0       	rcall	.+0      	; 0x8a14 <_ZN7MFRC5228PCD_InitEv+0x6>
    8a14:	cd b7       	in	r28, 0x3d	; 61
    8a16:	de b7       	in	r29, 0x3e	; 62
    8a18:	9b 83       	std	Y+3, r25	; 0x03
    8a1a:	8a 83       	std	Y+2, r24	; 0x02
    8a1c:	19 82       	std	Y+1, r1	; 0x01
    8a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    8a20:	9b 81       	ldd	r25, Y+3	; 0x03
    8a22:	fc 01       	movw	r30, r24
    8a24:	86 85       	ldd	r24, Z+14	; 0x0e
    8a26:	61 e0       	ldi	r22, 0x01	; 1
    8a28:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    8a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    8a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    8a30:	fc 01       	movw	r30, r24
    8a32:	86 85       	ldd	r24, Z+14	; 0x0e
    8a34:	61 e0       	ldi	r22, 0x01	; 1
    8a36:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    8a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    8a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    8a3e:	fc 01       	movw	r30, r24
    8a40:	87 85       	ldd	r24, Z+15	; 0x0f
    8a42:	8f 3f       	cpi	r24, 0xFF	; 255
    8a44:	a1 f1       	breq	.+104    	; 0x8aae <_ZN7MFRC5228PCD_InitEv+0xa0>
    8a46:	8a 81       	ldd	r24, Y+2	; 0x02
    8a48:	9b 81       	ldd	r25, Y+3	; 0x03
    8a4a:	fc 01       	movw	r30, r24
    8a4c:	87 85       	ldd	r24, Z+15	; 0x0f
    8a4e:	60 e0       	ldi	r22, 0x00	; 0
    8a50:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    8a54:	8a 81       	ldd	r24, Y+2	; 0x02
    8a56:	9b 81       	ldd	r25, Y+3	; 0x03
    8a58:	fc 01       	movw	r30, r24
    8a5a:	87 85       	ldd	r24, Z+15	; 0x0f
    8a5c:	0e 94 f6 60 	call	0xc1ec	; 0xc1ec <digitalRead>
    8a60:	21 e0       	ldi	r18, 0x01	; 1
    8a62:	89 2b       	or	r24, r25
    8a64:	09 f0       	breq	.+2      	; 0x8a68 <_ZN7MFRC5228PCD_InitEv+0x5a>
    8a66:	20 e0       	ldi	r18, 0x00	; 0
    8a68:	22 23       	and	r18, r18
    8a6a:	09 f1       	breq	.+66     	; 0x8aae <_ZN7MFRC5228PCD_InitEv+0xa0>
    8a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    8a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    8a70:	fc 01       	movw	r30, r24
    8a72:	87 85       	ldd	r24, Z+15	; 0x0f
    8a74:	61 e0       	ldi	r22, 0x01	; 1
    8a76:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    8a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    8a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    8a7e:	fc 01       	movw	r30, r24
    8a80:	87 85       	ldd	r24, Z+15	; 0x0f
    8a82:	60 e0       	ldi	r22, 0x00	; 0
    8a84:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    8a88:	82 e0       	ldi	r24, 0x02	; 2
    8a8a:	90 e0       	ldi	r25, 0x00	; 0
    8a8c:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <delayMicroseconds>
    8a90:	8a 81       	ldd	r24, Y+2	; 0x02
    8a92:	9b 81       	ldd	r25, Y+3	; 0x03
    8a94:	fc 01       	movw	r30, r24
    8a96:	87 85       	ldd	r24, Z+15	; 0x0f
    8a98:	61 e0       	ldi	r22, 0x01	; 1
    8a9a:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    8a9e:	62 e3       	ldi	r22, 0x32	; 50
    8aa0:	70 e0       	ldi	r23, 0x00	; 0
    8aa2:	80 e0       	ldi	r24, 0x00	; 0
    8aa4:	90 e0       	ldi	r25, 0x00	; 0
    8aa6:	0e 94 a6 5e 	call	0xbd4c	; 0xbd4c <delay>
    8aaa:	81 e0       	ldi	r24, 0x01	; 1
    8aac:	89 83       	std	Y+1, r24	; 0x01
    8aae:	99 81       	ldd	r25, Y+1	; 0x01
    8ab0:	81 e0       	ldi	r24, 0x01	; 1
    8ab2:	89 27       	eor	r24, r25
    8ab4:	88 23       	and	r24, r24
    8ab6:	19 f0       	breq	.+6      	; 0x8abe <_ZN7MFRC5228PCD_InitEv+0xb0>
    8ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    8aba:	9b 81       	ldd	r25, Y+3	; 0x03
    8abc:	37 d0       	rcall	.+110    	; 0x8b2c <_ZN7MFRC5229PCD_ResetEv>
    8abe:	8a 81       	ldd	r24, Y+2	; 0x02
    8ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    8ac2:	40 e0       	ldi	r20, 0x00	; 0
    8ac4:	64 e2       	ldi	r22, 0x24	; 36
    8ac6:	94 dd       	rcall	.-1240   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    8aca:	9b 81       	ldd	r25, Y+3	; 0x03
    8acc:	40 e0       	ldi	r20, 0x00	; 0
    8ace:	66 e2       	ldi	r22, 0x26	; 38
    8ad0:	8f dd       	rcall	.-1250   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    8ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    8ad6:	46 e2       	ldi	r20, 0x26	; 38
    8ad8:	68 e4       	ldi	r22, 0x48	; 72
    8ada:	8a dd       	rcall	.-1260   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8adc:	8a 81       	ldd	r24, Y+2	; 0x02
    8ade:	9b 81       	ldd	r25, Y+3	; 0x03
    8ae0:	40 e8       	ldi	r20, 0x80	; 128
    8ae2:	64 e5       	ldi	r22, 0x54	; 84
    8ae4:	85 dd       	rcall	.-1270   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    8ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    8aea:	49 ea       	ldi	r20, 0xA9	; 169
    8aec:	66 e5       	ldi	r22, 0x56	; 86
    8aee:	80 dd       	rcall	.-1280   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8af0:	8a 81       	ldd	r24, Y+2	; 0x02
    8af2:	9b 81       	ldd	r25, Y+3	; 0x03
    8af4:	43 e0       	ldi	r20, 0x03	; 3
    8af6:	68 e5       	ldi	r22, 0x58	; 88
    8af8:	7b dd       	rcall	.-1290   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8afa:	8a 81       	ldd	r24, Y+2	; 0x02
    8afc:	9b 81       	ldd	r25, Y+3	; 0x03
    8afe:	48 ee       	ldi	r20, 0xE8	; 232
    8b00:	6a e5       	ldi	r22, 0x5A	; 90
    8b02:	76 dd       	rcall	.-1300   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8b04:	8a 81       	ldd	r24, Y+2	; 0x02
    8b06:	9b 81       	ldd	r25, Y+3	; 0x03
    8b08:	40 e4       	ldi	r20, 0x40	; 64
    8b0a:	6a e2       	ldi	r22, 0x2A	; 42
    8b0c:	71 dd       	rcall	.-1310   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    8b10:	9b 81       	ldd	r25, Y+3	; 0x03
    8b12:	4d e3       	ldi	r20, 0x3D	; 61
    8b14:	62 e2       	ldi	r22, 0x22	; 34
    8b16:	6c dd       	rcall	.-1320   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8b18:	8a 81       	ldd	r24, Y+2	; 0x02
    8b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    8b1c:	37 d0       	rcall	.+110    	; 0x8b8c <_ZN7MFRC52213PCD_AntennaOnEv>
    8b1e:	00 00       	nop
    8b20:	0f 90       	pop	r0
    8b22:	0f 90       	pop	r0
    8b24:	0f 90       	pop	r0
    8b26:	df 91       	pop	r29
    8b28:	cf 91       	pop	r28
    8b2a:	08 95       	ret

00008b2c <_ZN7MFRC5229PCD_ResetEv>:
    8b2c:	cf 93       	push	r28
    8b2e:	df 93       	push	r29
    8b30:	00 d0       	rcall	.+0      	; 0x8b32 <_ZN7MFRC5229PCD_ResetEv+0x6>
    8b32:	cd b7       	in	r28, 0x3d	; 61
    8b34:	de b7       	in	r29, 0x3e	; 62
    8b36:	9b 83       	std	Y+3, r25	; 0x03
    8b38:	8a 83       	std	Y+2, r24	; 0x02
    8b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    8b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    8b3e:	4f e0       	ldi	r20, 0x0F	; 15
    8b40:	62 e0       	ldi	r22, 0x02	; 2
    8b42:	56 dd       	rcall	.-1364   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8b44:	19 82       	std	Y+1, r1	; 0x01
    8b46:	62 e3       	ldi	r22, 0x32	; 50
    8b48:	70 e0       	ldi	r23, 0x00	; 0
    8b4a:	80 e0       	ldi	r24, 0x00	; 0
    8b4c:	90 e0       	ldi	r25, 0x00	; 0
    8b4e:	0e 94 a6 5e 	call	0xbd4c	; 0xbd4c <delay>
    8b52:	8a 81       	ldd	r24, Y+2	; 0x02
    8b54:	9b 81       	ldd	r25, Y+3	; 0x03
    8b56:	62 e0       	ldi	r22, 0x02	; 2
    8b58:	d6 dd       	rcall	.-1108   	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8b5a:	88 2f       	mov	r24, r24
    8b5c:	90 e0       	ldi	r25, 0x00	; 0
    8b5e:	80 71       	andi	r24, 0x10	; 16
    8b60:	99 27       	eor	r25, r25
    8b62:	89 2b       	or	r24, r25
    8b64:	41 f0       	breq	.+16     	; 0x8b76 <_ZN7MFRC5229PCD_ResetEv+0x4a>
    8b66:	89 81       	ldd	r24, Y+1	; 0x01
    8b68:	8f 5f       	subi	r24, 0xFF	; 255
    8b6a:	89 83       	std	Y+1, r24	; 0x01
    8b6c:	89 81       	ldd	r24, Y+1	; 0x01
    8b6e:	83 30       	cpi	r24, 0x03	; 3
    8b70:	10 f4       	brcc	.+4      	; 0x8b76 <_ZN7MFRC5229PCD_ResetEv+0x4a>
    8b72:	81 e0       	ldi	r24, 0x01	; 1
    8b74:	01 c0       	rjmp	.+2      	; 0x8b78 <_ZN7MFRC5229PCD_ResetEv+0x4c>
    8b76:	80 e0       	ldi	r24, 0x00	; 0
    8b78:	88 23       	and	r24, r24
    8b7a:	09 f0       	breq	.+2      	; 0x8b7e <_ZN7MFRC5229PCD_ResetEv+0x52>
    8b7c:	e4 cf       	rjmp	.-56     	; 0x8b46 <_ZN7MFRC5229PCD_ResetEv+0x1a>
    8b7e:	00 00       	nop
    8b80:	0f 90       	pop	r0
    8b82:	0f 90       	pop	r0
    8b84:	0f 90       	pop	r0
    8b86:	df 91       	pop	r29
    8b88:	cf 91       	pop	r28
    8b8a:	08 95       	ret

00008b8c <_ZN7MFRC52213PCD_AntennaOnEv>:
    8b8c:	cf 93       	push	r28
    8b8e:	df 93       	push	r29
    8b90:	00 d0       	rcall	.+0      	; 0x8b92 <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    8b92:	cd b7       	in	r28, 0x3d	; 61
    8b94:	de b7       	in	r29, 0x3e	; 62
    8b96:	9b 83       	std	Y+3, r25	; 0x03
    8b98:	8a 83       	std	Y+2, r24	; 0x02
    8b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    8b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    8b9e:	68 e2       	ldi	r22, 0x28	; 40
    8ba0:	b2 dd       	rcall	.-1180   	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8ba2:	89 83       	std	Y+1, r24	; 0x01
    8ba4:	89 81       	ldd	r24, Y+1	; 0x01
    8ba6:	88 2f       	mov	r24, r24
    8ba8:	90 e0       	ldi	r25, 0x00	; 0
    8baa:	83 70       	andi	r24, 0x03	; 3
    8bac:	99 27       	eor	r25, r25
    8bae:	03 97       	sbiw	r24, 0x03	; 3
    8bb0:	41 f0       	breq	.+16     	; 0x8bc2 <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    8bb2:	89 81       	ldd	r24, Y+1	; 0x01
    8bb4:	28 2f       	mov	r18, r24
    8bb6:	23 60       	ori	r18, 0x03	; 3
    8bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    8bba:	9b 81       	ldd	r25, Y+3	; 0x03
    8bbc:	42 2f       	mov	r20, r18
    8bbe:	68 e2       	ldi	r22, 0x28	; 40
    8bc0:	17 dd       	rcall	.-1490   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8bc2:	00 00       	nop
    8bc4:	0f 90       	pop	r0
    8bc6:	0f 90       	pop	r0
    8bc8:	0f 90       	pop	r0
    8bca:	df 91       	pop	r29
    8bcc:	cf 91       	pop	r28
    8bce:	08 95       	ret

00008bd0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    8bd0:	8f 92       	push	r8
    8bd2:	af 92       	push	r10
    8bd4:	bf 92       	push	r11
    8bd6:	cf 92       	push	r12
    8bd8:	df 92       	push	r13
    8bda:	ef 92       	push	r14
    8bdc:	ff 92       	push	r15
    8bde:	0f 93       	push	r16
    8be0:	1f 93       	push	r17
    8be2:	cf 93       	push	r28
    8be4:	df 93       	push	r29
    8be6:	cd b7       	in	r28, 0x3d	; 61
    8be8:	de b7       	in	r29, 0x3e	; 62
    8bea:	2e 97       	sbiw	r28, 0x0e	; 14
    8bec:	0f b6       	in	r0, 0x3f	; 63
    8bee:	f8 94       	cli
    8bf0:	de bf       	out	0x3e, r29	; 62
    8bf2:	0f be       	out	0x3f, r0	; 63
    8bf4:	cd bf       	out	0x3d, r28	; 61
    8bf6:	9b 83       	std	Y+3, r25	; 0x03
    8bf8:	8a 83       	std	Y+2, r24	; 0x02
    8bfa:	7d 83       	std	Y+5, r23	; 0x05
    8bfc:	6c 83       	std	Y+4, r22	; 0x04
    8bfe:	4e 83       	std	Y+6, r20	; 0x06
    8c00:	38 87       	std	Y+8, r19	; 0x08
    8c02:	2f 83       	std	Y+7, r18	; 0x07
    8c04:	1a 87       	std	Y+10, r17	; 0x0a
    8c06:	09 87       	std	Y+9, r16	; 0x09
    8c08:	fc 86       	std	Y+12, r15	; 0x0c
    8c0a:	eb 86       	std	Y+11, r14	; 0x0b
    8c0c:	cd 86       	std	Y+13, r12	; 0x0d
    8c0e:	ae 86       	std	Y+14, r10	; 0x0e
    8c10:	80 e3       	ldi	r24, 0x30	; 48
    8c12:	89 83       	std	Y+1, r24	; 0x01
    8c14:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c16:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c18:	69 85       	ldd	r22, Y+9	; 0x09
    8c1a:	7a 85       	ldd	r23, Y+10	; 0x0a
    8c1c:	4f 81       	ldd	r20, Y+7	; 0x07
    8c1e:	58 85       	ldd	r21, Y+8	; 0x08
    8c20:	2c 81       	ldd	r18, Y+4	; 0x04
    8c22:	3d 81       	ldd	r19, Y+5	; 0x05
    8c24:	8a 81       	ldd	r24, Y+2	; 0x02
    8c26:	9b 81       	ldd	r25, Y+3	; 0x03
    8c28:	ae 85       	ldd	r26, Y+14	; 0x0e
    8c2a:	af 93       	push	r26
    8c2c:	8d 84       	ldd	r8, Y+13	; 0x0d
    8c2e:	5f 01       	movw	r10, r30
    8c30:	6b 01       	movw	r12, r22
    8c32:	7a 01       	movw	r14, r20
    8c34:	0e 81       	ldd	r16, Y+6	; 0x06
    8c36:	49 81       	ldd	r20, Y+1	; 0x01
    8c38:	6c e0       	ldi	r22, 0x0C	; 12
    8c3a:	13 d0       	rcall	.+38     	; 0x8c62 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    8c3c:	0f 90       	pop	r0
    8c3e:	2e 96       	adiw	r28, 0x0e	; 14
    8c40:	0f b6       	in	r0, 0x3f	; 63
    8c42:	f8 94       	cli
    8c44:	de bf       	out	0x3e, r29	; 62
    8c46:	0f be       	out	0x3f, r0	; 63
    8c48:	cd bf       	out	0x3d, r28	; 61
    8c4a:	df 91       	pop	r29
    8c4c:	cf 91       	pop	r28
    8c4e:	1f 91       	pop	r17
    8c50:	0f 91       	pop	r16
    8c52:	ff 90       	pop	r15
    8c54:	ef 90       	pop	r14
    8c56:	df 90       	pop	r13
    8c58:	cf 90       	pop	r12
    8c5a:	bf 90       	pop	r11
    8c5c:	af 90       	pop	r10
    8c5e:	8f 90       	pop	r8
    8c60:	08 95       	ret

00008c62 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    8c62:	8f 92       	push	r8
    8c64:	af 92       	push	r10
    8c66:	bf 92       	push	r11
    8c68:	cf 92       	push	r12
    8c6a:	df 92       	push	r13
    8c6c:	ef 92       	push	r14
    8c6e:	ff 92       	push	r15
    8c70:	0f 93       	push	r16
    8c72:	cf 93       	push	r28
    8c74:	df 93       	push	r29
    8c76:	cd b7       	in	r28, 0x3d	; 61
    8c78:	de b7       	in	r29, 0x3e	; 62
    8c7a:	69 97       	sbiw	r28, 0x19	; 25
    8c7c:	0f b6       	in	r0, 0x3f	; 63
    8c7e:	f8 94       	cli
    8c80:	de bf       	out	0x3e, r29	; 62
    8c82:	0f be       	out	0x3f, r0	; 63
    8c84:	cd bf       	out	0x3d, r28	; 61
    8c86:	9d 87       	std	Y+13, r25	; 0x0d
    8c88:	8c 87       	std	Y+12, r24	; 0x0c
    8c8a:	6e 87       	std	Y+14, r22	; 0x0e
    8c8c:	4f 87       	std	Y+15, r20	; 0x0f
    8c8e:	39 8b       	std	Y+17, r19	; 0x11
    8c90:	28 8b       	std	Y+16, r18	; 0x10
    8c92:	0a 8b       	std	Y+18, r16	; 0x12
    8c94:	fc 8a       	std	Y+20, r15	; 0x14
    8c96:	eb 8a       	std	Y+19, r14	; 0x13
    8c98:	de 8a       	std	Y+22, r13	; 0x16
    8c9a:	cd 8a       	std	Y+21, r12	; 0x15
    8c9c:	b8 8e       	std	Y+24, r11	; 0x18
    8c9e:	af 8a       	std	Y+23, r10	; 0x17
    8ca0:	89 8e       	std	Y+25, r8	; 0x19
    8ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    8ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    8ca6:	89 2b       	or	r24, r25
    8ca8:	29 f0       	breq	.+10     	; 0x8cb4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    8caa:	8f 89       	ldd	r24, Y+23	; 0x17
    8cac:	98 8d       	ldd	r25, Y+24	; 0x18
    8cae:	fc 01       	movw	r30, r24
    8cb0:	80 81       	ld	r24, Z
    8cb2:	01 c0       	rjmp	.+2      	; 0x8cb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    8cb4:	80 e0       	ldi	r24, 0x00	; 0
    8cb6:	8c 83       	std	Y+4, r24	; 0x04
    8cb8:	89 8d       	ldd	r24, Y+25	; 0x19
    8cba:	98 2f       	mov	r25, r24
    8cbc:	92 95       	swap	r25
    8cbe:	90 7f       	andi	r25, 0xF0	; 240
    8cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    8cc2:	89 0f       	add	r24, r25
    8cc4:	8d 83       	std	Y+5, r24	; 0x05
    8cc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    8cc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    8cca:	40 e0       	ldi	r20, 0x00	; 0
    8ccc:	62 e0       	ldi	r22, 0x02	; 2
    8cce:	90 dc       	rcall	.-1760   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8cd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    8cd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    8cd4:	4f e7       	ldi	r20, 0x7F	; 127
    8cd6:	68 e0       	ldi	r22, 0x08	; 8
    8cd8:	8b dc       	rcall	.-1770   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8cda:	8c 85       	ldd	r24, Y+12	; 0x0c
    8cdc:	9d 85       	ldd	r25, Y+13	; 0x0d
    8cde:	40 e8       	ldi	r20, 0x80	; 128
    8ce0:	64 e1       	ldi	r22, 0x14	; 20
    8ce2:	86 dc       	rcall	.-1780   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8ce4:	28 89       	ldd	r18, Y+16	; 0x10
    8ce6:	39 89       	ldd	r19, Y+17	; 0x11
    8ce8:	8c 85       	ldd	r24, Y+12	; 0x0c
    8cea:	9d 85       	ldd	r25, Y+13	; 0x0d
    8cec:	4a 89       	ldd	r20, Y+18	; 0x12
    8cee:	62 e1       	ldi	r22, 0x12	; 18
    8cf0:	b9 dc       	rcall	.-1678   	; 0x8664 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    8cf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    8cf4:	9d 85       	ldd	r25, Y+13	; 0x0d
    8cf6:	4d 81       	ldd	r20, Y+5	; 0x05
    8cf8:	6a e1       	ldi	r22, 0x1A	; 26
    8cfa:	7a dc       	rcall	.-1804   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8cfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    8cfe:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d00:	4e 85       	ldd	r20, Y+14	; 0x0e
    8d02:	62 e0       	ldi	r22, 0x02	; 2
    8d04:	75 dc       	rcall	.-1814   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8d06:	8e 85       	ldd	r24, Y+14	; 0x0e
    8d08:	8c 30       	cpi	r24, 0x0C	; 12
    8d0a:	29 f4       	brne	.+10     	; 0x8d16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    8d0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d10:	40 e8       	ldi	r20, 0x80	; 128
    8d12:	6a e1       	ldi	r22, 0x1A	; 26
    8d14:	c7 dd       	rcall	.-1138   	; 0x88a4 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    8d16:	80 ed       	ldi	r24, 0xD0	; 208
    8d18:	97 e0       	ldi	r25, 0x07	; 7
    8d1a:	9a 83       	std	Y+2, r25	; 0x02
    8d1c:	89 83       	std	Y+1, r24	; 0x01
    8d1e:	89 81       	ldd	r24, Y+1	; 0x01
    8d20:	9a 81       	ldd	r25, Y+2	; 0x02
    8d22:	89 2b       	or	r24, r25
    8d24:	d1 f0       	breq	.+52     	; 0x8d5a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    8d26:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d28:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d2a:	68 e0       	ldi	r22, 0x08	; 8
    8d2c:	ec dc       	rcall	.-1576   	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8d2e:	8e 83       	std	Y+6, r24	; 0x06
    8d30:	9e 81       	ldd	r25, Y+6	; 0x06
    8d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    8d34:	89 23       	and	r24, r25
    8d36:	88 23       	and	r24, r24
    8d38:	79 f4       	brne	.+30     	; 0x8d58 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf6>
    8d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    8d3c:	88 2f       	mov	r24, r24
    8d3e:	90 e0       	ldi	r25, 0x00	; 0
    8d40:	81 70       	andi	r24, 0x01	; 1
    8d42:	99 27       	eor	r25, r25
    8d44:	89 2b       	or	r24, r25
    8d46:	11 f0       	breq	.+4      	; 0x8d4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xea>
    8d48:	83 e0       	ldi	r24, 0x03	; 3
    8d4a:	b2 c0       	rjmp	.+356    	; 0x8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8d4c:	89 81       	ldd	r24, Y+1	; 0x01
    8d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    8d50:	01 97       	sbiw	r24, 0x01	; 1
    8d52:	9a 83       	std	Y+2, r25	; 0x02
    8d54:	89 83       	std	Y+1, r24	; 0x01
    8d56:	e3 cf       	rjmp	.-58     	; 0x8d1e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    8d58:	00 00       	nop
    8d5a:	89 81       	ldd	r24, Y+1	; 0x01
    8d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    8d5e:	89 2b       	or	r24, r25
    8d60:	11 f4       	brne	.+4      	; 0x8d66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x104>
    8d62:	83 e0       	ldi	r24, 0x03	; 3
    8d64:	a5 c0       	rjmp	.+330    	; 0x8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8d66:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d68:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d6a:	6c e0       	ldi	r22, 0x0C	; 12
    8d6c:	cc dc       	rcall	.-1640   	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8d6e:	8f 83       	std	Y+7, r24	; 0x07
    8d70:	8f 81       	ldd	r24, Y+7	; 0x07
    8d72:	88 2f       	mov	r24, r24
    8d74:	90 e0       	ldi	r25, 0x00	; 0
    8d76:	83 71       	andi	r24, 0x13	; 19
    8d78:	99 27       	eor	r25, r25
    8d7a:	89 2b       	or	r24, r25
    8d7c:	11 f0       	breq	.+4      	; 0x8d82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x120>
    8d7e:	81 e0       	ldi	r24, 0x01	; 1
    8d80:	97 c0       	rjmp	.+302    	; 0x8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8d82:	1b 82       	std	Y+3, r1	; 0x03
    8d84:	8b 89       	ldd	r24, Y+19	; 0x13
    8d86:	9c 89       	ldd	r25, Y+20	; 0x14
    8d88:	89 2b       	or	r24, r25
    8d8a:	71 f1       	breq	.+92     	; 0x8de8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x186>
    8d8c:	8d 89       	ldd	r24, Y+21	; 0x15
    8d8e:	9e 89       	ldd	r25, Y+22	; 0x16
    8d90:	89 2b       	or	r24, r25
    8d92:	51 f1       	breq	.+84     	; 0x8de8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x186>
    8d94:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d96:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d98:	64 e1       	ldi	r22, 0x14	; 20
    8d9a:	b5 dc       	rcall	.-1686   	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8d9c:	88 87       	std	Y+8, r24	; 0x08
    8d9e:	8d 89       	ldd	r24, Y+21	; 0x15
    8da0:	9e 89       	ldd	r25, Y+22	; 0x16
    8da2:	fc 01       	movw	r30, r24
    8da4:	90 81       	ld	r25, Z
    8da6:	88 85       	ldd	r24, Y+8	; 0x08
    8da8:	98 17       	cp	r25, r24
    8daa:	10 f4       	brcc	.+4      	; 0x8db0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
    8dac:	84 e0       	ldi	r24, 0x04	; 4
    8dae:	80 c0       	rjmp	.+256    	; 0x8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8db0:	8d 89       	ldd	r24, Y+21	; 0x15
    8db2:	9e 89       	ldd	r25, Y+22	; 0x16
    8db4:	28 85       	ldd	r18, Y+8	; 0x08
    8db6:	fc 01       	movw	r30, r24
    8db8:	20 83       	st	Z, r18
    8dba:	2b 89       	ldd	r18, Y+19	; 0x13
    8dbc:	3c 89       	ldd	r19, Y+20	; 0x14
    8dbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    8dc0:	9d 85       	ldd	r25, Y+13	; 0x0d
    8dc2:	09 8d       	ldd	r16, Y+25	; 0x19
    8dc4:	48 85       	ldd	r20, Y+8	; 0x08
    8dc6:	62 e1       	ldi	r22, 0x12	; 18
    8dc8:	d9 dc       	rcall	.-1614   	; 0x877c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    8dca:	8c 85       	ldd	r24, Y+12	; 0x0c
    8dcc:	9d 85       	ldd	r25, Y+13	; 0x0d
    8dce:	68 e1       	ldi	r22, 0x18	; 24
    8dd0:	9a dc       	rcall	.-1740   	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8dd2:	87 70       	andi	r24, 0x07	; 7
    8dd4:	8b 83       	std	Y+3, r24	; 0x03
    8dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    8dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    8dda:	89 2b       	or	r24, r25
    8ddc:	29 f0       	breq	.+10     	; 0x8de8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x186>
    8dde:	8f 89       	ldd	r24, Y+23	; 0x17
    8de0:	98 8d       	ldd	r25, Y+24	; 0x18
    8de2:	2b 81       	ldd	r18, Y+3	; 0x03
    8de4:	fc 01       	movw	r30, r24
    8de6:	20 83       	st	Z, r18
    8de8:	8f 81       	ldd	r24, Y+7	; 0x07
    8dea:	88 2f       	mov	r24, r24
    8dec:	90 e0       	ldi	r25, 0x00	; 0
    8dee:	88 70       	andi	r24, 0x08	; 8
    8df0:	99 27       	eor	r25, r25
    8df2:	89 2b       	or	r24, r25
    8df4:	11 f0       	breq	.+4      	; 0x8dfa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x198>
    8df6:	82 e0       	ldi	r24, 0x02	; 2
    8df8:	5b c0       	rjmp	.+182    	; 0x8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    8dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    8dfe:	89 2b       	or	r24, r25
    8e00:	09 f4       	brne	.+2      	; 0x8e04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a2>
    8e02:	55 c0       	rjmp	.+170    	; 0x8eae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8e04:	8d 89       	ldd	r24, Y+21	; 0x15
    8e06:	9e 89       	ldd	r25, Y+22	; 0x16
    8e08:	89 2b       	or	r24, r25
    8e0a:	09 f4       	brne	.+2      	; 0x8e0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ac>
    8e0c:	50 c0       	rjmp	.+160    	; 0x8eae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8e0e:	8f a1       	ldd	r24, Y+39	; 0x27
    8e10:	88 23       	and	r24, r24
    8e12:	09 f4       	brne	.+2      	; 0x8e16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b4>
    8e14:	4c c0       	rjmp	.+152    	; 0x8eae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8e16:	8d 89       	ldd	r24, Y+21	; 0x15
    8e18:	9e 89       	ldd	r25, Y+22	; 0x16
    8e1a:	fc 01       	movw	r30, r24
    8e1c:	80 81       	ld	r24, Z
    8e1e:	81 30       	cpi	r24, 0x01	; 1
    8e20:	29 f4       	brne	.+10     	; 0x8e2c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ca>
    8e22:	8b 81       	ldd	r24, Y+3	; 0x03
    8e24:	84 30       	cpi	r24, 0x04	; 4
    8e26:	11 f4       	brne	.+4      	; 0x8e2c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ca>
    8e28:	8f ef       	ldi	r24, 0xFF	; 255
    8e2a:	42 c0       	rjmp	.+132    	; 0x8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e2c:	8d 89       	ldd	r24, Y+21	; 0x15
    8e2e:	9e 89       	ldd	r25, Y+22	; 0x16
    8e30:	fc 01       	movw	r30, r24
    8e32:	80 81       	ld	r24, Z
    8e34:	82 30       	cpi	r24, 0x02	; 2
    8e36:	18 f0       	brcs	.+6      	; 0x8e3e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    8e38:	8b 81       	ldd	r24, Y+3	; 0x03
    8e3a:	88 23       	and	r24, r24
    8e3c:	11 f0       	breq	.+4      	; 0x8e42 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1e0>
    8e3e:	87 e0       	ldi	r24, 0x07	; 7
    8e40:	37 c0       	rjmp	.+110    	; 0x8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e42:	8d 89       	ldd	r24, Y+21	; 0x15
    8e44:	9e 89       	ldd	r25, Y+22	; 0x16
    8e46:	fc 01       	movw	r30, r24
    8e48:	80 81       	ld	r24, Z
    8e4a:	4e ef       	ldi	r20, 0xFE	; 254
    8e4c:	48 0f       	add	r20, r24
    8e4e:	9e 01       	movw	r18, r28
    8e50:	26 5f       	subi	r18, 0xF6	; 246
    8e52:	3f 4f       	sbci	r19, 0xFF	; 255
    8e54:	6b 89       	ldd	r22, Y+19	; 0x13
    8e56:	7c 89       	ldd	r23, Y+20	; 0x14
    8e58:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e5c:	69 dd       	rcall	.-1326   	; 0x8930 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    8e5e:	89 87       	std	Y+9, r24	; 0x09
    8e60:	89 85       	ldd	r24, Y+9	; 0x09
    8e62:	88 23       	and	r24, r24
    8e64:	11 f0       	breq	.+4      	; 0x8e6a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x208>
    8e66:	89 85       	ldd	r24, Y+9	; 0x09
    8e68:	23 c0       	rjmp	.+70     	; 0x8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e6a:	8d 89       	ldd	r24, Y+21	; 0x15
    8e6c:	9e 89       	ldd	r25, Y+22	; 0x16
    8e6e:	fc 01       	movw	r30, r24
    8e70:	80 81       	ld	r24, Z
    8e72:	88 2f       	mov	r24, r24
    8e74:	90 e0       	ldi	r25, 0x00	; 0
    8e76:	02 97       	sbiw	r24, 0x02	; 2
    8e78:	2b 89       	ldd	r18, Y+19	; 0x13
    8e7a:	3c 89       	ldd	r19, Y+20	; 0x14
    8e7c:	82 0f       	add	r24, r18
    8e7e:	93 1f       	adc	r25, r19
    8e80:	fc 01       	movw	r30, r24
    8e82:	90 81       	ld	r25, Z
    8e84:	8a 85       	ldd	r24, Y+10	; 0x0a
    8e86:	98 17       	cp	r25, r24
    8e88:	81 f4       	brne	.+32     	; 0x8eaa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    8e8a:	8d 89       	ldd	r24, Y+21	; 0x15
    8e8c:	9e 89       	ldd	r25, Y+22	; 0x16
    8e8e:	fc 01       	movw	r30, r24
    8e90:	80 81       	ld	r24, Z
    8e92:	88 2f       	mov	r24, r24
    8e94:	90 e0       	ldi	r25, 0x00	; 0
    8e96:	01 97       	sbiw	r24, 0x01	; 1
    8e98:	2b 89       	ldd	r18, Y+19	; 0x13
    8e9a:	3c 89       	ldd	r19, Y+20	; 0x14
    8e9c:	82 0f       	add	r24, r18
    8e9e:	93 1f       	adc	r25, r19
    8ea0:	fc 01       	movw	r30, r24
    8ea2:	90 81       	ld	r25, Z
    8ea4:	8b 85       	ldd	r24, Y+11	; 0x0b
    8ea6:	98 17       	cp	r25, r24
    8ea8:	11 f0       	breq	.+4      	; 0x8eae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8eaa:	87 e0       	ldi	r24, 0x07	; 7
    8eac:	01 c0       	rjmp	.+2      	; 0x8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8eae:	80 e0       	ldi	r24, 0x00	; 0
    8eb0:	69 96       	adiw	r28, 0x19	; 25
    8eb2:	0f b6       	in	r0, 0x3f	; 63
    8eb4:	f8 94       	cli
    8eb6:	de bf       	out	0x3e, r29	; 62
    8eb8:	0f be       	out	0x3f, r0	; 63
    8eba:	cd bf       	out	0x3d, r28	; 61
    8ebc:	df 91       	pop	r29
    8ebe:	cf 91       	pop	r28
    8ec0:	0f 91       	pop	r16
    8ec2:	ff 90       	pop	r15
    8ec4:	ef 90       	pop	r14
    8ec6:	df 90       	pop	r13
    8ec8:	cf 90       	pop	r12
    8eca:	bf 90       	pop	r11
    8ecc:	af 90       	pop	r10
    8ece:	8f 90       	pop	r8
    8ed0:	08 95       	ret

00008ed2 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    8ed2:	cf 93       	push	r28
    8ed4:	df 93       	push	r29
    8ed6:	00 d0       	rcall	.+0      	; 0x8ed8 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    8ed8:	00 d0       	rcall	.+0      	; 0x8eda <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    8eda:	cd b7       	in	r28, 0x3d	; 61
    8edc:	de b7       	in	r29, 0x3e	; 62
    8ede:	9a 83       	std	Y+2, r25	; 0x02
    8ee0:	89 83       	std	Y+1, r24	; 0x01
    8ee2:	7c 83       	std	Y+4, r23	; 0x04
    8ee4:	6b 83       	std	Y+3, r22	; 0x03
    8ee6:	5e 83       	std	Y+6, r21	; 0x06
    8ee8:	4d 83       	std	Y+5, r20	; 0x05
    8eea:	2d 81       	ldd	r18, Y+5	; 0x05
    8eec:	3e 81       	ldd	r19, Y+6	; 0x06
    8eee:	4b 81       	ldd	r20, Y+3	; 0x03
    8ef0:	5c 81       	ldd	r21, Y+4	; 0x04
    8ef2:	89 81       	ldd	r24, Y+1	; 0x01
    8ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    8ef6:	66 e2       	ldi	r22, 0x26	; 38
    8ef8:	09 d0       	rcall	.+18     	; 0x8f0c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    8efa:	26 96       	adiw	r28, 0x06	; 6
    8efc:	0f b6       	in	r0, 0x3f	; 63
    8efe:	f8 94       	cli
    8f00:	de bf       	out	0x3e, r29	; 62
    8f02:	0f be       	out	0x3f, r0	; 63
    8f04:	cd bf       	out	0x3d, r28	; 61
    8f06:	df 91       	pop	r29
    8f08:	cf 91       	pop	r28
    8f0a:	08 95       	ret

00008f0c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    8f0c:	af 92       	push	r10
    8f0e:	cf 92       	push	r12
    8f10:	ef 92       	push	r14
    8f12:	ff 92       	push	r15
    8f14:	0f 93       	push	r16
    8f16:	1f 93       	push	r17
    8f18:	cf 93       	push	r28
    8f1a:	df 93       	push	r29
    8f1c:	cd b7       	in	r28, 0x3d	; 61
    8f1e:	de b7       	in	r29, 0x3e	; 62
    8f20:	29 97       	sbiw	r28, 0x09	; 9
    8f22:	0f b6       	in	r0, 0x3f	; 63
    8f24:	f8 94       	cli
    8f26:	de bf       	out	0x3e, r29	; 62
    8f28:	0f be       	out	0x3f, r0	; 63
    8f2a:	cd bf       	out	0x3d, r28	; 61
    8f2c:	9c 83       	std	Y+4, r25	; 0x04
    8f2e:	8b 83       	std	Y+3, r24	; 0x03
    8f30:	6d 83       	std	Y+5, r22	; 0x05
    8f32:	5f 83       	std	Y+7, r21	; 0x07
    8f34:	4e 83       	std	Y+6, r20	; 0x06
    8f36:	39 87       	std	Y+9, r19	; 0x09
    8f38:	28 87       	std	Y+8, r18	; 0x08
    8f3a:	8e 81       	ldd	r24, Y+6	; 0x06
    8f3c:	9f 81       	ldd	r25, Y+7	; 0x07
    8f3e:	89 2b       	or	r24, r25
    8f40:	31 f0       	breq	.+12     	; 0x8f4e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    8f42:	88 85       	ldd	r24, Y+8	; 0x08
    8f44:	99 85       	ldd	r25, Y+9	; 0x09
    8f46:	fc 01       	movw	r30, r24
    8f48:	80 81       	ld	r24, Z
    8f4a:	82 30       	cpi	r24, 0x02	; 2
    8f4c:	10 f4       	brcc	.+4      	; 0x8f52 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    8f4e:	84 e0       	ldi	r24, 0x04	; 4
    8f50:	2a c0       	rjmp	.+84     	; 0x8fa6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    8f52:	8b 81       	ldd	r24, Y+3	; 0x03
    8f54:	9c 81       	ldd	r25, Y+4	; 0x04
    8f56:	40 e8       	ldi	r20, 0x80	; 128
    8f58:	6c e1       	ldi	r22, 0x1C	; 28
    8f5a:	c6 dc       	rcall	.-1652   	; 0x88e8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    8f5c:	87 e0       	ldi	r24, 0x07	; 7
    8f5e:	8a 83       	std	Y+2, r24	; 0x02
    8f60:	fe 01       	movw	r30, r28
    8f62:	32 96       	adiw	r30, 0x02	; 2
    8f64:	48 85       	ldd	r20, Y+8	; 0x08
    8f66:	59 85       	ldd	r21, Y+9	; 0x09
    8f68:	2e 81       	ldd	r18, Y+6	; 0x06
    8f6a:	3f 81       	ldd	r19, Y+7	; 0x07
    8f6c:	be 01       	movw	r22, r28
    8f6e:	6b 5f       	subi	r22, 0xFB	; 251
    8f70:	7f 4f       	sbci	r23, 0xFF	; 255
    8f72:	8b 81       	ldd	r24, Y+3	; 0x03
    8f74:	9c 81       	ldd	r25, Y+4	; 0x04
    8f76:	a1 2c       	mov	r10, r1
    8f78:	c1 2c       	mov	r12, r1
    8f7a:	7f 01       	movw	r14, r30
    8f7c:	8a 01       	movw	r16, r20
    8f7e:	41 e0       	ldi	r20, 0x01	; 1
    8f80:	27 de       	rcall	.-946    	; 0x8bd0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    8f82:	89 83       	std	Y+1, r24	; 0x01
    8f84:	89 81       	ldd	r24, Y+1	; 0x01
    8f86:	88 23       	and	r24, r24
    8f88:	11 f0       	breq	.+4      	; 0x8f8e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    8f8a:	89 81       	ldd	r24, Y+1	; 0x01
    8f8c:	0c c0       	rjmp	.+24     	; 0x8fa6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    8f8e:	88 85       	ldd	r24, Y+8	; 0x08
    8f90:	99 85       	ldd	r25, Y+9	; 0x09
    8f92:	fc 01       	movw	r30, r24
    8f94:	80 81       	ld	r24, Z
    8f96:	82 30       	cpi	r24, 0x02	; 2
    8f98:	19 f4       	brne	.+6      	; 0x8fa0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    8f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    8f9c:	88 23       	and	r24, r24
    8f9e:	11 f0       	breq	.+4      	; 0x8fa4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    8fa0:	81 e0       	ldi	r24, 0x01	; 1
    8fa2:	01 c0       	rjmp	.+2      	; 0x8fa6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    8fa4:	80 e0       	ldi	r24, 0x00	; 0
    8fa6:	29 96       	adiw	r28, 0x09	; 9
    8fa8:	0f b6       	in	r0, 0x3f	; 63
    8faa:	f8 94       	cli
    8fac:	de bf       	out	0x3e, r29	; 62
    8fae:	0f be       	out	0x3f, r0	; 63
    8fb0:	cd bf       	out	0x3d, r28	; 61
    8fb2:	df 91       	pop	r29
    8fb4:	cf 91       	pop	r28
    8fb6:	1f 91       	pop	r17
    8fb8:	0f 91       	pop	r16
    8fba:	ff 90       	pop	r15
    8fbc:	ef 90       	pop	r14
    8fbe:	cf 90       	pop	r12
    8fc0:	af 90       	pop	r10
    8fc2:	08 95       	ret

00008fc4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    8fc4:	af 92       	push	r10
    8fc6:	cf 92       	push	r12
    8fc8:	ef 92       	push	r14
    8fca:	ff 92       	push	r15
    8fcc:	0f 93       	push	r16
    8fce:	1f 93       	push	r17
    8fd0:	cf 93       	push	r28
    8fd2:	df 93       	push	r29
    8fd4:	cd b7       	in	r28, 0x3d	; 61
    8fd6:	de b7       	in	r29, 0x3e	; 62
    8fd8:	a2 97       	sbiw	r28, 0x22	; 34
    8fda:	0f b6       	in	r0, 0x3f	; 63
    8fdc:	f8 94       	cli
    8fde:	de bf       	out	0x3e, r29	; 62
    8fe0:	0f be       	out	0x3f, r0	; 63
    8fe2:	cd bf       	out	0x3d, r28	; 61
    8fe4:	9f 8f       	std	Y+31, r25	; 0x1f
    8fe6:	8e 8f       	std	Y+30, r24	; 0x1e
    8fe8:	79 a3       	std	Y+33, r23	; 0x21
    8fea:	68 a3       	std	Y+32, r22	; 0x20
    8fec:	4a a3       	std	Y+34, r20	; 0x22
    8fee:	81 e0       	ldi	r24, 0x01	; 1
    8ff0:	8c 83       	std	Y+4, r24	; 0x04
    8ff2:	8a a1       	ldd	r24, Y+34	; 0x22
    8ff4:	81 35       	cpi	r24, 0x51	; 81
    8ff6:	10 f0       	brcs	.+4      	; 0x8ffc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    8ff8:	86 e0       	ldi	r24, 0x06	; 6
    8ffa:	31 c2       	rjmp	.+1122   	; 0x945e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    8ffc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8ffe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9000:	40 e8       	ldi	r20, 0x80	; 128
    9002:	6c e1       	ldi	r22, 0x1C	; 28
    9004:	71 dc       	rcall	.-1822   	; 0x88e8 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    9006:	19 82       	std	Y+1, r1	; 0x01
    9008:	89 81       	ldd	r24, Y+1	; 0x01
    900a:	88 23       	and	r24, r24
    900c:	09 f0       	breq	.+2      	; 0x9010 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    900e:	1c c2       	rjmp	.+1080   	; 0x9448 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x484>
    9010:	8c 81       	ldd	r24, Y+4	; 0x04
    9012:	88 2f       	mov	r24, r24
    9014:	90 e0       	ldi	r25, 0x00	; 0
    9016:	82 30       	cpi	r24, 0x02	; 2
    9018:	91 05       	cpc	r25, r1
    901a:	b1 f0       	breq	.+44     	; 0x9048 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    901c:	83 30       	cpi	r24, 0x03	; 3
    901e:	91 05       	cpc	r25, r1
    9020:	29 f1       	breq	.+74     	; 0x906c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    9022:	01 97       	sbiw	r24, 0x01	; 1
    9024:	49 f5       	brne	.+82     	; 0x9078 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    9026:	83 e9       	ldi	r24, 0x93	; 147
    9028:	8b 8b       	std	Y+19, r24	; 0x13
    902a:	1f 82       	std	Y+7, r1	; 0x07
    902c:	8a a1       	ldd	r24, Y+34	; 0x22
    902e:	88 23       	and	r24, r24
    9030:	41 f0       	breq	.+16     	; 0x9042 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    9032:	88 a1       	ldd	r24, Y+32	; 0x20
    9034:	99 a1       	ldd	r25, Y+33	; 0x21
    9036:	fc 01       	movw	r30, r24
    9038:	80 81       	ld	r24, Z
    903a:	85 30       	cpi	r24, 0x05	; 5
    903c:	10 f0       	brcs	.+4      	; 0x9042 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    903e:	81 e0       	ldi	r24, 0x01	; 1
    9040:	01 c0       	rjmp	.+2      	; 0x9044 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    9042:	80 e0       	ldi	r24, 0x00	; 0
    9044:	8b 83       	std	Y+3, r24	; 0x03
    9046:	1a c0       	rjmp	.+52     	; 0x907c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    9048:	85 e9       	ldi	r24, 0x95	; 149
    904a:	8b 8b       	std	Y+19, r24	; 0x13
    904c:	83 e0       	ldi	r24, 0x03	; 3
    904e:	8f 83       	std	Y+7, r24	; 0x07
    9050:	8a a1       	ldd	r24, Y+34	; 0x22
    9052:	88 23       	and	r24, r24
    9054:	41 f0       	breq	.+16     	; 0x9066 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    9056:	88 a1       	ldd	r24, Y+32	; 0x20
    9058:	99 a1       	ldd	r25, Y+33	; 0x21
    905a:	fc 01       	movw	r30, r24
    905c:	80 81       	ld	r24, Z
    905e:	88 30       	cpi	r24, 0x08	; 8
    9060:	10 f0       	brcs	.+4      	; 0x9066 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    9062:	81 e0       	ldi	r24, 0x01	; 1
    9064:	01 c0       	rjmp	.+2      	; 0x9068 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    9066:	80 e0       	ldi	r24, 0x00	; 0
    9068:	8b 83       	std	Y+3, r24	; 0x03
    906a:	08 c0       	rjmp	.+16     	; 0x907c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    906c:	87 e9       	ldi	r24, 0x97	; 151
    906e:	8b 8b       	std	Y+19, r24	; 0x13
    9070:	86 e0       	ldi	r24, 0x06	; 6
    9072:	8f 83       	std	Y+7, r24	; 0x07
    9074:	1b 82       	std	Y+3, r1	; 0x03
    9076:	02 c0       	rjmp	.+4      	; 0x907c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    9078:	85 e0       	ldi	r24, 0x05	; 5
    907a:	f1 c1       	rjmp	.+994    	; 0x945e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    907c:	8f 81       	ldd	r24, Y+7	; 0x07
    907e:	88 0f       	add	r24, r24
    9080:	88 0f       	add	r24, r24
    9082:	88 0f       	add	r24, r24
    9084:	9a a1       	ldd	r25, Y+34	; 0x22
    9086:	f9 2f       	mov	r31, r25
    9088:	f8 1b       	sub	r31, r24
    908a:	8f 2f       	mov	r24, r31
    908c:	88 87       	std	Y+8, r24	; 0x08
    908e:	88 85       	ldd	r24, Y+8	; 0x08
    9090:	88 23       	and	r24, r24
    9092:	0c f4       	brge	.+2      	; 0x9096 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    9094:	18 86       	std	Y+8, r1	; 0x08
    9096:	82 e0       	ldi	r24, 0x02	; 2
    9098:	8e 83       	std	Y+6, r24	; 0x06
    909a:	8b 81       	ldd	r24, Y+3	; 0x03
    909c:	88 23       	and	r24, r24
    909e:	71 f0       	breq	.+28     	; 0x90bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    90a0:	8e 81       	ldd	r24, Y+6	; 0x06
    90a2:	91 e0       	ldi	r25, 0x01	; 1
    90a4:	98 0f       	add	r25, r24
    90a6:	9e 83       	std	Y+6, r25	; 0x06
    90a8:	88 2f       	mov	r24, r24
    90aa:	90 e0       	ldi	r25, 0x00	; 0
    90ac:	9e 01       	movw	r18, r28
    90ae:	2d 5e       	subi	r18, 0xED	; 237
    90b0:	3f 4f       	sbci	r19, 0xFF	; 255
    90b2:	82 0f       	add	r24, r18
    90b4:	93 1f       	adc	r25, r19
    90b6:	28 e8       	ldi	r18, 0x88	; 136
    90b8:	fc 01       	movw	r30, r24
    90ba:	20 83       	st	Z, r18
    90bc:	88 85       	ldd	r24, Y+8	; 0x08
    90be:	88 23       	and	r24, r24
    90c0:	0c f4       	brge	.+2      	; 0x90c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    90c2:	89 5f       	subi	r24, 0xF9	; 249
    90c4:	85 95       	asr	r24
    90c6:	85 95       	asr	r24
    90c8:	85 95       	asr	r24
    90ca:	98 2f       	mov	r25, r24
    90cc:	88 85       	ldd	r24, Y+8	; 0x08
    90ce:	87 70       	andi	r24, 0x07	; 7
    90d0:	88 23       	and	r24, r24
    90d2:	11 f0       	breq	.+4      	; 0x90d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    90d4:	81 e0       	ldi	r24, 0x01	; 1
    90d6:	01 c0       	rjmp	.+2      	; 0x90da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    90d8:	80 e0       	ldi	r24, 0x00	; 0
    90da:	89 0f       	add	r24, r25
    90dc:	8c 87       	std	Y+12, r24	; 0x0c
    90de:	8c 85       	ldd	r24, Y+12	; 0x0c
    90e0:	88 23       	and	r24, r24
    90e2:	99 f1       	breq	.+102    	; 0x914a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    90e4:	8b 81       	ldd	r24, Y+3	; 0x03
    90e6:	88 23       	and	r24, r24
    90e8:	11 f0       	breq	.+4      	; 0x90ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    90ea:	83 e0       	ldi	r24, 0x03	; 3
    90ec:	01 c0       	rjmp	.+2      	; 0x90f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    90ee:	84 e0       	ldi	r24, 0x04	; 4
    90f0:	8e 87       	std	Y+14, r24	; 0x0e
    90f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    90f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    90f6:	89 17       	cp	r24, r25
    90f8:	10 f4       	brcc	.+4      	; 0x90fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    90fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    90fc:	8c 87       	std	Y+12, r24	; 0x0c
    90fe:	1d 82       	std	Y+5, r1	; 0x05
    9100:	9d 81       	ldd	r25, Y+5	; 0x05
    9102:	8c 85       	ldd	r24, Y+12	; 0x0c
    9104:	98 17       	cp	r25, r24
    9106:	08 f5       	brcc	.+66     	; 0x914a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    9108:	8e 81       	ldd	r24, Y+6	; 0x06
    910a:	91 e0       	ldi	r25, 0x01	; 1
    910c:	98 0f       	add	r25, r24
    910e:	9e 83       	std	Y+6, r25	; 0x06
    9110:	88 2f       	mov	r24, r24
    9112:	90 e0       	ldi	r25, 0x00	; 0
    9114:	2f 81       	ldd	r18, Y+7	; 0x07
    9116:	42 2f       	mov	r20, r18
    9118:	50 e0       	ldi	r21, 0x00	; 0
    911a:	2d 81       	ldd	r18, Y+5	; 0x05
    911c:	22 2f       	mov	r18, r18
    911e:	30 e0       	ldi	r19, 0x00	; 0
    9120:	24 0f       	add	r18, r20
    9122:	35 1f       	adc	r19, r21
    9124:	48 a1       	ldd	r20, Y+32	; 0x20
    9126:	59 a1       	ldd	r21, Y+33	; 0x21
    9128:	24 0f       	add	r18, r20
    912a:	35 1f       	adc	r19, r21
    912c:	2f 5f       	subi	r18, 0xFF	; 255
    912e:	3f 4f       	sbci	r19, 0xFF	; 255
    9130:	f9 01       	movw	r30, r18
    9132:	40 81       	ld	r20, Z
    9134:	9e 01       	movw	r18, r28
    9136:	2d 5e       	subi	r18, 0xED	; 237
    9138:	3f 4f       	sbci	r19, 0xFF	; 255
    913a:	82 0f       	add	r24, r18
    913c:	93 1f       	adc	r25, r19
    913e:	fc 01       	movw	r30, r24
    9140:	40 83       	st	Z, r20
    9142:	8d 81       	ldd	r24, Y+5	; 0x05
    9144:	8f 5f       	subi	r24, 0xFF	; 255
    9146:	8d 83       	std	Y+5, r24	; 0x05
    9148:	db cf       	rjmp	.-74     	; 0x9100 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    914a:	8b 81       	ldd	r24, Y+3	; 0x03
    914c:	88 23       	and	r24, r24
    914e:	19 f0       	breq	.+6      	; 0x9156 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    9150:	88 85       	ldd	r24, Y+8	; 0x08
    9152:	88 5f       	subi	r24, 0xF8	; 248
    9154:	88 87       	std	Y+8, r24	; 0x08
    9156:	1a 82       	std	Y+2, r1	; 0x02
    9158:	8a 81       	ldd	r24, Y+2	; 0x02
    915a:	88 23       	and	r24, r24
    915c:	09 f0       	breq	.+2      	; 0x9160 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    915e:	fd c0       	rjmp	.+506    	; 0x935a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x396>
    9160:	88 85       	ldd	r24, Y+8	; 0x08
    9162:	80 32       	cpi	r24, 0x20	; 32
    9164:	3c f1       	brlt	.+78     	; 0x91b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    9166:	80 e7       	ldi	r24, 0x70	; 112
    9168:	8c 8b       	std	Y+20, r24	; 0x14
    916a:	9d 89       	ldd	r25, Y+21	; 0x15
    916c:	8e 89       	ldd	r24, Y+22	; 0x16
    916e:	98 27       	eor	r25, r24
    9170:	8f 89       	ldd	r24, Y+23	; 0x17
    9172:	98 27       	eor	r25, r24
    9174:	88 8d       	ldd	r24, Y+24	; 0x18
    9176:	89 27       	eor	r24, r25
    9178:	89 8f       	std	Y+25, r24	; 0x19
    917a:	ce 01       	movw	r24, r28
    917c:	43 96       	adiw	r24, 0x13	; 19
    917e:	9c 01       	movw	r18, r24
    9180:	29 5f       	subi	r18, 0xF9	; 249
    9182:	3f 4f       	sbci	r19, 0xFF	; 255
    9184:	be 01       	movw	r22, r28
    9186:	6d 5e       	subi	r22, 0xED	; 237
    9188:	7f 4f       	sbci	r23, 0xFF	; 255
    918a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    918c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    918e:	47 e0       	ldi	r20, 0x07	; 7
    9190:	cf db       	rcall	.-2146   	; 0x8930 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    9192:	8f 87       	std	Y+15, r24	; 0x0f
    9194:	8f 85       	ldd	r24, Y+15	; 0x0f
    9196:	88 23       	and	r24, r24
    9198:	11 f0       	breq	.+4      	; 0x919e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    919a:	8f 85       	ldd	r24, Y+15	; 0x0f
    919c:	60 c1       	rjmp	.+704    	; 0x945e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    919e:	1c 8e       	std	Y+28, r1	; 0x1c
    91a0:	89 e0       	ldi	r24, 0x09	; 9
    91a2:	89 87       	std	Y+9, r24	; 0x09
    91a4:	ce 01       	movw	r24, r28
    91a6:	43 96       	adiw	r24, 0x13	; 19
    91a8:	06 96       	adiw	r24, 0x06	; 6
    91aa:	9b 87       	std	Y+11, r25	; 0x0b
    91ac:	8a 87       	std	Y+10, r24	; 0x0a
    91ae:	83 e0       	ldi	r24, 0x03	; 3
    91b0:	8d 8f       	std	Y+29, r24	; 0x1d
    91b2:	33 c0       	rjmp	.+102    	; 0x921a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    91b4:	88 85       	ldd	r24, Y+8	; 0x08
    91b6:	87 78       	andi	r24, 0x87	; 135
    91b8:	88 23       	and	r24, r24
    91ba:	1c f4       	brge	.+6      	; 0x91c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    91bc:	81 50       	subi	r24, 0x01	; 1
    91be:	88 6f       	ori	r24, 0xF8	; 248
    91c0:	8f 5f       	subi	r24, 0xFF	; 255
    91c2:	8c 8f       	std	Y+28, r24	; 0x1c
    91c4:	88 85       	ldd	r24, Y+8	; 0x08
    91c6:	88 23       	and	r24, r24
    91c8:	0c f4       	brge	.+2      	; 0x91cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    91ca:	89 5f       	subi	r24, 0xF9	; 249
    91cc:	85 95       	asr	r24
    91ce:	85 95       	asr	r24
    91d0:	85 95       	asr	r24
    91d2:	8d 83       	std	Y+5, r24	; 0x05
    91d4:	8d 81       	ldd	r24, Y+5	; 0x05
    91d6:	8e 5f       	subi	r24, 0xFE	; 254
    91d8:	8e 83       	std	Y+6, r24	; 0x06
    91da:	8e 81       	ldd	r24, Y+6	; 0x06
    91dc:	98 2f       	mov	r25, r24
    91de:	92 95       	swap	r25
    91e0:	90 7f       	andi	r25, 0xF0	; 240
    91e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    91e4:	89 0f       	add	r24, r25
    91e6:	8c 8b       	std	Y+20, r24	; 0x14
    91e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    91ea:	88 23       	and	r24, r24
    91ec:	11 f0       	breq	.+4      	; 0x91f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    91ee:	81 e0       	ldi	r24, 0x01	; 1
    91f0:	01 c0       	rjmp	.+2      	; 0x91f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    91f2:	80 e0       	ldi	r24, 0x00	; 0
    91f4:	9e 81       	ldd	r25, Y+6	; 0x06
    91f6:	89 0f       	add	r24, r25
    91f8:	89 87       	std	Y+9, r24	; 0x09
    91fa:	8e 81       	ldd	r24, Y+6	; 0x06
    91fc:	88 2f       	mov	r24, r24
    91fe:	90 e0       	ldi	r25, 0x00	; 0
    9200:	9e 01       	movw	r18, r28
    9202:	2d 5e       	subi	r18, 0xED	; 237
    9204:	3f 4f       	sbci	r19, 0xFF	; 255
    9206:	82 0f       	add	r24, r18
    9208:	93 1f       	adc	r25, r19
    920a:	9b 87       	std	Y+11, r25	; 0x0b
    920c:	8a 87       	std	Y+10, r24	; 0x0a
    920e:	99 e0       	ldi	r25, 0x09	; 9
    9210:	8e 81       	ldd	r24, Y+6	; 0x06
    9212:	f9 2f       	mov	r31, r25
    9214:	f8 1b       	sub	r31, r24
    9216:	8f 2f       	mov	r24, r31
    9218:	8d 8f       	std	Y+29, r24	; 0x1d
    921a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    921c:	88 8b       	std	Y+16, r24	; 0x10
    921e:	88 89       	ldd	r24, Y+16	; 0x10
    9220:	98 2f       	mov	r25, r24
    9222:	92 95       	swap	r25
    9224:	90 7f       	andi	r25, 0xF0	; 240
    9226:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9228:	29 2f       	mov	r18, r25
    922a:	28 0f       	add	r18, r24
    922c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    922e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9230:	42 2f       	mov	r20, r18
    9232:	6a e1       	ldi	r22, 0x1A	; 26
    9234:	dd d9       	rcall	.-3142   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    9236:	fe 01       	movw	r30, r28
    9238:	7c 96       	adiw	r30, 0x1c	; 28
    923a:	ae 01       	movw	r20, r28
    923c:	43 5e       	subi	r20, 0xE3	; 227
    923e:	5f 4f       	sbci	r21, 0xFF	; 255
    9240:	2a 85       	ldd	r18, Y+10	; 0x0a
    9242:	3b 85       	ldd	r19, Y+11	; 0x0b
    9244:	be 01       	movw	r22, r28
    9246:	6d 5e       	subi	r22, 0xED	; 237
    9248:	7f 4f       	sbci	r23, 0xFF	; 255
    924a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    924c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    924e:	a1 2c       	mov	r10, r1
    9250:	c8 88       	ldd	r12, Y+16	; 0x10
    9252:	7f 01       	movw	r14, r30
    9254:	8a 01       	movw	r16, r20
    9256:	49 85       	ldd	r20, Y+9	; 0x09
    9258:	bb dc       	rcall	.-1674   	; 0x8bd0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    925a:	8f 87       	std	Y+15, r24	; 0x0f
    925c:	8f 85       	ldd	r24, Y+15	; 0x0f
    925e:	82 30       	cpi	r24, 0x02	; 2
    9260:	09 f0       	breq	.+2      	; 0x9264 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    9262:	6d c0       	rjmp	.+218    	; 0x933e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x37a>
    9264:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9266:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9268:	6c e1       	ldi	r22, 0x1C	; 28
    926a:	4d da       	rcall	.-2918   	; 0x8706 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    926c:	89 8b       	std	Y+17, r24	; 0x11
    926e:	89 89       	ldd	r24, Y+17	; 0x11
    9270:	88 2f       	mov	r24, r24
    9272:	90 e0       	ldi	r25, 0x00	; 0
    9274:	80 72       	andi	r24, 0x20	; 32
    9276:	99 27       	eor	r25, r25
    9278:	89 2b       	or	r24, r25
    927a:	11 f0       	breq	.+4      	; 0x9280 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    927c:	82 e0       	ldi	r24, 0x02	; 2
    927e:	ef c0       	rjmp	.+478    	; 0x945e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9280:	89 89       	ldd	r24, Y+17	; 0x11
    9282:	8f 71       	andi	r24, 0x1F	; 31
    9284:	8d 87       	std	Y+13, r24	; 0x0d
    9286:	8d 85       	ldd	r24, Y+13	; 0x0d
    9288:	88 23       	and	r24, r24
    928a:	11 f4       	brne	.+4      	; 0x9290 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    928c:	80 e2       	ldi	r24, 0x20	; 32
    928e:	8d 87       	std	Y+13, r24	; 0x0d
    9290:	8d 85       	ldd	r24, Y+13	; 0x0d
    9292:	28 2f       	mov	r18, r24
    9294:	30 e0       	ldi	r19, 0x00	; 0
    9296:	88 85       	ldd	r24, Y+8	; 0x08
    9298:	08 2e       	mov	r0, r24
    929a:	00 0c       	add	r0, r0
    929c:	99 0b       	sbc	r25, r25
    929e:	82 17       	cp	r24, r18
    92a0:	93 07       	cpc	r25, r19
    92a2:	14 f0       	brlt	.+4      	; 0x92a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    92a4:	85 e0       	ldi	r24, 0x05	; 5
    92a6:	db c0       	rjmp	.+438    	; 0x945e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    92a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    92aa:	88 87       	std	Y+8, r24	; 0x08
    92ac:	88 85       	ldd	r24, Y+8	; 0x08
    92ae:	87 78       	andi	r24, 0x87	; 135
    92b0:	88 23       	and	r24, r24
    92b2:	1c f4       	brge	.+6      	; 0x92ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2f6>
    92b4:	81 50       	subi	r24, 0x01	; 1
    92b6:	88 6f       	ori	r24, 0xF8	; 248
    92b8:	8f 5f       	subi	r24, 0xFF	; 255
    92ba:	8d 83       	std	Y+5, r24	; 0x05
    92bc:	88 85       	ldd	r24, Y+8	; 0x08
    92be:	08 2e       	mov	r0, r24
    92c0:	00 0c       	add	r0, r0
    92c2:	99 0b       	sbc	r25, r25
    92c4:	01 97       	sbiw	r24, 0x01	; 1
    92c6:	87 70       	andi	r24, 0x07	; 7
    92c8:	90 78       	andi	r25, 0x80	; 128
    92ca:	99 23       	and	r25, r25
    92cc:	24 f4       	brge	.+8      	; 0x92d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x312>
    92ce:	01 97       	sbiw	r24, 0x01	; 1
    92d0:	88 6f       	ori	r24, 0xF8	; 248
    92d2:	9f 6f       	ori	r25, 0xFF	; 255
    92d4:	01 96       	adiw	r24, 0x01	; 1
    92d6:	8a 8b       	std	Y+18, r24	; 0x12
    92d8:	88 85       	ldd	r24, Y+8	; 0x08
    92da:	88 23       	and	r24, r24
    92dc:	0c f4       	brge	.+2      	; 0x92e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31c>
    92de:	89 5f       	subi	r24, 0xF9	; 249
    92e0:	85 95       	asr	r24
    92e2:	85 95       	asr	r24
    92e4:	85 95       	asr	r24
    92e6:	98 2f       	mov	r25, r24
    92e8:	8d 81       	ldd	r24, Y+5	; 0x05
    92ea:	88 23       	and	r24, r24
    92ec:	11 f0       	breq	.+4      	; 0x92f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32e>
    92ee:	81 e0       	ldi	r24, 0x01	; 1
    92f0:	01 c0       	rjmp	.+2      	; 0x92f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x330>
    92f2:	80 e0       	ldi	r24, 0x00	; 0
    92f4:	89 0f       	add	r24, r25
    92f6:	8f 5f       	subi	r24, 0xFF	; 255
    92f8:	8e 83       	std	Y+6, r24	; 0x06
    92fa:	8e 81       	ldd	r24, Y+6	; 0x06
    92fc:	88 2f       	mov	r24, r24
    92fe:	90 e0       	ldi	r25, 0x00	; 0
    9300:	2e 81       	ldd	r18, Y+6	; 0x06
    9302:	22 2f       	mov	r18, r18
    9304:	30 e0       	ldi	r19, 0x00	; 0
    9306:	ae 01       	movw	r20, r28
    9308:	4d 5e       	subi	r20, 0xED	; 237
    930a:	5f 4f       	sbci	r21, 0xFF	; 255
    930c:	24 0f       	add	r18, r20
    930e:	35 1f       	adc	r19, r21
    9310:	f9 01       	movw	r30, r18
    9312:	20 81       	ld	r18, Z
    9314:	62 2f       	mov	r22, r18
    9316:	2a 89       	ldd	r18, Y+18	; 0x12
    9318:	42 2f       	mov	r20, r18
    931a:	50 e0       	ldi	r21, 0x00	; 0
    931c:	21 e0       	ldi	r18, 0x01	; 1
    931e:	30 e0       	ldi	r19, 0x00	; 0
    9320:	02 c0       	rjmp	.+4      	; 0x9326 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x362>
    9322:	22 0f       	add	r18, r18
    9324:	33 1f       	adc	r19, r19
    9326:	4a 95       	dec	r20
    9328:	e2 f7       	brpl	.-8      	; 0x9322 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x35e>
    932a:	26 2b       	or	r18, r22
    932c:	42 2f       	mov	r20, r18
    932e:	9e 01       	movw	r18, r28
    9330:	2d 5e       	subi	r18, 0xED	; 237
    9332:	3f 4f       	sbci	r19, 0xFF	; 255
    9334:	82 0f       	add	r24, r18
    9336:	93 1f       	adc	r25, r19
    9338:	fc 01       	movw	r30, r24
    933a:	40 83       	st	Z, r20
    933c:	0d cf       	rjmp	.-486    	; 0x9158 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    933e:	8f 85       	ldd	r24, Y+15	; 0x0f
    9340:	88 23       	and	r24, r24
    9342:	11 f0       	breq	.+4      	; 0x9348 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x384>
    9344:	8f 85       	ldd	r24, Y+15	; 0x0f
    9346:	8b c0       	rjmp	.+278    	; 0x945e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9348:	88 85       	ldd	r24, Y+8	; 0x08
    934a:	80 32       	cpi	r24, 0x20	; 32
    934c:	1c f0       	brlt	.+6      	; 0x9354 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    934e:	81 e0       	ldi	r24, 0x01	; 1
    9350:	8a 83       	std	Y+2, r24	; 0x02
    9352:	02 cf       	rjmp	.-508    	; 0x9158 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    9354:	80 e2       	ldi	r24, 0x20	; 32
    9356:	88 87       	std	Y+8, r24	; 0x08
    9358:	ff ce       	rjmp	.-514    	; 0x9158 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    935a:	8d 89       	ldd	r24, Y+21	; 0x15
    935c:	88 38       	cpi	r24, 0x88	; 136
    935e:	11 f4       	brne	.+4      	; 0x9364 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    9360:	83 e0       	ldi	r24, 0x03	; 3
    9362:	01 c0       	rjmp	.+2      	; 0x9366 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a2>
    9364:	82 e0       	ldi	r24, 0x02	; 2
    9366:	8e 83       	std	Y+6, r24	; 0x06
    9368:	8d 89       	ldd	r24, Y+21	; 0x15
    936a:	88 38       	cpi	r24, 0x88	; 136
    936c:	11 f4       	brne	.+4      	; 0x9372 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ae>
    936e:	83 e0       	ldi	r24, 0x03	; 3
    9370:	01 c0       	rjmp	.+2      	; 0x9374 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3b0>
    9372:	84 e0       	ldi	r24, 0x04	; 4
    9374:	8c 87       	std	Y+12, r24	; 0x0c
    9376:	1d 82       	std	Y+5, r1	; 0x05
    9378:	9d 81       	ldd	r25, Y+5	; 0x05
    937a:	8c 85       	ldd	r24, Y+12	; 0x0c
    937c:	98 17       	cp	r25, r24
    937e:	00 f5       	brcc	.+64     	; 0x93c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    9380:	8f 81       	ldd	r24, Y+7	; 0x07
    9382:	28 2f       	mov	r18, r24
    9384:	30 e0       	ldi	r19, 0x00	; 0
    9386:	8d 81       	ldd	r24, Y+5	; 0x05
    9388:	88 2f       	mov	r24, r24
    938a:	90 e0       	ldi	r25, 0x00	; 0
    938c:	82 0f       	add	r24, r18
    938e:	93 1f       	adc	r25, r19
    9390:	2e 81       	ldd	r18, Y+6	; 0x06
    9392:	31 e0       	ldi	r19, 0x01	; 1
    9394:	32 0f       	add	r19, r18
    9396:	3e 83       	std	Y+6, r19	; 0x06
    9398:	22 2f       	mov	r18, r18
    939a:	30 e0       	ldi	r19, 0x00	; 0
    939c:	ae 01       	movw	r20, r28
    939e:	4d 5e       	subi	r20, 0xED	; 237
    93a0:	5f 4f       	sbci	r21, 0xFF	; 255
    93a2:	24 0f       	add	r18, r20
    93a4:	35 1f       	adc	r19, r21
    93a6:	f9 01       	movw	r30, r18
    93a8:	40 81       	ld	r20, Z
    93aa:	28 a1       	ldd	r18, Y+32	; 0x20
    93ac:	39 a1       	ldd	r19, Y+33	; 0x21
    93ae:	82 0f       	add	r24, r18
    93b0:	93 1f       	adc	r25, r19
    93b2:	01 96       	adiw	r24, 0x01	; 1
    93b4:	fc 01       	movw	r30, r24
    93b6:	40 83       	st	Z, r20
    93b8:	8d 81       	ldd	r24, Y+5	; 0x05
    93ba:	8f 5f       	subi	r24, 0xFF	; 255
    93bc:	8d 83       	std	Y+5, r24	; 0x05
    93be:	dc cf       	rjmp	.-72     	; 0x9378 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3b4>
    93c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    93c2:	83 30       	cpi	r24, 0x03	; 3
    93c4:	19 f4       	brne	.+6      	; 0x93cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x408>
    93c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    93c8:	88 23       	and	r24, r24
    93ca:	11 f0       	breq	.+4      	; 0x93d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x40c>
    93cc:	81 e0       	ldi	r24, 0x01	; 1
    93ce:	47 c0       	rjmp	.+142    	; 0x945e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    93d0:	ce 01       	movw	r24, r28
    93d2:	43 96       	adiw	r24, 0x13	; 19
    93d4:	9c 01       	movw	r18, r24
    93d6:	2e 5f       	subi	r18, 0xFE	; 254
    93d8:	3f 4f       	sbci	r19, 0xFF	; 255
    93da:	6a 85       	ldd	r22, Y+10	; 0x0a
    93dc:	7b 85       	ldd	r23, Y+11	; 0x0b
    93de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    93e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    93e2:	41 e0       	ldi	r20, 0x01	; 1
    93e4:	a5 da       	rcall	.-2742   	; 0x8930 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    93e6:	8f 87       	std	Y+15, r24	; 0x0f
    93e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    93ea:	88 23       	and	r24, r24
    93ec:	11 f0       	breq	.+4      	; 0x93f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x42e>
    93ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    93f0:	36 c0       	rjmp	.+108    	; 0x945e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    93f2:	2d 89       	ldd	r18, Y+21	; 0x15
    93f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    93f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    93f8:	01 96       	adiw	r24, 0x01	; 1
    93fa:	fc 01       	movw	r30, r24
    93fc:	80 81       	ld	r24, Z
    93fe:	28 17       	cp	r18, r24
    9400:	41 f4       	brne	.+16     	; 0x9412 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44e>
    9402:	2e 89       	ldd	r18, Y+22	; 0x16
    9404:	8a 85       	ldd	r24, Y+10	; 0x0a
    9406:	9b 85       	ldd	r25, Y+11	; 0x0b
    9408:	02 96       	adiw	r24, 0x02	; 2
    940a:	fc 01       	movw	r30, r24
    940c:	80 81       	ld	r24, Z
    940e:	28 17       	cp	r18, r24
    9410:	11 f0       	breq	.+4      	; 0x9416 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x452>
    9412:	87 e0       	ldi	r24, 0x07	; 7
    9414:	24 c0       	rjmp	.+72     	; 0x945e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9416:	8a 85       	ldd	r24, Y+10	; 0x0a
    9418:	9b 85       	ldd	r25, Y+11	; 0x0b
    941a:	fc 01       	movw	r30, r24
    941c:	80 81       	ld	r24, Z
    941e:	88 2f       	mov	r24, r24
    9420:	90 e0       	ldi	r25, 0x00	; 0
    9422:	84 70       	andi	r24, 0x04	; 4
    9424:	99 27       	eor	r25, r25
    9426:	89 2b       	or	r24, r25
    9428:	21 f0       	breq	.+8      	; 0x9432 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x46e>
    942a:	8c 81       	ldd	r24, Y+4	; 0x04
    942c:	8f 5f       	subi	r24, 0xFF	; 255
    942e:	8c 83       	std	Y+4, r24	; 0x04
    9430:	eb cd       	rjmp	.-1066   	; 0x9008 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    9432:	81 e0       	ldi	r24, 0x01	; 1
    9434:	89 83       	std	Y+1, r24	; 0x01
    9436:	8a 85       	ldd	r24, Y+10	; 0x0a
    9438:	9b 85       	ldd	r25, Y+11	; 0x0b
    943a:	fc 01       	movw	r30, r24
    943c:	20 81       	ld	r18, Z
    943e:	88 a1       	ldd	r24, Y+32	; 0x20
    9440:	99 a1       	ldd	r25, Y+33	; 0x21
    9442:	fc 01       	movw	r30, r24
    9444:	23 87       	std	Z+11, r18	; 0x0b
    9446:	e0 cd       	rjmp	.-1088   	; 0x9008 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    9448:	9c 81       	ldd	r25, Y+4	; 0x04
    944a:	89 2f       	mov	r24, r25
    944c:	88 0f       	add	r24, r24
    944e:	89 0f       	add	r24, r25
    9450:	21 e0       	ldi	r18, 0x01	; 1
    9452:	28 0f       	add	r18, r24
    9454:	88 a1       	ldd	r24, Y+32	; 0x20
    9456:	99 a1       	ldd	r25, Y+33	; 0x21
    9458:	fc 01       	movw	r30, r24
    945a:	20 83       	st	Z, r18
    945c:	80 e0       	ldi	r24, 0x00	; 0
    945e:	a2 96       	adiw	r28, 0x22	; 34
    9460:	0f b6       	in	r0, 0x3f	; 63
    9462:	f8 94       	cli
    9464:	de bf       	out	0x3e, r29	; 62
    9466:	0f be       	out	0x3f, r0	; 63
    9468:	cd bf       	out	0x3d, r28	; 61
    946a:	df 91       	pop	r29
    946c:	cf 91       	pop	r28
    946e:	1f 91       	pop	r17
    9470:	0f 91       	pop	r16
    9472:	ff 90       	pop	r15
    9474:	ef 90       	pop	r14
    9476:	cf 90       	pop	r12
    9478:	af 90       	pop	r10
    947a:	08 95       	ret

0000947c <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    947c:	cf 93       	push	r28
    947e:	df 93       	push	r29
    9480:	00 d0       	rcall	.+0      	; 0x9482 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    9482:	00 d0       	rcall	.+0      	; 0x9484 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    9484:	cd b7       	in	r28, 0x3d	; 61
    9486:	de b7       	in	r29, 0x3e	; 62
    9488:	9e 83       	std	Y+6, r25	; 0x06
    948a:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    948c:	82 e0       	ldi	r24, 0x02	; 2
    948e:	8c 83       	std	Y+4, r24	; 0x04

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
    9490:	8d 81       	ldd	r24, Y+5	; 0x05
    9492:	9e 81       	ldd	r25, Y+6	; 0x06
    9494:	40 e0       	ldi	r20, 0x00	; 0
    9496:	64 e2       	ldi	r22, 0x24	; 36
    9498:	ab d8       	rcall	.-3754   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
    949a:	8d 81       	ldd	r24, Y+5	; 0x05
    949c:	9e 81       	ldd	r25, Y+6	; 0x06
    949e:	40 e0       	ldi	r20, 0x00	; 0
    94a0:	66 e2       	ldi	r22, 0x26	; 38
    94a2:	a6 d8       	rcall	.-3764   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
    94a4:	8d 81       	ldd	r24, Y+5	; 0x05
    94a6:	9e 81       	ldd	r25, Y+6	; 0x06
    94a8:	46 e2       	ldi	r20, 0x26	; 38
    94aa:	68 e4       	ldi	r22, 0x48	; 72
    94ac:	a1 d8       	rcall	.-3774   	; 0x85f0 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    94ae:	ae 01       	movw	r20, r28
    94b0:	4c 5f       	subi	r20, 0xFC	; 252
    94b2:	5f 4f       	sbci	r21, 0xFF	; 255
    94b4:	9e 01       	movw	r18, r28
    94b6:	2e 5f       	subi	r18, 0xFE	; 254
    94b8:	3f 4f       	sbci	r19, 0xFF	; 255
    94ba:	8d 81       	ldd	r24, Y+5	; 0x05
    94bc:	9e 81       	ldd	r25, Y+6	; 0x06
    94be:	b9 01       	movw	r22, r18
    94c0:	08 dd       	rcall	.-1520   	; 0x8ed2 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    94c2:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    94c4:	89 81       	ldd	r24, Y+1	; 0x01
    94c6:	88 23       	and	r24, r24
    94c8:	19 f0       	breq	.+6      	; 0x94d0 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    94ca:	89 81       	ldd	r24, Y+1	; 0x01
    94cc:	82 30       	cpi	r24, 0x02	; 2
    94ce:	11 f4       	brne	.+4      	; 0x94d4 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x58>
    94d0:	81 e0       	ldi	r24, 0x01	; 1
    94d2:	01 c0       	rjmp	.+2      	; 0x94d6 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x5a>
    94d4:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    94d6:	26 96       	adiw	r28, 0x06	; 6
    94d8:	0f b6       	in	r0, 0x3f	; 63
    94da:	f8 94       	cli
    94dc:	de bf       	out	0x3e, r29	; 62
    94de:	0f be       	out	0x3f, r0	; 63
    94e0:	cd bf       	out	0x3d, r28	; 61
    94e2:	df 91       	pop	r29
    94e4:	cf 91       	pop	r28
    94e6:	08 95       	ret

000094e8 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    94e8:	cf 93       	push	r28
    94ea:	df 93       	push	r29
    94ec:	00 d0       	rcall	.+0      	; 0x94ee <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    94ee:	cd b7       	in	r28, 0x3d	; 61
    94f0:	de b7       	in	r29, 0x3e	; 62
    94f2:	9b 83       	std	Y+3, r25	; 0x03
    94f4:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    94f6:	8a 81       	ldd	r24, Y+2	; 0x02
    94f8:	9b 81       	ldd	r25, Y+3	; 0x03
    94fa:	fc 01       	movw	r30, r24
    94fc:	80 81       	ld	r24, Z
    94fe:	91 81       	ldd	r25, Z+1	; 0x01
    9500:	fc 01       	movw	r30, r24
    9502:	20 81       	ld	r18, Z
    9504:	31 81       	ldd	r19, Z+1	; 0x01
    9506:	8a 81       	ldd	r24, Y+2	; 0x02
    9508:	9b 81       	ldd	r25, Y+3	; 0x03
    950a:	bc 01       	movw	r22, r24
    950c:	6e 5f       	subi	r22, 0xFE	; 254
    950e:	7f 4f       	sbci	r23, 0xFF	; 255
    9510:	8a 81       	ldd	r24, Y+2	; 0x02
    9512:	9b 81       	ldd	r25, Y+3	; 0x03
    9514:	40 e0       	ldi	r20, 0x00	; 0
    9516:	f9 01       	movw	r30, r18
    9518:	19 95       	eicall
    951a:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    951c:	81 e0       	ldi	r24, 0x01	; 1
    951e:	99 81       	ldd	r25, Y+1	; 0x01
    9520:	99 23       	and	r25, r25
    9522:	09 f0       	breq	.+2      	; 0x9526 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x3e>
    9524:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    9526:	0f 90       	pop	r0
    9528:	0f 90       	pop	r0
    952a:	0f 90       	pop	r0
    952c:	df 91       	pop	r29
    952e:	cf 91       	pop	r28
    9530:	08 95       	ret

00009532 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    9532:	cf 93       	push	r28
    9534:	df 93       	push	r29
    9536:	00 d0       	rcall	.+0      	; 0x9538 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    9538:	1f 92       	push	r1
    953a:	1f 92       	push	r1
    953c:	cd b7       	in	r28, 0x3d	; 61
    953e:	de b7       	in	r29, 0x3e	; 62
    9540:	89 83       	std	Y+1, r24	; 0x01
    9542:	7b 83       	std	Y+3, r23	; 0x03
    9544:	6a 83       	std	Y+2, r22	; 0x02
    9546:	5d 83       	std	Y+5, r21	; 0x05
    9548:	4c 83       	std	Y+4, r20	; 0x04
    954a:	89 81       	ldd	r24, Y+1	; 0x01
    954c:	88 2f       	mov	r24, r24
    954e:	90 e0       	ldi	r25, 0x00	; 0
    9550:	8e 50       	subi	r24, 0x0E	; 14
    9552:	9b 4f       	sbci	r25, 0xFB	; 251
    9554:	fc 01       	movw	r30, r24
    9556:	80 81       	ld	r24, Z
    9558:	88 1f       	adc	r24, r24
    955a:	88 27       	eor	r24, r24
    955c:	88 1f       	adc	r24, r24
    955e:	88 23       	and	r24, r24
    9560:	31 f0       	breq	.+12     	; 0x956e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    9562:	8a 81       	ldd	r24, Y+2	; 0x02
    9564:	9b 81       	ldd	r25, Y+3	; 0x03
    9566:	fc 01       	movw	r30, r24
    9568:	11 82       	std	Z+1, r1	; 0x01
    956a:	10 82       	st	Z, r1
    956c:	72 c0       	rjmp	.+228    	; 0x9652 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    956e:	89 81       	ldd	r24, Y+1	; 0x01
    9570:	28 2f       	mov	r18, r24
    9572:	30 e0       	ldi	r19, 0x00	; 0
    9574:	c9 01       	movw	r24, r18
    9576:	88 0f       	add	r24, r24
    9578:	99 1f       	adc	r25, r25
    957a:	82 0f       	add	r24, r18
    957c:	93 1f       	adc	r25, r19
    957e:	88 0f       	add	r24, r24
    9580:	99 1f       	adc	r25, r25
    9582:	88 0f       	add	r24, r24
    9584:	99 1f       	adc	r25, r25
    9586:	9c 01       	movw	r18, r24
    9588:	89 81       	ldd	r24, Y+1	; 0x01
    958a:	88 2f       	mov	r24, r24
    958c:	90 e0       	ldi	r25, 0x00	; 0
    958e:	8e 50       	subi	r24, 0x0E	; 14
    9590:	9b 4f       	sbci	r25, 0xFB	; 251
    9592:	fc 01       	movw	r30, r24
    9594:	80 81       	ld	r24, Z
    9596:	08 2e       	mov	r0, r24
    9598:	00 0c       	add	r0, r0
    959a:	99 0b       	sbc	r25, r25
    959c:	28 0f       	add	r18, r24
    959e:	39 1f       	adc	r19, r25
    95a0:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <ServoCount>
    95a4:	88 2f       	mov	r24, r24
    95a6:	90 e0       	ldi	r25, 0x00	; 0
    95a8:	28 17       	cp	r18, r24
    95aa:	39 07       	cpc	r19, r25
    95ac:	4c f5       	brge	.+82     	; 0x9600 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    95ae:	89 81       	ldd	r24, Y+1	; 0x01
    95b0:	28 2f       	mov	r18, r24
    95b2:	30 e0       	ldi	r19, 0x00	; 0
    95b4:	c9 01       	movw	r24, r18
    95b6:	88 0f       	add	r24, r24
    95b8:	99 1f       	adc	r25, r25
    95ba:	82 0f       	add	r24, r18
    95bc:	93 1f       	adc	r25, r19
    95be:	88 0f       	add	r24, r24
    95c0:	99 1f       	adc	r25, r25
    95c2:	88 0f       	add	r24, r24
    95c4:	99 1f       	adc	r25, r25
    95c6:	9c 01       	movw	r18, r24
    95c8:	89 81       	ldd	r24, Y+1	; 0x01
    95ca:	88 2f       	mov	r24, r24
    95cc:	90 e0       	ldi	r25, 0x00	; 0
    95ce:	8e 50       	subi	r24, 0x0E	; 14
    95d0:	9b 4f       	sbci	r25, 0xFB	; 251
    95d2:	fc 01       	movw	r30, r24
    95d4:	80 81       	ld	r24, Z
    95d6:	08 2e       	mov	r0, r24
    95d8:	00 0c       	add	r0, r0
    95da:	99 0b       	sbc	r25, r25
    95dc:	28 0f       	add	r18, r24
    95de:	39 1f       	adc	r19, r25
    95e0:	c9 01       	movw	r24, r18
    95e2:	88 0f       	add	r24, r24
    95e4:	99 1f       	adc	r25, r25
    95e6:	82 0f       	add	r24, r18
    95e8:	93 1f       	adc	r25, r19
    95ea:	8e 59       	subi	r24, 0x9E	; 158
    95ec:	9b 4f       	sbci	r25, 0xFB	; 251
    95ee:	fc 01       	movw	r30, r24
    95f0:	80 81       	ld	r24, Z
    95f2:	86 fb       	bst	r24, 6
    95f4:	88 27       	eor	r24, r24
    95f6:	80 f9       	bld	r24, 0
    95f8:	81 30       	cpi	r24, 0x01	; 1
    95fa:	11 f4       	brne	.+4      	; 0x9600 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    95fc:	81 e0       	ldi	r24, 0x01	; 1
    95fe:	01 c0       	rjmp	.+2      	; 0x9602 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    9600:	80 e0       	ldi	r24, 0x00	; 0
    9602:	88 23       	and	r24, r24
    9604:	31 f1       	breq	.+76     	; 0x9652 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    9606:	89 81       	ldd	r24, Y+1	; 0x01
    9608:	28 2f       	mov	r18, r24
    960a:	30 e0       	ldi	r19, 0x00	; 0
    960c:	c9 01       	movw	r24, r18
    960e:	88 0f       	add	r24, r24
    9610:	99 1f       	adc	r25, r25
    9612:	82 0f       	add	r24, r18
    9614:	93 1f       	adc	r25, r19
    9616:	88 0f       	add	r24, r24
    9618:	99 1f       	adc	r25, r25
    961a:	88 0f       	add	r24, r24
    961c:	99 1f       	adc	r25, r25
    961e:	9c 01       	movw	r18, r24
    9620:	89 81       	ldd	r24, Y+1	; 0x01
    9622:	88 2f       	mov	r24, r24
    9624:	90 e0       	ldi	r25, 0x00	; 0
    9626:	8e 50       	subi	r24, 0x0E	; 14
    9628:	9b 4f       	sbci	r25, 0xFB	; 251
    962a:	fc 01       	movw	r30, r24
    962c:	80 81       	ld	r24, Z
    962e:	08 2e       	mov	r0, r24
    9630:	00 0c       	add	r0, r0
    9632:	99 0b       	sbc	r25, r25
    9634:	28 0f       	add	r18, r24
    9636:	39 1f       	adc	r19, r25
    9638:	c9 01       	movw	r24, r18
    963a:	88 0f       	add	r24, r24
    963c:	99 1f       	adc	r25, r25
    963e:	82 0f       	add	r24, r18
    9640:	93 1f       	adc	r25, r19
    9642:	8e 59       	subi	r24, 0x9E	; 158
    9644:	9b 4f       	sbci	r25, 0xFB	; 251
    9646:	fc 01       	movw	r30, r24
    9648:	80 81       	ld	r24, Z
    964a:	8f 73       	andi	r24, 0x3F	; 63
    964c:	60 e0       	ldi	r22, 0x00	; 0
    964e:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    9652:	89 81       	ldd	r24, Y+1	; 0x01
    9654:	88 2f       	mov	r24, r24
    9656:	90 e0       	ldi	r25, 0x00	; 0
    9658:	9c 01       	movw	r18, r24
    965a:	2e 50       	subi	r18, 0x0E	; 14
    965c:	3b 4f       	sbci	r19, 0xFB	; 251
    965e:	f9 01       	movw	r30, r18
    9660:	20 81       	ld	r18, Z
    9662:	2f 5f       	subi	r18, 0xFF	; 255
    9664:	8e 50       	subi	r24, 0x0E	; 14
    9666:	9b 4f       	sbci	r25, 0xFB	; 251
    9668:	fc 01       	movw	r30, r24
    966a:	20 83       	st	Z, r18
    966c:	89 81       	ldd	r24, Y+1	; 0x01
    966e:	28 2f       	mov	r18, r24
    9670:	30 e0       	ldi	r19, 0x00	; 0
    9672:	c9 01       	movw	r24, r18
    9674:	88 0f       	add	r24, r24
    9676:	99 1f       	adc	r25, r25
    9678:	82 0f       	add	r24, r18
    967a:	93 1f       	adc	r25, r19
    967c:	88 0f       	add	r24, r24
    967e:	99 1f       	adc	r25, r25
    9680:	88 0f       	add	r24, r24
    9682:	99 1f       	adc	r25, r25
    9684:	9c 01       	movw	r18, r24
    9686:	89 81       	ldd	r24, Y+1	; 0x01
    9688:	88 2f       	mov	r24, r24
    968a:	90 e0       	ldi	r25, 0x00	; 0
    968c:	8e 50       	subi	r24, 0x0E	; 14
    968e:	9b 4f       	sbci	r25, 0xFB	; 251
    9690:	fc 01       	movw	r30, r24
    9692:	80 81       	ld	r24, Z
    9694:	08 2e       	mov	r0, r24
    9696:	00 0c       	add	r0, r0
    9698:	99 0b       	sbc	r25, r25
    969a:	28 0f       	add	r18, r24
    969c:	39 1f       	adc	r19, r25
    969e:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <ServoCount>
    96a2:	88 2f       	mov	r24, r24
    96a4:	90 e0       	ldi	r25, 0x00	; 0
    96a6:	28 17       	cp	r18, r24
    96a8:	39 07       	cpc	r19, r25
    96aa:	5c f4       	brge	.+22     	; 0x96c2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    96ac:	89 81       	ldd	r24, Y+1	; 0x01
    96ae:	88 2f       	mov	r24, r24
    96b0:	90 e0       	ldi	r25, 0x00	; 0
    96b2:	8e 50       	subi	r24, 0x0E	; 14
    96b4:	9b 4f       	sbci	r25, 0xFB	; 251
    96b6:	fc 01       	movw	r30, r24
    96b8:	80 81       	ld	r24, Z
    96ba:	8c 30       	cpi	r24, 0x0C	; 12
    96bc:	14 f4       	brge	.+4      	; 0x96c2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    96be:	81 e0       	ldi	r24, 0x01	; 1
    96c0:	01 c0       	rjmp	.+2      	; 0x96c4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    96c2:	80 e0       	ldi	r24, 0x00	; 0
    96c4:	88 23       	and	r24, r24
    96c6:	09 f4       	brne	.+2      	; 0x96ca <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    96c8:	7f c0       	rjmp	.+254    	; 0x97c8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    96ca:	8a 81       	ldd	r24, Y+2	; 0x02
    96cc:	9b 81       	ldd	r25, Y+3	; 0x03
    96ce:	fc 01       	movw	r30, r24
    96d0:	40 81       	ld	r20, Z
    96d2:	51 81       	ldd	r21, Z+1	; 0x01
    96d4:	89 81       	ldd	r24, Y+1	; 0x01
    96d6:	28 2f       	mov	r18, r24
    96d8:	30 e0       	ldi	r19, 0x00	; 0
    96da:	c9 01       	movw	r24, r18
    96dc:	88 0f       	add	r24, r24
    96de:	99 1f       	adc	r25, r25
    96e0:	82 0f       	add	r24, r18
    96e2:	93 1f       	adc	r25, r19
    96e4:	88 0f       	add	r24, r24
    96e6:	99 1f       	adc	r25, r25
    96e8:	88 0f       	add	r24, r24
    96ea:	99 1f       	adc	r25, r25
    96ec:	9c 01       	movw	r18, r24
    96ee:	89 81       	ldd	r24, Y+1	; 0x01
    96f0:	88 2f       	mov	r24, r24
    96f2:	90 e0       	ldi	r25, 0x00	; 0
    96f4:	8e 50       	subi	r24, 0x0E	; 14
    96f6:	9b 4f       	sbci	r25, 0xFB	; 251
    96f8:	fc 01       	movw	r30, r24
    96fa:	80 81       	ld	r24, Z
    96fc:	08 2e       	mov	r0, r24
    96fe:	00 0c       	add	r0, r0
    9700:	99 0b       	sbc	r25, r25
    9702:	28 0f       	add	r18, r24
    9704:	39 1f       	adc	r19, r25
    9706:	c9 01       	movw	r24, r18
    9708:	88 0f       	add	r24, r24
    970a:	99 1f       	adc	r25, r25
    970c:	82 0f       	add	r24, r18
    970e:	93 1f       	adc	r25, r19
    9710:	8d 59       	subi	r24, 0x9D	; 157
    9712:	9b 4f       	sbci	r25, 0xFB	; 251
    9714:	fc 01       	movw	r30, r24
    9716:	80 81       	ld	r24, Z
    9718:	91 81       	ldd	r25, Z+1	; 0x01
    971a:	9a 01       	movw	r18, r20
    971c:	28 0f       	add	r18, r24
    971e:	39 1f       	adc	r19, r25
    9720:	8c 81       	ldd	r24, Y+4	; 0x04
    9722:	9d 81       	ldd	r25, Y+5	; 0x05
    9724:	fc 01       	movw	r30, r24
    9726:	31 83       	std	Z+1, r19	; 0x01
    9728:	20 83       	st	Z, r18
    972a:	89 81       	ldd	r24, Y+1	; 0x01
    972c:	28 2f       	mov	r18, r24
    972e:	30 e0       	ldi	r19, 0x00	; 0
    9730:	c9 01       	movw	r24, r18
    9732:	88 0f       	add	r24, r24
    9734:	99 1f       	adc	r25, r25
    9736:	82 0f       	add	r24, r18
    9738:	93 1f       	adc	r25, r19
    973a:	88 0f       	add	r24, r24
    973c:	99 1f       	adc	r25, r25
    973e:	88 0f       	add	r24, r24
    9740:	99 1f       	adc	r25, r25
    9742:	9c 01       	movw	r18, r24
    9744:	89 81       	ldd	r24, Y+1	; 0x01
    9746:	88 2f       	mov	r24, r24
    9748:	90 e0       	ldi	r25, 0x00	; 0
    974a:	8e 50       	subi	r24, 0x0E	; 14
    974c:	9b 4f       	sbci	r25, 0xFB	; 251
    974e:	fc 01       	movw	r30, r24
    9750:	80 81       	ld	r24, Z
    9752:	08 2e       	mov	r0, r24
    9754:	00 0c       	add	r0, r0
    9756:	99 0b       	sbc	r25, r25
    9758:	28 0f       	add	r18, r24
    975a:	39 1f       	adc	r19, r25
    975c:	c9 01       	movw	r24, r18
    975e:	88 0f       	add	r24, r24
    9760:	99 1f       	adc	r25, r25
    9762:	82 0f       	add	r24, r18
    9764:	93 1f       	adc	r25, r19
    9766:	8e 59       	subi	r24, 0x9E	; 158
    9768:	9b 4f       	sbci	r25, 0xFB	; 251
    976a:	fc 01       	movw	r30, r24
    976c:	80 81       	ld	r24, Z
    976e:	86 fb       	bst	r24, 6
    9770:	88 27       	eor	r24, r24
    9772:	80 f9       	bld	r24, 0
    9774:	88 23       	and	r24, r24
    9776:	09 f4       	brne	.+2      	; 0x977a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    9778:	51 c0       	rjmp	.+162    	; 0x981c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    977a:	89 81       	ldd	r24, Y+1	; 0x01
    977c:	28 2f       	mov	r18, r24
    977e:	30 e0       	ldi	r19, 0x00	; 0
    9780:	c9 01       	movw	r24, r18
    9782:	88 0f       	add	r24, r24
    9784:	99 1f       	adc	r25, r25
    9786:	82 0f       	add	r24, r18
    9788:	93 1f       	adc	r25, r19
    978a:	88 0f       	add	r24, r24
    978c:	99 1f       	adc	r25, r25
    978e:	88 0f       	add	r24, r24
    9790:	99 1f       	adc	r25, r25
    9792:	9c 01       	movw	r18, r24
    9794:	89 81       	ldd	r24, Y+1	; 0x01
    9796:	88 2f       	mov	r24, r24
    9798:	90 e0       	ldi	r25, 0x00	; 0
    979a:	8e 50       	subi	r24, 0x0E	; 14
    979c:	9b 4f       	sbci	r25, 0xFB	; 251
    979e:	fc 01       	movw	r30, r24
    97a0:	80 81       	ld	r24, Z
    97a2:	08 2e       	mov	r0, r24
    97a4:	00 0c       	add	r0, r0
    97a6:	99 0b       	sbc	r25, r25
    97a8:	28 0f       	add	r18, r24
    97aa:	39 1f       	adc	r19, r25
    97ac:	c9 01       	movw	r24, r18
    97ae:	88 0f       	add	r24, r24
    97b0:	99 1f       	adc	r25, r25
    97b2:	82 0f       	add	r24, r18
    97b4:	93 1f       	adc	r25, r19
    97b6:	8e 59       	subi	r24, 0x9E	; 158
    97b8:	9b 4f       	sbci	r25, 0xFB	; 251
    97ba:	fc 01       	movw	r30, r24
    97bc:	80 81       	ld	r24, Z
    97be:	8f 73       	andi	r24, 0x3F	; 63
    97c0:	61 e0       	ldi	r22, 0x01	; 1
    97c2:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    97c6:	2a c0       	rjmp	.+84     	; 0x981c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    97c8:	8a 81       	ldd	r24, Y+2	; 0x02
    97ca:	9b 81       	ldd	r25, Y+3	; 0x03
    97cc:	fc 01       	movw	r30, r24
    97ce:	80 81       	ld	r24, Z
    97d0:	91 81       	ldd	r25, Z+1	; 0x01
    97d2:	04 96       	adiw	r24, 0x04	; 4
    97d4:	21 e0       	ldi	r18, 0x01	; 1
    97d6:	80 34       	cpi	r24, 0x40	; 64
    97d8:	9c 49       	sbci	r25, 0x9C	; 156
    97da:	08 f0       	brcs	.+2      	; 0x97de <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    97dc:	20 e0       	ldi	r18, 0x00	; 0
    97de:	22 23       	and	r18, r18
    97e0:	41 f0       	breq	.+16     	; 0x97f2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    97e2:	8c 81       	ldd	r24, Y+4	; 0x04
    97e4:	9d 81       	ldd	r25, Y+5	; 0x05
    97e6:	20 e4       	ldi	r18, 0x40	; 64
    97e8:	3c e9       	ldi	r19, 0x9C	; 156
    97ea:	fc 01       	movw	r30, r24
    97ec:	31 83       	std	Z+1, r19	; 0x01
    97ee:	20 83       	st	Z, r18
    97f0:	0d c0       	rjmp	.+26     	; 0x980c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    97f2:	8a 81       	ldd	r24, Y+2	; 0x02
    97f4:	9b 81       	ldd	r25, Y+3	; 0x03
    97f6:	fc 01       	movw	r30, r24
    97f8:	80 81       	ld	r24, Z
    97fa:	91 81       	ldd	r25, Z+1	; 0x01
    97fc:	9c 01       	movw	r18, r24
    97fe:	2c 5f       	subi	r18, 0xFC	; 252
    9800:	3f 4f       	sbci	r19, 0xFF	; 255
    9802:	8c 81       	ldd	r24, Y+4	; 0x04
    9804:	9d 81       	ldd	r25, Y+5	; 0x05
    9806:	fc 01       	movw	r30, r24
    9808:	31 83       	std	Z+1, r19	; 0x01
    980a:	20 83       	st	Z, r18
    980c:	89 81       	ldd	r24, Y+1	; 0x01
    980e:	88 2f       	mov	r24, r24
    9810:	90 e0       	ldi	r25, 0x00	; 0
    9812:	8e 50       	subi	r24, 0x0E	; 14
    9814:	9b 4f       	sbci	r25, 0xFB	; 251
    9816:	2f ef       	ldi	r18, 0xFF	; 255
    9818:	fc 01       	movw	r30, r24
    981a:	20 83       	st	Z, r18
    981c:	00 00       	nop
    981e:	0f 90       	pop	r0
    9820:	0f 90       	pop	r0
    9822:	0f 90       	pop	r0
    9824:	0f 90       	pop	r0
    9826:	0f 90       	pop	r0
    9828:	df 91       	pop	r29
    982a:	cf 91       	pop	r28
    982c:	08 95       	ret

0000982e <__vector_17>:
    982e:	1f 92       	push	r1
    9830:	0f 92       	push	r0
    9832:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9836:	0f 92       	push	r0
    9838:	11 24       	eor	r1, r1
    983a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    983e:	0f 92       	push	r0
    9840:	2f 93       	push	r18
    9842:	3f 93       	push	r19
    9844:	4f 93       	push	r20
    9846:	5f 93       	push	r21
    9848:	6f 93       	push	r22
    984a:	7f 93       	push	r23
    984c:	8f 93       	push	r24
    984e:	9f 93       	push	r25
    9850:	af 93       	push	r26
    9852:	bf 93       	push	r27
    9854:	ef 93       	push	r30
    9856:	ff 93       	push	r31
    9858:	cf 93       	push	r28
    985a:	df 93       	push	r29
    985c:	cd b7       	in	r28, 0x3d	; 61
    985e:	de b7       	in	r29, 0x3e	; 62
    9860:	48 e8       	ldi	r20, 0x88	; 136
    9862:	50 e0       	ldi	r21, 0x00	; 0
    9864:	64 e8       	ldi	r22, 0x84	; 132
    9866:	70 e0       	ldi	r23, 0x00	; 0
    9868:	81 e0       	ldi	r24, 0x01	; 1
    986a:	63 de       	rcall	.-826    	; 0x9532 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    986c:	00 00       	nop
    986e:	df 91       	pop	r29
    9870:	cf 91       	pop	r28
    9872:	ff 91       	pop	r31
    9874:	ef 91       	pop	r30
    9876:	bf 91       	pop	r27
    9878:	af 91       	pop	r26
    987a:	9f 91       	pop	r25
    987c:	8f 91       	pop	r24
    987e:	7f 91       	pop	r23
    9880:	6f 91       	pop	r22
    9882:	5f 91       	pop	r21
    9884:	4f 91       	pop	r20
    9886:	3f 91       	pop	r19
    9888:	2f 91       	pop	r18
    988a:	0f 90       	pop	r0
    988c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9890:	0f 90       	pop	r0
    9892:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9896:	0f 90       	pop	r0
    9898:	1f 90       	pop	r1
    989a:	18 95       	reti

0000989c <__vector_32>:
    989c:	1f 92       	push	r1
    989e:	0f 92       	push	r0
    98a0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    98a4:	0f 92       	push	r0
    98a6:	11 24       	eor	r1, r1
    98a8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    98ac:	0f 92       	push	r0
    98ae:	2f 93       	push	r18
    98b0:	3f 93       	push	r19
    98b2:	4f 93       	push	r20
    98b4:	5f 93       	push	r21
    98b6:	6f 93       	push	r22
    98b8:	7f 93       	push	r23
    98ba:	8f 93       	push	r24
    98bc:	9f 93       	push	r25
    98be:	af 93       	push	r26
    98c0:	bf 93       	push	r27
    98c2:	ef 93       	push	r30
    98c4:	ff 93       	push	r31
    98c6:	cf 93       	push	r28
    98c8:	df 93       	push	r29
    98ca:	cd b7       	in	r28, 0x3d	; 61
    98cc:	de b7       	in	r29, 0x3e	; 62
    98ce:	48 e9       	ldi	r20, 0x98	; 152
    98d0:	50 e0       	ldi	r21, 0x00	; 0
    98d2:	64 e9       	ldi	r22, 0x94	; 148
    98d4:	70 e0       	ldi	r23, 0x00	; 0
    98d6:	82 e0       	ldi	r24, 0x02	; 2
    98d8:	2c de       	rcall	.-936    	; 0x9532 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    98da:	00 00       	nop
    98dc:	df 91       	pop	r29
    98de:	cf 91       	pop	r28
    98e0:	ff 91       	pop	r31
    98e2:	ef 91       	pop	r30
    98e4:	bf 91       	pop	r27
    98e6:	af 91       	pop	r26
    98e8:	9f 91       	pop	r25
    98ea:	8f 91       	pop	r24
    98ec:	7f 91       	pop	r23
    98ee:	6f 91       	pop	r22
    98f0:	5f 91       	pop	r21
    98f2:	4f 91       	pop	r20
    98f4:	3f 91       	pop	r19
    98f6:	2f 91       	pop	r18
    98f8:	0f 90       	pop	r0
    98fa:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    98fe:	0f 90       	pop	r0
    9900:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9904:	0f 90       	pop	r0
    9906:	1f 90       	pop	r1
    9908:	18 95       	reti

0000990a <__vector_42>:
    990a:	1f 92       	push	r1
    990c:	0f 92       	push	r0
    990e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9912:	0f 92       	push	r0
    9914:	11 24       	eor	r1, r1
    9916:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    991a:	0f 92       	push	r0
    991c:	2f 93       	push	r18
    991e:	3f 93       	push	r19
    9920:	4f 93       	push	r20
    9922:	5f 93       	push	r21
    9924:	6f 93       	push	r22
    9926:	7f 93       	push	r23
    9928:	8f 93       	push	r24
    992a:	9f 93       	push	r25
    992c:	af 93       	push	r26
    992e:	bf 93       	push	r27
    9930:	ef 93       	push	r30
    9932:	ff 93       	push	r31
    9934:	cf 93       	push	r28
    9936:	df 93       	push	r29
    9938:	cd b7       	in	r28, 0x3d	; 61
    993a:	de b7       	in	r29, 0x3e	; 62
    993c:	48 ea       	ldi	r20, 0xA8	; 168
    993e:	50 e0       	ldi	r21, 0x00	; 0
    9940:	64 ea       	ldi	r22, 0xA4	; 164
    9942:	70 e0       	ldi	r23, 0x00	; 0
    9944:	83 e0       	ldi	r24, 0x03	; 3
    9946:	f5 dd       	rcall	.-1046   	; 0x9532 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    9948:	00 00       	nop
    994a:	df 91       	pop	r29
    994c:	cf 91       	pop	r28
    994e:	ff 91       	pop	r31
    9950:	ef 91       	pop	r30
    9952:	bf 91       	pop	r27
    9954:	af 91       	pop	r26
    9956:	9f 91       	pop	r25
    9958:	8f 91       	pop	r24
    995a:	7f 91       	pop	r23
    995c:	6f 91       	pop	r22
    995e:	5f 91       	pop	r21
    9960:	4f 91       	pop	r20
    9962:	3f 91       	pop	r19
    9964:	2f 91       	pop	r18
    9966:	0f 90       	pop	r0
    9968:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    996c:	0f 90       	pop	r0
    996e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9972:	0f 90       	pop	r0
    9974:	1f 90       	pop	r1
    9976:	18 95       	reti

00009978 <__vector_47>:
    9978:	1f 92       	push	r1
    997a:	0f 92       	push	r0
    997c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9980:	0f 92       	push	r0
    9982:	11 24       	eor	r1, r1
    9984:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9988:	0f 92       	push	r0
    998a:	2f 93       	push	r18
    998c:	3f 93       	push	r19
    998e:	4f 93       	push	r20
    9990:	5f 93       	push	r21
    9992:	6f 93       	push	r22
    9994:	7f 93       	push	r23
    9996:	8f 93       	push	r24
    9998:	9f 93       	push	r25
    999a:	af 93       	push	r26
    999c:	bf 93       	push	r27
    999e:	ef 93       	push	r30
    99a0:	ff 93       	push	r31
    99a2:	cf 93       	push	r28
    99a4:	df 93       	push	r29
    99a6:	cd b7       	in	r28, 0x3d	; 61
    99a8:	de b7       	in	r29, 0x3e	; 62
    99aa:	48 e2       	ldi	r20, 0x28	; 40
    99ac:	51 e0       	ldi	r21, 0x01	; 1
    99ae:	64 e2       	ldi	r22, 0x24	; 36
    99b0:	71 e0       	ldi	r23, 0x01	; 1
    99b2:	80 e0       	ldi	r24, 0x00	; 0
    99b4:	be dd       	rcall	.-1156   	; 0x9532 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    99b6:	00 00       	nop
    99b8:	df 91       	pop	r29
    99ba:	cf 91       	pop	r28
    99bc:	ff 91       	pop	r31
    99be:	ef 91       	pop	r30
    99c0:	bf 91       	pop	r27
    99c2:	af 91       	pop	r26
    99c4:	9f 91       	pop	r25
    99c6:	8f 91       	pop	r24
    99c8:	7f 91       	pop	r23
    99ca:	6f 91       	pop	r22
    99cc:	5f 91       	pop	r21
    99ce:	4f 91       	pop	r20
    99d0:	3f 91       	pop	r19
    99d2:	2f 91       	pop	r18
    99d4:	0f 90       	pop	r0
    99d6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    99da:	0f 90       	pop	r0
    99dc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    99e0:	0f 90       	pop	r0
    99e2:	1f 90       	pop	r1
    99e4:	18 95       	reti

000099e6 <_ZL7initISR18timer16_Sequence_t>:
    99e6:	cf 93       	push	r28
    99e8:	df 93       	push	r29
    99ea:	1f 92       	push	r1
    99ec:	cd b7       	in	r28, 0x3d	; 61
    99ee:	de b7       	in	r29, 0x3e	; 62
    99f0:	89 83       	std	Y+1, r24	; 0x01
    99f2:	89 81       	ldd	r24, Y+1	; 0x01
    99f4:	81 30       	cpi	r24, 0x01	; 1
    99f6:	01 f5       	brne	.+64     	; 0x9a38 <_ZL7initISR18timer16_Sequence_t+0x52>
    99f8:	80 e8       	ldi	r24, 0x80	; 128
    99fa:	90 e0       	ldi	r25, 0x00	; 0
    99fc:	fc 01       	movw	r30, r24
    99fe:	10 82       	st	Z, r1
    9a00:	81 e8       	ldi	r24, 0x81	; 129
    9a02:	90 e0       	ldi	r25, 0x00	; 0
    9a04:	22 e0       	ldi	r18, 0x02	; 2
    9a06:	fc 01       	movw	r30, r24
    9a08:	20 83       	st	Z, r18
    9a0a:	84 e8       	ldi	r24, 0x84	; 132
    9a0c:	90 e0       	ldi	r25, 0x00	; 0
    9a0e:	fc 01       	movw	r30, r24
    9a10:	11 82       	std	Z+1, r1	; 0x01
    9a12:	10 82       	st	Z, r1
    9a14:	86 e3       	ldi	r24, 0x36	; 54
    9a16:	90 e0       	ldi	r25, 0x00	; 0
    9a18:	26 e3       	ldi	r18, 0x36	; 54
    9a1a:	30 e0       	ldi	r19, 0x00	; 0
    9a1c:	f9 01       	movw	r30, r18
    9a1e:	20 81       	ld	r18, Z
    9a20:	22 60       	ori	r18, 0x02	; 2
    9a22:	fc 01       	movw	r30, r24
    9a24:	20 83       	st	Z, r18
    9a26:	8f e6       	ldi	r24, 0x6F	; 111
    9a28:	90 e0       	ldi	r25, 0x00	; 0
    9a2a:	2f e6       	ldi	r18, 0x6F	; 111
    9a2c:	30 e0       	ldi	r19, 0x00	; 0
    9a2e:	f9 01       	movw	r30, r18
    9a30:	20 81       	ld	r18, Z
    9a32:	22 60       	ori	r18, 0x02	; 2
    9a34:	fc 01       	movw	r30, r24
    9a36:	20 83       	st	Z, r18
    9a38:	89 81       	ldd	r24, Y+1	; 0x01
    9a3a:	82 30       	cpi	r24, 0x02	; 2
    9a3c:	c1 f4       	brne	.+48     	; 0x9a6e <_ZL7initISR18timer16_Sequence_t+0x88>
    9a3e:	80 e9       	ldi	r24, 0x90	; 144
    9a40:	90 e0       	ldi	r25, 0x00	; 0
    9a42:	fc 01       	movw	r30, r24
    9a44:	10 82       	st	Z, r1
    9a46:	81 e9       	ldi	r24, 0x91	; 145
    9a48:	90 e0       	ldi	r25, 0x00	; 0
    9a4a:	22 e0       	ldi	r18, 0x02	; 2
    9a4c:	fc 01       	movw	r30, r24
    9a4e:	20 83       	st	Z, r18
    9a50:	84 e9       	ldi	r24, 0x94	; 148
    9a52:	90 e0       	ldi	r25, 0x00	; 0
    9a54:	fc 01       	movw	r30, r24
    9a56:	11 82       	std	Z+1, r1	; 0x01
    9a58:	10 82       	st	Z, r1
    9a5a:	88 e3       	ldi	r24, 0x38	; 56
    9a5c:	90 e0       	ldi	r25, 0x00	; 0
    9a5e:	22 e0       	ldi	r18, 0x02	; 2
    9a60:	fc 01       	movw	r30, r24
    9a62:	20 83       	st	Z, r18
    9a64:	81 e7       	ldi	r24, 0x71	; 113
    9a66:	90 e0       	ldi	r25, 0x00	; 0
    9a68:	22 e0       	ldi	r18, 0x02	; 2
    9a6a:	fc 01       	movw	r30, r24
    9a6c:	20 83       	st	Z, r18
    9a6e:	89 81       	ldd	r24, Y+1	; 0x01
    9a70:	83 30       	cpi	r24, 0x03	; 3
    9a72:	c1 f4       	brne	.+48     	; 0x9aa4 <_ZL7initISR18timer16_Sequence_t+0xbe>
    9a74:	80 ea       	ldi	r24, 0xA0	; 160
    9a76:	90 e0       	ldi	r25, 0x00	; 0
    9a78:	fc 01       	movw	r30, r24
    9a7a:	10 82       	st	Z, r1
    9a7c:	81 ea       	ldi	r24, 0xA1	; 161
    9a7e:	90 e0       	ldi	r25, 0x00	; 0
    9a80:	22 e0       	ldi	r18, 0x02	; 2
    9a82:	fc 01       	movw	r30, r24
    9a84:	20 83       	st	Z, r18
    9a86:	84 ea       	ldi	r24, 0xA4	; 164
    9a88:	90 e0       	ldi	r25, 0x00	; 0
    9a8a:	fc 01       	movw	r30, r24
    9a8c:	11 82       	std	Z+1, r1	; 0x01
    9a8e:	10 82       	st	Z, r1
    9a90:	89 e3       	ldi	r24, 0x39	; 57
    9a92:	90 e0       	ldi	r25, 0x00	; 0
    9a94:	22 e0       	ldi	r18, 0x02	; 2
    9a96:	fc 01       	movw	r30, r24
    9a98:	20 83       	st	Z, r18
    9a9a:	82 e7       	ldi	r24, 0x72	; 114
    9a9c:	90 e0       	ldi	r25, 0x00	; 0
    9a9e:	22 e0       	ldi	r18, 0x02	; 2
    9aa0:	fc 01       	movw	r30, r24
    9aa2:	20 83       	st	Z, r18
    9aa4:	89 81       	ldd	r24, Y+1	; 0x01
    9aa6:	88 23       	and	r24, r24
    9aa8:	c1 f4       	brne	.+48     	; 0x9ada <_ZL7initISR18timer16_Sequence_t+0xf4>
    9aaa:	80 e2       	ldi	r24, 0x20	; 32
    9aac:	91 e0       	ldi	r25, 0x01	; 1
    9aae:	fc 01       	movw	r30, r24
    9ab0:	10 82       	st	Z, r1
    9ab2:	81 e2       	ldi	r24, 0x21	; 33
    9ab4:	91 e0       	ldi	r25, 0x01	; 1
    9ab6:	22 e0       	ldi	r18, 0x02	; 2
    9ab8:	fc 01       	movw	r30, r24
    9aba:	20 83       	st	Z, r18
    9abc:	84 e2       	ldi	r24, 0x24	; 36
    9abe:	91 e0       	ldi	r25, 0x01	; 1
    9ac0:	fc 01       	movw	r30, r24
    9ac2:	11 82       	std	Z+1, r1	; 0x01
    9ac4:	10 82       	st	Z, r1
    9ac6:	8a e3       	ldi	r24, 0x3A	; 58
    9ac8:	90 e0       	ldi	r25, 0x00	; 0
    9aca:	22 e0       	ldi	r18, 0x02	; 2
    9acc:	fc 01       	movw	r30, r24
    9ace:	20 83       	st	Z, r18
    9ad0:	83 e7       	ldi	r24, 0x73	; 115
    9ad2:	90 e0       	ldi	r25, 0x00	; 0
    9ad4:	22 e0       	ldi	r18, 0x02	; 2
    9ad6:	fc 01       	movw	r30, r24
    9ad8:	20 83       	st	Z, r18
    9ada:	00 00       	nop
    9adc:	0f 90       	pop	r0
    9ade:	df 91       	pop	r29
    9ae0:	cf 91       	pop	r28
    9ae2:	08 95       	ret

00009ae4 <_ZL13isTimerActive18timer16_Sequence_t>:
    9ae4:	cf 93       	push	r28
    9ae6:	df 93       	push	r29
    9ae8:	1f 92       	push	r1
    9aea:	1f 92       	push	r1
    9aec:	cd b7       	in	r28, 0x3d	; 61
    9aee:	de b7       	in	r29, 0x3e	; 62
    9af0:	8a 83       	std	Y+2, r24	; 0x02
    9af2:	19 82       	std	Y+1, r1	; 0x01
    9af4:	89 81       	ldd	r24, Y+1	; 0x01
    9af6:	8c 30       	cpi	r24, 0x0C	; 12
    9af8:	30 f5       	brcc	.+76     	; 0x9b46 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    9afa:	8a 81       	ldd	r24, Y+2	; 0x02
    9afc:	28 2f       	mov	r18, r24
    9afe:	30 e0       	ldi	r19, 0x00	; 0
    9b00:	c9 01       	movw	r24, r18
    9b02:	88 0f       	add	r24, r24
    9b04:	99 1f       	adc	r25, r25
    9b06:	82 0f       	add	r24, r18
    9b08:	93 1f       	adc	r25, r19
    9b0a:	88 0f       	add	r24, r24
    9b0c:	99 1f       	adc	r25, r25
    9b0e:	88 0f       	add	r24, r24
    9b10:	99 1f       	adc	r25, r25
    9b12:	9c 01       	movw	r18, r24
    9b14:	89 81       	ldd	r24, Y+1	; 0x01
    9b16:	88 2f       	mov	r24, r24
    9b18:	90 e0       	ldi	r25, 0x00	; 0
    9b1a:	28 0f       	add	r18, r24
    9b1c:	39 1f       	adc	r19, r25
    9b1e:	c9 01       	movw	r24, r18
    9b20:	88 0f       	add	r24, r24
    9b22:	99 1f       	adc	r25, r25
    9b24:	82 0f       	add	r24, r18
    9b26:	93 1f       	adc	r25, r19
    9b28:	8e 59       	subi	r24, 0x9E	; 158
    9b2a:	9b 4f       	sbci	r25, 0xFB	; 251
    9b2c:	fc 01       	movw	r30, r24
    9b2e:	80 81       	ld	r24, Z
    9b30:	86 fb       	bst	r24, 6
    9b32:	88 27       	eor	r24, r24
    9b34:	80 f9       	bld	r24, 0
    9b36:	81 30       	cpi	r24, 0x01	; 1
    9b38:	11 f4       	brne	.+4      	; 0x9b3e <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    9b3a:	81 e0       	ldi	r24, 0x01	; 1
    9b3c:	05 c0       	rjmp	.+10     	; 0x9b48 <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    9b3e:	89 81       	ldd	r24, Y+1	; 0x01
    9b40:	8f 5f       	subi	r24, 0xFF	; 255
    9b42:	89 83       	std	Y+1, r24	; 0x01
    9b44:	d7 cf       	rjmp	.-82     	; 0x9af4 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    9b46:	80 e0       	ldi	r24, 0x00	; 0
    9b48:	0f 90       	pop	r0
    9b4a:	0f 90       	pop	r0
    9b4c:	df 91       	pop	r29
    9b4e:	cf 91       	pop	r28
    9b50:	08 95       	ret

00009b52 <_ZN5ServoC1Ev>:
    9b52:	cf 93       	push	r28
    9b54:	df 93       	push	r29
    9b56:	1f 92       	push	r1
    9b58:	1f 92       	push	r1
    9b5a:	cd b7       	in	r28, 0x3d	; 61
    9b5c:	de b7       	in	r29, 0x3e	; 62
    9b5e:	9a 83       	std	Y+2, r25	; 0x02
    9b60:	89 83       	std	Y+1, r24	; 0x01
    9b62:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <ServoCount>
    9b66:	80 33       	cpi	r24, 0x30	; 48
    9b68:	e8 f4       	brcc	.+58     	; 0x9ba4 <_ZN5ServoC1Ev+0x52>
    9b6a:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <ServoCount>
    9b6e:	81 e0       	ldi	r24, 0x01	; 1
    9b70:	82 0f       	add	r24, r18
    9b72:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <ServoCount>
    9b76:	89 81       	ldd	r24, Y+1	; 0x01
    9b78:	9a 81       	ldd	r25, Y+2	; 0x02
    9b7a:	fc 01       	movw	r30, r24
    9b7c:	20 83       	st	Z, r18
    9b7e:	89 81       	ldd	r24, Y+1	; 0x01
    9b80:	9a 81       	ldd	r25, Y+2	; 0x02
    9b82:	fc 01       	movw	r30, r24
    9b84:	80 81       	ld	r24, Z
    9b86:	28 2f       	mov	r18, r24
    9b88:	30 e0       	ldi	r19, 0x00	; 0
    9b8a:	c9 01       	movw	r24, r18
    9b8c:	88 0f       	add	r24, r24
    9b8e:	99 1f       	adc	r25, r25
    9b90:	82 0f       	add	r24, r18
    9b92:	93 1f       	adc	r25, r19
    9b94:	8d 59       	subi	r24, 0x9D	; 157
    9b96:	9b 4f       	sbci	r25, 0xFB	; 251
    9b98:	28 eb       	ldi	r18, 0xB8	; 184
    9b9a:	3b e0       	ldi	r19, 0x0B	; 11
    9b9c:	fc 01       	movw	r30, r24
    9b9e:	31 83       	std	Z+1, r19	; 0x01
    9ba0:	20 83       	st	Z, r18
    9ba2:	05 c0       	rjmp	.+10     	; 0x9bae <_ZN5ServoC1Ev+0x5c>
    9ba4:	89 81       	ldd	r24, Y+1	; 0x01
    9ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    9ba8:	2f ef       	ldi	r18, 0xFF	; 255
    9baa:	fc 01       	movw	r30, r24
    9bac:	20 83       	st	Z, r18
    9bae:	00 00       	nop
    9bb0:	0f 90       	pop	r0
    9bb2:	0f 90       	pop	r0
    9bb4:	df 91       	pop	r29
    9bb6:	cf 91       	pop	r28
    9bb8:	08 95       	ret

00009bba <_ZN5Servo6attachEi>:
    9bba:	cf 93       	push	r28
    9bbc:	df 93       	push	r29
    9bbe:	00 d0       	rcall	.+0      	; 0x9bc0 <_ZN5Servo6attachEi+0x6>
    9bc0:	1f 92       	push	r1
    9bc2:	cd b7       	in	r28, 0x3d	; 61
    9bc4:	de b7       	in	r29, 0x3e	; 62
    9bc6:	9a 83       	std	Y+2, r25	; 0x02
    9bc8:	89 83       	std	Y+1, r24	; 0x01
    9bca:	7c 83       	std	Y+4, r23	; 0x04
    9bcc:	6b 83       	std	Y+3, r22	; 0x03
    9bce:	6b 81       	ldd	r22, Y+3	; 0x03
    9bd0:	7c 81       	ldd	r23, Y+4	; 0x04
    9bd2:	89 81       	ldd	r24, Y+1	; 0x01
    9bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    9bd6:	20 e6       	ldi	r18, 0x60	; 96
    9bd8:	39 e0       	ldi	r19, 0x09	; 9
    9bda:	40 e2       	ldi	r20, 0x20	; 32
    9bdc:	52 e0       	ldi	r21, 0x02	; 2
    9bde:	07 d0       	rcall	.+14     	; 0x9bee <_ZN5Servo6attachEiii>
    9be0:	0f 90       	pop	r0
    9be2:	0f 90       	pop	r0
    9be4:	0f 90       	pop	r0
    9be6:	0f 90       	pop	r0
    9be8:	df 91       	pop	r29
    9bea:	cf 91       	pop	r28
    9bec:	08 95       	ret

00009bee <_ZN5Servo6attachEiii>:
    9bee:	cf 93       	push	r28
    9bf0:	df 93       	push	r29
    9bf2:	cd b7       	in	r28, 0x3d	; 61
    9bf4:	de b7       	in	r29, 0x3e	; 62
    9bf6:	29 97       	sbiw	r28, 0x09	; 9
    9bf8:	0f b6       	in	r0, 0x3f	; 63
    9bfa:	f8 94       	cli
    9bfc:	de bf       	out	0x3e, r29	; 62
    9bfe:	0f be       	out	0x3f, r0	; 63
    9c00:	cd bf       	out	0x3d, r28	; 61
    9c02:	9b 83       	std	Y+3, r25	; 0x03
    9c04:	8a 83       	std	Y+2, r24	; 0x02
    9c06:	7d 83       	std	Y+5, r23	; 0x05
    9c08:	6c 83       	std	Y+4, r22	; 0x04
    9c0a:	5f 83       	std	Y+7, r21	; 0x07
    9c0c:	4e 83       	std	Y+6, r20	; 0x06
    9c0e:	39 87       	std	Y+9, r19	; 0x09
    9c10:	28 87       	std	Y+8, r18	; 0x08
    9c12:	8a 81       	ldd	r24, Y+2	; 0x02
    9c14:	9b 81       	ldd	r25, Y+3	; 0x03
    9c16:	fc 01       	movw	r30, r24
    9c18:	80 81       	ld	r24, Z
    9c1a:	80 33       	cpi	r24, 0x30	; 48
    9c1c:	08 f0       	brcs	.+2      	; 0x9c20 <_ZN5Servo6attachEiii+0x32>
    9c1e:	6b c0       	rjmp	.+214    	; 0x9cf6 <_ZN5Servo6attachEiii+0x108>
    9c20:	8c 81       	ldd	r24, Y+4	; 0x04
    9c22:	61 e0       	ldi	r22, 0x01	; 1
    9c24:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    9c28:	8a 81       	ldd	r24, Y+2	; 0x02
    9c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    9c2c:	fc 01       	movw	r30, r24
    9c2e:	80 81       	ld	r24, Z
    9c30:	28 2f       	mov	r18, r24
    9c32:	30 e0       	ldi	r19, 0x00	; 0
    9c34:	8c 81       	ldd	r24, Y+4	; 0x04
    9c36:	48 2f       	mov	r20, r24
    9c38:	4f 73       	andi	r20, 0x3F	; 63
    9c3a:	c9 01       	movw	r24, r18
    9c3c:	88 0f       	add	r24, r24
    9c3e:	99 1f       	adc	r25, r25
    9c40:	82 0f       	add	r24, r18
    9c42:	93 1f       	adc	r25, r19
    9c44:	8e 59       	subi	r24, 0x9E	; 158
    9c46:	9b 4f       	sbci	r25, 0xFB	; 251
    9c48:	24 2f       	mov	r18, r20
    9c4a:	2f 73       	andi	r18, 0x3F	; 63
    9c4c:	fc 01       	movw	r30, r24
    9c4e:	30 81       	ld	r19, Z
    9c50:	30 7c       	andi	r19, 0xC0	; 192
    9c52:	23 2b       	or	r18, r19
    9c54:	fc 01       	movw	r30, r24
    9c56:	20 83       	st	Z, r18
    9c58:	20 e2       	ldi	r18, 0x20	; 32
    9c5a:	32 e0       	ldi	r19, 0x02	; 2
    9c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    9c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    9c60:	a9 01       	movw	r20, r18
    9c62:	48 1b       	sub	r20, r24
    9c64:	59 0b       	sbc	r21, r25
    9c66:	ca 01       	movw	r24, r20
    9c68:	99 23       	and	r25, r25
    9c6a:	0c f4       	brge	.+2      	; 0x9c6e <_ZN5Servo6attachEiii+0x80>
    9c6c:	03 96       	adiw	r24, 0x03	; 3
    9c6e:	95 95       	asr	r25
    9c70:	87 95       	ror	r24
    9c72:	95 95       	asr	r25
    9c74:	87 95       	ror	r24
    9c76:	28 2f       	mov	r18, r24
    9c78:	8a 81       	ldd	r24, Y+2	; 0x02
    9c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    9c7c:	fc 01       	movw	r30, r24
    9c7e:	21 83       	std	Z+1, r18	; 0x01
    9c80:	20 e6       	ldi	r18, 0x60	; 96
    9c82:	39 e0       	ldi	r19, 0x09	; 9
    9c84:	88 85       	ldd	r24, Y+8	; 0x08
    9c86:	99 85       	ldd	r25, Y+9	; 0x09
    9c88:	a9 01       	movw	r20, r18
    9c8a:	48 1b       	sub	r20, r24
    9c8c:	59 0b       	sbc	r21, r25
    9c8e:	ca 01       	movw	r24, r20
    9c90:	99 23       	and	r25, r25
    9c92:	0c f4       	brge	.+2      	; 0x9c96 <_ZN5Servo6attachEiii+0xa8>
    9c94:	03 96       	adiw	r24, 0x03	; 3
    9c96:	95 95       	asr	r25
    9c98:	87 95       	ror	r24
    9c9a:	95 95       	asr	r25
    9c9c:	87 95       	ror	r24
    9c9e:	28 2f       	mov	r18, r24
    9ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    9ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    9ca4:	fc 01       	movw	r30, r24
    9ca6:	22 83       	std	Z+2, r18	; 0x02
    9ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    9caa:	9b 81       	ldd	r25, Y+3	; 0x03
    9cac:	fc 01       	movw	r30, r24
    9cae:	90 81       	ld	r25, Z
    9cb0:	8b ea       	ldi	r24, 0xAB	; 171
    9cb2:	98 9f       	mul	r25, r24
    9cb4:	81 2d       	mov	r24, r1
    9cb6:	11 24       	eor	r1, r1
    9cb8:	86 95       	lsr	r24
    9cba:	86 95       	lsr	r24
    9cbc:	86 95       	lsr	r24
    9cbe:	89 83       	std	Y+1, r24	; 0x01
    9cc0:	89 81       	ldd	r24, Y+1	; 0x01
    9cc2:	10 df       	rcall	.-480    	; 0x9ae4 <_ZL13isTimerActive18timer16_Sequence_t>
    9cc4:	98 2f       	mov	r25, r24
    9cc6:	81 e0       	ldi	r24, 0x01	; 1
    9cc8:	89 27       	eor	r24, r25
    9cca:	88 23       	and	r24, r24
    9ccc:	11 f0       	breq	.+4      	; 0x9cd2 <_ZN5Servo6attachEiii+0xe4>
    9cce:	89 81       	ldd	r24, Y+1	; 0x01
    9cd0:	8a de       	rcall	.-748    	; 0x99e6 <_ZL7initISR18timer16_Sequence_t>
    9cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    9cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    9cd6:	fc 01       	movw	r30, r24
    9cd8:	80 81       	ld	r24, Z
    9cda:	28 2f       	mov	r18, r24
    9cdc:	30 e0       	ldi	r19, 0x00	; 0
    9cde:	c9 01       	movw	r24, r18
    9ce0:	88 0f       	add	r24, r24
    9ce2:	99 1f       	adc	r25, r25
    9ce4:	82 0f       	add	r24, r18
    9ce6:	93 1f       	adc	r25, r19
    9ce8:	8e 59       	subi	r24, 0x9E	; 158
    9cea:	9b 4f       	sbci	r25, 0xFB	; 251
    9cec:	fc 01       	movw	r30, r24
    9cee:	20 81       	ld	r18, Z
    9cf0:	20 64       	ori	r18, 0x40	; 64
    9cf2:	fc 01       	movw	r30, r24
    9cf4:	20 83       	st	Z, r18
    9cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    9cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    9cfa:	fc 01       	movw	r30, r24
    9cfc:	80 81       	ld	r24, Z
    9cfe:	29 96       	adiw	r28, 0x09	; 9
    9d00:	0f b6       	in	r0, 0x3f	; 63
    9d02:	f8 94       	cli
    9d04:	de bf       	out	0x3e, r29	; 62
    9d06:	0f be       	out	0x3f, r0	; 63
    9d08:	cd bf       	out	0x3d, r28	; 61
    9d0a:	df 91       	pop	r29
    9d0c:	cf 91       	pop	r28
    9d0e:	08 95       	ret

00009d10 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    9d10:	6f 92       	push	r6
    9d12:	7f 92       	push	r7
    9d14:	8f 92       	push	r8
    9d16:	9f 92       	push	r9
    9d18:	af 92       	push	r10
    9d1a:	bf 92       	push	r11
    9d1c:	cf 92       	push	r12
    9d1e:	df 92       	push	r13
    9d20:	ef 92       	push	r14
    9d22:	ff 92       	push	r15
    9d24:	0f 93       	push	r16
    9d26:	1f 93       	push	r17
    9d28:	cf 93       	push	r28
    9d2a:	df 93       	push	r29
    9d2c:	00 d0       	rcall	.+0      	; 0x9d2e <_ZN5Servo5writeEi+0x1e>
    9d2e:	1f 92       	push	r1
    9d30:	cd b7       	in	r28, 0x3d	; 61
    9d32:	de b7       	in	r29, 0x3e	; 62
    9d34:	9a 83       	std	Y+2, r25	; 0x02
    9d36:	89 83       	std	Y+1, r24	; 0x01
    9d38:	7c 83       	std	Y+4, r23	; 0x04
    9d3a:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    9d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    9d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    9d40:	80 32       	cpi	r24, 0x20	; 32
    9d42:	92 40       	sbci	r25, 0x02	; 2
    9d44:	0c f0       	brlt	.+2      	; 0x9d48 <_ZN5Servo5writeEi+0x38>
    9d46:	5c c0       	rjmp	.+184    	; 0x9e00 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    9d48:	8b 81       	ldd	r24, Y+3	; 0x03
    9d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    9d4c:	99 23       	and	r25, r25
    9d4e:	14 f4       	brge	.+4      	; 0x9d54 <_ZN5Servo5writeEi+0x44>
    9d50:	1c 82       	std	Y+4, r1	; 0x04
    9d52:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    9d54:	8b 81       	ldd	r24, Y+3	; 0x03
    9d56:	9c 81       	ldd	r25, Y+4	; 0x04
    9d58:	85 3b       	cpi	r24, 0xB5	; 181
    9d5a:	91 05       	cpc	r25, r1
    9d5c:	24 f0       	brlt	.+8      	; 0x9d66 <_ZN5Servo5writeEi+0x56>
    9d5e:	84 eb       	ldi	r24, 0xB4	; 180
    9d60:	90 e0       	ldi	r25, 0x00	; 0
    9d62:	9c 83       	std	Y+4, r25	; 0x04
    9d64:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    9d66:	89 81       	ldd	r24, Y+1	; 0x01
    9d68:	9a 81       	ldd	r25, Y+2	; 0x02
    9d6a:	fc 01       	movw	r30, r24
    9d6c:	82 81       	ldd	r24, Z+2	; 0x02
    9d6e:	08 2e       	mov	r0, r24
    9d70:	00 0c       	add	r0, r0
    9d72:	99 0b       	sbc	r25, r25
    9d74:	28 e5       	ldi	r18, 0x58	; 88
    9d76:	32 e0       	ldi	r19, 0x02	; 2
    9d78:	a9 01       	movw	r20, r18
    9d7a:	48 1b       	sub	r20, r24
    9d7c:	59 0b       	sbc	r21, r25
    9d7e:	ca 01       	movw	r24, r20
    9d80:	88 0f       	add	r24, r24
    9d82:	99 1f       	adc	r25, r25
    9d84:	88 0f       	add	r24, r24
    9d86:	99 1f       	adc	r25, r25
    9d88:	09 2e       	mov	r0, r25
    9d8a:	00 0c       	add	r0, r0
    9d8c:	aa 0b       	sbc	r26, r26
    9d8e:	bb 0b       	sbc	r27, r27
    9d90:	29 81       	ldd	r18, Y+1	; 0x01
    9d92:	3a 81       	ldd	r19, Y+2	; 0x02
    9d94:	f9 01       	movw	r30, r18
    9d96:	21 81       	ldd	r18, Z+1	; 0x01
    9d98:	02 2e       	mov	r0, r18
    9d9a:	00 0c       	add	r0, r0
    9d9c:	33 0b       	sbc	r19, r19
    9d9e:	48 e8       	ldi	r20, 0x88	; 136
    9da0:	50 e0       	ldi	r21, 0x00	; 0
    9da2:	ba 01       	movw	r22, r20
    9da4:	62 1b       	sub	r22, r18
    9da6:	73 0b       	sbc	r23, r19
    9da8:	9b 01       	movw	r18, r22
    9daa:	22 0f       	add	r18, r18
    9dac:	33 1f       	adc	r19, r19
    9dae:	22 0f       	add	r18, r18
    9db0:	33 1f       	adc	r19, r19
    9db2:	03 2e       	mov	r0, r19
    9db4:	00 0c       	add	r0, r0
    9db6:	44 0b       	sbc	r20, r20
    9db8:	55 0b       	sbc	r21, r21
    9dba:	6b 81       	ldd	r22, Y+3	; 0x03
    9dbc:	7c 81       	ldd	r23, Y+4	; 0x04
    9dbe:	3b 01       	movw	r6, r22
    9dc0:	77 0f       	add	r23, r23
    9dc2:	88 08       	sbc	r8, r8
    9dc4:	99 08       	sbc	r9, r9
    9dc6:	6b 2f       	mov	r22, r27
    9dc8:	6f 93       	push	r22
    9dca:	6a 2f       	mov	r22, r26
    9dcc:	6f 93       	push	r22
    9dce:	69 2f       	mov	r22, r25
    9dd0:	6f 93       	push	r22
    9dd2:	8f 93       	push	r24
    9dd4:	59 01       	movw	r10, r18
    9dd6:	6a 01       	movw	r12, r20
    9dd8:	14 eb       	ldi	r17, 0xB4	; 180
    9dda:	e1 2e       	mov	r14, r17
    9ddc:	f1 2c       	mov	r15, r1
    9dde:	00 e0       	ldi	r16, 0x00	; 0
    9de0:	10 e0       	ldi	r17, 0x00	; 0
    9de2:	20 e0       	ldi	r18, 0x00	; 0
    9de4:	30 e0       	ldi	r19, 0x00	; 0
    9de6:	a9 01       	movw	r20, r18
    9de8:	c4 01       	movw	r24, r8
    9dea:	b3 01       	movw	r22, r6
    9dec:	0e 94 50 61 	call	0xc2a0	; 0xc2a0 <_Z3maplllll>
    9df0:	0f 90       	pop	r0
    9df2:	0f 90       	pop	r0
    9df4:	0f 90       	pop	r0
    9df6:	0f 90       	pop	r0
    9df8:	dc 01       	movw	r26, r24
    9dfa:	cb 01       	movw	r24, r22
    9dfc:	9c 83       	std	Y+4, r25	; 0x04
    9dfe:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    9e00:	2b 81       	ldd	r18, Y+3	; 0x03
    9e02:	3c 81       	ldd	r19, Y+4	; 0x04
    9e04:	89 81       	ldd	r24, Y+1	; 0x01
    9e06:	9a 81       	ldd	r25, Y+2	; 0x02
    9e08:	b9 01       	movw	r22, r18
    9e0a:	14 d0       	rcall	.+40     	; 0x9e34 <_ZN5Servo17writeMicrosecondsEi>
}
    9e0c:	00 00       	nop
    9e0e:	0f 90       	pop	r0
    9e10:	0f 90       	pop	r0
    9e12:	0f 90       	pop	r0
    9e14:	0f 90       	pop	r0
    9e16:	df 91       	pop	r29
    9e18:	cf 91       	pop	r28
    9e1a:	1f 91       	pop	r17
    9e1c:	0f 91       	pop	r16
    9e1e:	ff 90       	pop	r15
    9e20:	ef 90       	pop	r14
    9e22:	df 90       	pop	r13
    9e24:	cf 90       	pop	r12
    9e26:	bf 90       	pop	r11
    9e28:	af 90       	pop	r10
    9e2a:	9f 90       	pop	r9
    9e2c:	8f 90       	pop	r8
    9e2e:	7f 90       	pop	r7
    9e30:	6f 90       	pop	r6
    9e32:	08 95       	ret

00009e34 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    9e34:	cf 93       	push	r28
    9e36:	df 93       	push	r29
    9e38:	00 d0       	rcall	.+0      	; 0x9e3a <_ZN5Servo17writeMicrosecondsEi+0x6>
    9e3a:	00 d0       	rcall	.+0      	; 0x9e3c <_ZN5Servo17writeMicrosecondsEi+0x8>
    9e3c:	cd b7       	in	r28, 0x3d	; 61
    9e3e:	de b7       	in	r29, 0x3e	; 62
    9e40:	9c 83       	std	Y+4, r25	; 0x04
    9e42:	8b 83       	std	Y+3, r24	; 0x03
    9e44:	7e 83       	std	Y+6, r23	; 0x06
    9e46:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    9e48:	8b 81       	ldd	r24, Y+3	; 0x03
    9e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    9e4c:	fc 01       	movw	r30, r24
    9e4e:	80 81       	ld	r24, Z
    9e50:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    9e52:	89 81       	ldd	r24, Y+1	; 0x01
    9e54:	80 33       	cpi	r24, 0x30	; 48
    9e56:	08 f0       	brcs	.+2      	; 0x9e5a <_ZN5Servo17writeMicrosecondsEi+0x26>
    9e58:	99 c0       	rjmp	.+306    	; 0x9f8c <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    9e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    9e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    9e5e:	fc 01       	movw	r30, r24
    9e60:	81 81       	ldd	r24, Z+1	; 0x01
    9e62:	08 2e       	mov	r0, r24
    9e64:	00 0c       	add	r0, r0
    9e66:	99 0b       	sbc	r25, r25
    9e68:	28 e8       	ldi	r18, 0x88	; 136
    9e6a:	30 e0       	ldi	r19, 0x00	; 0
    9e6c:	a9 01       	movw	r20, r18
    9e6e:	48 1b       	sub	r20, r24
    9e70:	59 0b       	sbc	r21, r25
    9e72:	ca 01       	movw	r24, r20
    9e74:	9c 01       	movw	r18, r24
    9e76:	22 0f       	add	r18, r18
    9e78:	33 1f       	adc	r19, r19
    9e7a:	22 0f       	add	r18, r18
    9e7c:	33 1f       	adc	r19, r19
    9e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    9e80:	9e 81       	ldd	r25, Y+6	; 0x06
    9e82:	82 17       	cp	r24, r18
    9e84:	93 07       	cpc	r25, r19
    9e86:	a4 f4       	brge	.+40     	; 0x9eb0 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    9e88:	8b 81       	ldd	r24, Y+3	; 0x03
    9e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    9e8c:	fc 01       	movw	r30, r24
    9e8e:	81 81       	ldd	r24, Z+1	; 0x01
    9e90:	08 2e       	mov	r0, r24
    9e92:	00 0c       	add	r0, r0
    9e94:	99 0b       	sbc	r25, r25
    9e96:	28 e8       	ldi	r18, 0x88	; 136
    9e98:	30 e0       	ldi	r19, 0x00	; 0
    9e9a:	a9 01       	movw	r20, r18
    9e9c:	48 1b       	sub	r20, r24
    9e9e:	59 0b       	sbc	r21, r25
    9ea0:	ca 01       	movw	r24, r20
    9ea2:	88 0f       	add	r24, r24
    9ea4:	99 1f       	adc	r25, r25
    9ea6:	88 0f       	add	r24, r24
    9ea8:	99 1f       	adc	r25, r25
    9eaa:	9e 83       	std	Y+6, r25	; 0x06
    9eac:	8d 83       	std	Y+5, r24	; 0x05
    9eae:	2a c0       	rjmp	.+84     	; 0x9f04 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    9eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    9eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    9eb4:	fc 01       	movw	r30, r24
    9eb6:	82 81       	ldd	r24, Z+2	; 0x02
    9eb8:	08 2e       	mov	r0, r24
    9eba:	00 0c       	add	r0, r0
    9ebc:	99 0b       	sbc	r25, r25
    9ebe:	28 e5       	ldi	r18, 0x58	; 88
    9ec0:	32 e0       	ldi	r19, 0x02	; 2
    9ec2:	a9 01       	movw	r20, r18
    9ec4:	48 1b       	sub	r20, r24
    9ec6:	59 0b       	sbc	r21, r25
    9ec8:	ca 01       	movw	r24, r20
    9eca:	9c 01       	movw	r18, r24
    9ecc:	22 0f       	add	r18, r18
    9ece:	33 1f       	adc	r19, r19
    9ed0:	22 0f       	add	r18, r18
    9ed2:	33 1f       	adc	r19, r19
    9ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    9ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    9ed8:	28 17       	cp	r18, r24
    9eda:	39 07       	cpc	r19, r25
    9edc:	9c f4       	brge	.+38     	; 0x9f04 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    9ede:	8b 81       	ldd	r24, Y+3	; 0x03
    9ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    9ee2:	fc 01       	movw	r30, r24
    9ee4:	82 81       	ldd	r24, Z+2	; 0x02
    9ee6:	08 2e       	mov	r0, r24
    9ee8:	00 0c       	add	r0, r0
    9eea:	99 0b       	sbc	r25, r25
    9eec:	28 e5       	ldi	r18, 0x58	; 88
    9eee:	32 e0       	ldi	r19, 0x02	; 2
    9ef0:	a9 01       	movw	r20, r18
    9ef2:	48 1b       	sub	r20, r24
    9ef4:	59 0b       	sbc	r21, r25
    9ef6:	ca 01       	movw	r24, r20
    9ef8:	88 0f       	add	r24, r24
    9efa:	99 1f       	adc	r25, r25
    9efc:	88 0f       	add	r24, r24
    9efe:	99 1f       	adc	r25, r25
    9f00:	9e 83       	std	Y+6, r25	; 0x06
    9f02:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    9f04:	8d 81       	ldd	r24, Y+5	; 0x05
    9f06:	9e 81       	ldd	r25, Y+6	; 0x06
    9f08:	02 97       	sbiw	r24, 0x02	; 2
    9f0a:	9e 83       	std	Y+6, r25	; 0x06
    9f0c:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    9f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    9f10:	9e 81       	ldd	r25, Y+6	; 0x06
    9f12:	09 2e       	mov	r0, r25
    9f14:	00 0c       	add	r0, r0
    9f16:	aa 0b       	sbc	r26, r26
    9f18:	bb 0b       	sbc	r27, r27
    9f1a:	88 0f       	add	r24, r24
    9f1c:	99 1f       	adc	r25, r25
    9f1e:	aa 1f       	adc	r26, r26
    9f20:	bb 1f       	adc	r27, r27
    9f22:	88 0f       	add	r24, r24
    9f24:	99 1f       	adc	r25, r25
    9f26:	aa 1f       	adc	r26, r26
    9f28:	bb 1f       	adc	r27, r27
    9f2a:	88 0f       	add	r24, r24
    9f2c:	99 1f       	adc	r25, r25
    9f2e:	aa 1f       	adc	r26, r26
    9f30:	bb 1f       	adc	r27, r27
    9f32:	88 0f       	add	r24, r24
    9f34:	99 1f       	adc	r25, r25
    9f36:	aa 1f       	adc	r26, r26
    9f38:	bb 1f       	adc	r27, r27
    9f3a:	bb 23       	and	r27, r27
    9f3c:	1c f4       	brge	.+6      	; 0x9f44 <_ZN5Servo17writeMicrosecondsEi+0x110>
    9f3e:	07 96       	adiw	r24, 0x07	; 7
    9f40:	a1 1d       	adc	r26, r1
    9f42:	b1 1d       	adc	r27, r1
    9f44:	68 94       	set
    9f46:	12 f8       	bld	r1, 2
    9f48:	b5 95       	asr	r27
    9f4a:	a7 95       	ror	r26
    9f4c:	97 95       	ror	r25
    9f4e:	87 95       	ror	r24
    9f50:	16 94       	lsr	r1
    9f52:	d1 f7       	brne	.-12     	; 0x9f48 <_ZN5Servo17writeMicrosecondsEi+0x114>
    9f54:	9e 83       	std	Y+6, r25	; 0x06
    9f56:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    9f58:	8f e5       	ldi	r24, 0x5F	; 95
    9f5a:	90 e0       	ldi	r25, 0x00	; 0
    9f5c:	fc 01       	movw	r30, r24
    9f5e:	80 81       	ld	r24, Z
    9f60:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    9f62:	f8 94       	cli
    servos[channel].ticks = value;
    9f64:	89 81       	ldd	r24, Y+1	; 0x01
    9f66:	28 2f       	mov	r18, r24
    9f68:	30 e0       	ldi	r19, 0x00	; 0
    9f6a:	4d 81       	ldd	r20, Y+5	; 0x05
    9f6c:	5e 81       	ldd	r21, Y+6	; 0x06
    9f6e:	c9 01       	movw	r24, r18
    9f70:	88 0f       	add	r24, r24
    9f72:	99 1f       	adc	r25, r25
    9f74:	82 0f       	add	r24, r18
    9f76:	93 1f       	adc	r25, r19
    9f78:	8d 59       	subi	r24, 0x9D	; 157
    9f7a:	9b 4f       	sbci	r25, 0xFB	; 251
    9f7c:	fc 01       	movw	r30, r24
    9f7e:	51 83       	std	Z+1, r21	; 0x01
    9f80:	40 83       	st	Z, r20
    SREG = oldSREG;
    9f82:	8f e5       	ldi	r24, 0x5F	; 95
    9f84:	90 e0       	ldi	r25, 0x00	; 0
    9f86:	2a 81       	ldd	r18, Y+2	; 0x02
    9f88:	fc 01       	movw	r30, r24
    9f8a:	20 83       	st	Z, r18
  }
}
    9f8c:	00 00       	nop
    9f8e:	26 96       	adiw	r28, 0x06	; 6
    9f90:	0f b6       	in	r0, 0x3f	; 63
    9f92:	f8 94       	cli
    9f94:	de bf       	out	0x3e, r29	; 62
    9f96:	0f be       	out	0x3f, r0	; 63
    9f98:	cd bf       	out	0x3d, r28	; 61
    9f9a:	df 91       	pop	r29
    9f9c:	cf 91       	pop	r28
    9f9e:	08 95       	ret

00009fa0 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    9fa0:	cf 93       	push	r28
    9fa2:	df 93       	push	r29
    9fa4:	cd b7       	in	r28, 0x3d	; 61
    9fa6:	de b7       	in	r29, 0x3e	; 62
    9fa8:	2f 97       	sbiw	r28, 0x0f	; 15
    9faa:	0f b6       	in	r0, 0x3f	; 63
    9fac:	f8 94       	cli
    9fae:	de bf       	out	0x3e, r29	; 62
    9fb0:	0f be       	out	0x3f, r0	; 63
    9fb2:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    9fb4:	8f e5       	ldi	r24, 0x5F	; 95
    9fb6:	90 e0       	ldi	r25, 0x00	; 0
    9fb8:	fc 01       	movw	r30, r24
    9fba:	80 81       	ld	r24, Z
    9fbc:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    9fbe:	f8 94       	cli
  if (!initialized) {
    9fc0:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <_ZN8SPIClass11initializedE>
    9fc4:	88 23       	and	r24, r24
    9fc6:	09 f0       	breq	.+2      	; 0x9fca <_ZN8SPIClass5beginEv+0x2a>
    9fc8:	5b c0       	rjmp	.+182    	; 0xa080 <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    9fca:	84 e2       	ldi	r24, 0x24	; 36
    9fcc:	9c e0       	ldi	r25, 0x0C	; 12
    9fce:	9b 83       	std	Y+3, r25	; 0x03
    9fd0:	8a 83       	std	Y+2, r24	; 0x02
    9fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    9fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    9fd6:	fc 01       	movw	r30, r24
    9fd8:	84 91       	lpm	r24, Z
    9fda:	8c 83       	std	Y+4, r24	; 0x04
    9fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    9fde:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    9fe0:	8e ed       	ldi	r24, 0xDE	; 222
    9fe2:	9b e0       	ldi	r25, 0x0B	; 11
    9fe4:	9f 83       	std	Y+7, r25	; 0x07
    9fe6:	8e 83       	std	Y+6, r24	; 0x06
    9fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    9fea:	9f 81       	ldd	r25, Y+7	; 0x07
    9fec:	fc 01       	movw	r30, r24
    9fee:	84 91       	lpm	r24, Z
    9ff0:	88 87       	std	Y+8, r24	; 0x08
    9ff2:	88 85       	ldd	r24, Y+8	; 0x08
    9ff4:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    9ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    9ff8:	88 2f       	mov	r24, r24
    9ffa:	90 e0       	ldi	r25, 0x00	; 0
    9ffc:	88 0f       	add	r24, r24
    9ffe:	99 1f       	adc	r25, r25
    a000:	87 59       	subi	r24, 0x97	; 151
    a002:	93 4f       	sbci	r25, 0xF3	; 243
    a004:	9b 87       	std	Y+11, r25	; 0x0b
    a006:	8a 87       	std	Y+10, r24	; 0x0a
    a008:	8a 85       	ldd	r24, Y+10	; 0x0a
    a00a:	9b 85       	ldd	r25, Y+11	; 0x0b
    a00c:	fc 01       	movw	r30, r24
    a00e:	25 91       	lpm	r18, Z+
    a010:	34 91       	lpm	r19, Z
    a012:	cf 01       	movw	r24, r30
    a014:	3d 87       	std	Y+13, r19	; 0x0d
    a016:	2c 87       	std	Y+12, r18	; 0x0c
    a018:	9b 87       	std	Y+11, r25	; 0x0b
    a01a:	8a 87       	std	Y+10, r24	; 0x0a
    a01c:	8c 85       	ldd	r24, Y+12	; 0x0c
    a01e:	9d 85       	ldd	r25, Y+13	; 0x0d
    a020:	9f 87       	std	Y+15, r25	; 0x0f
    a022:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    a024:	8e 85       	ldd	r24, Y+14	; 0x0e
    a026:	9f 85       	ldd	r25, Y+15	; 0x0f
    a028:	fc 01       	movw	r30, r24
    a02a:	90 81       	ld	r25, Z
    a02c:	89 85       	ldd	r24, Y+9	; 0x09
    a02e:	98 23       	and	r25, r24
    a030:	81 e0       	ldi	r24, 0x01	; 1
    a032:	99 23       	and	r25, r25
    a034:	09 f0       	breq	.+2      	; 0xa038 <_ZN8SPIClass5beginEv+0x98>
    a036:	80 e0       	ldi	r24, 0x00	; 0
    a038:	88 23       	and	r24, r24
    a03a:	21 f0       	breq	.+8      	; 0xa044 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    a03c:	61 e0       	ldi	r22, 0x01	; 1
    a03e:	85 e3       	ldi	r24, 0x35	; 53
    a040:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    a044:	61 e0       	ldi	r22, 0x01	; 1
    a046:	85 e3       	ldi	r24, 0x35	; 53
    a048:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    a04c:	8c e4       	ldi	r24, 0x4C	; 76
    a04e:	90 e0       	ldi	r25, 0x00	; 0
    a050:	2c e4       	ldi	r18, 0x4C	; 76
    a052:	30 e0       	ldi	r19, 0x00	; 0
    a054:	f9 01       	movw	r30, r18
    a056:	20 81       	ld	r18, Z
    a058:	20 61       	ori	r18, 0x10	; 16
    a05a:	fc 01       	movw	r30, r24
    a05c:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    a05e:	8c e4       	ldi	r24, 0x4C	; 76
    a060:	90 e0       	ldi	r25, 0x00	; 0
    a062:	2c e4       	ldi	r18, 0x4C	; 76
    a064:	30 e0       	ldi	r19, 0x00	; 0
    a066:	f9 01       	movw	r30, r18
    a068:	20 81       	ld	r18, Z
    a06a:	20 64       	ori	r18, 0x40	; 64
    a06c:	fc 01       	movw	r30, r24
    a06e:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    a070:	61 e0       	ldi	r22, 0x01	; 1
    a072:	84 e3       	ldi	r24, 0x34	; 52
    a074:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
    pinMode(MOSI, OUTPUT);
    a078:	61 e0       	ldi	r22, 0x01	; 1
    a07a:	83 e3       	ldi	r24, 0x33	; 51
    a07c:	0e 94 8c 60 	call	0xc118	; 0xc118 <pinMode>
  }
  initialized++; // reference count
    a080:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <_ZN8SPIClass11initializedE>
    a084:	8f 5f       	subi	r24, 0xFF	; 255
    a086:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    a08a:	8f e5       	ldi	r24, 0x5F	; 95
    a08c:	90 e0       	ldi	r25, 0x00	; 0
    a08e:	29 81       	ldd	r18, Y+1	; 0x01
    a090:	fc 01       	movw	r30, r24
    a092:	20 83       	st	Z, r18
}
    a094:	00 00       	nop
    a096:	2f 96       	adiw	r28, 0x0f	; 15
    a098:	0f b6       	in	r0, 0x3f	; 63
    a09a:	f8 94       	cli
    a09c:	de bf       	out	0x3e, r29	; 62
    a09e:	0f be       	out	0x3f, r0	; 63
    a0a0:	cd bf       	out	0x3d, r28	; 61
    a0a2:	df 91       	pop	r29
    a0a4:	cf 91       	pop	r28
    a0a6:	08 95       	ret

0000a0a8 <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    a0a8:	1f 92       	push	r1
    a0aa:	0f 92       	push	r0
    a0ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a0b0:	0f 92       	push	r0
    a0b2:	11 24       	eor	r1, r1
    a0b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a0b8:	0f 92       	push	r0
    a0ba:	2f 93       	push	r18
    a0bc:	3f 93       	push	r19
    a0be:	4f 93       	push	r20
    a0c0:	5f 93       	push	r21
    a0c2:	6f 93       	push	r22
    a0c4:	7f 93       	push	r23
    a0c6:	8f 93       	push	r24
    a0c8:	9f 93       	push	r25
    a0ca:	af 93       	push	r26
    a0cc:	bf 93       	push	r27
    a0ce:	ef 93       	push	r30
    a0d0:	ff 93       	push	r31
    a0d2:	cf 93       	push	r28
    a0d4:	df 93       	push	r29
    a0d6:	cd b7       	in	r28, 0x3d	; 61
    a0d8:	de b7       	in	r29, 0x3e	; 62
  Timer1.isrCallback();
    a0da:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZN8TimerOne11isrCallbackE>
    a0de:	90 91 00 05 	lds	r25, 0x0500	; 0x800500 <_ZN8TimerOne11isrCallbackE+0x1>
    a0e2:	fc 01       	movw	r30, r24
    a0e4:	19 95       	eicall
}
    a0e6:	00 00       	nop
    a0e8:	df 91       	pop	r29
    a0ea:	cf 91       	pop	r28
    a0ec:	ff 91       	pop	r31
    a0ee:	ef 91       	pop	r30
    a0f0:	bf 91       	pop	r27
    a0f2:	af 91       	pop	r26
    a0f4:	9f 91       	pop	r25
    a0f6:	8f 91       	pop	r24
    a0f8:	7f 91       	pop	r23
    a0fa:	6f 91       	pop	r22
    a0fc:	5f 91       	pop	r21
    a0fe:	4f 91       	pop	r20
    a100:	3f 91       	pop	r19
    a102:	2f 91       	pop	r18
    a104:	0f 90       	pop	r0
    a106:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a10a:	0f 90       	pop	r0
    a10c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a110:	0f 90       	pop	r0
    a112:	1f 90       	pop	r1
    a114:	18 95       	reti

0000a116 <__vector_35>:
void (*TimerThree::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER3_OVF_vect)
{
    a116:	1f 92       	push	r1
    a118:	0f 92       	push	r0
    a11a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a11e:	0f 92       	push	r0
    a120:	11 24       	eor	r1, r1
    a122:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a126:	0f 92       	push	r0
    a128:	2f 93       	push	r18
    a12a:	3f 93       	push	r19
    a12c:	4f 93       	push	r20
    a12e:	5f 93       	push	r21
    a130:	6f 93       	push	r22
    a132:	7f 93       	push	r23
    a134:	8f 93       	push	r24
    a136:	9f 93       	push	r25
    a138:	af 93       	push	r26
    a13a:	bf 93       	push	r27
    a13c:	ef 93       	push	r30
    a13e:	ff 93       	push	r31
    a140:	cf 93       	push	r28
    a142:	df 93       	push	r29
    a144:	cd b7       	in	r28, 0x3d	; 61
    a146:	de b7       	in	r29, 0x3e	; 62
  Timer3.isrCallback();
    a148:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <_ZN10TimerThree11isrCallbackE>
    a14c:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <_ZN10TimerThree11isrCallbackE+0x1>
    a150:	fc 01       	movw	r30, r24
    a152:	19 95       	eicall
}
    a154:	00 00       	nop
    a156:	df 91       	pop	r29
    a158:	cf 91       	pop	r28
    a15a:	ff 91       	pop	r31
    a15c:	ef 91       	pop	r30
    a15e:	bf 91       	pop	r27
    a160:	af 91       	pop	r26
    a162:	9f 91       	pop	r25
    a164:	8f 91       	pop	r24
    a166:	7f 91       	pop	r23
    a168:	6f 91       	pop	r22
    a16a:	5f 91       	pop	r21
    a16c:	4f 91       	pop	r20
    a16e:	3f 91       	pop	r19
    a170:	2f 91       	pop	r18
    a172:	0f 90       	pop	r0
    a174:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a178:	0f 90       	pop	r0
    a17a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a17e:	0f 90       	pop	r0
    a180:	1f 90       	pop	r1
    a182:	18 95       	reti

0000a184 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    a184:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <twi_state>
    a188:	81 e0       	ldi	r24, 0x01	; 1
    a18a:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <twi_sendStop>
    a18e:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <twi_inRepStart>
    a192:	61 e0       	ldi	r22, 0x01	; 1
    a194:	84 e1       	ldi	r24, 0x14	; 20
    a196:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    a19a:	61 e0       	ldi	r22, 0x01	; 1
    a19c:	85 e1       	ldi	r24, 0x15	; 21
    a19e:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    a1a2:	e9 eb       	ldi	r30, 0xB9	; 185
    a1a4:	f0 e0       	ldi	r31, 0x00	; 0
    a1a6:	80 81       	ld	r24, Z
    a1a8:	8e 7f       	andi	r24, 0xFE	; 254
    a1aa:	80 83       	st	Z, r24
    a1ac:	80 81       	ld	r24, Z
    a1ae:	8d 7f       	andi	r24, 0xFD	; 253
    a1b0:	80 83       	st	Z, r24
    a1b2:	88 e4       	ldi	r24, 0x48	; 72
    a1b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a1b8:	85 e4       	ldi	r24, 0x45	; 69
    a1ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a1be:	08 95       	ret

0000a1c0 <twi_disable>:
    a1c0:	ec eb       	ldi	r30, 0xBC	; 188
    a1c2:	f0 e0       	ldi	r31, 0x00	; 0
    a1c4:	80 81       	ld	r24, Z
    a1c6:	8a 7b       	andi	r24, 0xBA	; 186
    a1c8:	80 83       	st	Z, r24
    a1ca:	60 e0       	ldi	r22, 0x00	; 0
    a1cc:	84 e1       	ldi	r24, 0x14	; 20
    a1ce:	0e 94 c8 60 	call	0xc190	; 0xc190 <digitalWrite>
    a1d2:	60 e0       	ldi	r22, 0x00	; 0
    a1d4:	85 e1       	ldi	r24, 0x15	; 21
    a1d6:	0c 94 c8 60 	jmp	0xc190	; 0xc190 <digitalWrite>

0000a1da <twi_setFrequency>:
    a1da:	9b 01       	movw	r18, r22
    a1dc:	ac 01       	movw	r20, r24
    a1de:	60 e0       	ldi	r22, 0x00	; 0
    a1e0:	74 e2       	ldi	r23, 0x24	; 36
    a1e2:	84 ef       	ldi	r24, 0xF4	; 244
    a1e4:	90 e0       	ldi	r25, 0x00	; 0
    a1e6:	0e 94 0f 63 	call	0xc61e	; 0xc61e <__udivmodsi4>
    a1ea:	da 01       	movw	r26, r20
    a1ec:	c9 01       	movw	r24, r18
    a1ee:	40 97       	sbiw	r24, 0x10	; 16
    a1f0:	a1 09       	sbc	r26, r1
    a1f2:	b1 09       	sbc	r27, r1
    a1f4:	b6 95       	lsr	r27
    a1f6:	a7 95       	ror	r26
    a1f8:	97 95       	ror	r25
    a1fa:	87 95       	ror	r24
    a1fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a200:	08 95       	ret

0000a202 <twi_transmit>:
    a202:	40 91 25 05 	lds	r20, 0x0525	; 0x800525 <twi_txBufferLength>
    a206:	26 2f       	mov	r18, r22
    a208:	30 e0       	ldi	r19, 0x00	; 0
    a20a:	24 0f       	add	r18, r20
    a20c:	31 1d       	adc	r19, r1
    a20e:	21 32       	cpi	r18, 0x21	; 33
    a210:	31 05       	cpc	r19, r1
    a212:	dc f4       	brge	.+54     	; 0xa24a <twi_transmit+0x48>
    a214:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <twi_state>
    a218:	24 30       	cpi	r18, 0x04	; 4
    a21a:	c9 f4       	brne	.+50     	; 0xa24e <twi_transmit+0x4c>
    a21c:	fc 01       	movw	r30, r24
    a21e:	80 e0       	ldi	r24, 0x00	; 0
    a220:	90 e0       	ldi	r25, 0x00	; 0
    a222:	86 17       	cp	r24, r22
    a224:	58 f4       	brcc	.+22     	; 0xa23c <twi_transmit+0x3a>
    a226:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <twi_txBufferLength>
    a22a:	21 91       	ld	r18, Z+
    a22c:	dc 01       	movw	r26, r24
    a22e:	a9 5d       	subi	r26, 0xD9	; 217
    a230:	ba 4f       	sbci	r27, 0xFA	; 250
    a232:	a3 0f       	add	r26, r19
    a234:	b1 1d       	adc	r27, r1
    a236:	2c 93       	st	X, r18
    a238:	01 96       	adiw	r24, 0x01	; 1
    a23a:	f3 cf       	rjmp	.-26     	; 0xa222 <twi_transmit+0x20>
    a23c:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <twi_txBufferLength>
    a240:	68 0f       	add	r22, r24
    a242:	60 93 25 05 	sts	0x0525, r22	; 0x800525 <twi_txBufferLength>
    a246:	80 e0       	ldi	r24, 0x00	; 0
    a248:	08 95       	ret
    a24a:	81 e0       	ldi	r24, 0x01	; 1
    a24c:	08 95       	ret
    a24e:	82 e0       	ldi	r24, 0x02	; 2
    a250:	08 95       	ret

0000a252 <twi_attachSlaveRxEvent>:
    a252:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <twi_onSlaveReceive+0x1>
    a256:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_onSlaveReceive>
    a25a:	08 95       	ret

0000a25c <twi_attachSlaveTxEvent>:
    a25c:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <twi_onSlaveTransmit+0x1>
    a260:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <twi_onSlaveTransmit>
    a264:	08 95       	ret

0000a266 <twi_releaseBus>:
    a266:	85 ec       	ldi	r24, 0xC5	; 197
    a268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a26c:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <twi_state>
    a270:	08 95       	ret

0000a272 <twi_handleTimeout>:
    a272:	cf 93       	push	r28
    a274:	df 93       	push	r29
    a276:	91 e0       	ldi	r25, 0x01	; 1
    a278:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <twi_timed_out_flag>
    a27c:	88 23       	and	r24, r24
    a27e:	51 f0       	breq	.+20     	; 0xa294 <twi_handleTimeout+0x22>
    a280:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a284:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    a288:	9b df       	rcall	.-202    	; 0xa1c0 <twi_disable>
    a28a:	7c df       	rcall	.-264    	; 0xa184 <twi_init>
    a28c:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    a290:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a294:	df 91       	pop	r29
    a296:	cf 91       	pop	r28
    a298:	08 95       	ret

0000a29a <twi_readFrom>:
    a29a:	4f 92       	push	r4
    a29c:	5f 92       	push	r5
    a29e:	6f 92       	push	r6
    a2a0:	7f 92       	push	r7
    a2a2:	8f 92       	push	r8
    a2a4:	9f 92       	push	r9
    a2a6:	af 92       	push	r10
    a2a8:	bf 92       	push	r11
    a2aa:	cf 92       	push	r12
    a2ac:	df 92       	push	r13
    a2ae:	ef 92       	push	r14
    a2b0:	ff 92       	push	r15
    a2b2:	0f 93       	push	r16
    a2b4:	1f 93       	push	r17
    a2b6:	cf 93       	push	r28
    a2b8:	df 93       	push	r29
    a2ba:	f8 2e       	mov	r15, r24
    a2bc:	16 2f       	mov	r17, r22
    a2be:	07 2f       	mov	r16, r23
    a2c0:	c4 2f       	mov	r28, r20
    a2c2:	e2 2e       	mov	r14, r18
    a2c4:	41 32       	cpi	r20, 0x21	; 33
    a2c6:	08 f0       	brcs	.+2      	; 0xa2ca <twi_readFrom+0x30>
    a2c8:	bc c0       	rjmp	.+376    	; 0xa442 <twi_readFrom+0x1a8>
    a2ca:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a2ce:	4b 01       	movw	r8, r22
    a2d0:	5c 01       	movw	r10, r24
    a2d2:	d0 91 76 05 	lds	r29, 0x0576	; 0x800576 <twi_state>
    a2d6:	dd 23       	and	r29, r29
    a2d8:	29 f1       	breq	.+74     	; 0xa324 <twi_readFrom+0x8a>
    a2da:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_timeout_us>
    a2de:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a2e2:	a0 91 71 05 	lds	r26, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a2e6:	b0 91 72 05 	lds	r27, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a2ea:	89 2b       	or	r24, r25
    a2ec:	8a 2b       	or	r24, r26
    a2ee:	8b 2b       	or	r24, r27
    a2f0:	81 f3       	breq	.-32     	; 0xa2d2 <twi_readFrom+0x38>
    a2f2:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a2f6:	40 90 6f 05 	lds	r4, 0x056F	; 0x80056f <twi_timeout_us>
    a2fa:	50 90 70 05 	lds	r5, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a2fe:	60 90 71 05 	lds	r6, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a302:	70 90 72 05 	lds	r7, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a306:	dc 01       	movw	r26, r24
    a308:	cb 01       	movw	r24, r22
    a30a:	88 19       	sub	r24, r8
    a30c:	99 09       	sbc	r25, r9
    a30e:	aa 09       	sbc	r26, r10
    a310:	bb 09       	sbc	r27, r11
    a312:	48 16       	cp	r4, r24
    a314:	59 06       	cpc	r5, r25
    a316:	6a 06       	cpc	r6, r26
    a318:	7b 06       	cpc	r7, r27
    a31a:	d8 f6       	brcc	.-74     	; 0xa2d2 <twi_readFrom+0x38>
    a31c:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_do_reset_on_timeout>
    a320:	a8 df       	rcall	.-176    	; 0xa272 <twi_handleTimeout>
    a322:	8f c0       	rjmp	.+286    	; 0xa442 <twi_readFrom+0x1a8>
    a324:	81 e0       	ldi	r24, 0x01	; 1
    a326:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <twi_state>
    a32a:	e0 92 74 05 	sts	0x0574, r14	; 0x800574 <twi_sendStop>
    a32e:	9f ef       	ldi	r25, 0xFF	; 255
    a330:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <twi_error>
    a334:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <twi_masterBufferIndex>
    a338:	9c 0f       	add	r25, r28
    a33a:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <twi_masterBufferLength>
    a33e:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <twi_slarw>
    a342:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <twi_slarw>
    a346:	8f 2d       	mov	r24, r15
    a348:	88 0f       	add	r24, r24
    a34a:	89 2b       	or	r24, r25
    a34c:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <twi_slarw>
    a350:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_inRepStart>
    a354:	81 30       	cpi	r24, 0x01	; 1
    a356:	89 f5       	brne	.+98     	; 0xa3ba <twi_readFrom+0x120>
    a358:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <twi_inRepStart>
    a35c:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a360:	6b 01       	movw	r12, r22
    a362:	7c 01       	movw	r14, r24
    a364:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <twi_slarw>
    a368:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a36c:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_timeout_us>
    a370:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a374:	a0 91 71 05 	lds	r26, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a378:	b0 91 72 05 	lds	r27, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a37c:	89 2b       	or	r24, r25
    a37e:	8a 2b       	or	r24, r26
    a380:	8b 2b       	or	r24, r27
    a382:	a9 f0       	breq	.+42     	; 0xa3ae <twi_readFrom+0x114>
    a384:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a388:	80 90 6f 05 	lds	r8, 0x056F	; 0x80056f <twi_timeout_us>
    a38c:	90 90 70 05 	lds	r9, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a390:	a0 90 71 05 	lds	r10, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a394:	b0 90 72 05 	lds	r11, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a398:	dc 01       	movw	r26, r24
    a39a:	cb 01       	movw	r24, r22
    a39c:	8c 19       	sub	r24, r12
    a39e:	9d 09       	sbc	r25, r13
    a3a0:	ae 09       	sbc	r26, r14
    a3a2:	bf 09       	sbc	r27, r15
    a3a4:	88 16       	cp	r8, r24
    a3a6:	99 06       	cpc	r9, r25
    a3a8:	aa 06       	cpc	r10, r26
    a3aa:	bb 06       	cpc	r11, r27
    a3ac:	90 f1       	brcs	.+100    	; 0xa412 <twi_readFrom+0x178>
    a3ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a3b2:	83 fd       	sbrc	r24, 3
    a3b4:	d7 cf       	rjmp	.-82     	; 0xa364 <twi_readFrom+0xca>
    a3b6:	85 ec       	ldi	r24, 0xC5	; 197
    a3b8:	01 c0       	rjmp	.+2      	; 0xa3bc <twi_readFrom+0x122>
    a3ba:	85 ee       	ldi	r24, 0xE5	; 229
    a3bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a3c0:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a3c4:	6b 01       	movw	r12, r22
    a3c6:	7c 01       	movw	r14, r24
    a3c8:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <twi_state>
    a3cc:	81 30       	cpi	r24, 0x01	; 1
    a3ce:	29 f5       	brne	.+74     	; 0xa41a <twi_readFrom+0x180>
    a3d0:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_timeout_us>
    a3d4:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a3d8:	a0 91 71 05 	lds	r26, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a3dc:	b0 91 72 05 	lds	r27, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a3e0:	89 2b       	or	r24, r25
    a3e2:	8a 2b       	or	r24, r26
    a3e4:	8b 2b       	or	r24, r27
    a3e6:	81 f3       	breq	.-32     	; 0xa3c8 <twi_readFrom+0x12e>
    a3e8:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a3ec:	80 90 6f 05 	lds	r8, 0x056F	; 0x80056f <twi_timeout_us>
    a3f0:	90 90 70 05 	lds	r9, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a3f4:	a0 90 71 05 	lds	r10, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a3f8:	b0 90 72 05 	lds	r11, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a3fc:	dc 01       	movw	r26, r24
    a3fe:	cb 01       	movw	r24, r22
    a400:	8c 19       	sub	r24, r12
    a402:	9d 09       	sbc	r25, r13
    a404:	ae 09       	sbc	r26, r14
    a406:	bf 09       	sbc	r27, r15
    a408:	88 16       	cp	r8, r24
    a40a:	99 06       	cpc	r9, r25
    a40c:	aa 06       	cpc	r10, r26
    a40e:	bb 06       	cpc	r11, r27
    a410:	d8 f6       	brcc	.-74     	; 0xa3c8 <twi_readFrom+0x12e>
    a412:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_do_reset_on_timeout>
    a416:	2d df       	rcall	.-422    	; 0xa272 <twi_handleTimeout>
    a418:	15 c0       	rjmp	.+42     	; 0xa444 <twi_readFrom+0x1aa>
    a41a:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <twi_masterBufferIndex>
    a41e:	8c 17       	cp	r24, r28
    a420:	10 f4       	brcc	.+4      	; 0xa426 <twi_readFrom+0x18c>
    a422:	c0 91 48 05 	lds	r28, 0x0548	; 0x800548 <twi_masterBufferIndex>
    a426:	a9 e4       	ldi	r26, 0x49	; 73
    a428:	b5 e0       	ldi	r27, 0x05	; 5
    a42a:	91 2f       	mov	r25, r17
    a42c:	e1 2f       	mov	r30, r17
    a42e:	f0 2f       	mov	r31, r16
    a430:	8e 2f       	mov	r24, r30
    a432:	89 1b       	sub	r24, r25
    a434:	8c 17       	cp	r24, r28
    a436:	18 f4       	brcc	.+6      	; 0xa43e <twi_readFrom+0x1a4>
    a438:	8d 91       	ld	r24, X+
    a43a:	81 93       	st	Z+, r24
    a43c:	f9 cf       	rjmp	.-14     	; 0xa430 <twi_readFrom+0x196>
    a43e:	dc 2f       	mov	r29, r28
    a440:	01 c0       	rjmp	.+2      	; 0xa444 <twi_readFrom+0x1aa>
    a442:	d0 e0       	ldi	r29, 0x00	; 0
    a444:	8d 2f       	mov	r24, r29
    a446:	df 91       	pop	r29
    a448:	cf 91       	pop	r28
    a44a:	1f 91       	pop	r17
    a44c:	0f 91       	pop	r16
    a44e:	ff 90       	pop	r15
    a450:	ef 90       	pop	r14
    a452:	df 90       	pop	r13
    a454:	cf 90       	pop	r12
    a456:	bf 90       	pop	r11
    a458:	af 90       	pop	r10
    a45a:	9f 90       	pop	r9
    a45c:	8f 90       	pop	r8
    a45e:	7f 90       	pop	r7
    a460:	6f 90       	pop	r6
    a462:	5f 90       	pop	r5
    a464:	4f 90       	pop	r4
    a466:	08 95       	ret

0000a468 <twi_writeTo>:
    a468:	4f 92       	push	r4
    a46a:	5f 92       	push	r5
    a46c:	6f 92       	push	r6
    a46e:	7f 92       	push	r7
    a470:	8f 92       	push	r8
    a472:	9f 92       	push	r9
    a474:	af 92       	push	r10
    a476:	bf 92       	push	r11
    a478:	cf 92       	push	r12
    a47a:	df 92       	push	r13
    a47c:	ef 92       	push	r14
    a47e:	ff 92       	push	r15
    a480:	0f 93       	push	r16
    a482:	1f 93       	push	r17
    a484:	cf 93       	push	r28
    a486:	df 93       	push	r29
    a488:	41 32       	cpi	r20, 0x21	; 33
    a48a:	08 f0       	brcs	.+2      	; 0xa48e <twi_writeTo+0x26>
    a48c:	c5 c0       	rjmp	.+394    	; 0xa618 <twi_writeTo+0x1b0>
    a48e:	12 2f       	mov	r17, r18
    a490:	f4 2e       	mov	r15, r20
    a492:	d7 2e       	mov	r13, r23
    a494:	e6 2e       	mov	r14, r22
    a496:	d8 2f       	mov	r29, r24
    a498:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a49c:	4b 01       	movw	r8, r22
    a49e:	5c 01       	movw	r10, r24
    a4a0:	c0 91 76 05 	lds	r28, 0x0576	; 0x800576 <twi_state>
    a4a4:	cc 23       	and	r28, r28
    a4a6:	11 f1       	breq	.+68     	; 0xa4ec <twi_writeTo+0x84>
    a4a8:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_timeout_us>
    a4ac:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a4b0:	a0 91 71 05 	lds	r26, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a4b4:	b0 91 72 05 	lds	r27, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a4b8:	89 2b       	or	r24, r25
    a4ba:	8a 2b       	or	r24, r26
    a4bc:	8b 2b       	or	r24, r27
    a4be:	81 f3       	breq	.-32     	; 0xa4a0 <twi_writeTo+0x38>
    a4c0:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a4c4:	40 90 6f 05 	lds	r4, 0x056F	; 0x80056f <twi_timeout_us>
    a4c8:	50 90 70 05 	lds	r5, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a4cc:	60 90 71 05 	lds	r6, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a4d0:	70 90 72 05 	lds	r7, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a4d4:	dc 01       	movw	r26, r24
    a4d6:	cb 01       	movw	r24, r22
    a4d8:	88 19       	sub	r24, r8
    a4da:	99 09       	sbc	r25, r9
    a4dc:	aa 09       	sbc	r26, r10
    a4de:	bb 09       	sbc	r27, r11
    a4e0:	48 16       	cp	r4, r24
    a4e2:	59 06       	cpc	r5, r25
    a4e4:	6a 06       	cpc	r6, r26
    a4e6:	7b 06       	cpc	r7, r27
    a4e8:	d8 f6       	brcc	.-74     	; 0xa4a0 <twi_writeTo+0x38>
    a4ea:	83 c0       	rjmp	.+262    	; 0xa5f2 <twi_writeTo+0x18a>
    a4ec:	82 e0       	ldi	r24, 0x02	; 2
    a4ee:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <twi_state>
    a4f2:	00 93 74 05 	sts	0x0574, r16	; 0x800574 <twi_sendStop>
    a4f6:	8f ef       	ldi	r24, 0xFF	; 255
    a4f8:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <twi_error>
    a4fc:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <twi_masterBufferIndex>
    a500:	f0 92 47 05 	sts	0x0547, r15	; 0x800547 <twi_masterBufferLength>
    a504:	9e 2d       	mov	r25, r14
    a506:	a9 e4       	ldi	r26, 0x49	; 73
    a508:	b5 e0       	ldi	r27, 0x05	; 5
    a50a:	ee 2d       	mov	r30, r14
    a50c:	fd 2d       	mov	r31, r13
    a50e:	8e 2f       	mov	r24, r30
    a510:	89 1b       	sub	r24, r25
    a512:	8f 15       	cp	r24, r15
    a514:	18 f4       	brcc	.+6      	; 0xa51c <twi_writeTo+0xb4>
    a516:	81 91       	ld	r24, Z+
    a518:	8d 93       	st	X+, r24
    a51a:	f9 cf       	rjmp	.-14     	; 0xa50e <twi_writeTo+0xa6>
    a51c:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <twi_slarw>
    a520:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <twi_slarw>
    a524:	dd 0f       	add	r29, r29
    a526:	d9 2b       	or	r29, r25
    a528:	d0 93 75 05 	sts	0x0575, r29	; 0x800575 <twi_slarw>
    a52c:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_inRepStart>
    a530:	81 30       	cpi	r24, 0x01	; 1
    a532:	89 f5       	brne	.+98     	; 0xa596 <twi_writeTo+0x12e>
    a534:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <twi_inRepStart>
    a538:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a53c:	6b 01       	movw	r12, r22
    a53e:	7c 01       	movw	r14, r24
    a540:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <twi_slarw>
    a544:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a548:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_timeout_us>
    a54c:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a550:	a0 91 71 05 	lds	r26, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a554:	b0 91 72 05 	lds	r27, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a558:	89 2b       	or	r24, r25
    a55a:	8a 2b       	or	r24, r26
    a55c:	8b 2b       	or	r24, r27
    a55e:	a9 f0       	breq	.+42     	; 0xa58a <twi_writeTo+0x122>
    a560:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a564:	80 90 6f 05 	lds	r8, 0x056F	; 0x80056f <twi_timeout_us>
    a568:	90 90 70 05 	lds	r9, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a56c:	a0 90 71 05 	lds	r10, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a570:	b0 90 72 05 	lds	r11, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a574:	dc 01       	movw	r26, r24
    a576:	cb 01       	movw	r24, r22
    a578:	8c 19       	sub	r24, r12
    a57a:	9d 09       	sbc	r25, r13
    a57c:	ae 09       	sbc	r26, r14
    a57e:	bf 09       	sbc	r27, r15
    a580:	88 16       	cp	r8, r24
    a582:	99 06       	cpc	r9, r25
    a584:	aa 06       	cpc	r10, r26
    a586:	bb 06       	cpc	r11, r27
    a588:	a0 f1       	brcs	.+104    	; 0xa5f2 <twi_writeTo+0x18a>
    a58a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a58e:	83 fd       	sbrc	r24, 3
    a590:	d7 cf       	rjmp	.-82     	; 0xa540 <twi_writeTo+0xd8>
    a592:	85 ec       	ldi	r24, 0xC5	; 197
    a594:	01 c0       	rjmp	.+2      	; 0xa598 <twi_writeTo+0x130>
    a596:	85 ee       	ldi	r24, 0xE5	; 229
    a598:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a59c:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a5a0:	6b 01       	movw	r12, r22
    a5a2:	7c 01       	movw	r14, r24
    a5a4:	11 23       	and	r17, r17
    a5a6:	51 f1       	breq	.+84     	; 0xa5fc <twi_writeTo+0x194>
    a5a8:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <twi_state>
    a5ac:	82 30       	cpi	r24, 0x02	; 2
    a5ae:	31 f5       	brne	.+76     	; 0xa5fc <twi_writeTo+0x194>
    a5b0:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_timeout_us>
    a5b4:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a5b8:	a0 91 71 05 	lds	r26, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a5bc:	b0 91 72 05 	lds	r27, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a5c0:	89 2b       	or	r24, r25
    a5c2:	8a 2b       	or	r24, r26
    a5c4:	8b 2b       	or	r24, r27
    a5c6:	71 f3       	breq	.-36     	; 0xa5a4 <twi_writeTo+0x13c>
    a5c8:	0e 94 81 5e 	call	0xbd02	; 0xbd02 <micros>
    a5cc:	80 90 6f 05 	lds	r8, 0x056F	; 0x80056f <twi_timeout_us>
    a5d0:	90 90 70 05 	lds	r9, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a5d4:	a0 90 71 05 	lds	r10, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a5d8:	b0 90 72 05 	lds	r11, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a5dc:	dc 01       	movw	r26, r24
    a5de:	cb 01       	movw	r24, r22
    a5e0:	8c 19       	sub	r24, r12
    a5e2:	9d 09       	sbc	r25, r13
    a5e4:	ae 09       	sbc	r26, r14
    a5e6:	bf 09       	sbc	r27, r15
    a5e8:	88 16       	cp	r8, r24
    a5ea:	99 06       	cpc	r9, r25
    a5ec:	aa 06       	cpc	r10, r26
    a5ee:	bb 06       	cpc	r11, r27
    a5f0:	c8 f6       	brcc	.-78     	; 0xa5a4 <twi_writeTo+0x13c>
    a5f2:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_do_reset_on_timeout>
    a5f6:	3d de       	rcall	.-902    	; 0xa272 <twi_handleTimeout>
    a5f8:	c5 e0       	ldi	r28, 0x05	; 5
    a5fa:	13 c0       	rjmp	.+38     	; 0xa622 <twi_writeTo+0x1ba>
    a5fc:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <twi_error>
    a600:	8f 3f       	cpi	r24, 0xFF	; 255
    a602:	79 f0       	breq	.+30     	; 0xa622 <twi_writeTo+0x1ba>
    a604:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <twi_error>
    a608:	80 32       	cpi	r24, 0x20	; 32
    a60a:	41 f0       	breq	.+16     	; 0xa61c <twi_writeTo+0x1b4>
    a60c:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <twi_error>
    a610:	80 33       	cpi	r24, 0x30	; 48
    a612:	31 f0       	breq	.+12     	; 0xa620 <twi_writeTo+0x1b8>
    a614:	c4 e0       	ldi	r28, 0x04	; 4
    a616:	05 c0       	rjmp	.+10     	; 0xa622 <twi_writeTo+0x1ba>
    a618:	c1 e0       	ldi	r28, 0x01	; 1
    a61a:	03 c0       	rjmp	.+6      	; 0xa622 <twi_writeTo+0x1ba>
    a61c:	c2 e0       	ldi	r28, 0x02	; 2
    a61e:	01 c0       	rjmp	.+2      	; 0xa622 <twi_writeTo+0x1ba>
    a620:	c3 e0       	ldi	r28, 0x03	; 3
    a622:	8c 2f       	mov	r24, r28
    a624:	df 91       	pop	r29
    a626:	cf 91       	pop	r28
    a628:	1f 91       	pop	r17
    a62a:	0f 91       	pop	r16
    a62c:	ff 90       	pop	r15
    a62e:	ef 90       	pop	r14
    a630:	df 90       	pop	r13
    a632:	cf 90       	pop	r12
    a634:	bf 90       	pop	r11
    a636:	af 90       	pop	r10
    a638:	9f 90       	pop	r9
    a63a:	8f 90       	pop	r8
    a63c:	7f 90       	pop	r7
    a63e:	6f 90       	pop	r6
    a640:	5f 90       	pop	r5
    a642:	4f 90       	pop	r4
    a644:	08 95       	ret

0000a646 <twi_stop>:
    a646:	85 ed       	ldi	r24, 0xD5	; 213
    a648:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a64c:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <twi_timeout_us>
    a650:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a654:	a0 91 71 05 	lds	r26, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a658:	b0 91 72 05 	lds	r27, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a65c:	07 96       	adiw	r24, 0x07	; 7
    a65e:	a1 1d       	adc	r26, r1
    a660:	b1 1d       	adc	r27, r1
    a662:	23 e0       	ldi	r18, 0x03	; 3
    a664:	b6 95       	lsr	r27
    a666:	a7 95       	ror	r26
    a668:	97 95       	ror	r25
    a66a:	87 95       	ror	r24
    a66c:	2a 95       	dec	r18
    a66e:	d1 f7       	brne	.-12     	; 0xa664 <twi_stop+0x1e>
    a670:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a674:	24 ff       	sbrs	r18, 4
    a676:	1b c0       	rjmp	.+54     	; 0xa6ae <twi_stop+0x68>
    a678:	40 91 6f 05 	lds	r20, 0x056F	; 0x80056f <twi_timeout_us>
    a67c:	50 91 70 05 	lds	r21, 0x0570	; 0x800570 <twi_timeout_us+0x1>
    a680:	60 91 71 05 	lds	r22, 0x0571	; 0x800571 <twi_timeout_us+0x2>
    a684:	70 91 72 05 	lds	r23, 0x0572	; 0x800572 <twi_timeout_us+0x3>
    a688:	45 2b       	or	r20, r21
    a68a:	46 2b       	or	r20, r22
    a68c:	47 2b       	or	r20, r23
    a68e:	81 f3       	breq	.-32     	; 0xa670 <twi_stop+0x2a>
    a690:	00 97       	sbiw	r24, 0x00	; 0
    a692:	a1 05       	cpc	r26, r1
    a694:	b1 05       	cpc	r27, r1
    a696:	41 f0       	breq	.+16     	; 0xa6a8 <twi_stop+0x62>
    a698:	25 e3       	ldi	r18, 0x35	; 53
    a69a:	2a 95       	dec	r18
    a69c:	f1 f7       	brne	.-4      	; 0xa69a <twi_stop+0x54>
    a69e:	00 00       	nop
    a6a0:	01 97       	sbiw	r24, 0x01	; 1
    a6a2:	a1 09       	sbc	r26, r1
    a6a4:	b1 09       	sbc	r27, r1
    a6a6:	e4 cf       	rjmp	.-56     	; 0xa670 <twi_stop+0x2a>
    a6a8:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_do_reset_on_timeout>
    a6ac:	e2 cd       	rjmp	.-1084   	; 0xa272 <twi_handleTimeout>
    a6ae:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <twi_state>
    a6b2:	08 95       	ret

0000a6b4 <__vector_39>:

ISR(TWI_vect)
{
    a6b4:	1f 92       	push	r1
    a6b6:	0f 92       	push	r0
    a6b8:	0f b6       	in	r0, 0x3f	; 63
    a6ba:	0f 92       	push	r0
    a6bc:	11 24       	eor	r1, r1
    a6be:	0b b6       	in	r0, 0x3b	; 59
    a6c0:	0f 92       	push	r0
    a6c2:	2f 93       	push	r18
    a6c4:	3f 93       	push	r19
    a6c6:	4f 93       	push	r20
    a6c8:	5f 93       	push	r21
    a6ca:	6f 93       	push	r22
    a6cc:	7f 93       	push	r23
    a6ce:	8f 93       	push	r24
    a6d0:	9f 93       	push	r25
    a6d2:	af 93       	push	r26
    a6d4:	bf 93       	push	r27
    a6d6:	ef 93       	push	r30
    a6d8:	ff 93       	push	r31
  switch(TW_STATUS){
    a6da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    a6de:	88 7f       	andi	r24, 0xF8	; 248
    a6e0:	80 36       	cpi	r24, 0x60	; 96
    a6e2:	09 f4       	brne	.+2      	; 0xa6e6 <__vector_39+0x32>
    a6e4:	9d c0       	rjmp	.+314    	; 0xa820 <__vector_39+0x16c>
    a6e6:	70 f5       	brcc	.+92     	; 0xa744 <__vector_39+0x90>
    a6e8:	88 32       	cpi	r24, 0x28	; 40
    a6ea:	09 f4       	brne	.+2      	; 0xa6ee <__vector_39+0x3a>
    a6ec:	5c c0       	rjmp	.+184    	; 0xa7a6 <__vector_39+0xf2>
    a6ee:	90 f4       	brcc	.+36     	; 0xa714 <__vector_39+0x60>
    a6f0:	80 31       	cpi	r24, 0x10	; 16
    a6f2:	09 f4       	brne	.+2      	; 0xa6f6 <__vector_39+0x42>
    a6f4:	55 c0       	rjmp	.+170    	; 0xa7a0 <__vector_39+0xec>
    a6f6:	38 f4       	brcc	.+14     	; 0xa706 <__vector_39+0x52>
    a6f8:	88 23       	and	r24, r24
    a6fa:	09 f4       	brne	.+2      	; 0xa6fe <__vector_39+0x4a>
    a6fc:	f3 c0       	rjmp	.+486    	; 0xa8e4 <__vector_39+0x230>
    a6fe:	88 30       	cpi	r24, 0x08	; 8
    a700:	09 f4       	brne	.+2      	; 0xa704 <__vector_39+0x50>
    a702:	4e c0       	rjmp	.+156    	; 0xa7a0 <__vector_39+0xec>
    a704:	f2 c0       	rjmp	.+484    	; 0xa8ea <__vector_39+0x236>
    a706:	88 31       	cpi	r24, 0x18	; 24
    a708:	09 f4       	brne	.+2      	; 0xa70c <__vector_39+0x58>
    a70a:	4d c0       	rjmp	.+154    	; 0xa7a6 <__vector_39+0xf2>
    a70c:	80 32       	cpi	r24, 0x20	; 32
    a70e:	09 f4       	brne	.+2      	; 0xa712 <__vector_39+0x5e>
    a710:	5e c0       	rjmp	.+188    	; 0xa7ce <__vector_39+0x11a>
    a712:	eb c0       	rjmp	.+470    	; 0xa8ea <__vector_39+0x236>
    a714:	80 34       	cpi	r24, 0x40	; 64
    a716:	09 f4       	brne	.+2      	; 0xa71a <__vector_39+0x66>
    a718:	69 c0       	rjmp	.+210    	; 0xa7ec <__vector_39+0x138>
    a71a:	50 f4       	brcc	.+20     	; 0xa730 <__vector_39+0x7c>
    a71c:	80 33       	cpi	r24, 0x30	; 48
    a71e:	09 f4       	brne	.+2      	; 0xa722 <__vector_39+0x6e>
    a720:	56 c0       	rjmp	.+172    	; 0xa7ce <__vector_39+0x11a>
    a722:	88 33       	cpi	r24, 0x38	; 56
    a724:	09 f0       	breq	.+2      	; 0xa728 <__vector_39+0x74>
    a726:	e1 c0       	rjmp	.+450    	; 0xa8ea <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    a728:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <twi_error>
      twi_releaseBus();
    a72c:	9c dd       	rcall	.-1224   	; 0xa266 <twi_releaseBus>
      break;
    a72e:	dd c0       	rjmp	.+442    	; 0xa8ea <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    a730:	80 35       	cpi	r24, 0x50	; 80
    a732:	09 f4       	brne	.+2      	; 0xa736 <__vector_39+0x82>
    a734:	4f c0       	rjmp	.+158    	; 0xa7d4 <__vector_39+0x120>
    a736:	88 35       	cpi	r24, 0x58	; 88
    a738:	09 f4       	brne	.+2      	; 0xa73c <__vector_39+0x88>
    a73a:	5d c0       	rjmp	.+186    	; 0xa7f6 <__vector_39+0x142>
    a73c:	88 34       	cpi	r24, 0x48	; 72
    a73e:	09 f0       	breq	.+2      	; 0xa742 <__vector_39+0x8e>
    a740:	d4 c0       	rjmp	.+424    	; 0xa8ea <__vector_39+0x236>
    a742:	d2 c0       	rjmp	.+420    	; 0xa8e8 <__vector_39+0x234>
    a744:	88 39       	cpi	r24, 0x98	; 152
    a746:	09 f4       	brne	.+2      	; 0xa74a <__vector_39+0x96>
    a748:	c3 c0       	rjmp	.+390    	; 0xa8d0 <__vector_39+0x21c>
    a74a:	a8 f4       	brcc	.+42     	; 0xa776 <__vector_39+0xc2>
    a74c:	88 37       	cpi	r24, 0x78	; 120
    a74e:	09 f4       	brne	.+2      	; 0xa752 <__vector_39+0x9e>
    a750:	67 c0       	rjmp	.+206    	; 0xa820 <__vector_39+0x16c>
    a752:	38 f4       	brcc	.+14     	; 0xa762 <__vector_39+0xae>
    a754:	88 36       	cpi	r24, 0x68	; 104
    a756:	09 f4       	brne	.+2      	; 0xa75a <__vector_39+0xa6>
    a758:	63 c0       	rjmp	.+198    	; 0xa820 <__vector_39+0x16c>
    a75a:	80 37       	cpi	r24, 0x70	; 112
    a75c:	09 f4       	brne	.+2      	; 0xa760 <__vector_39+0xac>
    a75e:	60 c0       	rjmp	.+192    	; 0xa820 <__vector_39+0x16c>
    a760:	c4 c0       	rjmp	.+392    	; 0xa8ea <__vector_39+0x236>
    a762:	88 38       	cpi	r24, 0x88	; 136
    a764:	09 f4       	brne	.+2      	; 0xa768 <__vector_39+0xb4>
    a766:	b4 c0       	rjmp	.+360    	; 0xa8d0 <__vector_39+0x21c>
    a768:	80 39       	cpi	r24, 0x90	; 144
    a76a:	09 f4       	brne	.+2      	; 0xa76e <__vector_39+0xba>
    a76c:	5f c0       	rjmp	.+190    	; 0xa82c <__vector_39+0x178>
    a76e:	80 38       	cpi	r24, 0x80	; 128
    a770:	09 f0       	breq	.+2      	; 0xa774 <__vector_39+0xc0>
    a772:	bb c0       	rjmp	.+374    	; 0xa8ea <__vector_39+0x236>
    a774:	5b c0       	rjmp	.+182    	; 0xa82c <__vector_39+0x178>
    a776:	80 3b       	cpi	r24, 0xB0	; 176
    a778:	09 f4       	brne	.+2      	; 0xa77c <__vector_39+0xc8>
    a77a:	82 c0       	rjmp	.+260    	; 0xa880 <__vector_39+0x1cc>
    a77c:	38 f4       	brcc	.+14     	; 0xa78c <__vector_39+0xd8>
    a77e:	80 3a       	cpi	r24, 0xA0	; 160
    a780:	09 f4       	brne	.+2      	; 0xa784 <__vector_39+0xd0>
    a782:	66 c0       	rjmp	.+204    	; 0xa850 <__vector_39+0x19c>
    a784:	88 3a       	cpi	r24, 0xA8	; 168
    a786:	09 f4       	brne	.+2      	; 0xa78a <__vector_39+0xd6>
    a788:	7b c0       	rjmp	.+246    	; 0xa880 <__vector_39+0x1cc>
    a78a:	af c0       	rjmp	.+350    	; 0xa8ea <__vector_39+0x236>
    a78c:	80 3c       	cpi	r24, 0xC0	; 192
    a78e:	09 f4       	brne	.+2      	; 0xa792 <__vector_39+0xde>
    a790:	a3 c0       	rjmp	.+326    	; 0xa8d8 <__vector_39+0x224>
    a792:	88 3c       	cpi	r24, 0xC8	; 200
    a794:	09 f4       	brne	.+2      	; 0xa798 <__vector_39+0xe4>
    a796:	a0 c0       	rjmp	.+320    	; 0xa8d8 <__vector_39+0x224>
    a798:	88 3b       	cpi	r24, 0xB8	; 184
    a79a:	09 f4       	brne	.+2      	; 0xa79e <__vector_39+0xea>
    a79c:	86 c0       	rjmp	.+268    	; 0xa8aa <__vector_39+0x1f6>
    a79e:	a5 c0       	rjmp	.+330    	; 0xa8ea <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    a7a0:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <twi_slarw>
    a7a4:	10 c0       	rjmp	.+32     	; 0xa7c6 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    a7a6:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <twi_masterBufferIndex>
    a7aa:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <twi_masterBufferLength>
    a7ae:	98 17       	cp	r25, r24
    a7b0:	70 f5       	brcc	.+92     	; 0xa80e <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    a7b2:	e0 91 48 05 	lds	r30, 0x0548	; 0x800548 <twi_masterBufferIndex>
    a7b6:	81 e0       	ldi	r24, 0x01	; 1
    a7b8:	8e 0f       	add	r24, r30
    a7ba:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_masterBufferIndex>
    a7be:	f0 e0       	ldi	r31, 0x00	; 0
    a7c0:	e7 5b       	subi	r30, 0xB7	; 183
    a7c2:	fa 4f       	sbci	r31, 0xFA	; 250
    a7c4:	80 81       	ld	r24, Z
    a7c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    a7ca:	85 ec       	ldi	r24, 0xC5	; 197
    a7cc:	82 c0       	rjmp	.+260    	; 0xa8d2 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    a7ce:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <twi_error>
    a7d2:	8a c0       	rjmp	.+276    	; 0xa8e8 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    a7d4:	e0 91 48 05 	lds	r30, 0x0548	; 0x800548 <twi_masterBufferIndex>
    a7d8:	81 e0       	ldi	r24, 0x01	; 1
    a7da:	8e 0f       	add	r24, r30
    a7dc:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_masterBufferIndex>
    a7e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a7e4:	f0 e0       	ldi	r31, 0x00	; 0
    a7e6:	e7 5b       	subi	r30, 0xB7	; 183
    a7e8:	fa 4f       	sbci	r31, 0xFA	; 250
    a7ea:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    a7ec:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <twi_masterBufferIndex>
    a7f0:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <twi_masterBufferLength>
    a7f4:	6a c0       	rjmp	.+212    	; 0xa8ca <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    a7f6:	e0 91 48 05 	lds	r30, 0x0548	; 0x800548 <twi_masterBufferIndex>
    a7fa:	81 e0       	ldi	r24, 0x01	; 1
    a7fc:	8e 0f       	add	r24, r30
    a7fe:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_masterBufferIndex>
    a802:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a806:	f0 e0       	ldi	r31, 0x00	; 0
    a808:	e7 5b       	subi	r30, 0xB7	; 183
    a80a:	fa 4f       	sbci	r31, 0xFA	; 250
    a80c:	80 83       	st	Z, r24
      if (twi_sendStop){
    a80e:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <twi_sendStop>
    a812:	81 11       	cpse	r24, r1
    a814:	69 c0       	rjmp	.+210    	; 0xa8e8 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    a816:	81 e0       	ldi	r24, 0x01	; 1
    a818:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    a81c:	84 ea       	ldi	r24, 0xA4	; 164
    a81e:	5d c0       	rjmp	.+186    	; 0xa8da <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    a820:	83 e0       	ldi	r24, 0x03	; 3
    a822:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    a826:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <twi_rxBufferIndex>
    a82a:	cf cf       	rjmp	.-98     	; 0xa7ca <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    a82c:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_rxBufferIndex>
    a830:	80 32       	cpi	r24, 0x20	; 32
    a832:	08 f0       	brcs	.+2      	; 0xa836 <__vector_39+0x182>
    a834:	4d c0       	rjmp	.+154    	; 0xa8d0 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    a836:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <twi_rxBufferIndex>
    a83a:	81 e0       	ldi	r24, 0x01	; 1
    a83c:	8e 0f       	add	r24, r30
    a83e:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <twi_rxBufferIndex>
    a842:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a846:	f0 e0       	ldi	r31, 0x00	; 0
    a848:	eb 5f       	subi	r30, 0xFB	; 251
    a84a:	fa 4f       	sbci	r31, 0xFA	; 250
    a84c:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    a84e:	bd cf       	rjmp	.-134    	; 0xa7ca <__vector_39+0x116>
    a850:	0a dd       	rcall	.-1516   	; 0xa266 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    a852:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_rxBufferIndex>
    a856:	80 32       	cpi	r24, 0x20	; 32
    a858:	30 f4       	brcc	.+12     	; 0xa866 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    a85a:	e0 91 04 05 	lds	r30, 0x0504	; 0x800504 <twi_rxBufferIndex>
    a85e:	f0 e0       	ldi	r31, 0x00	; 0
    a860:	eb 5f       	subi	r30, 0xFB	; 251
    a862:	fa 4f       	sbci	r31, 0xFA	; 250
    a864:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    a866:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <twi_rxBufferIndex>
    a86a:	70 e0       	ldi	r23, 0x00	; 0
    a86c:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <twi_onSlaveReceive>
    a870:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <twi_onSlaveReceive+0x1>
    a874:	85 e0       	ldi	r24, 0x05	; 5
    a876:	95 e0       	ldi	r25, 0x05	; 5
    a878:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    a87a:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <twi_rxBufferIndex>
      break;
    a87e:	35 c0       	rjmp	.+106    	; 0xa8ea <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    a880:	84 e0       	ldi	r24, 0x04	; 4
    a882:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    a886:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    a88a:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    a88e:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <twi_onSlaveTransmit>
    a892:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <twi_onSlaveTransmit+0x1>
    a896:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    a898:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <twi_txBufferLength>
    a89c:	81 11       	cpse	r24, r1
    a89e:	05 c0       	rjmp	.+10     	; 0xa8aa <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    a8a0:	81 e0       	ldi	r24, 0x01	; 1
    a8a2:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    a8a6:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    a8aa:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <twi_txBufferIndex>
    a8ae:	81 e0       	ldi	r24, 0x01	; 1
    a8b0:	8e 0f       	add	r24, r30
    a8b2:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <twi_txBufferIndex>
    a8b6:	f0 e0       	ldi	r31, 0x00	; 0
    a8b8:	e9 5d       	subi	r30, 0xD9	; 217
    a8ba:	fa 4f       	sbci	r31, 0xFA	; 250
    a8bc:	80 81       	ld	r24, Z
    a8be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    a8c2:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <twi_txBufferIndex>
    a8c6:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <twi_txBufferLength>
    a8ca:	98 17       	cp	r25, r24
    a8cc:	08 f4       	brcc	.+2      	; 0xa8d0 <__vector_39+0x21c>
    a8ce:	7d cf       	rjmp	.-262    	; 0xa7ca <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    a8d0:	85 e8       	ldi	r24, 0x85	; 133
    a8d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a8d6:	09 c0       	rjmp	.+18     	; 0xa8ea <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    a8d8:	85 ec       	ldi	r24, 0xC5	; 197
    a8da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    a8de:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <twi_state>
      break;
    a8e2:	03 c0       	rjmp	.+6      	; 0xa8ea <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    a8e4:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <twi_error>
      twi_stop();
    a8e8:	ae de       	rcall	.-676    	; 0xa646 <twi_stop>
      break;
  }
}
    a8ea:	ff 91       	pop	r31
    a8ec:	ef 91       	pop	r30
    a8ee:	bf 91       	pop	r27
    a8f0:	af 91       	pop	r26
    a8f2:	9f 91       	pop	r25
    a8f4:	8f 91       	pop	r24
    a8f6:	7f 91       	pop	r23
    a8f8:	6f 91       	pop	r22
    a8fa:	5f 91       	pop	r21
    a8fc:	4f 91       	pop	r20
    a8fe:	3f 91       	pop	r19
    a900:	2f 91       	pop	r18
    a902:	0f 90       	pop	r0
    a904:	0b be       	out	0x3b, r0	; 59
    a906:	0f 90       	pop	r0
    a908:	0f be       	out	0x3f, r0	; 63
    a90a:	0f 90       	pop	r0
    a90c:	1f 90       	pop	r1
    a90e:	18 95       	reti

0000a910 <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    a910:	cf 93       	push	r28
    a912:	df 93       	push	r29
    a914:	00 d0       	rcall	.+0      	; 0xa916 <_ZN5Print13setWriteErrorEi+0x6>
    a916:	1f 92       	push	r1
    a918:	cd b7       	in	r28, 0x3d	; 61
    a91a:	de b7       	in	r29, 0x3e	; 62
    a91c:	9a 83       	std	Y+2, r25	; 0x02
    a91e:	89 83       	std	Y+1, r24	; 0x01
    a920:	7c 83       	std	Y+4, r23	; 0x04
    a922:	6b 83       	std	Y+3, r22	; 0x03
    a924:	89 81       	ldd	r24, Y+1	; 0x01
    a926:	9a 81       	ldd	r25, Y+2	; 0x02
    a928:	2b 81       	ldd	r18, Y+3	; 0x03
    a92a:	3c 81       	ldd	r19, Y+4	; 0x04
    a92c:	fc 01       	movw	r30, r24
    a92e:	33 83       	std	Z+3, r19	; 0x03
    a930:	22 83       	std	Z+2, r18	; 0x02
    a932:	00 00       	nop
    a934:	0f 90       	pop	r0
    a936:	0f 90       	pop	r0
    a938:	0f 90       	pop	r0
    a93a:	0f 90       	pop	r0
    a93c:	df 91       	pop	r29
    a93e:	cf 91       	pop	r28
    a940:	08 95       	ret

0000a942 <_ZN6StreamC1Ev>:
    a942:	cf 93       	push	r28
    a944:	df 93       	push	r29
    a946:	1f 92       	push	r1
    a948:	1f 92       	push	r1
    a94a:	cd b7       	in	r28, 0x3d	; 61
    a94c:	de b7       	in	r29, 0x3e	; 62
    a94e:	9a 83       	std	Y+2, r25	; 0x02
    a950:	89 83       	std	Y+1, r24	; 0x01
    a952:	89 81       	ldd	r24, Y+1	; 0x01
    a954:	9a 81       	ldd	r25, Y+2	; 0x02
    a956:	0e 94 b8 12 	call	0x2570	; 0x2570 <_ZN5PrintC1Ev>
    a95a:	27 e2       	ldi	r18, 0x27	; 39
    a95c:	33 e0       	ldi	r19, 0x03	; 3
    a95e:	89 81       	ldd	r24, Y+1	; 0x01
    a960:	9a 81       	ldd	r25, Y+2	; 0x02
    a962:	fc 01       	movw	r30, r24
    a964:	31 83       	std	Z+1, r19	; 0x01
    a966:	20 83       	st	Z, r18
    a968:	29 81       	ldd	r18, Y+1	; 0x01
    a96a:	3a 81       	ldd	r19, Y+2	; 0x02
    a96c:	88 ee       	ldi	r24, 0xE8	; 232
    a96e:	93 e0       	ldi	r25, 0x03	; 3
    a970:	a0 e0       	ldi	r26, 0x00	; 0
    a972:	b0 e0       	ldi	r27, 0x00	; 0
    a974:	f9 01       	movw	r30, r18
    a976:	84 83       	std	Z+4, r24	; 0x04
    a978:	95 83       	std	Z+5, r25	; 0x05
    a97a:	a6 83       	std	Z+6, r26	; 0x06
    a97c:	b7 83       	std	Z+7, r27	; 0x07
    a97e:	00 00       	nop
    a980:	0f 90       	pop	r0
    a982:	0f 90       	pop	r0
    a984:	df 91       	pop	r29
    a986:	cf 91       	pop	r28
    a988:	08 95       	ret

0000a98a <_ZN7TwoWireC1Ev>:
    a98a:	cf 93       	push	r28
    a98c:	df 93       	push	r29
    a98e:	1f 92       	push	r1
    a990:	1f 92       	push	r1
    a992:	cd b7       	in	r28, 0x3d	; 61
    a994:	de b7       	in	r29, 0x3e	; 62
    a996:	9a 83       	std	Y+2, r25	; 0x02
    a998:	89 83       	std	Y+1, r24	; 0x01
    a99a:	89 81       	ldd	r24, Y+1	; 0x01
    a99c:	9a 81       	ldd	r25, Y+2	; 0x02
    a99e:	d1 df       	rcall	.-94     	; 0xa942 <_ZN6StreamC1Ev>
    a9a0:	25 e1       	ldi	r18, 0x15	; 21
    a9a2:	33 e0       	ldi	r19, 0x03	; 3
    a9a4:	89 81       	ldd	r24, Y+1	; 0x01
    a9a6:	9a 81       	ldd	r25, Y+2	; 0x02
    a9a8:	fc 01       	movw	r30, r24
    a9aa:	31 83       	std	Z+1, r19	; 0x01
    a9ac:	20 83       	st	Z, r18
    a9ae:	00 00       	nop
    a9b0:	0f 90       	pop	r0
    a9b2:	0f 90       	pop	r0
    a9b4:	df 91       	pop	r29
    a9b6:	cf 91       	pop	r28
    a9b8:	08 95       	ret

0000a9ba <_ZN7TwoWire5beginEv>:
    a9ba:	cf 93       	push	r28
    a9bc:	df 93       	push	r29
    a9be:	1f 92       	push	r1
    a9c0:	1f 92       	push	r1
    a9c2:	cd b7       	in	r28, 0x3d	; 61
    a9c4:	de b7       	in	r29, 0x3e	; 62
    a9c6:	9a 83       	std	Y+2, r25	; 0x02
    a9c8:	89 83       	std	Y+1, r24	; 0x01
    a9ca:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    a9ce:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <_ZN7TwoWire14rxBufferLengthE>
    a9d2:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    a9d6:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <_ZN7TwoWire14txBufferLengthE>
    a9da:	d4 db       	rcall	.-2136   	; 0xa184 <twi_init>
    a9dc:	89 e7       	ldi	r24, 0x79	; 121
    a9de:	97 e5       	ldi	r25, 0x57	; 87
    a9e0:	3d dc       	rcall	.-1926   	; 0xa25c <twi_attachSlaveTxEvent>
    a9e2:	8c e2       	ldi	r24, 0x2C	; 44
    a9e4:	97 e5       	ldi	r25, 0x57	; 87
    a9e6:	35 dc       	rcall	.-1942   	; 0xa252 <twi_attachSlaveRxEvent>
    a9e8:	00 00       	nop
    a9ea:	0f 90       	pop	r0
    a9ec:	0f 90       	pop	r0
    a9ee:	df 91       	pop	r29
    a9f0:	cf 91       	pop	r28
    a9f2:	08 95       	ret

0000a9f4 <_ZN7TwoWire8setClockEm>:
    a9f4:	cf 93       	push	r28
    a9f6:	df 93       	push	r29
    a9f8:	00 d0       	rcall	.+0      	; 0xa9fa <_ZN7TwoWire8setClockEm+0x6>
    a9fa:	00 d0       	rcall	.+0      	; 0xa9fc <_ZN7TwoWire8setClockEm+0x8>
    a9fc:	cd b7       	in	r28, 0x3d	; 61
    a9fe:	de b7       	in	r29, 0x3e	; 62
    aa00:	9a 83       	std	Y+2, r25	; 0x02
    aa02:	89 83       	std	Y+1, r24	; 0x01
    aa04:	4b 83       	std	Y+3, r20	; 0x03
    aa06:	5c 83       	std	Y+4, r21	; 0x04
    aa08:	6d 83       	std	Y+5, r22	; 0x05
    aa0a:	7e 83       	std	Y+6, r23	; 0x06
    aa0c:	8b 81       	ldd	r24, Y+3	; 0x03
    aa0e:	9c 81       	ldd	r25, Y+4	; 0x04
    aa10:	ad 81       	ldd	r26, Y+5	; 0x05
    aa12:	be 81       	ldd	r27, Y+6	; 0x06
    aa14:	bc 01       	movw	r22, r24
    aa16:	cd 01       	movw	r24, r26
    aa18:	e0 db       	rcall	.-2112   	; 0xa1da <twi_setFrequency>
    aa1a:	00 00       	nop
    aa1c:	26 96       	adiw	r28, 0x06	; 6
    aa1e:	0f b6       	in	r0, 0x3f	; 63
    aa20:	f8 94       	cli
    aa22:	de bf       	out	0x3e, r29	; 62
    aa24:	0f be       	out	0x3f, r0	; 63
    aa26:	cd bf       	out	0x3d, r28	; 61
    aa28:	df 91       	pop	r29
    aa2a:	cf 91       	pop	r28
    aa2c:	08 95       	ret

0000aa2e <_ZN7TwoWire11requestFromEhhmhh>:
    aa2e:	cf 92       	push	r12
    aa30:	ef 92       	push	r14
    aa32:	0f 93       	push	r16
    aa34:	1f 93       	push	r17
    aa36:	cf 93       	push	r28
    aa38:	df 93       	push	r29
    aa3a:	cd b7       	in	r28, 0x3d	; 61
    aa3c:	de b7       	in	r29, 0x3e	; 62
    aa3e:	2b 97       	sbiw	r28, 0x0b	; 11
    aa40:	0f b6       	in	r0, 0x3f	; 63
    aa42:	f8 94       	cli
    aa44:	de bf       	out	0x3e, r29	; 62
    aa46:	0f be       	out	0x3f, r0	; 63
    aa48:	cd bf       	out	0x3d, r28	; 61
    aa4a:	9b 83       	std	Y+3, r25	; 0x03
    aa4c:	8a 83       	std	Y+2, r24	; 0x02
    aa4e:	6c 83       	std	Y+4, r22	; 0x04
    aa50:	4d 83       	std	Y+5, r20	; 0x05
    aa52:	0e 83       	std	Y+6, r16	; 0x06
    aa54:	1f 83       	std	Y+7, r17	; 0x07
    aa56:	28 87       	std	Y+8, r18	; 0x08
    aa58:	39 87       	std	Y+9, r19	; 0x09
    aa5a:	ea 86       	std	Y+10, r14	; 0x0a
    aa5c:	cb 86       	std	Y+11, r12	; 0x0b
    aa5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    aa60:	88 23       	and	r24, r24
    aa62:	d9 f1       	breq	.+118    	; 0xaada <_ZN7TwoWire11requestFromEhhmhh+0xac>
    aa64:	8a 81       	ldd	r24, Y+2	; 0x02
    aa66:	9b 81       	ldd	r25, Y+3	; 0x03
    aa68:	6c 81       	ldd	r22, Y+4	; 0x04
    aa6a:	98 d0       	rcall	.+304    	; 0xab9c <_ZN7TwoWire17beginTransmissionEh>
    aa6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    aa6e:	84 30       	cpi	r24, 0x04	; 4
    aa70:	10 f0       	brcs	.+4      	; 0xaa76 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    aa72:	83 e0       	ldi	r24, 0x03	; 3
    aa74:	8a 87       	std	Y+10, r24	; 0x0a
    aa76:	8a 85       	ldd	r24, Y+10	; 0x0a
    aa78:	9f ef       	ldi	r25, 0xFF	; 255
    aa7a:	98 0f       	add	r25, r24
    aa7c:	9a 87       	std	Y+10, r25	; 0x0a
    aa7e:	91 e0       	ldi	r25, 0x01	; 1
    aa80:	88 23       	and	r24, r24
    aa82:	09 f4       	brne	.+2      	; 0xaa86 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    aa84:	90 e0       	ldi	r25, 0x00	; 0
    aa86:	99 23       	and	r25, r25
    aa88:	21 f1       	breq	.+72     	; 0xaad2 <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    aa8a:	8a 81       	ldd	r24, Y+2	; 0x02
    aa8c:	9b 81       	ldd	r25, Y+3	; 0x03
    aa8e:	fc 01       	movw	r30, r24
    aa90:	80 81       	ld	r24, Z
    aa92:	91 81       	ldd	r25, Z+1	; 0x01
    aa94:	fc 01       	movw	r30, r24
    aa96:	20 81       	ld	r18, Z
    aa98:	31 81       	ldd	r19, Z+1	; 0x01
    aa9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    aa9c:	88 2f       	mov	r24, r24
    aa9e:	90 e0       	ldi	r25, 0x00	; 0
    aaa0:	ac 01       	movw	r20, r24
    aaa2:	44 0f       	add	r20, r20
    aaa4:	55 1f       	adc	r21, r21
    aaa6:	44 0f       	add	r20, r20
    aaa8:	55 1f       	adc	r21, r21
    aaaa:	44 0f       	add	r20, r20
    aaac:	55 1f       	adc	r21, r21
    aaae:	8e 81       	ldd	r24, Y+6	; 0x06
    aab0:	9f 81       	ldd	r25, Y+7	; 0x07
    aab2:	a8 85       	ldd	r26, Y+8	; 0x08
    aab4:	b9 85       	ldd	r27, Y+9	; 0x09
    aab6:	04 c0       	rjmp	.+8      	; 0xaac0 <_ZN7TwoWire11requestFromEhhmhh+0x92>
    aab8:	b6 95       	lsr	r27
    aaba:	a7 95       	ror	r26
    aabc:	97 95       	ror	r25
    aabe:	87 95       	ror	r24
    aac0:	4a 95       	dec	r20
    aac2:	d2 f7       	brpl	.-12     	; 0xaab8 <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    aac4:	48 2f       	mov	r20, r24
    aac6:	8a 81       	ldd	r24, Y+2	; 0x02
    aac8:	9b 81       	ldd	r25, Y+3	; 0x03
    aaca:	64 2f       	mov	r22, r20
    aacc:	f9 01       	movw	r30, r18
    aace:	19 95       	eicall
    aad0:	d2 cf       	rjmp	.-92     	; 0xaa76 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    aad2:	8a 81       	ldd	r24, Y+2	; 0x02
    aad4:	9b 81       	ldd	r25, Y+3	; 0x03
    aad6:	60 e0       	ldi	r22, 0x00	; 0
    aad8:	91 d0       	rcall	.+290    	; 0xabfc <_ZN7TwoWire15endTransmissionEh>
    aada:	8d 81       	ldd	r24, Y+5	; 0x05
    aadc:	81 32       	cpi	r24, 0x21	; 33
    aade:	10 f0       	brcs	.+4      	; 0xaae4 <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    aae0:	80 e2       	ldi	r24, 0x20	; 32
    aae2:	8d 83       	std	Y+5, r24	; 0x05
    aae4:	2b 85       	ldd	r18, Y+11	; 0x0b
    aae6:	4d 81       	ldd	r20, Y+5	; 0x05
    aae8:	67 e7       	ldi	r22, 0x77	; 119
    aaea:	75 e0       	ldi	r23, 0x05	; 5
    aaec:	8c 81       	ldd	r24, Y+4	; 0x04
    aaee:	d5 db       	rcall	.-2134   	; 0xa29a <twi_readFrom>
    aaf0:	89 83       	std	Y+1, r24	; 0x01
    aaf2:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    aaf6:	89 81       	ldd	r24, Y+1	; 0x01
    aaf8:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <_ZN7TwoWire14rxBufferLengthE>
    aafc:	89 81       	ldd	r24, Y+1	; 0x01
    aafe:	2b 96       	adiw	r28, 0x0b	; 11
    ab00:	0f b6       	in	r0, 0x3f	; 63
    ab02:	f8 94       	cli
    ab04:	de bf       	out	0x3e, r29	; 62
    ab06:	0f be       	out	0x3f, r0	; 63
    ab08:	cd bf       	out	0x3d, r28	; 61
    ab0a:	df 91       	pop	r29
    ab0c:	cf 91       	pop	r28
    ab0e:	1f 91       	pop	r17
    ab10:	0f 91       	pop	r16
    ab12:	ef 90       	pop	r14
    ab14:	cf 90       	pop	r12
    ab16:	08 95       	ret

0000ab18 <_ZN7TwoWire11requestFromEhhh>:
    ab18:	cf 92       	push	r12
    ab1a:	ef 92       	push	r14
    ab1c:	0f 93       	push	r16
    ab1e:	1f 93       	push	r17
    ab20:	cf 93       	push	r28
    ab22:	df 93       	push	r29
    ab24:	00 d0       	rcall	.+0      	; 0xab26 <_ZN7TwoWire11requestFromEhhh+0xe>
    ab26:	1f 92       	push	r1
    ab28:	1f 92       	push	r1
    ab2a:	cd b7       	in	r28, 0x3d	; 61
    ab2c:	de b7       	in	r29, 0x3e	; 62
    ab2e:	9a 83       	std	Y+2, r25	; 0x02
    ab30:	89 83       	std	Y+1, r24	; 0x01
    ab32:	6b 83       	std	Y+3, r22	; 0x03
    ab34:	4c 83       	std	Y+4, r20	; 0x04
    ab36:	2d 83       	std	Y+5, r18	; 0x05
    ab38:	89 81       	ldd	r24, Y+1	; 0x01
    ab3a:	9a 81       	ldd	r25, Y+2	; 0x02
    ab3c:	cd 80       	ldd	r12, Y+5	; 0x05
    ab3e:	e1 2c       	mov	r14, r1
    ab40:	00 e0       	ldi	r16, 0x00	; 0
    ab42:	10 e0       	ldi	r17, 0x00	; 0
    ab44:	98 01       	movw	r18, r16
    ab46:	4c 81       	ldd	r20, Y+4	; 0x04
    ab48:	6b 81       	ldd	r22, Y+3	; 0x03
    ab4a:	71 df       	rcall	.-286    	; 0xaa2e <_ZN7TwoWire11requestFromEhhmhh>
    ab4c:	0f 90       	pop	r0
    ab4e:	0f 90       	pop	r0
    ab50:	0f 90       	pop	r0
    ab52:	0f 90       	pop	r0
    ab54:	0f 90       	pop	r0
    ab56:	df 91       	pop	r29
    ab58:	cf 91       	pop	r28
    ab5a:	1f 91       	pop	r17
    ab5c:	0f 91       	pop	r16
    ab5e:	ef 90       	pop	r14
    ab60:	cf 90       	pop	r12
    ab62:	08 95       	ret

0000ab64 <_ZN7TwoWire11requestFromEii>:
    ab64:	cf 93       	push	r28
    ab66:	df 93       	push	r29
    ab68:	00 d0       	rcall	.+0      	; 0xab6a <_ZN7TwoWire11requestFromEii+0x6>
    ab6a:	00 d0       	rcall	.+0      	; 0xab6c <_ZN7TwoWire11requestFromEii+0x8>
    ab6c:	cd b7       	in	r28, 0x3d	; 61
    ab6e:	de b7       	in	r29, 0x3e	; 62
    ab70:	9a 83       	std	Y+2, r25	; 0x02
    ab72:	89 83       	std	Y+1, r24	; 0x01
    ab74:	7c 83       	std	Y+4, r23	; 0x04
    ab76:	6b 83       	std	Y+3, r22	; 0x03
    ab78:	5e 83       	std	Y+6, r21	; 0x06
    ab7a:	4d 83       	std	Y+5, r20	; 0x05
    ab7c:	4d 81       	ldd	r20, Y+5	; 0x05
    ab7e:	3b 81       	ldd	r19, Y+3	; 0x03
    ab80:	89 81       	ldd	r24, Y+1	; 0x01
    ab82:	9a 81       	ldd	r25, Y+2	; 0x02
    ab84:	21 e0       	ldi	r18, 0x01	; 1
    ab86:	63 2f       	mov	r22, r19
    ab88:	c7 df       	rcall	.-114    	; 0xab18 <_ZN7TwoWire11requestFromEhhh>
    ab8a:	26 96       	adiw	r28, 0x06	; 6
    ab8c:	0f b6       	in	r0, 0x3f	; 63
    ab8e:	f8 94       	cli
    ab90:	de bf       	out	0x3e, r29	; 62
    ab92:	0f be       	out	0x3f, r0	; 63
    ab94:	cd bf       	out	0x3d, r28	; 61
    ab96:	df 91       	pop	r29
    ab98:	cf 91       	pop	r28
    ab9a:	08 95       	ret

0000ab9c <_ZN7TwoWire17beginTransmissionEh>:
    ab9c:	cf 93       	push	r28
    ab9e:	df 93       	push	r29
    aba0:	00 d0       	rcall	.+0      	; 0xaba2 <_ZN7TwoWire17beginTransmissionEh+0x6>
    aba2:	cd b7       	in	r28, 0x3d	; 61
    aba4:	de b7       	in	r29, 0x3e	; 62
    aba6:	9a 83       	std	Y+2, r25	; 0x02
    aba8:	89 83       	std	Y+1, r24	; 0x01
    abaa:	6b 83       	std	Y+3, r22	; 0x03
    abac:	81 e0       	ldi	r24, 0x01	; 1
    abae:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <_ZN7TwoWire12transmittingE>
    abb2:	8b 81       	ldd	r24, Y+3	; 0x03
    abb4:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <_ZN7TwoWire9txAddressE>
    abb8:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    abbc:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <_ZN7TwoWire14txBufferLengthE>
    abc0:	00 00       	nop
    abc2:	0f 90       	pop	r0
    abc4:	0f 90       	pop	r0
    abc6:	0f 90       	pop	r0
    abc8:	df 91       	pop	r29
    abca:	cf 91       	pop	r28
    abcc:	08 95       	ret

0000abce <_ZN7TwoWire17beginTransmissionEi>:
    abce:	cf 93       	push	r28
    abd0:	df 93       	push	r29
    abd2:	00 d0       	rcall	.+0      	; 0xabd4 <_ZN7TwoWire17beginTransmissionEi+0x6>
    abd4:	1f 92       	push	r1
    abd6:	cd b7       	in	r28, 0x3d	; 61
    abd8:	de b7       	in	r29, 0x3e	; 62
    abda:	9a 83       	std	Y+2, r25	; 0x02
    abdc:	89 83       	std	Y+1, r24	; 0x01
    abde:	7c 83       	std	Y+4, r23	; 0x04
    abe0:	6b 83       	std	Y+3, r22	; 0x03
    abe2:	2b 81       	ldd	r18, Y+3	; 0x03
    abe4:	89 81       	ldd	r24, Y+1	; 0x01
    abe6:	9a 81       	ldd	r25, Y+2	; 0x02
    abe8:	62 2f       	mov	r22, r18
    abea:	d8 df       	rcall	.-80     	; 0xab9c <_ZN7TwoWire17beginTransmissionEh>
    abec:	00 00       	nop
    abee:	0f 90       	pop	r0
    abf0:	0f 90       	pop	r0
    abf2:	0f 90       	pop	r0
    abf4:	0f 90       	pop	r0
    abf6:	df 91       	pop	r29
    abf8:	cf 91       	pop	r28
    abfa:	08 95       	ret

0000abfc <_ZN7TwoWire15endTransmissionEh>:
    abfc:	0f 93       	push	r16
    abfe:	cf 93       	push	r28
    ac00:	df 93       	push	r29
    ac02:	00 d0       	rcall	.+0      	; 0xac04 <_ZN7TwoWire15endTransmissionEh+0x8>
    ac04:	1f 92       	push	r1
    ac06:	cd b7       	in	r28, 0x3d	; 61
    ac08:	de b7       	in	r29, 0x3e	; 62
    ac0a:	9b 83       	std	Y+3, r25	; 0x03
    ac0c:	8a 83       	std	Y+2, r24	; 0x02
    ac0e:	6c 83       	std	Y+4, r22	; 0x04
    ac10:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <_ZN7TwoWire14txBufferLengthE>
    ac14:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <_ZN7TwoWire9txAddressE>
    ac18:	0c 81       	ldd	r16, Y+4	; 0x04
    ac1a:	21 e0       	ldi	r18, 0x01	; 1
    ac1c:	49 2f       	mov	r20, r25
    ac1e:	6a e9       	ldi	r22, 0x9A	; 154
    ac20:	75 e0       	ldi	r23, 0x05	; 5
    ac22:	22 dc       	rcall	.-1980   	; 0xa468 <twi_writeTo>
    ac24:	89 83       	std	Y+1, r24	; 0x01
    ac26:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    ac2a:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <_ZN7TwoWire14txBufferLengthE>
    ac2e:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <_ZN7TwoWire12transmittingE>
    ac32:	89 81       	ldd	r24, Y+1	; 0x01
    ac34:	0f 90       	pop	r0
    ac36:	0f 90       	pop	r0
    ac38:	0f 90       	pop	r0
    ac3a:	0f 90       	pop	r0
    ac3c:	df 91       	pop	r29
    ac3e:	cf 91       	pop	r28
    ac40:	0f 91       	pop	r16
    ac42:	08 95       	ret

0000ac44 <_ZN7TwoWire15endTransmissionEv>:
    ac44:	cf 93       	push	r28
    ac46:	df 93       	push	r29
    ac48:	1f 92       	push	r1
    ac4a:	1f 92       	push	r1
    ac4c:	cd b7       	in	r28, 0x3d	; 61
    ac4e:	de b7       	in	r29, 0x3e	; 62
    ac50:	9a 83       	std	Y+2, r25	; 0x02
    ac52:	89 83       	std	Y+1, r24	; 0x01
    ac54:	89 81       	ldd	r24, Y+1	; 0x01
    ac56:	9a 81       	ldd	r25, Y+2	; 0x02
    ac58:	61 e0       	ldi	r22, 0x01	; 1
    ac5a:	d0 df       	rcall	.-96     	; 0xabfc <_ZN7TwoWire15endTransmissionEh>
    ac5c:	0f 90       	pop	r0
    ac5e:	0f 90       	pop	r0
    ac60:	df 91       	pop	r29
    ac62:	cf 91       	pop	r28
    ac64:	08 95       	ret

0000ac66 <_ZN7TwoWire5writeEh>:
    ac66:	cf 93       	push	r28
    ac68:	df 93       	push	r29
    ac6a:	00 d0       	rcall	.+0      	; 0xac6c <_ZN7TwoWire5writeEh+0x6>
    ac6c:	cd b7       	in	r28, 0x3d	; 61
    ac6e:	de b7       	in	r29, 0x3e	; 62
    ac70:	9a 83       	std	Y+2, r25	; 0x02
    ac72:	89 83       	std	Y+1, r24	; 0x01
    ac74:	6b 83       	std	Y+3, r22	; 0x03
    ac76:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <_ZN7TwoWire12transmittingE>
    ac7a:	88 23       	and	r24, r24
    ac7c:	f9 f0       	breq	.+62     	; 0xacbc <_ZN7TwoWire5writeEh+0x56>
    ac7e:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <_ZN7TwoWire14txBufferLengthE>
    ac82:	80 32       	cpi	r24, 0x20	; 32
    ac84:	40 f0       	brcs	.+16     	; 0xac96 <_ZN7TwoWire5writeEh+0x30>
    ac86:	89 81       	ldd	r24, Y+1	; 0x01
    ac88:	9a 81       	ldd	r25, Y+2	; 0x02
    ac8a:	61 e0       	ldi	r22, 0x01	; 1
    ac8c:	70 e0       	ldi	r23, 0x00	; 0
    ac8e:	40 de       	rcall	.-896    	; 0xa910 <_ZN5Print13setWriteErrorEi>
    ac90:	80 e0       	ldi	r24, 0x00	; 0
    ac92:	90 e0       	ldi	r25, 0x00	; 0
    ac94:	19 c0       	rjmp	.+50     	; 0xacc8 <_ZN7TwoWire5writeEh+0x62>
    ac96:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    ac9a:	88 2f       	mov	r24, r24
    ac9c:	90 e0       	ldi	r25, 0x00	; 0
    ac9e:	2b 81       	ldd	r18, Y+3	; 0x03
    aca0:	86 56       	subi	r24, 0x66	; 102
    aca2:	9a 4f       	sbci	r25, 0xFA	; 250
    aca4:	fc 01       	movw	r30, r24
    aca6:	20 83       	st	Z, r18
    aca8:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    acac:	8f 5f       	subi	r24, 0xFF	; 255
    acae:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    acb2:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    acb6:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <_ZN7TwoWire14txBufferLengthE>
    acba:	04 c0       	rjmp	.+8      	; 0xacc4 <_ZN7TwoWire5writeEh+0x5e>
    acbc:	ce 01       	movw	r24, r28
    acbe:	03 96       	adiw	r24, 0x03	; 3
    acc0:	61 e0       	ldi	r22, 0x01	; 1
    acc2:	9f da       	rcall	.-2754   	; 0xa202 <twi_transmit>
    acc4:	81 e0       	ldi	r24, 0x01	; 1
    acc6:	90 e0       	ldi	r25, 0x00	; 0
    acc8:	0f 90       	pop	r0
    acca:	0f 90       	pop	r0
    accc:	0f 90       	pop	r0
    acce:	df 91       	pop	r29
    acd0:	cf 91       	pop	r28
    acd2:	08 95       	ret

0000acd4 <_ZN7TwoWire5writeEPKhj>:
    acd4:	cf 93       	push	r28
    acd6:	df 93       	push	r29
    acd8:	cd b7       	in	r28, 0x3d	; 61
    acda:	de b7       	in	r29, 0x3e	; 62
    acdc:	28 97       	sbiw	r28, 0x08	; 8
    acde:	0f b6       	in	r0, 0x3f	; 63
    ace0:	f8 94       	cli
    ace2:	de bf       	out	0x3e, r29	; 62
    ace4:	0f be       	out	0x3f, r0	; 63
    ace6:	cd bf       	out	0x3d, r28	; 61
    ace8:	9c 83       	std	Y+4, r25	; 0x04
    acea:	8b 83       	std	Y+3, r24	; 0x03
    acec:	7e 83       	std	Y+6, r23	; 0x06
    acee:	6d 83       	std	Y+5, r22	; 0x05
    acf0:	58 87       	std	Y+8, r21	; 0x08
    acf2:	4f 83       	std	Y+7, r20	; 0x07
    acf4:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <_ZN7TwoWire12transmittingE>
    acf8:	88 23       	and	r24, r24
    acfa:	21 f1       	breq	.+72     	; 0xad44 <_ZN7TwoWire5writeEPKhj+0x70>
    acfc:	1a 82       	std	Y+2, r1	; 0x02
    acfe:	19 82       	std	Y+1, r1	; 0x01
    ad00:	29 81       	ldd	r18, Y+1	; 0x01
    ad02:	3a 81       	ldd	r19, Y+2	; 0x02
    ad04:	8f 81       	ldd	r24, Y+7	; 0x07
    ad06:	98 85       	ldd	r25, Y+8	; 0x08
    ad08:	28 17       	cp	r18, r24
    ad0a:	39 07       	cpc	r19, r25
    ad0c:	00 f5       	brcc	.+64     	; 0xad4e <_ZN7TwoWire5writeEPKhj+0x7a>
    ad0e:	8b 81       	ldd	r24, Y+3	; 0x03
    ad10:	9c 81       	ldd	r25, Y+4	; 0x04
    ad12:	fc 01       	movw	r30, r24
    ad14:	80 81       	ld	r24, Z
    ad16:	91 81       	ldd	r25, Z+1	; 0x01
    ad18:	fc 01       	movw	r30, r24
    ad1a:	20 81       	ld	r18, Z
    ad1c:	31 81       	ldd	r19, Z+1	; 0x01
    ad1e:	4d 81       	ldd	r20, Y+5	; 0x05
    ad20:	5e 81       	ldd	r21, Y+6	; 0x06
    ad22:	89 81       	ldd	r24, Y+1	; 0x01
    ad24:	9a 81       	ldd	r25, Y+2	; 0x02
    ad26:	84 0f       	add	r24, r20
    ad28:	95 1f       	adc	r25, r21
    ad2a:	fc 01       	movw	r30, r24
    ad2c:	40 81       	ld	r20, Z
    ad2e:	8b 81       	ldd	r24, Y+3	; 0x03
    ad30:	9c 81       	ldd	r25, Y+4	; 0x04
    ad32:	64 2f       	mov	r22, r20
    ad34:	f9 01       	movw	r30, r18
    ad36:	19 95       	eicall
    ad38:	89 81       	ldd	r24, Y+1	; 0x01
    ad3a:	9a 81       	ldd	r25, Y+2	; 0x02
    ad3c:	01 96       	adiw	r24, 0x01	; 1
    ad3e:	9a 83       	std	Y+2, r25	; 0x02
    ad40:	89 83       	std	Y+1, r24	; 0x01
    ad42:	de cf       	rjmp	.-68     	; 0xad00 <_ZN7TwoWire5writeEPKhj+0x2c>
    ad44:	2f 81       	ldd	r18, Y+7	; 0x07
    ad46:	8d 81       	ldd	r24, Y+5	; 0x05
    ad48:	9e 81       	ldd	r25, Y+6	; 0x06
    ad4a:	62 2f       	mov	r22, r18
    ad4c:	5a da       	rcall	.-2892   	; 0xa202 <twi_transmit>
    ad4e:	8f 81       	ldd	r24, Y+7	; 0x07
    ad50:	98 85       	ldd	r25, Y+8	; 0x08
    ad52:	28 96       	adiw	r28, 0x08	; 8
    ad54:	0f b6       	in	r0, 0x3f	; 63
    ad56:	f8 94       	cli
    ad58:	de bf       	out	0x3e, r29	; 62
    ad5a:	0f be       	out	0x3f, r0	; 63
    ad5c:	cd bf       	out	0x3d, r28	; 61
    ad5e:	df 91       	pop	r29
    ad60:	cf 91       	pop	r28
    ad62:	08 95       	ret

0000ad64 <_ZN7TwoWire9availableEv>:
    ad64:	cf 93       	push	r28
    ad66:	df 93       	push	r29
    ad68:	1f 92       	push	r1
    ad6a:	1f 92       	push	r1
    ad6c:	cd b7       	in	r28, 0x3d	; 61
    ad6e:	de b7       	in	r29, 0x3e	; 62
    ad70:	9a 83       	std	Y+2, r25	; 0x02
    ad72:	89 83       	std	Y+1, r24	; 0x01
    ad74:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <_ZN7TwoWire14rxBufferLengthE>
    ad78:	28 2f       	mov	r18, r24
    ad7a:	30 e0       	ldi	r19, 0x00	; 0
    ad7c:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    ad80:	88 2f       	mov	r24, r24
    ad82:	90 e0       	ldi	r25, 0x00	; 0
    ad84:	a9 01       	movw	r20, r18
    ad86:	48 1b       	sub	r20, r24
    ad88:	59 0b       	sbc	r21, r25
    ad8a:	ca 01       	movw	r24, r20
    ad8c:	0f 90       	pop	r0
    ad8e:	0f 90       	pop	r0
    ad90:	df 91       	pop	r29
    ad92:	cf 91       	pop	r28
    ad94:	08 95       	ret

0000ad96 <_ZN7TwoWire4readEv>:
    ad96:	cf 93       	push	r28
    ad98:	df 93       	push	r29
    ad9a:	00 d0       	rcall	.+0      	; 0xad9c <_ZN7TwoWire4readEv+0x6>
    ad9c:	1f 92       	push	r1
    ad9e:	cd b7       	in	r28, 0x3d	; 61
    ada0:	de b7       	in	r29, 0x3e	; 62
    ada2:	9c 83       	std	Y+4, r25	; 0x04
    ada4:	8b 83       	std	Y+3, r24	; 0x03
    ada6:	8f ef       	ldi	r24, 0xFF	; 255
    ada8:	9f ef       	ldi	r25, 0xFF	; 255
    adaa:	9a 83       	std	Y+2, r25	; 0x02
    adac:	89 83       	std	Y+1, r24	; 0x01
    adae:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    adb2:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <_ZN7TwoWire14rxBufferLengthE>
    adb6:	98 17       	cp	r25, r24
    adb8:	88 f4       	brcc	.+34     	; 0xaddc <_ZN7TwoWire4readEv+0x46>
    adba:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    adbe:	88 2f       	mov	r24, r24
    adc0:	90 e0       	ldi	r25, 0x00	; 0
    adc2:	89 58       	subi	r24, 0x89	; 137
    adc4:	9a 4f       	sbci	r25, 0xFA	; 250
    adc6:	fc 01       	movw	r30, r24
    adc8:	80 81       	ld	r24, Z
    adca:	88 2f       	mov	r24, r24
    adcc:	90 e0       	ldi	r25, 0x00	; 0
    adce:	9a 83       	std	Y+2, r25	; 0x02
    add0:	89 83       	std	Y+1, r24	; 0x01
    add2:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    add6:	8f 5f       	subi	r24, 0xFF	; 255
    add8:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    addc:	89 81       	ldd	r24, Y+1	; 0x01
    adde:	9a 81       	ldd	r25, Y+2	; 0x02
    ade0:	0f 90       	pop	r0
    ade2:	0f 90       	pop	r0
    ade4:	0f 90       	pop	r0
    ade6:	0f 90       	pop	r0
    ade8:	df 91       	pop	r29
    adea:	cf 91       	pop	r28
    adec:	08 95       	ret

0000adee <_ZN7TwoWire4peekEv>:
    adee:	cf 93       	push	r28
    adf0:	df 93       	push	r29
    adf2:	00 d0       	rcall	.+0      	; 0xadf4 <_ZN7TwoWire4peekEv+0x6>
    adf4:	1f 92       	push	r1
    adf6:	cd b7       	in	r28, 0x3d	; 61
    adf8:	de b7       	in	r29, 0x3e	; 62
    adfa:	9c 83       	std	Y+4, r25	; 0x04
    adfc:	8b 83       	std	Y+3, r24	; 0x03
    adfe:	8f ef       	ldi	r24, 0xFF	; 255
    ae00:	9f ef       	ldi	r25, 0xFF	; 255
    ae02:	9a 83       	std	Y+2, r25	; 0x02
    ae04:	89 83       	std	Y+1, r24	; 0x01
    ae06:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    ae0a:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <_ZN7TwoWire14rxBufferLengthE>
    ae0e:	98 17       	cp	r25, r24
    ae10:	60 f4       	brcc	.+24     	; 0xae2a <_ZN7TwoWire4peekEv+0x3c>
    ae12:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    ae16:	88 2f       	mov	r24, r24
    ae18:	90 e0       	ldi	r25, 0x00	; 0
    ae1a:	89 58       	subi	r24, 0x89	; 137
    ae1c:	9a 4f       	sbci	r25, 0xFA	; 250
    ae1e:	fc 01       	movw	r30, r24
    ae20:	80 81       	ld	r24, Z
    ae22:	88 2f       	mov	r24, r24
    ae24:	90 e0       	ldi	r25, 0x00	; 0
    ae26:	9a 83       	std	Y+2, r25	; 0x02
    ae28:	89 83       	std	Y+1, r24	; 0x01
    ae2a:	89 81       	ldd	r24, Y+1	; 0x01
    ae2c:	9a 81       	ldd	r25, Y+2	; 0x02
    ae2e:	0f 90       	pop	r0
    ae30:	0f 90       	pop	r0
    ae32:	0f 90       	pop	r0
    ae34:	0f 90       	pop	r0
    ae36:	df 91       	pop	r29
    ae38:	cf 91       	pop	r28
    ae3a:	08 95       	ret

0000ae3c <_ZN7TwoWire5flushEv>:
    ae3c:	cf 93       	push	r28
    ae3e:	df 93       	push	r29
    ae40:	1f 92       	push	r1
    ae42:	1f 92       	push	r1
    ae44:	cd b7       	in	r28, 0x3d	; 61
    ae46:	de b7       	in	r29, 0x3e	; 62
    ae48:	9a 83       	std	Y+2, r25	; 0x02
    ae4a:	89 83       	std	Y+1, r24	; 0x01
    ae4c:	00 00       	nop
    ae4e:	0f 90       	pop	r0
    ae50:	0f 90       	pop	r0
    ae52:	df 91       	pop	r29
    ae54:	cf 91       	pop	r28
    ae56:	08 95       	ret

0000ae58 <_ZN7TwoWire16onReceiveServiceEPhi>:
    ae58:	cf 93       	push	r28
    ae5a:	df 93       	push	r29
    ae5c:	00 d0       	rcall	.+0      	; 0xae5e <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    ae5e:	1f 92       	push	r1
    ae60:	1f 92       	push	r1
    ae62:	cd b7       	in	r28, 0x3d	; 61
    ae64:	de b7       	in	r29, 0x3e	; 62
    ae66:	9b 83       	std	Y+3, r25	; 0x03
    ae68:	8a 83       	std	Y+2, r24	; 0x02
    ae6a:	7d 83       	std	Y+5, r23	; 0x05
    ae6c:	6c 83       	std	Y+4, r22	; 0x04
    ae6e:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <_ZN7TwoWire14user_onReceiveE>
    ae72:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <_ZN7TwoWire14user_onReceiveE+0x1>
    ae76:	89 2b       	or	r24, r25
    ae78:	89 f1       	breq	.+98     	; 0xaedc <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    ae7a:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    ae7e:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <_ZN7TwoWire14rxBufferLengthE>
    ae82:	98 17       	cp	r25, r24
    ae84:	68 f1       	brcs	.+90     	; 0xaee0 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    ae86:	19 82       	std	Y+1, r1	; 0x01
    ae88:	89 81       	ldd	r24, Y+1	; 0x01
    ae8a:	28 2f       	mov	r18, r24
    ae8c:	30 e0       	ldi	r19, 0x00	; 0
    ae8e:	8c 81       	ldd	r24, Y+4	; 0x04
    ae90:	9d 81       	ldd	r25, Y+5	; 0x05
    ae92:	28 17       	cp	r18, r24
    ae94:	39 07       	cpc	r19, r25
    ae96:	a4 f4       	brge	.+40     	; 0xaec0 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    ae98:	89 81       	ldd	r24, Y+1	; 0x01
    ae9a:	88 2f       	mov	r24, r24
    ae9c:	90 e0       	ldi	r25, 0x00	; 0
    ae9e:	29 81       	ldd	r18, Y+1	; 0x01
    aea0:	22 2f       	mov	r18, r18
    aea2:	30 e0       	ldi	r19, 0x00	; 0
    aea4:	4a 81       	ldd	r20, Y+2	; 0x02
    aea6:	5b 81       	ldd	r21, Y+3	; 0x03
    aea8:	24 0f       	add	r18, r20
    aeaa:	35 1f       	adc	r19, r21
    aeac:	f9 01       	movw	r30, r18
    aeae:	20 81       	ld	r18, Z
    aeb0:	89 58       	subi	r24, 0x89	; 137
    aeb2:	9a 4f       	sbci	r25, 0xFA	; 250
    aeb4:	fc 01       	movw	r30, r24
    aeb6:	20 83       	st	Z, r18
    aeb8:	89 81       	ldd	r24, Y+1	; 0x01
    aeba:	8f 5f       	subi	r24, 0xFF	; 255
    aebc:	89 83       	std	Y+1, r24	; 0x01
    aebe:	e4 cf       	rjmp	.-56     	; 0xae88 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    aec0:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <_ZN7TwoWire13rxBufferIndexE>
    aec4:	8c 81       	ldd	r24, Y+4	; 0x04
    aec6:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <_ZN7TwoWire14rxBufferLengthE>
    aeca:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <_ZN7TwoWire14user_onReceiveE>
    aece:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <_ZN7TwoWire14user_onReceiveE+0x1>
    aed2:	8c 81       	ldd	r24, Y+4	; 0x04
    aed4:	9d 81       	ldd	r25, Y+5	; 0x05
    aed6:	f9 01       	movw	r30, r18
    aed8:	19 95       	eicall
    aeda:	03 c0       	rjmp	.+6      	; 0xaee2 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    aedc:	00 00       	nop
    aede:	01 c0       	rjmp	.+2      	; 0xaee2 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    aee0:	00 00       	nop
    aee2:	0f 90       	pop	r0
    aee4:	0f 90       	pop	r0
    aee6:	0f 90       	pop	r0
    aee8:	0f 90       	pop	r0
    aeea:	0f 90       	pop	r0
    aeec:	df 91       	pop	r29
    aeee:	cf 91       	pop	r28
    aef0:	08 95       	ret

0000aef2 <_ZN7TwoWire16onRequestServiceEv>:
    aef2:	cf 93       	push	r28
    aef4:	df 93       	push	r29
    aef6:	cd b7       	in	r28, 0x3d	; 61
    aef8:	de b7       	in	r29, 0x3e	; 62
    aefa:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <_ZN7TwoWire14user_onRequestE>
    aefe:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <_ZN7TwoWire14user_onRequestE+0x1>
    af02:	89 2b       	or	r24, r25
    af04:	59 f0       	breq	.+22     	; 0xaf1c <_ZN7TwoWire16onRequestServiceEv+0x2a>
    af06:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <_ZN7TwoWire13txBufferIndexE>
    af0a:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <_ZN7TwoWire14txBufferLengthE>
    af0e:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <_ZN7TwoWire14user_onRequestE>
    af12:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <_ZN7TwoWire14user_onRequestE+0x1>
    af16:	fc 01       	movw	r30, r24
    af18:	19 95       	eicall
    af1a:	01 c0       	rjmp	.+2      	; 0xaf1e <_ZN7TwoWire16onRequestServiceEv+0x2c>
    af1c:	00 00       	nop
    af1e:	df 91       	pop	r29
    af20:	cf 91       	pop	r28
    af22:	08 95       	ret

0000af24 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    af24:	cf 93       	push	r28
    af26:	df 93       	push	r29
    af28:	00 d0       	rcall	.+0      	; 0xaf2a <_Z41__static_initialization_and_destruction_0ii+0x6>
    af2a:	1f 92       	push	r1
    af2c:	cd b7       	in	r28, 0x3d	; 61
    af2e:	de b7       	in	r29, 0x3e	; 62
    af30:	9a 83       	std	Y+2, r25	; 0x02
    af32:	89 83       	std	Y+1, r24	; 0x01
    af34:	7c 83       	std	Y+4, r23	; 0x04
    af36:	6b 83       	std	Y+3, r22	; 0x03
    af38:	89 81       	ldd	r24, Y+1	; 0x01
    af3a:	9a 81       	ldd	r25, Y+2	; 0x02
    af3c:	01 97       	sbiw	r24, 0x01	; 1
    af3e:	39 f4       	brne	.+14     	; 0xaf4e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    af40:	8b 81       	ldd	r24, Y+3	; 0x03
    af42:	9c 81       	ldd	r25, Y+4	; 0x04
    af44:	01 96       	adiw	r24, 0x01	; 1
    af46:	19 f4       	brne	.+6      	; 0xaf4e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    af48:	81 ec       	ldi	r24, 0xC1	; 193
    af4a:	95 e0       	ldi	r25, 0x05	; 5
    af4c:	1e dd       	rcall	.-1476   	; 0xa98a <_ZN7TwoWireC1Ev>
    af4e:	00 00       	nop
    af50:	0f 90       	pop	r0
    af52:	0f 90       	pop	r0
    af54:	0f 90       	pop	r0
    af56:	0f 90       	pop	r0
    af58:	df 91       	pop	r29
    af5a:	cf 91       	pop	r28
    af5c:	08 95       	ret

0000af5e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    af5e:	cf 93       	push	r28
    af60:	df 93       	push	r29
    af62:	cd b7       	in	r28, 0x3d	; 61
    af64:	de b7       	in	r29, 0x3e	; 62
    af66:	6f ef       	ldi	r22, 0xFF	; 255
    af68:	7f ef       	ldi	r23, 0xFF	; 255
    af6a:	81 e0       	ldi	r24, 0x01	; 1
    af6c:	90 e0       	ldi	r25, 0x00	; 0
    af6e:	da df       	rcall	.-76     	; 0xaf24 <_Z41__static_initialization_and_destruction_0ii>
    af70:	df 91       	pop	r29
    af72:	cf 91       	pop	r28
    af74:	08 95       	ret

0000af76 <_Z11GetDateTimev>:
#include "TimeAndDate.h"

RTCDateTime GetDateTime()
{
    af76:	cf 93       	push	r28
    af78:	df 93       	push	r29
    af7a:	1f 92       	push	r1
    af7c:	1f 92       	push	r1
    af7e:	cd b7       	in	r28, 0x3d	; 61
    af80:	de b7       	in	r29, 0x3e	; 62
    af82:	9a 83       	std	Y+2, r25	; 0x02
    af84:	89 83       	std	Y+1, r24	; 0x01
	return clock.getDateTime();
    af86:	89 81       	ldd	r24, Y+1	; 0x01
    af88:	9a 81       	ldd	r25, Y+2	; 0x02
    af8a:	6f e9       	ldi	r22, 0x9F	; 159
    af8c:	73 e0       	ldi	r23, 0x03	; 3
    af8e:	0e 94 b9 35 	call	0x6b72	; 0x6b72 <_ZN6DS323111getDateTimeEv>
}
    af92:	89 81       	ldd	r24, Y+1	; 0x01
    af94:	9a 81       	ldd	r25, Y+2	; 0x02
    af96:	0f 90       	pop	r0
    af98:	0f 90       	pop	r0
    af9a:	df 91       	pop	r29
    af9c:	cf 91       	pop	r28
    af9e:	08 95       	ret

0000afa0 <_Z14AddLeadingZeroi>:

int AddLeadingZero(int num)
{
    afa0:	cf 93       	push	r28
    afa2:	df 93       	push	r29
    afa4:	1f 92       	push	r1
    afa6:	1f 92       	push	r1
    afa8:	cd b7       	in	r28, 0x3d	; 61
    afaa:	de b7       	in	r29, 0x3e	; 62
    afac:	9a 83       	std	Y+2, r25	; 0x02
    afae:	89 83       	std	Y+1, r24	; 0x01
	if (num < 10)
    afb0:	89 81       	ldd	r24, Y+1	; 0x01
    afb2:	9a 81       	ldd	r25, Y+2	; 0x02
    afb4:	0a 97       	sbiw	r24, 0x0a	; 10
    afb6:	44 f4       	brge	.+16     	; 0xafc8 <_Z14AddLeadingZeroi+0x28>
	{
		lcd.print("0");
    afb8:	67 e9       	ldi	r22, 0x97	; 151
    afba:	72 e0       	ldi	r23, 0x02	; 2
    afbc:	8b e7       	ldi	r24, 0x7B	; 123
    afbe:	93 e0       	ldi	r25, 0x03	; 3
    afc0:	94 d4       	rcall	.+2344   	; 0xb8ea <_ZN5Print5printEPKc>
		return num;
    afc2:	89 81       	ldd	r24, Y+1	; 0x01
    afc4:	9a 81       	ldd	r25, Y+2	; 0x02
    afc6:	02 c0       	rjmp	.+4      	; 0xafcc <_Z14AddLeadingZeroi+0x2c>
	}
	return num;
    afc8:	89 81       	ldd	r24, Y+1	; 0x01
    afca:	9a 81       	ldd	r25, Y+2	; 0x02
    afcc:	0f 90       	pop	r0
    afce:	0f 90       	pop	r0
    afd0:	df 91       	pop	r29
    afd2:	cf 91       	pop	r28
    afd4:	08 95       	ret

0000afd6 <__subsf3>:
    afd6:	50 58       	subi	r21, 0x80	; 128

0000afd8 <__addsf3>:
    afd8:	bb 27       	eor	r27, r27
    afda:	aa 27       	eor	r26, r26
    afdc:	0e d0       	rcall	.+28     	; 0xaffa <__addsf3x>
    afde:	70 c1       	rjmp	.+736    	; 0xb2c0 <__fp_round>
    afe0:	61 d1       	rcall	.+706    	; 0xb2a4 <__fp_pscA>
    afe2:	30 f0       	brcs	.+12     	; 0xaff0 <__addsf3+0x18>
    afe4:	66 d1       	rcall	.+716    	; 0xb2b2 <__fp_pscB>
    afe6:	20 f0       	brcs	.+8      	; 0xaff0 <__addsf3+0x18>
    afe8:	31 f4       	brne	.+12     	; 0xaff6 <__addsf3+0x1e>
    afea:	9f 3f       	cpi	r25, 0xFF	; 255
    afec:	11 f4       	brne	.+4      	; 0xaff2 <__addsf3+0x1a>
    afee:	1e f4       	brtc	.+6      	; 0xaff6 <__addsf3+0x1e>
    aff0:	56 c1       	rjmp	.+684    	; 0xb29e <__fp_nan>
    aff2:	0e f4       	brtc	.+2      	; 0xaff6 <__addsf3+0x1e>
    aff4:	e0 95       	com	r30
    aff6:	e7 fb       	bst	r30, 7
    aff8:	4c c1       	rjmp	.+664    	; 0xb292 <__fp_inf>

0000affa <__addsf3x>:
    affa:	e9 2f       	mov	r30, r25
    affc:	72 d1       	rcall	.+740    	; 0xb2e2 <__fp_split3>
    affe:	80 f3       	brcs	.-32     	; 0xafe0 <__addsf3+0x8>
    b000:	ba 17       	cp	r27, r26
    b002:	62 07       	cpc	r22, r18
    b004:	73 07       	cpc	r23, r19
    b006:	84 07       	cpc	r24, r20
    b008:	95 07       	cpc	r25, r21
    b00a:	18 f0       	brcs	.+6      	; 0xb012 <__addsf3x+0x18>
    b00c:	71 f4       	brne	.+28     	; 0xb02a <__addsf3x+0x30>
    b00e:	9e f5       	brtc	.+102    	; 0xb076 <__addsf3x+0x7c>
    b010:	8a c1       	rjmp	.+788    	; 0xb326 <__fp_zero>
    b012:	0e f4       	brtc	.+2      	; 0xb016 <__addsf3x+0x1c>
    b014:	e0 95       	com	r30
    b016:	0b 2e       	mov	r0, r27
    b018:	ba 2f       	mov	r27, r26
    b01a:	a0 2d       	mov	r26, r0
    b01c:	0b 01       	movw	r0, r22
    b01e:	b9 01       	movw	r22, r18
    b020:	90 01       	movw	r18, r0
    b022:	0c 01       	movw	r0, r24
    b024:	ca 01       	movw	r24, r20
    b026:	a0 01       	movw	r20, r0
    b028:	11 24       	eor	r1, r1
    b02a:	ff 27       	eor	r31, r31
    b02c:	59 1b       	sub	r21, r25
    b02e:	99 f0       	breq	.+38     	; 0xb056 <__addsf3x+0x5c>
    b030:	59 3f       	cpi	r21, 0xF9	; 249
    b032:	50 f4       	brcc	.+20     	; 0xb048 <__addsf3x+0x4e>
    b034:	50 3e       	cpi	r21, 0xE0	; 224
    b036:	68 f1       	brcs	.+90     	; 0xb092 <__addsf3x+0x98>
    b038:	1a 16       	cp	r1, r26
    b03a:	f0 40       	sbci	r31, 0x00	; 0
    b03c:	a2 2f       	mov	r26, r18
    b03e:	23 2f       	mov	r18, r19
    b040:	34 2f       	mov	r19, r20
    b042:	44 27       	eor	r20, r20
    b044:	58 5f       	subi	r21, 0xF8	; 248
    b046:	f3 cf       	rjmp	.-26     	; 0xb02e <__addsf3x+0x34>
    b048:	46 95       	lsr	r20
    b04a:	37 95       	ror	r19
    b04c:	27 95       	ror	r18
    b04e:	a7 95       	ror	r26
    b050:	f0 40       	sbci	r31, 0x00	; 0
    b052:	53 95       	inc	r21
    b054:	c9 f7       	brne	.-14     	; 0xb048 <__addsf3x+0x4e>
    b056:	7e f4       	brtc	.+30     	; 0xb076 <__addsf3x+0x7c>
    b058:	1f 16       	cp	r1, r31
    b05a:	ba 0b       	sbc	r27, r26
    b05c:	62 0b       	sbc	r22, r18
    b05e:	73 0b       	sbc	r23, r19
    b060:	84 0b       	sbc	r24, r20
    b062:	ba f0       	brmi	.+46     	; 0xb092 <__addsf3x+0x98>
    b064:	91 50       	subi	r25, 0x01	; 1
    b066:	a1 f0       	breq	.+40     	; 0xb090 <__addsf3x+0x96>
    b068:	ff 0f       	add	r31, r31
    b06a:	bb 1f       	adc	r27, r27
    b06c:	66 1f       	adc	r22, r22
    b06e:	77 1f       	adc	r23, r23
    b070:	88 1f       	adc	r24, r24
    b072:	c2 f7       	brpl	.-16     	; 0xb064 <__addsf3x+0x6a>
    b074:	0e c0       	rjmp	.+28     	; 0xb092 <__addsf3x+0x98>
    b076:	ba 0f       	add	r27, r26
    b078:	62 1f       	adc	r22, r18
    b07a:	73 1f       	adc	r23, r19
    b07c:	84 1f       	adc	r24, r20
    b07e:	48 f4       	brcc	.+18     	; 0xb092 <__addsf3x+0x98>
    b080:	87 95       	ror	r24
    b082:	77 95       	ror	r23
    b084:	67 95       	ror	r22
    b086:	b7 95       	ror	r27
    b088:	f7 95       	ror	r31
    b08a:	9e 3f       	cpi	r25, 0xFE	; 254
    b08c:	08 f0       	brcs	.+2      	; 0xb090 <__addsf3x+0x96>
    b08e:	b3 cf       	rjmp	.-154    	; 0xaff6 <__addsf3+0x1e>
    b090:	93 95       	inc	r25
    b092:	88 0f       	add	r24, r24
    b094:	08 f0       	brcs	.+2      	; 0xb098 <__addsf3x+0x9e>
    b096:	99 27       	eor	r25, r25
    b098:	ee 0f       	add	r30, r30
    b09a:	97 95       	ror	r25
    b09c:	87 95       	ror	r24
    b09e:	08 95       	ret

0000b0a0 <__cmpsf2>:
    b0a0:	d4 d0       	rcall	.+424    	; 0xb24a <__fp_cmp>
    b0a2:	08 f4       	brcc	.+2      	; 0xb0a6 <__cmpsf2+0x6>
    b0a4:	81 e0       	ldi	r24, 0x01	; 1
    b0a6:	08 95       	ret

0000b0a8 <__divsf3>:
    b0a8:	0c d0       	rcall	.+24     	; 0xb0c2 <__divsf3x>
    b0aa:	0a c1       	rjmp	.+532    	; 0xb2c0 <__fp_round>
    b0ac:	02 d1       	rcall	.+516    	; 0xb2b2 <__fp_pscB>
    b0ae:	40 f0       	brcs	.+16     	; 0xb0c0 <__divsf3+0x18>
    b0b0:	f9 d0       	rcall	.+498    	; 0xb2a4 <__fp_pscA>
    b0b2:	30 f0       	brcs	.+12     	; 0xb0c0 <__divsf3+0x18>
    b0b4:	21 f4       	brne	.+8      	; 0xb0be <__divsf3+0x16>
    b0b6:	5f 3f       	cpi	r21, 0xFF	; 255
    b0b8:	19 f0       	breq	.+6      	; 0xb0c0 <__divsf3+0x18>
    b0ba:	eb c0       	rjmp	.+470    	; 0xb292 <__fp_inf>
    b0bc:	51 11       	cpse	r21, r1
    b0be:	34 c1       	rjmp	.+616    	; 0xb328 <__fp_szero>
    b0c0:	ee c0       	rjmp	.+476    	; 0xb29e <__fp_nan>

0000b0c2 <__divsf3x>:
    b0c2:	0f d1       	rcall	.+542    	; 0xb2e2 <__fp_split3>
    b0c4:	98 f3       	brcs	.-26     	; 0xb0ac <__divsf3+0x4>

0000b0c6 <__divsf3_pse>:
    b0c6:	99 23       	and	r25, r25
    b0c8:	c9 f3       	breq	.-14     	; 0xb0bc <__divsf3+0x14>
    b0ca:	55 23       	and	r21, r21
    b0cc:	b1 f3       	breq	.-20     	; 0xb0ba <__divsf3+0x12>
    b0ce:	95 1b       	sub	r25, r21
    b0d0:	55 0b       	sbc	r21, r21
    b0d2:	bb 27       	eor	r27, r27
    b0d4:	aa 27       	eor	r26, r26
    b0d6:	62 17       	cp	r22, r18
    b0d8:	73 07       	cpc	r23, r19
    b0da:	84 07       	cpc	r24, r20
    b0dc:	38 f0       	brcs	.+14     	; 0xb0ec <__divsf3_pse+0x26>
    b0de:	9f 5f       	subi	r25, 0xFF	; 255
    b0e0:	5f 4f       	sbci	r21, 0xFF	; 255
    b0e2:	22 0f       	add	r18, r18
    b0e4:	33 1f       	adc	r19, r19
    b0e6:	44 1f       	adc	r20, r20
    b0e8:	aa 1f       	adc	r26, r26
    b0ea:	a9 f3       	breq	.-22     	; 0xb0d6 <__divsf3_pse+0x10>
    b0ec:	33 d0       	rcall	.+102    	; 0xb154 <__divsf3_pse+0x8e>
    b0ee:	0e 2e       	mov	r0, r30
    b0f0:	3a f0       	brmi	.+14     	; 0xb100 <__divsf3_pse+0x3a>
    b0f2:	e0 e8       	ldi	r30, 0x80	; 128
    b0f4:	30 d0       	rcall	.+96     	; 0xb156 <__divsf3_pse+0x90>
    b0f6:	91 50       	subi	r25, 0x01	; 1
    b0f8:	50 40       	sbci	r21, 0x00	; 0
    b0fa:	e6 95       	lsr	r30
    b0fc:	00 1c       	adc	r0, r0
    b0fe:	ca f7       	brpl	.-14     	; 0xb0f2 <__divsf3_pse+0x2c>
    b100:	29 d0       	rcall	.+82     	; 0xb154 <__divsf3_pse+0x8e>
    b102:	fe 2f       	mov	r31, r30
    b104:	27 d0       	rcall	.+78     	; 0xb154 <__divsf3_pse+0x8e>
    b106:	66 0f       	add	r22, r22
    b108:	77 1f       	adc	r23, r23
    b10a:	88 1f       	adc	r24, r24
    b10c:	bb 1f       	adc	r27, r27
    b10e:	26 17       	cp	r18, r22
    b110:	37 07       	cpc	r19, r23
    b112:	48 07       	cpc	r20, r24
    b114:	ab 07       	cpc	r26, r27
    b116:	b0 e8       	ldi	r27, 0x80	; 128
    b118:	09 f0       	breq	.+2      	; 0xb11c <__divsf3_pse+0x56>
    b11a:	bb 0b       	sbc	r27, r27
    b11c:	80 2d       	mov	r24, r0
    b11e:	bf 01       	movw	r22, r30
    b120:	ff 27       	eor	r31, r31
    b122:	93 58       	subi	r25, 0x83	; 131
    b124:	5f 4f       	sbci	r21, 0xFF	; 255
    b126:	2a f0       	brmi	.+10     	; 0xb132 <__divsf3_pse+0x6c>
    b128:	9e 3f       	cpi	r25, 0xFE	; 254
    b12a:	51 05       	cpc	r21, r1
    b12c:	68 f0       	brcs	.+26     	; 0xb148 <__divsf3_pse+0x82>
    b12e:	b1 c0       	rjmp	.+354    	; 0xb292 <__fp_inf>
    b130:	fb c0       	rjmp	.+502    	; 0xb328 <__fp_szero>
    b132:	5f 3f       	cpi	r21, 0xFF	; 255
    b134:	ec f3       	brlt	.-6      	; 0xb130 <__divsf3_pse+0x6a>
    b136:	98 3e       	cpi	r25, 0xE8	; 232
    b138:	dc f3       	brlt	.-10     	; 0xb130 <__divsf3_pse+0x6a>
    b13a:	86 95       	lsr	r24
    b13c:	77 95       	ror	r23
    b13e:	67 95       	ror	r22
    b140:	b7 95       	ror	r27
    b142:	f7 95       	ror	r31
    b144:	9f 5f       	subi	r25, 0xFF	; 255
    b146:	c9 f7       	brne	.-14     	; 0xb13a <__divsf3_pse+0x74>
    b148:	88 0f       	add	r24, r24
    b14a:	91 1d       	adc	r25, r1
    b14c:	96 95       	lsr	r25
    b14e:	87 95       	ror	r24
    b150:	97 f9       	bld	r25, 7
    b152:	08 95       	ret
    b154:	e1 e0       	ldi	r30, 0x01	; 1
    b156:	66 0f       	add	r22, r22
    b158:	77 1f       	adc	r23, r23
    b15a:	88 1f       	adc	r24, r24
    b15c:	bb 1f       	adc	r27, r27
    b15e:	62 17       	cp	r22, r18
    b160:	73 07       	cpc	r23, r19
    b162:	84 07       	cpc	r24, r20
    b164:	ba 07       	cpc	r27, r26
    b166:	20 f0       	brcs	.+8      	; 0xb170 <__divsf3_pse+0xaa>
    b168:	62 1b       	sub	r22, r18
    b16a:	73 0b       	sbc	r23, r19
    b16c:	84 0b       	sbc	r24, r20
    b16e:	ba 0b       	sbc	r27, r26
    b170:	ee 1f       	adc	r30, r30
    b172:	88 f7       	brcc	.-30     	; 0xb156 <__divsf3_pse+0x90>
    b174:	e0 95       	com	r30
    b176:	08 95       	ret

0000b178 <__fixunssfsi>:
    b178:	bc d0       	rcall	.+376    	; 0xb2f2 <__fp_splitA>
    b17a:	88 f0       	brcs	.+34     	; 0xb19e <__fixunssfsi+0x26>
    b17c:	9f 57       	subi	r25, 0x7F	; 127
    b17e:	90 f0       	brcs	.+36     	; 0xb1a4 <__fixunssfsi+0x2c>
    b180:	b9 2f       	mov	r27, r25
    b182:	99 27       	eor	r25, r25
    b184:	b7 51       	subi	r27, 0x17	; 23
    b186:	a0 f0       	brcs	.+40     	; 0xb1b0 <__fixunssfsi+0x38>
    b188:	d1 f0       	breq	.+52     	; 0xb1be <__fixunssfsi+0x46>
    b18a:	66 0f       	add	r22, r22
    b18c:	77 1f       	adc	r23, r23
    b18e:	88 1f       	adc	r24, r24
    b190:	99 1f       	adc	r25, r25
    b192:	1a f0       	brmi	.+6      	; 0xb19a <__fixunssfsi+0x22>
    b194:	ba 95       	dec	r27
    b196:	c9 f7       	brne	.-14     	; 0xb18a <__fixunssfsi+0x12>
    b198:	12 c0       	rjmp	.+36     	; 0xb1be <__fixunssfsi+0x46>
    b19a:	b1 30       	cpi	r27, 0x01	; 1
    b19c:	81 f0       	breq	.+32     	; 0xb1be <__fixunssfsi+0x46>
    b19e:	c3 d0       	rcall	.+390    	; 0xb326 <__fp_zero>
    b1a0:	b1 e0       	ldi	r27, 0x01	; 1
    b1a2:	08 95       	ret
    b1a4:	c0 c0       	rjmp	.+384    	; 0xb326 <__fp_zero>
    b1a6:	67 2f       	mov	r22, r23
    b1a8:	78 2f       	mov	r23, r24
    b1aa:	88 27       	eor	r24, r24
    b1ac:	b8 5f       	subi	r27, 0xF8	; 248
    b1ae:	39 f0       	breq	.+14     	; 0xb1be <__fixunssfsi+0x46>
    b1b0:	b9 3f       	cpi	r27, 0xF9	; 249
    b1b2:	cc f3       	brlt	.-14     	; 0xb1a6 <__fixunssfsi+0x2e>
    b1b4:	86 95       	lsr	r24
    b1b6:	77 95       	ror	r23
    b1b8:	67 95       	ror	r22
    b1ba:	b3 95       	inc	r27
    b1bc:	d9 f7       	brne	.-10     	; 0xb1b4 <__fixunssfsi+0x3c>
    b1be:	3e f4       	brtc	.+14     	; 0xb1ce <__fixunssfsi+0x56>
    b1c0:	90 95       	com	r25
    b1c2:	80 95       	com	r24
    b1c4:	70 95       	com	r23
    b1c6:	61 95       	neg	r22
    b1c8:	7f 4f       	sbci	r23, 0xFF	; 255
    b1ca:	8f 4f       	sbci	r24, 0xFF	; 255
    b1cc:	9f 4f       	sbci	r25, 0xFF	; 255
    b1ce:	08 95       	ret

0000b1d0 <__floatunsisf>:
    b1d0:	e8 94       	clt
    b1d2:	09 c0       	rjmp	.+18     	; 0xb1e6 <__floatsisf+0x12>

0000b1d4 <__floatsisf>:
    b1d4:	97 fb       	bst	r25, 7
    b1d6:	3e f4       	brtc	.+14     	; 0xb1e6 <__floatsisf+0x12>
    b1d8:	90 95       	com	r25
    b1da:	80 95       	com	r24
    b1dc:	70 95       	com	r23
    b1de:	61 95       	neg	r22
    b1e0:	7f 4f       	sbci	r23, 0xFF	; 255
    b1e2:	8f 4f       	sbci	r24, 0xFF	; 255
    b1e4:	9f 4f       	sbci	r25, 0xFF	; 255
    b1e6:	99 23       	and	r25, r25
    b1e8:	a9 f0       	breq	.+42     	; 0xb214 <__floatsisf+0x40>
    b1ea:	f9 2f       	mov	r31, r25
    b1ec:	96 e9       	ldi	r25, 0x96	; 150
    b1ee:	bb 27       	eor	r27, r27
    b1f0:	93 95       	inc	r25
    b1f2:	f6 95       	lsr	r31
    b1f4:	87 95       	ror	r24
    b1f6:	77 95       	ror	r23
    b1f8:	67 95       	ror	r22
    b1fa:	b7 95       	ror	r27
    b1fc:	f1 11       	cpse	r31, r1
    b1fe:	f8 cf       	rjmp	.-16     	; 0xb1f0 <__floatsisf+0x1c>
    b200:	fa f4       	brpl	.+62     	; 0xb240 <__floatsisf+0x6c>
    b202:	bb 0f       	add	r27, r27
    b204:	11 f4       	brne	.+4      	; 0xb20a <__floatsisf+0x36>
    b206:	60 ff       	sbrs	r22, 0
    b208:	1b c0       	rjmp	.+54     	; 0xb240 <__floatsisf+0x6c>
    b20a:	6f 5f       	subi	r22, 0xFF	; 255
    b20c:	7f 4f       	sbci	r23, 0xFF	; 255
    b20e:	8f 4f       	sbci	r24, 0xFF	; 255
    b210:	9f 4f       	sbci	r25, 0xFF	; 255
    b212:	16 c0       	rjmp	.+44     	; 0xb240 <__floatsisf+0x6c>
    b214:	88 23       	and	r24, r24
    b216:	11 f0       	breq	.+4      	; 0xb21c <__floatsisf+0x48>
    b218:	96 e9       	ldi	r25, 0x96	; 150
    b21a:	11 c0       	rjmp	.+34     	; 0xb23e <__floatsisf+0x6a>
    b21c:	77 23       	and	r23, r23
    b21e:	21 f0       	breq	.+8      	; 0xb228 <__floatsisf+0x54>
    b220:	9e e8       	ldi	r25, 0x8E	; 142
    b222:	87 2f       	mov	r24, r23
    b224:	76 2f       	mov	r23, r22
    b226:	05 c0       	rjmp	.+10     	; 0xb232 <__floatsisf+0x5e>
    b228:	66 23       	and	r22, r22
    b22a:	71 f0       	breq	.+28     	; 0xb248 <__floatsisf+0x74>
    b22c:	96 e8       	ldi	r25, 0x86	; 134
    b22e:	86 2f       	mov	r24, r22
    b230:	70 e0       	ldi	r23, 0x00	; 0
    b232:	60 e0       	ldi	r22, 0x00	; 0
    b234:	2a f0       	brmi	.+10     	; 0xb240 <__floatsisf+0x6c>
    b236:	9a 95       	dec	r25
    b238:	66 0f       	add	r22, r22
    b23a:	77 1f       	adc	r23, r23
    b23c:	88 1f       	adc	r24, r24
    b23e:	da f7       	brpl	.-10     	; 0xb236 <__floatsisf+0x62>
    b240:	88 0f       	add	r24, r24
    b242:	96 95       	lsr	r25
    b244:	87 95       	ror	r24
    b246:	97 f9       	bld	r25, 7
    b248:	08 95       	ret

0000b24a <__fp_cmp>:
    b24a:	99 0f       	add	r25, r25
    b24c:	00 08       	sbc	r0, r0
    b24e:	55 0f       	add	r21, r21
    b250:	aa 0b       	sbc	r26, r26
    b252:	e0 e8       	ldi	r30, 0x80	; 128
    b254:	fe ef       	ldi	r31, 0xFE	; 254
    b256:	16 16       	cp	r1, r22
    b258:	17 06       	cpc	r1, r23
    b25a:	e8 07       	cpc	r30, r24
    b25c:	f9 07       	cpc	r31, r25
    b25e:	c0 f0       	brcs	.+48     	; 0xb290 <__fp_cmp+0x46>
    b260:	12 16       	cp	r1, r18
    b262:	13 06       	cpc	r1, r19
    b264:	e4 07       	cpc	r30, r20
    b266:	f5 07       	cpc	r31, r21
    b268:	98 f0       	brcs	.+38     	; 0xb290 <__fp_cmp+0x46>
    b26a:	62 1b       	sub	r22, r18
    b26c:	73 0b       	sbc	r23, r19
    b26e:	84 0b       	sbc	r24, r20
    b270:	95 0b       	sbc	r25, r21
    b272:	39 f4       	brne	.+14     	; 0xb282 <__fp_cmp+0x38>
    b274:	0a 26       	eor	r0, r26
    b276:	61 f0       	breq	.+24     	; 0xb290 <__fp_cmp+0x46>
    b278:	23 2b       	or	r18, r19
    b27a:	24 2b       	or	r18, r20
    b27c:	25 2b       	or	r18, r21
    b27e:	21 f4       	brne	.+8      	; 0xb288 <__fp_cmp+0x3e>
    b280:	08 95       	ret
    b282:	0a 26       	eor	r0, r26
    b284:	09 f4       	brne	.+2      	; 0xb288 <__fp_cmp+0x3e>
    b286:	a1 40       	sbci	r26, 0x01	; 1
    b288:	a6 95       	lsr	r26
    b28a:	8f ef       	ldi	r24, 0xFF	; 255
    b28c:	81 1d       	adc	r24, r1
    b28e:	81 1d       	adc	r24, r1
    b290:	08 95       	ret

0000b292 <__fp_inf>:
    b292:	97 f9       	bld	r25, 7
    b294:	9f 67       	ori	r25, 0x7F	; 127
    b296:	80 e8       	ldi	r24, 0x80	; 128
    b298:	70 e0       	ldi	r23, 0x00	; 0
    b29a:	60 e0       	ldi	r22, 0x00	; 0
    b29c:	08 95       	ret

0000b29e <__fp_nan>:
    b29e:	9f ef       	ldi	r25, 0xFF	; 255
    b2a0:	80 ec       	ldi	r24, 0xC0	; 192
    b2a2:	08 95       	ret

0000b2a4 <__fp_pscA>:
    b2a4:	00 24       	eor	r0, r0
    b2a6:	0a 94       	dec	r0
    b2a8:	16 16       	cp	r1, r22
    b2aa:	17 06       	cpc	r1, r23
    b2ac:	18 06       	cpc	r1, r24
    b2ae:	09 06       	cpc	r0, r25
    b2b0:	08 95       	ret

0000b2b2 <__fp_pscB>:
    b2b2:	00 24       	eor	r0, r0
    b2b4:	0a 94       	dec	r0
    b2b6:	12 16       	cp	r1, r18
    b2b8:	13 06       	cpc	r1, r19
    b2ba:	14 06       	cpc	r1, r20
    b2bc:	05 06       	cpc	r0, r21
    b2be:	08 95       	ret

0000b2c0 <__fp_round>:
    b2c0:	09 2e       	mov	r0, r25
    b2c2:	03 94       	inc	r0
    b2c4:	00 0c       	add	r0, r0
    b2c6:	11 f4       	brne	.+4      	; 0xb2cc <__fp_round+0xc>
    b2c8:	88 23       	and	r24, r24
    b2ca:	52 f0       	brmi	.+20     	; 0xb2e0 <__fp_round+0x20>
    b2cc:	bb 0f       	add	r27, r27
    b2ce:	40 f4       	brcc	.+16     	; 0xb2e0 <__fp_round+0x20>
    b2d0:	bf 2b       	or	r27, r31
    b2d2:	11 f4       	brne	.+4      	; 0xb2d8 <__fp_round+0x18>
    b2d4:	60 ff       	sbrs	r22, 0
    b2d6:	04 c0       	rjmp	.+8      	; 0xb2e0 <__fp_round+0x20>
    b2d8:	6f 5f       	subi	r22, 0xFF	; 255
    b2da:	7f 4f       	sbci	r23, 0xFF	; 255
    b2dc:	8f 4f       	sbci	r24, 0xFF	; 255
    b2de:	9f 4f       	sbci	r25, 0xFF	; 255
    b2e0:	08 95       	ret

0000b2e2 <__fp_split3>:
    b2e2:	57 fd       	sbrc	r21, 7
    b2e4:	90 58       	subi	r25, 0x80	; 128
    b2e6:	44 0f       	add	r20, r20
    b2e8:	55 1f       	adc	r21, r21
    b2ea:	59 f0       	breq	.+22     	; 0xb302 <__fp_splitA+0x10>
    b2ec:	5f 3f       	cpi	r21, 0xFF	; 255
    b2ee:	71 f0       	breq	.+28     	; 0xb30c <__fp_splitA+0x1a>
    b2f0:	47 95       	ror	r20

0000b2f2 <__fp_splitA>:
    b2f2:	88 0f       	add	r24, r24
    b2f4:	97 fb       	bst	r25, 7
    b2f6:	99 1f       	adc	r25, r25
    b2f8:	61 f0       	breq	.+24     	; 0xb312 <__fp_splitA+0x20>
    b2fa:	9f 3f       	cpi	r25, 0xFF	; 255
    b2fc:	79 f0       	breq	.+30     	; 0xb31c <__fp_splitA+0x2a>
    b2fe:	87 95       	ror	r24
    b300:	08 95       	ret
    b302:	12 16       	cp	r1, r18
    b304:	13 06       	cpc	r1, r19
    b306:	14 06       	cpc	r1, r20
    b308:	55 1f       	adc	r21, r21
    b30a:	f2 cf       	rjmp	.-28     	; 0xb2f0 <__fp_split3+0xe>
    b30c:	46 95       	lsr	r20
    b30e:	f1 df       	rcall	.-30     	; 0xb2f2 <__fp_splitA>
    b310:	08 c0       	rjmp	.+16     	; 0xb322 <__fp_splitA+0x30>
    b312:	16 16       	cp	r1, r22
    b314:	17 06       	cpc	r1, r23
    b316:	18 06       	cpc	r1, r24
    b318:	99 1f       	adc	r25, r25
    b31a:	f1 cf       	rjmp	.-30     	; 0xb2fe <__fp_splitA+0xc>
    b31c:	86 95       	lsr	r24
    b31e:	71 05       	cpc	r23, r1
    b320:	61 05       	cpc	r22, r1
    b322:	08 94       	sec
    b324:	08 95       	ret

0000b326 <__fp_zero>:
    b326:	e8 94       	clt

0000b328 <__fp_szero>:
    b328:	bb 27       	eor	r27, r27
    b32a:	66 27       	eor	r22, r22
    b32c:	77 27       	eor	r23, r23
    b32e:	cb 01       	movw	r24, r22
    b330:	97 f9       	bld	r25, 7
    b332:	08 95       	ret

0000b334 <__gesf2>:
    b334:	8a df       	rcall	.-236    	; 0xb24a <__fp_cmp>
    b336:	08 f4       	brcc	.+2      	; 0xb33a <__gesf2+0x6>
    b338:	8f ef       	ldi	r24, 0xFF	; 255
    b33a:	08 95       	ret

0000b33c <__mulsf3>:
    b33c:	0b d0       	rcall	.+22     	; 0xb354 <__mulsf3x>
    b33e:	c0 cf       	rjmp	.-128    	; 0xb2c0 <__fp_round>
    b340:	b1 df       	rcall	.-158    	; 0xb2a4 <__fp_pscA>
    b342:	28 f0       	brcs	.+10     	; 0xb34e <__mulsf3+0x12>
    b344:	b6 df       	rcall	.-148    	; 0xb2b2 <__fp_pscB>
    b346:	18 f0       	brcs	.+6      	; 0xb34e <__mulsf3+0x12>
    b348:	95 23       	and	r25, r21
    b34a:	09 f0       	breq	.+2      	; 0xb34e <__mulsf3+0x12>
    b34c:	a2 cf       	rjmp	.-188    	; 0xb292 <__fp_inf>
    b34e:	a7 cf       	rjmp	.-178    	; 0xb29e <__fp_nan>
    b350:	11 24       	eor	r1, r1
    b352:	ea cf       	rjmp	.-44     	; 0xb328 <__fp_szero>

0000b354 <__mulsf3x>:
    b354:	c6 df       	rcall	.-116    	; 0xb2e2 <__fp_split3>
    b356:	a0 f3       	brcs	.-24     	; 0xb340 <__mulsf3+0x4>

0000b358 <__mulsf3_pse>:
    b358:	95 9f       	mul	r25, r21
    b35a:	d1 f3       	breq	.-12     	; 0xb350 <__mulsf3+0x14>
    b35c:	95 0f       	add	r25, r21
    b35e:	50 e0       	ldi	r21, 0x00	; 0
    b360:	55 1f       	adc	r21, r21
    b362:	62 9f       	mul	r22, r18
    b364:	f0 01       	movw	r30, r0
    b366:	72 9f       	mul	r23, r18
    b368:	bb 27       	eor	r27, r27
    b36a:	f0 0d       	add	r31, r0
    b36c:	b1 1d       	adc	r27, r1
    b36e:	63 9f       	mul	r22, r19
    b370:	aa 27       	eor	r26, r26
    b372:	f0 0d       	add	r31, r0
    b374:	b1 1d       	adc	r27, r1
    b376:	aa 1f       	adc	r26, r26
    b378:	64 9f       	mul	r22, r20
    b37a:	66 27       	eor	r22, r22
    b37c:	b0 0d       	add	r27, r0
    b37e:	a1 1d       	adc	r26, r1
    b380:	66 1f       	adc	r22, r22
    b382:	82 9f       	mul	r24, r18
    b384:	22 27       	eor	r18, r18
    b386:	b0 0d       	add	r27, r0
    b388:	a1 1d       	adc	r26, r1
    b38a:	62 1f       	adc	r22, r18
    b38c:	73 9f       	mul	r23, r19
    b38e:	b0 0d       	add	r27, r0
    b390:	a1 1d       	adc	r26, r1
    b392:	62 1f       	adc	r22, r18
    b394:	83 9f       	mul	r24, r19
    b396:	a0 0d       	add	r26, r0
    b398:	61 1d       	adc	r22, r1
    b39a:	22 1f       	adc	r18, r18
    b39c:	74 9f       	mul	r23, r20
    b39e:	33 27       	eor	r19, r19
    b3a0:	a0 0d       	add	r26, r0
    b3a2:	61 1d       	adc	r22, r1
    b3a4:	23 1f       	adc	r18, r19
    b3a6:	84 9f       	mul	r24, r20
    b3a8:	60 0d       	add	r22, r0
    b3aa:	21 1d       	adc	r18, r1
    b3ac:	82 2f       	mov	r24, r18
    b3ae:	76 2f       	mov	r23, r22
    b3b0:	6a 2f       	mov	r22, r26
    b3b2:	11 24       	eor	r1, r1
    b3b4:	9f 57       	subi	r25, 0x7F	; 127
    b3b6:	50 40       	sbci	r21, 0x00	; 0
    b3b8:	8a f0       	brmi	.+34     	; 0xb3dc <__mulsf3_pse+0x84>
    b3ba:	e1 f0       	breq	.+56     	; 0xb3f4 <__mulsf3_pse+0x9c>
    b3bc:	88 23       	and	r24, r24
    b3be:	4a f0       	brmi	.+18     	; 0xb3d2 <__mulsf3_pse+0x7a>
    b3c0:	ee 0f       	add	r30, r30
    b3c2:	ff 1f       	adc	r31, r31
    b3c4:	bb 1f       	adc	r27, r27
    b3c6:	66 1f       	adc	r22, r22
    b3c8:	77 1f       	adc	r23, r23
    b3ca:	88 1f       	adc	r24, r24
    b3cc:	91 50       	subi	r25, 0x01	; 1
    b3ce:	50 40       	sbci	r21, 0x00	; 0
    b3d0:	a9 f7       	brne	.-22     	; 0xb3bc <__mulsf3_pse+0x64>
    b3d2:	9e 3f       	cpi	r25, 0xFE	; 254
    b3d4:	51 05       	cpc	r21, r1
    b3d6:	70 f0       	brcs	.+28     	; 0xb3f4 <__mulsf3_pse+0x9c>
    b3d8:	5c cf       	rjmp	.-328    	; 0xb292 <__fp_inf>
    b3da:	a6 cf       	rjmp	.-180    	; 0xb328 <__fp_szero>
    b3dc:	5f 3f       	cpi	r21, 0xFF	; 255
    b3de:	ec f3       	brlt	.-6      	; 0xb3da <__mulsf3_pse+0x82>
    b3e0:	98 3e       	cpi	r25, 0xE8	; 232
    b3e2:	dc f3       	brlt	.-10     	; 0xb3da <__mulsf3_pse+0x82>
    b3e4:	86 95       	lsr	r24
    b3e6:	77 95       	ror	r23
    b3e8:	67 95       	ror	r22
    b3ea:	b7 95       	ror	r27
    b3ec:	f7 95       	ror	r31
    b3ee:	e7 95       	ror	r30
    b3f0:	9f 5f       	subi	r25, 0xFF	; 255
    b3f2:	c1 f7       	brne	.-16     	; 0xb3e4 <__mulsf3_pse+0x8c>
    b3f4:	fe 2b       	or	r31, r30
    b3f6:	88 0f       	add	r24, r24
    b3f8:	91 1d       	adc	r25, r1
    b3fa:	96 95       	lsr	r25
    b3fc:	87 95       	ror	r24
    b3fe:	97 f9       	bld	r25, 7
    b400:	08 95       	ret

0000b402 <__cxa_pure_virtual>:
    b402:	0e 94 6f 65 	call	0xcade	; 0xcade <abort>

0000b406 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    b406:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    b408:	91 8d       	ldd	r25, Z+25	; 0x19
    b40a:	22 8d       	ldd	r18, Z+26	; 0x1a
    b40c:	89 2f       	mov	r24, r25
    b40e:	90 e0       	ldi	r25, 0x00	; 0
    b410:	80 5c       	subi	r24, 0xC0	; 192
    b412:	9f 4f       	sbci	r25, 0xFF	; 255
    b414:	82 1b       	sub	r24, r18
    b416:	91 09       	sbc	r25, r1
}
    b418:	8f 73       	andi	r24, 0x3F	; 63
    b41a:	99 27       	eor	r25, r25
    b41c:	08 95       	ret

0000b41e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    b41e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    b420:	91 8d       	ldd	r25, Z+25	; 0x19
    b422:	82 8d       	ldd	r24, Z+26	; 0x1a
    b424:	98 17       	cp	r25, r24
    b426:	31 f0       	breq	.+12     	; 0xb434 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    b428:	82 8d       	ldd	r24, Z+26	; 0x1a
    b42a:	e8 0f       	add	r30, r24
    b42c:	f1 1d       	adc	r31, r1
    b42e:	85 8d       	ldd	r24, Z+29	; 0x1d
    b430:	90 e0       	ldi	r25, 0x00	; 0
    b432:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    b434:	8f ef       	ldi	r24, 0xFF	; 255
    b436:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    b438:	08 95       	ret

0000b43a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    b43a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    b43c:	91 8d       	ldd	r25, Z+25	; 0x19
    b43e:	82 8d       	ldd	r24, Z+26	; 0x1a
    b440:	98 17       	cp	r25, r24
    b442:	61 f0       	breq	.+24     	; 0xb45c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    b444:	82 8d       	ldd	r24, Z+26	; 0x1a
    b446:	df 01       	movw	r26, r30
    b448:	a8 0f       	add	r26, r24
    b44a:	b1 1d       	adc	r27, r1
    b44c:	5d 96       	adiw	r26, 0x1d	; 29
    b44e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    b450:	92 8d       	ldd	r25, Z+26	; 0x1a
    b452:	9f 5f       	subi	r25, 0xFF	; 255
    b454:	9f 73       	andi	r25, 0x3F	; 63
    b456:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    b458:	90 e0       	ldi	r25, 0x00	; 0
    b45a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    b45c:	8f ef       	ldi	r24, 0xFF	; 255
    b45e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    b460:	08 95       	ret

0000b462 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    b462:	fc 01       	movw	r30, r24
    b464:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    b466:	44 8d       	ldd	r20, Z+28	; 0x1c
    b468:	25 2f       	mov	r18, r21
    b46a:	30 e0       	ldi	r19, 0x00	; 0
    b46c:	84 2f       	mov	r24, r20
    b46e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    b470:	82 1b       	sub	r24, r18
    b472:	93 0b       	sbc	r25, r19
    b474:	54 17       	cp	r21, r20
    b476:	10 f0       	brcs	.+4      	; 0xb47c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    b478:	cf 96       	adiw	r24, 0x3f	; 63
    b47a:	08 95       	ret
  return tail - head - 1;
    b47c:	01 97       	sbiw	r24, 0x01	; 1
}
    b47e:	08 95       	ret

0000b480 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    b480:	8d ec       	ldi	r24, 0xCD	; 205
    b482:	9b e5       	ldi	r25, 0x5B	; 91
    b484:	89 2b       	or	r24, r25
    b486:	39 f0       	breq	.+14     	; 0xb496 <_Z14serialEventRunv+0x16>
    b488:	80 e0       	ldi	r24, 0x00	; 0
    b48a:	90 e0       	ldi	r25, 0x00	; 0
    b48c:	89 2b       	or	r24, r25
    b48e:	19 f0       	breq	.+6      	; 0xb496 <_Z14serialEventRunv+0x16>
    b490:	84 d1       	rcall	.+776    	; 0xb79a <_Z17Serial0_availablev>
    b492:	81 11       	cpse	r24, r1
    b494:	25 c0       	rjmp	.+74     	; 0xb4e0 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    b496:	80 e0       	ldi	r24, 0x00	; 0
    b498:	90 e0       	ldi	r25, 0x00	; 0
    b49a:	89 2b       	or	r24, r25
    b49c:	41 f0       	breq	.+16     	; 0xb4ae <_Z14serialEventRunv+0x2e>
    b49e:	80 e0       	ldi	r24, 0x00	; 0
    b4a0:	90 e0       	ldi	r25, 0x00	; 0
    b4a2:	89 2b       	or	r24, r25
    b4a4:	21 f0       	breq	.+8      	; 0xb4ae <_Z14serialEventRunv+0x2e>
    b4a6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4aa:	81 11       	cpse	r24, r1
    b4ac:	1c c0       	rjmp	.+56     	; 0xb4e6 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    b4ae:	80 e0       	ldi	r24, 0x00	; 0
    b4b0:	90 e0       	ldi	r25, 0x00	; 0
    b4b2:	89 2b       	or	r24, r25
    b4b4:	41 f0       	breq	.+16     	; 0xb4c6 <_Z14serialEventRunv+0x46>
    b4b6:	80 e0       	ldi	r24, 0x00	; 0
    b4b8:	90 e0       	ldi	r25, 0x00	; 0
    b4ba:	89 2b       	or	r24, r25
    b4bc:	21 f0       	breq	.+8      	; 0xb4c6 <_Z14serialEventRunv+0x46>
    b4be:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4c2:	81 11       	cpse	r24, r1
    b4c4:	13 c0       	rjmp	.+38     	; 0xb4ec <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    b4c6:	80 e0       	ldi	r24, 0x00	; 0
    b4c8:	90 e0       	ldi	r25, 0x00	; 0
    b4ca:	89 2b       	or	r24, r25
    b4cc:	a1 f0       	breq	.+40     	; 0xb4f6 <_Z14serialEventRunv+0x76>
    b4ce:	80 e0       	ldi	r24, 0x00	; 0
    b4d0:	90 e0       	ldi	r25, 0x00	; 0
    b4d2:	89 2b       	or	r24, r25
    b4d4:	81 f0       	breq	.+32     	; 0xb4f6 <_Z14serialEventRunv+0x76>
    b4d6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4da:	81 11       	cpse	r24, r1
    b4dc:	0a c0       	rjmp	.+20     	; 0xb4f2 <_Z14serialEventRunv+0x72>
    b4de:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    b4e0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4e4:	d8 cf       	rjmp	.-80     	; 0xb496 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    b4e6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4ea:	e1 cf       	rjmp	.-62     	; 0xb4ae <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    b4ec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4f0:	ea cf       	rjmp	.-44     	; 0xb4c6 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    b4f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    b4f6:	08 95       	ret

0000b4f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    b4f8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    b4fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    b4fc:	df 01       	movw	r26, r30
    b4fe:	a8 0f       	add	r26, r24
    b500:	b1 1d       	adc	r27, r1
    b502:	a3 5a       	subi	r26, 0xA3	; 163
    b504:	bf 4f       	sbci	r27, 0xFF	; 255
    b506:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    b508:	84 8d       	ldd	r24, Z+28	; 0x1c
    b50a:	90 e0       	ldi	r25, 0x00	; 0
    b50c:	01 96       	adiw	r24, 0x01	; 1
    b50e:	8f 73       	andi	r24, 0x3F	; 63
    b510:	99 27       	eor	r25, r25
    b512:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    b514:	a6 89       	ldd	r26, Z+22	; 0x16
    b516:	b7 89       	ldd	r27, Z+23	; 0x17
    b518:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    b51a:	a0 89       	ldd	r26, Z+16	; 0x10
    b51c:	b1 89       	ldd	r27, Z+17	; 0x11
    b51e:	8c 91       	ld	r24, X
    b520:	83 70       	andi	r24, 0x03	; 3
    b522:	80 64       	ori	r24, 0x40	; 64
    b524:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    b526:	93 8d       	ldd	r25, Z+27	; 0x1b
    b528:	84 8d       	ldd	r24, Z+28	; 0x1c
    b52a:	98 13       	cpse	r25, r24
    b52c:	06 c0       	rjmp	.+12     	; 0xb53a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    b52e:	02 88       	ldd	r0, Z+18	; 0x12
    b530:	f3 89       	ldd	r31, Z+19	; 0x13
    b532:	e0 2d       	mov	r30, r0
    b534:	80 81       	ld	r24, Z
    b536:	8f 7d       	andi	r24, 0xDF	; 223
    b538:	80 83       	st	Z, r24
    b53a:	08 95       	ret

0000b53c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    b53c:	ef 92       	push	r14
    b53e:	ff 92       	push	r15
    b540:	0f 93       	push	r16
    b542:	1f 93       	push	r17
    b544:	cf 93       	push	r28
    b546:	df 93       	push	r29
    b548:	ec 01       	movw	r28, r24
  _written = true;
    b54a:	81 e0       	ldi	r24, 0x01	; 1
    b54c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    b54e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    b550:	8c 8d       	ldd	r24, Y+28	; 0x1c
    b552:	98 13       	cpse	r25, r24
    b554:	05 c0       	rjmp	.+10     	; 0xb560 <_ZN14HardwareSerial5writeEh+0x24>
    b556:	e8 89       	ldd	r30, Y+16	; 0x10
    b558:	f9 89       	ldd	r31, Y+17	; 0x11
    b55a:	80 81       	ld	r24, Z
    b55c:	85 fd       	sbrc	r24, 5
    b55e:	25 c0       	rjmp	.+74     	; 0xb5aa <_ZN14HardwareSerial5writeEh+0x6e>
    b560:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    b562:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b564:	10 e0       	ldi	r17, 0x00	; 0
    b566:	0f 5f       	subi	r16, 0xFF	; 255
    b568:	1f 4f       	sbci	r17, 0xFF	; 255
    b56a:	0f 73       	andi	r16, 0x3F	; 63
    b56c:	11 27       	eor	r17, r17
    b56e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    b570:	8c 8d       	ldd	r24, Y+28	; 0x1c
    b572:	e8 12       	cpse	r14, r24
    b574:	0b c0       	rjmp	.+22     	; 0xb58c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    b576:	0f b6       	in	r0, 0x3f	; 63
    b578:	07 fc       	sbrc	r0, 7
    b57a:	fa cf       	rjmp	.-12     	; 0xb570 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    b57c:	e8 89       	ldd	r30, Y+16	; 0x10
    b57e:	f9 89       	ldd	r31, Y+17	; 0x11
    b580:	80 81       	ld	r24, Z
    b582:	85 ff       	sbrs	r24, 5
    b584:	f5 cf       	rjmp	.-22     	; 0xb570 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    b586:	ce 01       	movw	r24, r28
    b588:	b7 df       	rcall	.-146    	; 0xb4f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    b58a:	f2 cf       	rjmp	.-28     	; 0xb570 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    b58c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b58e:	fe 01       	movw	r30, r28
    b590:	e8 0f       	add	r30, r24
    b592:	f1 1d       	adc	r31, r1
    b594:	e3 5a       	subi	r30, 0xA3	; 163
    b596:	ff 4f       	sbci	r31, 0xFF	; 255
    b598:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    b59a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b59c:	f8 94       	cli
    _tx_buffer_head = i;
    b59e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    b5a0:	ea 89       	ldd	r30, Y+18	; 0x12
    b5a2:	fb 89       	ldd	r31, Y+19	; 0x13
    b5a4:	80 81       	ld	r24, Z
    b5a6:	80 62       	ori	r24, 0x20	; 32
    b5a8:	0a c0       	rjmp	.+20     	; 0xb5be <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    b5aa:	9f b7       	in	r25, 0x3f	; 63
    b5ac:	f8 94       	cli
      *_udr = c;
    b5ae:	ee 89       	ldd	r30, Y+22	; 0x16
    b5b0:	ff 89       	ldd	r31, Y+23	; 0x17
    b5b2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    b5b4:	e8 89       	ldd	r30, Y+16	; 0x10
    b5b6:	f9 89       	ldd	r31, Y+17	; 0x11
    b5b8:	80 81       	ld	r24, Z
    b5ba:	83 70       	andi	r24, 0x03	; 3
    b5bc:	80 64       	ori	r24, 0x40	; 64
    b5be:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b5c0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    b5c2:	81 e0       	ldi	r24, 0x01	; 1
    b5c4:	90 e0       	ldi	r25, 0x00	; 0
    b5c6:	df 91       	pop	r29
    b5c8:	cf 91       	pop	r28
    b5ca:	1f 91       	pop	r17
    b5cc:	0f 91       	pop	r16
    b5ce:	ff 90       	pop	r15
    b5d0:	ef 90       	pop	r14
    b5d2:	08 95       	ret

0000b5d4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    b5d4:	cf 93       	push	r28
    b5d6:	df 93       	push	r29
    b5d8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    b5da:	88 8d       	ldd	r24, Y+24	; 0x18
    b5dc:	88 23       	and	r24, r24
    b5de:	c1 f0       	breq	.+48     	; 0xb610 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    b5e0:	ea 89       	ldd	r30, Y+18	; 0x12
    b5e2:	fb 89       	ldd	r31, Y+19	; 0x13
    b5e4:	80 81       	ld	r24, Z
    b5e6:	85 fd       	sbrc	r24, 5
    b5e8:	05 c0       	rjmp	.+10     	; 0xb5f4 <_ZN14HardwareSerial5flushEv+0x20>
    b5ea:	a8 89       	ldd	r26, Y+16	; 0x10
    b5ec:	b9 89       	ldd	r27, Y+17	; 0x11
    b5ee:	8c 91       	ld	r24, X
    b5f0:	86 fd       	sbrc	r24, 6
    b5f2:	0e c0       	rjmp	.+28     	; 0xb610 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    b5f4:	0f b6       	in	r0, 0x3f	; 63
    b5f6:	07 fc       	sbrc	r0, 7
    b5f8:	f5 cf       	rjmp	.-22     	; 0xb5e4 <_ZN14HardwareSerial5flushEv+0x10>
    b5fa:	80 81       	ld	r24, Z
    b5fc:	85 ff       	sbrs	r24, 5
    b5fe:	f2 cf       	rjmp	.-28     	; 0xb5e4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    b600:	a8 89       	ldd	r26, Y+16	; 0x10
    b602:	b9 89       	ldd	r27, Y+17	; 0x11
    b604:	8c 91       	ld	r24, X
    b606:	85 ff       	sbrs	r24, 5
    b608:	ed cf       	rjmp	.-38     	; 0xb5e4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    b60a:	ce 01       	movw	r24, r28
    b60c:	75 df       	rcall	.-278    	; 0xb4f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    b60e:	e8 cf       	rjmp	.-48     	; 0xb5e0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    b610:	df 91       	pop	r29
    b612:	cf 91       	pop	r28
    b614:	08 95       	ret

0000b616 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    b616:	cf 92       	push	r12
    b618:	df 92       	push	r13
    b61a:	ef 92       	push	r14
    b61c:	ff 92       	push	r15
    b61e:	1f 93       	push	r17
    b620:	cf 93       	push	r28
    b622:	df 93       	push	r29
    b624:	ec 01       	movw	r28, r24
    b626:	6a 01       	movw	r12, r20
    b628:	7b 01       	movw	r14, r22
    b62a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    b62c:	e8 89       	ldd	r30, Y+16	; 0x10
    b62e:	f9 89       	ldd	r31, Y+17	; 0x11
    b630:	82 e0       	ldi	r24, 0x02	; 2
    b632:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    b634:	41 15       	cp	r20, r1
    b636:	51 4e       	sbci	r21, 0xE1	; 225
    b638:	61 05       	cpc	r22, r1
    b63a:	71 05       	cpc	r23, r1
    b63c:	a9 f0       	breq	.+42     	; 0xb668 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    b63e:	60 e0       	ldi	r22, 0x00	; 0
    b640:	79 e0       	ldi	r23, 0x09	; 9
    b642:	8d e3       	ldi	r24, 0x3D	; 61
    b644:	90 e0       	ldi	r25, 0x00	; 0
    b646:	a7 01       	movw	r20, r14
    b648:	96 01       	movw	r18, r12
    b64a:	e9 d7       	rcall	.+4050   	; 0xc61e <__udivmodsi4>
    b64c:	da 01       	movw	r26, r20
    b64e:	c9 01       	movw	r24, r18
    b650:	01 97       	sbiw	r24, 0x01	; 1
    b652:	a1 09       	sbc	r26, r1
    b654:	b1 09       	sbc	r27, r1
    b656:	b6 95       	lsr	r27
    b658:	a7 95       	ror	r26
    b65a:	97 95       	ror	r25
    b65c:	87 95       	ror	r24
    b65e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    b660:	21 15       	cp	r18, r1
    b662:	80 e1       	ldi	r24, 0x10	; 16
    b664:	38 07       	cpc	r19, r24
    b666:	a0 f0       	brcs	.+40     	; 0xb690 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    b668:	e8 89       	ldd	r30, Y+16	; 0x10
    b66a:	f9 89       	ldd	r31, Y+17	; 0x11
    b66c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    b66e:	60 e8       	ldi	r22, 0x80	; 128
    b670:	74 e8       	ldi	r23, 0x84	; 132
    b672:	8e e1       	ldi	r24, 0x1E	; 30
    b674:	90 e0       	ldi	r25, 0x00	; 0
    b676:	a7 01       	movw	r20, r14
    b678:	96 01       	movw	r18, r12
    b67a:	d1 d7       	rcall	.+4002   	; 0xc61e <__udivmodsi4>
    b67c:	da 01       	movw	r26, r20
    b67e:	c9 01       	movw	r24, r18
    b680:	01 97       	sbiw	r24, 0x01	; 1
    b682:	a1 09       	sbc	r26, r1
    b684:	b1 09       	sbc	r27, r1
    b686:	b6 95       	lsr	r27
    b688:	a7 95       	ror	r26
    b68a:	97 95       	ror	r25
    b68c:	87 95       	ror	r24
    b68e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    b690:	ec 85       	ldd	r30, Y+12	; 0x0c
    b692:	fd 85       	ldd	r31, Y+13	; 0x0d
    b694:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    b696:	ee 85       	ldd	r30, Y+14	; 0x0e
    b698:	ff 85       	ldd	r31, Y+15	; 0x0f
    b69a:	20 83       	st	Z, r18

  _written = false;
    b69c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    b69e:	ec 89       	ldd	r30, Y+20	; 0x14
    b6a0:	fd 89       	ldd	r31, Y+21	; 0x15
    b6a2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    b6a4:	ea 89       	ldd	r30, Y+18	; 0x12
    b6a6:	fb 89       	ldd	r31, Y+19	; 0x13
    b6a8:	80 81       	ld	r24, Z
    b6aa:	80 61       	ori	r24, 0x10	; 16
    b6ac:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    b6ae:	ea 89       	ldd	r30, Y+18	; 0x12
    b6b0:	fb 89       	ldd	r31, Y+19	; 0x13
    b6b2:	80 81       	ld	r24, Z
    b6b4:	88 60       	ori	r24, 0x08	; 8
    b6b6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    b6b8:	ea 89       	ldd	r30, Y+18	; 0x12
    b6ba:	fb 89       	ldd	r31, Y+19	; 0x13
    b6bc:	80 81       	ld	r24, Z
    b6be:	80 68       	ori	r24, 0x80	; 128
    b6c0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    b6c2:	ea 89       	ldd	r30, Y+18	; 0x12
    b6c4:	fb 89       	ldd	r31, Y+19	; 0x13
    b6c6:	80 81       	ld	r24, Z
    b6c8:	8f 7d       	andi	r24, 0xDF	; 223
    b6ca:	80 83       	st	Z, r24
}
    b6cc:	df 91       	pop	r29
    b6ce:	cf 91       	pop	r28
    b6d0:	1f 91       	pop	r17
    b6d2:	ff 90       	pop	r15
    b6d4:	ef 90       	pop	r14
    b6d6:	df 90       	pop	r13
    b6d8:	cf 90       	pop	r12
    b6da:	08 95       	ret

0000b6dc <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    b6dc:	1f 92       	push	r1
    b6de:	0f 92       	push	r0
    b6e0:	0f b6       	in	r0, 0x3f	; 63
    b6e2:	0f 92       	push	r0
    b6e4:	11 24       	eor	r1, r1
    b6e6:	0b b6       	in	r0, 0x3b	; 59
    b6e8:	0f 92       	push	r0
    b6ea:	2f 93       	push	r18
    b6ec:	8f 93       	push	r24
    b6ee:	9f 93       	push	r25
    b6f0:	ef 93       	push	r30
    b6f2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    b6f4:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <Serial+0x10>
    b6f8:	f0 91 de 05 	lds	r31, 0x05DE	; 0x8005de <Serial+0x11>
    b6fc:	80 81       	ld	r24, Z
    b6fe:	e0 91 e3 05 	lds	r30, 0x05E3	; 0x8005e3 <Serial+0x16>
    b702:	f0 91 e4 05 	lds	r31, 0x05E4	; 0x8005e4 <Serial+0x17>
    b706:	82 fd       	sbrc	r24, 2
    b708:	12 c0       	rjmp	.+36     	; 0xb72e <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    b70a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    b70c:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <Serial+0x19>
    b710:	8f 5f       	subi	r24, 0xFF	; 255
    b712:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    b714:	20 91 e7 05 	lds	r18, 0x05E7	; 0x8005e7 <Serial+0x1a>
    b718:	82 17       	cp	r24, r18
    b71a:	51 f0       	breq	.+20     	; 0xb730 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    b71c:	e0 91 e6 05 	lds	r30, 0x05E6	; 0x8005e6 <Serial+0x19>
    b720:	f0 e0       	ldi	r31, 0x00	; 0
    b722:	e3 53       	subi	r30, 0x33	; 51
    b724:	fa 4f       	sbci	r31, 0xFA	; 250
    b726:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    b728:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <Serial+0x19>
    b72c:	01 c0       	rjmp	.+2      	; 0xb730 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    b72e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    b730:	ff 91       	pop	r31
    b732:	ef 91       	pop	r30
    b734:	9f 91       	pop	r25
    b736:	8f 91       	pop	r24
    b738:	2f 91       	pop	r18
    b73a:	0f 90       	pop	r0
    b73c:	0b be       	out	0x3b, r0	; 59
    b73e:	0f 90       	pop	r0
    b740:	0f be       	out	0x3f, r0	; 63
    b742:	0f 90       	pop	r0
    b744:	1f 90       	pop	r1
    b746:	18 95       	reti

0000b748 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    b748:	1f 92       	push	r1
    b74a:	0f 92       	push	r0
    b74c:	0f b6       	in	r0, 0x3f	; 63
    b74e:	0f 92       	push	r0
    b750:	11 24       	eor	r1, r1
    b752:	0b b6       	in	r0, 0x3b	; 59
    b754:	0f 92       	push	r0
    b756:	2f 93       	push	r18
    b758:	3f 93       	push	r19
    b75a:	4f 93       	push	r20
    b75c:	5f 93       	push	r21
    b75e:	6f 93       	push	r22
    b760:	7f 93       	push	r23
    b762:	8f 93       	push	r24
    b764:	9f 93       	push	r25
    b766:	af 93       	push	r26
    b768:	bf 93       	push	r27
    b76a:	ef 93       	push	r30
    b76c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    b76e:	8d ec       	ldi	r24, 0xCD	; 205
    b770:	95 e0       	ldi	r25, 0x05	; 5
    b772:	c2 de       	rcall	.-636    	; 0xb4f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    b774:	ff 91       	pop	r31
    b776:	ef 91       	pop	r30
    b778:	bf 91       	pop	r27
    b77a:	af 91       	pop	r26
    b77c:	9f 91       	pop	r25
    b77e:	8f 91       	pop	r24
    b780:	7f 91       	pop	r23
    b782:	6f 91       	pop	r22
    b784:	5f 91       	pop	r21
    b786:	4f 91       	pop	r20
    b788:	3f 91       	pop	r19
    b78a:	2f 91       	pop	r18
    b78c:	0f 90       	pop	r0
    b78e:	0b be       	out	0x3b, r0	; 59
    b790:	0f 90       	pop	r0
    b792:	0f be       	out	0x3f, r0	; 63
    b794:	0f 90       	pop	r0
    b796:	1f 90       	pop	r1
    b798:	18 95       	reti

0000b79a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    b79a:	8d ec       	ldi	r24, 0xCD	; 205
    b79c:	95 e0       	ldi	r25, 0x05	; 5
    b79e:	33 de       	rcall	.-922    	; 0xb406 <_ZN14HardwareSerial9availableEv>
    b7a0:	21 e0       	ldi	r18, 0x01	; 1
    b7a2:	89 2b       	or	r24, r25
    b7a4:	09 f4       	brne	.+2      	; 0xb7a8 <_Z17Serial0_availablev+0xe>
    b7a6:	20 e0       	ldi	r18, 0x00	; 0
}
    b7a8:	82 2f       	mov	r24, r18
    b7aa:	08 95       	ret

0000b7ac <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    b7ac:	ed ec       	ldi	r30, 0xCD	; 205
    b7ae:	f5 e0       	ldi	r31, 0x05	; 5
    b7b0:	13 82       	std	Z+3, r1	; 0x03
    b7b2:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    b7b4:	88 ee       	ldi	r24, 0xE8	; 232
    b7b6:	93 e0       	ldi	r25, 0x03	; 3
    b7b8:	a0 e0       	ldi	r26, 0x00	; 0
    b7ba:	b0 e0       	ldi	r27, 0x00	; 0
    b7bc:	84 83       	std	Z+4, r24	; 0x04
    b7be:	95 83       	std	Z+5, r25	; 0x05
    b7c0:	a6 83       	std	Z+6, r26	; 0x06
    b7c2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    b7c4:	89 e3       	ldi	r24, 0x39	; 57
    b7c6:	93 e0       	ldi	r25, 0x03	; 3
    b7c8:	91 83       	std	Z+1, r25	; 0x01
    b7ca:	80 83       	st	Z, r24
    b7cc:	85 ec       	ldi	r24, 0xC5	; 197
    b7ce:	90 e0       	ldi	r25, 0x00	; 0
    b7d0:	95 87       	std	Z+13, r25	; 0x0d
    b7d2:	84 87       	std	Z+12, r24	; 0x0c
    b7d4:	84 ec       	ldi	r24, 0xC4	; 196
    b7d6:	90 e0       	ldi	r25, 0x00	; 0
    b7d8:	97 87       	std	Z+15, r25	; 0x0f
    b7da:	86 87       	std	Z+14, r24	; 0x0e
    b7dc:	80 ec       	ldi	r24, 0xC0	; 192
    b7de:	90 e0       	ldi	r25, 0x00	; 0
    b7e0:	91 8b       	std	Z+17, r25	; 0x11
    b7e2:	80 8b       	std	Z+16, r24	; 0x10
    b7e4:	81 ec       	ldi	r24, 0xC1	; 193
    b7e6:	90 e0       	ldi	r25, 0x00	; 0
    b7e8:	93 8b       	std	Z+19, r25	; 0x13
    b7ea:	82 8b       	std	Z+18, r24	; 0x12
    b7ec:	82 ec       	ldi	r24, 0xC2	; 194
    b7ee:	90 e0       	ldi	r25, 0x00	; 0
    b7f0:	95 8b       	std	Z+21, r25	; 0x15
    b7f2:	84 8b       	std	Z+20, r24	; 0x14
    b7f4:	86 ec       	ldi	r24, 0xC6	; 198
    b7f6:	90 e0       	ldi	r25, 0x00	; 0
    b7f8:	97 8b       	std	Z+23, r25	; 0x17
    b7fa:	86 8b       	std	Z+22, r24	; 0x16
    b7fc:	11 8e       	std	Z+25, r1	; 0x19
    b7fe:	12 8e       	std	Z+26, r1	; 0x1a
    b800:	13 8e       	std	Z+27, r1	; 0x1b
    b802:	14 8e       	std	Z+28, r1	; 0x1c
    b804:	08 95       	ret

0000b806 <initVariant>:
    b806:	08 95       	ret

0000b808 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    b808:	e5 d2       	rcall	.+1482   	; 0xbdd4 <init>

	initVariant();
    b80a:	fd df       	rcall	.-6      	; 0xb806 <initVariant>
    b80c:	0e 94 89 0a 	call	0x1512	; 0x1512 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    b810:	c0 e4       	ldi	r28, 0x40	; 64
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    b812:	da e5       	ldi	r29, 0x5A	; 90
    b814:	0e 94 c8 0b 	call	0x1790	; 0x1790 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    b818:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    b81a:	e1 f3       	breq	.-8      	; 0xb814 <main+0xc>
    b81c:	31 de       	rcall	.-926    	; 0xb480 <_Z14serialEventRunv>
    b81e:	fa cf       	rjmp	.-12     	; 0xb814 <main+0xc>

0000b820 <_Znaj>:
    b820:	5d c7       	rjmp	.+3770   	; 0xc6dc <malloc>

0000b822 <_ZdaPv>:
void operator delete(void * ptr) {
  free(ptr);
}

void operator delete[](void * ptr) {
  free(ptr);
    b822:	f4 c7       	rjmp	.+4072   	; 0xc80c <free>

0000b824 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    b824:	cf 92       	push	r12
    b826:	df 92       	push	r13
    b828:	ef 92       	push	r14
    b82a:	ff 92       	push	r15
    b82c:	0f 93       	push	r16
    b82e:	1f 93       	push	r17
    b830:	cf 93       	push	r28
    b832:	df 93       	push	r29
    b834:	6c 01       	movw	r12, r24
    b836:	7a 01       	movw	r14, r20
    b838:	8b 01       	movw	r16, r22
    b83a:	c0 e0       	ldi	r28, 0x00	; 0
    b83c:	d0 e0       	ldi	r29, 0x00	; 0
    b83e:	ce 15       	cp	r28, r14
    b840:	df 05       	cpc	r29, r15
    b842:	81 f0       	breq	.+32     	; 0xb864 <_ZN5Print5writeEPKhj+0x40>
    b844:	d8 01       	movw	r26, r16
    b846:	6d 91       	ld	r22, X+
    b848:	8d 01       	movw	r16, r26
    b84a:	d6 01       	movw	r26, r12
    b84c:	ed 91       	ld	r30, X+
    b84e:	fc 91       	ld	r31, X
    b850:	01 90       	ld	r0, Z+
    b852:	f0 81       	ld	r31, Z
    b854:	e0 2d       	mov	r30, r0
    b856:	c6 01       	movw	r24, r12
    b858:	19 95       	eicall
    b85a:	89 2b       	or	r24, r25
    b85c:	11 f0       	breq	.+4      	; 0xb862 <_ZN5Print5writeEPKhj+0x3e>
    b85e:	21 96       	adiw	r28, 0x01	; 1
    b860:	ee cf       	rjmp	.-36     	; 0xb83e <_ZN5Print5writeEPKhj+0x1a>
    b862:	7e 01       	movw	r14, r28
    b864:	c7 01       	movw	r24, r14
    b866:	df 91       	pop	r29
    b868:	cf 91       	pop	r28
    b86a:	1f 91       	pop	r17
    b86c:	0f 91       	pop	r16
    b86e:	ff 90       	pop	r15
    b870:	ef 90       	pop	r14
    b872:	df 90       	pop	r13
    b874:	cf 90       	pop	r12
    b876:	08 95       	ret

0000b878 <_ZN5Print5writeEPKc>:
    b878:	61 15       	cp	r22, r1
    b87a:	71 05       	cpc	r23, r1
    b87c:	79 f0       	breq	.+30     	; 0xb89c <_ZN5Print5writeEPKc+0x24>
    b87e:	fb 01       	movw	r30, r22
    b880:	01 90       	ld	r0, Z+
    b882:	00 20       	and	r0, r0
    b884:	e9 f7       	brne	.-6      	; 0xb880 <_ZN5Print5writeEPKc+0x8>
    b886:	31 97       	sbiw	r30, 0x01	; 1
    b888:	af 01       	movw	r20, r30
    b88a:	46 1b       	sub	r20, r22
    b88c:	57 0b       	sbc	r21, r23
    b88e:	dc 01       	movw	r26, r24
    b890:	ed 91       	ld	r30, X+
    b892:	fc 91       	ld	r31, X
    b894:	02 80       	ldd	r0, Z+2	; 0x02
    b896:	f3 81       	ldd	r31, Z+3	; 0x03
    b898:	e0 2d       	mov	r30, r0
    b89a:	19 94       	eijmp
    b89c:	80 e0       	ldi	r24, 0x00	; 0
    b89e:	90 e0       	ldi	r25, 0x00	; 0
    b8a0:	08 95       	ret

0000b8a2 <_ZN5Print5printEPK19__FlashStringHelper>:
    b8a2:	ef 92       	push	r14
    b8a4:	ff 92       	push	r15
    b8a6:	0f 93       	push	r16
    b8a8:	1f 93       	push	r17
    b8aa:	cf 93       	push	r28
    b8ac:	df 93       	push	r29
    b8ae:	8c 01       	movw	r16, r24
    b8b0:	7b 01       	movw	r14, r22
    b8b2:	c0 e0       	ldi	r28, 0x00	; 0
    b8b4:	d0 e0       	ldi	r29, 0x00	; 0
    b8b6:	f7 01       	movw	r30, r14
    b8b8:	ec 0f       	add	r30, r28
    b8ba:	fd 1f       	adc	r31, r29
    b8bc:	64 91       	lpm	r22, Z
    b8be:	66 23       	and	r22, r22
    b8c0:	61 f0       	breq	.+24     	; 0xb8da <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    b8c2:	d8 01       	movw	r26, r16
    b8c4:	ed 91       	ld	r30, X+
    b8c6:	fc 91       	ld	r31, X
    b8c8:	01 90       	ld	r0, Z+
    b8ca:	f0 81       	ld	r31, Z
    b8cc:	e0 2d       	mov	r30, r0
    b8ce:	c8 01       	movw	r24, r16
    b8d0:	19 95       	eicall
    b8d2:	89 2b       	or	r24, r25
    b8d4:	11 f0       	breq	.+4      	; 0xb8da <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    b8d6:	21 96       	adiw	r28, 0x01	; 1
    b8d8:	ee cf       	rjmp	.-36     	; 0xb8b6 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    b8da:	ce 01       	movw	r24, r28
    b8dc:	df 91       	pop	r29
    b8de:	cf 91       	pop	r28
    b8e0:	1f 91       	pop	r17
    b8e2:	0f 91       	pop	r16
    b8e4:	ff 90       	pop	r15
    b8e6:	ef 90       	pop	r14
    b8e8:	08 95       	ret

0000b8ea <_ZN5Print5printEPKc>:
    b8ea:	c6 cf       	rjmp	.-116    	; 0xb878 <_ZN5Print5writeEPKc>

0000b8ec <_ZN5Print5printEc>:
    b8ec:	dc 01       	movw	r26, r24
    b8ee:	ed 91       	ld	r30, X+
    b8f0:	fc 91       	ld	r31, X
    b8f2:	01 90       	ld	r0, Z+
    b8f4:	f0 81       	ld	r31, Z
    b8f6:	e0 2d       	mov	r30, r0
    b8f8:	19 94       	eijmp

0000b8fa <_ZN5Print7printlnEv>:
    b8fa:	67 e4       	ldi	r22, 0x47	; 71
    b8fc:	73 e0       	ldi	r23, 0x03	; 3
    b8fe:	bc cf       	rjmp	.-136    	; 0xb878 <_ZN5Print5writeEPKc>

0000b900 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    b900:	0f 93       	push	r16
    b902:	1f 93       	push	r17
    b904:	cf 93       	push	r28
    b906:	df 93       	push	r29
    b908:	ec 01       	movw	r28, r24
    b90a:	cb df       	rcall	.-106    	; 0xb8a2 <_ZN5Print5printEPK19__FlashStringHelper>
    b90c:	8c 01       	movw	r16, r24
    b90e:	ce 01       	movw	r24, r28
    b910:	f4 df       	rcall	.-24     	; 0xb8fa <_ZN5Print7printlnEv>
    b912:	80 0f       	add	r24, r16
    b914:	91 1f       	adc	r25, r17
    b916:	df 91       	pop	r29
    b918:	cf 91       	pop	r28
    b91a:	1f 91       	pop	r17
    b91c:	0f 91       	pop	r16
    b91e:	08 95       	ret

0000b920 <_ZN5Print7printlnEPKc>:
    b920:	0f 93       	push	r16
    b922:	1f 93       	push	r17
    b924:	cf 93       	push	r28
    b926:	df 93       	push	r29
    b928:	ec 01       	movw	r28, r24
    b92a:	a6 df       	rcall	.-180    	; 0xb878 <_ZN5Print5writeEPKc>
    b92c:	8c 01       	movw	r16, r24
    b92e:	ce 01       	movw	r24, r28
    b930:	e4 df       	rcall	.-56     	; 0xb8fa <_ZN5Print7printlnEv>
    b932:	80 0f       	add	r24, r16
    b934:	91 1f       	adc	r25, r17
    b936:	df 91       	pop	r29
    b938:	cf 91       	pop	r28
    b93a:	1f 91       	pop	r17
    b93c:	0f 91       	pop	r16
    b93e:	08 95       	ret

0000b940 <_ZN5Print7printlnEc>:
    b940:	0f 93       	push	r16
    b942:	1f 93       	push	r17
    b944:	cf 93       	push	r28
    b946:	df 93       	push	r29
    b948:	ec 01       	movw	r28, r24
    b94a:	d0 df       	rcall	.-96     	; 0xb8ec <_ZN5Print5printEc>
    b94c:	8c 01       	movw	r16, r24
    b94e:	ce 01       	movw	r24, r28
    b950:	d4 df       	rcall	.-88     	; 0xb8fa <_ZN5Print7printlnEv>
    b952:	80 0f       	add	r24, r16
    b954:	91 1f       	adc	r25, r17
    b956:	df 91       	pop	r29
    b958:	cf 91       	pop	r28
    b95a:	1f 91       	pop	r17
    b95c:	0f 91       	pop	r16
    b95e:	08 95       	ret

0000b960 <_ZN5Print11printNumberEmh>:
    b960:	8f 92       	push	r8
    b962:	9f 92       	push	r9
    b964:	af 92       	push	r10
    b966:	bf 92       	push	r11
    b968:	ef 92       	push	r14
    b96a:	ff 92       	push	r15
    b96c:	0f 93       	push	r16
    b96e:	1f 93       	push	r17
    b970:	cf 93       	push	r28
    b972:	df 93       	push	r29
    b974:	cd b7       	in	r28, 0x3d	; 61
    b976:	de b7       	in	r29, 0x3e	; 62
    b978:	a1 97       	sbiw	r28, 0x21	; 33
    b97a:	0f b6       	in	r0, 0x3f	; 63
    b97c:	f8 94       	cli
    b97e:	de bf       	out	0x3e, r29	; 62
    b980:	0f be       	out	0x3f, r0	; 63
    b982:	cd bf       	out	0x3d, r28	; 61
    b984:	7c 01       	movw	r14, r24
    b986:	fa 01       	movw	r30, r20
    b988:	cb 01       	movw	r24, r22
    b98a:	19 a2       	std	Y+33, r1	; 0x21
    b98c:	22 30       	cpi	r18, 0x02	; 2
    b98e:	08 f4       	brcc	.+2      	; 0xb992 <_ZN5Print11printNumberEmh+0x32>
    b990:	2a e0       	ldi	r18, 0x0A	; 10
    b992:	8e 01       	movw	r16, r28
    b994:	0f 5d       	subi	r16, 0xDF	; 223
    b996:	1f 4f       	sbci	r17, 0xFF	; 255
    b998:	82 2e       	mov	r8, r18
    b99a:	91 2c       	mov	r9, r1
    b99c:	a1 2c       	mov	r10, r1
    b99e:	b1 2c       	mov	r11, r1
    b9a0:	bf 01       	movw	r22, r30
    b9a2:	a5 01       	movw	r20, r10
    b9a4:	94 01       	movw	r18, r8
    b9a6:	3b d6       	rcall	.+3190   	; 0xc61e <__udivmodsi4>
    b9a8:	f9 01       	movw	r30, r18
    b9aa:	ca 01       	movw	r24, r20
    b9ac:	01 50       	subi	r16, 0x01	; 1
    b9ae:	11 09       	sbc	r17, r1
    b9b0:	6a 30       	cpi	r22, 0x0A	; 10
    b9b2:	10 f4       	brcc	.+4      	; 0xb9b8 <_ZN5Print11printNumberEmh+0x58>
    b9b4:	60 5d       	subi	r22, 0xD0	; 208
    b9b6:	01 c0       	rjmp	.+2      	; 0xb9ba <_ZN5Print11printNumberEmh+0x5a>
    b9b8:	69 5c       	subi	r22, 0xC9	; 201
    b9ba:	d8 01       	movw	r26, r16
    b9bc:	6c 93       	st	X, r22
    b9be:	23 2b       	or	r18, r19
    b9c0:	24 2b       	or	r18, r20
    b9c2:	25 2b       	or	r18, r21
    b9c4:	69 f7       	brne	.-38     	; 0xb9a0 <_ZN5Print11printNumberEmh+0x40>
    b9c6:	b8 01       	movw	r22, r16
    b9c8:	c7 01       	movw	r24, r14
    b9ca:	56 df       	rcall	.-340    	; 0xb878 <_ZN5Print5writeEPKc>
    b9cc:	a1 96       	adiw	r28, 0x21	; 33
    b9ce:	0f b6       	in	r0, 0x3f	; 63
    b9d0:	f8 94       	cli
    b9d2:	de bf       	out	0x3e, r29	; 62
    b9d4:	0f be       	out	0x3f, r0	; 63
    b9d6:	cd bf       	out	0x3d, r28	; 61
    b9d8:	df 91       	pop	r29
    b9da:	cf 91       	pop	r28
    b9dc:	1f 91       	pop	r17
    b9de:	0f 91       	pop	r16
    b9e0:	ff 90       	pop	r15
    b9e2:	ef 90       	pop	r14
    b9e4:	bf 90       	pop	r11
    b9e6:	af 90       	pop	r10
    b9e8:	9f 90       	pop	r9
    b9ea:	8f 90       	pop	r8
    b9ec:	08 95       	ret

0000b9ee <_ZN5Print5printEmi>:
    b9ee:	21 15       	cp	r18, r1
    b9f0:	31 05       	cpc	r19, r1
    b9f2:	41 f4       	brne	.+16     	; 0xba04 <_ZN5Print5printEmi+0x16>
    b9f4:	dc 01       	movw	r26, r24
    b9f6:	ed 91       	ld	r30, X+
    b9f8:	fc 91       	ld	r31, X
    b9fa:	01 90       	ld	r0, Z+
    b9fc:	f0 81       	ld	r31, Z
    b9fe:	e0 2d       	mov	r30, r0
    ba00:	64 2f       	mov	r22, r20
    ba02:	19 94       	eijmp
    ba04:	ad cf       	rjmp	.-166    	; 0xb960 <_ZN5Print11printNumberEmh>

0000ba06 <_ZN5Print5printEji>:
    ba06:	9a 01       	movw	r18, r20
    ba08:	ab 01       	movw	r20, r22
    ba0a:	60 e0       	ldi	r22, 0x00	; 0
    ba0c:	70 e0       	ldi	r23, 0x00	; 0
    ba0e:	ef cf       	rjmp	.-34     	; 0xb9ee <_ZN5Print5printEmi>

0000ba10 <_ZN5Print5printEli>:
    ba10:	cf 92       	push	r12
    ba12:	df 92       	push	r13
    ba14:	ef 92       	push	r14
    ba16:	ff 92       	push	r15
    ba18:	0f 93       	push	r16
    ba1a:	1f 93       	push	r17
    ba1c:	cf 93       	push	r28
    ba1e:	df 93       	push	r29
    ba20:	21 15       	cp	r18, r1
    ba22:	31 05       	cpc	r19, r1
    ba24:	81 f4       	brne	.+32     	; 0xba46 <_ZN5Print5printEli+0x36>
    ba26:	dc 01       	movw	r26, r24
    ba28:	ed 91       	ld	r30, X+
    ba2a:	fc 91       	ld	r31, X
    ba2c:	01 90       	ld	r0, Z+
    ba2e:	f0 81       	ld	r31, Z
    ba30:	e0 2d       	mov	r30, r0
    ba32:	64 2f       	mov	r22, r20
    ba34:	df 91       	pop	r29
    ba36:	cf 91       	pop	r28
    ba38:	1f 91       	pop	r17
    ba3a:	0f 91       	pop	r16
    ba3c:	ff 90       	pop	r15
    ba3e:	ef 90       	pop	r14
    ba40:	df 90       	pop	r13
    ba42:	cf 90       	pop	r12
    ba44:	19 94       	eijmp
    ba46:	2a 30       	cpi	r18, 0x0A	; 10
    ba48:	31 05       	cpc	r19, r1
    ba4a:	f1 f4       	brne	.+60     	; 0xba88 <_ZN5Print5printEli+0x78>
    ba4c:	77 ff       	sbrs	r23, 7
    ba4e:	1b c0       	rjmp	.+54     	; 0xba86 <_ZN5Print5printEli+0x76>
    ba50:	6a 01       	movw	r12, r20
    ba52:	7b 01       	movw	r14, r22
    ba54:	ec 01       	movw	r28, r24
    ba56:	6d e2       	ldi	r22, 0x2D	; 45
    ba58:	49 df       	rcall	.-366    	; 0xb8ec <_ZN5Print5printEc>
    ba5a:	8c 01       	movw	r16, r24
    ba5c:	44 27       	eor	r20, r20
    ba5e:	55 27       	eor	r21, r21
    ba60:	ba 01       	movw	r22, r20
    ba62:	4c 19       	sub	r20, r12
    ba64:	5d 09       	sbc	r21, r13
    ba66:	6e 09       	sbc	r22, r14
    ba68:	7f 09       	sbc	r23, r15
    ba6a:	2a e0       	ldi	r18, 0x0A	; 10
    ba6c:	ce 01       	movw	r24, r28
    ba6e:	78 df       	rcall	.-272    	; 0xb960 <_ZN5Print11printNumberEmh>
    ba70:	80 0f       	add	r24, r16
    ba72:	91 1f       	adc	r25, r17
    ba74:	df 91       	pop	r29
    ba76:	cf 91       	pop	r28
    ba78:	1f 91       	pop	r17
    ba7a:	0f 91       	pop	r16
    ba7c:	ff 90       	pop	r15
    ba7e:	ef 90       	pop	r14
    ba80:	df 90       	pop	r13
    ba82:	cf 90       	pop	r12
    ba84:	08 95       	ret
    ba86:	2a e0       	ldi	r18, 0x0A	; 10
    ba88:	df 91       	pop	r29
    ba8a:	cf 91       	pop	r28
    ba8c:	1f 91       	pop	r17
    ba8e:	0f 91       	pop	r16
    ba90:	ff 90       	pop	r15
    ba92:	ef 90       	pop	r14
    ba94:	df 90       	pop	r13
    ba96:	cf 90       	pop	r12
    ba98:	63 cf       	rjmp	.-314    	; 0xb960 <_ZN5Print11printNumberEmh>

0000ba9a <_ZN5Print5printEii>:
    ba9a:	9a 01       	movw	r18, r20
    ba9c:	ab 01       	movw	r20, r22
    ba9e:	77 0f       	add	r23, r23
    baa0:	66 0b       	sbc	r22, r22
    baa2:	77 0b       	sbc	r23, r23
    baa4:	b5 cf       	rjmp	.-150    	; 0xba10 <_ZN5Print5printEli>

0000baa6 <_ZN5Print7printlnEii>:
    baa6:	0f 93       	push	r16
    baa8:	1f 93       	push	r17
    baaa:	cf 93       	push	r28
    baac:	df 93       	push	r29
    baae:	ec 01       	movw	r28, r24
    bab0:	f4 df       	rcall	.-24     	; 0xba9a <_ZN5Print5printEii>
    bab2:	8c 01       	movw	r16, r24
    bab4:	ce 01       	movw	r24, r28
    bab6:	21 df       	rcall	.-446    	; 0xb8fa <_ZN5Print7printlnEv>
    bab8:	80 0f       	add	r24, r16
    baba:	91 1f       	adc	r25, r17
    babc:	df 91       	pop	r29
    babe:	cf 91       	pop	r28
    bac0:	1f 91       	pop	r17
    bac2:	0f 91       	pop	r16
    bac4:	08 95       	ret

0000bac6 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    bac6:	7f 92       	push	r7
    bac8:	8f 92       	push	r8
    baca:	9f 92       	push	r9
    bacc:	af 92       	push	r10
    bace:	bf 92       	push	r11
    bad0:	cf 92       	push	r12
    bad2:	df 92       	push	r13
    bad4:	ef 92       	push	r14
    bad6:	ff 92       	push	r15
    bad8:	0f 93       	push	r16
    bada:	1f 93       	push	r17
    badc:	cf 93       	push	r28
    bade:	df 93       	push	r29
    bae0:	8c 01       	movw	r16, r24
    bae2:	6a 01       	movw	r12, r20
    bae4:	7b 01       	movw	r14, r22
    bae6:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    bae8:	9a 01       	movw	r18, r20
    baea:	ab 01       	movw	r20, r22
    baec:	c7 01       	movw	r24, r14
    baee:	b6 01       	movw	r22, r12
    baf0:	82 d5       	rcall	.+2820   	; 0xc5f6 <__unordsf2>
    baf2:	88 23       	and	r24, r24
    baf4:	19 f0       	breq	.+6      	; 0xbafc <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    baf6:	6a e4       	ldi	r22, 0x4A	; 74
    baf8:	73 e0       	ldi	r23, 0x03	; 3
    bafa:	24 c0       	rjmp	.+72     	; 0xbb44 <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    bafc:	46 01       	movw	r8, r12
    bafe:	57 01       	movw	r10, r14
    bb00:	e8 94       	clt
    bb02:	b7 f8       	bld	r11, 7
    bb04:	2f ef       	ldi	r18, 0xFF	; 255
    bb06:	3f ef       	ldi	r19, 0xFF	; 255
    bb08:	4f e7       	ldi	r20, 0x7F	; 127
    bb0a:	5f e7       	ldi	r21, 0x7F	; 127
    bb0c:	c5 01       	movw	r24, r10
    bb0e:	b4 01       	movw	r22, r8
    bb10:	72 d5       	rcall	.+2788   	; 0xc5f6 <__unordsf2>
    bb12:	81 11       	cpse	r24, r1
    bb14:	0c c0       	rjmp	.+24     	; 0xbb2e <_ZN5Print10printFloatEdh+0x68>
    bb16:	2f ef       	ldi	r18, 0xFF	; 255
    bb18:	3f ef       	ldi	r19, 0xFF	; 255
    bb1a:	4f e7       	ldi	r20, 0x7F	; 127
    bb1c:	5f e7       	ldi	r21, 0x7F	; 127
    bb1e:	c5 01       	movw	r24, r10
    bb20:	b4 01       	movw	r22, r8
    bb22:	be da       	rcall	.-2692   	; 0xb0a0 <__cmpsf2>
    bb24:	18 16       	cp	r1, r24
    bb26:	1c f4       	brge	.+6      	; 0xbb2e <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bb28:	6e e4       	ldi	r22, 0x4E	; 78
    bb2a:	73 e0       	ldi	r23, 0x03	; 3
    bb2c:	0b c0       	rjmp	.+22     	; 0xbb44 <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    bb2e:	2f ef       	ldi	r18, 0xFF	; 255
    bb30:	3f ef       	ldi	r19, 0xFF	; 255
    bb32:	4f e7       	ldi	r20, 0x7F	; 127
    bb34:	5f e4       	ldi	r21, 0x4F	; 79
    bb36:	c7 01       	movw	r24, r14
    bb38:	b6 01       	movw	r22, r12
    bb3a:	fc db       	rcall	.-2056   	; 0xb334 <__gesf2>
    bb3c:	18 16       	cp	r1, r24
    bb3e:	8c f4       	brge	.+34     	; 0xbb62 <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bb40:	62 e5       	ldi	r22, 0x52	; 82
    bb42:	73 e0       	ldi	r23, 0x03	; 3
    bb44:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    bb46:	df 91       	pop	r29
    bb48:	cf 91       	pop	r28
    bb4a:	1f 91       	pop	r17
    bb4c:	0f 91       	pop	r16
    bb4e:	ff 90       	pop	r15
    bb50:	ef 90       	pop	r14
    bb52:	df 90       	pop	r13
    bb54:	cf 90       	pop	r12
    bb56:	bf 90       	pop	r11
    bb58:	af 90       	pop	r10
    bb5a:	9f 90       	pop	r9
    bb5c:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bb5e:	7f 90       	pop	r7
    bb60:	8b ce       	rjmp	.-746    	; 0xb878 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    bb62:	2f ef       	ldi	r18, 0xFF	; 255
    bb64:	3f ef       	ldi	r19, 0xFF	; 255
    bb66:	4f e7       	ldi	r20, 0x7F	; 127
    bb68:	5f ec       	ldi	r21, 0xCF	; 207
    bb6a:	c7 01       	movw	r24, r14
    bb6c:	b6 01       	movw	r22, r12
    bb6e:	98 da       	rcall	.-2768   	; 0xb0a0 <__cmpsf2>
    bb70:	87 fd       	sbrc	r24, 7
    bb72:	e6 cf       	rjmp	.-52     	; 0xbb40 <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    bb74:	20 e0       	ldi	r18, 0x00	; 0
    bb76:	30 e0       	ldi	r19, 0x00	; 0
    bb78:	a9 01       	movw	r20, r18
    bb7a:	c7 01       	movw	r24, r14
    bb7c:	b6 01       	movw	r22, r12
    bb7e:	90 da       	rcall	.-2784   	; 0xb0a0 <__cmpsf2>
    bb80:	87 ff       	sbrs	r24, 7
    bb82:	09 c0       	rjmp	.+18     	; 0xbb96 <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    bb84:	6d e2       	ldi	r22, 0x2D	; 45
    bb86:	c8 01       	movw	r24, r16
    bb88:	b1 de       	rcall	.-670    	; 0xb8ec <_ZN5Print5printEc>
    bb8a:	ec 01       	movw	r28, r24
    bb8c:	f7 fa       	bst	r15, 7
     number = -number;
    bb8e:	f0 94       	com	r15
    bb90:	f7 f8       	bld	r15, 7
    bb92:	f0 94       	com	r15
    bb94:	02 c0       	rjmp	.+4      	; 0xbb9a <_ZN5Print10printFloatEdh+0xd4>
    bb96:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    bb98:	d0 e0       	ldi	r29, 0x00	; 0
    bb9a:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    bb9c:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    bb9e:	70 e0       	ldi	r23, 0x00	; 0
    bba0:	80 e0       	ldi	r24, 0x00	; 0
    bba2:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    bba4:	7b 14       	cp	r7, r11
    bba6:	39 f0       	breq	.+14     	; 0xbbb6 <_ZN5Print10printFloatEdh+0xf0>
    rounding /= 10.0;
    bba8:	20 e0       	ldi	r18, 0x00	; 0
    bbaa:	30 e0       	ldi	r19, 0x00	; 0
    bbac:	40 e2       	ldi	r20, 0x20	; 32
    bbae:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    bbb0:	7b da       	rcall	.-2826   	; 0xb0a8 <__divsf3>
    bbb2:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    bbb4:	f7 cf       	rjmp	.-18     	; 0xbba4 <_ZN5Print10printFloatEdh+0xde>
    bbb6:	a7 01       	movw	r20, r14
    bbb8:	96 01       	movw	r18, r12
    bbba:	0e da       	rcall	.-3044   	; 0xafd8 <__addsf3>
    bbbc:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    bbbe:	7c 01       	movw	r14, r24
    bbc0:	db da       	rcall	.-2634   	; 0xb178 <__fixunssfsi>
    bbc2:	4b 01       	movw	r8, r22
    bbc4:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    bbc6:	2a e0       	ldi	r18, 0x0A	; 10
    bbc8:	ab 01       	movw	r20, r22
    bbca:	bc 01       	movw	r22, r24
    bbcc:	c8 01       	movw	r24, r16
    bbce:	c8 de       	rcall	.-624    	; 0xb960 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    bbd0:	c8 0f       	add	r28, r24
    bbd2:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    bbd4:	77 20       	and	r7, r7
    bbd6:	79 f1       	breq	.+94     	; 0xbc36 <_ZN5Print10printFloatEdh+0x170>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    bbd8:	c5 01       	movw	r24, r10
    bbda:	b4 01       	movw	r22, r8
    bbdc:	f9 da       	rcall	.-2574   	; 0xb1d0 <__floatunsisf>
    bbde:	9b 01       	movw	r18, r22
    bbe0:	ac 01       	movw	r20, r24
    bbe2:	c7 01       	movw	r24, r14
    bbe4:	b6 01       	movw	r22, r12
    bbe6:	f7 d9       	rcall	.-3090   	; 0xafd6 <__subsf3>
    bbe8:	6b 01       	movw	r12, r22
    bbea:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    bbec:	6e e2       	ldi	r22, 0x2E	; 46
    bbee:	c8 01       	movw	r24, r16
    bbf0:	7d de       	rcall	.-774    	; 0xb8ec <_ZN5Print5printEc>
    bbf2:	c8 0f       	add	r28, r24
    bbf4:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    bbf6:	20 e0       	ldi	r18, 0x00	; 0
    bbf8:	30 e0       	ldi	r19, 0x00	; 0
    bbfa:	40 e2       	ldi	r20, 0x20	; 32
    bbfc:	51 e4       	ldi	r21, 0x41	; 65
    bbfe:	c7 01       	movw	r24, r14
    bc00:	b6 01       	movw	r22, r12
    bc02:	9c db       	rcall	.-2248   	; 0xb33c <__mulsf3>
    bc04:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    bc06:	5c 01       	movw	r10, r24
    bc08:	b7 da       	rcall	.-2706   	; 0xb178 <__fixunssfsi>
    bc0a:	6b 01       	movw	r12, r22
    n += print(toPrint);
    bc0c:	7c 01       	movw	r14, r24
    bc0e:	4a e0       	ldi	r20, 0x0A	; 10
    bc10:	50 e0       	ldi	r21, 0x00	; 0
    bc12:	c8 01       	movw	r24, r16
    bc14:	f8 de       	rcall	.-528    	; 0xba06 <_ZN5Print5printEji>
    bc16:	c8 0f       	add	r28, r24
    bc18:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    bc1a:	b6 01       	movw	r22, r12
    bc1c:	80 e0       	ldi	r24, 0x00	; 0
    bc1e:	90 e0       	ldi	r25, 0x00	; 0
    bc20:	d7 da       	rcall	.-2642   	; 0xb1d0 <__floatunsisf>
    bc22:	9b 01       	movw	r18, r22
    bc24:	ac 01       	movw	r20, r24
    bc26:	c5 01       	movw	r24, r10
    bc28:	b4 01       	movw	r22, r8
    bc2a:	d5 d9       	rcall	.-3158   	; 0xafd6 <__subsf3>
    bc2c:	6b 01       	movw	r12, r22
    bc2e:	7c 01       	movw	r14, r24
    bc30:	7a 94       	dec	r7
    bc32:	71 10       	cpse	r7, r1
    bc34:	e0 cf       	rjmp	.-64     	; 0xbbf6 <_ZN5Print10printFloatEdh+0x130>
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    bc36:	ce 01       	movw	r24, r28
    bc38:	df 91       	pop	r29
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    bc3a:	cf 91       	pop	r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    bc3c:	1f 91       	pop	r17
    bc3e:	0f 91       	pop	r16
    bc40:	ff 90       	pop	r15
    bc42:	ef 90       	pop	r14
    bc44:	df 90       	pop	r13
    bc46:	cf 90       	pop	r12
    bc48:	bf 90       	pop	r11
    bc4a:	af 90       	pop	r10
    bc4c:	9f 90       	pop	r9
    bc4e:	8f 90       	pop	r8
    bc50:	7f 90       	pop	r7
    bc52:	08 95       	ret

0000bc54 <_ZN5Print5printEdi>:
    bc54:	38 cf       	rjmp	.-400    	; 0xbac6 <_ZN5Print10printFloatEdh>

0000bc56 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    bc56:	1f 92       	push	r1
    bc58:	0f 92       	push	r0
    bc5a:	0f b6       	in	r0, 0x3f	; 63
    bc5c:	0f 92       	push	r0
    bc5e:	11 24       	eor	r1, r1
    bc60:	2f 93       	push	r18
    bc62:	3f 93       	push	r19
    bc64:	8f 93       	push	r24
    bc66:	9f 93       	push	r25
    bc68:	af 93       	push	r26
    bc6a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    bc6c:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <timer0_millis>
    bc70:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <timer0_millis+0x1>
    bc74:	a0 91 6d 06 	lds	r26, 0x066D	; 0x80066d <timer0_millis+0x2>
    bc78:	b0 91 6e 06 	lds	r27, 0x066E	; 0x80066e <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    bc7c:	30 91 6a 06 	lds	r19, 0x066A	; 0x80066a <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    bc80:	23 e0       	ldi	r18, 0x03	; 3
    bc82:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    bc84:	2d 37       	cpi	r18, 0x7D	; 125
    bc86:	20 f4       	brcc	.+8      	; 0xbc90 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    bc88:	01 96       	adiw	r24, 0x01	; 1
    bc8a:	a1 1d       	adc	r26, r1
    bc8c:	b1 1d       	adc	r27, r1
    bc8e:	05 c0       	rjmp	.+10     	; 0xbc9a <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    bc90:	26 e8       	ldi	r18, 0x86	; 134
    bc92:	23 0f       	add	r18, r19
		m += 1;
    bc94:	02 96       	adiw	r24, 0x02	; 2
    bc96:	a1 1d       	adc	r26, r1
    bc98:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    bc9a:	20 93 6a 06 	sts	0x066A, r18	; 0x80066a <timer0_fract>
	timer0_millis = m;
    bc9e:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <timer0_millis>
    bca2:	90 93 6c 06 	sts	0x066C, r25	; 0x80066c <timer0_millis+0x1>
    bca6:	a0 93 6d 06 	sts	0x066D, r26	; 0x80066d <timer0_millis+0x2>
    bcaa:	b0 93 6e 06 	sts	0x066E, r27	; 0x80066e <timer0_millis+0x3>
	timer0_overflow_count++;
    bcae:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <timer0_overflow_count>
    bcb2:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <timer0_overflow_count+0x1>
    bcb6:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <timer0_overflow_count+0x2>
    bcba:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <timer0_overflow_count+0x3>
    bcbe:	01 96       	adiw	r24, 0x01	; 1
    bcc0:	a1 1d       	adc	r26, r1
    bcc2:	b1 1d       	adc	r27, r1
    bcc4:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <timer0_overflow_count>
    bcc8:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <timer0_overflow_count+0x1>
    bccc:	a0 93 71 06 	sts	0x0671, r26	; 0x800671 <timer0_overflow_count+0x2>
    bcd0:	b0 93 72 06 	sts	0x0672, r27	; 0x800672 <timer0_overflow_count+0x3>
}
    bcd4:	bf 91       	pop	r27
    bcd6:	af 91       	pop	r26
    bcd8:	9f 91       	pop	r25
    bcda:	8f 91       	pop	r24
    bcdc:	3f 91       	pop	r19
    bcde:	2f 91       	pop	r18
    bce0:	0f 90       	pop	r0
    bce2:	0f be       	out	0x3f, r0	; 63
    bce4:	0f 90       	pop	r0
    bce6:	1f 90       	pop	r1
    bce8:	18 95       	reti

0000bcea <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    bcea:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    bcec:	f8 94       	cli
	m = timer0_millis;
    bcee:	60 91 6b 06 	lds	r22, 0x066B	; 0x80066b <timer0_millis>
    bcf2:	70 91 6c 06 	lds	r23, 0x066C	; 0x80066c <timer0_millis+0x1>
    bcf6:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <timer0_millis+0x2>
    bcfa:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <timer0_millis+0x3>
	SREG = oldSREG;
    bcfe:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    bd00:	08 95       	ret

0000bd02 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    bd02:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    bd04:	f8 94       	cli
	m = timer0_overflow_count;
    bd06:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <timer0_overflow_count>
    bd0a:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <timer0_overflow_count+0x1>
    bd0e:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <timer0_overflow_count+0x2>
    bd12:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    bd16:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    bd18:	a8 9b       	sbis	0x15, 0	; 21
    bd1a:	05 c0       	rjmp	.+10     	; 0xbd26 <micros+0x24>
    bd1c:	2f 3f       	cpi	r18, 0xFF	; 255
    bd1e:	19 f0       	breq	.+6      	; 0xbd26 <micros+0x24>
		m++;
    bd20:	01 96       	adiw	r24, 0x01	; 1
    bd22:	a1 1d       	adc	r26, r1
    bd24:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    bd26:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    bd28:	ba 2f       	mov	r27, r26
    bd2a:	a9 2f       	mov	r26, r25
    bd2c:	98 2f       	mov	r25, r24
    bd2e:	88 27       	eor	r24, r24
    bd30:	82 0f       	add	r24, r18
    bd32:	91 1d       	adc	r25, r1
    bd34:	a1 1d       	adc	r26, r1
    bd36:	b1 1d       	adc	r27, r1
    bd38:	bc 01       	movw	r22, r24
    bd3a:	cd 01       	movw	r24, r26
    bd3c:	42 e0       	ldi	r20, 0x02	; 2
    bd3e:	66 0f       	add	r22, r22
    bd40:	77 1f       	adc	r23, r23
    bd42:	88 1f       	adc	r24, r24
    bd44:	99 1f       	adc	r25, r25
    bd46:	4a 95       	dec	r20
    bd48:	d1 f7       	brne	.-12     	; 0xbd3e <micros+0x3c>
}
    bd4a:	08 95       	ret

0000bd4c <delay>:

void delay(unsigned long ms)
{
    bd4c:	8f 92       	push	r8
    bd4e:	9f 92       	push	r9
    bd50:	af 92       	push	r10
    bd52:	bf 92       	push	r11
    bd54:	cf 92       	push	r12
    bd56:	df 92       	push	r13
    bd58:	ef 92       	push	r14
    bd5a:	ff 92       	push	r15
    bd5c:	6b 01       	movw	r12, r22
    bd5e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    bd60:	d0 df       	rcall	.-96     	; 0xbd02 <micros>
    bd62:	4b 01       	movw	r8, r22
    bd64:	5c 01       	movw	r10, r24

	while (ms > 0) {
    bd66:	c1 14       	cp	r12, r1
    bd68:	d1 04       	cpc	r13, r1
    bd6a:	e1 04       	cpc	r14, r1
    bd6c:	f1 04       	cpc	r15, r1
		yield();
    bd6e:	f1 f0       	breq	.+60     	; 0xbdac <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    bd70:	41 d4       	rcall	.+2178   	; 0xc5f4 <yield>
    bd72:	c7 df       	rcall	.-114    	; 0xbd02 <micros>
    bd74:	dc 01       	movw	r26, r24
    bd76:	cb 01       	movw	r24, r22
    bd78:	88 19       	sub	r24, r8
    bd7a:	99 09       	sbc	r25, r9
    bd7c:	aa 09       	sbc	r26, r10
    bd7e:	bb 09       	sbc	r27, r11
    bd80:	88 3e       	cpi	r24, 0xE8	; 232
    bd82:	93 40       	sbci	r25, 0x03	; 3
    bd84:	a1 05       	cpc	r26, r1
    bd86:	b1 05       	cpc	r27, r1
    bd88:	70 f3       	brcs	.-36     	; 0xbd66 <delay+0x1a>
			ms--;
    bd8a:	21 e0       	ldi	r18, 0x01	; 1
    bd8c:	c2 1a       	sub	r12, r18
    bd8e:	d1 08       	sbc	r13, r1
    bd90:	e1 08       	sbc	r14, r1
    bd92:	f1 08       	sbc	r15, r1
			start += 1000;
    bd94:	88 ee       	ldi	r24, 0xE8	; 232
    bd96:	88 0e       	add	r8, r24
    bd98:	83 e0       	ldi	r24, 0x03	; 3
    bd9a:	98 1e       	adc	r9, r24
    bd9c:	a1 1c       	adc	r10, r1
    bd9e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    bda0:	c1 14       	cp	r12, r1
    bda2:	d1 04       	cpc	r13, r1
    bda4:	e1 04       	cpc	r14, r1
    bda6:	f1 04       	cpc	r15, r1
    bda8:	21 f7       	brne	.-56     	; 0xbd72 <delay+0x26>
    bdaa:	dd cf       	rjmp	.-70     	; 0xbd66 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    bdac:	ff 90       	pop	r15
    bdae:	ef 90       	pop	r14
    bdb0:	df 90       	pop	r13
    bdb2:	cf 90       	pop	r12
    bdb4:	bf 90       	pop	r11
    bdb6:	af 90       	pop	r10
    bdb8:	9f 90       	pop	r9
    bdba:	8f 90       	pop	r8
    bdbc:	08 95       	ret

0000bdbe <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    bdbe:	82 30       	cpi	r24, 0x02	; 2
    bdc0:	91 05       	cpc	r25, r1
    bdc2:	38 f0       	brcs	.+14     	; 0xbdd2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    bdc4:	88 0f       	add	r24, r24
    bdc6:	99 1f       	adc	r25, r25
    bdc8:	88 0f       	add	r24, r24
    bdca:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    bdcc:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    bdce:	01 97       	sbiw	r24, 0x01	; 1
    bdd0:	f1 f7       	brne	.-4      	; 0xbdce <delayMicroseconds+0x10>
    bdd2:	08 95       	ret

0000bdd4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    bdd4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    bdd6:	84 b5       	in	r24, 0x24	; 36
    bdd8:	82 60       	ori	r24, 0x02	; 2
    bdda:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    bddc:	84 b5       	in	r24, 0x24	; 36
    bdde:	81 60       	ori	r24, 0x01	; 1
    bde0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    bde2:	85 b5       	in	r24, 0x25	; 37
    bde4:	82 60       	ori	r24, 0x02	; 2
    bde6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    bde8:	85 b5       	in	r24, 0x25	; 37
    bdea:	81 60       	ori	r24, 0x01	; 1
    bdec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    bdee:	ee e6       	ldi	r30, 0x6E	; 110
    bdf0:	f0 e0       	ldi	r31, 0x00	; 0
    bdf2:	80 81       	ld	r24, Z
    bdf4:	81 60       	ori	r24, 0x01	; 1
    bdf6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    bdf8:	e1 e8       	ldi	r30, 0x81	; 129
    bdfa:	f0 e0       	ldi	r31, 0x00	; 0
    bdfc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    bdfe:	80 81       	ld	r24, Z
    be00:	82 60       	ori	r24, 0x02	; 2
    be02:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    be04:	80 81       	ld	r24, Z
    be06:	81 60       	ori	r24, 0x01	; 1
    be08:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    be0a:	e0 e8       	ldi	r30, 0x80	; 128
    be0c:	f0 e0       	ldi	r31, 0x00	; 0
    be0e:	80 81       	ld	r24, Z
    be10:	81 60       	ori	r24, 0x01	; 1
    be12:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    be14:	e1 eb       	ldi	r30, 0xB1	; 177
    be16:	f0 e0       	ldi	r31, 0x00	; 0
    be18:	80 81       	ld	r24, Z
    be1a:	84 60       	ori	r24, 0x04	; 4
    be1c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    be1e:	e0 eb       	ldi	r30, 0xB0	; 176
    be20:	f0 e0       	ldi	r31, 0x00	; 0
    be22:	80 81       	ld	r24, Z
    be24:	81 60       	ori	r24, 0x01	; 1
    be26:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    be28:	e1 e9       	ldi	r30, 0x91	; 145
    be2a:	f0 e0       	ldi	r31, 0x00	; 0
    be2c:	80 81       	ld	r24, Z
    be2e:	82 60       	ori	r24, 0x02	; 2
    be30:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    be32:	80 81       	ld	r24, Z
    be34:	81 60       	ori	r24, 0x01	; 1
    be36:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    be38:	e0 e9       	ldi	r30, 0x90	; 144
    be3a:	f0 e0       	ldi	r31, 0x00	; 0
    be3c:	80 81       	ld	r24, Z
    be3e:	81 60       	ori	r24, 0x01	; 1
    be40:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    be42:	e1 ea       	ldi	r30, 0xA1	; 161
    be44:	f0 e0       	ldi	r31, 0x00	; 0
    be46:	80 81       	ld	r24, Z
    be48:	82 60       	ori	r24, 0x02	; 2
    be4a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    be4c:	80 81       	ld	r24, Z
    be4e:	81 60       	ori	r24, 0x01	; 1
    be50:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    be52:	e0 ea       	ldi	r30, 0xA0	; 160
    be54:	f0 e0       	ldi	r31, 0x00	; 0
    be56:	80 81       	ld	r24, Z
    be58:	81 60       	ori	r24, 0x01	; 1
    be5a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    be5c:	e1 e2       	ldi	r30, 0x21	; 33
    be5e:	f1 e0       	ldi	r31, 0x01	; 1
    be60:	80 81       	ld	r24, Z
    be62:	82 60       	ori	r24, 0x02	; 2
    be64:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    be66:	80 81       	ld	r24, Z
    be68:	81 60       	ori	r24, 0x01	; 1
    be6a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    be6c:	e0 e2       	ldi	r30, 0x20	; 32
    be6e:	f1 e0       	ldi	r31, 0x01	; 1
    be70:	80 81       	ld	r24, Z
    be72:	81 60       	ori	r24, 0x01	; 1
    be74:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    be76:	ea e7       	ldi	r30, 0x7A	; 122
    be78:	f0 e0       	ldi	r31, 0x00	; 0
    be7a:	80 81       	ld	r24, Z
    be7c:	84 60       	ori	r24, 0x04	; 4
    be7e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    be80:	80 81       	ld	r24, Z
    be82:	82 60       	ori	r24, 0x02	; 2
    be84:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    be86:	80 81       	ld	r24, Z
    be88:	81 60       	ori	r24, 0x01	; 1
    be8a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    be8c:	80 81       	ld	r24, Z
    be8e:	80 68       	ori	r24, 0x80	; 128
    be90:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    be92:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    be96:	08 95       	ret

0000be98 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    be98:	86 33       	cpi	r24, 0x36	; 54
    be9a:	08 f0       	brcs	.+2      	; 0xbe9e <analogRead+0x6>
    be9c:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    be9e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    bea2:	28 2f       	mov	r18, r24
    bea4:	28 70       	andi	r18, 0x08	; 8
    bea6:	97 7f       	andi	r25, 0xF7	; 247
    bea8:	92 2b       	or	r25, r18
    beaa:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    beae:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <analog_reference>
    beb2:	90 e4       	ldi	r25, 0x40	; 64
    beb4:	29 9f       	mul	r18, r25
    beb6:	90 01       	movw	r18, r0
    beb8:	11 24       	eor	r1, r1
    beba:	87 70       	andi	r24, 0x07	; 7
    bebc:	82 2b       	or	r24, r18
    bebe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    bec2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    bec6:	80 64       	ori	r24, 0x40	; 64
    bec8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    becc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    bed0:	86 fd       	sbrc	r24, 6
    bed2:	fc cf       	rjmp	.-8      	; 0xbecc <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    bed4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    bed8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    bedc:	90 e0       	ldi	r25, 0x00	; 0
}
    bede:	92 2b       	or	r25, r18
    bee0:	08 95       	ret

0000bee2 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    bee2:	1f 93       	push	r17
    bee4:	cf 93       	push	r28
    bee6:	df 93       	push	r29
    bee8:	18 2f       	mov	r17, r24
    beea:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    beec:	61 e0       	ldi	r22, 0x01	; 1
    beee:	14 d1       	rcall	.+552    	; 0xc118 <pinMode>
	if (val == 0)
    bef0:	20 97       	sbiw	r28, 0x00	; 0
    bef2:	11 f4       	brne	.+4      	; 0xbef8 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    bef4:	60 e0       	ldi	r22, 0x00	; 0
    bef6:	04 c0       	rjmp	.+8      	; 0xbf00 <analogWrite+0x1e>
	}
	else if (val == 255)
    bef8:	cf 3f       	cpi	r28, 0xFF	; 255
    befa:	d1 05       	cpc	r29, r1
    befc:	31 f4       	brne	.+12     	; 0xbf0a <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    befe:	61 e0       	ldi	r22, 0x01	; 1
    bf00:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    bf02:	df 91       	pop	r29
    bf04:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    bf06:	1f 91       	pop	r17
    bf08:	43 c1       	rjmp	.+646    	; 0xc190 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    bf0a:	e1 2f       	mov	r30, r17
    bf0c:	f0 e0       	ldi	r31, 0x00	; 0
    bf0e:	ed 59       	subi	r30, 0x9D	; 157
    bf10:	f4 4f       	sbci	r31, 0xF4	; 244
    bf12:	e4 91       	lpm	r30, Z
    bf14:	8e 2f       	mov	r24, r30
    bf16:	90 e0       	ldi	r25, 0x00	; 0
    bf18:	fc 01       	movw	r30, r24
    bf1a:	31 97       	sbiw	r30, 0x01	; 1
    bf1c:	e2 31       	cpi	r30, 0x12	; 18
    bf1e:	f1 05       	cpc	r31, r1
    bf20:	08 f0       	brcs	.+2      	; 0xbf24 <analogWrite+0x42>
    bf22:	9c c0       	rjmp	.+312    	; 0xc05c <analogWrite+0x17a>
    bf24:	88 27       	eor	r24, r24
    bf26:	ee 58       	subi	r30, 0x8E	; 142
    bf28:	ff 4f       	sbci	r31, 0xFF	; 255
    bf2a:	8f 4f       	sbci	r24, 0xFF	; 255
    bf2c:	b6 c3       	rjmp	.+1900   	; 0xc69a <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    bf2e:	84 b5       	in	r24, 0x24	; 36
    bf30:	80 68       	ori	r24, 0x80	; 128
    bf32:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    bf34:	c7 bd       	out	0x27, r28	; 39
				break;
    bf36:	97 c0       	rjmp	.+302    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    bf38:	84 b5       	in	r24, 0x24	; 36
    bf3a:	80 62       	ori	r24, 0x20	; 32
    bf3c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    bf3e:	c8 bd       	out	0x28, r28	; 40
				break;
    bf40:	92 c0       	rjmp	.+292    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    bf42:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    bf46:	80 68       	ori	r24, 0x80	; 128
    bf48:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1A = val; // set pwm duty
    bf4c:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    bf50:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				break;
    bf54:	88 c0       	rjmp	.+272    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    bf56:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    bf5a:	80 62       	ori	r24, 0x20	; 32
    bf5c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1B = val; // set pwm duty
    bf60:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    bf64:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				break;
    bf68:	7e c0       	rjmp	.+252    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				sbi(TCCR1A, COM1C1);
    bf6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    bf6e:	88 60       	ori	r24, 0x08	; 8
    bf70:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1C = val; // set pwm duty
    bf74:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    bf78:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
				break;
    bf7c:	74 c0       	rjmp	.+232    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    bf7e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    bf82:	80 68       	ori	r24, 0x80	; 128
    bf84:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2A = val; // set pwm duty
    bf88:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
				break;
    bf8c:	6c c0       	rjmp	.+216    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    bf8e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    bf92:	80 62       	ori	r24, 0x20	; 32
    bf94:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2B = val; // set pwm duty
    bf98:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
				break;
    bf9c:	64 c0       	rjmp	.+200    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    bf9e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    bfa2:	80 68       	ori	r24, 0x80	; 128
    bfa4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3A = val; // set pwm duty
    bfa8:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    bfac:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
				break;
    bfb0:	5a c0       	rjmp	.+180    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    bfb2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    bfb6:	80 62       	ori	r24, 0x20	; 32
    bfb8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3B = val; // set pwm duty
    bfbc:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    bfc0:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
				break;
    bfc4:	50 c0       	rjmp	.+160    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    bfc6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    bfca:	88 60       	ori	r24, 0x08	; 8
    bfcc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3C = val; // set pwm duty
    bfd0:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
    bfd4:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
				break;
    bfd8:	46 c0       	rjmp	.+140    	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    bfda:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    bfde:	80 68       	ori	r24, 0x80	; 128
    bfe0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    bfe4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    bfe8:	8f 7b       	andi	r24, 0xBF	; 191
    bfea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#endif
				OCR4A = val;	// set pwm duty
    bfee:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    bff2:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
				break;
    bff6:	37 c0       	rjmp	.+110    	; 0xc066 <analogWrite+0x184>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    bff8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    bffc:	80 62       	ori	r24, 0x20	; 32
    bffe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4B = val; // set pwm duty
    c002:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    c006:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
				break;
    c00a:	2d c0       	rjmp	.+90     	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    c00c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c010:	88 60       	ori	r24, 0x08	; 8
    c012:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4C = val; // set pwm duty
    c016:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
    c01a:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
				break;
    c01e:	23 c0       	rjmp	.+70     	; 0xc066 <analogWrite+0x184>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    c020:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c024:	80 68       	ori	r24, 0x80	; 128
    c026:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5A = val; // set pwm duty
    c02a:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    c02e:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
				break;
    c032:	19 c0       	rjmp	.+50     	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    c034:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c038:	80 62       	ori	r24, 0x20	; 32
    c03a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5B = val; // set pwm duty
    c03e:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    c042:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
				break;
    c046:	0f c0       	rjmp	.+30     	; 0xc066 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    c048:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c04c:	88 60       	ori	r24, 0x08	; 8
    c04e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5C = val; // set pwm duty
    c052:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
    c056:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
				break;
    c05a:	05 c0       	rjmp	.+10     	; 0xc066 <analogWrite+0x184>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    c05c:	c0 38       	cpi	r28, 0x80	; 128
    c05e:	d1 05       	cpc	r29, r1
    c060:	0c f0       	brlt	.+2      	; 0xc064 <analogWrite+0x182>
    c062:	4d cf       	rjmp	.-358    	; 0xbefe <analogWrite+0x1c>
    c064:	47 cf       	rjmp	.-370    	; 0xbef4 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    c066:	df 91       	pop	r29
    c068:	cf 91       	pop	r28
    c06a:	1f 91       	pop	r17
    c06c:	08 95       	ret

0000c06e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    c06e:	90 e0       	ldi	r25, 0x00	; 0
    c070:	fc 01       	movw	r30, r24
    c072:	31 97       	sbiw	r30, 0x01	; 1
    c074:	e2 31       	cpi	r30, 0x12	; 18
    c076:	f1 05       	cpc	r31, r1
    c078:	08 f0       	brcs	.+2      	; 0xc07c <turnOffPWM+0xe>
    c07a:	4d c0       	rjmp	.+154    	; 0xc116 <turnOffPWM+0xa8>
    c07c:	88 27       	eor	r24, r24
    c07e:	ec 57       	subi	r30, 0x7C	; 124
    c080:	ff 4f       	sbci	r31, 0xFF	; 255
    c082:	8f 4f       	sbci	r24, 0xFF	; 255
    c084:	0a c3       	rjmp	.+1556   	; 0xc69a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    c086:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c08a:	8f 77       	andi	r24, 0x7F	; 127
    c08c:	03 c0       	rjmp	.+6      	; 0xc094 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    c08e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c092:	8f 7d       	andi	r24, 0xDF	; 223
    c094:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c098:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    c09a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c09e:	87 7f       	andi	r24, 0xF7	; 247
    c0a0:	f9 cf       	rjmp	.-14     	; 0xc094 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    c0a2:	84 b5       	in	r24, 0x24	; 36
    c0a4:	8f 77       	andi	r24, 0x7F	; 127
    c0a6:	02 c0       	rjmp	.+4      	; 0xc0ac <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    c0a8:	84 b5       	in	r24, 0x24	; 36
    c0aa:	8f 7d       	andi	r24, 0xDF	; 223
    c0ac:	84 bd       	out	0x24, r24	; 36
    c0ae:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    c0b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c0b4:	8f 77       	andi	r24, 0x7F	; 127
    c0b6:	03 c0       	rjmp	.+6      	; 0xc0be <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    c0b8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c0bc:	8f 7d       	andi	r24, 0xDF	; 223
    c0be:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c0c2:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    c0c4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0c8:	8f 77       	andi	r24, 0x7F	; 127
    c0ca:	07 c0       	rjmp	.+14     	; 0xc0da <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    c0cc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0d0:	8f 7d       	andi	r24, 0xDF	; 223
    c0d2:	03 c0       	rjmp	.+6      	; 0xc0da <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    c0d4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0d8:	87 7f       	andi	r24, 0xF7	; 247
    c0da:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0de:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    c0e0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c0e4:	8f 77       	andi	r24, 0x7F	; 127
    c0e6:	07 c0       	rjmp	.+14     	; 0xc0f6 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    c0e8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c0ec:	8f 7d       	andi	r24, 0xDF	; 223
    c0ee:	03 c0       	rjmp	.+6      	; 0xc0f6 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    c0f0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c0f4:	87 7f       	andi	r24, 0xF7	; 247
    c0f6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c0fa:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    c0fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c100:	8f 77       	andi	r24, 0x7F	; 127
    c102:	07 c0       	rjmp	.+14     	; 0xc112 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    c104:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c108:	8f 7d       	andi	r24, 0xDF	; 223
    c10a:	03 c0       	rjmp	.+6      	; 0xc112 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    c10c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c110:	87 7f       	andi	r24, 0xF7	; 247
    c112:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c116:	08 95       	ret

0000c118 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    c118:	cf 93       	push	r28
    c11a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    c11c:	90 e0       	ldi	r25, 0x00	; 0
    c11e:	fc 01       	movw	r30, r24
    c120:	e7 55       	subi	r30, 0x57	; 87
    c122:	f4 4f       	sbci	r31, 0xF4	; 244
    c124:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    c126:	fc 01       	movw	r30, r24
    c128:	e1 51       	subi	r30, 0x11	; 17
    c12a:	f4 4f       	sbci	r31, 0xF4	; 244
    c12c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    c12e:	88 23       	and	r24, r24
    c130:	61 f1       	breq	.+88     	; 0xc18a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    c132:	90 e0       	ldi	r25, 0x00	; 0
    c134:	88 0f       	add	r24, r24
    c136:	99 1f       	adc	r25, r25
    c138:	fc 01       	movw	r30, r24
    c13a:	e7 59       	subi	r30, 0x97	; 151
    c13c:	f3 4f       	sbci	r31, 0xF3	; 243
    c13e:	c5 91       	lpm	r28, Z+
    c140:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    c142:	fc 01       	movw	r30, r24
    c144:	e1 5b       	subi	r30, 0xB1	; 177
    c146:	f3 4f       	sbci	r31, 0xF3	; 243
    c148:	a5 91       	lpm	r26, Z+
    c14a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    c14c:	61 11       	cpse	r22, r1
    c14e:	09 c0       	rjmp	.+18     	; 0xc162 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    c150:	9f b7       	in	r25, 0x3f	; 63
                cli();
    c152:	f8 94       	cli
		*reg &= ~bit;
    c154:	88 81       	ld	r24, Y
    c156:	20 95       	com	r18
    c158:	82 23       	and	r24, r18
    c15a:	88 83       	st	Y, r24
		*out &= ~bit;
    c15c:	ec 91       	ld	r30, X
    c15e:	2e 23       	and	r18, r30
    c160:	0b c0       	rjmp	.+22     	; 0xc178 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    c162:	62 30       	cpi	r22, 0x02	; 2
    c164:	61 f4       	brne	.+24     	; 0xc17e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    c166:	9f b7       	in	r25, 0x3f	; 63
                cli();
    c168:	f8 94       	cli
		*reg &= ~bit;
    c16a:	88 81       	ld	r24, Y
    c16c:	32 2f       	mov	r19, r18
    c16e:	30 95       	com	r19
    c170:	83 23       	and	r24, r19
    c172:	88 83       	st	Y, r24
		*out |= bit;
    c174:	ec 91       	ld	r30, X
    c176:	2e 2b       	or	r18, r30
    c178:	2c 93       	st	X, r18
		SREG = oldSREG;
    c17a:	9f bf       	out	0x3f, r25	; 63
    c17c:	06 c0       	rjmp	.+12     	; 0xc18a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    c17e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    c180:	f8 94       	cli
		*reg |= bit;
    c182:	e8 81       	ld	r30, Y
    c184:	2e 2b       	or	r18, r30
    c186:	28 83       	st	Y, r18
		SREG = oldSREG;
    c188:	8f bf       	out	0x3f, r24	; 63
	}
}
    c18a:	df 91       	pop	r29
    c18c:	cf 91       	pop	r28
    c18e:	08 95       	ret

0000c190 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    c190:	1f 93       	push	r17
    c192:	cf 93       	push	r28
    c194:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    c196:	28 2f       	mov	r18, r24
    c198:	30 e0       	ldi	r19, 0x00	; 0
    c19a:	f9 01       	movw	r30, r18
    c19c:	ed 59       	subi	r30, 0x9D	; 157
    c19e:	f4 4f       	sbci	r31, 0xF4	; 244
    c1a0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    c1a2:	f9 01       	movw	r30, r18
    c1a4:	e7 55       	subi	r30, 0x57	; 87
    c1a6:	f4 4f       	sbci	r31, 0xF4	; 244
    c1a8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    c1aa:	f9 01       	movw	r30, r18
    c1ac:	e1 51       	subi	r30, 0x11	; 17
    c1ae:	f4 4f       	sbci	r31, 0xF4	; 244
    c1b0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    c1b2:	cc 23       	and	r28, r28
    c1b4:	b9 f0       	breq	.+46     	; 0xc1e4 <digitalWrite+0x54>
    c1b6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    c1b8:	81 11       	cpse	r24, r1
    c1ba:	59 df       	rcall	.-334    	; 0xc06e <turnOffPWM>

	out = portOutputRegister(port);
    c1bc:	ec 2f       	mov	r30, r28
    c1be:	f0 e0       	ldi	r31, 0x00	; 0
    c1c0:	ee 0f       	add	r30, r30
    c1c2:	ff 1f       	adc	r31, r31
    c1c4:	e1 5b       	subi	r30, 0xB1	; 177
    c1c6:	f3 4f       	sbci	r31, 0xF3	; 243
    c1c8:	a5 91       	lpm	r26, Z+
    c1ca:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    c1cc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    c1ce:	f8 94       	cli

	if (val == LOW) {
    c1d0:	11 11       	cpse	r17, r1
    c1d2:	04 c0       	rjmp	.+8      	; 0xc1dc <digitalWrite+0x4c>
		*out &= ~bit;
    c1d4:	8c 91       	ld	r24, X
    c1d6:	d0 95       	com	r29
    c1d8:	d8 23       	and	r29, r24
    c1da:	02 c0       	rjmp	.+4      	; 0xc1e0 <digitalWrite+0x50>
	} else {
		*out |= bit;
    c1dc:	ec 91       	ld	r30, X
    c1de:	de 2b       	or	r29, r30
    c1e0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    c1e2:	9f bf       	out	0x3f, r25	; 63
}
    c1e4:	df 91       	pop	r29
    c1e6:	cf 91       	pop	r28
    c1e8:	1f 91       	pop	r17
    c1ea:	08 95       	ret

0000c1ec <digitalRead>:

int digitalRead(uint8_t pin)
{
    c1ec:	cf 93       	push	r28
    c1ee:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    c1f0:	28 2f       	mov	r18, r24
    c1f2:	30 e0       	ldi	r19, 0x00	; 0
    c1f4:	f9 01       	movw	r30, r18
    c1f6:	ed 59       	subi	r30, 0x9D	; 157
    c1f8:	f4 4f       	sbci	r31, 0xF4	; 244
    c1fa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    c1fc:	f9 01       	movw	r30, r18
    c1fe:	e7 55       	subi	r30, 0x57	; 87
    c200:	f4 4f       	sbci	r31, 0xF4	; 244
    c202:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    c204:	f9 01       	movw	r30, r18
    c206:	e1 51       	subi	r30, 0x11	; 17
    c208:	f4 4f       	sbci	r31, 0xF4	; 244
    c20a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    c20c:	cc 23       	and	r28, r28
    c20e:	89 f0       	breq	.+34     	; 0xc232 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    c210:	81 11       	cpse	r24, r1
    c212:	2d df       	rcall	.-422    	; 0xc06e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    c214:	ec 2f       	mov	r30, r28
    c216:	f0 e0       	ldi	r31, 0x00	; 0
    c218:	ee 0f       	add	r30, r30
    c21a:	ff 1f       	adc	r31, r31
    c21c:	eb 5c       	subi	r30, 0xCB	; 203
    c21e:	f3 4f       	sbci	r31, 0xF3	; 243
    c220:	a5 91       	lpm	r26, Z+
    c222:	b4 91       	lpm	r27, Z
    c224:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    c226:	ed 23       	and	r30, r29
    c228:	81 e0       	ldi	r24, 0x01	; 1
    c22a:	90 e0       	ldi	r25, 0x00	; 0
    c22c:	21 f4       	brne	.+8      	; 0xc236 <digitalRead+0x4a>
    c22e:	80 e0       	ldi	r24, 0x00	; 0
    c230:	02 c0       	rjmp	.+4      	; 0xc236 <digitalRead+0x4a>
    c232:	80 e0       	ldi	r24, 0x00	; 0
    c234:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    c236:	df 91       	pop	r29
    c238:	cf 91       	pop	r28
    c23a:	08 95       	ret

0000c23c <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    c23c:	0f 93       	push	r16
    c23e:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    c240:	90 e0       	ldi	r25, 0x00	; 0
    c242:	fc 01       	movw	r30, r24
    c244:	e7 55       	subi	r30, 0x57	; 87
    c246:	f4 4f       	sbci	r31, 0xF4	; 244
    c248:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    c24a:	fc 01       	movw	r30, r24
    c24c:	e1 51       	subi	r30, 0x11	; 17
    c24e:	f4 4f       	sbci	r31, 0xF4	; 244
    c250:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    c252:	66 23       	and	r22, r22
    c254:	11 f0       	breq	.+4      	; 0xc25a <pulseIn+0x1e>
    c256:	67 2f       	mov	r22, r23
    c258:	01 c0       	rjmp	.+2      	; 0xc25c <pulseIn+0x20>
    c25a:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    c25c:	f0 e0       	ldi	r31, 0x00	; 0
    c25e:	ee 0f       	add	r30, r30
    c260:	ff 1f       	adc	r31, r31
    c262:	eb 5c       	subi	r30, 0xCB	; 203
    c264:	f3 4f       	sbci	r31, 0xF3	; 243
    c266:	85 91       	lpm	r24, Z+
    c268:	94 91       	lpm	r25, Z
    c26a:	89 01       	movw	r16, r18
    c26c:	9a 01       	movw	r18, r20
    c26e:	3f 70       	andi	r19, 0x0F	; 15
    c270:	46 2f       	mov	r20, r22
    c272:	67 2f       	mov	r22, r23
    c274:	0e 94 7e 06 	call	0xcfc	; 0xcfc <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    c278:	61 15       	cp	r22, r1
    c27a:	71 05       	cpc	r23, r1
    c27c:	81 05       	cpc	r24, r1
    c27e:	91 05       	cpc	r25, r1
    c280:	49 f0       	breq	.+18     	; 0xc294 <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    c282:	dc 01       	movw	r26, r24
    c284:	cb 01       	movw	r24, r22
    c286:	01 96       	adiw	r24, 0x01	; 1
    c288:	a1 1d       	adc	r26, r1
    c28a:	b1 1d       	adc	r27, r1
    c28c:	bc 01       	movw	r22, r24
    c28e:	cd 01       	movw	r24, r26
    c290:	9f 70       	andi	r25, 0x0F	; 15
    c292:	03 c0       	rjmp	.+6      	; 0xc29a <pulseIn+0x5e>
	else
		return 0;
    c294:	60 e0       	ldi	r22, 0x00	; 0
    c296:	70 e0       	ldi	r23, 0x00	; 0
    c298:	cb 01       	movw	r24, r22
}
    c29a:	1f 91       	pop	r17
    c29c:	0f 91       	pop	r16
    c29e:	08 95       	ret

0000c2a0 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    c2a0:	4f 92       	push	r4
    c2a2:	5f 92       	push	r5
    c2a4:	6f 92       	push	r6
    c2a6:	7f 92       	push	r7
    c2a8:	af 92       	push	r10
    c2aa:	bf 92       	push	r11
    c2ac:	cf 92       	push	r12
    c2ae:	df 92       	push	r13
    c2b0:	ef 92       	push	r14
    c2b2:	ff 92       	push	r15
    c2b4:	0f 93       	push	r16
    c2b6:	1f 93       	push	r17
    c2b8:	cf 93       	push	r28
    c2ba:	df 93       	push	r29
    c2bc:	cd b7       	in	r28, 0x3d	; 61
    c2be:	de b7       	in	r29, 0x3e	; 62
    c2c0:	29 01       	movw	r4, r18
    c2c2:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    c2c4:	9b 01       	movw	r18, r22
    c2c6:	ac 01       	movw	r20, r24
    c2c8:	24 19       	sub	r18, r4
    c2ca:	35 09       	sbc	r19, r5
    c2cc:	46 09       	sbc	r20, r6
    c2ce:	57 09       	sbc	r21, r7
    c2d0:	8a 89       	ldd	r24, Y+18	; 0x12
    c2d2:	9b 89       	ldd	r25, Y+19	; 0x13
    c2d4:	ac 89       	ldd	r26, Y+20	; 0x14
    c2d6:	bd 89       	ldd	r27, Y+21	; 0x15
    c2d8:	bc 01       	movw	r22, r24
    c2da:	cd 01       	movw	r24, r26
    c2dc:	6a 19       	sub	r22, r10
    c2de:	7b 09       	sbc	r23, r11
    c2e0:	8c 09       	sbc	r24, r12
    c2e2:	9d 09       	sbc	r25, r13
    c2e4:	8d d1       	rcall	.+794    	; 0xc600 <__mulsi3>
    c2e6:	a8 01       	movw	r20, r16
    c2e8:	97 01       	movw	r18, r14
    c2ea:	24 19       	sub	r18, r4
    c2ec:	35 09       	sbc	r19, r5
    c2ee:	46 09       	sbc	r20, r6
    c2f0:	57 09       	sbc	r21, r7
    c2f2:	b7 d1       	rcall	.+878    	; 0xc662 <__divmodsi4>
    c2f4:	ca 01       	movw	r24, r20
    c2f6:	b9 01       	movw	r22, r18
    c2f8:	6a 0d       	add	r22, r10
    c2fa:	7b 1d       	adc	r23, r11
    c2fc:	8c 1d       	adc	r24, r12
    c2fe:	9d 1d       	adc	r25, r13
}
    c300:	df 91       	pop	r29
    c302:	cf 91       	pop	r28
    c304:	1f 91       	pop	r17
    c306:	0f 91       	pop	r16
    c308:	ff 90       	pop	r15
    c30a:	ef 90       	pop	r14
    c30c:	df 90       	pop	r13
    c30e:	cf 90       	pop	r12
    c310:	bf 90       	pop	r11
    c312:	af 90       	pop	r10
    c314:	7f 90       	pop	r7
    c316:	6f 90       	pop	r6
    c318:	5f 90       	pop	r5
    c31a:	4f 90       	pop	r4
    c31c:	08 95       	ret

0000c31e <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    c31e:	fc 01       	movw	r30, r24
    c320:	80 81       	ld	r24, Z
    c322:	91 81       	ldd	r25, Z+1	; 0x01
    c324:	00 97       	sbiw	r24, 0x00	; 0
    c326:	09 f0       	breq	.+2      	; 0xc32a <_ZN6StringD1Ev+0xc>
    c328:	71 c2       	rjmp	.+1250   	; 0xc80c <free>
    c32a:	08 95       	ret

0000c32c <_ZN6String10invalidateEv>:
    c32c:	cf 93       	push	r28
    c32e:	df 93       	push	r29
    c330:	ec 01       	movw	r28, r24
    c332:	88 81       	ld	r24, Y
    c334:	99 81       	ldd	r25, Y+1	; 0x01
    c336:	00 97       	sbiw	r24, 0x00	; 0
    c338:	09 f0       	breq	.+2      	; 0xc33c <_ZN6String10invalidateEv+0x10>
    c33a:	68 d2       	rcall	.+1232   	; 0xc80c <free>
    c33c:	19 82       	std	Y+1, r1	; 0x01
    c33e:	18 82       	st	Y, r1
    c340:	1d 82       	std	Y+5, r1	; 0x05
    c342:	1c 82       	std	Y+4, r1	; 0x04
    c344:	1b 82       	std	Y+3, r1	; 0x03
    c346:	1a 82       	std	Y+2, r1	; 0x02
    c348:	df 91       	pop	r29
    c34a:	cf 91       	pop	r28
    c34c:	08 95       	ret

0000c34e <_ZN6String12changeBufferEj>:
    c34e:	0f 93       	push	r16
    c350:	1f 93       	push	r17
    c352:	cf 93       	push	r28
    c354:	df 93       	push	r29
    c356:	ec 01       	movw	r28, r24
    c358:	8b 01       	movw	r16, r22
    c35a:	6f 5f       	subi	r22, 0xFF	; 255
    c35c:	7f 4f       	sbci	r23, 0xFF	; 255
    c35e:	88 81       	ld	r24, Y
    c360:	99 81       	ldd	r25, Y+1	; 0x01
    c362:	dd d2       	rcall	.+1466   	; 0xc91e <realloc>
    c364:	00 97       	sbiw	r24, 0x00	; 0
    c366:	31 f0       	breq	.+12     	; 0xc374 <_ZN6String12changeBufferEj+0x26>
    c368:	99 83       	std	Y+1, r25	; 0x01
    c36a:	88 83       	st	Y, r24
    c36c:	1b 83       	std	Y+3, r17	; 0x03
    c36e:	0a 83       	std	Y+2, r16	; 0x02
    c370:	81 e0       	ldi	r24, 0x01	; 1
    c372:	01 c0       	rjmp	.+2      	; 0xc376 <_ZN6String12changeBufferEj+0x28>
    c374:	80 e0       	ldi	r24, 0x00	; 0
    c376:	df 91       	pop	r29
    c378:	cf 91       	pop	r28
    c37a:	1f 91       	pop	r17
    c37c:	0f 91       	pop	r16
    c37e:	08 95       	ret

0000c380 <_ZN6String7reserveEj>:
    c380:	cf 93       	push	r28
    c382:	df 93       	push	r29
    c384:	ec 01       	movw	r28, r24
    c386:	88 81       	ld	r24, Y
    c388:	99 81       	ldd	r25, Y+1	; 0x01
    c38a:	89 2b       	or	r24, r25
    c38c:	29 f0       	breq	.+10     	; 0xc398 <_ZN6String7reserveEj+0x18>
    c38e:	8a 81       	ldd	r24, Y+2	; 0x02
    c390:	9b 81       	ldd	r25, Y+3	; 0x03
    c392:	86 17       	cp	r24, r22
    c394:	97 07       	cpc	r25, r23
    c396:	58 f4       	brcc	.+22     	; 0xc3ae <_ZN6String7reserveEj+0x2e>
    c398:	ce 01       	movw	r24, r28
    c39a:	d9 df       	rcall	.-78     	; 0xc34e <_ZN6String12changeBufferEj>
    c39c:	88 23       	and	r24, r24
    c39e:	41 f0       	breq	.+16     	; 0xc3b0 <_ZN6String7reserveEj+0x30>
    c3a0:	8c 81       	ldd	r24, Y+4	; 0x04
    c3a2:	9d 81       	ldd	r25, Y+5	; 0x05
    c3a4:	89 2b       	or	r24, r25
    c3a6:	19 f4       	brne	.+6      	; 0xc3ae <_ZN6String7reserveEj+0x2e>
    c3a8:	e8 81       	ld	r30, Y
    c3aa:	f9 81       	ldd	r31, Y+1	; 0x01
    c3ac:	10 82       	st	Z, r1
    c3ae:	81 e0       	ldi	r24, 0x01	; 1
    c3b0:	df 91       	pop	r29
    c3b2:	cf 91       	pop	r28
    c3b4:	08 95       	ret

0000c3b6 <_ZN6String4copyEPKcj>:
    c3b6:	ef 92       	push	r14
    c3b8:	ff 92       	push	r15
    c3ba:	0f 93       	push	r16
    c3bc:	1f 93       	push	r17
    c3be:	cf 93       	push	r28
    c3c0:	df 93       	push	r29
    c3c2:	ec 01       	movw	r28, r24
    c3c4:	7b 01       	movw	r14, r22
    c3c6:	8a 01       	movw	r16, r20
    c3c8:	ba 01       	movw	r22, r20
    c3ca:	da df       	rcall	.-76     	; 0xc380 <_ZN6String7reserveEj>
    c3cc:	81 11       	cpse	r24, r1
    c3ce:	03 c0       	rjmp	.+6      	; 0xc3d6 <_ZN6String4copyEPKcj+0x20>
    c3d0:	ce 01       	movw	r24, r28
    c3d2:	ac df       	rcall	.-168    	; 0xc32c <_ZN6String10invalidateEv>
    c3d4:	06 c0       	rjmp	.+12     	; 0xc3e2 <_ZN6String4copyEPKcj+0x2c>
    c3d6:	1d 83       	std	Y+5, r17	; 0x05
    c3d8:	0c 83       	std	Y+4, r16	; 0x04
    c3da:	b7 01       	movw	r22, r14
    c3dc:	88 81       	ld	r24, Y
    c3de:	99 81       	ldd	r25, Y+1	; 0x01
    c3e0:	a3 d3       	rcall	.+1862   	; 0xcb28 <strcpy>
    c3e2:	ce 01       	movw	r24, r28
    c3e4:	df 91       	pop	r29
    c3e6:	cf 91       	pop	r28
    c3e8:	1f 91       	pop	r17
    c3ea:	0f 91       	pop	r16
    c3ec:	ff 90       	pop	r15
    c3ee:	ef 90       	pop	r14
    c3f0:	08 95       	ret

0000c3f2 <_ZN6StringC1EPKc>:
    c3f2:	fc 01       	movw	r30, r24
    c3f4:	11 82       	std	Z+1, r1	; 0x01
    c3f6:	10 82       	st	Z, r1
    c3f8:	13 82       	std	Z+3, r1	; 0x03
    c3fa:	12 82       	std	Z+2, r1	; 0x02
    c3fc:	15 82       	std	Z+5, r1	; 0x05
    c3fe:	14 82       	std	Z+4, r1	; 0x04
    c400:	61 15       	cp	r22, r1
    c402:	71 05       	cpc	r23, r1
    c404:	49 f0       	breq	.+18     	; 0xc418 <_ZN6StringC1EPKc+0x26>
    c406:	fb 01       	movw	r30, r22
    c408:	01 90       	ld	r0, Z+
    c40a:	00 20       	and	r0, r0
    c40c:	e9 f7       	brne	.-6      	; 0xc408 <_ZN6StringC1EPKc+0x16>
    c40e:	31 97       	sbiw	r30, 0x01	; 1
    c410:	af 01       	movw	r20, r30
    c412:	46 1b       	sub	r20, r22
    c414:	57 0b       	sbc	r21, r23
    c416:	cf cf       	rjmp	.-98     	; 0xc3b6 <_ZN6String4copyEPKcj>
    c418:	08 95       	ret

0000c41a <_ZN6StringaSERKS_>:
    c41a:	cf 93       	push	r28
    c41c:	df 93       	push	r29
    c41e:	ec 01       	movw	r28, r24
    c420:	fb 01       	movw	r30, r22
    c422:	86 17       	cp	r24, r22
    c424:	97 07       	cpc	r25, r23
    c426:	51 f0       	breq	.+20     	; 0xc43c <_ZN6StringaSERKS_+0x22>
    c428:	60 81       	ld	r22, Z
    c42a:	71 81       	ldd	r23, Z+1	; 0x01
    c42c:	61 15       	cp	r22, r1
    c42e:	71 05       	cpc	r23, r1
    c430:	21 f0       	breq	.+8      	; 0xc43a <_ZN6StringaSERKS_+0x20>
    c432:	44 81       	ldd	r20, Z+4	; 0x04
    c434:	55 81       	ldd	r21, Z+5	; 0x05
    c436:	bf df       	rcall	.-130    	; 0xc3b6 <_ZN6String4copyEPKcj>
    c438:	01 c0       	rjmp	.+2      	; 0xc43c <_ZN6StringaSERKS_+0x22>
    c43a:	78 df       	rcall	.-272    	; 0xc32c <_ZN6String10invalidateEv>
    c43c:	ce 01       	movw	r24, r28
    c43e:	df 91       	pop	r29
    c440:	cf 91       	pop	r28
    c442:	08 95       	ret

0000c444 <_ZN6StringC1ERKS_>:
    c444:	fc 01       	movw	r30, r24
    c446:	11 82       	std	Z+1, r1	; 0x01
    c448:	10 82       	st	Z, r1
    c44a:	13 82       	std	Z+3, r1	; 0x03
    c44c:	12 82       	std	Z+2, r1	; 0x02
    c44e:	15 82       	std	Z+5, r1	; 0x05
    c450:	14 82       	std	Z+4, r1	; 0x04
    c452:	e3 cf       	rjmp	.-58     	; 0xc41a <_ZN6StringaSERKS_>

0000c454 <_ZN6StringaSEPKc>:
    c454:	cf 93       	push	r28
    c456:	df 93       	push	r29
    c458:	ec 01       	movw	r28, r24
    c45a:	61 15       	cp	r22, r1
    c45c:	71 05       	cpc	r23, r1
    c45e:	51 f0       	breq	.+20     	; 0xc474 <_ZN6StringaSEPKc+0x20>
    c460:	fb 01       	movw	r30, r22
    c462:	01 90       	ld	r0, Z+
    c464:	00 20       	and	r0, r0
    c466:	e9 f7       	brne	.-6      	; 0xc462 <_ZN6StringaSEPKc+0xe>
    c468:	31 97       	sbiw	r30, 0x01	; 1
    c46a:	af 01       	movw	r20, r30
    c46c:	46 1b       	sub	r20, r22
    c46e:	57 0b       	sbc	r21, r23
    c470:	a2 df       	rcall	.-188    	; 0xc3b6 <_ZN6String4copyEPKcj>
    c472:	01 c0       	rjmp	.+2      	; 0xc476 <_ZN6StringaSEPKc+0x22>
    c474:	5b df       	rcall	.-330    	; 0xc32c <_ZN6String10invalidateEv>
    c476:	ce 01       	movw	r24, r28
    c478:	df 91       	pop	r29
    c47a:	cf 91       	pop	r28
    c47c:	08 95       	ret

0000c47e <_ZN6StringC1Ehh>:
    c47e:	0f 93       	push	r16
    c480:	1f 93       	push	r17
    c482:	cf 93       	push	r28
    c484:	df 93       	push	r29
    c486:	cd b7       	in	r28, 0x3d	; 61
    c488:	de b7       	in	r29, 0x3e	; 62
    c48a:	29 97       	sbiw	r28, 0x09	; 9
    c48c:	0f b6       	in	r0, 0x3f	; 63
    c48e:	f8 94       	cli
    c490:	de bf       	out	0x3e, r29	; 62
    c492:	0f be       	out	0x3f, r0	; 63
    c494:	cd bf       	out	0x3d, r28	; 61
    c496:	8c 01       	movw	r16, r24
    c498:	86 2f       	mov	r24, r22
    c49a:	f8 01       	movw	r30, r16
    c49c:	11 82       	std	Z+1, r1	; 0x01
    c49e:	10 82       	st	Z, r1
    c4a0:	13 82       	std	Z+3, r1	; 0x03
    c4a2:	12 82       	std	Z+2, r1	; 0x02
    c4a4:	15 82       	std	Z+5, r1	; 0x05
    c4a6:	14 82       	std	Z+4, r1	; 0x04
    c4a8:	50 e0       	ldi	r21, 0x00	; 0
    c4aa:	be 01       	movw	r22, r28
    c4ac:	6f 5f       	subi	r22, 0xFF	; 255
    c4ae:	7f 4f       	sbci	r23, 0xFF	; 255
    c4b0:	90 e0       	ldi	r25, 0x00	; 0
    c4b2:	41 d3       	rcall	.+1666   	; 0xcb36 <utoa>
    c4b4:	be 01       	movw	r22, r28
    c4b6:	6f 5f       	subi	r22, 0xFF	; 255
    c4b8:	7f 4f       	sbci	r23, 0xFF	; 255
    c4ba:	c8 01       	movw	r24, r16
    c4bc:	cb df       	rcall	.-106    	; 0xc454 <_ZN6StringaSEPKc>
    c4be:	29 96       	adiw	r28, 0x09	; 9
    c4c0:	0f b6       	in	r0, 0x3f	; 63
    c4c2:	f8 94       	cli
    c4c4:	de bf       	out	0x3e, r29	; 62
    c4c6:	0f be       	out	0x3f, r0	; 63
    c4c8:	cd bf       	out	0x3d, r28	; 61
    c4ca:	df 91       	pop	r29
    c4cc:	cf 91       	pop	r28
    c4ce:	1f 91       	pop	r17
    c4d0:	0f 91       	pop	r16
    c4d2:	08 95       	ret

0000c4d4 <_ZN6String6concatEPKcj>:
    c4d4:	ef 92       	push	r14
    c4d6:	ff 92       	push	r15
    c4d8:	0f 93       	push	r16
    c4da:	1f 93       	push	r17
    c4dc:	cf 93       	push	r28
    c4de:	df 93       	push	r29
    c4e0:	61 15       	cp	r22, r1
    c4e2:	71 05       	cpc	r23, r1
    c4e4:	11 f4       	brne	.+4      	; 0xc4ea <_ZN6String6concatEPKcj+0x16>
    c4e6:	80 e0       	ldi	r24, 0x00	; 0
    c4e8:	1a c0       	rjmp	.+52     	; 0xc51e <_ZN6String6concatEPKcj+0x4a>
    c4ea:	41 15       	cp	r20, r1
    c4ec:	51 05       	cpc	r21, r1
    c4ee:	b1 f0       	breq	.+44     	; 0xc51c <_ZN6String6concatEPKcj+0x48>
    c4f0:	7b 01       	movw	r14, r22
    c4f2:	ec 01       	movw	r28, r24
    c4f4:	8c 81       	ldd	r24, Y+4	; 0x04
    c4f6:	9d 81       	ldd	r25, Y+5	; 0x05
    c4f8:	8a 01       	movw	r16, r20
    c4fa:	08 0f       	add	r16, r24
    c4fc:	19 1f       	adc	r17, r25
    c4fe:	b8 01       	movw	r22, r16
    c500:	ce 01       	movw	r24, r28
    c502:	3e df       	rcall	.-388    	; 0xc380 <_ZN6String7reserveEj>
    c504:	88 23       	and	r24, r24
    c506:	79 f3       	breq	.-34     	; 0xc4e6 <_ZN6String6concatEPKcj+0x12>
    c508:	28 81       	ld	r18, Y
    c50a:	39 81       	ldd	r19, Y+1	; 0x01
    c50c:	8c 81       	ldd	r24, Y+4	; 0x04
    c50e:	9d 81       	ldd	r25, Y+5	; 0x05
    c510:	b7 01       	movw	r22, r14
    c512:	82 0f       	add	r24, r18
    c514:	93 1f       	adc	r25, r19
    c516:	08 d3       	rcall	.+1552   	; 0xcb28 <strcpy>
    c518:	1d 83       	std	Y+5, r17	; 0x05
    c51a:	0c 83       	std	Y+4, r16	; 0x04
    c51c:	81 e0       	ldi	r24, 0x01	; 1
    c51e:	df 91       	pop	r29
    c520:	cf 91       	pop	r28
    c522:	1f 91       	pop	r17
    c524:	0f 91       	pop	r16
    c526:	ff 90       	pop	r15
    c528:	ef 90       	pop	r14
    c52a:	08 95       	ret

0000c52c <_ZN6String6concatERKS_>:
    c52c:	fb 01       	movw	r30, r22
    c52e:	44 81       	ldd	r20, Z+4	; 0x04
    c530:	55 81       	ldd	r21, Z+5	; 0x05
    c532:	60 81       	ld	r22, Z
    c534:	71 81       	ldd	r23, Z+1	; 0x01
    c536:	ce cf       	rjmp	.-100    	; 0xc4d4 <_ZN6String6concatEPKcj>

0000c538 <_ZN6String6concatEPKc>:
    c538:	61 15       	cp	r22, r1
    c53a:	71 05       	cpc	r23, r1
    c53c:	49 f0       	breq	.+18     	; 0xc550 <_ZN6String6concatEPKc+0x18>
    c53e:	fb 01       	movw	r30, r22
    c540:	01 90       	ld	r0, Z+
    c542:	00 20       	and	r0, r0
    c544:	e9 f7       	brne	.-6      	; 0xc540 <_ZN6String6concatEPKc+0x8>
    c546:	31 97       	sbiw	r30, 0x01	; 1
    c548:	af 01       	movw	r20, r30
    c54a:	46 1b       	sub	r20, r22
    c54c:	57 0b       	sbc	r21, r23
    c54e:	c2 cf       	rjmp	.-124    	; 0xc4d4 <_ZN6String6concatEPKcj>
    c550:	80 e0       	ldi	r24, 0x00	; 0
    c552:	08 95       	ret

0000c554 <_ZNK6String9compareToERKS_>:
    c554:	cf 93       	push	r28
    c556:	df 93       	push	r29
    c558:	dc 01       	movw	r26, r24
    c55a:	ed 91       	ld	r30, X+
    c55c:	fc 91       	ld	r31, X
    c55e:	eb 01       	movw	r28, r22
    c560:	a8 81       	ld	r26, Y
    c562:	b9 81       	ldd	r27, Y+1	; 0x01
    c564:	30 97       	sbiw	r30, 0x00	; 0
    c566:	11 f0       	breq	.+4      	; 0xc56c <_ZNK6String9compareToERKS_+0x18>
    c568:	10 97       	sbiw	r26, 0x00	; 0
    c56a:	c9 f4       	brne	.+50     	; 0xc59e <_ZNK6String9compareToERKS_+0x4a>
    c56c:	10 97       	sbiw	r26, 0x00	; 0
    c56e:	59 f0       	breq	.+22     	; 0xc586 <_ZNK6String9compareToERKS_+0x32>
    c570:	eb 01       	movw	r28, r22
    c572:	2c 81       	ldd	r18, Y+4	; 0x04
    c574:	3d 81       	ldd	r19, Y+5	; 0x05
    c576:	23 2b       	or	r18, r19
    c578:	31 f0       	breq	.+12     	; 0xc586 <_ZNK6String9compareToERKS_+0x32>
    c57a:	8c 91       	ld	r24, X
    c57c:	90 e0       	ldi	r25, 0x00	; 0
    c57e:	91 95       	neg	r25
    c580:	81 95       	neg	r24
    c582:	91 09       	sbc	r25, r1
    c584:	13 c0       	rjmp	.+38     	; 0xc5ac <_ZNK6String9compareToERKS_+0x58>
    c586:	30 97       	sbiw	r30, 0x00	; 0
    c588:	79 f0       	breq	.+30     	; 0xc5a8 <_ZNK6String9compareToERKS_+0x54>
    c58a:	dc 01       	movw	r26, r24
    c58c:	14 96       	adiw	r26, 0x04	; 4
    c58e:	8d 91       	ld	r24, X+
    c590:	9c 91       	ld	r25, X
    c592:	15 97       	sbiw	r26, 0x05	; 5
    c594:	89 2b       	or	r24, r25
    c596:	41 f0       	breq	.+16     	; 0xc5a8 <_ZNK6String9compareToERKS_+0x54>
    c598:	80 81       	ld	r24, Z
    c59a:	90 e0       	ldi	r25, 0x00	; 0
    c59c:	07 c0       	rjmp	.+14     	; 0xc5ac <_ZNK6String9compareToERKS_+0x58>
    c59e:	bd 01       	movw	r22, r26
    c5a0:	cf 01       	movw	r24, r30
    c5a2:	df 91       	pop	r29
    c5a4:	cf 91       	pop	r28
    c5a6:	b7 c2       	rjmp	.+1390   	; 0xcb16 <strcmp>
    c5a8:	80 e0       	ldi	r24, 0x00	; 0
    c5aa:	90 e0       	ldi	r25, 0x00	; 0
    c5ac:	df 91       	pop	r29
    c5ae:	cf 91       	pop	r28
    c5b0:	08 95       	ret

0000c5b2 <_ZNK6String6equalsERKS_>:
    c5b2:	fc 01       	movw	r30, r24
    c5b4:	44 81       	ldd	r20, Z+4	; 0x04
    c5b6:	55 81       	ldd	r21, Z+5	; 0x05
    c5b8:	fb 01       	movw	r30, r22
    c5ba:	24 81       	ldd	r18, Z+4	; 0x04
    c5bc:	35 81       	ldd	r19, Z+5	; 0x05
    c5be:	42 17       	cp	r20, r18
    c5c0:	53 07       	cpc	r21, r19
    c5c2:	21 f4       	brne	.+8      	; 0xc5cc <_ZNK6String6equalsERKS_+0x1a>
    c5c4:	c7 df       	rcall	.-114    	; 0xc554 <_ZNK6String9compareToERKS_>
    c5c6:	21 e0       	ldi	r18, 0x01	; 1
    c5c8:	89 2b       	or	r24, r25
    c5ca:	09 f0       	breq	.+2      	; 0xc5ce <_ZNK6String6equalsERKS_+0x1c>
    c5cc:	20 e0       	ldi	r18, 0x00	; 0
    c5ce:	82 2f       	mov	r24, r18
    c5d0:	08 95       	ret

0000c5d2 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    c5d2:	cf 93       	push	r28
    c5d4:	df 93       	push	r29
	if (!buffer) return;
    c5d6:	fc 01       	movw	r30, r24
    c5d8:	c0 81       	ld	r28, Z
    c5da:	d1 81       	ldd	r29, Z+1	; 0x01
    c5dc:	20 97       	sbiw	r28, 0x00	; 0
    c5de:	39 f0       	breq	.+14     	; 0xc5ee <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    c5e0:	88 81       	ld	r24, Y
    c5e2:	88 23       	and	r24, r24
    c5e4:	21 f0       	breq	.+8      	; 0xc5ee <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    c5e6:	90 e0       	ldi	r25, 0x00	; 0
    c5e8:	7e d2       	rcall	.+1276   	; 0xcae6 <toupper>
    c5ea:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    c5ec:	f9 cf       	rjmp	.-14     	; 0xc5e0 <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    c5ee:	df 91       	pop	r29
    c5f0:	cf 91       	pop	r28
    c5f2:	08 95       	ret

0000c5f4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    c5f4:	08 95       	ret

0000c5f6 <__unordsf2>:
    c5f6:	0e 94 25 59 	call	0xb24a	; 0xb24a <__fp_cmp>
    c5fa:	88 0b       	sbc	r24, r24
    c5fc:	99 0b       	sbc	r25, r25
    c5fe:	08 95       	ret

0000c600 <__mulsi3>:
    c600:	db 01       	movw	r26, r22
    c602:	8f 93       	push	r24
    c604:	9f 93       	push	r25
    c606:	60 d0       	rcall	.+192    	; 0xc6c8 <__muluhisi3>
    c608:	bf 91       	pop	r27
    c60a:	af 91       	pop	r26
    c60c:	a2 9f       	mul	r26, r18
    c60e:	80 0d       	add	r24, r0
    c610:	91 1d       	adc	r25, r1
    c612:	a3 9f       	mul	r26, r19
    c614:	90 0d       	add	r25, r0
    c616:	b2 9f       	mul	r27, r18
    c618:	90 0d       	add	r25, r0
    c61a:	11 24       	eor	r1, r1
    c61c:	08 95       	ret

0000c61e <__udivmodsi4>:
    c61e:	a1 e2       	ldi	r26, 0x21	; 33
    c620:	1a 2e       	mov	r1, r26
    c622:	aa 1b       	sub	r26, r26
    c624:	bb 1b       	sub	r27, r27
    c626:	fd 01       	movw	r30, r26
    c628:	0d c0       	rjmp	.+26     	; 0xc644 <__udivmodsi4_ep>

0000c62a <__udivmodsi4_loop>:
    c62a:	aa 1f       	adc	r26, r26
    c62c:	bb 1f       	adc	r27, r27
    c62e:	ee 1f       	adc	r30, r30
    c630:	ff 1f       	adc	r31, r31
    c632:	a2 17       	cp	r26, r18
    c634:	b3 07       	cpc	r27, r19
    c636:	e4 07       	cpc	r30, r20
    c638:	f5 07       	cpc	r31, r21
    c63a:	20 f0       	brcs	.+8      	; 0xc644 <__udivmodsi4_ep>
    c63c:	a2 1b       	sub	r26, r18
    c63e:	b3 0b       	sbc	r27, r19
    c640:	e4 0b       	sbc	r30, r20
    c642:	f5 0b       	sbc	r31, r21

0000c644 <__udivmodsi4_ep>:
    c644:	66 1f       	adc	r22, r22
    c646:	77 1f       	adc	r23, r23
    c648:	88 1f       	adc	r24, r24
    c64a:	99 1f       	adc	r25, r25
    c64c:	1a 94       	dec	r1
    c64e:	69 f7       	brne	.-38     	; 0xc62a <__udivmodsi4_loop>
    c650:	60 95       	com	r22
    c652:	70 95       	com	r23
    c654:	80 95       	com	r24
    c656:	90 95       	com	r25
    c658:	9b 01       	movw	r18, r22
    c65a:	ac 01       	movw	r20, r24
    c65c:	bd 01       	movw	r22, r26
    c65e:	cf 01       	movw	r24, r30
    c660:	08 95       	ret

0000c662 <__divmodsi4>:
    c662:	05 2e       	mov	r0, r21
    c664:	97 fb       	bst	r25, 7
    c666:	16 f4       	brtc	.+4      	; 0xc66c <__divmodsi4+0xa>
    c668:	00 94       	com	r0
    c66a:	0f d0       	rcall	.+30     	; 0xc68a <__negsi2>
    c66c:	57 fd       	sbrc	r21, 7
    c66e:	05 d0       	rcall	.+10     	; 0xc67a <__divmodsi4_neg2>
    c670:	d6 df       	rcall	.-84     	; 0xc61e <__udivmodsi4>
    c672:	07 fc       	sbrc	r0, 7
    c674:	02 d0       	rcall	.+4      	; 0xc67a <__divmodsi4_neg2>
    c676:	46 f4       	brtc	.+16     	; 0xc688 <__divmodsi4_exit>
    c678:	08 c0       	rjmp	.+16     	; 0xc68a <__negsi2>

0000c67a <__divmodsi4_neg2>:
    c67a:	50 95       	com	r21
    c67c:	40 95       	com	r20
    c67e:	30 95       	com	r19
    c680:	21 95       	neg	r18
    c682:	3f 4f       	sbci	r19, 0xFF	; 255
    c684:	4f 4f       	sbci	r20, 0xFF	; 255
    c686:	5f 4f       	sbci	r21, 0xFF	; 255

0000c688 <__divmodsi4_exit>:
    c688:	08 95       	ret

0000c68a <__negsi2>:
    c68a:	90 95       	com	r25
    c68c:	80 95       	com	r24
    c68e:	70 95       	com	r23
    c690:	61 95       	neg	r22
    c692:	7f 4f       	sbci	r23, 0xFF	; 255
    c694:	8f 4f       	sbci	r24, 0xFF	; 255
    c696:	9f 4f       	sbci	r25, 0xFF	; 255
    c698:	08 95       	ret

0000c69a <__tablejump2__>:
    c69a:	ee 0f       	add	r30, r30
    c69c:	ff 1f       	adc	r31, r31
    c69e:	88 1f       	adc	r24, r24
    c6a0:	8b bf       	out	0x3b, r24	; 59
    c6a2:	07 90       	elpm	r0, Z+
    c6a4:	f6 91       	elpm	r31, Z
    c6a6:	e0 2d       	mov	r30, r0
    c6a8:	19 94       	eijmp

0000c6aa <__umulhisi3>:
    c6aa:	a2 9f       	mul	r26, r18
    c6ac:	b0 01       	movw	r22, r0
    c6ae:	b3 9f       	mul	r27, r19
    c6b0:	c0 01       	movw	r24, r0
    c6b2:	a3 9f       	mul	r26, r19
    c6b4:	70 0d       	add	r23, r0
    c6b6:	81 1d       	adc	r24, r1
    c6b8:	11 24       	eor	r1, r1
    c6ba:	91 1d       	adc	r25, r1
    c6bc:	b2 9f       	mul	r27, r18
    c6be:	70 0d       	add	r23, r0
    c6c0:	81 1d       	adc	r24, r1
    c6c2:	11 24       	eor	r1, r1
    c6c4:	91 1d       	adc	r25, r1
    c6c6:	08 95       	ret

0000c6c8 <__muluhisi3>:
    c6c8:	f0 df       	rcall	.-32     	; 0xc6aa <__umulhisi3>
    c6ca:	a5 9f       	mul	r26, r21
    c6cc:	90 0d       	add	r25, r0
    c6ce:	b4 9f       	mul	r27, r20
    c6d0:	90 0d       	add	r25, r0
    c6d2:	a4 9f       	mul	r26, r20
    c6d4:	80 0d       	add	r24, r0
    c6d6:	91 1d       	adc	r25, r1
    c6d8:	11 24       	eor	r1, r1
    c6da:	08 95       	ret

0000c6dc <malloc>:
    c6dc:	0f 93       	push	r16
    c6de:	1f 93       	push	r17
    c6e0:	cf 93       	push	r28
    c6e2:	df 93       	push	r29
    c6e4:	82 30       	cpi	r24, 0x02	; 2
    c6e6:	91 05       	cpc	r25, r1
    c6e8:	10 f4       	brcc	.+4      	; 0xc6ee <malloc+0x12>
    c6ea:	82 e0       	ldi	r24, 0x02	; 2
    c6ec:	90 e0       	ldi	r25, 0x00	; 0
    c6ee:	e0 91 75 06 	lds	r30, 0x0675	; 0x800675 <__flp>
    c6f2:	f0 91 76 06 	lds	r31, 0x0676	; 0x800676 <__flp+0x1>
    c6f6:	20 e0       	ldi	r18, 0x00	; 0
    c6f8:	30 e0       	ldi	r19, 0x00	; 0
    c6fa:	a0 e0       	ldi	r26, 0x00	; 0
    c6fc:	b0 e0       	ldi	r27, 0x00	; 0
    c6fe:	30 97       	sbiw	r30, 0x00	; 0
    c700:	19 f1       	breq	.+70     	; 0xc748 <malloc+0x6c>
    c702:	40 81       	ld	r20, Z
    c704:	51 81       	ldd	r21, Z+1	; 0x01
    c706:	02 81       	ldd	r16, Z+2	; 0x02
    c708:	13 81       	ldd	r17, Z+3	; 0x03
    c70a:	48 17       	cp	r20, r24
    c70c:	59 07       	cpc	r21, r25
    c70e:	c8 f0       	brcs	.+50     	; 0xc742 <malloc+0x66>
    c710:	84 17       	cp	r24, r20
    c712:	95 07       	cpc	r25, r21
    c714:	69 f4       	brne	.+26     	; 0xc730 <malloc+0x54>
    c716:	10 97       	sbiw	r26, 0x00	; 0
    c718:	31 f0       	breq	.+12     	; 0xc726 <malloc+0x4a>
    c71a:	12 96       	adiw	r26, 0x02	; 2
    c71c:	0c 93       	st	X, r16
    c71e:	12 97       	sbiw	r26, 0x02	; 2
    c720:	13 96       	adiw	r26, 0x03	; 3
    c722:	1c 93       	st	X, r17
    c724:	27 c0       	rjmp	.+78     	; 0xc774 <malloc+0x98>
    c726:	00 93 75 06 	sts	0x0675, r16	; 0x800675 <__flp>
    c72a:	10 93 76 06 	sts	0x0676, r17	; 0x800676 <__flp+0x1>
    c72e:	22 c0       	rjmp	.+68     	; 0xc774 <malloc+0x98>
    c730:	21 15       	cp	r18, r1
    c732:	31 05       	cpc	r19, r1
    c734:	19 f0       	breq	.+6      	; 0xc73c <malloc+0x60>
    c736:	42 17       	cp	r20, r18
    c738:	53 07       	cpc	r21, r19
    c73a:	18 f4       	brcc	.+6      	; 0xc742 <malloc+0x66>
    c73c:	9a 01       	movw	r18, r20
    c73e:	bd 01       	movw	r22, r26
    c740:	ef 01       	movw	r28, r30
    c742:	df 01       	movw	r26, r30
    c744:	f8 01       	movw	r30, r16
    c746:	db cf       	rjmp	.-74     	; 0xc6fe <malloc+0x22>
    c748:	21 15       	cp	r18, r1
    c74a:	31 05       	cpc	r19, r1
    c74c:	f9 f0       	breq	.+62     	; 0xc78c <malloc+0xb0>
    c74e:	28 1b       	sub	r18, r24
    c750:	39 0b       	sbc	r19, r25
    c752:	24 30       	cpi	r18, 0x04	; 4
    c754:	31 05       	cpc	r19, r1
    c756:	80 f4       	brcc	.+32     	; 0xc778 <malloc+0x9c>
    c758:	8a 81       	ldd	r24, Y+2	; 0x02
    c75a:	9b 81       	ldd	r25, Y+3	; 0x03
    c75c:	61 15       	cp	r22, r1
    c75e:	71 05       	cpc	r23, r1
    c760:	21 f0       	breq	.+8      	; 0xc76a <malloc+0x8e>
    c762:	fb 01       	movw	r30, r22
    c764:	93 83       	std	Z+3, r25	; 0x03
    c766:	82 83       	std	Z+2, r24	; 0x02
    c768:	04 c0       	rjmp	.+8      	; 0xc772 <malloc+0x96>
    c76a:	90 93 76 06 	sts	0x0676, r25	; 0x800676 <__flp+0x1>
    c76e:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <__flp>
    c772:	fe 01       	movw	r30, r28
    c774:	32 96       	adiw	r30, 0x02	; 2
    c776:	44 c0       	rjmp	.+136    	; 0xc800 <malloc+0x124>
    c778:	fe 01       	movw	r30, r28
    c77a:	e2 0f       	add	r30, r18
    c77c:	f3 1f       	adc	r31, r19
    c77e:	81 93       	st	Z+, r24
    c780:	91 93       	st	Z+, r25
    c782:	22 50       	subi	r18, 0x02	; 2
    c784:	31 09       	sbc	r19, r1
    c786:	39 83       	std	Y+1, r19	; 0x01
    c788:	28 83       	st	Y, r18
    c78a:	3a c0       	rjmp	.+116    	; 0xc800 <malloc+0x124>
    c78c:	20 91 73 06 	lds	r18, 0x0673	; 0x800673 <__brkval>
    c790:	30 91 74 06 	lds	r19, 0x0674	; 0x800674 <__brkval+0x1>
    c794:	23 2b       	or	r18, r19
    c796:	41 f4       	brne	.+16     	; 0xc7a8 <malloc+0xcc>
    c798:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    c79c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    c7a0:	30 93 74 06 	sts	0x0674, r19	; 0x800674 <__brkval+0x1>
    c7a4:	20 93 73 06 	sts	0x0673, r18	; 0x800673 <__brkval>
    c7a8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    c7ac:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    c7b0:	21 15       	cp	r18, r1
    c7b2:	31 05       	cpc	r19, r1
    c7b4:	41 f4       	brne	.+16     	; 0xc7c6 <malloc+0xea>
    c7b6:	2d b7       	in	r18, 0x3d	; 61
    c7b8:	3e b7       	in	r19, 0x3e	; 62
    c7ba:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    c7be:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    c7c2:	24 1b       	sub	r18, r20
    c7c4:	35 0b       	sbc	r19, r21
    c7c6:	e0 91 73 06 	lds	r30, 0x0673	; 0x800673 <__brkval>
    c7ca:	f0 91 74 06 	lds	r31, 0x0674	; 0x800674 <__brkval+0x1>
    c7ce:	e2 17       	cp	r30, r18
    c7d0:	f3 07       	cpc	r31, r19
    c7d2:	a0 f4       	brcc	.+40     	; 0xc7fc <malloc+0x120>
    c7d4:	2e 1b       	sub	r18, r30
    c7d6:	3f 0b       	sbc	r19, r31
    c7d8:	28 17       	cp	r18, r24
    c7da:	39 07       	cpc	r19, r25
    c7dc:	78 f0       	brcs	.+30     	; 0xc7fc <malloc+0x120>
    c7de:	ac 01       	movw	r20, r24
    c7e0:	4e 5f       	subi	r20, 0xFE	; 254
    c7e2:	5f 4f       	sbci	r21, 0xFF	; 255
    c7e4:	24 17       	cp	r18, r20
    c7e6:	35 07       	cpc	r19, r21
    c7e8:	48 f0       	brcs	.+18     	; 0xc7fc <malloc+0x120>
    c7ea:	4e 0f       	add	r20, r30
    c7ec:	5f 1f       	adc	r21, r31
    c7ee:	50 93 74 06 	sts	0x0674, r21	; 0x800674 <__brkval+0x1>
    c7f2:	40 93 73 06 	sts	0x0673, r20	; 0x800673 <__brkval>
    c7f6:	81 93       	st	Z+, r24
    c7f8:	91 93       	st	Z+, r25
    c7fa:	02 c0       	rjmp	.+4      	; 0xc800 <malloc+0x124>
    c7fc:	e0 e0       	ldi	r30, 0x00	; 0
    c7fe:	f0 e0       	ldi	r31, 0x00	; 0
    c800:	cf 01       	movw	r24, r30
    c802:	df 91       	pop	r29
    c804:	cf 91       	pop	r28
    c806:	1f 91       	pop	r17
    c808:	0f 91       	pop	r16
    c80a:	08 95       	ret

0000c80c <free>:
    c80c:	cf 93       	push	r28
    c80e:	df 93       	push	r29
    c810:	00 97       	sbiw	r24, 0x00	; 0
    c812:	09 f4       	brne	.+2      	; 0xc816 <free+0xa>
    c814:	81 c0       	rjmp	.+258    	; 0xc918 <free+0x10c>
    c816:	fc 01       	movw	r30, r24
    c818:	32 97       	sbiw	r30, 0x02	; 2
    c81a:	13 82       	std	Z+3, r1	; 0x03
    c81c:	12 82       	std	Z+2, r1	; 0x02
    c81e:	a0 91 75 06 	lds	r26, 0x0675	; 0x800675 <__flp>
    c822:	b0 91 76 06 	lds	r27, 0x0676	; 0x800676 <__flp+0x1>
    c826:	10 97       	sbiw	r26, 0x00	; 0
    c828:	81 f4       	brne	.+32     	; 0xc84a <free+0x3e>
    c82a:	20 81       	ld	r18, Z
    c82c:	31 81       	ldd	r19, Z+1	; 0x01
    c82e:	82 0f       	add	r24, r18
    c830:	93 1f       	adc	r25, r19
    c832:	20 91 73 06 	lds	r18, 0x0673	; 0x800673 <__brkval>
    c836:	30 91 74 06 	lds	r19, 0x0674	; 0x800674 <__brkval+0x1>
    c83a:	28 17       	cp	r18, r24
    c83c:	39 07       	cpc	r19, r25
    c83e:	51 f5       	brne	.+84     	; 0xc894 <free+0x88>
    c840:	f0 93 74 06 	sts	0x0674, r31	; 0x800674 <__brkval+0x1>
    c844:	e0 93 73 06 	sts	0x0673, r30	; 0x800673 <__brkval>
    c848:	67 c0       	rjmp	.+206    	; 0xc918 <free+0x10c>
    c84a:	ed 01       	movw	r28, r26
    c84c:	20 e0       	ldi	r18, 0x00	; 0
    c84e:	30 e0       	ldi	r19, 0x00	; 0
    c850:	ce 17       	cp	r28, r30
    c852:	df 07       	cpc	r29, r31
    c854:	40 f4       	brcc	.+16     	; 0xc866 <free+0x5a>
    c856:	4a 81       	ldd	r20, Y+2	; 0x02
    c858:	5b 81       	ldd	r21, Y+3	; 0x03
    c85a:	9e 01       	movw	r18, r28
    c85c:	41 15       	cp	r20, r1
    c85e:	51 05       	cpc	r21, r1
    c860:	f1 f0       	breq	.+60     	; 0xc89e <free+0x92>
    c862:	ea 01       	movw	r28, r20
    c864:	f5 cf       	rjmp	.-22     	; 0xc850 <free+0x44>
    c866:	d3 83       	std	Z+3, r29	; 0x03
    c868:	c2 83       	std	Z+2, r28	; 0x02
    c86a:	40 81       	ld	r20, Z
    c86c:	51 81       	ldd	r21, Z+1	; 0x01
    c86e:	84 0f       	add	r24, r20
    c870:	95 1f       	adc	r25, r21
    c872:	c8 17       	cp	r28, r24
    c874:	d9 07       	cpc	r29, r25
    c876:	59 f4       	brne	.+22     	; 0xc88e <free+0x82>
    c878:	88 81       	ld	r24, Y
    c87a:	99 81       	ldd	r25, Y+1	; 0x01
    c87c:	84 0f       	add	r24, r20
    c87e:	95 1f       	adc	r25, r21
    c880:	02 96       	adiw	r24, 0x02	; 2
    c882:	91 83       	std	Z+1, r25	; 0x01
    c884:	80 83       	st	Z, r24
    c886:	8a 81       	ldd	r24, Y+2	; 0x02
    c888:	9b 81       	ldd	r25, Y+3	; 0x03
    c88a:	93 83       	std	Z+3, r25	; 0x03
    c88c:	82 83       	std	Z+2, r24	; 0x02
    c88e:	21 15       	cp	r18, r1
    c890:	31 05       	cpc	r19, r1
    c892:	29 f4       	brne	.+10     	; 0xc89e <free+0x92>
    c894:	f0 93 76 06 	sts	0x0676, r31	; 0x800676 <__flp+0x1>
    c898:	e0 93 75 06 	sts	0x0675, r30	; 0x800675 <__flp>
    c89c:	3d c0       	rjmp	.+122    	; 0xc918 <free+0x10c>
    c89e:	e9 01       	movw	r28, r18
    c8a0:	fb 83       	std	Y+3, r31	; 0x03
    c8a2:	ea 83       	std	Y+2, r30	; 0x02
    c8a4:	49 91       	ld	r20, Y+
    c8a6:	59 91       	ld	r21, Y+
    c8a8:	c4 0f       	add	r28, r20
    c8aa:	d5 1f       	adc	r29, r21
    c8ac:	ec 17       	cp	r30, r28
    c8ae:	fd 07       	cpc	r31, r29
    c8b0:	61 f4       	brne	.+24     	; 0xc8ca <free+0xbe>
    c8b2:	80 81       	ld	r24, Z
    c8b4:	91 81       	ldd	r25, Z+1	; 0x01
    c8b6:	84 0f       	add	r24, r20
    c8b8:	95 1f       	adc	r25, r21
    c8ba:	02 96       	adiw	r24, 0x02	; 2
    c8bc:	e9 01       	movw	r28, r18
    c8be:	99 83       	std	Y+1, r25	; 0x01
    c8c0:	88 83       	st	Y, r24
    c8c2:	82 81       	ldd	r24, Z+2	; 0x02
    c8c4:	93 81       	ldd	r25, Z+3	; 0x03
    c8c6:	9b 83       	std	Y+3, r25	; 0x03
    c8c8:	8a 83       	std	Y+2, r24	; 0x02
    c8ca:	e0 e0       	ldi	r30, 0x00	; 0
    c8cc:	f0 e0       	ldi	r31, 0x00	; 0
    c8ce:	12 96       	adiw	r26, 0x02	; 2
    c8d0:	8d 91       	ld	r24, X+
    c8d2:	9c 91       	ld	r25, X
    c8d4:	13 97       	sbiw	r26, 0x03	; 3
    c8d6:	00 97       	sbiw	r24, 0x00	; 0
    c8d8:	19 f0       	breq	.+6      	; 0xc8e0 <free+0xd4>
    c8da:	fd 01       	movw	r30, r26
    c8dc:	dc 01       	movw	r26, r24
    c8de:	f7 cf       	rjmp	.-18     	; 0xc8ce <free+0xc2>
    c8e0:	8d 91       	ld	r24, X+
    c8e2:	9c 91       	ld	r25, X
    c8e4:	11 97       	sbiw	r26, 0x01	; 1
    c8e6:	9d 01       	movw	r18, r26
    c8e8:	2e 5f       	subi	r18, 0xFE	; 254
    c8ea:	3f 4f       	sbci	r19, 0xFF	; 255
    c8ec:	82 0f       	add	r24, r18
    c8ee:	93 1f       	adc	r25, r19
    c8f0:	20 91 73 06 	lds	r18, 0x0673	; 0x800673 <__brkval>
    c8f4:	30 91 74 06 	lds	r19, 0x0674	; 0x800674 <__brkval+0x1>
    c8f8:	28 17       	cp	r18, r24
    c8fa:	39 07       	cpc	r19, r25
    c8fc:	69 f4       	brne	.+26     	; 0xc918 <free+0x10c>
    c8fe:	30 97       	sbiw	r30, 0x00	; 0
    c900:	29 f4       	brne	.+10     	; 0xc90c <free+0x100>
    c902:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <__flp+0x1>
    c906:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <__flp>
    c90a:	02 c0       	rjmp	.+4      	; 0xc910 <free+0x104>
    c90c:	13 82       	std	Z+3, r1	; 0x03
    c90e:	12 82       	std	Z+2, r1	; 0x02
    c910:	b0 93 74 06 	sts	0x0674, r27	; 0x800674 <__brkval+0x1>
    c914:	a0 93 73 06 	sts	0x0673, r26	; 0x800673 <__brkval>
    c918:	df 91       	pop	r29
    c91a:	cf 91       	pop	r28
    c91c:	08 95       	ret

0000c91e <realloc>:
    c91e:	6f 92       	push	r6
    c920:	7f 92       	push	r7
    c922:	8f 92       	push	r8
    c924:	9f 92       	push	r9
    c926:	af 92       	push	r10
    c928:	bf 92       	push	r11
    c92a:	cf 92       	push	r12
    c92c:	df 92       	push	r13
    c92e:	ef 92       	push	r14
    c930:	ff 92       	push	r15
    c932:	0f 93       	push	r16
    c934:	1f 93       	push	r17
    c936:	cf 93       	push	r28
    c938:	df 93       	push	r29
    c93a:	00 97       	sbiw	r24, 0x00	; 0
    c93c:	81 f4       	brne	.+32     	; 0xc95e <realloc+0x40>
    c93e:	cb 01       	movw	r24, r22
    c940:	df 91       	pop	r29
    c942:	cf 91       	pop	r28
    c944:	1f 91       	pop	r17
    c946:	0f 91       	pop	r16
    c948:	ff 90       	pop	r15
    c94a:	ef 90       	pop	r14
    c94c:	df 90       	pop	r13
    c94e:	cf 90       	pop	r12
    c950:	bf 90       	pop	r11
    c952:	af 90       	pop	r10
    c954:	9f 90       	pop	r9
    c956:	8f 90       	pop	r8
    c958:	7f 90       	pop	r7
    c95a:	6f 90       	pop	r6
    c95c:	bf ce       	rjmp	.-642    	; 0xc6dc <malloc>
    c95e:	fc 01       	movw	r30, r24
    c960:	e6 0f       	add	r30, r22
    c962:	f7 1f       	adc	r31, r23
    c964:	9c 01       	movw	r18, r24
    c966:	22 50       	subi	r18, 0x02	; 2
    c968:	31 09       	sbc	r19, r1
    c96a:	e2 17       	cp	r30, r18
    c96c:	f3 07       	cpc	r31, r19
    c96e:	08 f4       	brcc	.+2      	; 0xc972 <realloc+0x54>
    c970:	a5 c0       	rjmp	.+330    	; 0xcabc <realloc+0x19e>
    c972:	ec 01       	movw	r28, r24
    c974:	d9 01       	movw	r26, r18
    c976:	0d 91       	ld	r16, X+
    c978:	1c 91       	ld	r17, X
    c97a:	11 97       	sbiw	r26, 0x01	; 1
    c97c:	06 17       	cp	r16, r22
    c97e:	17 07       	cpc	r17, r23
    c980:	a8 f0       	brcs	.+42     	; 0xc9ac <realloc+0x8e>
    c982:	05 30       	cpi	r16, 0x05	; 5
    c984:	11 05       	cpc	r17, r1
    c986:	08 f4       	brcc	.+2      	; 0xc98a <realloc+0x6c>
    c988:	97 c0       	rjmp	.+302    	; 0xcab8 <realloc+0x19a>
    c98a:	c8 01       	movw	r24, r16
    c98c:	04 97       	sbiw	r24, 0x04	; 4
    c98e:	86 17       	cp	r24, r22
    c990:	97 07       	cpc	r25, r23
    c992:	08 f4       	brcc	.+2      	; 0xc996 <realloc+0x78>
    c994:	91 c0       	rjmp	.+290    	; 0xcab8 <realloc+0x19a>
    c996:	02 50       	subi	r16, 0x02	; 2
    c998:	11 09       	sbc	r17, r1
    c99a:	06 1b       	sub	r16, r22
    c99c:	17 0b       	sbc	r17, r23
    c99e:	01 93       	st	Z+, r16
    c9a0:	11 93       	st	Z+, r17
    c9a2:	6d 93       	st	X+, r22
    c9a4:	7c 93       	st	X, r23
    c9a6:	cf 01       	movw	r24, r30
    c9a8:	31 df       	rcall	.-414    	; 0xc80c <free>
    c9aa:	86 c0       	rjmp	.+268    	; 0xcab8 <realloc+0x19a>
    c9ac:	5b 01       	movw	r10, r22
    c9ae:	a0 1a       	sub	r10, r16
    c9b0:	b1 0a       	sbc	r11, r17
    c9b2:	4c 01       	movw	r8, r24
    c9b4:	80 0e       	add	r8, r16
    c9b6:	91 1e       	adc	r9, r17
    c9b8:	a0 91 75 06 	lds	r26, 0x0675	; 0x800675 <__flp>
    c9bc:	b0 91 76 06 	lds	r27, 0x0676	; 0x800676 <__flp+0x1>
    c9c0:	61 2c       	mov	r6, r1
    c9c2:	71 2c       	mov	r7, r1
    c9c4:	e1 2c       	mov	r14, r1
    c9c6:	f1 2c       	mov	r15, r1
    c9c8:	10 97       	sbiw	r26, 0x00	; 0
    c9ca:	09 f4       	brne	.+2      	; 0xc9ce <realloc+0xb0>
    c9cc:	46 c0       	rjmp	.+140    	; 0xca5a <realloc+0x13c>
    c9ce:	8d 91       	ld	r24, X+
    c9d0:	9c 91       	ld	r25, X
    c9d2:	11 97       	sbiw	r26, 0x01	; 1
    c9d4:	a8 15       	cp	r26, r8
    c9d6:	b9 05       	cpc	r27, r9
    c9d8:	b1 f5       	brne	.+108    	; 0xca46 <realloc+0x128>
    c9da:	6c 01       	movw	r12, r24
    c9dc:	42 e0       	ldi	r20, 0x02	; 2
    c9de:	c4 0e       	add	r12, r20
    c9e0:	d1 1c       	adc	r13, r1
    c9e2:	ca 14       	cp	r12, r10
    c9e4:	db 04       	cpc	r13, r11
    c9e6:	78 f1       	brcs	.+94     	; 0xca46 <realloc+0x128>
    c9e8:	4c 01       	movw	r8, r24
    c9ea:	8a 18       	sub	r8, r10
    c9ec:	9b 08       	sbc	r9, r11
    c9ee:	64 01       	movw	r12, r8
    c9f0:	42 e0       	ldi	r20, 0x02	; 2
    c9f2:	c4 0e       	add	r12, r20
    c9f4:	d1 1c       	adc	r13, r1
    c9f6:	12 96       	adiw	r26, 0x02	; 2
    c9f8:	bc 90       	ld	r11, X
    c9fa:	12 97       	sbiw	r26, 0x02	; 2
    c9fc:	13 96       	adiw	r26, 0x03	; 3
    c9fe:	ac 91       	ld	r26, X
    ca00:	b5 e0       	ldi	r27, 0x05	; 5
    ca02:	cb 16       	cp	r12, r27
    ca04:	d1 04       	cpc	r13, r1
    ca06:	40 f0       	brcs	.+16     	; 0xca18 <realloc+0xfa>
    ca08:	b2 82       	std	Z+2, r11	; 0x02
    ca0a:	a3 83       	std	Z+3, r26	; 0x03
    ca0c:	91 82       	std	Z+1, r9	; 0x01
    ca0e:	80 82       	st	Z, r8
    ca10:	d9 01       	movw	r26, r18
    ca12:	6d 93       	st	X+, r22
    ca14:	7c 93       	st	X, r23
    ca16:	09 c0       	rjmp	.+18     	; 0xca2a <realloc+0x10c>
    ca18:	0e 5f       	subi	r16, 0xFE	; 254
    ca1a:	1f 4f       	sbci	r17, 0xFF	; 255
    ca1c:	80 0f       	add	r24, r16
    ca1e:	91 1f       	adc	r25, r17
    ca20:	f9 01       	movw	r30, r18
    ca22:	91 83       	std	Z+1, r25	; 0x01
    ca24:	80 83       	st	Z, r24
    ca26:	eb 2d       	mov	r30, r11
    ca28:	fa 2f       	mov	r31, r26
    ca2a:	e1 14       	cp	r14, r1
    ca2c:	f1 04       	cpc	r15, r1
    ca2e:	31 f0       	breq	.+12     	; 0xca3c <realloc+0x11e>
    ca30:	d7 01       	movw	r26, r14
    ca32:	13 96       	adiw	r26, 0x03	; 3
    ca34:	fc 93       	st	X, r31
    ca36:	ee 93       	st	-X, r30
    ca38:	12 97       	sbiw	r26, 0x02	; 2
    ca3a:	3e c0       	rjmp	.+124    	; 0xcab8 <realloc+0x19a>
    ca3c:	f0 93 76 06 	sts	0x0676, r31	; 0x800676 <__flp+0x1>
    ca40:	e0 93 75 06 	sts	0x0675, r30	; 0x800675 <__flp>
    ca44:	39 c0       	rjmp	.+114    	; 0xcab8 <realloc+0x19a>
    ca46:	68 16       	cp	r6, r24
    ca48:	79 06       	cpc	r7, r25
    ca4a:	08 f4       	brcc	.+2      	; 0xca4e <realloc+0x130>
    ca4c:	3c 01       	movw	r6, r24
    ca4e:	7d 01       	movw	r14, r26
    ca50:	12 96       	adiw	r26, 0x02	; 2
    ca52:	0d 90       	ld	r0, X+
    ca54:	bc 91       	ld	r27, X
    ca56:	a0 2d       	mov	r26, r0
    ca58:	b7 cf       	rjmp	.-146    	; 0xc9c8 <realloc+0xaa>
    ca5a:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <__brkval>
    ca5e:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <__brkval+0x1>
    ca62:	88 16       	cp	r8, r24
    ca64:	99 06       	cpc	r9, r25
    ca66:	e1 f4       	brne	.+56     	; 0xcaa0 <realloc+0x182>
    ca68:	66 16       	cp	r6, r22
    ca6a:	77 06       	cpc	r7, r23
    ca6c:	c8 f4       	brcc	.+50     	; 0xcaa0 <realloc+0x182>
    ca6e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    ca72:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    ca76:	00 97       	sbiw	r24, 0x00	; 0
    ca78:	41 f4       	brne	.+16     	; 0xca8a <realloc+0x16c>
    ca7a:	8d b7       	in	r24, 0x3d	; 61
    ca7c:	9e b7       	in	r25, 0x3e	; 62
    ca7e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    ca82:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    ca86:	84 1b       	sub	r24, r20
    ca88:	95 0b       	sbc	r25, r21
    ca8a:	e8 17       	cp	r30, r24
    ca8c:	f9 07       	cpc	r31, r25
    ca8e:	b0 f4       	brcc	.+44     	; 0xcabc <realloc+0x19e>
    ca90:	f0 93 74 06 	sts	0x0674, r31	; 0x800674 <__brkval+0x1>
    ca94:	e0 93 73 06 	sts	0x0673, r30	; 0x800673 <__brkval>
    ca98:	f9 01       	movw	r30, r18
    ca9a:	71 83       	std	Z+1, r23	; 0x01
    ca9c:	60 83       	st	Z, r22
    ca9e:	0c c0       	rjmp	.+24     	; 0xcab8 <realloc+0x19a>
    caa0:	cb 01       	movw	r24, r22
    caa2:	1c de       	rcall	.-968    	; 0xc6dc <malloc>
    caa4:	7c 01       	movw	r14, r24
    caa6:	00 97       	sbiw	r24, 0x00	; 0
    caa8:	49 f0       	breq	.+18     	; 0xcabc <realloc+0x19e>
    caaa:	a8 01       	movw	r20, r16
    caac:	be 01       	movw	r22, r28
    caae:	23 d0       	rcall	.+70     	; 0xcaf6 <memcpy>
    cab0:	ce 01       	movw	r24, r28
    cab2:	ac de       	rcall	.-680    	; 0xc80c <free>
    cab4:	c7 01       	movw	r24, r14
    cab6:	04 c0       	rjmp	.+8      	; 0xcac0 <realloc+0x1a2>
    cab8:	ce 01       	movw	r24, r28
    caba:	02 c0       	rjmp	.+4      	; 0xcac0 <realloc+0x1a2>
    cabc:	80 e0       	ldi	r24, 0x00	; 0
    cabe:	90 e0       	ldi	r25, 0x00	; 0
    cac0:	df 91       	pop	r29
    cac2:	cf 91       	pop	r28
    cac4:	1f 91       	pop	r17
    cac6:	0f 91       	pop	r16
    cac8:	ff 90       	pop	r15
    caca:	ef 90       	pop	r14
    cacc:	df 90       	pop	r13
    cace:	cf 90       	pop	r12
    cad0:	bf 90       	pop	r11
    cad2:	af 90       	pop	r10
    cad4:	9f 90       	pop	r9
    cad6:	8f 90       	pop	r8
    cad8:	7f 90       	pop	r7
    cada:	6f 90       	pop	r6
    cadc:	08 95       	ret

0000cade <abort>:
    cade:	81 e0       	ldi	r24, 0x01	; 1
    cae0:	90 e0       	ldi	r25, 0x00	; 0
    cae2:	f8 94       	cli
    cae4:	5b c0       	rjmp	.+182    	; 0xcb9c <__do_global_dtors>

0000cae6 <toupper>:
    cae6:	91 11       	cpse	r25, r1
    cae8:	08 95       	ret
    caea:	81 56       	subi	r24, 0x61	; 97
    caec:	8a 51       	subi	r24, 0x1A	; 26
    caee:	08 f4       	brcc	.+2      	; 0xcaf2 <toupper+0xc>
    caf0:	80 52       	subi	r24, 0x20	; 32
    caf2:	85 58       	subi	r24, 0x85	; 133
    caf4:	08 95       	ret

0000caf6 <memcpy>:
    caf6:	fb 01       	movw	r30, r22
    caf8:	dc 01       	movw	r26, r24
    cafa:	02 c0       	rjmp	.+4      	; 0xcb00 <memcpy+0xa>
    cafc:	01 90       	ld	r0, Z+
    cafe:	0d 92       	st	X+, r0
    cb00:	41 50       	subi	r20, 0x01	; 1
    cb02:	50 40       	sbci	r21, 0x00	; 0
    cb04:	d8 f7       	brcc	.-10     	; 0xcafc <memcpy+0x6>
    cb06:	08 95       	ret

0000cb08 <memset>:
    cb08:	dc 01       	movw	r26, r24
    cb0a:	01 c0       	rjmp	.+2      	; 0xcb0e <memset+0x6>
    cb0c:	6d 93       	st	X+, r22
    cb0e:	41 50       	subi	r20, 0x01	; 1
    cb10:	50 40       	sbci	r21, 0x00	; 0
    cb12:	e0 f7       	brcc	.-8      	; 0xcb0c <memset+0x4>
    cb14:	08 95       	ret

0000cb16 <strcmp>:
    cb16:	fb 01       	movw	r30, r22
    cb18:	dc 01       	movw	r26, r24
    cb1a:	8d 91       	ld	r24, X+
    cb1c:	01 90       	ld	r0, Z+
    cb1e:	80 19       	sub	r24, r0
    cb20:	01 10       	cpse	r0, r1
    cb22:	d9 f3       	breq	.-10     	; 0xcb1a <strcmp+0x4>
    cb24:	99 0b       	sbc	r25, r25
    cb26:	08 95       	ret

0000cb28 <strcpy>:
    cb28:	fb 01       	movw	r30, r22
    cb2a:	dc 01       	movw	r26, r24
    cb2c:	01 90       	ld	r0, Z+
    cb2e:	0d 92       	st	X+, r0
    cb30:	00 20       	and	r0, r0
    cb32:	e1 f7       	brne	.-8      	; 0xcb2c <strcpy+0x4>
    cb34:	08 95       	ret

0000cb36 <utoa>:
    cb36:	45 32       	cpi	r20, 0x25	; 37
    cb38:	51 05       	cpc	r21, r1
    cb3a:	18 f4       	brcc	.+6      	; 0xcb42 <utoa+0xc>
    cb3c:	42 30       	cpi	r20, 0x02	; 2
    cb3e:	08 f0       	brcs	.+2      	; 0xcb42 <utoa+0xc>
    cb40:	04 c0       	rjmp	.+8      	; 0xcb4a <__utoa_ncheck>
    cb42:	fb 01       	movw	r30, r22
    cb44:	10 82       	st	Z, r1
    cb46:	cb 01       	movw	r24, r22
    cb48:	08 95       	ret

0000cb4a <__utoa_ncheck>:
    cb4a:	bb 27       	eor	r27, r27

0000cb4c <__utoa_common>:
    cb4c:	fb 01       	movw	r30, r22
    cb4e:	55 27       	eor	r21, r21
    cb50:	aa 27       	eor	r26, r26
    cb52:	88 0f       	add	r24, r24
    cb54:	99 1f       	adc	r25, r25
    cb56:	aa 1f       	adc	r26, r26
    cb58:	a4 17       	cp	r26, r20
    cb5a:	10 f0       	brcs	.+4      	; 0xcb60 <__utoa_common+0x14>
    cb5c:	a4 1b       	sub	r26, r20
    cb5e:	83 95       	inc	r24
    cb60:	50 51       	subi	r21, 0x10	; 16
    cb62:	b9 f7       	brne	.-18     	; 0xcb52 <__utoa_common+0x6>
    cb64:	a0 5d       	subi	r26, 0xD0	; 208
    cb66:	aa 33       	cpi	r26, 0x3A	; 58
    cb68:	08 f0       	brcs	.+2      	; 0xcb6c <__utoa_common+0x20>
    cb6a:	a9 5d       	subi	r26, 0xD9	; 217
    cb6c:	a1 93       	st	Z+, r26
    cb6e:	00 97       	sbiw	r24, 0x00	; 0
    cb70:	79 f7       	brne	.-34     	; 0xcb50 <__utoa_common+0x4>
    cb72:	b1 11       	cpse	r27, r1
    cb74:	b1 93       	st	Z+, r27
    cb76:	11 92       	st	Z+, r1
    cb78:	cb 01       	movw	r24, r22
    cb7a:	00 c0       	rjmp	.+0      	; 0xcb7c <strrev>

0000cb7c <strrev>:
    cb7c:	dc 01       	movw	r26, r24
    cb7e:	fc 01       	movw	r30, r24
    cb80:	67 2f       	mov	r22, r23
    cb82:	71 91       	ld	r23, Z+
    cb84:	77 23       	and	r23, r23
    cb86:	e1 f7       	brne	.-8      	; 0xcb80 <strrev+0x4>
    cb88:	32 97       	sbiw	r30, 0x02	; 2
    cb8a:	04 c0       	rjmp	.+8      	; 0xcb94 <strrev+0x18>
    cb8c:	7c 91       	ld	r23, X
    cb8e:	6d 93       	st	X+, r22
    cb90:	70 83       	st	Z, r23
    cb92:	62 91       	ld	r22, -Z
    cb94:	ae 17       	cp	r26, r30
    cb96:	bf 07       	cpc	r27, r31
    cb98:	c8 f3       	brcs	.-14     	; 0xcb8c <strrev+0x10>
    cb9a:	08 95       	ret

0000cb9c <__do_global_dtors>:
    cb9c:	16 e0       	ldi	r17, 0x06	; 6
    cb9e:	ca e4       	ldi	r28, 0x4A	; 74
    cba0:	d6 e0       	ldi	r29, 0x06	; 6
    cba2:	00 e0       	ldi	r16, 0x00	; 0
    cba4:	05 c0       	rjmp	.+10     	; 0xcbb0 <__do_global_dtors+0x14>
    cba6:	80 2f       	mov	r24, r16
    cba8:	fe 01       	movw	r30, r28
    cbaa:	77 dd       	rcall	.-1298   	; 0xc69a <__tablejump2__>
    cbac:	21 96       	adiw	r28, 0x01	; 1
    cbae:	01 1d       	adc	r16, r1
    cbb0:	cc 34       	cpi	r28, 0x4C	; 76
    cbb2:	d1 07       	cpc	r29, r17
    cbb4:	80 e0       	ldi	r24, 0x00	; 0
    cbb6:	08 07       	cpc	r16, r24
    cbb8:	b1 f7       	brne	.-20     	; 0xcba6 <__do_global_dtors+0xa>
    cbba:	f8 94       	cli

0000cbbc <__stop_program>:
    cbbc:	ff cf       	rjmp	.-2      	; 0xcbbc <__stop_program>
