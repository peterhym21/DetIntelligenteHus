
Det_Intelligente_Hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800200  0000ccd2  0000cd66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ccd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000315  00800366  00800366  0000cecc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000cecc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000cefc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001928  00000000  00000000  0000cf40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002d772  00000000  00000000  0000e868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007009  00000000  00000000  0003bfda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000116b6  00000000  00000000  00042fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000066dc  00000000  00000000  0005469c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009d76  00000000  00000000  0005ad78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00013163  00000000  00000000  00064aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001888  00000000  00000000  00077c51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c6       	rjmp	.+3234   	; 0xca4 <__dtors_end>
       2:	00 00       	nop
       4:	80 c6       	rjmp	.+3328   	; 0xd06 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c6       	rjmp	.+3324   	; 0xd06 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c6       	rjmp	.+3320   	; 0xd06 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c6       	rjmp	.+3316   	; 0xd06 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c6       	rjmp	.+3312   	; 0xd06 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c6       	rjmp	.+3308   	; 0xd06 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c6       	rjmp	.+3304   	; 0xd06 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c6       	rjmp	.+3300   	; 0xd06 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c6       	rjmp	.+3296   	; 0xd06 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c6       	rjmp	.+3292   	; 0xd06 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6c c6       	rjmp	.+3288   	; 0xd06 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6a c6       	rjmp	.+3284   	; 0xd06 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c6       	rjmp	.+3280   	; 0xd06 <__bad_interrupt>
      36:	00 00       	nop
      38:	66 c6       	rjmp	.+3276   	; 0xd06 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c6       	rjmp	.+3272   	; 0xd06 <__bad_interrupt>
      3e:	00 00       	nop
      40:	62 c6       	rjmp	.+3268   	; 0xd06 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a1 4c 	jmp	0x9942	; 0x9942 <__vector_17>
      48:	5e c6       	rjmp	.+3260   	; 0xd06 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c6       	rjmp	.+3256   	; 0xd06 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 de 50 	jmp	0xa1bc	; 0xa1bc <__vector_20>
      54:	58 c6       	rjmp	.+3248   	; 0xd06 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c6       	rjmp	.+3244   	; 0xd06 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b5 5e 	jmp	0xbd6a	; 0xbd6a <__vector_23>
      60:	52 c6       	rjmp	.+3236   	; 0xd06 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f8 5b 	jmp	0xb7f0	; 0xb7f0 <__vector_25>
      68:	0c 94 2e 5c 	jmp	0xb85c	; 0xb85c <__vector_26>
      6c:	4c c6       	rjmp	.+3224   	; 0xd06 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c6       	rjmp	.+3220   	; 0xd06 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c6       	rjmp	.+3216   	; 0xd06 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c6       	rjmp	.+3212   	; 0xd06 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c6       	rjmp	.+3208   	; 0xd06 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 d8 4c 	jmp	0x99b0	; 0x99b0 <__vector_32>
      84:	40 c6       	rjmp	.+3200   	; 0xd06 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c6       	rjmp	.+3196   	; 0xd06 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 15 51 	jmp	0xa22a	; 0xa22a <__vector_35>
      90:	3a c6       	rjmp	.+3188   	; 0xd06 <__bad_interrupt>
      92:	00 00       	nop
      94:	38 c6       	rjmp	.+3184   	; 0xd06 <__bad_interrupt>
      96:	00 00       	nop
      98:	36 c6       	rjmp	.+3180   	; 0xd06 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e4 53 	jmp	0xa7c8	; 0xa7c8 <__vector_39>
      a0:	32 c6       	rjmp	.+3172   	; 0xd06 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	30 c6       	rjmp	.+3168   	; 0xd06 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 0f 4d 	jmp	0x9a1e	; 0x9a1e <__vector_42>
      ac:	2c c6       	rjmp	.+3160   	; 0xd06 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2a c6       	rjmp	.+3156   	; 0xd06 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	28 c6       	rjmp	.+3152   	; 0xd06 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	26 c6       	rjmp	.+3148   	; 0xd06 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 46 4d 	jmp	0x9a8c	; 0x9a8c <__vector_47>
      c0:	22 c6       	rjmp	.+3140   	; 0xd06 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	20 c6       	rjmp	.+3136   	; 0xd06 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	1e c6       	rjmp	.+3132   	; 0xd06 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	1c c6       	rjmp	.+3128   	; 0xd06 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	1a c6       	rjmp	.+3124   	; 0xd06 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	18 c6       	rjmp	.+3120   	; 0xd06 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	16 c6       	rjmp	.+3116   	; 0xd06 <__bad_interrupt>
      da:	00 00       	nop
      dc:	14 c6       	rjmp	.+3112   	; 0xd06 <__bad_interrupt>
      de:	00 00       	nop
      e0:	12 c6       	rjmp	.+3108   	; 0xd06 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	21 60       	ori	r18, 0x01	; 1
      e6:	26 60       	ori	r18, 0x06	; 6
      e8:	2b 60       	ori	r18, 0x0B	; 11
      ea:	35 60       	ori	r19, 0x05	; 5
      ec:	3f 60       	ori	r19, 0x0F	; 15
      ee:	b8 60       	ori	r27, 0x08	; 8
      f0:	49 60       	ori	r20, 0x09	; 9
      f2:	51 60       	ori	r21, 0x01	; 1
      f4:	59 60       	ori	r21, 0x09	; 9
      f6:	63 60       	ori	r22, 0x03	; 3
      f8:	6d 60       	ori	r22, 0x0D	; 13
      fa:	77 60       	ori	r23, 0x07	; 7
      fc:	86 60       	ori	r24, 0x06	; 6
      fe:	90 60       	ori	r25, 0x00	; 0
     100:	b8 60       	ori	r27, 0x08	; 8
     102:	9a 60       	ori	r25, 0x0A	; 10
     104:	a4 60       	ori	r26, 0x04	; 4
     106:	ae 60       	ori	r26, 0x0E	; 14
     108:	db 60       	ori	r29, 0x0B	; 11
     10a:	de 60       	ori	r29, 0x0E	; 14
     10c:	cd 60       	ori	r28, 0x0D	; 13
     10e:	d1 60       	ori	r29, 0x01	; 1
     110:	d7 60       	ori	r29, 0x07	; 7
     112:	15 61       	ori	r17, 0x15	; 21
     114:	e2 60       	ori	r30, 0x02	; 2
     116:	e6 60       	ori	r30, 0x06	; 6
     118:	ec 60       	ori	r30, 0x0C	; 12
     11a:	f0 60       	ori	r31, 0x00	; 0
     11c:	f4 60       	ori	r31, 0x04	; 4
     11e:	fa 60       	ori	r31, 0x0A	; 10
     120:	fe 60       	ori	r31, 0x0E	; 14
     122:	02 61       	ori	r16, 0x12	; 18
     124:	15 61       	ori	r17, 0x15	; 21
     126:	08 61       	ori	r16, 0x18	; 24
     128:	0c 61       	ori	r16, 0x1C	; 28
     12a:	10 61       	ori	r17, 0x10	; 16

0000012c <__trampolines_end>:
     12c:	54 65       	ori	r21, 0x54	; 84
     12e:	6d 70       	andi	r22, 0x0D	; 13
     130:	65 72       	andi	r22, 0x25	; 37
     132:	61 74       	andi	r22, 0x41	; 65
     134:	75 72       	andi	r23, 0x25	; 37
     136:	3a 20       	and	r3, r10
	...

00000139 <_ZZ16LCDPrintHumidityfE3__c>:
     139:	48 75 6d 69 64 69 74 79 3a 20 00                    Humidity: .

00000144 <_ZZ16LCDPrintHumidityfE3__c_0>:
     144:	25 00                                               %.

00000146 <_ZZ5setupE3__c>:
     146:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
     156:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

00000160 <_ZZ11DisplayMenuvE3__c>:
     160:	4d 65 6e 75 00                                      Menu.

00000165 <_ZZ11DisplayMenuvE3__c_0>:
     165:	41 3a 20 54 69 6d 65 20 61 6e 64 20 44 61 74 65     A: Time and Date
	...

00000176 <_ZZ11DisplayMenuvE3__c_1>:
     176:	42 3a 20 54 65 6d 70 72 65 74 75 72 65 00           B: Tempreture.

00000184 <_ZZ11DisplayMenuvE3__c_2>:
     184:	43 3a 20 48 75 6d 69 64 69 74 79 00                 C: Humidity.

00000190 <_ZZ11WelcomeOLEDvE3__c>:
     190:	57 65 6c 63 6f 6d 65 00                             Welcome.

00000198 <_ZZ11WelcomeOLEDvE3__c_0>:
     198:	48 6f 6d 65 00                                      Home.

0000019d <_ZL4font>:
     19d:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     1ad:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     1bd:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     1cd:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     1dd:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     1ed:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     1fd:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     20d:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     21d:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     22d:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     23d:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     24d:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     25d:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     26d:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     27d:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     28d:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     29d:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     2ad:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     2bd:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     2cd:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     2dd:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     2ed:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     2fd:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     30d:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     31d:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     32d:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     33d:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     34d:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     35d:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     36d:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     37d:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     38d:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     39d:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     3ad:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     3bd:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     3cd:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     3dd:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     3ed:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     3fd:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     40d:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     41d:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     42d:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     43d:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     44d:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     45d:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     46d:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     47d:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     48d:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     49d:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     4ad:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     4bd:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     4cd:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     4dd:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     4ed:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     4fd:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     50d:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     51d:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     52d:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     53d:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     54d:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     55d:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     56d:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     57d:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     58d:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     59d:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     5ad:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     5bd:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     5cd:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     5dd:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     5ed:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     5fd:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     60d:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     61d:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     62d:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     63d:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     64d:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     65d:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     66d:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     67d:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     68d:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

0000069d <_ZL12splash1_data>:
     69d:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     6ad:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     6bd:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     6cd:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     6dd:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     6ed:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     705:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     715:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     725:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     735:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     745:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     755:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     765:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     775:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     785:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     795:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     7a5:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     7b5:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     7c5:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     7d5:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     7e5:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     7f5:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     805:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     815:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     82d:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     845:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     855:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     865:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     875:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     885:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     895:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     8a5:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     8b5:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     8c5:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     8d5:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     8e5:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     8f5:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     905:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     915:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     925:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     935:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     945:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     955:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

0000095d <_ZL12splash2_data>:
     95d:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     96d:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     97d:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     999:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     9a9:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     9b9:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     9c9:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     9d9:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     9e9:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     9f9:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     a09:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     a19:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     a29:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     a39:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     a49:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     a59:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     a69:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     a79:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     a89:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     a99:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     aa9:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     ab9:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     ac9:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     ad9:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     af1:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     b01:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     b11:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     b21:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     b31:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000b3d <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     b3d:	ae d5 80 a8                                         ....

00000b41 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     b41:	d3 00 40 8d                                         ..@.

00000b45 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     b45:	20 00 a1 c8                                          ...

00000b49 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     b49:	db 40 a4 a6 2e af                                   .@....

00000b4f <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     b4f:	00 80 c0 e0 f0 f8 fc fe                             ........

00000b57 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     b57:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000b5f <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     b5f:	22 00 ff 21 00                                      "..!.

00000b64 <_ZL9daysArray>:
     b64:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000b70 <digital_pin_to_timer_PGM>:
     b70:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     b9c:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000bb6 <digital_pin_to_bit_mask_PGM>:
     bb6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     bc6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     bd6:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     be6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     bf6:	04 08 10 20 40 80                                   ... @.

00000bfc <digital_pin_to_port_PGM>:
     bfc:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     c0c:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     c1c:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     c2c:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     c3c:	0b 0b 0b 0b 0b 0b                                   ......

00000c42 <port_to_input_PGM>:
     c42:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     c52:	00 01 00 00 03 01 06 01 09 01                       ..........

00000c5c <port_to_output_PGM>:
     c5c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     c6c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000c76 <port_to_mode_PGM>:
     c76:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     c86:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000c90 <__ctors_start>:
     c90:	ca 07       	cpc	r28, r26
     c92:	1f 08       	sbc	r1, r15
     c94:	78 09       	sbc	r23, r8
     c96:	7d 0e       	add	r7, r29
     c98:	d4 11       	cpse	r29, r4
     c9a:	23 12       	cpse	r2, r19
     c9c:	39 58       	subi	r19, 0x89	; 137
     c9e:	60 5c       	subi	r22, 0xC0	; 192

00000ca0 <__ctors_end>:
     ca0:	2b 08       	sbc	r2, r11
     ca2:	89 0e       	add	r8, r25

00000ca4 <__dtors_end>:
     ca4:	11 24       	eor	r1, r1
     ca6:	1f be       	out	0x3f, r1	; 63
     ca8:	cf ef       	ldi	r28, 0xFF	; 255
     caa:	d1 e2       	ldi	r29, 0x21	; 33
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	00 e0       	ldi	r16, 0x00	; 0
     cb2:	0c bf       	out	0x3c, r16	; 60

00000cb4 <__do_copy_data>:
     cb4:	13 e0       	ldi	r17, 0x03	; 3
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b2 e0       	ldi	r27, 0x02	; 2
     cba:	e2 ed       	ldi	r30, 0xD2	; 210
     cbc:	fc ec       	ldi	r31, 0xCC	; 204
     cbe:	00 e0       	ldi	r16, 0x00	; 0
     cc0:	0b bf       	out	0x3b, r16	; 59
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <__do_copy_data+0x14>
     cc4:	07 90       	elpm	r0, Z+
     cc6:	0d 92       	st	X+, r0
     cc8:	a6 36       	cpi	r26, 0x66	; 102
     cca:	b1 07       	cpc	r27, r17
     ccc:	d9 f7       	brne	.-10     	; 0xcc4 <__do_copy_data+0x10>

00000cce <__do_clear_bss>:
     cce:	26 e0       	ldi	r18, 0x06	; 6
     cd0:	a6 e6       	ldi	r26, 0x66	; 102
     cd2:	b3 e0       	ldi	r27, 0x03	; 3
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <.do_clear_bss_start>

00000cd6 <.do_clear_bss_loop>:
     cd6:	1d 92       	st	X+, r1

00000cd8 <.do_clear_bss_start>:
     cd8:	ab 37       	cpi	r26, 0x7B	; 123
     cda:	b2 07       	cpc	r27, r18
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <.do_clear_bss_loop>

00000cde <__do_global_ctors>:
     cde:	16 e0       	ldi	r17, 0x06	; 6
     ce0:	c0 e5       	ldi	r28, 0x50	; 80
     ce2:	d6 e0       	ldi	r29, 0x06	; 6
     ce4:	00 e0       	ldi	r16, 0x00	; 0
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <__do_global_ctors+0x16>
     ce8:	21 97       	sbiw	r28, 0x01	; 1
     cea:	01 09       	sbc	r16, r1
     cec:	80 2f       	mov	r24, r16
     cee:	fe 01       	movw	r30, r28
     cf0:	0e 94 d7 63 	call	0xc7ae	; 0xc7ae <__tablejump2__>
     cf4:	c8 34       	cpi	r28, 0x48	; 72
     cf6:	d1 07       	cpc	r29, r17
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	08 07       	cpc	r16, r24
     cfc:	a9 f7       	brne	.-22     	; 0xce8 <__do_global_ctors+0xa>
     cfe:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <main>
     d02:	0c 94 58 66 	jmp	0xccb0	; 0xccb0 <__do_global_dtors>

00000d06 <__bad_interrupt>:
     d06:	7c c9       	rjmp	.-3336   	; 0x0 <__vectors>

00000d08 <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     d08:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     d0a:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     d0c:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     d0e:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     d10:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     d12:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     d14:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     d16:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     d1a:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     d1c:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     d1e:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     d20:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     d22:	61 f1       	breq	.+88     	; 0xd7c <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     d24:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     d26:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     d28:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     d2a:	b9 f3       	breq	.-18     	; 0xd1a <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     d2e:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     d30:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     d32:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     d34:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     d36:	11 f1       	breq	.+68     	; 0xd7c <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     d38:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     d3a:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     d3c:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     d3e:	f7 cf       	rjmp	.-18     	; 0xd2e <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     d40:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     d42:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     d44:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     d46:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     d4c:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     d4e:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     d50:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     d52:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     d54:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     d56:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     d58:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     d5a:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     d5c:	79 f0       	breq	.+30     	; 0xd7c <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     d5e:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     d60:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     d62:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     d64:	91 f3       	breq	.-28     	; 0xd4a <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     d66:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     d68:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     d6a:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     d6c:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     d6e:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     d70:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     d72:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     d74:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     d76:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     d78:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     d7a:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     d7c:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     d7e:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     d80:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     d82:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     d84:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     d86:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     d88:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     d8a:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     d8c:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     d8e:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     d90:	08 95       	ret

00000d92 <_Z8GetHumidv>:

float GetHumid()
{
	return dht.readHumidity();
}

     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
float GetTemp()
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	86 e6       	ldi	r24, 0x66	; 102
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	0e 94 04 32 	call	0x6408	; 0x6408 <_ZN3DHT12readHumidityEb>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
{
     da8:	bc 01       	movw	r22, r24
     daa:	cd 01       	movw	r24, r26
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <_Z7GetTempv>:
	return dht.readTemperature();
}

     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62

     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	86 e6       	ldi	r24, 0x66	; 102
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	0e 94 77 30 	call	0x60ee	; 0x60ee <_ZN3DHT15readTemperatureEbb>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
void TjekTempInHous()
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <_Z14TjekTempInHousv>:
{
	float tempC = GetTemp();
	if (tempC < (SetNumber - Hysterese ))
	{
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	00 d0       	rcall	.+0      	; 0xdda <_Z14TjekTempInHousv+0x6>
     dda:	1f 92       	push	r1
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
		TooCold();
     de0:	e8 df       	rcall	.-48     	; 0xdb2 <_Z7GetTempv>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	9a 83       	std	Y+2, r25	; 0x02
     dea:	ab 83       	std	Y+3, r26	; 0x03
     dec:	bc 83       	std	Y+4, r27	; 0x04
	}
     dee:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     df2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     df6:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     dfa:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     dfe:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     e02:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     e06:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     e0a:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 75 58 	call	0xb0ea	; 0xb0ea <__subsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	29 81       	ldd	r18, Y+1	; 0x01
     e1c:	3a 81       	ldd	r19, Y+2	; 0x02
     e1e:	4b 81       	ldd	r20, Y+3	; 0x03
     e20:	5c 81       	ldd	r21, Y+4	; 0x04
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	0e 94 24 5a 	call	0xb448	; 0xb448 <__gesf2>
     e2a:	18 16       	cp	r1, r24
	if (tempC > (SetNumber + Hysterese ))
	{
     e2c:	0c f4       	brge	.+2      	; 0xe30 <_Z14TjekTempInHousv+0x5c>
     e2e:	6c d0       	rcall	.+216    	; 0xf08 <_Z7TooColdv>
		TooHot();
	}
     e30:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     e34:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     e38:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     e3c:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     e40:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     e44:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     e48:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     e4c:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     e50:	bc 01       	movw	r22, r24
     e52:	cd 01       	movw	r24, r26
     e54:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__addsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	29 81       	ldd	r18, Y+1	; 0x01
     e5e:	3a 81       	ldd	r19, Y+2	; 0x02
     e60:	4b 81       	ldd	r20, Y+3	; 0x03
     e62:	5c 81       	ldd	r21, Y+4	; 0x04
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__cmpsf2>
     e6c:	88 23       	and	r24, r24
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
	{
     e6e:	0c f4       	brge	.+2      	; 0xe72 <_Z14TjekTempInHousv+0x9e>
     e70:	57 d0       	rcall	.+174    	; 0xf20 <_Z6TooHotv>
		PerfektTemp();
	}
     e72:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     e76:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     e7a:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     e7e:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     e82:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     e86:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     e8a:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     e8e:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 75 58 	call	0xb0ea	; 0xb0ea <__subsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	29 81       	ldd	r18, Y+1	; 0x01
     ea0:	3a 81       	ldd	r19, Y+2	; 0x02
     ea2:	4b 81       	ldd	r20, Y+3	; 0x03
     ea4:	5c 81       	ldd	r21, Y+4	; 0x04
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__cmpsf2>
     eae:	88 23       	and	r24, r24
     eb0:	0c f0       	brlt	.+2      	; 0xeb4 <_Z14TjekTempInHousv+0xe0>
}

void TooCold()
{
     eb2:	22 c0       	rjmp	.+68     	; 0xef8 <_Z14TjekTempInHousv+0x124>
		TooHot();
	}
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
	{
		PerfektTemp();
	}
     eb4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     eb8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     ebc:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     ec0:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     ec4:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     ec8:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     ecc:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     ed0:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__addsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	29 81       	ldd	r18, Y+1	; 0x01
     ee2:	3a 81       	ldd	r19, Y+2	; 0x02
     ee4:	4b 81       	ldd	r20, Y+3	; 0x03
     ee6:	5c 81       	ldd	r21, Y+4	; 0x04
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 24 5a 	call	0xb448	; 0xb448 <__gesf2>
     ef0:	18 16       	cp	r1, r24
}

void TooCold()
{
     ef2:	0c f0       	brlt	.+2      	; 0xef6 <_Z14TjekTempInHousv+0x122>
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
	{
		PerfektTemp();
	}
}

     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <_Z14TjekTempInHousv+0x124>
     ef6:	20 d0       	rcall	.+64     	; 0xf38 <_Z11PerfektTempv>
void TooCold()
{
     ef8:	00 00       	nop
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <_Z7TooColdv>:
	TempTooCold();
	TurnOnRedLED();
	TurnOFFGreenLED();
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
	TurnOFFBlueLED();
     f10:	0c d7       	rcall	.+3608   	; 0x1d2a <_Z11TempTooColdv>
}
     f12:	9c d2       	rcall	.+1336   	; 0x144c <_Z12TurnOnRedLEDv>

     f14:	cb d2       	rcall	.+1430   	; 0x14ac <_Z15TurnOFFGreenLEDv>
     f16:	d6 d2       	rcall	.+1452   	; 0x14c4 <_Z14TurnOFFBlueLEDv>
void TooHot()
     f18:	00 00       	nop
     f1a:	df 91       	pop	r29
{
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <_Z6TooHotv>:
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
	TempTooHot();
	TurnOnBlueLED();
	TurnOFFGreenLED();
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	TurnOFFRedLED();
     f28:	ad d7       	rcall	.+3930   	; 0x1e84 <_Z10TempTooHotv>
}
     f2a:	a8 d2       	rcall	.+1360   	; 0x147c <_Z13TurnOnBlueLEDv>

     f2c:	bf d2       	rcall	.+1406   	; 0x14ac <_Z15TurnOFFGreenLEDv>
     f2e:	b2 d2       	rcall	.+1380   	; 0x1494 <_Z13TurnOFFRedLEDv>
void PerfektTemp()
     f30:	00 00       	nop
     f32:	df 91       	pop	r29
{
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <_Z11PerfektTempv>:
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
	TempPerfekt();
	TurnOnGreenLED();
	TurnOFFRedLED();
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	TurnOFFBlueLED();
     f40:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_Z11TempPerfektv>
     f44:	8f d2       	rcall	.+1310   	; 0x1464 <_Z14TurnOnGreenLEDv>
     f46:	a6 d2       	rcall	.+1356   	; 0x1494 <_Z13TurnOFFRedLEDv>
     f48:	bd d2       	rcall	.+1402   	; 0x14c4 <_Z14TurnOFFBlueLEDv>
     f4a:	00 00       	nop
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <_Z41__static_initialization_and_destruction_0ii>:
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	00 d0       	rcall	.+0      	; 0xf58 <_Z41__static_initialization_and_destruction_0ii+0x6>
     f58:	1f 92       	push	r1
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	7c 83       	std	Y+4, r23	; 0x04
     f64:	6b 83       	std	Y+3, r22	; 0x03
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	59 f4       	brne	.+22     	; 0xf84 <_Z41__static_initialization_and_destruction_0ii+0x32>
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	39 f4       	brne	.+14     	; 0xf84 <_Z41__static_initialization_and_destruction_0ii+0x32>
float Hysterese = 1;

DHT dht(DHTPIN, DHTTYPE);


float GetHumid()
     f76:	26 e0       	ldi	r18, 0x06	; 6
     f78:	4b e0       	ldi	r20, 0x0B	; 11
     f7a:	62 e0       	ldi	r22, 0x02	; 2
     f7c:	86 e6       	ldi	r24, 0x66	; 102
     f7e:	93 e0       	ldi	r25, 0x03	; 3
     f80:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <_ZN3DHTC1Ehhh>
	TurnOFFRedLED();
	TurnOFFBlueLED();
     f84:	00 00       	nop
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <_GLOBAL__sub_I_SetNumber>:
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	6f ef       	ldi	r22, 0xFF	; 255
     f9e:	7f ef       	ldi	r23, 0xFF	; 255
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	d6 df       	rcall	.-84     	; 0xf52 <_Z41__static_initialization_and_destruction_0ii>
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <_Z11GetDistancev>:
#include "HC-SR04.h"

HCSR04 hc(trigPin, echoPin);

int GetDistance()
{
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	1f 92       	push	r1
     fb2:	1f 92       	push	r1
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	unsigned int distance = hc.dist();
     fb8:	89 e7       	ldi	r24, 0x79	; 121
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	0e 94 e7 39 	call	0x73ce	; 0x73ce <_ZNK6HCSR044distEv>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 46 59 	call	0xb28c	; 0xb28c <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
	return distance;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <_Z41__static_initialization_and_destruction_0ii>:
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <_Z41__static_initialization_and_destruction_0ii+0x6>
     fe8:	1f 92       	push	r1
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	7c 83       	std	Y+4, r23	; 0x04
     ff4:	6b 83       	std	Y+3, r22	; 0x03
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	61 f4       	brne	.+24     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	41 f4       	brne	.+16     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
#include "HC-SR04.h"

HCSR04 hc(trigPin, echoPin);
    1006:	44 e0       	ldi	r20, 0x04	; 4
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	63 e0       	ldi	r22, 0x03	; 3
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	89 e7       	ldi	r24, 0x79	; 121
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	0e 94 3b 39 	call	0x7276	; 0x7276 <_ZN6HCSR04C1Eii>
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	89 2b       	or	r24, r25
    101c:	41 f4       	brne	.+16     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	21 f4       	brne	.+8      	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    1026:	89 e7       	ldi	r24, 0x79	; 121
    1028:	93 e0       	ldi	r25, 0x03	; 3
    102a:	0e 94 63 39 	call	0x72c6	; 0x72c6 <_ZN6HCSR04D1Ev>

int GetDistance()
{
	unsigned int distance = hc.dist();
	return distance;
    102e:	00 00       	nop
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <_GLOBAL__sub_I_hc>:
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	6f ef       	ldi	r22, 0xFF	; 255
    1048:	7f ef       	ldi	r23, 0xFF	; 255
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	c9 df       	rcall	.-110    	; 0xfe2 <_Z41__static_initialization_and_destruction_0ii>
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <_GLOBAL__sub_D_hc>:
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	6f ef       	ldi	r22, 0xFF	; 255
    1060:	7f ef       	ldi	r23, 0xFF	; 255
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	bd df       	rcall	.-134    	; 0xfe2 <_Z41__static_initialization_and_destruction_0ii>
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <_Z12LCDPrintTempf>:

int rs = 22, en = 23, d4 = 24, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

void LCDPrintTemp(float temp)
{
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	00 d0       	rcall	.+0      	; 0x1074 <_Z12LCDPrintTempf+0x6>
    1074:	1f 92       	push	r1
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	69 83       	std	Y+1, r22	; 0x01
    107c:	7a 83       	std	Y+2, r23	; 0x02
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	9c 83       	std	Y+4, r25	; 0x04
	lcd.clear();
    1082:	8f e7       	ldi	r24, 0x7F	; 127
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <_ZN13LiquidCrystal5clearEv>
	lcd.print(F("Temperatur: "));
    108a:	8c e2       	ldi	r24, 0x2C	; 44
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	bc 01       	movw	r22, r24
    1090:	8f e7       	ldi	r24, 0x7F	; 127
    1092:	93 e0       	ldi	r25, 0x03	; 3
    1094:	0e 94 db 5c 	call	0xb9b6	; 0xb9b6 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.print(temp, 0);
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	ab 81       	ldd	r26, Y+3	; 0x03
    109e:	bc 81       	ldd	r27, Y+4	; 0x04
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	ac 01       	movw	r20, r24
    10a6:	bd 01       	movw	r22, r26
    10a8:	8f e7       	ldi	r24, 0x7F	; 127
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	0e 94 b4 5e 	call	0xbd68	; 0xbd68 <_ZN5Print5printEdi>
	lcd.print((char)223);
    10b0:	6f ed       	ldi	r22, 0xDF	; 223
    10b2:	8f e7       	ldi	r24, 0x7F	; 127
    10b4:	93 e0       	ldi	r25, 0x03	; 3
    10b6:	0e 94 00 5d 	call	0xba00	; 0xba00 <_ZN5Print5printEc>
}
    10ba:	00 00       	nop
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <_Z16LCDPrintHumidityf>:

void LCDPrintHumidity(float humid)
{
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <_Z16LCDPrintHumidityf+0x6>
    10d0:	1f 92       	push	r1
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	69 83       	std	Y+1, r22	; 0x01
    10d8:	7a 83       	std	Y+2, r23	; 0x02
    10da:	8b 83       	std	Y+3, r24	; 0x03
    10dc:	9c 83       	std	Y+4, r25	; 0x04
	lcd.clear();
    10de:	8f e7       	ldi	r24, 0x7F	; 127
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <_ZN13LiquidCrystal5clearEv>
	lcd.print(F("Humidity: "));
    10e6:	89 e3       	ldi	r24, 0x39	; 57
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	bc 01       	movw	r22, r24
    10ec:	8f e7       	ldi	r24, 0x7F	; 127
    10ee:	93 e0       	ldi	r25, 0x03	; 3
    10f0:	0e 94 db 5c 	call	0xb9b6	; 0xb9b6 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.print(humid, 0);
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	ab 81       	ldd	r26, Y+3	; 0x03
    10fa:	bc 81       	ldd	r27, Y+4	; 0x04
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	ac 01       	movw	r20, r24
    1102:	bd 01       	movw	r22, r26
    1104:	8f e7       	ldi	r24, 0x7F	; 127
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	0e 94 b4 5e 	call	0xbd68	; 0xbd68 <_ZN5Print5printEdi>
	lcd.print(F("%"));
    110c:	84 e4       	ldi	r24, 0x44	; 68
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	bc 01       	movw	r22, r24
    1112:	8f e7       	ldi	r24, 0x7F	; 127
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	0e 94 db 5c 	call	0xb9b6	; 0xb9b6 <_ZN5Print5printEPK19__FlashStringHelper>
}
    111a:	00 00       	nop
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <_Z19LCDPrintTimeAndDate11RTCDateTime>:


void LCDPrintTimeAndDate(RTCDateTime dt)
{
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	2c 97       	sbiw	r28, 0x0c	; 12
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	e9 82       	std	Y+1, r14	; 0x01
    1148:	fa 82       	std	Y+2, r15	; 0x02
    114a:	0b 83       	std	Y+3, r16	; 0x03
    114c:	1c 83       	std	Y+4, r17	; 0x04
    114e:	2d 83       	std	Y+5, r18	; 0x05
    1150:	3e 83       	std	Y+6, r19	; 0x06
    1152:	4f 83       	std	Y+7, r20	; 0x07
    1154:	58 87       	std	Y+8, r21	; 0x08
    1156:	69 87       	std	Y+9, r22	; 0x09
    1158:	7a 87       	std	Y+10, r23	; 0x0a
    115a:	8b 87       	std	Y+11, r24	; 0x0b
    115c:	9c 87       	std	Y+12, r25	; 0x0c
	lcd.clear();
    115e:	8f e7       	ldi	r24, 0x7F	; 127
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <_ZN13LiquidCrystal5clearEv>
	lcd.print(AddLeadingZero(dt.year));   lcd.print("-");
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <_Z14AddLeadingZeroi>
    116e:	4a e0       	ldi	r20, 0x0A	; 10
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	bc 01       	movw	r22, r24
    1174:	8f e7       	ldi	r24, 0x7F	; 127
    1176:	93 e0       	ldi	r25, 0x03	; 3
    1178:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <_ZN5Print5printEii>
    117c:	6f e3       	ldi	r22, 0x3F	; 63
    117e:	72 e0       	ldi	r23, 0x02	; 2
    1180:	8f e7       	ldi	r24, 0x7F	; 127
    1182:	93 e0       	ldi	r25, 0x03	; 3
    1184:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.month));  lcd.print("-");
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <_Z14AddLeadingZeroi>
    1192:	4a e0       	ldi	r20, 0x0A	; 10
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	bc 01       	movw	r22, r24
    1198:	8f e7       	ldi	r24, 0x7F	; 127
    119a:	93 e0       	ldi	r25, 0x03	; 3
    119c:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <_ZN5Print5printEii>
    11a0:	6f e3       	ldi	r22, 0x3F	; 63
    11a2:	72 e0       	ldi	r23, 0x02	; 2
    11a4:	8f e7       	ldi	r24, 0x7F	; 127
    11a6:	93 e0       	ldi	r25, 0x03	; 3
    11a8:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.day));    lcd.print(" ");
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <_Z14AddLeadingZeroi>
    11b6:	4a e0       	ldi	r20, 0x0A	; 10
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	bc 01       	movw	r22, r24
    11bc:	8f e7       	ldi	r24, 0x7F	; 127
    11be:	93 e0       	ldi	r25, 0x03	; 3
    11c0:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <_ZN5Print5printEii>
    11c4:	61 e4       	ldi	r22, 0x41	; 65
    11c6:	72 e0       	ldi	r23, 0x02	; 2
    11c8:	8f e7       	ldi	r24, 0x7F	; 127
    11ca:	93 e0       	ldi	r25, 0x03	; 3
    11cc:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <_ZN5Print5printEPKc>
	lcd.setCursor(0, 1);
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	8f e7       	ldi	r24, 0x7F	; 127
    11d6:	93 e0       	ldi	r25, 0x03	; 3
    11d8:	0e 94 ee 41 	call	0x83dc	; 0x83dc <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(AddLeadingZero(dt.hour));   lcd.print(":");
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <_Z14AddLeadingZeroi>
    11e6:	4a e0       	ldi	r20, 0x0A	; 10
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	bc 01       	movw	r22, r24
    11ec:	8f e7       	ldi	r24, 0x7F	; 127
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <_ZN5Print5printEii>
    11f4:	63 e4       	ldi	r22, 0x43	; 67
    11f6:	72 e0       	ldi	r23, 0x02	; 2
    11f8:	8f e7       	ldi	r24, 0x7F	; 127
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.minute)); lcd.print(":");
    1200:	8e 81       	ldd	r24, Y+6	; 0x06
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <_Z14AddLeadingZeroi>
    120a:	4a e0       	ldi	r20, 0x0A	; 10
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	bc 01       	movw	r22, r24
    1210:	8f e7       	ldi	r24, 0x7F	; 127
    1212:	93 e0       	ldi	r25, 0x03	; 3
    1214:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <_ZN5Print5printEii>
    1218:	63 e4       	ldi	r22, 0x43	; 67
    121a:	72 e0       	ldi	r23, 0x02	; 2
    121c:	8f e7       	ldi	r24, 0x7F	; 127
    121e:	93 e0       	ldi	r25, 0x03	; 3
    1220:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.second)); lcd.print("");
    1224:	8f 81       	ldd	r24, Y+7	; 0x07
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 5a 58 	call	0xb0b4	; 0xb0b4 <_Z14AddLeadingZeroi>
    122e:	4a e0       	ldi	r20, 0x0A	; 10
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	bc 01       	movw	r22, r24
    1234:	8f e7       	ldi	r24, 0x7F	; 127
    1236:	93 e0       	ldi	r25, 0x03	; 3
    1238:	0e 94 d7 5d 	call	0xbbae	; 0xbbae <_ZN5Print5printEii>
    123c:	65 e4       	ldi	r22, 0x45	; 69
    123e:	72 e0       	ldi	r23, 0x02	; 2
    1240:	8f e7       	ldi	r24, 0x7F	; 127
    1242:	93 e0       	ldi	r25, 0x03	; 3
    1244:	0e 94 ff 5c 	call	0xb9fe	; 0xb9fe <_ZN5Print5printEPKc>
}
    1248:	00 00       	nop
    124a:	2c 96       	adiw	r28, 0x0c	; 12
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	08 95       	ret

00001264 <_Z41__static_initialization_and_destruction_0ii>:
    1264:	cf 92       	push	r12
    1266:	ef 92       	push	r14
    1268:	0f 93       	push	r16
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	00 d0       	rcall	.+0      	; 0x1270 <_Z41__static_initialization_and_destruction_0ii+0xc>
    1270:	1f 92       	push	r1
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	7c 83       	std	Y+4, r23	; 0x04
    127c:	6b 83       	std	Y+3, r22	; 0x03
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	51 f5       	brne	.+84     	; 0x12da <_Z41__static_initialization_and_destruction_0ii+0x76>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	31 f5       	brne	.+76     	; 0x12da <_Z41__static_initialization_and_destruction_0ii+0x76>
#include "LCD.h"

int rs = 22, en = 23, d4 = 24, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
    128e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <d7>
    1292:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <d7+0x1>
    1296:	68 2f       	mov	r22, r24
    1298:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <d6>
    129c:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <d6+0x1>
    12a0:	58 2f       	mov	r21, r24
    12a2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <d5>
    12a6:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <d5+0x1>
    12aa:	48 2f       	mov	r20, r24
    12ac:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <d4>
    12b0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <d4+0x1>
    12b4:	28 2f       	mov	r18, r24
    12b6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <en>
    12ba:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <en+0x1>
    12be:	38 2f       	mov	r19, r24
    12c0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <rs>
    12c4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <rs+0x1>
    12c8:	c6 2e       	mov	r12, r22
    12ca:	e5 2e       	mov	r14, r21
    12cc:	04 2f       	mov	r16, r20
    12ce:	43 2f       	mov	r20, r19
    12d0:	68 2f       	mov	r22, r24
    12d2:	8f e7       	ldi	r24, 0x7F	; 127
    12d4:	93 e0       	ldi	r25, 0x03	; 3
    12d6:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <_ZN13LiquidCrystalC1Ehhhhhh>
	lcd.print(AddLeadingZero(dt.day));    lcd.print(" ");
	lcd.setCursor(0, 1);
	lcd.print(AddLeadingZero(dt.hour));   lcd.print(":");
	lcd.print(AddLeadingZero(dt.minute)); lcd.print(":");
	lcd.print(AddLeadingZero(dt.second)); lcd.print("");
}
    12da:	00 00       	nop
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	0f 91       	pop	r16
    12ea:	ef 90       	pop	r14
    12ec:	cf 90       	pop	r12
    12ee:	08 95       	ret

000012f0 <_GLOBAL__sub_I_rs>:
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	6f ef       	ldi	r22, 0xFF	; 255
    12fa:	7f ef       	ldi	r23, 0xFF	; 255
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	b1 df       	rcall	.-158    	; 0x1264 <_Z41__static_initialization_and_destruction_0ii>
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <_Z15ChangeRGBAnalogv>:
int R_brightness = 0;
int G_brightness = 0;
int B_brightness = 0;

void ChangeRGBAnalog()
{
    1308:	af 92       	push	r10
    130a:	bf 92       	push	r11
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	R_brightness = map(analogRead(A0), 0, 1023, 0, 255);
    1320:	86 e3       	ldi	r24, 0x36	; 54
    1322:	0e 94 d6 5f 	call	0xbfac	; 0xbfac <analogRead>
    1326:	09 2e       	mov	r0, r25
    1328:	00 0c       	add	r0, r0
    132a:	aa 0b       	sbc	r26, r26
    132c:	bb 0b       	sbc	r27, r27
    132e:	1f 92       	push	r1
    1330:	1f 92       	push	r1
    1332:	1f 92       	push	r1
    1334:	2f ef       	ldi	r18, 0xFF	; 255
    1336:	2f 93       	push	r18
    1338:	a1 2c       	mov	r10, r1
    133a:	b1 2c       	mov	r11, r1
    133c:	65 01       	movw	r12, r10
    133e:	ee 24       	eor	r14, r14
    1340:	ea 94       	dec	r14
    1342:	13 e0       	ldi	r17, 0x03	; 3
    1344:	f1 2e       	mov	r15, r17
    1346:	00 e0       	ldi	r16, 0x00	; 0
    1348:	10 e0       	ldi	r17, 0x00	; 0
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	a9 01       	movw	r20, r18
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 da 61 	call	0xc3b4	; 0xc3b4 <_Z3maplllll>
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <R_brightness+0x1>
    1368:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <R_brightness>
	G_brightness = map(analogRead(A1), 0, 1023, 0, 255);
    136c:	87 e3       	ldi	r24, 0x37	; 55
    136e:	0e 94 d6 5f 	call	0xbfac	; 0xbfac <analogRead>
    1372:	09 2e       	mov	r0, r25
    1374:	00 0c       	add	r0, r0
    1376:	aa 0b       	sbc	r26, r26
    1378:	bb 0b       	sbc	r27, r27
    137a:	1f 92       	push	r1
    137c:	1f 92       	push	r1
    137e:	1f 92       	push	r1
    1380:	2f ef       	ldi	r18, 0xFF	; 255
    1382:	2f 93       	push	r18
    1384:	a1 2c       	mov	r10, r1
    1386:	b1 2c       	mov	r11, r1
    1388:	65 01       	movw	r12, r10
    138a:	ee 24       	eor	r14, r14
    138c:	ea 94       	dec	r14
    138e:	13 e0       	ldi	r17, 0x03	; 3
    1390:	f1 2e       	mov	r15, r17
    1392:	00 e0       	ldi	r16, 0x00	; 0
    1394:	10 e0       	ldi	r17, 0x00	; 0
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	0e 94 da 61 	call	0xc3b4	; 0xc3b4 <_Z3maplllll>
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <G_brightness+0x1>
    13b4:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <G_brightness>
	B_brightness = map(analogRead(A2), 0, 1023, 0, 255);
    13b8:	88 e3       	ldi	r24, 0x38	; 56
    13ba:	0e 94 d6 5f 	call	0xbfac	; 0xbfac <analogRead>
    13be:	09 2e       	mov	r0, r25
    13c0:	00 0c       	add	r0, r0
    13c2:	aa 0b       	sbc	r26, r26
    13c4:	bb 0b       	sbc	r27, r27
    13c6:	1f 92       	push	r1
    13c8:	1f 92       	push	r1
    13ca:	1f 92       	push	r1
    13cc:	2f ef       	ldi	r18, 0xFF	; 255
    13ce:	2f 93       	push	r18
    13d0:	a1 2c       	mov	r10, r1
    13d2:	b1 2c       	mov	r11, r1
    13d4:	65 01       	movw	r12, r10
    13d6:	ee 24       	eor	r14, r14
    13d8:	ea 94       	dec	r14
    13da:	13 e0       	ldi	r17, 0x03	; 3
    13dc:	f1 2e       	mov	r15, r17
    13de:	00 e0       	ldi	r16, 0x00	; 0
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	a9 01       	movw	r20, r18
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 da 61 	call	0xc3b4	; 0xc3b4 <_Z3maplllll>
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <B_brightness+0x1>
    1400:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <B_brightness>
	
	analogWrite(RedRGB, R_brightness);
    1404:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <R_brightness>
    1408:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <R_brightness+0x1>
    140c:	bc 01       	movw	r22, r24
    140e:	8a e2       	ldi	r24, 0x2A	; 42
    1410:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <analogWrite>
	analogWrite(GreenRGB, G_brightness);
    1414:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <G_brightness>
    1418:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <G_brightness+0x1>
    141c:	bc 01       	movw	r22, r24
    141e:	8b e2       	ldi	r24, 0x2B	; 43
    1420:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <analogWrite>
	analogWrite(BlueRGB, B_brightness);
    1424:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <B_brightness>
    1428:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <B_brightness+0x1>
    142c:	bc 01       	movw	r22, r24
    142e:	8c e2       	ldi	r24, 0x2C	; 44
    1430:	0e 94 fb 5f 	call	0xbff6	; 0xbff6 <analogWrite>
	
}
    1434:	00 00       	nop
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	cf 90       	pop	r12
    1446:	bf 90       	pop	r11
    1448:	af 90       	pop	r10
    144a:	08 95       	ret

0000144c <_Z12TurnOnRedLEDv>:


void TurnOnRedLED()
{
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(RedLED, HIGH);
    1454:	61 e0       	ldi	r22, 0x01	; 1
    1456:	89 e0       	ldi	r24, 0x09	; 9
    1458:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
}
    145c:	00 00       	nop
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <_Z14TurnOnGreenLEDv>:

void TurnOnGreenLED()
{
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(GreenLED, HIGH);
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	87 e0       	ldi	r24, 0x07	; 7
    1470:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
}
    1474:	00 00       	nop
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <_Z13TurnOnBlueLEDv>:

void TurnOnBlueLED()
{
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(BlueLED, HIGH);
    1484:	61 e0       	ldi	r22, 0x01	; 1
    1486:	88 e0       	ldi	r24, 0x08	; 8
    1488:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
}
    148c:	00 00       	nop
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <_Z13TurnOFFRedLEDv>:

void TurnOFFRedLED()
{
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(RedLED, LOW);
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	89 e0       	ldi	r24, 0x09	; 9
    14a0:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
}
    14a4:	00 00       	nop
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <_Z15TurnOFFGreenLEDv>:

void TurnOFFGreenLED()
{
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(GreenLED, LOW);
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	87 e0       	ldi	r24, 0x07	; 7
    14b8:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
}
    14bc:	00 00       	nop
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <_Z14TurnOFFBlueLEDv>:

void TurnOFFBlueLED()
{
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(BlueLED, LOW);
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	88 e0       	ldi	r24, 0x08	; 8
    14d0:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    14d4:	00 00       	nop
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <_ZN14HardwareSerial5beginEm+0x6>
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <_ZN14HardwareSerial5beginEm+0x8>
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	4b 83       	std	Y+3, r20	; 0x03
    14ee:	5c 83       	std	Y+4, r21	; 0x04
    14f0:	6d 83       	std	Y+5, r22	; 0x05
    14f2:	7e 83       	std	Y+6, r23	; 0x06
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	ad 81       	ldd	r26, Y+5	; 0x05
    14fa:	be 81       	ldd	r27, Y+6	; 0x06
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	26 e0       	ldi	r18, 0x06	; 6
    1502:	ac 01       	movw	r20, r24
    1504:	bd 01       	movw	r22, r26
    1506:	cf 01       	movw	r24, r30
    1508:	0e 94 95 5b 	call	0xb72a	; 0xb72a <_ZN14HardwareSerial5beginEmh>
    150c:	00 00       	nop
    150e:	26 96       	adiw	r28, 0x06	; 6
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <setup>:
long intervalDate = 1000;
long intervalwelcome = 5000;
DS3231 clock;

void setup()
{
    1520:	0f 93       	push	r16
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	2e 97       	sbiw	r28, 0x0e	; 14
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
	#pragma region Begins
	Serial.begin(9600);
    1536:	40 e8       	ldi	r20, 0x80	; 128
    1538:	55 e2       	ldi	r21, 0x25	; 37
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	81 ed       	ldi	r24, 0xD1	; 209
    1540:	95 e0       	ldi	r25, 0x05	; 5
    1542:	cc df       	rcall	.-104    	; 0x14dc <_ZN14HardwareSerial5beginEm>
	SPI.begin();
    1544:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <_ZN8SPIClass5beginEv>
	mfrc522.PCD_Init();
    1548:	83 e5       	ldi	r24, 0x53	; 83
    154a:	94 e0       	ldi	r25, 0x04	; 4
    154c:	0e 94 91 45 	call	0x8b22	; 0x8b22 <_ZN7MFRC5228PCD_InitEv>
	dht.begin();
    1550:	67 e3       	ldi	r22, 0x37	; 55
    1552:	86 e6       	ldi	r24, 0x66	; 102
    1554:	93 e0       	ldi	r25, 0x03	; 3
    1556:	0e 94 4d 30 	call	0x609a	; 0x609a <_ZN3DHT5beginEh>
	lcd.begin(16, 2);
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	42 e0       	ldi	r20, 0x02	; 2
    155e:	60 e1       	ldi	r22, 0x10	; 16
    1560:	8f e7       	ldi	r24, 0x7F	; 127
    1562:	93 e0       	ldi	r25, 0x03	; 3
    1564:	0e 94 7f 40 	call	0x80fe	; 0x80fe <_ZN13LiquidCrystal5beginEhhh>
	clock.begin();
    1568:	83 ea       	ldi	r24, 0xA3	; 163
    156a:	93 e0       	ldi	r25, 0x03	; 3
    156c:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <_ZN6DS32315beginEv>
    1570:	8a e0       	ldi	r24, 0x0A	; 10
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a0 e0       	ldi	r26, 0x00	; 0
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	ab 83       	std	Y+3, r26	; 0x03
    157e:	bc 83       	std	Y+4, r27	; 0x04
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    1580:	81 e8       	ldi	r24, 0x81	; 129
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	20 e1       	ldi	r18, 0x10	; 16
    1586:	fc 01       	movw	r30, r24
    1588:	20 83       	st	Z, r18
	TCCR1A = 0;                 // clear control register A 
    158a:	80 e8       	ldi	r24, 0x80	; 128
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	fc 01       	movw	r30, r24
    1590:	10 82       	st	Z, r1
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	ab 81       	ldd	r26, Y+3	; 0x03
    15a0:	bc 81       	ldd	r27, Y+4	; 0x04
    15a2:	8f 83       	std	Y+7, r24	; 0x07
    15a4:	98 87       	std	Y+8, r25	; 0x08
    15a6:	a9 87       	std	Y+9, r26	; 0x09
    15a8:	ba 87       	std	Y+10, r27	; 0x0a
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
    15aa:	8f 81       	ldd	r24, Y+7	; 0x07
    15ac:	98 85       	ldd	r25, Y+8	; 0x08
    15ae:	a9 85       	ldd	r26, Y+9	; 0x09
    15b0:	ba 85       	ldd	r27, Y+10	; 0x0a
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	aa 1f       	adc	r26, r26
    15b8:	bb 1f       	adc	r27, r27
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	aa 1f       	adc	r26, r26
    15c0:	bb 1f       	adc	r27, r27
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	aa 1f       	adc	r26, r26
    15c8:	bb 1f       	adc	r27, r27
    15ca:	8b 87       	std	Y+11, r24	; 0x0b
    15cc:	9c 87       	std	Y+12, r25	; 0x0c
    15ce:	ad 87       	std	Y+13, r26	; 0x0d
    15d0:	be 87       	std	Y+14, r27	; 0x0e
	if (cycles < TIMER1_RESOLUTION) {
    15d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15d6:	ad 85       	ldd	r26, Y+13	; 0x0d
    15d8:	be 85       	ldd	r27, Y+14	; 0x0e
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	a1 40       	sbci	r26, 0x01	; 1
    15de:	b1 05       	cpc	r27, r1
    15e0:	50 f4       	brcc	.+20     	; 0x15f6 <setup+0xd6>
		clockSelectBits = _BV(CS10);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles;
    15e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ec:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    15f0:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    15f4:	76 c0       	rjmp	.+236    	; 0x16e2 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 8) {
    15f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15fa:	ad 85       	ldd	r26, Y+13	; 0x0d
    15fc:	be 85       	ldd	r27, Y+14	; 0x0e
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	a8 40       	sbci	r26, 0x08	; 8
    1602:	b1 05       	cpc	r27, r1
    1604:	a0 f4       	brcc	.+40     	; 0x162e <setup+0x10e>
		clockSelectBits = _BV(CS11);
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 8;
    160c:	8b 85       	ldd	r24, Y+11	; 0x0b
    160e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1610:	ad 85       	ldd	r26, Y+13	; 0x0d
    1612:	be 85       	ldd	r27, Y+14	; 0x0e
    1614:	68 94       	set
    1616:	12 f8       	bld	r1, 2
    1618:	b6 95       	lsr	r27
    161a:	a7 95       	ror	r26
    161c:	97 95       	ror	r25
    161e:	87 95       	ror	r24
    1620:	16 94       	lsr	r1
    1622:	d1 f7       	brne	.-12     	; 0x1618 <setup+0xf8>
    1624:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    1628:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    162c:	5a c0       	rjmp	.+180    	; 0x16e2 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
    162e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1630:	9c 85       	ldd	r25, Y+12	; 0x0c
    1632:	ad 85       	ldd	r26, Y+13	; 0x0d
    1634:	be 85       	ldd	r27, Y+14	; 0x0e
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	a0 44       	sbci	r26, 0x40	; 64
    163a:	b1 05       	cpc	r27, r1
    163c:	a0 f4       	brcc	.+40     	; 0x1666 <setup+0x146>
		clockSelectBits = _BV(CS11) | _BV(CS10);
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 64;
    1644:	8b 85       	ldd	r24, Y+11	; 0x0b
    1646:	9c 85       	ldd	r25, Y+12	; 0x0c
    1648:	ad 85       	ldd	r26, Y+13	; 0x0d
    164a:	be 85       	ldd	r27, Y+14	; 0x0e
    164c:	68 94       	set
    164e:	15 f8       	bld	r1, 5
    1650:	b6 95       	lsr	r27
    1652:	a7 95       	ror	r26
    1654:	97 95       	ror	r25
    1656:	87 95       	ror	r24
    1658:	16 94       	lsr	r1
    165a:	d1 f7       	brne	.-12     	; 0x1650 <setup+0x130>
    165c:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    1660:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    1664:	3e c0       	rjmp	.+124    	; 0x16e2 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 256) {
    1666:	8b 85       	ldd	r24, Y+11	; 0x0b
    1668:	9c 85       	ldd	r25, Y+12	; 0x0c
    166a:	ad 85       	ldd	r26, Y+13	; 0x0d
    166c:	be 85       	ldd	r27, Y+14	; 0x0e
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	a1 05       	cpc	r26, r1
    1672:	b1 40       	sbci	r27, 0x01	; 1
    1674:	80 f4       	brcc	.+32     	; 0x1696 <setup+0x176>
		clockSelectBits = _BV(CS12);
    1676:	84 e0       	ldi	r24, 0x04	; 4
    1678:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 256;
    167c:	8b 85       	ldd	r24, Y+11	; 0x0b
    167e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1680:	ad 85       	ldd	r26, Y+13	; 0x0d
    1682:	be 85       	ldd	r27, Y+14	; 0x0e
    1684:	89 2f       	mov	r24, r25
    1686:	9a 2f       	mov	r25, r26
    1688:	ab 2f       	mov	r26, r27
    168a:	bb 27       	eor	r27, r27
    168c:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    1690:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    1694:	26 c0       	rjmp	.+76     	; 0x16e2 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 1024) {
    1696:	8b 85       	ldd	r24, Y+11	; 0x0b
    1698:	9c 85       	ldd	r25, Y+12	; 0x0c
    169a:	ad 85       	ldd	r26, Y+13	; 0x0d
    169c:	be 85       	ldd	r27, Y+14	; 0x0e
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	a1 05       	cpc	r26, r1
    16a2:	b4 40       	sbci	r27, 0x04	; 4
    16a4:	a8 f4       	brcc	.+42     	; 0x16d0 <setup+0x1b0>
		clockSelectBits = _BV(CS12) | _BV(CS10);
    16a6:	85 e0       	ldi	r24, 0x05	; 5
    16a8:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 1024;
    16ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    16b0:	ad 85       	ldd	r26, Y+13	; 0x0d
    16b2:	be 85       	ldd	r27, Y+14	; 0x0e
    16b4:	07 2e       	mov	r0, r23
    16b6:	7a e0       	ldi	r23, 0x0A	; 10
    16b8:	b6 95       	lsr	r27
    16ba:	a7 95       	ror	r26
    16bc:	97 95       	ror	r25
    16be:	87 95       	ror	r24
    16c0:	7a 95       	dec	r23
    16c2:	d1 f7       	brne	.-12     	; 0x16b8 <setup+0x198>
    16c4:	70 2d       	mov	r23, r0
    16c6:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    16ca:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <setup+0x1c2>
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
    16d0:	85 e0       	ldi	r24, 0x05	; 5
    16d2:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = TIMER1_RESOLUTION - 1;
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	9f ef       	ldi	r25, 0xFF	; 255
    16da:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    16de:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
	}
	ICR1 = pwmPeriod;
    16e2:	86 e8       	ldi	r24, 0x86	; 134
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    16ea:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    16ee:	fc 01       	movw	r30, r24
    16f0:	31 83       	std	Z+1, r19	; 0x01
    16f2:	20 83       	st	Z, r18
	TCCR1B = _BV(WGM13) | clockSelectBits;
    16f4:	81 e8       	ldi	r24, 0x81	; 129
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
    16fc:	20 61       	ori	r18, 0x10	; 16
    16fe:	fc 01       	movw	r30, r24
    1700:	20 83       	st	Z, r18
	Timer1.initialize(10);
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
    1702:	01 e0       	ldi	r16, 0x01	; 1
    1704:	21 e0       	ldi	r18, 0x01	; 1
    1706:	4c e3       	ldi	r20, 0x3C	; 60
    1708:	62 e0       	ldi	r22, 0x02	; 2
    170a:	8f ea       	ldi	r24, 0xAF	; 175
    170c:	93 e0       	ldi	r25, 0x03	; 3
    170e:	0e 94 b3 23 	call	0x4766	; 0x4766 <_ZN16Adafruit_SSD13065beginEhhbb>
    1712:	98 2f       	mov	r25, r24
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 27       	eor	r24, r25
    1718:	88 23       	and	r24, r24
    171a:	41 f0       	breq	.+16     	; 0x172c <setup+0x20c>
	{ // Address for 128x64
		Serial.println(F("SSD1306 allocation failed"));
    171c:	86 e4       	ldi	r24, 0x46	; 70
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	bc 01       	movw	r22, r24
    1722:	81 ed       	ldi	r24, 0xD1	; 209
    1724:	95 e0       	ldi	r25, 0x05	; 5
    1726:	0e 94 0a 5d 	call	0xba14	; 0xba14 <_ZN5Print7printlnEPK19__FlashStringHelper>
		for(;;); // Don't proceed, loop forever
    172a:	ff cf       	rjmp	.-2      	; 0x172a <setup+0x20a>
	}
	#pragma endregion Begins
	
	#pragma region PinMode
	pinMode(RedRGB, OUTPUT);
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	8a e2       	ldi	r24, 0x2A	; 42
    1730:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
	pinMode(GreenRGB, OUTPUT);
    1734:	61 e0       	ldi	r22, 0x01	; 1
    1736:	8b e2       	ldi	r24, 0x2B	; 43
    1738:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
	pinMode(BlueRGB, OUTPUT);
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	8c e2       	ldi	r24, 0x2C	; 44
    1740:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
	pinMode(RedLED, OUTPUT);
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	89 e0       	ldi	r24, 0x09	; 9
    1748:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
	pinMode(GreenLED, OUTPUT);
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	87 e0       	ldi	r24, 0x07	; 7
    1750:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
	pinMode(BlueLED, OUTPUT);
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	88 e0       	ldi	r24, 0x08	; 8
    1758:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
	pinMode(trigPin, OUTPUT);
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
	pinMode(echoPin, INPUT);
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	84 e0       	ldi	r24, 0x04	; 4
    1768:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
	myservo.attach(servopin);
    176c:	6a e0       	ldi	r22, 0x0A	; 10
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	83 e6       	ldi	r24, 0x63	; 99
    1772:	94 e0       	ldi	r25, 0x04	; 4
    1774:	0e 94 67 4e 	call	0x9cce	; 0x9cce <_ZN5Servo6attachEi>
	#pragma endregion PinMode
	
	display.clearDisplay();
    1778:	8f ea       	ldi	r24, 0xAF	; 175
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN16Adafruit_SSD130612clearDisplayEv>
	lcd.clear();
    1780:	8f e7       	ldi	r24, 0x7F	; 127
    1782:	93 e0       	ldi	r25, 0x03	; 3
    1784:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <_ZN13LiquidCrystal5clearEv>
	
}
    1788:	00 00       	nop
    178a:	2e 96       	adiw	r28, 0x0e	; 14
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <loop>:

void loop()
{
    179e:	ef 92       	push	r14
    17a0:	ff 92       	push	r15
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	6f 97       	sbiw	r28, 0x1f	; 31
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
	if (Keycard)
    17ba:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <Keycard>
    17be:	88 23       	and	r24, r24
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <loop+0x26>
    17c2:	af c0       	rjmp	.+350    	; 0x1922 <loop+0x184>
	{
		unsigned long currentMillis = millis();
    17c4:	0e 94 ff 5e 	call	0xbdfe	; 0xbdfe <millis>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	ab 83       	std	Y+3, r26	; 0x03
    17d2:	bc 83       	std	Y+4, r27	; 0x04
		if (currentMillis - previousMillis > intervalwelcome)
    17d4:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <previousMillis>
    17d8:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <previousMillis+0x1>
    17dc:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <previousMillis+0x2>
    17e0:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <previousMillis+0x3>
    17e4:	9c 01       	movw	r18, r24
    17e6:	ad 01       	movw	r20, r26
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	9a 81       	ldd	r25, Y+2	; 0x02
    17ec:	ab 81       	ldd	r26, Y+3	; 0x03
    17ee:	bc 81       	ldd	r27, Y+4	; 0x04
    17f0:	82 1b       	sub	r24, r18
    17f2:	93 0b       	sbc	r25, r19
    17f4:	a4 0b       	sbc	r26, r20
    17f6:	b5 0b       	sbc	r27, r21
    17f8:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <intervalwelcome>
    17fc:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <intervalwelcome+0x1>
    1800:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <intervalwelcome+0x2>
    1804:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <intervalwelcome+0x3>
    1808:	28 17       	cp	r18, r24
    180a:	39 07       	cpc	r19, r25
    180c:	4a 07       	cpc	r20, r26
    180e:	5b 07       	cpc	r21, r27
    1810:	70 f4       	brcc	.+28     	; 0x182e <loop+0x90>
		{
			WelcomeOLED();
    1812:	dc d1       	rcall	.+952    	; 0x1bcc <_Z11WelcomeOLEDv>
			previousMillis = currentMillis;
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	ab 81       	ldd	r26, Y+3	; 0x03
    181a:	bc 81       	ldd	r27, Y+4	; 0x04
    181c:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <previousMillis>
    1820:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <previousMillis+0x1>
    1824:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <previousMillis+0x2>
    1828:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <previousMillis+0x3>
    182c:	7a c0       	rjmp	.+244    	; 0x1922 <loop+0x184>
		}
		else if (currentMillis - previousMillis < intervalwelcome)
    182e:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <previousMillis>
    1832:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <previousMillis+0x1>
    1836:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <previousMillis+0x2>
    183a:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <previousMillis+0x3>
    183e:	9c 01       	movw	r18, r24
    1840:	ad 01       	movw	r20, r26
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	ab 81       	ldd	r26, Y+3	; 0x03
    1848:	bc 81       	ldd	r27, Y+4	; 0x04
    184a:	82 1b       	sub	r24, r18
    184c:	93 0b       	sbc	r25, r19
    184e:	a4 0b       	sbc	r26, r20
    1850:	b5 0b       	sbc	r27, r21
    1852:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <intervalwelcome>
    1856:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <intervalwelcome+0x1>
    185a:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <intervalwelcome+0x2>
    185e:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <intervalwelcome+0x3>
    1862:	82 17       	cp	r24, r18
    1864:	93 07       	cpc	r25, r19
    1866:	a4 07       	cpc	r26, r20
    1868:	b5 07       	cpc	r27, r21
    186a:	08 f0       	brcs	.+2      	; 0x186e <loop+0xd0>
		{
			DisplayMenu();
    186c:	5a c0       	rjmp	.+180    	; 0x1922 <loop+0x184>
    186e:	ed d0       	rcall	.+474    	; 0x1a4a <_Z11DisplayMenuv>
			char key = keypad.getKey();
    1870:	8f ee       	ldi	r24, 0xEF	; 239
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <_ZN6Keypad6getKeyEv>
    1878:	8d 83       	std	Y+5, r24	; 0x05
			if (key != NO_KEY){
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	88 23       	and	r24, r24
    187e:	49 f0       	breq	.+18     	; 0x1892 <loop+0xf4>
				Serial.println(key);
    1880:	6d 81       	ldd	r22, Y+5	; 0x05
    1882:	81 ed       	ldi	r24, 0xD1	; 209
    1884:	95 e0       	ldi	r25, 0x05	; 5
    1886:	0e 94 2a 5d 	call	0xba54	; 0xba54 <_ZN5Print7printlnEc>
				Menu(key, &TimeAndDate);
    188a:	6e e9       	ldi	r22, 0x9E	; 158
    188c:	73 e0       	ldi	r23, 0x03	; 3
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	2e d1       	rcall	.+604    	; 0x1aee <_Z4MenucPb>
			}
			
			if (currentMillis - previousMillis >= intervalDate && TimeAndDate )
    1892:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <previousMillis>
    1896:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <previousMillis+0x1>
    189a:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <previousMillis+0x2>
    189e:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <previousMillis+0x3>
    18a2:	9c 01       	movw	r18, r24
    18a4:	ad 01       	movw	r20, r26
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	ab 81       	ldd	r26, Y+3	; 0x03
    18ac:	bc 81       	ldd	r27, Y+4	; 0x04
    18ae:	82 1b       	sub	r24, r18
    18b0:	93 0b       	sbc	r25, r19
    18b2:	a4 0b       	sbc	r26, r20
    18b4:	b5 0b       	sbc	r27, r21
    18b6:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <intervalDate>
    18ba:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <intervalDate+0x1>
    18be:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <intervalDate+0x2>
    18c2:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <intervalDate+0x3>
    18c6:	82 17       	cp	r24, r18
    18c8:	93 07       	cpc	r25, r19
    18ca:	a4 07       	cpc	r26, r20
    18cc:	b5 07       	cpc	r27, r21
    18ce:	08 f1       	brcs	.+66     	; 0x1912 <loop+0x174>
    18d0:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <TimeAndDate>
    18d4:	88 23       	and	r24, r24
    18d6:	e9 f0       	breq	.+58     	; 0x1912 <loop+0x174>
			{
				RTCDateTime dt = GetDateTime();
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 96       	adiw	r24, 0x0e	; 14
    18dc:	0e 94 45 58 	call	0xb08a	; 0xb08a <_Z11GetDateTimev>
				LCDPrintTimeAndDate(dt);
    18e0:	ee 84       	ldd	r14, Y+14	; 0x0e
    18e2:	ff 84       	ldd	r15, Y+15	; 0x0f
    18e4:	08 89       	ldd	r16, Y+16	; 0x10
    18e6:	19 89       	ldd	r17, Y+17	; 0x11
    18e8:	2a 89       	ldd	r18, Y+18	; 0x12
    18ea:	3b 89       	ldd	r19, Y+19	; 0x13
    18ec:	4c 89       	ldd	r20, Y+20	; 0x14
    18ee:	5d 89       	ldd	r21, Y+21	; 0x15
    18f0:	6e 89       	ldd	r22, Y+22	; 0x16
    18f2:	7f 89       	ldd	r23, Y+23	; 0x17
    18f4:	88 8d       	ldd	r24, Y+24	; 0x18
    18f6:	99 8d       	ldd	r25, Y+25	; 0x19
    18f8:	18 dc       	rcall	.-2000   	; 0x112a <_Z19LCDPrintTimeAndDate11RTCDateTime>
				previousMillis = currentMillis;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1900:	bc 81       	ldd	r27, Y+4	; 0x04
    1902:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <previousMillis>
    1906:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <previousMillis+0x1>
    190a:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <previousMillis+0x2>
			}
			ChangeRGBAnalog();
    190e:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <previousMillis+0x3>
			TjekTempInHous();
    1912:	fa dc       	rcall	.-1548   	; 0x1308 <_Z15ChangeRGBAnalogv>
			unsigned int distance = GetDistance();
    1914:	5f da       	rcall	.-2882   	; 0xdd4 <_Z14TjekTempInHousv>
    1916:	4a db       	rcall	.-2412   	; 0xfac <_Z11GetDistancev>
    1918:	9f 83       	std	Y+7, r25	; 0x07
    191a:	8e 83       	std	Y+6, r24	; 0x06
			SetServo(distance);
    191c:	8e 81       	ldd	r24, Y+6	; 0x06
    191e:	9f 81       	ldd	r25, Y+7	; 0x07
    1920:	4f d5       	rcall	.+2718   	; 0x23c0 <_Z8SetServoi>
    1922:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <Keycard>
		}

	}
	if (!Keycard)
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	89 27       	eor	r24, r25
    192a:	88 23       	and	r24, r24
    192c:	d1 f1       	breq	.+116    	; 0x19a2 <loop+0x204>
    192e:	83 e5       	ldi	r24, 0x53	; 83
	{
		if ( !mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() )
    1930:	94 e0       	ldi	r25, 0x04	; 4
    1932:	0e 94 c8 4a 	call	0x9590	; 0x9590 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
    1936:	98 2f       	mov	r25, r24
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	89 27       	eor	r24, r25
    193c:	88 23       	and	r24, r24
    193e:	49 f4       	brne	.+18     	; 0x1952 <loop+0x1b4>
    1940:	83 e5       	ldi	r24, 0x53	; 83
    1942:	94 e0       	ldi	r25, 0x04	; 4
    1944:	0e 94 fe 4a 	call	0x95fc	; 0x95fc <_ZN7MFRC52219PICC_ReadCardSerialEv>
    1948:	98 2f       	mov	r25, r24
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	89 27       	eor	r24, r25
    194e:	88 23       	and	r24, r24
    1950:	11 f0       	breq	.+4      	; 0x1956 <loop+0x1b8>
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <loop+0x1ba>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	88 23       	and	r24, r24
    195a:	39 f0       	breq	.+14     	; 0x196a <loop+0x1cc>
    195c:	62 e3       	ldi	r22, 0x32	; 50
		{
			delay(50);
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 30 5f 	call	0xbe60	; 0xbe60 <delay>
    1968:	1c c0       	rjmp	.+56     	; 0x19a2 <loop+0x204>
			return;
		}
		String UID = ReadUID();
    196a:	ce 01       	movw	r24, r28
    196c:	4a 96       	adiw	r24, 0x1a	; 26
    196e:	51 d4       	rcall	.+2210   	; 0x2212 <_Z7ReadUIDv>
    1970:	9e 01       	movw	r18, r28
		CheckKeyCard(UID, &Keycard);
    1972:	26 5e       	subi	r18, 0xE6	; 230
    1974:	3f 4f       	sbci	r19, 0xFF	; 255
    1976:	ce 01       	movw	r24, r28
    1978:	08 96       	adiw	r24, 0x08	; 8
    197a:	b9 01       	movw	r22, r18
    197c:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZN6StringC1ERKS_>
    1980:	ce 01       	movw	r24, r28
    1982:	08 96       	adiw	r24, 0x08	; 8
    1984:	6d e9       	ldi	r22, 0x9D	; 157
    1986:	73 e0       	ldi	r23, 0x03	; 3
    1988:	9b d4       	rcall	.+2358   	; 0x22c0 <_Z12CheckKeyCard6StringPb>
    198a:	ce 01       	movw	r24, r28
    198c:	08 96       	adiw	r24, 0x08	; 8
    198e:	0e 94 19 62 	call	0xc432	; 0xc432 <_ZN6StringD1Ev>
    1992:	8f ea       	ldi	r24, 0xAF	; 175
		display.clearDisplay();
    1994:	93 e0       	ldi	r25, 0x03	; 3
    1996:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN16Adafruit_SSD130612clearDisplayEv>
    199a:	ce 01       	movw	r24, r28
		if ( !mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() )
		{
			delay(50);
			return;
		}
		String UID = ReadUID();
    199c:	4a 96       	adiw	r24, 0x1a	; 26
    199e:	0e 94 19 62 	call	0xc432	; 0xc432 <_ZN6StringD1Ev>
    19a2:	6f 96       	adiw	r28, 0x1f	; 31
		CheckKeyCard(UID, &Keycard);
		display.clearDisplay();
	}
}
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	08 95       	ret

000019bc <_ZN12Adafruit_GFX9setCursorEii>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <_ZN12Adafruit_GFX9setCursorEii+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <_ZN12Adafruit_GFX9setCursorEii+0x8>
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	7c 83       	std	Y+4, r23	; 0x04
    19ce:	6b 83       	std	Y+3, r22	; 0x03
    19d0:	5e 83       	std	Y+6, r21	; 0x06
    19d2:	4d 83       	std	Y+5, r20	; 0x05
    cursor_x = x;
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	2b 81       	ldd	r18, Y+3	; 0x03
    19da:	3c 81       	ldd	r19, Y+4	; 0x04
    19dc:	fc 01       	movw	r30, r24
    19de:	35 87       	std	Z+13, r19	; 0x0d
    19e0:	24 87       	std	Z+12, r18	; 0x0c
    cursor_y = y;
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	2d 81       	ldd	r18, Y+5	; 0x05
    19e8:	3e 81       	ldd	r19, Y+6	; 0x06
    19ea:	fc 01       	movw	r30, r24
    19ec:	37 87       	std	Z+15, r19	; 0x0f
    19ee:	26 87       	std	Z+14, r18	; 0x0e
  }
    19f0:	00 00       	nop
    19f2:	26 96       	adiw	r28, 0x06	; 6
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	08 95       	ret

00001a04 <_ZN12Adafruit_GFX12setTextColorEj>:
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <_ZN12Adafruit_GFX12setTextColorEj+0x6>
    1a0a:	1f 92       	push	r1
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	7c 83       	std	Y+4, r23	; 0x04
    1a16:	6b 83       	std	Y+3, r22	; 0x03
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a20:	fc 01       	movw	r30, r24
    1a22:	33 8b       	std	Z+19, r19	; 0x13
    1a24:	22 8b       	std	Z+18, r18	; 0x12
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	22 89       	ldd	r18, Z+18	; 0x12
    1a2e:	33 89       	ldd	r19, Z+19	; 0x13
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	fc 01       	movw	r30, r24
    1a36:	31 8b       	std	Z+17, r19	; 0x11
    1a38:	20 8b       	std	Z+16, r18	; 0x10
    1a3a:	00 00       	nop
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <_Z11DisplayMenuv>:
byte colPins[cols] = {36, 37, 38, 39}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );


void DisplayMenu()
{
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
	display.clearDisplay();
    1a52:	8f ea       	ldi	r24, 0xAF	; 175
    1a54:	93 e0       	ldi	r25, 0x03	; 3
    1a56:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN16Adafruit_SSD130612clearDisplayEv>

	display.setTextSize(1);
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	8f ea       	ldi	r24, 0xAF	; 175
    1a5e:	93 e0       	ldi	r25, 0x03	; 3
    1a60:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <_ZN12Adafruit_GFX11setTextSizeEh>
	display.setTextColor(WHITE);
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	8f ea       	ldi	r24, 0xAF	; 175
    1a6a:	93 e0       	ldi	r25, 0x03	; 3
    1a6c:	cb df       	rcall	.-106    	; 0x1a04 <_ZN12Adafruit_GFX12setTextColorEj>
	display.setCursor(0,0);
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	8f ea       	ldi	r24, 0xAF	; 175
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	a0 df       	rcall	.-192    	; 0x19bc <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("Menu"));
    1a7c:	80 e6       	ldi	r24, 0x60	; 96
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	bc 01       	movw	r22, r24
    1a82:	8f ea       	ldi	r24, 0xAF	; 175
    1a84:	93 e0       	ldi	r25, 0x03	; 3
    1a86:	0e 94 0a 5d 	call	0xba14	; 0xba14 <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,10);
    1a8a:	4a e0       	ldi	r20, 0x0A	; 10
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	8f ea       	ldi	r24, 0xAF	; 175
    1a94:	93 e0       	ldi	r25, 0x03	; 3
    1a96:	92 df       	rcall	.-220    	; 0x19bc <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("A: Time and Date"));
    1a98:	85 e6       	ldi	r24, 0x65	; 101
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	8f ea       	ldi	r24, 0xAF	; 175
    1aa0:	93 e0       	ldi	r25, 0x03	; 3
    1aa2:	0e 94 0a 5d 	call	0xba14	; 0xba14 <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,20);
    1aa6:	44 e1       	ldi	r20, 0x14	; 20
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	8f ea       	ldi	r24, 0xAF	; 175
    1ab0:	93 e0       	ldi	r25, 0x03	; 3
    1ab2:	84 df       	rcall	.-248    	; 0x19bc <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("B: Tempreture"));
    1ab4:	86 e7       	ldi	r24, 0x76	; 118
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	bc 01       	movw	r22, r24
    1aba:	8f ea       	ldi	r24, 0xAF	; 175
    1abc:	93 e0       	ldi	r25, 0x03	; 3
    1abe:	0e 94 0a 5d 	call	0xba14	; 0xba14 <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,30);
    1ac2:	4e e1       	ldi	r20, 0x1E	; 30
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	8f ea       	ldi	r24, 0xAF	; 175
    1acc:	93 e0       	ldi	r25, 0x03	; 3
    1ace:	76 df       	rcall	.-276    	; 0x19bc <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("C: Humidity"));
    1ad0:	84 e8       	ldi	r24, 0x84	; 132
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	8f ea       	ldi	r24, 0xAF	; 175
    1ad8:	93 e0       	ldi	r25, 0x03	; 3
    1ada:	0e 94 0a 5d 	call	0xba14	; 0xba14 <_ZN5Print7printlnEPK19__FlashStringHelper>

	display.display();
    1ade:	8f ea       	ldi	r24, 0xAF	; 175
    1ae0:	93 e0       	ldi	r25, 0x03	; 3
    1ae2:	0e 94 61 2d 	call	0x5ac2	; 0x5ac2 <_ZN16Adafruit_SSD13067displayEv>
}
    1ae6:	00 00       	nop
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	08 95       	ret

00001aee <_Z4MenucPb>:

void Menu(char key, bool *TimeAndDate)
{
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	2b 97       	sbiw	r28, 0x0b	; 11
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	89 87       	std	Y+9, r24	; 0x09
    1b04:	7b 87       	std	Y+11, r23	; 0x0b
    1b06:	6a 87       	std	Y+10, r22	; 0x0a
	
	switch (key)
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	82 34       	cpi	r24, 0x42	; 66
    1b10:	91 05       	cpc	r25, r1
    1b12:	01 f1       	breq	.+64     	; 0x1b54 <_Z4MenucPb+0x66>
    1b14:	83 34       	cpi	r24, 0x43	; 67
    1b16:	91 05       	cpc	r25, r1
    1b18:	b1 f1       	breq	.+108    	; 0x1b86 <_Z4MenucPb+0x98>
    1b1a:	81 34       	cpi	r24, 0x41	; 65
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <_Z4MenucPb+0x34>
			LCDPrintHumidity(humid);
			*TimeAndDate = false;
		}
		break;
		default:
		break;
    1b20:	4b c0       	rjmp	.+150    	; 0x1bb8 <_Z4MenucPb+0xca>
{
	
	switch (key)
	{
		case 'A':
		Serial.println("Du valgte: A");
    1b22:	66 e4       	ldi	r22, 0x46	; 70
    1b24:	72 e0       	ldi	r23, 0x02	; 2
    1b26:	81 ed       	ldi	r24, 0xD1	; 209
    1b28:	95 e0       	ldi	r25, 0x05	; 5
    1b2a:	0e 94 1a 5d 	call	0xba34	; 0xba34 <_ZN5Print7printlnEPKc>
		{
			*TimeAndDate = true;
    1b2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b32:	21 e0       	ldi	r18, 0x01	; 1
    1b34:	fc 01       	movw	r30, r24
    1b36:	20 83       	st	Z, r18
			Serial.println(*TimeAndDate);
    1b38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	4a e0       	ldi	r20, 0x0A	; 10
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	bc 01       	movw	r22, r24
    1b4a:	81 ed       	ldi	r24, 0xD1	; 209
    1b4c:	95 e0       	ldi	r25, 0x05	; 5
    1b4e:	0e 94 dd 5d 	call	0xbbba	; 0xbbba <_ZN5Print7printlnEii>
		}
		break;
    1b52:	32 c0       	rjmp	.+100    	; 0x1bb8 <_Z4MenucPb+0xca>
		case 'B':
		{
			Serial.println("Du valgte: C");
    1b54:	63 e5       	ldi	r22, 0x53	; 83
    1b56:	72 e0       	ldi	r23, 0x02	; 2
    1b58:	81 ed       	ldi	r24, 0xD1	; 209
    1b5a:	95 e0       	ldi	r25, 0x05	; 5
    1b5c:	0e 94 1a 5d 	call	0xba34	; 0xba34 <_ZN5Print7printlnEPKc>
			float temp = GetTemp();
    1b60:	28 d9       	rcall	.-3504   	; 0xdb2 <_Z7GetTempv>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	ab 83       	std	Y+3, r26	; 0x03
    1b6c:	bc 83       	std	Y+4, r27	; 0x04
			LCDPrintTemp(temp);
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	ab 81       	ldd	r26, Y+3	; 0x03
    1b74:	bc 81       	ldd	r27, Y+4	; 0x04
    1b76:	bc 01       	movw	r22, r24
    1b78:	cd 01       	movw	r24, r26
    1b7a:	79 da       	rcall	.-2830   	; 0x106e <_Z12LCDPrintTempf>
			*TimeAndDate = false;
    1b7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b80:	fc 01       	movw	r30, r24
    1b82:	10 82       	st	Z, r1
		}
		break;
    1b84:	19 c0       	rjmp	.+50     	; 0x1bb8 <_Z4MenucPb+0xca>
		case 'C':
		{
			Serial.println("Du valgte: D");
    1b86:	60 e6       	ldi	r22, 0x60	; 96
    1b88:	72 e0       	ldi	r23, 0x02	; 2
    1b8a:	81 ed       	ldi	r24, 0xD1	; 209
    1b8c:	95 e0       	ldi	r25, 0x05	; 5
    1b8e:	0e 94 1a 5d 	call	0xba34	; 0xba34 <_ZN5Print7printlnEPKc>
			float humid = GetHumid();
    1b92:	ff d8       	rcall	.-3586   	; 0xd92 <_Z8GetHumidv>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	af 83       	std	Y+7, r26	; 0x07
    1b9e:	b8 87       	std	Y+8, r27	; 0x08
			LCDPrintHumidity(humid);
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	af 81       	ldd	r26, Y+7	; 0x07
    1ba6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	8e da       	rcall	.-2788   	; 0x10ca <_Z16LCDPrintHumidityf>
			*TimeAndDate = false;
    1bae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	10 82       	st	Z, r1
		}
		break;
    1bb6:	00 00       	nop
		default:
		break;
	}
}
    1bb8:	00 00       	nop
    1bba:	2b 96       	adiw	r28, 0x0b	; 11
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	08 95       	ret

00001bcc <_Z11WelcomeOLEDv>:

void WelcomeOLED()
{
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	display.clearDisplay();
    1bd4:	8f ea       	ldi	r24, 0xAF	; 175
    1bd6:	93 e0       	ldi	r25, 0x03	; 3
    1bd8:	0e 94 03 29 	call	0x5206	; 0x5206 <_ZN16Adafruit_SSD130612clearDisplayEv>

	display.setTextSize(2);
    1bdc:	62 e0       	ldi	r22, 0x02	; 2
    1bde:	8f ea       	ldi	r24, 0xAF	; 175
    1be0:	93 e0       	ldi	r25, 0x03	; 3
    1be2:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <_ZN12Adafruit_GFX11setTextSizeEh>
	display.setTextColor(WHITE);
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	8f ea       	ldi	r24, 0xAF	; 175
    1bec:	93 e0       	ldi	r25, 0x03	; 3
    1bee:	0a df       	rcall	.-492    	; 0x1a04 <_ZN12Adafruit_GFX12setTextColorEj>
	display.setCursor(0,0);
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	8f ea       	ldi	r24, 0xAF	; 175
    1bfa:	93 e0       	ldi	r25, 0x03	; 3
    1bfc:	df de       	rcall	.-578    	; 0x19bc <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("Welcome"));
    1bfe:	80 e9       	ldi	r24, 0x90	; 144
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	bc 01       	movw	r22, r24
    1c04:	8f ea       	ldi	r24, 0xAF	; 175
    1c06:	93 e0       	ldi	r25, 0x03	; 3
    1c08:	0e 94 0a 5d 	call	0xba14	; 0xba14 <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,20);
    1c0c:	44 e1       	ldi	r20, 0x14	; 20
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	8f ea       	ldi	r24, 0xAF	; 175
    1c16:	93 e0       	ldi	r25, 0x03	; 3
    1c18:	d1 de       	rcall	.-606    	; 0x19bc <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("Home"));
    1c1a:	88 e9       	ldi	r24, 0x98	; 152
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	bc 01       	movw	r22, r24
    1c20:	8f ea       	ldi	r24, 0xAF	; 175
    1c22:	93 e0       	ldi	r25, 0x03	; 3
    1c24:	0e 94 0a 5d 	call	0xba14	; 0xba14 <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.display();
    1c28:	8f ea       	ldi	r24, 0xAF	; 175
    1c2a:	93 e0       	ldi	r25, 0x03	; 3
    1c2c:	0e 94 61 2d 	call	0x5ac2	; 0x5ac2 <_ZN16Adafruit_SSD13067displayEv>
	
}
    1c30:	00 00       	nop
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <_Z41__static_initialization_and_destruction_0ii>:
    1c38:	8f 92       	push	r8
    1c3a:	9f 92       	push	r9
    1c3c:	af 92       	push	r10
    1c3e:	bf 92       	push	r11
    1c40:	cf 92       	push	r12
    1c42:	df 92       	push	r13
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <_Z41__static_initialization_and_destruction_0ii+0x18>
    1c50:	1f 92       	push	r1
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	7c 83       	std	Y+4, r23	; 0x04
    1c5c:	6b 83       	std	Y+3, r22	; 0x03
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	69 f5       	brne	.+90     	; 0x1cc0 <_Z41__static_initialization_and_destruction_0ii+0x88>
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	49 f5       	brne	.+82     	; 0x1cc0 <_Z41__static_initialization_and_destruction_0ii+0x88>
#include "Menu.h"

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1c6e:	0f 2e       	mov	r0, r31
    1c70:	f0 ea       	ldi	r31, 0xA0	; 160
    1c72:	8f 2e       	mov	r8, r31
    1c74:	f6 e8       	ldi	r31, 0x86	; 134
    1c76:	9f 2e       	mov	r9, r31
    1c78:	aa 24       	eor	r10, r10
    1c7a:	a3 94       	inc	r10
    1c7c:	b1 2c       	mov	r11, r1
    1c7e:	f0 2d       	mov	r31, r0
    1c80:	0f 2e       	mov	r0, r31
    1c82:	f0 e8       	ldi	r31, 0x80	; 128
    1c84:	cf 2e       	mov	r12, r31
    1c86:	fa e1       	ldi	r31, 0x1A	; 26
    1c88:	df 2e       	mov	r13, r31
    1c8a:	f6 e0       	ldi	r31, 0x06	; 6
    1c8c:	ef 2e       	mov	r14, r31
    1c8e:	f1 2c       	mov	r15, r1
    1c90:	f0 2d       	mov	r31, r0
    1c92:	04 e0       	ldi	r16, 0x04	; 4
    1c94:	25 ec       	ldi	r18, 0xC5	; 197
    1c96:	35 e0       	ldi	r19, 0x05	; 5
    1c98:	40 e4       	ldi	r20, 0x40	; 64
    1c9a:	60 e8       	ldi	r22, 0x80	; 128
    1c9c:	8f ea       	ldi	r24, 0xAF	; 175
    1c9e:	93 e0       	ldi	r25, 0x03	; 3
    1ca0:	0e 94 c3 20 	call	0x4186	; 0x4186 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
	{'7','8','9','C'},
	{'*','0','#','D'}
};
byte rowPins[rows] = {32, 33, 34, 35}; //connect to the row pinouts of the keypad
byte colPins[cols] = {36, 37, 38, 39}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );
    1ca4:	68 94       	set
    1ca6:	ee 24       	eor	r14, r14
    1ca8:	e2 f8       	bld	r14, 2
    1caa:	04 e0       	ldi	r16, 0x04	; 4
    1cac:	26 e3       	ldi	r18, 0x36	; 54
    1cae:	32 e0       	ldi	r19, 0x02	; 2
    1cb0:	42 e3       	ldi	r20, 0x32	; 50
    1cb2:	52 e0       	ldi	r21, 0x02	; 2
    1cb4:	62 e2       	ldi	r22, 0x22	; 34
    1cb6:	72 e0       	ldi	r23, 0x02	; 2
    1cb8:	8f ee       	ldi	r24, 0xEF	; 239
    1cba:	93 e0       	ldi	r25, 0x03	; 3
    1cbc:	0e 94 55 3a 	call	0x74aa	; 0x74aa <_ZN6KeypadC1EPcPhS1_hh>
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	89 2b       	or	r24, r25
    1cc6:	41 f4       	brne	.+16     	; 0x1cd8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	21 f4       	brne	.+8      	; 0x1cd8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
#include "Menu.h"

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1cd0:	8f ea       	ldi	r24, 0xAF	; 175
    1cd2:	93 e0       	ldi	r25, 0x03	; 3
    1cd4:	0e 94 55 21 	call	0x42aa	; 0x42aa <_ZN16Adafruit_SSD1306D1Ev>
	display.println(F("Welcome"));
	display.setCursor(0,20);
	display.println(F("Home"));
	display.display();
	
}
    1cd8:	00 00       	nop
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	bf 90       	pop	r11
    1cf2:	af 90       	pop	r10
    1cf4:	9f 90       	pop	r9
    1cf6:	8f 90       	pop	r8
    1cf8:	08 95       	ret

00001cfa <_GLOBAL__sub_I_display>:
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	6f ef       	ldi	r22, 0xFF	; 255
    1d04:	7f ef       	ldi	r23, 0xFF	; 255
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	96 df       	rcall	.-212    	; 0x1c38 <_Z41__static_initialization_and_destruction_0ii>
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	08 95       	ret

00001d12 <_GLOBAL__sub_D_display>:
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	6f ef       	ldi	r22, 0xFF	; 255
    1d1c:	7f ef       	ldi	r23, 0xFF	; 255
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	8a df       	rcall	.-236    	; 0x1c38 <_Z41__static_initialization_and_destruction_0ii>
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret

00001d2a <_Z11TempTooColdv>:

int moter = 12;


void TempTooCold()
{
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	2c 97       	sbiw	r28, 0x0c	; 12
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
	Timer1.pwm(moter, (1023 / 100) * 0);
    1d3e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <moter>
    1d42:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <moter+0x1>
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	1b 82       	std	Y+3, r1	; 0x03
    1d4a:	1a 82       	std	Y+2, r1	; 0x02
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	8b 30       	cpi	r24, 0x0B	; 11
    1d50:	71 f4       	brne	.+28     	; 0x1d6e <_Z11TempTooColdv+0x44>
    1d52:	61 e0       	ldi	r22, 0x01	; 1
    1d54:	8b e0       	ldi	r24, 0x0B	; 11
    1d56:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    1d5a:	80 e8       	ldi	r24, 0x80	; 128
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	20 e8       	ldi	r18, 0x80	; 128
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	f9 01       	movw	r30, r18
    1d64:	20 81       	ld	r18, Z
    1d66:	20 68       	ori	r18, 0x80	; 128
    1d68:	fc 01       	movw	r30, r24
    1d6a:	20 83       	st	Z, r18
    1d6c:	21 c0       	rjmp	.+66     	; 0x1db0 <_Z11TempTooColdv+0x86>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	8c 30       	cpi	r24, 0x0C	; 12
    1d72:	71 f4       	brne	.+28     	; 0x1d90 <_Z11TempTooColdv+0x66>
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	8c e0       	ldi	r24, 0x0C	; 12
    1d78:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    1d7c:	80 e8       	ldi	r24, 0x80	; 128
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	20 e8       	ldi	r18, 0x80	; 128
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	f9 01       	movw	r30, r18
    1d86:	20 81       	ld	r18, Z
    1d88:	20 62       	ori	r18, 0x20	; 32
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	20 83       	st	Z, r18
    1d8e:	10 c0       	rjmp	.+32     	; 0x1db0 <_Z11TempTooColdv+0x86>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	8d 30       	cpi	r24, 0x0D	; 13
    1d94:	69 f4       	brne	.+26     	; 0x1db0 <_Z11TempTooColdv+0x86>
    1d96:	61 e0       	ldi	r22, 0x01	; 1
    1d98:	8d e0       	ldi	r24, 0x0D	; 13
    1d9a:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    1d9e:	80 e8       	ldi	r24, 0x80	; 128
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	20 e8       	ldi	r18, 0x80	; 128
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	f9 01       	movw	r30, r18
    1da8:	20 81       	ld	r18, Z
    1daa:	28 60       	ori	r18, 0x08	; 8
    1dac:	fc 01       	movw	r30, r24
    1dae:	20 83       	st	Z, r18
    1db0:	8f ef       	ldi	r24, 0xFF	; 255
    1db2:	94 e0       	ldi	r25, 0x04	; 4
    1db4:	9d 83       	std	Y+5, r25	; 0x05
    1db6:	8c 83       	std	Y+4, r24	; 0x04
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	8e 83       	std	Y+6, r24	; 0x06
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	98 87       	std	Y+8, r25	; 0x08
    1dc2:	8f 83       	std	Y+7, r24	; 0x07

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    1dc4:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    1dc8:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    1dcc:	cc 01       	movw	r24, r24
    1dce:	a0 e0       	ldi	r26, 0x00	; 0
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	89 87       	std	Y+9, r24	; 0x09
    1dd4:	9a 87       	std	Y+10, r25	; 0x0a
    1dd6:	ab 87       	std	Y+11, r26	; 0x0b
    1dd8:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle *= duty;
    1dda:	8f 81       	ldd	r24, Y+7	; 0x07
    1ddc:	98 85       	ldd	r25, Y+8	; 0x08
    1dde:	cc 01       	movw	r24, r24
    1de0:	a0 e0       	ldi	r26, 0x00	; 0
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	29 85       	ldd	r18, Y+9	; 0x09
    1de6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1de8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1dea:	5c 85       	ldd	r21, Y+12	; 0x0c
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 8a 63 	call	0xc714	; 0xc714 <__mulsi3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	89 87       	std	Y+9, r24	; 0x09
    1dfa:	9a 87       	std	Y+10, r25	; 0x0a
    1dfc:	ab 87       	std	Y+11, r26	; 0x0b
    1dfe:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle >>= 10;
    1e00:	89 85       	ldd	r24, Y+9	; 0x09
    1e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e04:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e06:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e08:	07 2e       	mov	r0, r23
    1e0a:	7a e0       	ldi	r23, 0x0A	; 10
    1e0c:	b6 95       	lsr	r27
    1e0e:	a7 95       	ror	r26
    1e10:	97 95       	ror	r25
    1e12:	87 95       	ror	r24
    1e14:	7a 95       	dec	r23
    1e16:	d1 f7       	brne	.-12     	; 0x1e0c <_Z11TempTooColdv+0xe2>
    1e18:	70 2d       	mov	r23, r0
    1e1a:	89 87       	std	Y+9, r24	; 0x09
    1e1c:	9a 87       	std	Y+10, r25	; 0x0a
    1e1e:	ab 87       	std	Y+11, r26	; 0x0b
    1e20:	bc 87       	std	Y+12, r27	; 0x0c
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    1e22:	8e 81       	ldd	r24, Y+6	; 0x06
    1e24:	8b 30       	cpi	r24, 0x0B	; 11
    1e26:	41 f4       	brne	.+16     	; 0x1e38 <_Z11TempTooColdv+0x10e>
    1e28:	88 e8       	ldi	r24, 0x88	; 136
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	29 85       	ldd	r18, Y+9	; 0x09
    1e2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e30:	fc 01       	movw	r30, r24
    1e32:	31 83       	std	Z+1, r19	; 0x01
    1e34:	20 83       	st	Z, r18
    1e36:	15 c0       	rjmp	.+42     	; 0x1e62 <_Z11TempTooColdv+0x138>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    1e38:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3a:	8c 30       	cpi	r24, 0x0C	; 12
    1e3c:	41 f4       	brne	.+16     	; 0x1e4e <_Z11TempTooColdv+0x124>
    1e3e:	8a e8       	ldi	r24, 0x8A	; 138
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	29 85       	ldd	r18, Y+9	; 0x09
    1e44:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e46:	fc 01       	movw	r30, r24
    1e48:	31 83       	std	Z+1, r19	; 0x01
    1e4a:	20 83       	st	Z, r18
    1e4c:	0a c0       	rjmp	.+20     	; 0x1e62 <_Z11TempTooColdv+0x138>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    1e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e50:	8d 30       	cpi	r24, 0x0D	; 13
    1e52:	39 f4       	brne	.+14     	; 0x1e62 <_Z11TempTooColdv+0x138>
    1e54:	8c e8       	ldi	r24, 0x8C	; 140
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	29 85       	ldd	r18, Y+9	; 0x09
    1e5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	31 83       	std	Z+1, r19	; 0x01
    1e60:	20 83       	st	Z, r18
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1e62:	81 e8       	ldi	r24, 0x81	; 129
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
    1e6a:	20 61       	ori	r18, 0x10	; 16
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	20 83       	st	Z, r18
	return;
    1e70:	00 00       	nop
}
    1e72:	2c 96       	adiw	r28, 0x0c	; 12
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <_Z10TempTooHotv>:

void TempTooHot()
{
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	2c 97       	sbiw	r28, 0x0c	; 12
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
	Timer1.pwm(moter, (1023 / 100) * 100);
    1e98:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <moter>
    1e9c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <moter+0x1>
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	88 ee       	ldi	r24, 0xE8	; 232
    1ea4:	93 e0       	ldi	r25, 0x03	; 3
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	8b 30       	cpi	r24, 0x0B	; 11
    1eae:	71 f4       	brne	.+28     	; 0x1ecc <_Z10TempTooHotv+0x48>
    1eb0:	61 e0       	ldi	r22, 0x01	; 1
    1eb2:	8b e0       	ldi	r24, 0x0B	; 11
    1eb4:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    1eb8:	80 e8       	ldi	r24, 0x80	; 128
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	20 e8       	ldi	r18, 0x80	; 128
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	20 81       	ld	r18, Z
    1ec4:	20 68       	ori	r18, 0x80	; 128
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	20 83       	st	Z, r18
    1eca:	21 c0       	rjmp	.+66     	; 0x1f0e <_Z10TempTooHotv+0x8a>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	8c 30       	cpi	r24, 0x0C	; 12
    1ed0:	71 f4       	brne	.+28     	; 0x1eee <_Z10TempTooHotv+0x6a>
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	8c e0       	ldi	r24, 0x0C	; 12
    1ed6:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    1eda:	80 e8       	ldi	r24, 0x80	; 128
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	20 e8       	ldi	r18, 0x80	; 128
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	f9 01       	movw	r30, r18
    1ee4:	20 81       	ld	r18, Z
    1ee6:	20 62       	ori	r18, 0x20	; 32
    1ee8:	fc 01       	movw	r30, r24
    1eea:	20 83       	st	Z, r18
    1eec:	10 c0       	rjmp	.+32     	; 0x1f0e <_Z10TempTooHotv+0x8a>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	8d 30       	cpi	r24, 0x0D	; 13
    1ef2:	69 f4       	brne	.+26     	; 0x1f0e <_Z10TempTooHotv+0x8a>
    1ef4:	61 e0       	ldi	r22, 0x01	; 1
    1ef6:	8d e0       	ldi	r24, 0x0D	; 13
    1ef8:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    1efc:	80 e8       	ldi	r24, 0x80	; 128
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	20 e8       	ldi	r18, 0x80	; 128
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	f9 01       	movw	r30, r18
    1f06:	20 81       	ld	r18, Z
    1f08:	28 60       	ori	r18, 0x08	; 8
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	20 83       	st	Z, r18
    1f0e:	8f ef       	ldi	r24, 0xFF	; 255
    1f10:	94 e0       	ldi	r25, 0x04	; 4
    1f12:	9d 83       	std	Y+5, r25	; 0x05
    1f14:	8c 83       	std	Y+4, r24	; 0x04
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	8e 83       	std	Y+6, r24	; 0x06
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1e:	98 87       	std	Y+8, r25	; 0x08
    1f20:	8f 83       	std	Y+7, r24	; 0x07

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    1f22:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    1f26:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    1f2a:	cc 01       	movw	r24, r24
    1f2c:	a0 e0       	ldi	r26, 0x00	; 0
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	89 87       	std	Y+9, r24	; 0x09
    1f32:	9a 87       	std	Y+10, r25	; 0x0a
    1f34:	ab 87       	std	Y+11, r26	; 0x0b
    1f36:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle *= duty;
    1f38:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3a:	98 85       	ldd	r25, Y+8	; 0x08
    1f3c:	cc 01       	movw	r24, r24
    1f3e:	a0 e0       	ldi	r26, 0x00	; 0
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	29 85       	ldd	r18, Y+9	; 0x09
    1f44:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f46:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f48:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	0e 94 8a 63 	call	0xc714	; 0xc714 <__mulsi3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	89 87       	std	Y+9, r24	; 0x09
    1f58:	9a 87       	std	Y+10, r25	; 0x0a
    1f5a:	ab 87       	std	Y+11, r26	; 0x0b
    1f5c:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle >>= 10;
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f64:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f66:	07 2e       	mov	r0, r23
    1f68:	7a e0       	ldi	r23, 0x0A	; 10
    1f6a:	b6 95       	lsr	r27
    1f6c:	a7 95       	ror	r26
    1f6e:	97 95       	ror	r25
    1f70:	87 95       	ror	r24
    1f72:	7a 95       	dec	r23
    1f74:	d1 f7       	brne	.-12     	; 0x1f6a <_Z10TempTooHotv+0xe6>
    1f76:	70 2d       	mov	r23, r0
    1f78:	89 87       	std	Y+9, r24	; 0x09
    1f7a:	9a 87       	std	Y+10, r25	; 0x0a
    1f7c:	ab 87       	std	Y+11, r26	; 0x0b
    1f7e:	bc 87       	std	Y+12, r27	; 0x0c
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    1f80:	8e 81       	ldd	r24, Y+6	; 0x06
    1f82:	8b 30       	cpi	r24, 0x0B	; 11
    1f84:	41 f4       	brne	.+16     	; 0x1f96 <_Z10TempTooHotv+0x112>
    1f86:	88 e8       	ldi	r24, 0x88	; 136
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	29 85       	ldd	r18, Y+9	; 0x09
    1f8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f8e:	fc 01       	movw	r30, r24
    1f90:	31 83       	std	Z+1, r19	; 0x01
    1f92:	20 83       	st	Z, r18
    1f94:	15 c0       	rjmp	.+42     	; 0x1fc0 <_Z10TempTooHotv+0x13c>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	8c 30       	cpi	r24, 0x0C	; 12
    1f9a:	41 f4       	brne	.+16     	; 0x1fac <_Z10TempTooHotv+0x128>
    1f9c:	8a e8       	ldi	r24, 0x8A	; 138
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	29 85       	ldd	r18, Y+9	; 0x09
    1fa2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	31 83       	std	Z+1, r19	; 0x01
    1fa8:	20 83       	st	Z, r18
    1faa:	0a c0       	rjmp	.+20     	; 0x1fc0 <_Z10TempTooHotv+0x13c>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    1fac:	8e 81       	ldd	r24, Y+6	; 0x06
    1fae:	8d 30       	cpi	r24, 0x0D	; 13
    1fb0:	39 f4       	brne	.+14     	; 0x1fc0 <_Z10TempTooHotv+0x13c>
    1fb2:	8c e8       	ldi	r24, 0x8C	; 140
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	29 85       	ldd	r18, Y+9	; 0x09
    1fb8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fba:	fc 01       	movw	r30, r24
    1fbc:	31 83       	std	Z+1, r19	; 0x01
    1fbe:	20 83       	st	Z, r18
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1fc0:	81 e8       	ldi	r24, 0x81	; 129
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
    1fc8:	20 61       	ori	r18, 0x10	; 16
    1fca:	fc 01       	movw	r30, r24
    1fcc:	20 83       	st	Z, r18
	return;
    1fce:	00 00       	nop
}
    1fd0:	2c 96       	adiw	r28, 0x0c	; 12
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	08 95       	ret

00001fe2 <_Z11TempPerfektv>:

void TempPerfekt()
{
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	2c 97       	sbiw	r28, 0x0c	; 12
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
	Timer1.pwm(moter, (1023 / 100) * 50);
    1ff6:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <moter>
    1ffa:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <moter+0x1>
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	84 ef       	ldi	r24, 0xF4	; 244
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	9b 83       	std	Y+3, r25	; 0x03
    2006:	8a 83       	std	Y+2, r24	; 0x02
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	8b 30       	cpi	r24, 0x0B	; 11
    200c:	71 f4       	brne	.+28     	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	8b e0       	ldi	r24, 0x0B	; 11
    2012:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    2016:	80 e8       	ldi	r24, 0x80	; 128
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	20 e8       	ldi	r18, 0x80	; 128
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	f9 01       	movw	r30, r18
    2020:	20 81       	ld	r18, Z
    2022:	20 68       	ori	r18, 0x80	; 128
    2024:	fc 01       	movw	r30, r24
    2026:	20 83       	st	Z, r18
    2028:	21 c0       	rjmp	.+66     	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	8c 30       	cpi	r24, 0x0C	; 12
    202e:	71 f4       	brne	.+28     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	8c e0       	ldi	r24, 0x0C	; 12
    2034:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    2038:	80 e8       	ldi	r24, 0x80	; 128
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	20 e8       	ldi	r18, 0x80	; 128
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	f9 01       	movw	r30, r18
    2042:	20 81       	ld	r18, Z
    2044:	20 62       	ori	r18, 0x20	; 32
    2046:	fc 01       	movw	r30, r24
    2048:	20 83       	st	Z, r18
    204a:	10 c0       	rjmp	.+32     	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	8d 30       	cpi	r24, 0x0D	; 13
    2050:	69 f4       	brne	.+26     	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	8d e0       	ldi	r24, 0x0D	; 13
    2056:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    205a:	80 e8       	ldi	r24, 0x80	; 128
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	20 e8       	ldi	r18, 0x80	; 128
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	f9 01       	movw	r30, r18
    2064:	20 81       	ld	r18, Z
    2066:	28 60       	ori	r18, 0x08	; 8
    2068:	fc 01       	movw	r30, r24
    206a:	20 83       	st	Z, r18
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	94 e0       	ldi	r25, 0x04	; 4
    2070:	9d 83       	std	Y+5, r25	; 0x05
    2072:	8c 83       	std	Y+4, r24	; 0x04
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	8e 83       	std	Y+6, r24	; 0x06
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	9b 81       	ldd	r25, Y+3	; 0x03
    207c:	98 87       	std	Y+8, r25	; 0x08
    207e:	8f 83       	std	Y+7, r24	; 0x07

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    2080:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    2084:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    2088:	cc 01       	movw	r24, r24
    208a:	a0 e0       	ldi	r26, 0x00	; 0
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	89 87       	std	Y+9, r24	; 0x09
    2090:	9a 87       	std	Y+10, r25	; 0x0a
    2092:	ab 87       	std	Y+11, r26	; 0x0b
    2094:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle *= duty;
    2096:	8f 81       	ldd	r24, Y+7	; 0x07
    2098:	98 85       	ldd	r25, Y+8	; 0x08
    209a:	cc 01       	movw	r24, r24
    209c:	a0 e0       	ldi	r26, 0x00	; 0
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	29 85       	ldd	r18, Y+9	; 0x09
    20a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    20a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    20a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 8a 63 	call	0xc714	; 0xc714 <__mulsi3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	89 87       	std	Y+9, r24	; 0x09
    20b6:	9a 87       	std	Y+10, r25	; 0x0a
    20b8:	ab 87       	std	Y+11, r26	; 0x0b
    20ba:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle >>= 10;
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    20c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    20c4:	07 2e       	mov	r0, r23
    20c6:	7a e0       	ldi	r23, 0x0A	; 10
    20c8:	b6 95       	lsr	r27
    20ca:	a7 95       	ror	r26
    20cc:	97 95       	ror	r25
    20ce:	87 95       	ror	r24
    20d0:	7a 95       	dec	r23
    20d2:	d1 f7       	brne	.-12     	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    20d4:	70 2d       	mov	r23, r0
    20d6:	89 87       	std	Y+9, r24	; 0x09
    20d8:	9a 87       	std	Y+10, r25	; 0x0a
    20da:	ab 87       	std	Y+11, r26	; 0x0b
    20dc:	bc 87       	std	Y+12, r27	; 0x0c
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    20de:	8e 81       	ldd	r24, Y+6	; 0x06
    20e0:	8b 30       	cpi	r24, 0x0B	; 11
    20e2:	41 f4       	brne	.+16     	; 0x20f4 <__DATA_REGION_LENGTH__+0xf4>
    20e4:	88 e8       	ldi	r24, 0x88	; 136
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	29 85       	ldd	r18, Y+9	; 0x09
    20ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    20ec:	fc 01       	movw	r30, r24
    20ee:	31 83       	std	Z+1, r19	; 0x01
    20f0:	20 83       	st	Z, r18
    20f2:	15 c0       	rjmp	.+42     	; 0x211e <__DATA_REGION_LENGTH__+0x11e>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    20f4:	8e 81       	ldd	r24, Y+6	; 0x06
    20f6:	8c 30       	cpi	r24, 0x0C	; 12
    20f8:	41 f4       	brne	.+16     	; 0x210a <__DATA_REGION_LENGTH__+0x10a>
    20fa:	8a e8       	ldi	r24, 0x8A	; 138
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	29 85       	ldd	r18, Y+9	; 0x09
    2100:	3a 85       	ldd	r19, Y+10	; 0x0a
    2102:	fc 01       	movw	r30, r24
    2104:	31 83       	std	Z+1, r19	; 0x01
    2106:	20 83       	st	Z, r18
    2108:	0a c0       	rjmp	.+20     	; 0x211e <__DATA_REGION_LENGTH__+0x11e>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    210a:	8e 81       	ldd	r24, Y+6	; 0x06
    210c:	8d 30       	cpi	r24, 0x0D	; 13
    210e:	39 f4       	brne	.+14     	; 0x211e <__DATA_REGION_LENGTH__+0x11e>
    2110:	8c e8       	ldi	r24, 0x8C	; 140
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	29 85       	ldd	r18, Y+9	; 0x09
    2116:	3a 85       	ldd	r19, Y+10	; 0x0a
    2118:	fc 01       	movw	r30, r24
    211a:	31 83       	std	Z+1, r19	; 0x01
    211c:	20 83       	st	Z, r18
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    211e:	81 e8       	ldi	r24, 0x81	; 129
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
    2126:	20 61       	ori	r18, 0x10	; 16
    2128:	fc 01       	movw	r30, r24
    212a:	20 83       	st	Z, r18
	return;
    212c:	00 00       	nop
    212e:	2c 96       	adiw	r28, 0x0c	; 12
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <_ZN6StringpLERKS_>:
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	00 d0       	rcall	.+0      	; 0x2146 <_ZN6StringpLERKS_+0x6>
    2146:	1f 92       	push	r1
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	7c 83       	std	Y+4, r23	; 0x04
    2152:	6b 83       	std	Y+3, r22	; 0x03
    2154:	2b 81       	ldd	r18, Y+3	; 0x03
    2156:	3c 81       	ldd	r19, Y+4	; 0x04
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	b9 01       	movw	r22, r18
    215e:	0e 94 20 63 	call	0xc640	; 0xc640 <_ZN6String6concatERKS_>
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	08 95       	ret

00002174 <_ZN6StringpLEPKc>:
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	00 d0       	rcall	.+0      	; 0x217a <_ZN6StringpLEPKc+0x6>
    217a:	1f 92       	push	r1
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	7c 83       	std	Y+4, r23	; 0x04
    2186:	6b 83       	std	Y+3, r22	; 0x03
    2188:	2b 81       	ldd	r18, Y+3	; 0x03
    218a:	3c 81       	ldd	r19, Y+4	; 0x04
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	b9 01       	movw	r22, r18
    2192:	0e 94 26 63 	call	0xc64c	; 0xc64c <_ZN6String6concatEPKc>
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	08 95       	ret

000021a8 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <_ZNK6StringeqERKS_+0x6>
    21ae:	1f 92       	push	r1
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	7c 83       	std	Y+4, r23	; 0x04
    21ba:	6b 83       	std	Y+3, r22	; 0x03
    21bc:	2b 81       	ldd	r18, Y+3	; 0x03
    21be:	3c 81       	ldd	r19, Y+4	; 0x04
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	9a 81       	ldd	r25, Y+2	; 0x02
    21c4:	b9 01       	movw	r22, r18
    21c6:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <_ZNK6String6equalsERKS_>
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <_ZNK6StringneERKS_>:
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	00 d0       	rcall	.+0      	; 0x21de <_ZNK6StringneERKS_+0x6>
    21de:	1f 92       	push	r1
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	9a 83       	std	Y+2, r25	; 0x02
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	7c 83       	std	Y+4, r23	; 0x04
    21ea:	6b 83       	std	Y+3, r22	; 0x03
    21ec:	2b 81       	ldd	r18, Y+3	; 0x03
    21ee:	3c 81       	ldd	r19, Y+4	; 0x04
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	b9 01       	movw	r22, r18
    21f6:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <_ZNK6String6equalsERKS_>
    21fa:	98 2f       	mov	r25, r24
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	99 23       	and	r25, r25
    2200:	09 f0       	breq	.+2      	; 0x2204 <__stack+0x5>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <_Z7ReadUIDv>:

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;

String ReadUID()
{
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	29 97       	sbiw	r28, 0x09	; 9
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	99 87       	std	Y+9, r25	; 0x09
    2228:	88 87       	std	Y+8, r24	; 0x08
	String UID;
    222a:	88 85       	ldd	r24, Y+8	; 0x08
    222c:	99 85       	ldd	r25, Y+9	; 0x09
    222e:	6d e6       	ldi	r22, 0x6D	; 109
    2230:	72 e0       	ldi	r23, 0x02	; 2
    2232:	0e 94 83 62 	call	0xc506	; 0xc506 <_ZN6StringC1EPKc>
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    2236:	19 82       	std	Y+1, r1	; 0x01
    2238:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <mfrc522+0x2>
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	89 17       	cp	r24, r25
    2240:	78 f5       	brcc	.+94     	; 0x22a0 <_Z7ReadUIDv+0x8e>
		UID += mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ";
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	8a 5a       	subi	r24, 0xAA	; 170
    224a:	9b 4f       	sbci	r25, 0xFB	; 251
    224c:	fc 01       	movw	r30, r24
    224e:	80 81       	ld	r24, Z
    2250:	80 31       	cpi	r24, 0x10	; 16
    2252:	18 f4       	brcc	.+6      	; 0x225a <_Z7ReadUIDv+0x48>
    2254:	8e e6       	ldi	r24, 0x6E	; 110
    2256:	92 e0       	ldi	r25, 0x02	; 2
    2258:	02 c0       	rjmp	.+4      	; 0x225e <_Z7ReadUIDv+0x4c>
    225a:	81 e7       	ldi	r24, 0x71	; 113
    225c:	92 e0       	ldi	r25, 0x02	; 2
    225e:	28 85       	ldd	r18, Y+8	; 0x08
    2260:	39 85       	ldd	r19, Y+9	; 0x09
    2262:	bc 01       	movw	r22, r24
    2264:	c9 01       	movw	r24, r18
    2266:	86 df       	rcall	.-244    	; 0x2174 <_ZN6StringpLEPKc>
		UID += String (mfrc522.uid.uidByte[i], HEX);
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	8a 5a       	subi	r24, 0xAA	; 170
    2270:	9b 4f       	sbci	r25, 0xFB	; 251
    2272:	fc 01       	movw	r30, r24
    2274:	20 81       	ld	r18, Z
    2276:	ce 01       	movw	r24, r28
    2278:	02 96       	adiw	r24, 0x02	; 2
    227a:	40 e1       	ldi	r20, 0x10	; 16
    227c:	62 2f       	mov	r22, r18
    227e:	0e 94 c9 62 	call	0xc592	; 0xc592 <_ZN6StringC1Ehh>
    2282:	9e 01       	movw	r18, r28
    2284:	2e 5f       	subi	r18, 0xFE	; 254
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
    2288:	88 85       	ldd	r24, Y+8	; 0x08
    228a:	99 85       	ldd	r25, Y+9	; 0x09
    228c:	b9 01       	movw	r22, r18
    228e:	58 df       	rcall	.-336    	; 0x2140 <_ZN6StringpLERKS_>
    2290:	ce 01       	movw	r24, r28
    2292:	02 96       	adiw	r24, 0x02	; 2
    2294:	0e 94 19 62 	call	0xc432	; 0xc432 <_ZN6StringD1Ev>
MFRC522::MIFARE_Key key;

String ReadUID()
{
	String UID;
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	cc cf       	rjmp	.-104    	; 0x2238 <_Z7ReadUIDv+0x26>
		UID += mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ";
		UID += String (mfrc522.uid.uidByte[i], HEX);
	}
	UID.toUpperCase();
    22a0:	88 85       	ldd	r24, Y+8	; 0x08
    22a2:	99 85       	ldd	r25, Y+9	; 0x09
    22a4:	0e 94 73 63 	call	0xc6e6	; 0xc6e6 <_ZN6String11toUpperCaseEv>
	return UID ;
    22a8:	00 00       	nop

}
    22aa:	88 85       	ldd	r24, Y+8	; 0x08
    22ac:	99 85       	ldd	r25, Y+9	; 0x09
    22ae:	29 96       	adiw	r28, 0x09	; 9
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	08 95       	ret

000022c0 <_Z12CheckKeyCard6StringPb>:

void CheckKeyCard(String UID, bool *Keycard)
{
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	2a 97       	sbiw	r28, 0x0a	; 10
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	98 87       	std	Y+8, r25	; 0x08
    22d6:	8f 83       	std	Y+7, r24	; 0x07
    22d8:	7a 87       	std	Y+10, r23	; 0x0a
    22da:	69 87       	std	Y+9, r22	; 0x09
	String UnlogKey = " 30 45 66 A7";
    22dc:	63 e7       	ldi	r22, 0x73	; 115
    22de:	72 e0       	ldi	r23, 0x02	; 2
    22e0:	ce 01       	movw	r24, r28
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	0e 94 83 62 	call	0xc506	; 0xc506 <_ZN6StringC1EPKc>
	if (UID	== UnlogKey)
    22e8:	8f 81       	ldd	r24, Y+7	; 0x07
    22ea:	98 85       	ldd	r25, Y+8	; 0x08
    22ec:	9e 01       	movw	r18, r28
    22ee:	2f 5f       	subi	r18, 0xFF	; 255
    22f0:	3f 4f       	sbci	r19, 0xFF	; 255
    22f2:	b9 01       	movw	r22, r18
    22f4:	59 df       	rcall	.-334    	; 0x21a8 <_ZNK6StringeqERKS_>
    22f6:	98 2f       	mov	r25, r24
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	99 23       	and	r25, r25
    22fc:	09 f4       	brne	.+2      	; 0x2300 <_Z12CheckKeyCard6StringPb+0x40>
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	88 23       	and	r24, r24
    2302:	61 f0       	breq	.+24     	; 0x231c <_Z12CheckKeyCard6StringPb+0x5c>
	{
		*Keycard = true;
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	21 e0       	ldi	r18, 0x01	; 1
    230a:	fc 01       	movw	r30, r24
    230c:	20 83       	st	Z, r18
		Serial.println("Welcome Home");
    230e:	60 e8       	ldi	r22, 0x80	; 128
    2310:	72 e0       	ldi	r23, 0x02	; 2
    2312:	81 ed       	ldi	r24, 0xD1	; 209
    2314:	95 e0       	ldi	r25, 0x05	; 5
    2316:	0e 94 1a 5d 	call	0xba34	; 0xba34 <_ZN5Print7printlnEPKc>
    231a:	18 c0       	rjmp	.+48     	; 0x234c <_Z12CheckKeyCard6StringPb+0x8c>
	}
	else if (UID != UnlogKey)
    231c:	8f 81       	ldd	r24, Y+7	; 0x07
    231e:	98 85       	ldd	r25, Y+8	; 0x08
    2320:	9e 01       	movw	r18, r28
    2322:	2f 5f       	subi	r18, 0xFF	; 255
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	b9 01       	movw	r22, r18
    2328:	57 df       	rcall	.-338    	; 0x21d8 <_ZNK6StringneERKS_>
    232a:	98 2f       	mov	r25, r24
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	99 23       	and	r25, r25
    2330:	09 f4       	brne	.+2      	; 0x2334 <_Z12CheckKeyCard6StringPb+0x74>
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	88 23       	and	r24, r24
    2336:	51 f0       	breq	.+20     	; 0x234c <_Z12CheckKeyCard6StringPb+0x8c>
	{
		*Keycard = false;
    2338:	89 85       	ldd	r24, Y+9	; 0x09
    233a:	9a 85       	ldd	r25, Y+10	; 0x0a
    233c:	fc 01       	movw	r30, r24
    233e:	10 82       	st	Z, r1
		Serial.println("Access denied");
    2340:	6d e8       	ldi	r22, 0x8D	; 141
    2342:	72 e0       	ldi	r23, 0x02	; 2
    2344:	81 ed       	ldi	r24, 0xD1	; 209
    2346:	95 e0       	ldi	r25, 0x05	; 5
    2348:	0e 94 1a 5d 	call	0xba34	; 0xba34 <_ZN5Print7printlnEPKc>

}

void CheckKeyCard(String UID, bool *Keycard)
{
	String UnlogKey = " 30 45 66 A7";
    234c:	ce 01       	movw	r24, r28
    234e:	01 96       	adiw	r24, 0x01	; 1
    2350:	0e 94 19 62 	call	0xc432	; 0xc432 <_ZN6StringD1Ev>
		*Keycard = false;
		Serial.println("Access denied");
		
	}

}
    2354:	00 00       	nop
    2356:	2a 96       	adiw	r28, 0x0a	; 10
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	08 95       	ret

00002368 <_Z41__static_initialization_and_destruction_0ii>:
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	00 d0       	rcall	.+0      	; 0x236e <_Z41__static_initialization_and_destruction_0ii+0x6>
    236e:	1f 92       	push	r1
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	7c 83       	std	Y+4, r23	; 0x04
    237a:	6b 83       	std	Y+3, r22	; 0x03
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	51 f4       	brne	.+20     	; 0x2398 <_Z41__static_initialization_and_destruction_0ii+0x30>
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	31 f4       	brne	.+12     	; 0x2398 <_Z41__static_initialization_and_destruction_0ii+0x30>
#include "KeyCardAccess.h"

MFRC522 mfrc522(SS_PIN, RST_PIN);
    238c:	45 e0       	ldi	r20, 0x05	; 5
    238e:	65 e3       	ldi	r22, 0x35	; 53
    2390:	83 e5       	ldi	r24, 0x53	; 83
    2392:	94 e0       	ldi	r25, 0x04	; 4
    2394:	0e 94 5f 43 	call	0x86be	; 0x86be <_ZN7MFRC522C1Ehh>
		*Keycard = false;
		Serial.println("Access denied");
		
	}

}
    2398:	00 00       	nop
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	08 95       	ret

000023a8 <_GLOBAL__sub_I_mfrc522>:
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	6f ef       	ldi	r22, 0xFF	; 255
    23b2:	7f ef       	ldi	r23, 0xFF	; 255
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	d7 df       	rcall	.-82     	; 0x2368 <_Z41__static_initialization_and_destruction_0ii>
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	08 95       	ret

000023c0 <_Z8SetServoi>:
Servo myservo; // create servo object to control a servo
int val = 30;


void SetServo(int cm)
{
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	1f 92       	push	r1
    23c6:	1f 92       	push	r1
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
	if (cm < val)
    23d0:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <val>
    23d4:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <val+0x1>
    23d8:	29 81       	ldd	r18, Y+1	; 0x01
    23da:	3a 81       	ldd	r19, Y+2	; 0x02
    23dc:	28 17       	cp	r18, r24
    23de:	39 07       	cpc	r19, r25
    23e0:	44 f4       	brge	.+16     	; 0x23f2 <_Z8SetServoi+0x32>
	{
		myservo.write(cm); // cm bliver brugt til graderne af servoen
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	bc 01       	movw	r22, r24
    23e8:	83 e6       	ldi	r24, 0x63	; 99
    23ea:	94 e0       	ldi	r25, 0x04	; 4
    23ec:	0e 94 12 4f 	call	0x9e24	; 0x9e24 <_ZN5Servo5writeEi>
	}
	else
	{
		myservo.write(90);
	}
}
    23f0:	06 c0       	rjmp	.+12     	; 0x23fe <_Z8SetServoi+0x3e>
	{
		myservo.write(cm); // cm bliver brugt til graderne af servoen
	}
	else
	{
		myservo.write(90);
    23f2:	6a e5       	ldi	r22, 0x5A	; 90
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	83 e6       	ldi	r24, 0x63	; 99
    23f8:	94 e0       	ldi	r25, 0x04	; 4
    23fa:	0e 94 12 4f 	call	0x9e24	; 0x9e24 <_ZN5Servo5writeEi>
	}
}
    23fe:	00 00       	nop
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	08 95       	ret

0000240a <_Z41__static_initialization_and_destruction_0ii>:
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	00 d0       	rcall	.+0      	; 0x2410 <_Z41__static_initialization_and_destruction_0ii+0x6>
    2410:	1f 92       	push	r1
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	7c 83       	std	Y+4, r23	; 0x04
    241c:	6b 83       	std	Y+3, r22	; 0x03
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	41 f4       	brne	.+16     	; 0x2436 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	9c 81       	ldd	r25, Y+4	; 0x04
    242a:	01 96       	adiw	r24, 0x01	; 1
    242c:	21 f4       	brne	.+8      	; 0x2436 <_Z41__static_initialization_and_destruction_0ii+0x2c>
#include "Servos.h"

Servo myservo; // create servo object to control a servo
    242e:	83 e6       	ldi	r24, 0x63	; 99
    2430:	94 e0       	ldi	r25, 0x04	; 4
    2432:	0e 94 33 4e 	call	0x9c66	; 0x9c66 <_ZN5ServoC1Ev>
	}
	else
	{
		myservo.write(90);
	}
}
    2436:	00 00       	nop
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <_GLOBAL__sub_I_myservo>:
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	6f ef       	ldi	r22, 0xFF	; 255
    2450:	7f ef       	ldi	r23, 0xFF	; 255
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	d9 df       	rcall	.-78     	; 0x240a <_Z41__static_initialization_and_destruction_0ii>
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	08 95       	ret

0000245e <_ZN11SPISettingsC1Emhh>:
      SPDR = out;
      *p++ = in;
    }
    while (!(SPSR & _BV(SPIF))) ;
    *p = SPDR;
  }
    245e:	0f 93       	push	r16
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	28 97       	sbiw	r28, 0x08	; 8
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	4b 83       	std	Y+3, r20	; 0x03
    247a:	5c 83       	std	Y+4, r21	; 0x04
    247c:	6d 83       	std	Y+5, r22	; 0x05
    247e:	7e 83       	std	Y+6, r23	; 0x06
    2480:	2f 83       	std	Y+7, r18	; 0x07
    2482:	08 87       	std	Y+8, r16	; 0x08
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	ad 81       	ldd	r26, Y+5	; 0x05
    248a:	be 81       	ldd	r27, Y+6	; 0x06
    248c:	e9 81       	ldd	r30, Y+1	; 0x01
    248e:	fa 81       	ldd	r31, Y+2	; 0x02
    2490:	08 85       	ldd	r16, Y+8	; 0x08
    2492:	2f 81       	ldd	r18, Y+7	; 0x07
    2494:	ac 01       	movw	r20, r24
    2496:	bd 01       	movw	r22, r26
    2498:	cf 01       	movw	r24, r30
    249a:	0b d0       	rcall	.+22     	; 0x24b2 <_ZN11SPISettings16init_MightInlineEmhh>
    249c:	00 00       	nop
    249e:	28 96       	adiw	r28, 0x08	; 8
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	0f 91       	pop	r16
    24b0:	08 95       	ret

000024b2 <_ZN11SPISettings16init_MightInlineEmhh>:
  }
  SPISettings() {
    init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0);
  }
private:
  void init_MightInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    24b2:	0f 93       	push	r16
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	65 97       	sbiw	r28, 0x15	; 21
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	9f 87       	std	Y+15, r25	; 0x0f
    24ca:	8e 87       	std	Y+14, r24	; 0x0e
    24cc:	48 8b       	std	Y+16, r20	; 0x10
    24ce:	59 8b       	std	Y+17, r21	; 0x11
    24d0:	6a 8b       	std	Y+18, r22	; 0x12
    24d2:	7b 8b       	std	Y+19, r23	; 0x13
    24d4:	2c 8b       	std	Y+20, r18	; 0x14
    24d6:	0d 8b       	std	Y+21, r16	; 0x15
    24d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    24da:	9f 85       	ldd	r25, Y+15	; 0x0f
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	88 89       	ldd	r24, Y+16	; 0x10
    24e2:	99 89       	ldd	r25, Y+17	; 0x11
    24e4:	aa 89       	ldd	r26, Y+18	; 0x12
    24e6:	bb 89       	ldd	r27, Y+19	; 0x13
    24e8:	8b 83       	std	Y+3, r24	; 0x03
    24ea:	9c 83       	std	Y+4, r25	; 0x04
    24ec:	ad 83       	std	Y+5, r26	; 0x05
    24ee:	be 83       	std	Y+6, r27	; 0x06
    24f0:	8c 89       	ldd	r24, Y+20	; 0x14
    24f2:	8f 83       	std	Y+7, r24	; 0x07
    24f4:	8d 89       	ldd	r24, Y+21	; 0x15
    24f6:	88 87       	std	Y+8, r24	; 0x08
        clockDiv = 5;
      } else {
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	92 e1       	ldi	r25, 0x12	; 18
    24fc:	aa e7       	ldi	r26, 0x7A	; 122
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	89 87       	std	Y+9, r24	; 0x09
    2502:	9a 87       	std	Y+10, r25	; 0x0a
    2504:	ab 87       	std	Y+11, r26	; 0x0b
    2506:	bc 87       	std	Y+12, r27	; 0x0c
      clockDiv = 0;
    2508:	1d 86       	std	Y+13, r1	; 0x0d
      while (clockDiv < 6 && clock < clockSetting) {
    250a:	8d 85       	ldd	r24, Y+13	; 0x0d
    250c:	86 30       	cpi	r24, 0x06	; 6
    250e:	e8 f4       	brcc	.+58     	; 0x254a <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    2510:	2b 81       	ldd	r18, Y+3	; 0x03
    2512:	3c 81       	ldd	r19, Y+4	; 0x04
    2514:	4d 81       	ldd	r20, Y+5	; 0x05
    2516:	5e 81       	ldd	r21, Y+6	; 0x06
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	ab 85       	ldd	r26, Y+11	; 0x0b
    251e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2520:	28 17       	cp	r18, r24
    2522:	39 07       	cpc	r19, r25
    2524:	4a 07       	cpc	r20, r26
    2526:	5b 07       	cpc	r21, r27
    2528:	80 f4       	brcc	.+32     	; 0x254a <_ZN11SPISettings16init_MightInlineEmhh+0x98>
        clockSetting /= 2;
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2530:	bc 85       	ldd	r27, Y+12	; 0x0c
    2532:	b6 95       	lsr	r27
    2534:	a7 95       	ror	r26
    2536:	97 95       	ror	r25
    2538:	87 95       	ror	r24
    253a:	89 87       	std	Y+9, r24	; 0x09
    253c:	9a 87       	std	Y+10, r25	; 0x0a
    253e:	ab 87       	std	Y+11, r26	; 0x0b
    2540:	bc 87       	std	Y+12, r27	; 0x0c
        clockDiv++;
    2542:	8d 85       	ldd	r24, Y+13	; 0x0d
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	8d 87       	std	Y+13, r24	; 0x0d
    2548:	e0 cf       	rjmp	.-64     	; 0x250a <_ZN11SPISettings16init_MightInlineEmhh+0x58>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    254a:	8d 85       	ldd	r24, Y+13	; 0x0d
    254c:	86 30       	cpi	r24, 0x06	; 6
    254e:	11 f4       	brne	.+4      	; 0x2554 <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    clockDiv = 7;
    2550:	87 e0       	ldi	r24, 0x07	; 7
    2552:	8d 87       	std	Y+13, r24	; 0x0d

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    2554:	9d 85       	ldd	r25, Y+13	; 0x0d
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	89 27       	eor	r24, r25
    255a:	8d 87       	std	Y+13, r24	; 0x0d

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    255c:	8f 81       	ldd	r24, Y+7	; 0x07
    255e:	88 23       	and	r24, r24
    2560:	11 f4       	brne	.+4      	; 0x2566 <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    2562:	80 e7       	ldi	r24, 0x70	; 112
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    2566:	80 e5       	ldi	r24, 0x50	; 80
    2568:	98 85       	ldd	r25, Y+8	; 0x08
    256a:	9c 70       	andi	r25, 0x0C	; 12
    256c:	29 2f       	mov	r18, r25
    256e:	28 2b       	or	r18, r24
    2570:	8d 85       	ldd	r24, Y+13	; 0x0d
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	95 95       	asr	r25
    2578:	87 95       	ror	r24
    257a:	83 70       	andi	r24, 0x03	; 3
    257c:	82 2b       	or	r24, r18
    257e:	28 2f       	mov	r18, r24
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	fc 01       	movw	r30, r24
    2586:	20 83       	st	Z, r18
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    2588:	8d 85       	ldd	r24, Y+13	; 0x0d
    258a:	28 2f       	mov	r18, r24
    258c:	21 70       	andi	r18, 0x01	; 1
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	9a 81       	ldd	r25, Y+2	; 0x02
    2592:	fc 01       	movw	r30, r24
    2594:	21 83       	std	Z+1, r18	; 0x01
    init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0);
  }
private:
  void init_MightInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }
    2596:	00 00       	nop
    2598:	65 96       	adiw	r28, 0x15	; 21
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	0f 91       	pop	r16
    25aa:	08 95       	ret

000025ac <_ZN8SPIClass16beginTransactionE11SPISettings>:
  // https://github.com/arduino/Arduino/pull/2449

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	9b 83       	std	Y+3, r25	; 0x03
    25b8:	8a 83       	std	Y+2, r24	; 0x02
    if (interruptMode > 0) {
    25ba:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8SPIClass13interruptModeE>
    25be:	88 23       	and	r24, r24
    25c0:	31 f1       	breq	.+76     	; 0x260e <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
      uint8_t sreg = SREG;
    25c2:	8f e5       	ldi	r24, 0x5F	; 95
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	fc 01       	movw	r30, r24
    25c8:	80 81       	ld	r24, Z
    25ca:	89 83       	std	Y+1, r24	; 0x01
      noInterrupts();
    25cc:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    25ce:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8SPIClass13interruptModeE>
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	c9 f4       	brne	.+50     	; 0x2608 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
        interruptSave = SPI_AVR_EIMSK;
    25d6:	8d e3       	ldi	r24, 0x3D	; 61
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	fc 01       	movw	r30, r24
    25dc:	80 81       	ld	r24, Z
    25de:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    25e2:	8d e3       	ldi	r24, 0x3D	; 61
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	2d e3       	ldi	r18, 0x3D	; 61
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	f9 01       	movw	r30, r18
    25ec:	20 81       	ld	r18, Z
    25ee:	32 2f       	mov	r19, r18
    25f0:	20 91 fd 04 	lds	r18, 0x04FD	; 0x8004fd <_ZN8SPIClass13interruptMaskE>
    25f4:	20 95       	com	r18
    25f6:	23 23       	and	r18, r19
    25f8:	fc 01       	movw	r30, r24
    25fa:	20 83       	st	Z, r18
        SREG = sreg;
    25fc:	8f e5       	ldi	r24, 0x5F	; 95
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	29 81       	ldd	r18, Y+1	; 0x01
    2602:	fc 01       	movw	r30, r24
    2604:	20 83       	st	Z, r18
    2606:	03 c0       	rjmp	.+6      	; 0x260e <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
      } else
      #endif
      {
        interruptSave = sreg;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    260e:	8c e4       	ldi	r24, 0x4C	; 76
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	2a 81       	ldd	r18, Y+2	; 0x02
    2614:	fc 01       	movw	r30, r24
    2616:	20 83       	st	Z, r18
    SPSR = settings.spsr;
    2618:	8d e4       	ldi	r24, 0x4D	; 77
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	2b 81       	ldd	r18, Y+3	; 0x03
    261e:	fc 01       	movw	r30, r24
    2620:	20 83       	st	Z, r18
  }
    2622:	00 00       	nop
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	08 95       	ret

00002630 <_ZN8SPIClass14endTransactionEv>:
    while (!(SPSR & _BV(SPIF))) ;
    *p = SPDR;
  }
  // After performing a group of transfers and releasing the chip select
  // signal, this function allows others to access the SPI bus
  inline static void endTransaction(void) {
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	1f 92       	push	r1
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    263a:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8SPIClass13interruptModeE>
    263e:	88 23       	and	r24, r24
    2640:	e1 f0       	breq	.+56     	; 0x267a <_ZN8SPIClass14endTransactionEv+0x4a>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    2642:	8f e5       	ldi	r24, 0x5F	; 95
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	fc 01       	movw	r30, r24
    2648:	80 81       	ld	r24, Z
    264a:	89 83       	std	Y+1, r24	; 0x01
      #endif
      noInterrupts();
    264c:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    264e:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8SPIClass13interruptModeE>
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	61 f4       	brne	.+24     	; 0x266e <_ZN8SPIClass14endTransactionEv+0x3e>
        SPI_AVR_EIMSK = interruptSave;
    2656:	8d e3       	ldi	r24, 0x3D	; 61
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <_ZN8SPIClass13interruptSaveE>
    265e:	fc 01       	movw	r30, r24
    2660:	20 83       	st	Z, r18
        SREG = sreg;
    2662:	8f e5       	ldi	r24, 0x5F	; 95
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	29 81       	ldd	r18, Y+1	; 0x01
    2668:	fc 01       	movw	r30, r24
    266a:	20 83       	st	Z, r18
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    266c:	06 c0       	rjmp	.+12     	; 0x267a <_ZN8SPIClass14endTransactionEv+0x4a>
        SPI_AVR_EIMSK = interruptSave;
        SREG = sreg;
      } else
      #endif
      {
        SREG = interruptSave;
    266e:	8f e5       	ldi	r24, 0x5F	; 95
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <_ZN8SPIClass13interruptSaveE>
    2676:	fc 01       	movw	r30, r24
    2678:	20 83       	st	Z, r18
      }
    }
  }
    267a:	00 00       	nop
    267c:	0f 90       	pop	r0
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	08 95       	ret

00002684 <_ZN5PrintC1Ev>:
  }
  if (maxy >= miny) {
    *y1 = miny;
    *h = maxy - miny + 1;
  }
}
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	1f 92       	push	r1
    268a:	1f 92       	push	r1
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	2e e5       	ldi	r18, 0x5E	; 94
    2696:	33 e0       	ldi	r19, 0x03	; 3
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	9a 81       	ldd	r25, Y+2	; 0x02
    269c:	fc 01       	movw	r30, r24
    269e:	31 83       	std	Z+1, r19	; 0x01
    26a0:	20 83       	st	Z, r18
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	9a 81       	ldd	r25, Y+2	; 0x02
    26a6:	fc 01       	movw	r30, r24
    26a8:	13 82       	std	Z+3, r1	; 0x03
    26aa:	12 82       	std	Z+2, r1	; 0x02
    26ac:	00 00       	nop
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	1f 92       	push	r1
    26be:	1f 92       	push	r1
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	08 95       	ret

000026d6 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	1f 92       	push	r1
    26dc:	1f 92       	push	r1
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	00 00       	nop
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <_ZNK12Adafruit_GFX5widthEv>:
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	1f 92       	push	r1
    26f8:	1f 92       	push	r1
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	9a 83       	std	Y+2, r25	; 0x02
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	fc 01       	movw	r30, r24
    2708:	80 85       	ldd	r24, Z+8	; 0x08
    270a:	91 85       	ldd	r25, Z+9	; 0x09
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	08 95       	ret

00002716 <_ZNK12Adafruit_GFX6heightEv>:
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	1f 92       	push	r1
    271c:	1f 92       	push	r1
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	fc 01       	movw	r30, r24
    272c:	82 85       	ldd	r24, Z+10	; 0x0a
    272e:	93 85       	ldd	r25, Z+11	; 0x0b
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	df 91       	pop	r29
    2736:	cf 91       	pop	r28
    2738:	08 95       	ret

0000273a <_ZNK12Adafruit_GFX11getRotationEv>:
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	1f 92       	push	r1
    2740:	1f 92       	push	r1
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	fc 01       	movw	r30, r24
    2750:	86 89       	ldd	r24, Z+22	; 0x16
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	08 95       	ret

0000275c <_Z18pgm_read_glyph_ptrPK7GFXfonth>:
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	27 97       	sbiw	r28, 0x07	; 7
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	9e 83       	std	Y+6, r25	; 0x06
    2772:	8d 83       	std	Y+5, r24	; 0x05
    2774:	6f 83       	std	Y+7, r22	; 0x07
    2776:	8f 81       	ldd	r24, Y+7	; 0x07
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	c9 01       	movw	r24, r18
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	ac 01       	movw	r20, r24
    278c:	42 1b       	sub	r20, r18
    278e:	53 0b       	sbc	r21, r19
    2790:	9a 01       	movw	r18, r20
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	02 96       	adiw	r24, 0x02	; 2
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	fc 01       	movw	r30, r24
    27a2:	45 91       	lpm	r20, Z+
    27a4:	54 91       	lpm	r21, Z
    27a6:	cf 01       	movw	r24, r30
    27a8:	5c 83       	std	Y+4, r21	; 0x04
    27aa:	4b 83       	std	Y+3, r20	; 0x03
    27ac:	9a 83       	std	Y+2, r25	; 0x02
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	82 0f       	add	r24, r18
    27b6:	93 1f       	adc	r25, r19
    27b8:	27 96       	adiw	r28, 0x07	; 7
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	08 95       	ret

000027ca <_Z19pgm_read_bitmap_ptrPK7GFXfont>:
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <_Z19pgm_read_bitmap_ptrPK7GFXfont+0x6>
    27d0:	00 d0       	rcall	.+0      	; 0x27d2 <_Z19pgm_read_bitmap_ptrPK7GFXfont+0x8>
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	8d 81       	ldd	r24, Y+5	; 0x05
    27dc:	9e 81       	ldd	r25, Y+6	; 0x06
    27de:	9a 83       	std	Y+2, r25	; 0x02
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
    27e6:	fc 01       	movw	r30, r24
    27e8:	25 91       	lpm	r18, Z+
    27ea:	34 91       	lpm	r19, Z
    27ec:	cf 01       	movw	r24, r30
    27ee:	3c 83       	std	Y+4, r19	; 0x04
    27f0:	2b 83       	std	Y+3, r18	; 0x03
    27f2:	9a 83       	std	Y+2, r25	; 0x02
    27f4:	89 83       	std	Y+1, r24	; 0x01
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	26 96       	adiw	r28, 0x06	; 6
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	08 95       	ret

0000280c <_ZN12Adafruit_GFXC1Eii>:
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	00 d0       	rcall	.+0      	; 0x2812 <_ZN12Adafruit_GFXC1Eii+0x6>
    2812:	00 d0       	rcall	.+0      	; 0x2814 <_ZN12Adafruit_GFXC1Eii+0x8>
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	7c 83       	std	Y+4, r23	; 0x04
    281e:	6b 83       	std	Y+3, r22	; 0x03
    2820:	5e 83       	std	Y+6, r21	; 0x06
    2822:	4d 83       	std	Y+5, r20	; 0x05
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	2d df       	rcall	.-422    	; 0x2684 <_ZN5PrintC1Ev>
    282a:	21 ea       	ldi	r18, 0xA1	; 161
    282c:	32 e0       	ldi	r19, 0x02	; 2
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	fc 01       	movw	r30, r24
    2834:	31 83       	std	Z+1, r19	; 0x01
    2836:	20 83       	st	Z, r18
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	2b 81       	ldd	r18, Y+3	; 0x03
    283e:	3c 81       	ldd	r19, Y+4	; 0x04
    2840:	fc 01       	movw	r30, r24
    2842:	35 83       	std	Z+5, r19	; 0x05
    2844:	24 83       	std	Z+4, r18	; 0x04
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	9a 81       	ldd	r25, Y+2	; 0x02
    284a:	2d 81       	ldd	r18, Y+5	; 0x05
    284c:	3e 81       	ldd	r19, Y+6	; 0x06
    284e:	fc 01       	movw	r30, r24
    2850:	37 83       	std	Z+7, r19	; 0x07
    2852:	26 83       	std	Z+6, r18	; 0x06
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	fc 01       	movw	r30, r24
    285a:	24 81       	ldd	r18, Z+4	; 0x04
    285c:	35 81       	ldd	r19, Z+5	; 0x05
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	9a 81       	ldd	r25, Y+2	; 0x02
    2862:	fc 01       	movw	r30, r24
    2864:	31 87       	std	Z+9, r19	; 0x09
    2866:	20 87       	std	Z+8, r18	; 0x08
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	fc 01       	movw	r30, r24
    286e:	26 81       	ldd	r18, Z+6	; 0x06
    2870:	37 81       	ldd	r19, Z+7	; 0x07
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	fc 01       	movw	r30, r24
    2878:	33 87       	std	Z+11, r19	; 0x0b
    287a:	22 87       	std	Z+10, r18	; 0x0a
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	9a 81       	ldd	r25, Y+2	; 0x02
    2880:	fc 01       	movw	r30, r24
    2882:	16 8a       	std	Z+22, r1	; 0x16
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	fc 01       	movw	r30, r24
    288a:	15 86       	std	Z+13, r1	; 0x0d
    288c:	14 86       	std	Z+12, r1	; 0x0c
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	fc 01       	movw	r30, r24
    2894:	24 85       	ldd	r18, Z+12	; 0x0c
    2896:	35 85       	ldd	r19, Z+13	; 0x0d
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	fc 01       	movw	r30, r24
    289e:	37 87       	std	Z+15, r19	; 0x0f
    28a0:	26 87       	std	Z+14, r18	; 0x0e
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	21 e0       	ldi	r18, 0x01	; 1
    28a8:	fc 01       	movw	r30, r24
    28aa:	25 8b       	std	Z+21, r18	; 0x15
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	9a 81       	ldd	r25, Y+2	; 0x02
    28b0:	fc 01       	movw	r30, r24
    28b2:	25 89       	ldd	r18, Z+21	; 0x15
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	fc 01       	movw	r30, r24
    28ba:	24 8b       	std	Z+20, r18	; 0x14
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	2f ef       	ldi	r18, 0xFF	; 255
    28c2:	3f ef       	ldi	r19, 0xFF	; 255
    28c4:	fc 01       	movw	r30, r24
    28c6:	33 8b       	std	Z+19, r19	; 0x13
    28c8:	22 8b       	std	Z+18, r18	; 0x12
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	fc 01       	movw	r30, r24
    28d0:	22 89       	ldd	r18, Z+18	; 0x12
    28d2:	33 89       	ldd	r19, Z+19	; 0x13
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	fc 01       	movw	r30, r24
    28da:	31 8b       	std	Z+17, r19	; 0x11
    28dc:	20 8b       	std	Z+16, r18	; 0x10
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	21 e0       	ldi	r18, 0x01	; 1
    28e4:	fc 01       	movw	r30, r24
    28e6:	27 8b       	std	Z+23, r18	; 0x17
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	fc 01       	movw	r30, r24
    28ee:	10 8e       	std	Z+24, r1	; 0x18
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	fc 01       	movw	r30, r24
    28f6:	12 8e       	std	Z+26, r1	; 0x1a
    28f8:	11 8e       	std	Z+25, r1	; 0x19
    28fa:	00 00       	nop
    28fc:	26 96       	adiw	r28, 0x06	; 6
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	08 95       	ret

0000290e <_ZN12Adafruit_GFX9writeLineEiiiij>:
    290e:	ef 92       	push	r14
    2910:	ff 92       	push	r15
    2912:	0f 93       	push	r16
    2914:	1f 93       	push	r17
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	6e 97       	sbiw	r28, 0x1e	; 30
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	9c 8b       	std	Y+20, r25	; 0x14
    292c:	8b 8b       	std	Y+19, r24	; 0x13
    292e:	7e 8b       	std	Y+22, r23	; 0x16
    2930:	6d 8b       	std	Y+21, r22	; 0x15
    2932:	58 8f       	std	Y+24, r21	; 0x18
    2934:	4f 8b       	std	Y+23, r20	; 0x17
    2936:	3a 8f       	std	Y+26, r19	; 0x1a
    2938:	29 8f       	std	Y+25, r18	; 0x19
    293a:	1c 8f       	std	Y+28, r17	; 0x1c
    293c:	0b 8f       	std	Y+27, r16	; 0x1b
    293e:	fe 8e       	std	Y+30, r15	; 0x1e
    2940:	ed 8e       	std	Y+29, r14	; 0x1d
    2942:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2944:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2946:	8f 89       	ldd	r24, Y+23	; 0x17
    2948:	98 8d       	ldd	r25, Y+24	; 0x18
    294a:	a9 01       	movw	r20, r18
    294c:	48 1b       	sub	r20, r24
    294e:	59 0b       	sbc	r21, r25
    2950:	ca 01       	movw	r24, r20
    2952:	99 23       	and	r25, r25
    2954:	1c f4       	brge	.+6      	; 0x295c <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    2956:	91 95       	neg	r25
    2958:	81 95       	neg	r24
    295a:	91 09       	sbc	r25, r1
    295c:	ac 01       	movw	r20, r24
    295e:	29 8d       	ldd	r18, Y+25	; 0x19
    2960:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2962:	8d 89       	ldd	r24, Y+21	; 0x15
    2964:	9e 89       	ldd	r25, Y+22	; 0x16
    2966:	b9 01       	movw	r22, r18
    2968:	68 1b       	sub	r22, r24
    296a:	79 0b       	sbc	r23, r25
    296c:	cb 01       	movw	r24, r22
    296e:	99 23       	and	r25, r25
    2970:	1c f4       	brge	.+6      	; 0x2978 <_ZN12Adafruit_GFX9writeLineEiiiij+0x6a>
    2972:	91 95       	neg	r25
    2974:	81 95       	neg	r24
    2976:	91 09       	sbc	r25, r1
    2978:	21 e0       	ldi	r18, 0x01	; 1
    297a:	84 17       	cp	r24, r20
    297c:	95 07       	cpc	r25, r21
    297e:	0c f0       	brlt	.+2      	; 0x2982 <_ZN12Adafruit_GFX9writeLineEiiiij+0x74>
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	82 2f       	mov	r24, r18
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	89 2b       	or	r24, r25
    2990:	c1 f0       	breq	.+48     	; 0x29c2 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb4>
    2992:	8d 89       	ldd	r24, Y+21	; 0x15
    2994:	9e 89       	ldd	r25, Y+22	; 0x16
    2996:	98 87       	std	Y+8, r25	; 0x08
    2998:	8f 83       	std	Y+7, r24	; 0x07
    299a:	8f 89       	ldd	r24, Y+23	; 0x17
    299c:	98 8d       	ldd	r25, Y+24	; 0x18
    299e:	9e 8b       	std	Y+22, r25	; 0x16
    29a0:	8d 8b       	std	Y+21, r24	; 0x15
    29a2:	8f 81       	ldd	r24, Y+7	; 0x07
    29a4:	98 85       	ldd	r25, Y+8	; 0x08
    29a6:	98 8f       	std	Y+24, r25	; 0x18
    29a8:	8f 8b       	std	Y+23, r24	; 0x17
    29aa:	89 8d       	ldd	r24, Y+25	; 0x19
    29ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29ae:	9a 87       	std	Y+10, r25	; 0x0a
    29b0:	89 87       	std	Y+9, r24	; 0x09
    29b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b6:	9a 8f       	std	Y+26, r25	; 0x1a
    29b8:	89 8f       	std	Y+25, r24	; 0x19
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	9c 8f       	std	Y+28, r25	; 0x1c
    29c0:	8b 8f       	std	Y+27, r24	; 0x1b
    29c2:	2d 89       	ldd	r18, Y+21	; 0x15
    29c4:	3e 89       	ldd	r19, Y+22	; 0x16
    29c6:	89 8d       	ldd	r24, Y+25	; 0x19
    29c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29ca:	82 17       	cp	r24, r18
    29cc:	93 07       	cpc	r25, r19
    29ce:	c4 f4       	brge	.+48     	; 0x2a00 <_ZN12Adafruit_GFX9writeLineEiiiij+0xf2>
    29d0:	8d 89       	ldd	r24, Y+21	; 0x15
    29d2:	9e 89       	ldd	r25, Y+22	; 0x16
    29d4:	9c 87       	std	Y+12, r25	; 0x0c
    29d6:	8b 87       	std	Y+11, r24	; 0x0b
    29d8:	89 8d       	ldd	r24, Y+25	; 0x19
    29da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29dc:	9e 8b       	std	Y+22, r25	; 0x16
    29de:	8d 8b       	std	Y+21, r24	; 0x15
    29e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    29e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    29e4:	9a 8f       	std	Y+26, r25	; 0x1a
    29e6:	89 8f       	std	Y+25, r24	; 0x19
    29e8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ea:	98 8d       	ldd	r25, Y+24	; 0x18
    29ec:	9e 87       	std	Y+14, r25	; 0x0e
    29ee:	8d 87       	std	Y+13, r24	; 0x0d
    29f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f4:	98 8f       	std	Y+24, r25	; 0x18
    29f6:	8f 8b       	std	Y+23, r24	; 0x17
    29f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fc:	9c 8f       	std	Y+28, r25	; 0x1c
    29fe:	8b 8f       	std	Y+27, r24	; 0x1b
    2a00:	29 8d       	ldd	r18, Y+25	; 0x19
    2a02:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2a04:	8d 89       	ldd	r24, Y+21	; 0x15
    2a06:	9e 89       	ldd	r25, Y+22	; 0x16
    2a08:	d9 01       	movw	r26, r18
    2a0a:	a8 1b       	sub	r26, r24
    2a0c:	b9 0b       	sbc	r27, r25
    2a0e:	cd 01       	movw	r24, r26
    2a10:	98 8b       	std	Y+16, r25	; 0x10
    2a12:	8f 87       	std	Y+15, r24	; 0x0f
    2a14:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2a16:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2a18:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1c:	f9 01       	movw	r30, r18
    2a1e:	e8 1b       	sub	r30, r24
    2a20:	f9 0b       	sbc	r31, r25
    2a22:	cf 01       	movw	r24, r30
    2a24:	99 23       	and	r25, r25
    2a26:	1c f4       	brge	.+6      	; 0x2a2e <_ZN12Adafruit_GFX9writeLineEiiiij+0x120>
    2a28:	91 95       	neg	r25
    2a2a:	81 95       	neg	r24
    2a2c:	91 09       	sbc	r25, r1
    2a2e:	9a 8b       	std	Y+18, r25	; 0x12
    2a30:	89 8b       	std	Y+17, r24	; 0x11
    2a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a34:	98 89       	ldd	r25, Y+16	; 0x10
    2a36:	99 23       	and	r25, r25
    2a38:	0c f4       	brge	.+2      	; 0x2a3c <_ZN12Adafruit_GFX9writeLineEiiiij+0x12e>
    2a3a:	01 96       	adiw	r24, 0x01	; 1
    2a3c:	95 95       	asr	r25
    2a3e:	87 95       	ror	r24
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	2f 89       	ldd	r18, Y+23	; 0x17
    2a46:	38 8d       	ldd	r19, Y+24	; 0x18
    2a48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4c:	28 17       	cp	r18, r24
    2a4e:	39 07       	cpc	r19, r25
    2a50:	2c f4       	brge	.+10     	; 0x2a5c <_ZN12Adafruit_GFX9writeLineEiiiij+0x14e>
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03
    2a5a:	04 c0       	rjmp	.+8      	; 0x2a64 <_ZN12Adafruit_GFX9writeLineEiiiij+0x156>
    2a5c:	8f ef       	ldi	r24, 0xFF	; 255
    2a5e:	9f ef       	ldi	r25, 0xFF	; 255
    2a60:	9c 83       	std	Y+4, r25	; 0x04
    2a62:	8b 83       	std	Y+3, r24	; 0x03
    2a64:	2d 89       	ldd	r18, Y+21	; 0x15
    2a66:	3e 89       	ldd	r19, Y+22	; 0x16
    2a68:	89 8d       	ldd	r24, Y+25	; 0x19
    2a6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a6c:	82 17       	cp	r24, r18
    2a6e:	93 07       	cpc	r25, r19
    2a70:	0c f4       	brge	.+2      	; 0x2a74 <_ZN12Adafruit_GFX9writeLineEiiiij+0x166>
    2a72:	4d c0       	rjmp	.+154    	; 0x2b0e <_ZN12Adafruit_GFX9writeLineEiiiij+0x200>
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	89 2b       	or	r24, r25
    2a7a:	99 f0       	breq	.+38     	; 0x2aa2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x194>
    2a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a80:	dc 01       	movw	r26, r24
    2a82:	8d 91       	ld	r24, X+
    2a84:	9c 91       	ld	r25, X
    2a86:	0c 96       	adiw	r24, 0x0c	; 12
    2a88:	dc 01       	movw	r26, r24
    2a8a:	ed 91       	ld	r30, X+
    2a8c:	fc 91       	ld	r31, X
    2a8e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2a90:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2a92:	4d 89       	ldd	r20, Y+21	; 0x15
    2a94:	5e 89       	ldd	r21, Y+22	; 0x16
    2a96:	6f 89       	ldd	r22, Y+23	; 0x17
    2a98:	78 8d       	ldd	r23, Y+24	; 0x18
    2a9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9e:	19 95       	eicall
    2aa0:	12 c0       	rjmp	.+36     	; 0x2ac6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x1b8>
    2aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	80 81       	ld	r24, Z
    2aaa:	91 81       	ldd	r25, Z+1	; 0x01
    2aac:	0c 96       	adiw	r24, 0x0c	; 12
    2aae:	dc 01       	movw	r26, r24
    2ab0:	ed 91       	ld	r30, X+
    2ab2:	fc 91       	ld	r31, X
    2ab4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2ab6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2ab8:	4f 89       	ldd	r20, Y+23	; 0x17
    2aba:	58 8d       	ldd	r21, Y+24	; 0x18
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac4:	19 95       	eicall
    2ac6:	29 81       	ldd	r18, Y+1	; 0x01
    2ac8:	3a 81       	ldd	r19, Y+2	; 0x02
    2aca:	89 89       	ldd	r24, Y+17	; 0x11
    2acc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ace:	f9 01       	movw	r30, r18
    2ad0:	e8 1b       	sub	r30, r24
    2ad2:	f9 0b       	sbc	r31, r25
    2ad4:	cf 01       	movw	r24, r30
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ade:	99 23       	and	r25, r25
    2ae0:	84 f4       	brge	.+32     	; 0x2b02 <_ZN12Adafruit_GFX9writeLineEiiiij+0x1f4>
    2ae2:	2f 89       	ldd	r18, Y+23	; 0x17
    2ae4:	38 8d       	ldd	r19, Y+24	; 0x18
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	82 0f       	add	r24, r18
    2aec:	93 1f       	adc	r25, r19
    2aee:	98 8f       	std	Y+24, r25	; 0x18
    2af0:	8f 8b       	std	Y+23, r24	; 0x17
    2af2:	29 81       	ldd	r18, Y+1	; 0x01
    2af4:	3a 81       	ldd	r19, Y+2	; 0x02
    2af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af8:	98 89       	ldd	r25, Y+16	; 0x10
    2afa:	82 0f       	add	r24, r18
    2afc:	93 1f       	adc	r25, r19
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
    2b02:	8d 89       	ldd	r24, Y+21	; 0x15
    2b04:	9e 89       	ldd	r25, Y+22	; 0x16
    2b06:	01 96       	adiw	r24, 0x01	; 1
    2b08:	9e 8b       	std	Y+22, r25	; 0x16
    2b0a:	8d 8b       	std	Y+21, r24	; 0x15
    2b0c:	ab cf       	rjmp	.-170    	; 0x2a64 <_ZN12Adafruit_GFX9writeLineEiiiij+0x156>
    2b0e:	00 00       	nop
    2b10:	6e 96       	adiw	r28, 0x1e	; 30
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	1f 91       	pop	r17
    2b22:	0f 91       	pop	r16
    2b24:	ff 90       	pop	r15
    2b26:	ef 90       	pop	r14
    2b28:	08 95       	ret

00002b2a <_ZN12Adafruit_GFX10startWriteEv>:
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	1f 92       	push	r1
    2b30:	1f 92       	push	r1
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	9a 83       	std	Y+2, r25	; 0x02
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	00 00       	nop
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	08 95       	ret

00002b46 <_ZN12Adafruit_GFX10writePixelEiij>:
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	28 97       	sbiw	r28, 0x08	; 8
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    2b5e:	7c 83       	std	Y+4, r23	; 0x04
    2b60:	6b 83       	std	Y+3, r22	; 0x03
    2b62:	5e 83       	std	Y+6, r21	; 0x06
    2b64:	4d 83       	std	Y+5, r20	; 0x05
    2b66:	38 87       	std	Y+8, r19	; 0x08
    2b68:	2f 83       	std	Y+7, r18	; 0x07
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6e:	dc 01       	movw	r26, r24
    2b70:	8d 91       	ld	r24, X+
    2b72:	9c 91       	ld	r25, X
    2b74:	08 96       	adiw	r24, 0x08	; 8
    2b76:	dc 01       	movw	r26, r24
    2b78:	ed 91       	ld	r30, X+
    2b7a:	fc 91       	ld	r31, X
    2b7c:	2f 81       	ldd	r18, Y+7	; 0x07
    2b7e:	38 85       	ldd	r19, Y+8	; 0x08
    2b80:	4d 81       	ldd	r20, Y+5	; 0x05
    2b82:	5e 81       	ldd	r21, Y+6	; 0x06
    2b84:	6b 81       	ldd	r22, Y+3	; 0x03
    2b86:	7c 81       	ldd	r23, Y+4	; 0x04
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8c:	19 95       	eicall
    2b8e:	00 00       	nop
    2b90:	28 96       	adiw	r28, 0x08	; 8
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	08 95       	ret

00002ba2 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    2ba2:	0f 93       	push	r16
    2ba4:	1f 93       	push	r17
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	2a 97       	sbiw	r28, 0x0a	; 10
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	9a 83       	std	Y+2, r25	; 0x02
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	7c 83       	std	Y+4, r23	; 0x04
    2bc0:	6b 83       	std	Y+3, r22	; 0x03
    2bc2:	5e 83       	std	Y+6, r21	; 0x06
    2bc4:	4d 83       	std	Y+5, r20	; 0x05
    2bc6:	38 87       	std	Y+8, r19	; 0x08
    2bc8:	2f 83       	std	Y+7, r18	; 0x07
    2bca:	1a 87       	std	Y+10, r17	; 0x0a
    2bcc:	09 87       	std	Y+9, r16	; 0x09
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	8d 91       	ld	r24, X+
    2bd6:	9c 91       	ld	r25, X
    2bd8:	4c 96       	adiw	r24, 0x1c	; 28
    2bda:	dc 01       	movw	r26, r24
    2bdc:	ed 91       	ld	r30, X+
    2bde:	fc 91       	ld	r31, X
    2be0:	a9 85       	ldd	r26, Y+9	; 0x09
    2be2:	ba 85       	ldd	r27, Y+10	; 0x0a
    2be4:	2f 81       	ldd	r18, Y+7	; 0x07
    2be6:	38 85       	ldd	r19, Y+8	; 0x08
    2be8:	4d 81       	ldd	r20, Y+5	; 0x05
    2bea:	5e 81       	ldd	r21, Y+6	; 0x06
    2bec:	6b 81       	ldd	r22, Y+3	; 0x03
    2bee:	7c 81       	ldd	r23, Y+4	; 0x04
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	8d 01       	movw	r16, r26
    2bf6:	19 95       	eicall
    2bf8:	00 00       	nop
    2bfa:	2a 96       	adiw	r28, 0x0a	; 10
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	08 95       	ret

00002c10 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	2a 97       	sbiw	r28, 0x0a	; 10
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	7c 83       	std	Y+4, r23	; 0x04
    2c2e:	6b 83       	std	Y+3, r22	; 0x03
    2c30:	5e 83       	std	Y+6, r21	; 0x06
    2c32:	4d 83       	std	Y+5, r20	; 0x05
    2c34:	38 87       	std	Y+8, r19	; 0x08
    2c36:	2f 83       	std	Y+7, r18	; 0x07
    2c38:	1a 87       	std	Y+10, r17	; 0x0a
    2c3a:	09 87       	std	Y+9, r16	; 0x09
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c40:	dc 01       	movw	r26, r24
    2c42:	8d 91       	ld	r24, X+
    2c44:	9c 91       	ld	r25, X
    2c46:	4e 96       	adiw	r24, 0x1e	; 30
    2c48:	dc 01       	movw	r26, r24
    2c4a:	ed 91       	ld	r30, X+
    2c4c:	fc 91       	ld	r31, X
    2c4e:	a9 85       	ldd	r26, Y+9	; 0x09
    2c50:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c52:	2f 81       	ldd	r18, Y+7	; 0x07
    2c54:	38 85       	ldd	r19, Y+8	; 0x08
    2c56:	4d 81       	ldd	r20, Y+5	; 0x05
    2c58:	5e 81       	ldd	r21, Y+6	; 0x06
    2c5a:	6b 81       	ldd	r22, Y+3	; 0x03
    2c5c:	7c 81       	ldd	r23, Y+4	; 0x04
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	8d 01       	movw	r16, r26
    2c64:	19 95       	eicall
    2c66:	00 00       	nop
    2c68:	2a 96       	adiw	r28, 0x0a	; 10
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    2c7e:	ef 92       	push	r14
    2c80:	ff 92       	push	r15
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	2c 97       	sbiw	r28, 0x0c	; 12
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	7c 83       	std	Y+4, r23	; 0x04
    2ca0:	6b 83       	std	Y+3, r22	; 0x03
    2ca2:	5e 83       	std	Y+6, r21	; 0x06
    2ca4:	4d 83       	std	Y+5, r20	; 0x05
    2ca6:	38 87       	std	Y+8, r19	; 0x08
    2ca8:	2f 83       	std	Y+7, r18	; 0x07
    2caa:	1a 87       	std	Y+10, r17	; 0x0a
    2cac:	09 87       	std	Y+9, r16	; 0x09
    2cae:	fc 86       	std	Y+12, r15	; 0x0c
    2cb0:	eb 86       	std	Y+11, r14	; 0x0b
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	8d 91       	ld	r24, X+
    2cba:	9c 91       	ld	r25, X
    2cbc:	80 96       	adiw	r24, 0x20	; 32
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	ed 91       	ld	r30, X+
    2cc2:	fc 91       	ld	r31, X
    2cc4:	0b 85       	ldd	r16, Y+11	; 0x0b
    2cc6:	1c 85       	ldd	r17, Y+12	; 0x0c
    2cc8:	a9 85       	ldd	r26, Y+9	; 0x09
    2cca:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ccc:	2f 81       	ldd	r18, Y+7	; 0x07
    2cce:	38 85       	ldd	r19, Y+8	; 0x08
    2cd0:	4d 81       	ldd	r20, Y+5	; 0x05
    2cd2:	5e 81       	ldd	r21, Y+6	; 0x06
    2cd4:	6b 81       	ldd	r22, Y+3	; 0x03
    2cd6:	7c 81       	ldd	r23, Y+4	; 0x04
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	9a 81       	ldd	r25, Y+2	; 0x02
    2cdc:	78 01       	movw	r14, r16
    2cde:	8d 01       	movw	r16, r26
    2ce0:	19 95       	eicall
    2ce2:	00 00       	nop
    2ce4:	2c 96       	adiw	r28, 0x0c	; 12
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	df 91       	pop	r29
    2cf2:	cf 91       	pop	r28
    2cf4:	1f 91       	pop	r17
    2cf6:	0f 91       	pop	r16
    2cf8:	ff 90       	pop	r15
    2cfa:	ef 90       	pop	r14
    2cfc:	08 95       	ret

00002cfe <_ZN12Adafruit_GFX8endWriteEv>:
    2cfe:	cf 93       	push	r28
    2d00:	df 93       	push	r29
    2d02:	1f 92       	push	r1
    2d04:	1f 92       	push	r1
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	00 00       	nop
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	08 95       	ret

00002d1a <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	2a 97       	sbiw	r28, 0x0a	; 10
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	7c 83       	std	Y+4, r23	; 0x04
    2d3c:	6b 83       	std	Y+3, r22	; 0x03
    2d3e:	5e 83       	std	Y+6, r21	; 0x06
    2d40:	4d 83       	std	Y+5, r20	; 0x05
    2d42:	38 87       	std	Y+8, r19	; 0x08
    2d44:	2f 83       	std	Y+7, r18	; 0x07
    2d46:	1a 87       	std	Y+10, r17	; 0x0a
    2d48:	09 87       	std	Y+9, r16	; 0x09
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	dc 01       	movw	r26, r24
    2d50:	8d 91       	ld	r24, X+
    2d52:	9c 91       	ld	r25, X
    2d54:	0a 96       	adiw	r24, 0x0a	; 10
    2d56:	fc 01       	movw	r30, r24
    2d58:	20 81       	ld	r18, Z
    2d5a:	31 81       	ldd	r19, Z+1	; 0x01
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d60:	f9 01       	movw	r30, r18
    2d62:	19 95       	eicall
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	dc 01       	movw	r26, r24
    2d6a:	8d 91       	ld	r24, X+
    2d6c:	9c 91       	ld	r25, X
    2d6e:	44 96       	adiw	r24, 0x14	; 20
    2d70:	dc 01       	movw	r26, r24
    2d72:	ed 91       	ld	r30, X+
    2d74:	fc 91       	ld	r31, X
    2d76:	2d 81       	ldd	r18, Y+5	; 0x05
    2d78:	3e 81       	ldd	r19, Y+6	; 0x06
    2d7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d7c:	98 85       	ldd	r25, Y+8	; 0x08
    2d7e:	82 0f       	add	r24, r18
    2d80:	93 1f       	adc	r25, r19
    2d82:	dc 01       	movw	r26, r24
    2d84:	11 97       	sbiw	r26, 0x01	; 1
    2d86:	09 85       	ldd	r16, Y+9	; 0x09
    2d88:	1a 85       	ldd	r17, Y+10	; 0x0a
    2d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d8e:	4d 81       	ldd	r20, Y+5	; 0x05
    2d90:	5e 81       	ldd	r21, Y+6	; 0x06
    2d92:	6b 81       	ldd	r22, Y+3	; 0x03
    2d94:	7c 81       	ldd	r23, Y+4	; 0x04
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	78 01       	movw	r14, r16
    2d9c:	8d 01       	movw	r16, r26
    2d9e:	19 95       	eicall
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	fc 01       	movw	r30, r24
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	46 96       	adiw	r24, 0x16	; 22
    2dac:	dc 01       	movw	r26, r24
    2dae:	2d 91       	ld	r18, X+
    2db0:	3c 91       	ld	r19, X
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	9a 81       	ldd	r25, Y+2	; 0x02
    2db6:	f9 01       	movw	r30, r18
    2db8:	19 95       	eicall
    2dba:	00 00       	nop
    2dbc:	2a 96       	adiw	r28, 0x0a	; 10
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	ff 90       	pop	r15
    2dd2:	ef 90       	pop	r14
    2dd4:	08 95       	ret

00002dd6 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    2dd6:	ef 92       	push	r14
    2dd8:	ff 92       	push	r15
    2dda:	0f 93       	push	r16
    2ddc:	1f 93       	push	r17
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	2a 97       	sbiw	r28, 0x0a	; 10
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	7c 83       	std	Y+4, r23	; 0x04
    2df8:	6b 83       	std	Y+3, r22	; 0x03
    2dfa:	5e 83       	std	Y+6, r21	; 0x06
    2dfc:	4d 83       	std	Y+5, r20	; 0x05
    2dfe:	38 87       	std	Y+8, r19	; 0x08
    2e00:	2f 83       	std	Y+7, r18	; 0x07
    2e02:	1a 87       	std	Y+10, r17	; 0x0a
    2e04:	09 87       	std	Y+9, r16	; 0x09
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	8d 91       	ld	r24, X+
    2e0e:	9c 91       	ld	r25, X
    2e10:	0a 96       	adiw	r24, 0x0a	; 10
    2e12:	fc 01       	movw	r30, r24
    2e14:	20 81       	ld	r18, Z
    2e16:	31 81       	ldd	r19, Z+1	; 0x01
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1c:	f9 01       	movw	r30, r18
    2e1e:	19 95       	eicall
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	dc 01       	movw	r26, r24
    2e26:	8d 91       	ld	r24, X+
    2e28:	9c 91       	ld	r25, X
    2e2a:	44 96       	adiw	r24, 0x14	; 20
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	ed 91       	ld	r30, X+
    2e30:	fc 91       	ld	r31, X
    2e32:	2b 81       	ldd	r18, Y+3	; 0x03
    2e34:	3c 81       	ldd	r19, Y+4	; 0x04
    2e36:	8f 81       	ldd	r24, Y+7	; 0x07
    2e38:	98 85       	ldd	r25, Y+8	; 0x08
    2e3a:	82 0f       	add	r24, r18
    2e3c:	93 1f       	adc	r25, r19
    2e3e:	9c 01       	movw	r18, r24
    2e40:	21 50       	subi	r18, 0x01	; 1
    2e42:	31 09       	sbc	r19, r1
    2e44:	09 85       	ldd	r16, Y+9	; 0x09
    2e46:	1a 85       	ldd	r17, Y+10	; 0x0a
    2e48:	ad 81       	ldd	r26, Y+5	; 0x05
    2e4a:	be 81       	ldd	r27, Y+6	; 0x06
    2e4c:	4d 81       	ldd	r20, Y+5	; 0x05
    2e4e:	5e 81       	ldd	r21, Y+6	; 0x06
    2e50:	6b 81       	ldd	r22, Y+3	; 0x03
    2e52:	7c 81       	ldd	r23, Y+4	; 0x04
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	9a 81       	ldd	r25, Y+2	; 0x02
    2e58:	78 01       	movw	r14, r16
    2e5a:	8d 01       	movw	r16, r26
    2e5c:	19 95       	eicall
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	9a 81       	ldd	r25, Y+2	; 0x02
    2e62:	fc 01       	movw	r30, r24
    2e64:	80 81       	ld	r24, Z
    2e66:	91 81       	ldd	r25, Z+1	; 0x01
    2e68:	46 96       	adiw	r24, 0x16	; 22
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	2d 91       	ld	r18, X+
    2e6e:	3c 91       	ld	r19, X
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	9a 81       	ldd	r25, Y+2	; 0x02
    2e74:	f9 01       	movw	r30, r18
    2e76:	19 95       	eicall
    2e78:	00 00       	nop
    2e7a:	2a 96       	adiw	r28, 0x0a	; 10
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	ff 90       	pop	r15
    2e90:	ef 90       	pop	r14
    2e92:	08 95       	ret

00002e94 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    2e94:	ef 92       	push	r14
    2e96:	ff 92       	push	r15
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	2e 97       	sbiw	r28, 0x0e	; 14
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	9c 83       	std	Y+4, r25	; 0x04
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
    2eb4:	7e 83       	std	Y+6, r23	; 0x06
    2eb6:	6d 83       	std	Y+5, r22	; 0x05
    2eb8:	58 87       	std	Y+8, r21	; 0x08
    2eba:	4f 83       	std	Y+7, r20	; 0x07
    2ebc:	3a 87       	std	Y+10, r19	; 0x0a
    2ebe:	29 87       	std	Y+9, r18	; 0x09
    2ec0:	1c 87       	std	Y+12, r17	; 0x0c
    2ec2:	0b 87       	std	Y+11, r16	; 0x0b
    2ec4:	fe 86       	std	Y+14, r15	; 0x0e
    2ec6:	ed 86       	std	Y+13, r14	; 0x0d
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ecc:	dc 01       	movw	r26, r24
    2ece:	8d 91       	ld	r24, X+
    2ed0:	9c 91       	ld	r25, X
    2ed2:	0a 96       	adiw	r24, 0x0a	; 10
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	20 81       	ld	r18, Z
    2ed8:	31 81       	ldd	r19, Z+1	; 0x01
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ede:	f9 01       	movw	r30, r18
    2ee0:	19 95       	eicall
    2ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee6:	9a 83       	std	Y+2, r25	; 0x02
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	2d 81       	ldd	r18, Y+5	; 0x05
    2eec:	3e 81       	ldd	r19, Y+6	; 0x06
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	28 0f       	add	r18, r24
    2ef4:	39 1f       	adc	r19, r25
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    2efa:	82 17       	cp	r24, r18
    2efc:	93 07       	cpc	r25, r19
    2efe:	dc f4       	brge	.+54     	; 0x2f36 <_ZN12Adafruit_GFX8fillRectEiiiij+0xa2>
    2f00:	8b 81       	ldd	r24, Y+3	; 0x03
    2f02:	9c 81       	ldd	r25, Y+4	; 0x04
    2f04:	dc 01       	movw	r26, r24
    2f06:	8d 91       	ld	r24, X+
    2f08:	9c 91       	ld	r25, X
    2f0a:	40 96       	adiw	r24, 0x10	; 16
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	ed 91       	ld	r30, X+
    2f10:	fc 91       	ld	r31, X
    2f12:	ad 85       	ldd	r26, Y+13	; 0x0d
    2f14:	be 85       	ldd	r27, Y+14	; 0x0e
    2f16:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f18:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f1a:	4f 81       	ldd	r20, Y+7	; 0x07
    2f1c:	58 85       	ldd	r21, Y+8	; 0x08
    2f1e:	69 81       	ldd	r22, Y+1	; 0x01
    2f20:	7a 81       	ldd	r23, Y+2	; 0x02
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	8d 01       	movw	r16, r26
    2f28:	19 95       	eicall
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	9a 83       	std	Y+2, r25	; 0x02
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	da cf       	rjmp	.-76     	; 0x2eea <_ZN12Adafruit_GFX8fillRectEiiiij+0x56>
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	80 81       	ld	r24, Z
    2f3e:	91 81       	ldd	r25, Z+1	; 0x01
    2f40:	46 96       	adiw	r24, 0x16	; 22
    2f42:	dc 01       	movw	r26, r24
    2f44:	2d 91       	ld	r18, X+
    2f46:	3c 91       	ld	r19, X
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4c:	f9 01       	movw	r30, r18
    2f4e:	19 95       	eicall
    2f50:	00 00       	nop
    2f52:	2e 96       	adiw	r28, 0x0e	; 14
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	1f 91       	pop	r17
    2f64:	0f 91       	pop	r16
    2f66:	ff 90       	pop	r15
    2f68:	ef 90       	pop	r14
    2f6a:	08 95       	ret

00002f6c <_ZN12Adafruit_GFX10fillScreenEj>:
    2f6c:	ef 92       	push	r14
    2f6e:	ff 92       	push	r15
    2f70:	0f 93       	push	r16
    2f72:	1f 93       	push	r17
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <_ZN12Adafruit_GFX10fillScreenEj+0xe>
    2f7a:	1f 92       	push	r1
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	9a 83       	std	Y+2, r25	; 0x02
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	7c 83       	std	Y+4, r23	; 0x04
    2f86:	6b 83       	std	Y+3, r22	; 0x03
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	8d 91       	ld	r24, X+
    2f90:	9c 91       	ld	r25, X
    2f92:	80 96       	adiw	r24, 0x20	; 32
    2f94:	dc 01       	movw	r26, r24
    2f96:	ed 91       	ld	r30, X+
    2f98:	fc 91       	ld	r31, X
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	1a 96       	adiw	r26, 0x0a	; 10
    2fa2:	4d 91       	ld	r20, X+
    2fa4:	5c 91       	ld	r21, X
    2fa6:	1b 97       	sbiw	r26, 0x0b	; 11
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	dc 01       	movw	r26, r24
    2fae:	18 96       	adiw	r26, 0x08	; 8
    2fb0:	2d 91       	ld	r18, X+
    2fb2:	3c 91       	ld	r19, X
    2fb4:	19 97       	sbiw	r26, 0x09	; 9
    2fb6:	6b 81       	ldd	r22, Y+3	; 0x03
    2fb8:	7c 81       	ldd	r23, Y+4	; 0x04
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	7b 01       	movw	r14, r22
    2fc0:	8a 01       	movw	r16, r20
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	70 e0       	ldi	r23, 0x00	; 0
    2fca:	19 95       	eicall
    2fcc:	00 00       	nop
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	08 95       	ret

00002fe4 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	60 97       	sbiw	r28, 0x10	; 16
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
    3004:	78 87       	std	Y+8, r23	; 0x08
    3006:	6f 83       	std	Y+7, r22	; 0x07
    3008:	5a 87       	std	Y+10, r21	; 0x0a
    300a:	49 87       	std	Y+9, r20	; 0x09
    300c:	3c 87       	std	Y+12, r19	; 0x0c
    300e:	2b 87       	std	Y+11, r18	; 0x0b
    3010:	1e 87       	std	Y+14, r17	; 0x0e
    3012:	0d 87       	std	Y+13, r16	; 0x0d
    3014:	f8 8a       	std	Y+16, r15	; 0x10
    3016:	ef 86       	std	Y+15, r14	; 0x0f
    3018:	2f 81       	ldd	r18, Y+7	; 0x07
    301a:	38 85       	ldd	r19, Y+8	; 0x08
    301c:	8b 85       	ldd	r24, Y+11	; 0x0b
    301e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3020:	28 17       	cp	r18, r24
    3022:	39 07       	cpc	r19, r25
    3024:	91 f5       	brne	.+100    	; 0x308a <_ZN12Adafruit_GFX8drawLineEiiiij+0xa6>
    3026:	29 85       	ldd	r18, Y+9	; 0x09
    3028:	3a 85       	ldd	r19, Y+10	; 0x0a
    302a:	8d 85       	ldd	r24, Y+13	; 0x0d
    302c:	9e 85       	ldd	r25, Y+14	; 0x0e
    302e:	82 17       	cp	r24, r18
    3030:	93 07       	cpc	r25, r19
    3032:	64 f4       	brge	.+24     	; 0x304c <_ZN12Adafruit_GFX8drawLineEiiiij+0x68>
    3034:	89 85       	ldd	r24, Y+9	; 0x09
    3036:	9a 85       	ldd	r25, Y+10	; 0x0a
    3038:	9a 83       	std	Y+2, r25	; 0x02
    303a:	89 83       	std	Y+1, r24	; 0x01
    303c:	8d 85       	ldd	r24, Y+13	; 0x0d
    303e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3040:	9a 87       	std	Y+10, r25	; 0x0a
    3042:	89 87       	std	Y+9, r24	; 0x09
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	9e 87       	std	Y+14, r25	; 0x0e
    304a:	8d 87       	std	Y+13, r24	; 0x0d
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	dc 01       	movw	r26, r24
    3052:	8d 91       	ld	r24, X+
    3054:	9c 91       	ld	r25, X
    3056:	4c 96       	adiw	r24, 0x1c	; 28
    3058:	dc 01       	movw	r26, r24
    305a:	ed 91       	ld	r30, X+
    305c:	fc 91       	ld	r31, X
    305e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3060:	3e 85       	ldd	r19, Y+14	; 0x0e
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	a9 01       	movw	r20, r18
    3068:	48 1b       	sub	r20, r24
    306a:	59 0b       	sbc	r21, r25
    306c:	ca 01       	movw	r24, r20
    306e:	9c 01       	movw	r18, r24
    3070:	2f 5f       	subi	r18, 0xFF	; 255
    3072:	3f 4f       	sbci	r19, 0xFF	; 255
    3074:	af 85       	ldd	r26, Y+15	; 0x0f
    3076:	b8 89       	ldd	r27, Y+16	; 0x10
    3078:	49 85       	ldd	r20, Y+9	; 0x09
    307a:	5a 85       	ldd	r21, Y+10	; 0x0a
    307c:	6f 81       	ldd	r22, Y+7	; 0x07
    307e:	78 85       	ldd	r23, Y+8	; 0x08
    3080:	8d 81       	ldd	r24, Y+5	; 0x05
    3082:	9e 81       	ldd	r25, Y+6	; 0x06
    3084:	8d 01       	movw	r16, r26
    3086:	19 95       	eicall
    3088:	6b c0       	rjmp	.+214    	; 0x3160 <_ZN12Adafruit_GFX8drawLineEiiiij+0x17c>
    308a:	29 85       	ldd	r18, Y+9	; 0x09
    308c:	3a 85       	ldd	r19, Y+10	; 0x0a
    308e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3090:	9e 85       	ldd	r25, Y+14	; 0x0e
    3092:	28 17       	cp	r18, r24
    3094:	39 07       	cpc	r19, r25
    3096:	91 f5       	brne	.+100    	; 0x30fc <_ZN12Adafruit_GFX8drawLineEiiiij+0x118>
    3098:	2f 81       	ldd	r18, Y+7	; 0x07
    309a:	38 85       	ldd	r19, Y+8	; 0x08
    309c:	8b 85       	ldd	r24, Y+11	; 0x0b
    309e:	9c 85       	ldd	r25, Y+12	; 0x0c
    30a0:	82 17       	cp	r24, r18
    30a2:	93 07       	cpc	r25, r19
    30a4:	64 f4       	brge	.+24     	; 0x30be <_ZN12Adafruit_GFX8drawLineEiiiij+0xda>
    30a6:	8f 81       	ldd	r24, Y+7	; 0x07
    30a8:	98 85       	ldd	r25, Y+8	; 0x08
    30aa:	9c 83       	std	Y+4, r25	; 0x04
    30ac:	8b 83       	std	Y+3, r24	; 0x03
    30ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    30b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    30b2:	98 87       	std	Y+8, r25	; 0x08
    30b4:	8f 83       	std	Y+7, r24	; 0x07
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ba:	9c 87       	std	Y+12, r25	; 0x0c
    30bc:	8b 87       	std	Y+11, r24	; 0x0b
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	9e 81       	ldd	r25, Y+6	; 0x06
    30c2:	dc 01       	movw	r26, r24
    30c4:	8d 91       	ld	r24, X+
    30c6:	9c 91       	ld	r25, X
    30c8:	4e 96       	adiw	r24, 0x1e	; 30
    30ca:	dc 01       	movw	r26, r24
    30cc:	ed 91       	ld	r30, X+
    30ce:	fc 91       	ld	r31, X
    30d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    30d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    30d4:	8f 81       	ldd	r24, Y+7	; 0x07
    30d6:	98 85       	ldd	r25, Y+8	; 0x08
    30d8:	a9 01       	movw	r20, r18
    30da:	48 1b       	sub	r20, r24
    30dc:	59 0b       	sbc	r21, r25
    30de:	ca 01       	movw	r24, r20
    30e0:	9c 01       	movw	r18, r24
    30e2:	2f 5f       	subi	r18, 0xFF	; 255
    30e4:	3f 4f       	sbci	r19, 0xFF	; 255
    30e6:	af 85       	ldd	r26, Y+15	; 0x0f
    30e8:	b8 89       	ldd	r27, Y+16	; 0x10
    30ea:	49 85       	ldd	r20, Y+9	; 0x09
    30ec:	5a 85       	ldd	r21, Y+10	; 0x0a
    30ee:	6f 81       	ldd	r22, Y+7	; 0x07
    30f0:	78 85       	ldd	r23, Y+8	; 0x08
    30f2:	8d 81       	ldd	r24, Y+5	; 0x05
    30f4:	9e 81       	ldd	r25, Y+6	; 0x06
    30f6:	8d 01       	movw	r16, r26
    30f8:	19 95       	eicall
    30fa:	32 c0       	rjmp	.+100    	; 0x3160 <_ZN12Adafruit_GFX8drawLineEiiiij+0x17c>
    30fc:	8d 81       	ldd	r24, Y+5	; 0x05
    30fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3100:	dc 01       	movw	r26, r24
    3102:	8d 91       	ld	r24, X+
    3104:	9c 91       	ld	r25, X
    3106:	0a 96       	adiw	r24, 0x0a	; 10
    3108:	fc 01       	movw	r30, r24
    310a:	20 81       	ld	r18, Z
    310c:	31 81       	ldd	r19, Z+1	; 0x01
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	9e 81       	ldd	r25, Y+6	; 0x06
    3112:	f9 01       	movw	r30, r18
    3114:	19 95       	eicall
    3116:	8d 81       	ldd	r24, Y+5	; 0x05
    3118:	9e 81       	ldd	r25, Y+6	; 0x06
    311a:	dc 01       	movw	r26, r24
    311c:	8d 91       	ld	r24, X+
    311e:	9c 91       	ld	r25, X
    3120:	44 96       	adiw	r24, 0x14	; 20
    3122:	dc 01       	movw	r26, r24
    3124:	ed 91       	ld	r30, X+
    3126:	fc 91       	ld	r31, X
    3128:	0f 85       	ldd	r16, Y+15	; 0x0f
    312a:	18 89       	ldd	r17, Y+16	; 0x10
    312c:	ad 85       	ldd	r26, Y+13	; 0x0d
    312e:	be 85       	ldd	r27, Y+14	; 0x0e
    3130:	2b 85       	ldd	r18, Y+11	; 0x0b
    3132:	3c 85       	ldd	r19, Y+12	; 0x0c
    3134:	49 85       	ldd	r20, Y+9	; 0x09
    3136:	5a 85       	ldd	r21, Y+10	; 0x0a
    3138:	6f 81       	ldd	r22, Y+7	; 0x07
    313a:	78 85       	ldd	r23, Y+8	; 0x08
    313c:	8d 81       	ldd	r24, Y+5	; 0x05
    313e:	9e 81       	ldd	r25, Y+6	; 0x06
    3140:	78 01       	movw	r14, r16
    3142:	8d 01       	movw	r16, r26
    3144:	19 95       	eicall
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	9e 81       	ldd	r25, Y+6	; 0x06
    314a:	fc 01       	movw	r30, r24
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	46 96       	adiw	r24, 0x16	; 22
    3152:	dc 01       	movw	r26, r24
    3154:	2d 91       	ld	r18, X+
    3156:	3c 91       	ld	r19, X
    3158:	8d 81       	ldd	r24, Y+5	; 0x05
    315a:	9e 81       	ldd	r25, Y+6	; 0x06
    315c:	f9 01       	movw	r30, r18
    315e:	19 95       	eicall
    3160:	00 00       	nop
    3162:	60 96       	adiw	r28, 0x10	; 16
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	08 95       	ret

0000317c <_ZN12Adafruit_GFX8drawRectEiiiij>:
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	2c 97       	sbiw	r28, 0x0c	; 12
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	9a 83       	std	Y+2, r25	; 0x02
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	7c 83       	std	Y+4, r23	; 0x04
    319e:	6b 83       	std	Y+3, r22	; 0x03
    31a0:	5e 83       	std	Y+6, r21	; 0x06
    31a2:	4d 83       	std	Y+5, r20	; 0x05
    31a4:	38 87       	std	Y+8, r19	; 0x08
    31a6:	2f 83       	std	Y+7, r18	; 0x07
    31a8:	1a 87       	std	Y+10, r17	; 0x0a
    31aa:	09 87       	std	Y+9, r16	; 0x09
    31ac:	fc 86       	std	Y+12, r15	; 0x0c
    31ae:	eb 86       	std	Y+11, r14	; 0x0b
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	9a 81       	ldd	r25, Y+2	; 0x02
    31b4:	dc 01       	movw	r26, r24
    31b6:	8d 91       	ld	r24, X+
    31b8:	9c 91       	ld	r25, X
    31ba:	0a 96       	adiw	r24, 0x0a	; 10
    31bc:	fc 01       	movw	r30, r24
    31be:	20 81       	ld	r18, Z
    31c0:	31 81       	ldd	r19, Z+1	; 0x01
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	9a 81       	ldd	r25, Y+2	; 0x02
    31c6:	f9 01       	movw	r30, r18
    31c8:	19 95       	eicall
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	9a 81       	ldd	r25, Y+2	; 0x02
    31ce:	dc 01       	movw	r26, r24
    31d0:	8d 91       	ld	r24, X+
    31d2:	9c 91       	ld	r25, X
    31d4:	42 96       	adiw	r24, 0x12	; 18
    31d6:	dc 01       	movw	r26, r24
    31d8:	ed 91       	ld	r30, X+
    31da:	fc 91       	ld	r31, X
    31dc:	ab 85       	ldd	r26, Y+11	; 0x0b
    31de:	bc 85       	ldd	r27, Y+12	; 0x0c
    31e0:	2f 81       	ldd	r18, Y+7	; 0x07
    31e2:	38 85       	ldd	r19, Y+8	; 0x08
    31e4:	4d 81       	ldd	r20, Y+5	; 0x05
    31e6:	5e 81       	ldd	r21, Y+6	; 0x06
    31e8:	6b 81       	ldd	r22, Y+3	; 0x03
    31ea:	7c 81       	ldd	r23, Y+4	; 0x04
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
    31f0:	8d 01       	movw	r16, r26
    31f2:	19 95       	eicall
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	fc 01       	movw	r30, r24
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	42 96       	adiw	r24, 0x12	; 18
    3200:	dc 01       	movw	r26, r24
    3202:	ed 91       	ld	r30, X+
    3204:	fc 91       	ld	r31, X
    3206:	2d 81       	ldd	r18, Y+5	; 0x05
    3208:	3e 81       	ldd	r19, Y+6	; 0x06
    320a:	89 85       	ldd	r24, Y+9	; 0x09
    320c:	9a 85       	ldd	r25, Y+10	; 0x0a
    320e:	82 0f       	add	r24, r18
    3210:	93 1f       	adc	r25, r19
    3212:	ac 01       	movw	r20, r24
    3214:	41 50       	subi	r20, 0x01	; 1
    3216:	51 09       	sbc	r21, r1
    3218:	ab 85       	ldd	r26, Y+11	; 0x0b
    321a:	bc 85       	ldd	r27, Y+12	; 0x0c
    321c:	2f 81       	ldd	r18, Y+7	; 0x07
    321e:	38 85       	ldd	r19, Y+8	; 0x08
    3220:	6b 81       	ldd	r22, Y+3	; 0x03
    3222:	7c 81       	ldd	r23, Y+4	; 0x04
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	8d 01       	movw	r16, r26
    322a:	19 95       	eicall
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	fc 01       	movw	r30, r24
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	40 96       	adiw	r24, 0x10	; 16
    3238:	dc 01       	movw	r26, r24
    323a:	ed 91       	ld	r30, X+
    323c:	fc 91       	ld	r31, X
    323e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3240:	bc 85       	ldd	r27, Y+12	; 0x0c
    3242:	29 85       	ldd	r18, Y+9	; 0x09
    3244:	3a 85       	ldd	r19, Y+10	; 0x0a
    3246:	4d 81       	ldd	r20, Y+5	; 0x05
    3248:	5e 81       	ldd	r21, Y+6	; 0x06
    324a:	6b 81       	ldd	r22, Y+3	; 0x03
    324c:	7c 81       	ldd	r23, Y+4	; 0x04
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	9a 81       	ldd	r25, Y+2	; 0x02
    3252:	8d 01       	movw	r16, r26
    3254:	19 95       	eicall
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	9a 81       	ldd	r25, Y+2	; 0x02
    325a:	fc 01       	movw	r30, r24
    325c:	80 81       	ld	r24, Z
    325e:	91 81       	ldd	r25, Z+1	; 0x01
    3260:	40 96       	adiw	r24, 0x10	; 16
    3262:	dc 01       	movw	r26, r24
    3264:	ed 91       	ld	r30, X+
    3266:	fc 91       	ld	r31, X
    3268:	2b 81       	ldd	r18, Y+3	; 0x03
    326a:	3c 81       	ldd	r19, Y+4	; 0x04
    326c:	8f 81       	ldd	r24, Y+7	; 0x07
    326e:	98 85       	ldd	r25, Y+8	; 0x08
    3270:	82 0f       	add	r24, r18
    3272:	93 1f       	adc	r25, r19
    3274:	bc 01       	movw	r22, r24
    3276:	61 50       	subi	r22, 0x01	; 1
    3278:	71 09       	sbc	r23, r1
    327a:	ab 85       	ldd	r26, Y+11	; 0x0b
    327c:	bc 85       	ldd	r27, Y+12	; 0x0c
    327e:	29 85       	ldd	r18, Y+9	; 0x09
    3280:	3a 85       	ldd	r19, Y+10	; 0x0a
    3282:	4d 81       	ldd	r20, Y+5	; 0x05
    3284:	5e 81       	ldd	r21, Y+6	; 0x06
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	9a 81       	ldd	r25, Y+2	; 0x02
    328a:	8d 01       	movw	r16, r26
    328c:	19 95       	eicall
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	fc 01       	movw	r30, r24
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	46 96       	adiw	r24, 0x16	; 22
    329a:	dc 01       	movw	r26, r24
    329c:	2d 91       	ld	r18, X+
    329e:	3c 91       	ld	r19, X
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	f9 01       	movw	r30, r18
    32a6:	19 95       	eicall
    32a8:	00 00       	nop
    32aa:	2c 96       	adiw	r28, 0x0c	; 12
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	df 91       	pop	r29
    32b8:	cf 91       	pop	r28
    32ba:	1f 91       	pop	r17
    32bc:	0f 91       	pop	r16
    32be:	ff 90       	pop	r15
    32c0:	ef 90       	pop	r14
    32c2:	08 95       	ret

000032c4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    32c4:	cf 92       	push	r12
    32c6:	df 92       	push	r13
    32c8:	ef 92       	push	r14
    32ca:	ff 92       	push	r15
    32cc:	0f 93       	push	r16
    32ce:	1f 93       	push	r17
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	68 97       	sbiw	r28, 0x18	; 24
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	cd bf       	out	0x3d, r28	; 61
    32e4:	9c 87       	std	Y+12, r25	; 0x0c
    32e6:	8b 87       	std	Y+11, r24	; 0x0b
    32e8:	7e 87       	std	Y+14, r23	; 0x0e
    32ea:	6d 87       	std	Y+13, r22	; 0x0d
    32ec:	58 8b       	std	Y+16, r21	; 0x10
    32ee:	4f 87       	std	Y+15, r20	; 0x0f
    32f0:	3a 8b       	std	Y+18, r19	; 0x12
    32f2:	29 8b       	std	Y+17, r18	; 0x11
    32f4:	1c 8b       	std	Y+20, r17	; 0x14
    32f6:	0b 8b       	std	Y+19, r16	; 0x13
    32f8:	fe 8a       	std	Y+22, r15	; 0x16
    32fa:	ed 8a       	std	Y+21, r14	; 0x15
    32fc:	d8 8e       	std	Y+24, r13	; 0x18
    32fe:	cf 8a       	std	Y+23, r12	; 0x17
    3300:	8b 89       	ldd	r24, Y+19	; 0x13
    3302:	9c 89       	ldd	r25, Y+20	; 0x14
    3304:	07 96       	adiw	r24, 0x07	; 7
    3306:	99 23       	and	r25, r25
    3308:	0c f4       	brge	.+2      	; 0x330c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x48>
    330a:	07 96       	adiw	r24, 0x07	; 7
    330c:	95 95       	asr	r25
    330e:	87 95       	ror	r24
    3310:	95 95       	asr	r25
    3312:	87 95       	ror	r24
    3314:	95 95       	asr	r25
    3316:	87 95       	ror	r24
    3318:	9f 83       	std	Y+7, r25	; 0x07
    331a:	8e 83       	std	Y+6, r24	; 0x06
    331c:	19 82       	std	Y+1, r1	; 0x01
    331e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3320:	9c 85       	ldd	r25, Y+12	; 0x0c
    3322:	dc 01       	movw	r26, r24
    3324:	8d 91       	ld	r24, X+
    3326:	9c 91       	ld	r25, X
    3328:	0a 96       	adiw	r24, 0x0a	; 10
    332a:	fc 01       	movw	r30, r24
    332c:	20 81       	ld	r18, Z
    332e:	31 81       	ldd	r19, Z+1	; 0x01
    3330:	8b 85       	ldd	r24, Y+11	; 0x0b
    3332:	9c 85       	ldd	r25, Y+12	; 0x0c
    3334:	f9 01       	movw	r30, r18
    3336:	19 95       	eicall
    3338:	1b 82       	std	Y+3, r1	; 0x03
    333a:	1a 82       	std	Y+2, r1	; 0x02
    333c:	2a 81       	ldd	r18, Y+2	; 0x02
    333e:	3b 81       	ldd	r19, Y+3	; 0x03
    3340:	8d 89       	ldd	r24, Y+21	; 0x15
    3342:	9e 89       	ldd	r25, Y+22	; 0x16
    3344:	28 17       	cp	r18, r24
    3346:	39 07       	cpc	r19, r25
    3348:	0c f0       	brlt	.+2      	; 0x334c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    334a:	65 c0       	rjmp	.+202    	; 0x3416 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x152>
    334c:	1d 82       	std	Y+5, r1	; 0x05
    334e:	1c 82       	std	Y+4, r1	; 0x04
    3350:	2c 81       	ldd	r18, Y+4	; 0x04
    3352:	3d 81       	ldd	r19, Y+5	; 0x05
    3354:	8b 89       	ldd	r24, Y+19	; 0x13
    3356:	9c 89       	ldd	r25, Y+20	; 0x14
    3358:	28 17       	cp	r18, r24
    335a:	39 07       	cpc	r19, r25
    335c:	0c f0       	brlt	.+2      	; 0x3360 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x9c>
    335e:	50 c0       	rjmp	.+160    	; 0x3400 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x13c>
    3360:	8c 81       	ldd	r24, Y+4	; 0x04
    3362:	9d 81       	ldd	r25, Y+5	; 0x05
    3364:	87 70       	andi	r24, 0x07	; 7
    3366:	99 27       	eor	r25, r25
    3368:	89 2b       	or	r24, r25
    336a:	21 f0       	breq	.+8      	; 0x3374 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xb0>
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	88 0f       	add	r24, r24
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	26 c0       	rjmp	.+76     	; 0x33c0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfc>
    3374:	4a 81       	ldd	r20, Y+2	; 0x02
    3376:	5b 81       	ldd	r21, Y+3	; 0x03
    3378:	8e 81       	ldd	r24, Y+6	; 0x06
    337a:	9f 81       	ldd	r25, Y+7	; 0x07
    337c:	48 9f       	mul	r20, r24
    337e:	90 01       	movw	r18, r0
    3380:	49 9f       	mul	r20, r25
    3382:	30 0d       	add	r19, r0
    3384:	58 9f       	mul	r21, r24
    3386:	30 0d       	add	r19, r0
    3388:	11 24       	eor	r1, r1
    338a:	8c 81       	ldd	r24, Y+4	; 0x04
    338c:	9d 81       	ldd	r25, Y+5	; 0x05
    338e:	99 23       	and	r25, r25
    3390:	0c f4       	brge	.+2      	; 0x3394 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xd0>
    3392:	07 96       	adiw	r24, 0x07	; 7
    3394:	95 95       	asr	r25
    3396:	87 95       	ror	r24
    3398:	95 95       	asr	r25
    339a:	87 95       	ror	r24
    339c:	95 95       	asr	r25
    339e:	87 95       	ror	r24
    33a0:	82 0f       	add	r24, r18
    33a2:	93 1f       	adc	r25, r19
    33a4:	9c 01       	movw	r18, r24
    33a6:	89 89       	ldd	r24, Y+17	; 0x11
    33a8:	9a 89       	ldd	r25, Y+18	; 0x12
    33aa:	82 0f       	add	r24, r18
    33ac:	93 1f       	adc	r25, r19
    33ae:	99 87       	std	Y+9, r25	; 0x09
    33b0:	88 87       	std	Y+8, r24	; 0x08
    33b2:	88 85       	ldd	r24, Y+8	; 0x08
    33b4:	99 85       	ldd	r25, Y+9	; 0x09
    33b6:	fc 01       	movw	r30, r24
    33b8:	84 91       	lpm	r24, Z
    33ba:	8a 87       	std	Y+10, r24	; 0x0a
    33bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	88 23       	and	r24, r24
    33c4:	bc f4       	brge	.+46     	; 0x33f4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x130>
    33c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    33c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ca:	dc 01       	movw	r26, r24
    33cc:	8d 91       	ld	r24, X+
    33ce:	9c 91       	ld	r25, X
    33d0:	0c 96       	adiw	r24, 0x0c	; 12
    33d2:	dc 01       	movw	r26, r24
    33d4:	ed 91       	ld	r30, X+
    33d6:	fc 91       	ld	r31, X
    33d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    33da:	3e 85       	ldd	r19, Y+14	; 0x0e
    33dc:	8c 81       	ldd	r24, Y+4	; 0x04
    33de:	9d 81       	ldd	r25, Y+5	; 0x05
    33e0:	b9 01       	movw	r22, r18
    33e2:	68 0f       	add	r22, r24
    33e4:	79 1f       	adc	r23, r25
    33e6:	2f 89       	ldd	r18, Y+23	; 0x17
    33e8:	38 8d       	ldd	r19, Y+24	; 0x18
    33ea:	4f 85       	ldd	r20, Y+15	; 0x0f
    33ec:	58 89       	ldd	r21, Y+16	; 0x10
    33ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    33f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33f2:	19 95       	eicall
    33f4:	8c 81       	ldd	r24, Y+4	; 0x04
    33f6:	9d 81       	ldd	r25, Y+5	; 0x05
    33f8:	01 96       	adiw	r24, 0x01	; 1
    33fa:	9d 83       	std	Y+5, r25	; 0x05
    33fc:	8c 83       	std	Y+4, r24	; 0x04
    33fe:	a8 cf       	rjmp	.-176    	; 0x3350 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x8c>
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	9b 81       	ldd	r25, Y+3	; 0x03
    3404:	01 96       	adiw	r24, 0x01	; 1
    3406:	9b 83       	std	Y+3, r25	; 0x03
    3408:	8a 83       	std	Y+2, r24	; 0x02
    340a:	8f 85       	ldd	r24, Y+15	; 0x0f
    340c:	98 89       	ldd	r25, Y+16	; 0x10
    340e:	01 96       	adiw	r24, 0x01	; 1
    3410:	98 8b       	std	Y+16, r25	; 0x10
    3412:	8f 87       	std	Y+15, r24	; 0x0f
    3414:	93 cf       	rjmp	.-218    	; 0x333c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x78>
    3416:	8b 85       	ldd	r24, Y+11	; 0x0b
    3418:	9c 85       	ldd	r25, Y+12	; 0x0c
    341a:	fc 01       	movw	r30, r24
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	46 96       	adiw	r24, 0x16	; 22
    3422:	dc 01       	movw	r26, r24
    3424:	2d 91       	ld	r18, X+
    3426:	3c 91       	ld	r19, X
    3428:	8b 85       	ldd	r24, Y+11	; 0x0b
    342a:	9c 85       	ldd	r25, Y+12	; 0x0c
    342c:	f9 01       	movw	r30, r18
    342e:	19 95       	eicall
    3430:	00 00       	nop
    3432:	68 96       	adiw	r28, 0x18	; 24
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	ff 90       	pop	r15
    3448:	ef 90       	pop	r14
    344a:	df 90       	pop	r13
    344c:	cf 90       	pop	r12
    344e:	08 95       	ret

00003450 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    3450:	af 92       	push	r10
    3452:	cf 92       	push	r12
    3454:	df 92       	push	r13
    3456:	ef 92       	push	r14
    3458:	ff 92       	push	r15
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	eb 97       	sbiw	r28, 0x3b	; 59
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	98 ab       	std	Y+48, r25	; 0x30
    3474:	8f a7       	std	Y+47, r24	; 0x2f
    3476:	7a ab       	std	Y+50, r23	; 0x32
    3478:	69 ab       	std	Y+49, r22	; 0x31
    347a:	5c ab       	std	Y+52, r21	; 0x34
    347c:	4b ab       	std	Y+51, r20	; 0x33
    347e:	2d ab       	std	Y+53, r18	; 0x35
    3480:	1f ab       	std	Y+55, r17	; 0x37
    3482:	0e ab       	std	Y+54, r16	; 0x36
    3484:	f9 ae       	std	Y+57, r15	; 0x39
    3486:	e8 ae       	std	Y+56, r14	; 0x38
    3488:	ca ae       	std	Y+58, r12	; 0x3a
    348a:	ab ae       	std	Y+59, r10	; 0x3b
    348c:	8f a5       	ldd	r24, Y+47	; 0x2f
    348e:	98 a9       	ldd	r25, Y+48	; 0x30
    3490:	dc 01       	movw	r26, r24
    3492:	59 96       	adiw	r26, 0x19	; 25
    3494:	8d 91       	ld	r24, X+
    3496:	9c 91       	ld	r25, X
    3498:	5a 97       	sbiw	r26, 0x1a	; 26
    349a:	89 2b       	or	r24, r25
    349c:	09 f0       	breq	.+2      	; 0x34a0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x50>
    349e:	c7 c1       	rjmp	.+910    	; 0x382e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3de>
    34a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a2:	98 a9       	ldd	r25, Y+48	; 0x30
    34a4:	fc 01       	movw	r30, r24
    34a6:	20 85       	ldd	r18, Z+8	; 0x08
    34a8:	31 85       	ldd	r19, Z+9	; 0x09
    34aa:	89 a9       	ldd	r24, Y+49	; 0x31
    34ac:	9a a9       	ldd	r25, Y+50	; 0x32
    34ae:	82 17       	cp	r24, r18
    34b0:	93 07       	cpc	r25, r19
    34b2:	0c f0       	brlt	.+2      	; 0x34b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x66>
    34b4:	0e c3       	rjmp	.+1564   	; 0x3ad2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    34b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b8:	98 a9       	ldd	r25, Y+48	; 0x30
    34ba:	dc 01       	movw	r26, r24
    34bc:	1a 96       	adiw	r26, 0x0a	; 10
    34be:	2d 91       	ld	r18, X+
    34c0:	3c 91       	ld	r19, X
    34c2:	1b 97       	sbiw	r26, 0x0b	; 11
    34c4:	8b a9       	ldd	r24, Y+51	; 0x33
    34c6:	9c a9       	ldd	r25, Y+52	; 0x34
    34c8:	82 17       	cp	r24, r18
    34ca:	93 07       	cpc	r25, r19
    34cc:	0c f0       	brlt	.+2      	; 0x34d0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x80>
    34ce:	01 c3       	rjmp	.+1538   	; 0x3ad2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    34d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    34d2:	28 2f       	mov	r18, r24
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	c9 01       	movw	r24, r18
    34d8:	88 0f       	add	r24, r24
    34da:	99 1f       	adc	r25, r25
    34dc:	82 0f       	add	r24, r18
    34de:	93 1f       	adc	r25, r19
    34e0:	88 0f       	add	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	9c 01       	movw	r18, r24
    34e6:	89 a9       	ldd	r24, Y+49	; 0x31
    34e8:	9a a9       	ldd	r25, Y+50	; 0x32
    34ea:	82 0f       	add	r24, r18
    34ec:	93 1f       	adc	r25, r19
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	99 23       	and	r25, r25
    34f2:	0c f4       	brge	.+2      	; 0x34f6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa6>
    34f4:	ee c2       	rjmp	.+1500   	; 0x3ad2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    34f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    34f8:	88 2f       	mov	r24, r24
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	9c 01       	movw	r18, r24
    34fe:	22 0f       	add	r18, r18
    3500:	33 1f       	adc	r19, r19
    3502:	22 0f       	add	r18, r18
    3504:	33 1f       	adc	r19, r19
    3506:	22 0f       	add	r18, r18
    3508:	33 1f       	adc	r19, r19
    350a:	8b a9       	ldd	r24, Y+51	; 0x33
    350c:	9c a9       	ldd	r25, Y+52	; 0x34
    350e:	82 0f       	add	r24, r18
    3510:	93 1f       	adc	r25, r19
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	99 23       	and	r25, r25
    3516:	0c f4       	brge	.+2      	; 0x351a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xca>
    3518:	dc c2       	rjmp	.+1464   	; 0x3ad2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    351a:	8f a5       	ldd	r24, Y+47	; 0x2f
    351c:	98 a9       	ldd	r25, Y+48	; 0x30
    351e:	fc 01       	movw	r30, r24
    3520:	90 8d       	ldd	r25, Z+24	; 0x18
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	89 27       	eor	r24, r25
    3526:	88 23       	and	r24, r24
    3528:	31 f0       	breq	.+12     	; 0x3536 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xe6>
    352a:	8d a9       	ldd	r24, Y+53	; 0x35
    352c:	80 3b       	cpi	r24, 0xB0	; 176
    352e:	18 f0       	brcs	.+6      	; 0x3536 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xe6>
    3530:	8d a9       	ldd	r24, Y+53	; 0x35
    3532:	8f 5f       	subi	r24, 0xFF	; 255
    3534:	8d ab       	std	Y+53, r24	; 0x35
    3536:	8f a5       	ldd	r24, Y+47	; 0x2f
    3538:	98 a9       	ldd	r25, Y+48	; 0x30
    353a:	dc 01       	movw	r26, r24
    353c:	8d 91       	ld	r24, X+
    353e:	9c 91       	ld	r25, X
    3540:	0a 96       	adiw	r24, 0x0a	; 10
    3542:	fc 01       	movw	r30, r24
    3544:	20 81       	ld	r18, Z
    3546:	31 81       	ldd	r19, Z+1	; 0x01
    3548:	8f a5       	ldd	r24, Y+47	; 0x2f
    354a:	98 a9       	ldd	r25, Y+48	; 0x30
    354c:	f9 01       	movw	r30, r18
    354e:	19 95       	eicall
    3550:	19 82       	std	Y+1, r1	; 0x01
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	85 30       	cpi	r24, 0x05	; 5
    3556:	0c f0       	brlt	.+2      	; 0x355a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x10a>
    3558:	07 c1       	rjmp	.+526    	; 0x3768 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x318>
    355a:	8d a9       	ldd	r24, Y+53	; 0x35
    355c:	28 2f       	mov	r18, r24
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	c9 01       	movw	r24, r18
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	88 0f       	add	r24, r24
    3568:	99 1f       	adc	r25, r25
    356a:	28 0f       	add	r18, r24
    356c:	39 1f       	adc	r19, r25
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	08 2e       	mov	r0, r24
    3572:	00 0c       	add	r0, r0
    3574:	99 0b       	sbc	r25, r25
    3576:	82 0f       	add	r24, r18
    3578:	93 1f       	adc	r25, r19
    357a:	83 56       	subi	r24, 0x63	; 99
    357c:	9e 4f       	sbci	r25, 0xFE	; 254
    357e:	9f 87       	std	Y+15, r25	; 0x0f
    3580:	8e 87       	std	Y+14, r24	; 0x0e
    3582:	8e 85       	ldd	r24, Y+14	; 0x0e
    3584:	9f 85       	ldd	r25, Y+15	; 0x0f
    3586:	fc 01       	movw	r30, r24
    3588:	84 91       	lpm	r24, Z
    358a:	88 8b       	std	Y+16, r24	; 0x10
    358c:	88 89       	ldd	r24, Y+16	; 0x10
    358e:	8a 83       	std	Y+2, r24	; 0x02
    3590:	1b 82       	std	Y+3, r1	; 0x03
    3592:	8b 81       	ldd	r24, Y+3	; 0x03
    3594:	88 30       	cpi	r24, 0x08	; 8
    3596:	0c f0       	brlt	.+2      	; 0x359a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x14a>
    3598:	e3 c0       	rjmp	.+454    	; 0x3760 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x310>
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	88 2f       	mov	r24, r24
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	81 70       	andi	r24, 0x01	; 1
    35a2:	99 27       	eor	r25, r25
    35a4:	89 2b       	or	r24, r25
    35a6:	09 f4       	brne	.+2      	; 0x35aa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    35a8:	65 c0       	rjmp	.+202    	; 0x3674 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x224>
    35aa:	8a ad       	ldd	r24, Y+58	; 0x3a
    35ac:	81 30       	cpi	r24, 0x01	; 1
    35ae:	21 f5       	brne	.+72     	; 0x35f8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a8>
    35b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    35b2:	81 30       	cpi	r24, 0x01	; 1
    35b4:	09 f5       	brne	.+66     	; 0x35f8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a8>
    35b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    35b8:	98 a9       	ldd	r25, Y+48	; 0x30
    35ba:	dc 01       	movw	r26, r24
    35bc:	8d 91       	ld	r24, X+
    35be:	9c 91       	ld	r25, X
    35c0:	0c 96       	adiw	r24, 0x0c	; 12
    35c2:	dc 01       	movw	r26, r24
    35c4:	ed 91       	ld	r30, X+
    35c6:	fc 91       	ld	r31, X
    35c8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ca:	28 2f       	mov	r18, r24
    35cc:	88 0f       	add	r24, r24
    35ce:	33 0b       	sbc	r19, r19
    35d0:	8b a9       	ldd	r24, Y+51	; 0x33
    35d2:	9c a9       	ldd	r25, Y+52	; 0x34
    35d4:	a9 01       	movw	r20, r18
    35d6:	48 0f       	add	r20, r24
    35d8:	59 1f       	adc	r21, r25
    35da:	89 81       	ldd	r24, Y+1	; 0x01
    35dc:	28 2f       	mov	r18, r24
    35de:	88 0f       	add	r24, r24
    35e0:	33 0b       	sbc	r19, r19
    35e2:	89 a9       	ldd	r24, Y+49	; 0x31
    35e4:	9a a9       	ldd	r25, Y+50	; 0x32
    35e6:	b9 01       	movw	r22, r18
    35e8:	68 0f       	add	r22, r24
    35ea:	79 1f       	adc	r23, r25
    35ec:	2e a9       	ldd	r18, Y+54	; 0x36
    35ee:	3f a9       	ldd	r19, Y+55	; 0x37
    35f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    35f2:	98 a9       	ldd	r25, Y+48	; 0x30
    35f4:	19 95       	eicall
    35f6:	aa c0       	rjmp	.+340    	; 0x374c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    35f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    35fa:	98 a9       	ldd	r25, Y+48	; 0x30
    35fc:	fc 01       	movw	r30, r24
    35fe:	80 81       	ld	r24, Z
    3600:	91 81       	ldd	r25, Z+1	; 0x01
    3602:	0e 96       	adiw	r24, 0x0e	; 14
    3604:	dc 01       	movw	r26, r24
    3606:	ed 91       	ld	r30, X+
    3608:	fc 91       	ld	r31, X
    360a:	8b ad       	ldd	r24, Y+59	; 0x3b
    360c:	08 2f       	mov	r16, r24
    360e:	10 e0       	ldi	r17, 0x00	; 0
    3610:	8a ad       	ldd	r24, Y+58	; 0x3a
    3612:	c8 2e       	mov	r12, r24
    3614:	d1 2c       	mov	r13, r1
    3616:	8b 81       	ldd	r24, Y+3	; 0x03
    3618:	48 2f       	mov	r20, r24
    361a:	88 0f       	add	r24, r24
    361c:	55 0b       	sbc	r21, r21
    361e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3620:	88 2f       	mov	r24, r24
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	48 9f       	mul	r20, r24
    3626:	90 01       	movw	r18, r0
    3628:	49 9f       	mul	r20, r25
    362a:	30 0d       	add	r19, r0
    362c:	58 9f       	mul	r21, r24
    362e:	30 0d       	add	r19, r0
    3630:	11 24       	eor	r1, r1
    3632:	8b a9       	ldd	r24, Y+51	; 0x33
    3634:	9c a9       	ldd	r25, Y+52	; 0x34
    3636:	d9 01       	movw	r26, r18
    3638:	a8 0f       	add	r26, r24
    363a:	b9 1f       	adc	r27, r25
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	48 2f       	mov	r20, r24
    3640:	88 0f       	add	r24, r24
    3642:	55 0b       	sbc	r21, r21
    3644:	8a ad       	ldd	r24, Y+58	; 0x3a
    3646:	88 2f       	mov	r24, r24
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	48 9f       	mul	r20, r24
    364c:	90 01       	movw	r18, r0
    364e:	49 9f       	mul	r20, r25
    3650:	30 0d       	add	r19, r0
    3652:	58 9f       	mul	r21, r24
    3654:	30 0d       	add	r19, r0
    3656:	11 24       	eor	r1, r1
    3658:	89 a9       	ldd	r24, Y+49	; 0x31
    365a:	9a a9       	ldd	r25, Y+50	; 0x32
    365c:	b9 01       	movw	r22, r18
    365e:	68 0f       	add	r22, r24
    3660:	79 1f       	adc	r23, r25
    3662:	2e a9       	ldd	r18, Y+54	; 0x36
    3664:	3f a9       	ldd	r19, Y+55	; 0x37
    3666:	8f a5       	ldd	r24, Y+47	; 0x2f
    3668:	98 a9       	ldd	r25, Y+48	; 0x30
    366a:	79 01       	movw	r14, r18
    366c:	96 01       	movw	r18, r12
    366e:	ad 01       	movw	r20, r26
    3670:	19 95       	eicall
    3672:	6c c0       	rjmp	.+216    	; 0x374c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    3674:	28 ad       	ldd	r18, Y+56	; 0x38
    3676:	39 ad       	ldd	r19, Y+57	; 0x39
    3678:	8e a9       	ldd	r24, Y+54	; 0x36
    367a:	9f a9       	ldd	r25, Y+55	; 0x37
    367c:	28 17       	cp	r18, r24
    367e:	39 07       	cpc	r19, r25
    3680:	09 f4       	brne	.+2      	; 0x3684 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x234>
    3682:	64 c0       	rjmp	.+200    	; 0x374c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    3684:	8a ad       	ldd	r24, Y+58	; 0x3a
    3686:	81 30       	cpi	r24, 0x01	; 1
    3688:	21 f5       	brne	.+72     	; 0x36d2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x282>
    368a:	8b ad       	ldd	r24, Y+59	; 0x3b
    368c:	81 30       	cpi	r24, 0x01	; 1
    368e:	09 f5       	brne	.+66     	; 0x36d2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x282>
    3690:	8f a5       	ldd	r24, Y+47	; 0x2f
    3692:	98 a9       	ldd	r25, Y+48	; 0x30
    3694:	fc 01       	movw	r30, r24
    3696:	80 81       	ld	r24, Z
    3698:	91 81       	ldd	r25, Z+1	; 0x01
    369a:	0c 96       	adiw	r24, 0x0c	; 12
    369c:	dc 01       	movw	r26, r24
    369e:	ed 91       	ld	r30, X+
    36a0:	fc 91       	ld	r31, X
    36a2:	8b 81       	ldd	r24, Y+3	; 0x03
    36a4:	28 2f       	mov	r18, r24
    36a6:	88 0f       	add	r24, r24
    36a8:	33 0b       	sbc	r19, r19
    36aa:	8b a9       	ldd	r24, Y+51	; 0x33
    36ac:	9c a9       	ldd	r25, Y+52	; 0x34
    36ae:	a9 01       	movw	r20, r18
    36b0:	48 0f       	add	r20, r24
    36b2:	59 1f       	adc	r21, r25
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	28 2f       	mov	r18, r24
    36b8:	88 0f       	add	r24, r24
    36ba:	33 0b       	sbc	r19, r19
    36bc:	89 a9       	ldd	r24, Y+49	; 0x31
    36be:	9a a9       	ldd	r25, Y+50	; 0x32
    36c0:	b9 01       	movw	r22, r18
    36c2:	68 0f       	add	r22, r24
    36c4:	79 1f       	adc	r23, r25
    36c6:	28 ad       	ldd	r18, Y+56	; 0x38
    36c8:	39 ad       	ldd	r19, Y+57	; 0x39
    36ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    36cc:	98 a9       	ldd	r25, Y+48	; 0x30
    36ce:	19 95       	eicall
    36d0:	3d c0       	rjmp	.+122    	; 0x374c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    36d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36d4:	98 a9       	ldd	r25, Y+48	; 0x30
    36d6:	fc 01       	movw	r30, r24
    36d8:	80 81       	ld	r24, Z
    36da:	91 81       	ldd	r25, Z+1	; 0x01
    36dc:	0e 96       	adiw	r24, 0x0e	; 14
    36de:	dc 01       	movw	r26, r24
    36e0:	ed 91       	ld	r30, X+
    36e2:	fc 91       	ld	r31, X
    36e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    36e6:	08 2f       	mov	r16, r24
    36e8:	10 e0       	ldi	r17, 0x00	; 0
    36ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    36ec:	c8 2e       	mov	r12, r24
    36ee:	d1 2c       	mov	r13, r1
    36f0:	8b 81       	ldd	r24, Y+3	; 0x03
    36f2:	48 2f       	mov	r20, r24
    36f4:	88 0f       	add	r24, r24
    36f6:	55 0b       	sbc	r21, r21
    36f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    36fa:	88 2f       	mov	r24, r24
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	48 9f       	mul	r20, r24
    3700:	90 01       	movw	r18, r0
    3702:	49 9f       	mul	r20, r25
    3704:	30 0d       	add	r19, r0
    3706:	58 9f       	mul	r21, r24
    3708:	30 0d       	add	r19, r0
    370a:	11 24       	eor	r1, r1
    370c:	8b a9       	ldd	r24, Y+51	; 0x33
    370e:	9c a9       	ldd	r25, Y+52	; 0x34
    3710:	d9 01       	movw	r26, r18
    3712:	a8 0f       	add	r26, r24
    3714:	b9 1f       	adc	r27, r25
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	48 2f       	mov	r20, r24
    371a:	88 0f       	add	r24, r24
    371c:	55 0b       	sbc	r21, r21
    371e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3720:	88 2f       	mov	r24, r24
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	48 9f       	mul	r20, r24
    3726:	90 01       	movw	r18, r0
    3728:	49 9f       	mul	r20, r25
    372a:	30 0d       	add	r19, r0
    372c:	58 9f       	mul	r21, r24
    372e:	30 0d       	add	r19, r0
    3730:	11 24       	eor	r1, r1
    3732:	89 a9       	ldd	r24, Y+49	; 0x31
    3734:	9a a9       	ldd	r25, Y+50	; 0x32
    3736:	b9 01       	movw	r22, r18
    3738:	68 0f       	add	r22, r24
    373a:	79 1f       	adc	r23, r25
    373c:	28 ad       	ldd	r18, Y+56	; 0x38
    373e:	39 ad       	ldd	r19, Y+57	; 0x39
    3740:	8f a5       	ldd	r24, Y+47	; 0x2f
    3742:	98 a9       	ldd	r25, Y+48	; 0x30
    3744:	79 01       	movw	r14, r18
    3746:	96 01       	movw	r18, r12
    3748:	ad 01       	movw	r20, r26
    374a:	19 95       	eicall
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	8f 5f       	subi	r24, 0xFF	; 255
    3750:	8b 83       	std	Y+3, r24	; 0x03
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	88 2f       	mov	r24, r24
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	95 95       	asr	r25
    375a:	87 95       	ror	r24
    375c:	8a 83       	std	Y+2, r24	; 0x02
    375e:	19 cf       	rjmp	.-462    	; 0x3592 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x142>
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	8f 5f       	subi	r24, 0xFF	; 255
    3764:	89 83       	std	Y+1, r24	; 0x01
    3766:	f5 ce       	rjmp	.-534    	; 0x3552 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x102>
    3768:	28 ad       	ldd	r18, Y+56	; 0x38
    376a:	39 ad       	ldd	r19, Y+57	; 0x39
    376c:	8e a9       	ldd	r24, Y+54	; 0x36
    376e:	9f a9       	ldd	r25, Y+55	; 0x37
    3770:	28 17       	cp	r18, r24
    3772:	39 07       	cpc	r19, r25
    3774:	09 f4       	brne	.+2      	; 0x3778 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x328>
    3776:	4d c0       	rjmp	.+154    	; 0x3812 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3c2>
    3778:	8a ad       	ldd	r24, Y+58	; 0x3a
    377a:	81 30       	cpi	r24, 0x01	; 1
    377c:	e1 f4       	brne	.+56     	; 0x37b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x366>
    377e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3780:	81 30       	cpi	r24, 0x01	; 1
    3782:	c9 f4       	brne	.+50     	; 0x37b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x366>
    3784:	8f a5       	ldd	r24, Y+47	; 0x2f
    3786:	98 a9       	ldd	r25, Y+48	; 0x30
    3788:	fc 01       	movw	r30, r24
    378a:	80 81       	ld	r24, Z
    378c:	91 81       	ldd	r25, Z+1	; 0x01
    378e:	40 96       	adiw	r24, 0x10	; 16
    3790:	dc 01       	movw	r26, r24
    3792:	ed 91       	ld	r30, X+
    3794:	fc 91       	ld	r31, X
    3796:	89 a9       	ldd	r24, Y+49	; 0x31
    3798:	9a a9       	ldd	r25, Y+50	; 0x32
    379a:	bc 01       	movw	r22, r24
    379c:	6b 5f       	subi	r22, 0xFB	; 251
    379e:	7f 4f       	sbci	r23, 0xFF	; 255
    37a0:	28 ad       	ldd	r18, Y+56	; 0x38
    37a2:	39 ad       	ldd	r19, Y+57	; 0x39
    37a4:	4b a9       	ldd	r20, Y+51	; 0x33
    37a6:	5c a9       	ldd	r21, Y+52	; 0x34
    37a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    37aa:	98 a9       	ldd	r25, Y+48	; 0x30
    37ac:	89 01       	movw	r16, r18
    37ae:	28 e0       	ldi	r18, 0x08	; 8
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	19 95       	eicall
    37b4:	2e c0       	rjmp	.+92     	; 0x3812 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3c2>
    37b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37b8:	98 a9       	ldd	r25, Y+48	; 0x30
    37ba:	fc 01       	movw	r30, r24
    37bc:	80 81       	ld	r24, Z
    37be:	91 81       	ldd	r25, Z+1	; 0x01
    37c0:	0e 96       	adiw	r24, 0x0e	; 14
    37c2:	dc 01       	movw	r26, r24
    37c4:	ed 91       	ld	r30, X+
    37c6:	fc 91       	ld	r31, X
    37c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    37ca:	88 2f       	mov	r24, r24
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	8c 01       	movw	r16, r24
    37d0:	00 0f       	add	r16, r16
    37d2:	11 1f       	adc	r17, r17
    37d4:	00 0f       	add	r16, r16
    37d6:	11 1f       	adc	r17, r17
    37d8:	00 0f       	add	r16, r16
    37da:	11 1f       	adc	r17, r17
    37dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    37de:	a8 2f       	mov	r26, r24
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    37e4:	28 2f       	mov	r18, r24
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	c9 01       	movw	r24, r18
    37ea:	88 0f       	add	r24, r24
    37ec:	99 1f       	adc	r25, r25
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	28 0f       	add	r18, r24
    37f4:	39 1f       	adc	r19, r25
    37f6:	89 a9       	ldd	r24, Y+49	; 0x31
    37f8:	9a a9       	ldd	r25, Y+50	; 0x32
    37fa:	b9 01       	movw	r22, r18
    37fc:	68 0f       	add	r22, r24
    37fe:	79 1f       	adc	r23, r25
    3800:	28 ad       	ldd	r18, Y+56	; 0x38
    3802:	39 ad       	ldd	r19, Y+57	; 0x39
    3804:	4b a9       	ldd	r20, Y+51	; 0x33
    3806:	5c a9       	ldd	r21, Y+52	; 0x34
    3808:	8f a5       	ldd	r24, Y+47	; 0x2f
    380a:	98 a9       	ldd	r25, Y+48	; 0x30
    380c:	79 01       	movw	r14, r18
    380e:	9d 01       	movw	r18, r26
    3810:	19 95       	eicall
    3812:	8f a5       	ldd	r24, Y+47	; 0x2f
    3814:	98 a9       	ldd	r25, Y+48	; 0x30
    3816:	fc 01       	movw	r30, r24
    3818:	80 81       	ld	r24, Z
    381a:	91 81       	ldd	r25, Z+1	; 0x01
    381c:	46 96       	adiw	r24, 0x16	; 22
    381e:	dc 01       	movw	r26, r24
    3820:	2d 91       	ld	r18, X+
    3822:	3c 91       	ld	r19, X
    3824:	8f a5       	ldd	r24, Y+47	; 0x2f
    3826:	98 a9       	ldd	r25, Y+48	; 0x30
    3828:	f9 01       	movw	r30, r18
    382a:	19 95       	eicall
    382c:	53 c1       	rjmp	.+678    	; 0x3ad4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x684>
    382e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3830:	98 a9       	ldd	r25, Y+48	; 0x30
    3832:	dc 01       	movw	r26, r24
    3834:	59 96       	adiw	r26, 0x19	; 25
    3836:	8d 91       	ld	r24, X+
    3838:	9c 91       	ld	r25, X
    383a:	5a 97       	sbiw	r26, 0x1a	; 26
    383c:	04 96       	adiw	r24, 0x04	; 4
    383e:	9a 8b       	std	Y+18, r25	; 0x12
    3840:	89 8b       	std	Y+17, r24	; 0x11
    3842:	89 89       	ldd	r24, Y+17	; 0x11
    3844:	9a 89       	ldd	r25, Y+18	; 0x12
    3846:	fc 01       	movw	r30, r24
    3848:	84 91       	lpm	r24, Z
    384a:	8b 8b       	std	Y+19, r24	; 0x13
    384c:	8b 89       	ldd	r24, Y+19	; 0x13
    384e:	9d a9       	ldd	r25, Y+53	; 0x35
    3850:	f9 2f       	mov	r31, r25
    3852:	f8 1b       	sub	r31, r24
    3854:	8f 2f       	mov	r24, r31
    3856:	8d ab       	std	Y+53, r24	; 0x35
    3858:	8f a5       	ldd	r24, Y+47	; 0x2f
    385a:	98 a9       	ldd	r25, Y+48	; 0x30
    385c:	dc 01       	movw	r26, r24
    385e:	59 96       	adiw	r26, 0x19	; 25
    3860:	8d 91       	ld	r24, X+
    3862:	9c 91       	ld	r25, X
    3864:	5a 97       	sbiw	r26, 0x1a	; 26
    3866:	6d a9       	ldd	r22, Y+53	; 0x35
    3868:	0e 94 ae 13 	call	0x275c	; 0x275c <_Z18pgm_read_glyph_ptrPK7GFXfonth>
    386c:	9d 8b       	std	Y+21, r25	; 0x15
    386e:	8c 8b       	std	Y+20, r24	; 0x14
    3870:	8f a5       	ldd	r24, Y+47	; 0x2f
    3872:	98 a9       	ldd	r25, Y+48	; 0x30
    3874:	fc 01       	movw	r30, r24
    3876:	81 8d       	ldd	r24, Z+25	; 0x19
    3878:	92 8d       	ldd	r25, Z+26	; 0x1a
    387a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <_Z19pgm_read_bitmap_ptrPK7GFXfont>
    387e:	9f 8b       	std	Y+23, r25	; 0x17
    3880:	8e 8b       	std	Y+22, r24	; 0x16
    3882:	8c 89       	ldd	r24, Y+20	; 0x14
    3884:	9d 89       	ldd	r25, Y+21	; 0x15
    3886:	99 8f       	std	Y+25, r25	; 0x19
    3888:	88 8f       	std	Y+24, r24	; 0x18
    388a:	88 8d       	ldd	r24, Y+24	; 0x18
    388c:	99 8d       	ldd	r25, Y+25	; 0x19
    388e:	fc 01       	movw	r30, r24
    3890:	25 91       	lpm	r18, Z+
    3892:	34 91       	lpm	r19, Z
    3894:	cf 01       	movw	r24, r30
    3896:	3b 8f       	std	Y+27, r19	; 0x1b
    3898:	2a 8f       	std	Y+26, r18	; 0x1a
    389a:	99 8f       	std	Y+25, r25	; 0x19
    389c:	88 8f       	std	Y+24, r24	; 0x18
    389e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38a2:	9d 83       	std	Y+5, r25	; 0x05
    38a4:	8c 83       	std	Y+4, r24	; 0x04
    38a6:	8c 89       	ldd	r24, Y+20	; 0x14
    38a8:	9d 89       	ldd	r25, Y+21	; 0x15
    38aa:	02 96       	adiw	r24, 0x02	; 2
    38ac:	9d 8f       	std	Y+29, r25	; 0x1d
    38ae:	8c 8f       	std	Y+28, r24	; 0x1c
    38b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38b4:	fc 01       	movw	r30, r24
    38b6:	84 91       	lpm	r24, Z
    38b8:	8e 8f       	std	Y+30, r24	; 0x1e
    38ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38bc:	8f 8f       	std	Y+31, r24	; 0x1f
    38be:	8c 89       	ldd	r24, Y+20	; 0x14
    38c0:	9d 89       	ldd	r25, Y+21	; 0x15
    38c2:	03 96       	adiw	r24, 0x03	; 3
    38c4:	99 a3       	std	Y+33, r25	; 0x21
    38c6:	88 a3       	std	Y+32, r24	; 0x20
    38c8:	88 a1       	ldd	r24, Y+32	; 0x20
    38ca:	99 a1       	ldd	r25, Y+33	; 0x21
    38cc:	fc 01       	movw	r30, r24
    38ce:	84 91       	lpm	r24, Z
    38d0:	8a a3       	std	Y+34, r24	; 0x22
    38d2:	8a a1       	ldd	r24, Y+34	; 0x22
    38d4:	8b a3       	std	Y+35, r24	; 0x23
    38d6:	8c 89       	ldd	r24, Y+20	; 0x14
    38d8:	9d 89       	ldd	r25, Y+21	; 0x15
    38da:	05 96       	adiw	r24, 0x05	; 5
    38dc:	9d a3       	std	Y+37, r25	; 0x25
    38de:	8c a3       	std	Y+36, r24	; 0x24
    38e0:	8c a1       	ldd	r24, Y+36	; 0x24
    38e2:	9d a1       	ldd	r25, Y+37	; 0x25
    38e4:	fc 01       	movw	r30, r24
    38e6:	84 91       	lpm	r24, Z
    38e8:	8e a3       	std	Y+38, r24	; 0x26
    38ea:	8e a1       	ldd	r24, Y+38	; 0x26
    38ec:	8f a3       	std	Y+39, r24	; 0x27
    38ee:	8c 89       	ldd	r24, Y+20	; 0x14
    38f0:	9d 89       	ldd	r25, Y+21	; 0x15
    38f2:	06 96       	adiw	r24, 0x06	; 6
    38f4:	99 a7       	std	Y+41, r25	; 0x29
    38f6:	88 a7       	std	Y+40, r24	; 0x28
    38f8:	88 a5       	ldd	r24, Y+40	; 0x28
    38fa:	99 a5       	ldd	r25, Y+41	; 0x29
    38fc:	fc 01       	movw	r30, r24
    38fe:	84 91       	lpm	r24, Z
    3900:	8a a7       	std	Y+42, r24	; 0x2a
    3902:	8a a5       	ldd	r24, Y+42	; 0x2a
    3904:	8b a7       	std	Y+43, r24	; 0x2b
    3906:	18 86       	std	Y+8, r1	; 0x08
    3908:	19 86       	std	Y+9, r1	; 0x09
    390a:	1b 86       	std	Y+11, r1	; 0x0b
    390c:	1a 86       	std	Y+10, r1	; 0x0a
    390e:	1d 86       	std	Y+13, r1	; 0x0d
    3910:	1c 86       	std	Y+12, r1	; 0x0c
    3912:	8a ad       	ldd	r24, Y+58	; 0x3a
    3914:	82 30       	cpi	r24, 0x02	; 2
    3916:	18 f4       	brcc	.+6      	; 0x391e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x4ce>
    3918:	8b ad       	ldd	r24, Y+59	; 0x3b
    391a:	82 30       	cpi	r24, 0x02	; 2
    391c:	60 f0       	brcs	.+24     	; 0x3936 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x4e6>
    391e:	8f a1       	ldd	r24, Y+39	; 0x27
    3920:	08 2e       	mov	r0, r24
    3922:	00 0c       	add	r0, r0
    3924:	99 0b       	sbc	r25, r25
    3926:	9b 87       	std	Y+11, r25	; 0x0b
    3928:	8a 87       	std	Y+10, r24	; 0x0a
    392a:	8b a5       	ldd	r24, Y+43	; 0x2b
    392c:	08 2e       	mov	r0, r24
    392e:	00 0c       	add	r0, r0
    3930:	99 0b       	sbc	r25, r25
    3932:	9d 87       	std	Y+13, r25	; 0x0d
    3934:	8c 87       	std	Y+12, r24	; 0x0c
    3936:	8f a5       	ldd	r24, Y+47	; 0x2f
    3938:	98 a9       	ldd	r25, Y+48	; 0x30
    393a:	dc 01       	movw	r26, r24
    393c:	8d 91       	ld	r24, X+
    393e:	9c 91       	ld	r25, X
    3940:	0a 96       	adiw	r24, 0x0a	; 10
    3942:	fc 01       	movw	r30, r24
    3944:	20 81       	ld	r18, Z
    3946:	31 81       	ldd	r19, Z+1	; 0x01
    3948:	8f a5       	ldd	r24, Y+47	; 0x2f
    394a:	98 a9       	ldd	r25, Y+48	; 0x30
    394c:	f9 01       	movw	r30, r18
    394e:	19 95       	eicall
    3950:	1f 82       	std	Y+7, r1	; 0x07
    3952:	9f 81       	ldd	r25, Y+7	; 0x07
    3954:	8b a1       	ldd	r24, Y+35	; 0x23
    3956:	98 17       	cp	r25, r24
    3958:	08 f0       	brcs	.+2      	; 0x395c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x50c>
    395a:	ad c0       	rjmp	.+346    	; 0x3ab6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x666>
    395c:	1e 82       	std	Y+6, r1	; 0x06
    395e:	9e 81       	ldd	r25, Y+6	; 0x06
    3960:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3962:	98 17       	cp	r25, r24
    3964:	08 f0       	brcs	.+2      	; 0x3968 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x518>
    3966:	a3 c0       	rjmp	.+326    	; 0x3aae <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x65e>
    3968:	89 85       	ldd	r24, Y+9	; 0x09
    396a:	91 e0       	ldi	r25, 0x01	; 1
    396c:	98 0f       	add	r25, r24
    396e:	99 87       	std	Y+9, r25	; 0x09
    3970:	88 2f       	mov	r24, r24
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	87 70       	andi	r24, 0x07	; 7
    3976:	99 27       	eor	r25, r25
    3978:	21 e0       	ldi	r18, 0x01	; 1
    397a:	89 2b       	or	r24, r25
    397c:	09 f0       	breq	.+2      	; 0x3980 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x530>
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	22 23       	and	r18, r18
    3982:	a1 f0       	breq	.+40     	; 0x39ac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x55c>
    3984:	8c 81       	ldd	r24, Y+4	; 0x04
    3986:	9d 81       	ldd	r25, Y+5	; 0x05
    3988:	9c 01       	movw	r18, r24
    398a:	2f 5f       	subi	r18, 0xFF	; 255
    398c:	3f 4f       	sbci	r19, 0xFF	; 255
    398e:	3d 83       	std	Y+5, r19	; 0x05
    3990:	2c 83       	std	Y+4, r18	; 0x04
    3992:	2e 89       	ldd	r18, Y+22	; 0x16
    3994:	3f 89       	ldd	r19, Y+23	; 0x17
    3996:	82 0f       	add	r24, r18
    3998:	93 1f       	adc	r25, r19
    399a:	9d a7       	std	Y+45, r25	; 0x2d
    399c:	8c a7       	std	Y+44, r24	; 0x2c
    399e:	8c a5       	ldd	r24, Y+44	; 0x2c
    39a0:	9d a5       	ldd	r25, Y+45	; 0x2d
    39a2:	fc 01       	movw	r30, r24
    39a4:	84 91       	lpm	r24, Z
    39a6:	8e a7       	std	Y+46, r24	; 0x2e
    39a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    39aa:	88 87       	std	Y+8, r24	; 0x08
    39ac:	88 85       	ldd	r24, Y+8	; 0x08
    39ae:	88 23       	and	r24, r24
    39b0:	0c f0       	brlt	.+2      	; 0x39b4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x564>
    39b2:	76 c0       	rjmp	.+236    	; 0x3aa0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x650>
    39b4:	8a ad       	ldd	r24, Y+58	; 0x3a
    39b6:	81 30       	cpi	r24, 0x01	; 1
    39b8:	71 f5       	brne	.+92     	; 0x3a16 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5c6>
    39ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    39bc:	81 30       	cpi	r24, 0x01	; 1
    39be:	59 f5       	brne	.+86     	; 0x3a16 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5c6>
    39c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39c2:	98 a9       	ldd	r25, Y+48	; 0x30
    39c4:	dc 01       	movw	r26, r24
    39c6:	8d 91       	ld	r24, X+
    39c8:	9c 91       	ld	r25, X
    39ca:	0c 96       	adiw	r24, 0x0c	; 12
    39cc:	dc 01       	movw	r26, r24
    39ce:	ed 91       	ld	r30, X+
    39d0:	fc 91       	ld	r31, X
    39d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    39d4:	28 2f       	mov	r18, r24
    39d6:	88 0f       	add	r24, r24
    39d8:	33 0b       	sbc	r19, r19
    39da:	8b a9       	ldd	r24, Y+51	; 0x33
    39dc:	9c a9       	ldd	r25, Y+52	; 0x34
    39de:	28 0f       	add	r18, r24
    39e0:	39 1f       	adc	r19, r25
    39e2:	8f 81       	ldd	r24, Y+7	; 0x07
    39e4:	88 2f       	mov	r24, r24
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	a9 01       	movw	r20, r18
    39ea:	48 0f       	add	r20, r24
    39ec:	59 1f       	adc	r21, r25
    39ee:	8f a1       	ldd	r24, Y+39	; 0x27
    39f0:	28 2f       	mov	r18, r24
    39f2:	88 0f       	add	r24, r24
    39f4:	33 0b       	sbc	r19, r19
    39f6:	89 a9       	ldd	r24, Y+49	; 0x31
    39f8:	9a a9       	ldd	r25, Y+50	; 0x32
    39fa:	28 0f       	add	r18, r24
    39fc:	39 1f       	adc	r19, r25
    39fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3a00:	88 2f       	mov	r24, r24
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	b9 01       	movw	r22, r18
    3a06:	68 0f       	add	r22, r24
    3a08:	79 1f       	adc	r23, r25
    3a0a:	2e a9       	ldd	r18, Y+54	; 0x36
    3a0c:	3f a9       	ldd	r19, Y+55	; 0x37
    3a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a10:	98 a9       	ldd	r25, Y+48	; 0x30
    3a12:	19 95       	eicall
    3a14:	45 c0       	rjmp	.+138    	; 0x3aa0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x650>
    3a16:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a18:	98 a9       	ldd	r25, Y+48	; 0x30
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	80 81       	ld	r24, Z
    3a1e:	91 81       	ldd	r25, Z+1	; 0x01
    3a20:	0e 96       	adiw	r24, 0x0e	; 14
    3a22:	dc 01       	movw	r26, r24
    3a24:	ed 91       	ld	r30, X+
    3a26:	fc 91       	ld	r31, X
    3a28:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a2a:	08 2f       	mov	r16, r24
    3a2c:	10 e0       	ldi	r17, 0x00	; 0
    3a2e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a30:	c8 2e       	mov	r12, r24
    3a32:	d1 2c       	mov	r13, r1
    3a34:	8f 81       	ldd	r24, Y+7	; 0x07
    3a36:	28 2f       	mov	r18, r24
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a3e:	a9 01       	movw	r20, r18
    3a40:	48 0f       	add	r20, r24
    3a42:	59 1f       	adc	r21, r25
    3a44:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a46:	88 2f       	mov	r24, r24
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	48 9f       	mul	r20, r24
    3a4c:	90 01       	movw	r18, r0
    3a4e:	49 9f       	mul	r20, r25
    3a50:	30 0d       	add	r19, r0
    3a52:	58 9f       	mul	r21, r24
    3a54:	30 0d       	add	r19, r0
    3a56:	11 24       	eor	r1, r1
    3a58:	8b a9       	ldd	r24, Y+51	; 0x33
    3a5a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a5c:	d9 01       	movw	r26, r18
    3a5e:	a8 0f       	add	r26, r24
    3a60:	b9 1f       	adc	r27, r25
    3a62:	8e 81       	ldd	r24, Y+6	; 0x06
    3a64:	28 2f       	mov	r18, r24
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a6c:	a9 01       	movw	r20, r18
    3a6e:	48 0f       	add	r20, r24
    3a70:	59 1f       	adc	r21, r25
    3a72:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a74:	88 2f       	mov	r24, r24
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	48 9f       	mul	r20, r24
    3a7a:	90 01       	movw	r18, r0
    3a7c:	49 9f       	mul	r20, r25
    3a7e:	30 0d       	add	r19, r0
    3a80:	58 9f       	mul	r21, r24
    3a82:	30 0d       	add	r19, r0
    3a84:	11 24       	eor	r1, r1
    3a86:	89 a9       	ldd	r24, Y+49	; 0x31
    3a88:	9a a9       	ldd	r25, Y+50	; 0x32
    3a8a:	b9 01       	movw	r22, r18
    3a8c:	68 0f       	add	r22, r24
    3a8e:	79 1f       	adc	r23, r25
    3a90:	2e a9       	ldd	r18, Y+54	; 0x36
    3a92:	3f a9       	ldd	r19, Y+55	; 0x37
    3a94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a96:	98 a9       	ldd	r25, Y+48	; 0x30
    3a98:	79 01       	movw	r14, r18
    3a9a:	96 01       	movw	r18, r12
    3a9c:	ad 01       	movw	r20, r26
    3a9e:	19 95       	eicall
    3aa0:	88 85       	ldd	r24, Y+8	; 0x08
    3aa2:	88 0f       	add	r24, r24
    3aa4:	88 87       	std	Y+8, r24	; 0x08
    3aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    3aa8:	8f 5f       	subi	r24, 0xFF	; 255
    3aaa:	8e 83       	std	Y+6, r24	; 0x06
    3aac:	58 cf       	rjmp	.-336    	; 0x395e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x50e>
    3aae:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab0:	8f 5f       	subi	r24, 0xFF	; 255
    3ab2:	8f 83       	std	Y+7, r24	; 0x07
    3ab4:	4e cf       	rjmp	.-356    	; 0x3952 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x502>
    3ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab8:	98 a9       	ldd	r25, Y+48	; 0x30
    3aba:	fc 01       	movw	r30, r24
    3abc:	80 81       	ld	r24, Z
    3abe:	91 81       	ldd	r25, Z+1	; 0x01
    3ac0:	46 96       	adiw	r24, 0x16	; 22
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	2d 91       	ld	r18, X+
    3ac6:	3c 91       	ld	r19, X
    3ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aca:	98 a9       	ldd	r25, Y+48	; 0x30
    3acc:	f9 01       	movw	r30, r18
    3ace:	19 95       	eicall
    3ad0:	01 c0       	rjmp	.+2      	; 0x3ad4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x684>
    3ad2:	00 00       	nop
    3ad4:	eb 96       	adiw	r28, 0x3b	; 59
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	f8 94       	cli
    3ada:	de bf       	out	0x3e, r29	; 62
    3adc:	0f be       	out	0x3f, r0	; 63
    3ade:	cd bf       	out	0x3d, r28	; 61
    3ae0:	df 91       	pop	r29
    3ae2:	cf 91       	pop	r28
    3ae4:	1f 91       	pop	r17
    3ae6:	0f 91       	pop	r16
    3ae8:	ff 90       	pop	r15
    3aea:	ef 90       	pop	r14
    3aec:	df 90       	pop	r13
    3aee:	cf 90       	pop	r12
    3af0:	af 90       	pop	r10
    3af2:	08 95       	ret

00003af4 <_ZN12Adafruit_GFX5writeEh>:
    3af4:	af 92       	push	r10
    3af6:	cf 92       	push	r12
    3af8:	ef 92       	push	r14
    3afa:	ff 92       	push	r15
    3afc:	0f 93       	push	r16
    3afe:	1f 93       	push	r17
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	a4 97       	sbiw	r28, 0x24	; 36
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	99 a3       	std	Y+33, r25	; 0x21
    3b16:	88 a3       	std	Y+32, r24	; 0x20
    3b18:	6a a3       	std	Y+34, r22	; 0x22
    3b1a:	88 a1       	ldd	r24, Y+32	; 0x20
    3b1c:	99 a1       	ldd	r25, Y+33	; 0x21
    3b1e:	fc 01       	movw	r30, r24
    3b20:	81 8d       	ldd	r24, Z+25	; 0x19
    3b22:	92 8d       	ldd	r25, Z+26	; 0x1a
    3b24:	89 2b       	or	r24, r25
    3b26:	09 f0       	breq	.+2      	; 0x3b2a <_ZN12Adafruit_GFX5writeEh+0x36>
    3b28:	a8 c0       	rjmp	.+336    	; 0x3c7a <_ZN12Adafruit_GFX5writeEh+0x186>
    3b2a:	8a a1       	ldd	r24, Y+34	; 0x22
    3b2c:	8a 30       	cpi	r24, 0x0A	; 10
    3b2e:	f1 f4       	brne	.+60     	; 0x3b6c <_ZN12Adafruit_GFX5writeEh+0x78>
    3b30:	88 a1       	ldd	r24, Y+32	; 0x20
    3b32:	99 a1       	ldd	r25, Y+33	; 0x21
    3b34:	fc 01       	movw	r30, r24
    3b36:	15 86       	std	Z+13, r1	; 0x0d
    3b38:	14 86       	std	Z+12, r1	; 0x0c
    3b3a:	88 a1       	ldd	r24, Y+32	; 0x20
    3b3c:	99 a1       	ldd	r25, Y+33	; 0x21
    3b3e:	fc 01       	movw	r30, r24
    3b40:	26 85       	ldd	r18, Z+14	; 0x0e
    3b42:	37 85       	ldd	r19, Z+15	; 0x0f
    3b44:	88 a1       	ldd	r24, Y+32	; 0x20
    3b46:	99 a1       	ldd	r25, Y+33	; 0x21
    3b48:	fc 01       	movw	r30, r24
    3b4a:	85 89       	ldd	r24, Z+21	; 0x15
    3b4c:	88 2f       	mov	r24, r24
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	88 0f       	add	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	88 0f       	add	r24, r24
    3b56:	99 1f       	adc	r25, r25
    3b58:	88 0f       	add	r24, r24
    3b5a:	99 1f       	adc	r25, r25
    3b5c:	28 0f       	add	r18, r24
    3b5e:	39 1f       	adc	r19, r25
    3b60:	88 a1       	ldd	r24, Y+32	; 0x20
    3b62:	99 a1       	ldd	r25, Y+33	; 0x21
    3b64:	fc 01       	movw	r30, r24
    3b66:	37 87       	std	Z+15, r19	; 0x0f
    3b68:	26 87       	std	Z+14, r18	; 0x0e
    3b6a:	cb c1       	rjmp	.+918    	; 0x3f02 <_ZN12Adafruit_GFX5writeEh+0x40e>
    3b6c:	8a a1       	ldd	r24, Y+34	; 0x22
    3b6e:	8d 30       	cpi	r24, 0x0D	; 13
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <_ZN12Adafruit_GFX5writeEh+0x80>
    3b72:	c7 c1       	rjmp	.+910    	; 0x3f02 <_ZN12Adafruit_GFX5writeEh+0x40e>
    3b74:	88 a1       	ldd	r24, Y+32	; 0x20
    3b76:	99 a1       	ldd	r25, Y+33	; 0x21
    3b78:	fc 01       	movw	r30, r24
    3b7a:	87 89       	ldd	r24, Z+23	; 0x17
    3b7c:	88 23       	and	r24, r24
    3b7e:	d1 f1       	breq	.+116    	; 0x3bf4 <_ZN12Adafruit_GFX5writeEh+0x100>
    3b80:	88 a1       	ldd	r24, Y+32	; 0x20
    3b82:	99 a1       	ldd	r25, Y+33	; 0x21
    3b84:	fc 01       	movw	r30, r24
    3b86:	44 85       	ldd	r20, Z+12	; 0x0c
    3b88:	55 85       	ldd	r21, Z+13	; 0x0d
    3b8a:	88 a1       	ldd	r24, Y+32	; 0x20
    3b8c:	99 a1       	ldd	r25, Y+33	; 0x21
    3b8e:	fc 01       	movw	r30, r24
    3b90:	84 89       	ldd	r24, Z+20	; 0x14
    3b92:	28 2f       	mov	r18, r24
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	c9 01       	movw	r24, r18
    3b98:	88 0f       	add	r24, r24
    3b9a:	99 1f       	adc	r25, r25
    3b9c:	82 0f       	add	r24, r18
    3b9e:	93 1f       	adc	r25, r19
    3ba0:	88 0f       	add	r24, r24
    3ba2:	99 1f       	adc	r25, r25
    3ba4:	9a 01       	movw	r18, r20
    3ba6:	28 0f       	add	r18, r24
    3ba8:	39 1f       	adc	r19, r25
    3baa:	88 a1       	ldd	r24, Y+32	; 0x20
    3bac:	99 a1       	ldd	r25, Y+33	; 0x21
    3bae:	fc 01       	movw	r30, r24
    3bb0:	80 85       	ldd	r24, Z+8	; 0x08
    3bb2:	91 85       	ldd	r25, Z+9	; 0x09
    3bb4:	82 17       	cp	r24, r18
    3bb6:	93 07       	cpc	r25, r19
    3bb8:	ec f4       	brge	.+58     	; 0x3bf4 <_ZN12Adafruit_GFX5writeEh+0x100>
    3bba:	88 a1       	ldd	r24, Y+32	; 0x20
    3bbc:	99 a1       	ldd	r25, Y+33	; 0x21
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	15 86       	std	Z+13, r1	; 0x0d
    3bc2:	14 86       	std	Z+12, r1	; 0x0c
    3bc4:	88 a1       	ldd	r24, Y+32	; 0x20
    3bc6:	99 a1       	ldd	r25, Y+33	; 0x21
    3bc8:	fc 01       	movw	r30, r24
    3bca:	26 85       	ldd	r18, Z+14	; 0x0e
    3bcc:	37 85       	ldd	r19, Z+15	; 0x0f
    3bce:	88 a1       	ldd	r24, Y+32	; 0x20
    3bd0:	99 a1       	ldd	r25, Y+33	; 0x21
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	85 89       	ldd	r24, Z+21	; 0x15
    3bd6:	88 2f       	mov	r24, r24
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	88 0f       	add	r24, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	88 0f       	add	r24, r24
    3be0:	99 1f       	adc	r25, r25
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	28 0f       	add	r18, r24
    3be8:	39 1f       	adc	r19, r25
    3bea:	88 a1       	ldd	r24, Y+32	; 0x20
    3bec:	99 a1       	ldd	r25, Y+33	; 0x21
    3bee:	fc 01       	movw	r30, r24
    3bf0:	37 87       	std	Z+15, r19	; 0x0f
    3bf2:	26 87       	std	Z+14, r18	; 0x0e
    3bf4:	88 a1       	ldd	r24, Y+32	; 0x20
    3bf6:	99 a1       	ldd	r25, Y+33	; 0x21
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	b5 89       	ldd	r27, Z+21	; 0x15
    3bfc:	88 a1       	ldd	r24, Y+32	; 0x20
    3bfe:	99 a1       	ldd	r25, Y+33	; 0x21
    3c00:	fc 01       	movw	r30, r24
    3c02:	a4 89       	ldd	r26, Z+20	; 0x14
    3c04:	88 a1       	ldd	r24, Y+32	; 0x20
    3c06:	99 a1       	ldd	r25, Y+33	; 0x21
    3c08:	fc 01       	movw	r30, r24
    3c0a:	02 88       	ldd	r0, Z+18	; 0x12
    3c0c:	f3 89       	ldd	r31, Z+19	; 0x13
    3c0e:	e0 2d       	mov	r30, r0
    3c10:	fc a3       	std	Y+36, r31	; 0x24
    3c12:	eb a3       	std	Y+35, r30	; 0x23
    3c14:	88 a1       	ldd	r24, Y+32	; 0x20
    3c16:	99 a1       	ldd	r25, Y+33	; 0x21
    3c18:	fc 01       	movw	r30, r24
    3c1a:	20 89       	ldd	r18, Z+16	; 0x10
    3c1c:	31 89       	ldd	r19, Z+17	; 0x11
    3c1e:	88 a1       	ldd	r24, Y+32	; 0x20
    3c20:	99 a1       	ldd	r25, Y+33	; 0x21
    3c22:	fc 01       	movw	r30, r24
    3c24:	46 85       	ldd	r20, Z+14	; 0x0e
    3c26:	57 85       	ldd	r21, Z+15	; 0x0f
    3c28:	88 a1       	ldd	r24, Y+32	; 0x20
    3c2a:	99 a1       	ldd	r25, Y+33	; 0x21
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	64 85       	ldd	r22, Z+12	; 0x0c
    3c30:	75 85       	ldd	r23, Z+13	; 0x0d
    3c32:	88 a1       	ldd	r24, Y+32	; 0x20
    3c34:	99 a1       	ldd	r25, Y+33	; 0x21
    3c36:	ab 2e       	mov	r10, r27
    3c38:	ca 2e       	mov	r12, r26
    3c3a:	eb a0       	ldd	r14, Y+35	; 0x23
    3c3c:	fc a0       	ldd	r15, Y+36	; 0x24
    3c3e:	89 01       	movw	r16, r18
    3c40:	2a a1       	ldd	r18, Y+34	; 0x22
    3c42:	06 dc       	rcall	.-2036   	; 0x3450 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    3c44:	88 a1       	ldd	r24, Y+32	; 0x20
    3c46:	99 a1       	ldd	r25, Y+33	; 0x21
    3c48:	fc 01       	movw	r30, r24
    3c4a:	44 85       	ldd	r20, Z+12	; 0x0c
    3c4c:	55 85       	ldd	r21, Z+13	; 0x0d
    3c4e:	88 a1       	ldd	r24, Y+32	; 0x20
    3c50:	99 a1       	ldd	r25, Y+33	; 0x21
    3c52:	fc 01       	movw	r30, r24
    3c54:	84 89       	ldd	r24, Z+20	; 0x14
    3c56:	28 2f       	mov	r18, r24
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	c9 01       	movw	r24, r18
    3c5c:	88 0f       	add	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	82 0f       	add	r24, r18
    3c62:	93 1f       	adc	r25, r19
    3c64:	88 0f       	add	r24, r24
    3c66:	99 1f       	adc	r25, r25
    3c68:	9a 01       	movw	r18, r20
    3c6a:	28 0f       	add	r18, r24
    3c6c:	39 1f       	adc	r19, r25
    3c6e:	88 a1       	ldd	r24, Y+32	; 0x20
    3c70:	99 a1       	ldd	r25, Y+33	; 0x21
    3c72:	fc 01       	movw	r30, r24
    3c74:	35 87       	std	Z+13, r19	; 0x0d
    3c76:	24 87       	std	Z+12, r18	; 0x0c
    3c78:	44 c1       	rjmp	.+648    	; 0x3f02 <_ZN12Adafruit_GFX5writeEh+0x40e>
    3c7a:	8a a1       	ldd	r24, Y+34	; 0x22
    3c7c:	8a 30       	cpi	r24, 0x0A	; 10
    3c7e:	79 f5       	brne	.+94     	; 0x3cde <_ZN12Adafruit_GFX5writeEh+0x1ea>
    3c80:	88 a1       	ldd	r24, Y+32	; 0x20
    3c82:	99 a1       	ldd	r25, Y+33	; 0x21
    3c84:	fc 01       	movw	r30, r24
    3c86:	15 86       	std	Z+13, r1	; 0x0d
    3c88:	14 86       	std	Z+12, r1	; 0x0c
    3c8a:	88 a1       	ldd	r24, Y+32	; 0x20
    3c8c:	99 a1       	ldd	r25, Y+33	; 0x21
    3c8e:	fc 01       	movw	r30, r24
    3c90:	85 89       	ldd	r24, Z+21	; 0x15
    3c92:	48 2f       	mov	r20, r24
    3c94:	50 e0       	ldi	r21, 0x00	; 0
    3c96:	88 a1       	ldd	r24, Y+32	; 0x20
    3c98:	99 a1       	ldd	r25, Y+33	; 0x21
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	81 8d       	ldd	r24, Z+25	; 0x19
    3c9e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ca0:	08 96       	adiw	r24, 0x08	; 8
    3ca2:	9a 83       	std	Y+2, r25	; 0x02
    3ca4:	89 83       	std	Y+1, r24	; 0x01
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    3caa:	fc 01       	movw	r30, r24
    3cac:	84 91       	lpm	r24, Z
    3cae:	8b 83       	std	Y+3, r24	; 0x03
    3cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	42 9f       	mul	r20, r18
    3cb8:	c0 01       	movw	r24, r0
    3cba:	43 9f       	mul	r20, r19
    3cbc:	90 0d       	add	r25, r0
    3cbe:	52 9f       	mul	r21, r18
    3cc0:	90 0d       	add	r25, r0
    3cc2:	11 24       	eor	r1, r1
    3cc4:	28 a1       	ldd	r18, Y+32	; 0x20
    3cc6:	39 a1       	ldd	r19, Y+33	; 0x21
    3cc8:	f9 01       	movw	r30, r18
    3cca:	26 85       	ldd	r18, Z+14	; 0x0e
    3ccc:	37 85       	ldd	r19, Z+15	; 0x0f
    3cce:	28 0f       	add	r18, r24
    3cd0:	39 1f       	adc	r19, r25
    3cd2:	88 a1       	ldd	r24, Y+32	; 0x20
    3cd4:	99 a1       	ldd	r25, Y+33	; 0x21
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	37 87       	std	Z+15, r19	; 0x0f
    3cda:	26 87       	std	Z+14, r18	; 0x0e
    3cdc:	12 c1       	rjmp	.+548    	; 0x3f02 <_ZN12Adafruit_GFX5writeEh+0x40e>
    3cde:	8a a1       	ldd	r24, Y+34	; 0x22
    3ce0:	8d 30       	cpi	r24, 0x0D	; 13
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <_ZN12Adafruit_GFX5writeEh+0x1f2>
    3ce4:	0e c1       	rjmp	.+540    	; 0x3f02 <_ZN12Adafruit_GFX5writeEh+0x40e>
    3ce6:	88 a1       	ldd	r24, Y+32	; 0x20
    3ce8:	99 a1       	ldd	r25, Y+33	; 0x21
    3cea:	fc 01       	movw	r30, r24
    3cec:	81 8d       	ldd	r24, Z+25	; 0x19
    3cee:	92 8d       	ldd	r25, Z+26	; 0x1a
    3cf0:	04 96       	adiw	r24, 0x04	; 4
    3cf2:	9d 83       	std	Y+5, r25	; 0x05
    3cf4:	8c 83       	std	Y+4, r24	; 0x04
    3cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	84 91       	lpm	r24, Z
    3cfe:	8e 83       	std	Y+6, r24	; 0x06
    3d00:	8e 81       	ldd	r24, Y+6	; 0x06
    3d02:	8f 83       	std	Y+7, r24	; 0x07
    3d04:	9a a1       	ldd	r25, Y+34	; 0x22
    3d06:	8f 81       	ldd	r24, Y+7	; 0x07
    3d08:	98 17       	cp	r25, r24
    3d0a:	98 f0       	brcs	.+38     	; 0x3d32 <_ZN12Adafruit_GFX5writeEh+0x23e>
    3d0c:	88 a1       	ldd	r24, Y+32	; 0x20
    3d0e:	99 a1       	ldd	r25, Y+33	; 0x21
    3d10:	fc 01       	movw	r30, r24
    3d12:	81 8d       	ldd	r24, Z+25	; 0x19
    3d14:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d16:	06 96       	adiw	r24, 0x06	; 6
    3d18:	99 87       	std	Y+9, r25	; 0x09
    3d1a:	88 87       	std	Y+8, r24	; 0x08
    3d1c:	88 85       	ldd	r24, Y+8	; 0x08
    3d1e:	99 85       	ldd	r25, Y+9	; 0x09
    3d20:	fc 01       	movw	r30, r24
    3d22:	84 91       	lpm	r24, Z
    3d24:	8a 87       	std	Y+10, r24	; 0x0a
    3d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d28:	8a a1       	ldd	r24, Y+34	; 0x22
    3d2a:	98 17       	cp	r25, r24
    3d2c:	10 f0       	brcs	.+4      	; 0x3d32 <_ZN12Adafruit_GFX5writeEh+0x23e>
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	01 c0       	rjmp	.+2      	; 0x3d34 <_ZN12Adafruit_GFX5writeEh+0x240>
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	88 23       	and	r24, r24
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <_ZN12Adafruit_GFX5writeEh+0x246>
    3d38:	e4 c0       	rjmp	.+456    	; 0x3f02 <_ZN12Adafruit_GFX5writeEh+0x40e>
    3d3a:	9a a1       	ldd	r25, Y+34	; 0x22
    3d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d3e:	29 2f       	mov	r18, r25
    3d40:	28 1b       	sub	r18, r24
    3d42:	88 a1       	ldd	r24, Y+32	; 0x20
    3d44:	99 a1       	ldd	r25, Y+33	; 0x21
    3d46:	fc 01       	movw	r30, r24
    3d48:	81 8d       	ldd	r24, Z+25	; 0x19
    3d4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d4c:	62 2f       	mov	r22, r18
    3d4e:	0e 94 ae 13 	call	0x275c	; 0x275c <_Z18pgm_read_glyph_ptrPK7GFXfonth>
    3d52:	9c 87       	std	Y+12, r25	; 0x0c
    3d54:	8b 87       	std	Y+11, r24	; 0x0b
    3d56:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d58:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d5a:	02 96       	adiw	r24, 0x02	; 2
    3d5c:	9e 87       	std	Y+14, r25	; 0x0e
    3d5e:	8d 87       	std	Y+13, r24	; 0x0d
    3d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d64:	fc 01       	movw	r30, r24
    3d66:	84 91       	lpm	r24, Z
    3d68:	8f 87       	std	Y+15, r24	; 0x0f
    3d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d6c:	88 8b       	std	Y+16, r24	; 0x10
    3d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d70:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d72:	03 96       	adiw	r24, 0x03	; 3
    3d74:	9a 8b       	std	Y+18, r25	; 0x12
    3d76:	89 8b       	std	Y+17, r24	; 0x11
    3d78:	89 89       	ldd	r24, Y+17	; 0x11
    3d7a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	84 91       	lpm	r24, Z
    3d80:	8b 8b       	std	Y+19, r24	; 0x13
    3d82:	8b 89       	ldd	r24, Y+19	; 0x13
    3d84:	8c 8b       	std	Y+20, r24	; 0x14
    3d86:	88 89       	ldd	r24, Y+16	; 0x10
    3d88:	88 23       	and	r24, r24
    3d8a:	09 f4       	brne	.+2      	; 0x3d8e <_ZN12Adafruit_GFX5writeEh+0x29a>
    3d8c:	94 c0       	rjmp	.+296    	; 0x3eb6 <_ZN12Adafruit_GFX5writeEh+0x3c2>
    3d8e:	8c 89       	ldd	r24, Y+20	; 0x14
    3d90:	88 23       	and	r24, r24
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <_ZN12Adafruit_GFX5writeEh+0x2a2>
    3d94:	90 c0       	rjmp	.+288    	; 0x3eb6 <_ZN12Adafruit_GFX5writeEh+0x3c2>
    3d96:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d98:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d9a:	05 96       	adiw	r24, 0x05	; 5
    3d9c:	9e 8b       	std	Y+22, r25	; 0x16
    3d9e:	8d 8b       	std	Y+21, r24	; 0x15
    3da0:	8d 89       	ldd	r24, Y+21	; 0x15
    3da2:	9e 89       	ldd	r25, Y+22	; 0x16
    3da4:	fc 01       	movw	r30, r24
    3da6:	84 91       	lpm	r24, Z
    3da8:	8f 8b       	std	Y+23, r24	; 0x17
    3daa:	8f 89       	ldd	r24, Y+23	; 0x17
    3dac:	08 2e       	mov	r0, r24
    3dae:	00 0c       	add	r0, r0
    3db0:	99 0b       	sbc	r25, r25
    3db2:	99 8f       	std	Y+25, r25	; 0x19
    3db4:	88 8f       	std	Y+24, r24	; 0x18
    3db6:	88 a1       	ldd	r24, Y+32	; 0x20
    3db8:	99 a1       	ldd	r25, Y+33	; 0x21
    3dba:	fc 01       	movw	r30, r24
    3dbc:	87 89       	ldd	r24, Z+23	; 0x17
    3dbe:	88 23       	and	r24, r24
    3dc0:	09 f4       	brne	.+2      	; 0x3dc4 <_ZN12Adafruit_GFX5writeEh+0x2d0>
    3dc2:	51 c0       	rjmp	.+162    	; 0x3e66 <_ZN12Adafruit_GFX5writeEh+0x372>
    3dc4:	88 a1       	ldd	r24, Y+32	; 0x20
    3dc6:	99 a1       	ldd	r25, Y+33	; 0x21
    3dc8:	fc 01       	movw	r30, r24
    3dca:	24 85       	ldd	r18, Z+12	; 0x0c
    3dcc:	35 85       	ldd	r19, Z+13	; 0x0d
    3dce:	88 a1       	ldd	r24, Y+32	; 0x20
    3dd0:	99 a1       	ldd	r25, Y+33	; 0x21
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	84 89       	ldd	r24, Z+20	; 0x14
    3dd6:	68 2f       	mov	r22, r24
    3dd8:	70 e0       	ldi	r23, 0x00	; 0
    3dda:	88 89       	ldd	r24, Y+16	; 0x10
    3ddc:	48 2f       	mov	r20, r24
    3dde:	50 e0       	ldi	r21, 0x00	; 0
    3de0:	88 8d       	ldd	r24, Y+24	; 0x18
    3de2:	99 8d       	ldd	r25, Y+25	; 0x19
    3de4:	48 0f       	add	r20, r24
    3de6:	59 1f       	adc	r21, r25
    3de8:	64 9f       	mul	r22, r20
    3dea:	c0 01       	movw	r24, r0
    3dec:	65 9f       	mul	r22, r21
    3dee:	90 0d       	add	r25, r0
    3df0:	74 9f       	mul	r23, r20
    3df2:	90 0d       	add	r25, r0
    3df4:	11 24       	eor	r1, r1
    3df6:	28 0f       	add	r18, r24
    3df8:	39 1f       	adc	r19, r25
    3dfa:	88 a1       	ldd	r24, Y+32	; 0x20
    3dfc:	99 a1       	ldd	r25, Y+33	; 0x21
    3dfe:	fc 01       	movw	r30, r24
    3e00:	80 85       	ldd	r24, Z+8	; 0x08
    3e02:	91 85       	ldd	r25, Z+9	; 0x09
    3e04:	82 17       	cp	r24, r18
    3e06:	93 07       	cpc	r25, r19
    3e08:	74 f5       	brge	.+92     	; 0x3e66 <_ZN12Adafruit_GFX5writeEh+0x372>
    3e0a:	88 a1       	ldd	r24, Y+32	; 0x20
    3e0c:	99 a1       	ldd	r25, Y+33	; 0x21
    3e0e:	fc 01       	movw	r30, r24
    3e10:	15 86       	std	Z+13, r1	; 0x0d
    3e12:	14 86       	std	Z+12, r1	; 0x0c
    3e14:	88 a1       	ldd	r24, Y+32	; 0x20
    3e16:	99 a1       	ldd	r25, Y+33	; 0x21
    3e18:	fc 01       	movw	r30, r24
    3e1a:	85 89       	ldd	r24, Z+21	; 0x15
    3e1c:	48 2f       	mov	r20, r24
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	88 a1       	ldd	r24, Y+32	; 0x20
    3e22:	99 a1       	ldd	r25, Y+33	; 0x21
    3e24:	fc 01       	movw	r30, r24
    3e26:	81 8d       	ldd	r24, Z+25	; 0x19
    3e28:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e2a:	08 96       	adiw	r24, 0x08	; 8
    3e2c:	9b 8f       	std	Y+27, r25	; 0x1b
    3e2e:	8a 8f       	std	Y+26, r24	; 0x1a
    3e30:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e32:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e34:	fc 01       	movw	r30, r24
    3e36:	84 91       	lpm	r24, Z
    3e38:	8c 8f       	std	Y+28, r24	; 0x1c
    3e3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e3c:	28 2f       	mov	r18, r24
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	42 9f       	mul	r20, r18
    3e42:	c0 01       	movw	r24, r0
    3e44:	43 9f       	mul	r20, r19
    3e46:	90 0d       	add	r25, r0
    3e48:	52 9f       	mul	r21, r18
    3e4a:	90 0d       	add	r25, r0
    3e4c:	11 24       	eor	r1, r1
    3e4e:	28 a1       	ldd	r18, Y+32	; 0x20
    3e50:	39 a1       	ldd	r19, Y+33	; 0x21
    3e52:	f9 01       	movw	r30, r18
    3e54:	26 85       	ldd	r18, Z+14	; 0x0e
    3e56:	37 85       	ldd	r19, Z+15	; 0x0f
    3e58:	28 0f       	add	r18, r24
    3e5a:	39 1f       	adc	r19, r25
    3e5c:	88 a1       	ldd	r24, Y+32	; 0x20
    3e5e:	99 a1       	ldd	r25, Y+33	; 0x21
    3e60:	fc 01       	movw	r30, r24
    3e62:	37 87       	std	Z+15, r19	; 0x0f
    3e64:	26 87       	std	Z+14, r18	; 0x0e
    3e66:	88 a1       	ldd	r24, Y+32	; 0x20
    3e68:	99 a1       	ldd	r25, Y+33	; 0x21
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	b5 89       	ldd	r27, Z+21	; 0x15
    3e6e:	88 a1       	ldd	r24, Y+32	; 0x20
    3e70:	99 a1       	ldd	r25, Y+33	; 0x21
    3e72:	fc 01       	movw	r30, r24
    3e74:	a4 89       	ldd	r26, Z+20	; 0x14
    3e76:	88 a1       	ldd	r24, Y+32	; 0x20
    3e78:	99 a1       	ldd	r25, Y+33	; 0x21
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	02 88       	ldd	r0, Z+18	; 0x12
    3e7e:	f3 89       	ldd	r31, Z+19	; 0x13
    3e80:	e0 2d       	mov	r30, r0
    3e82:	fc a3       	std	Y+36, r31	; 0x24
    3e84:	eb a3       	std	Y+35, r30	; 0x23
    3e86:	88 a1       	ldd	r24, Y+32	; 0x20
    3e88:	99 a1       	ldd	r25, Y+33	; 0x21
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	20 89       	ldd	r18, Z+16	; 0x10
    3e8e:	31 89       	ldd	r19, Z+17	; 0x11
    3e90:	88 a1       	ldd	r24, Y+32	; 0x20
    3e92:	99 a1       	ldd	r25, Y+33	; 0x21
    3e94:	fc 01       	movw	r30, r24
    3e96:	46 85       	ldd	r20, Z+14	; 0x0e
    3e98:	57 85       	ldd	r21, Z+15	; 0x0f
    3e9a:	88 a1       	ldd	r24, Y+32	; 0x20
    3e9c:	99 a1       	ldd	r25, Y+33	; 0x21
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	64 85       	ldd	r22, Z+12	; 0x0c
    3ea2:	75 85       	ldd	r23, Z+13	; 0x0d
    3ea4:	88 a1       	ldd	r24, Y+32	; 0x20
    3ea6:	99 a1       	ldd	r25, Y+33	; 0x21
    3ea8:	ab 2e       	mov	r10, r27
    3eaa:	ca 2e       	mov	r12, r26
    3eac:	eb a0       	ldd	r14, Y+35	; 0x23
    3eae:	fc a0       	ldd	r15, Y+36	; 0x24
    3eb0:	89 01       	movw	r16, r18
    3eb2:	2a a1       	ldd	r18, Y+34	; 0x22
    3eb4:	cd da       	rcall	.-2662   	; 0x3450 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    3eb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3eb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3eba:	04 96       	adiw	r24, 0x04	; 4
    3ebc:	9e 8f       	std	Y+30, r25	; 0x1e
    3ebe:	8d 8f       	std	Y+29, r24	; 0x1d
    3ec0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ec2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	84 91       	lpm	r24, Z
    3ec8:	8f 8f       	std	Y+31, r24	; 0x1f
    3eca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ecc:	48 2f       	mov	r20, r24
    3ece:	50 e0       	ldi	r21, 0x00	; 0
    3ed0:	88 a1       	ldd	r24, Y+32	; 0x20
    3ed2:	99 a1       	ldd	r25, Y+33	; 0x21
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	84 89       	ldd	r24, Z+20	; 0x14
    3ed8:	28 2f       	mov	r18, r24
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	42 9f       	mul	r20, r18
    3ede:	c0 01       	movw	r24, r0
    3ee0:	43 9f       	mul	r20, r19
    3ee2:	90 0d       	add	r25, r0
    3ee4:	52 9f       	mul	r21, r18
    3ee6:	90 0d       	add	r25, r0
    3ee8:	11 24       	eor	r1, r1
    3eea:	28 a1       	ldd	r18, Y+32	; 0x20
    3eec:	39 a1       	ldd	r19, Y+33	; 0x21
    3eee:	f9 01       	movw	r30, r18
    3ef0:	24 85       	ldd	r18, Z+12	; 0x0c
    3ef2:	35 85       	ldd	r19, Z+13	; 0x0d
    3ef4:	28 0f       	add	r18, r24
    3ef6:	39 1f       	adc	r19, r25
    3ef8:	88 a1       	ldd	r24, Y+32	; 0x20
    3efa:	99 a1       	ldd	r25, Y+33	; 0x21
    3efc:	fc 01       	movw	r30, r24
    3efe:	35 87       	std	Z+13, r19	; 0x0d
    3f00:	24 87       	std	Z+12, r18	; 0x0c
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	a4 96       	adiw	r28, 0x24	; 36
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	f8 94       	cli
    3f0c:	de bf       	out	0x3e, r29	; 62
    3f0e:	0f be       	out	0x3f, r0	; 63
    3f10:	cd bf       	out	0x3d, r28	; 61
    3f12:	df 91       	pop	r29
    3f14:	cf 91       	pop	r28
    3f16:	1f 91       	pop	r17
    3f18:	0f 91       	pop	r16
    3f1a:	ff 90       	pop	r15
    3f1c:	ef 90       	pop	r14
    3f1e:	cf 90       	pop	r12
    3f20:	af 90       	pop	r10
    3f22:	08 95       	ret

00003f24 <_ZN12Adafruit_GFX11setTextSizeEh>:
    3f24:	cf 93       	push	r28
    3f26:	df 93       	push	r29
    3f28:	00 d0       	rcall	.+0      	; 0x3f2a <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	9a 83       	std	Y+2, r25	; 0x02
    3f30:	89 83       	std	Y+1, r24	; 0x01
    3f32:	6b 83       	std	Y+3, r22	; 0x03
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	9a 81       	ldd	r25, Y+2	; 0x02
    3f38:	4b 81       	ldd	r20, Y+3	; 0x03
    3f3a:	6b 81       	ldd	r22, Y+3	; 0x03
    3f3c:	07 d0       	rcall	.+14     	; 0x3f4c <_ZN12Adafruit_GFX11setTextSizeEhh>
    3f3e:	00 00       	nop
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	df 91       	pop	r29
    3f48:	cf 91       	pop	r28
    3f4a:	08 95       	ret

00003f4c <_ZN12Adafruit_GFX11setTextSizeEhh>:
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	00 d0       	rcall	.+0      	; 0x3f52 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    3f52:	1f 92       	push	r1
    3f54:	cd b7       	in	r28, 0x3d	; 61
    3f56:	de b7       	in	r29, 0x3e	; 62
    3f58:	9a 83       	std	Y+2, r25	; 0x02
    3f5a:	89 83       	std	Y+1, r24	; 0x01
    3f5c:	6b 83       	std	Y+3, r22	; 0x03
    3f5e:	4c 83       	std	Y+4, r20	; 0x04
    3f60:	8b 81       	ldd	r24, Y+3	; 0x03
    3f62:	88 23       	and	r24, r24
    3f64:	11 f0       	breq	.+4      	; 0x3f6a <_ZN12Adafruit_GFX11setTextSizeEhh+0x1e>
    3f66:	2b 81       	ldd	r18, Y+3	; 0x03
    3f68:	01 c0       	rjmp	.+2      	; 0x3f6c <_ZN12Adafruit_GFX11setTextSizeEhh+0x20>
    3f6a:	21 e0       	ldi	r18, 0x01	; 1
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f70:	fc 01       	movw	r30, r24
    3f72:	24 8b       	std	Z+20, r18	; 0x14
    3f74:	8c 81       	ldd	r24, Y+4	; 0x04
    3f76:	88 23       	and	r24, r24
    3f78:	11 f0       	breq	.+4      	; 0x3f7e <_ZN12Adafruit_GFX11setTextSizeEhh+0x32>
    3f7a:	2c 81       	ldd	r18, Y+4	; 0x04
    3f7c:	01 c0       	rjmp	.+2      	; 0x3f80 <_ZN12Adafruit_GFX11setTextSizeEhh+0x34>
    3f7e:	21 e0       	ldi	r18, 0x01	; 1
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	9a 81       	ldd	r25, Y+2	; 0x02
    3f84:	fc 01       	movw	r30, r24
    3f86:	25 8b       	std	Z+21, r18	; 0x15
    3f88:	00 00       	nop
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	df 91       	pop	r29
    3f94:	cf 91       	pop	r28
    3f96:	08 95       	ret

00003f98 <_ZN12Adafruit_GFX11setRotationEh>:
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	00 d0       	rcall	.+0      	; 0x3f9e <_ZN12Adafruit_GFX11setRotationEh+0x6>
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	9a 83       	std	Y+2, r25	; 0x02
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	6b 83       	std	Y+3, r22	; 0x03
    3fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    3faa:	28 2f       	mov	r18, r24
    3fac:	23 70       	andi	r18, 0x03	; 3
    3fae:	89 81       	ldd	r24, Y+1	; 0x01
    3fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	26 8b       	std	Z+22, r18	; 0x16
    3fb6:	89 81       	ldd	r24, Y+1	; 0x01
    3fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fba:	fc 01       	movw	r30, r24
    3fbc:	86 89       	ldd	r24, Z+22	; 0x16
    3fbe:	88 2f       	mov	r24, r24
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	81 30       	cpi	r24, 0x01	; 1
    3fc4:	91 05       	cpc	r25, r1
    3fc6:	09 f1       	breq	.+66     	; 0x400a <_ZN12Adafruit_GFX11setRotationEh+0x72>
    3fc8:	82 30       	cpi	r24, 0x02	; 2
    3fca:	91 05       	cpc	r25, r1
    3fcc:	1c f4       	brge	.+6      	; 0x3fd4 <_ZN12Adafruit_GFX11setRotationEh+0x3c>
    3fce:	89 2b       	or	r24, r25
    3fd0:	39 f0       	breq	.+14     	; 0x3fe0 <_ZN12Adafruit_GFX11setRotationEh+0x48>
    3fd2:	30 c0       	rjmp	.+96     	; 0x4034 <_ZN12Adafruit_GFX11setRotationEh+0x9c>
    3fd4:	82 30       	cpi	r24, 0x02	; 2
    3fd6:	91 05       	cpc	r25, r1
    3fd8:	19 f0       	breq	.+6      	; 0x3fe0 <_ZN12Adafruit_GFX11setRotationEh+0x48>
    3fda:	03 97       	sbiw	r24, 0x03	; 3
    3fdc:	b1 f0       	breq	.+44     	; 0x400a <_ZN12Adafruit_GFX11setRotationEh+0x72>
    3fde:	2a c0       	rjmp	.+84     	; 0x4034 <_ZN12Adafruit_GFX11setRotationEh+0x9c>
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
    3fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	24 81       	ldd	r18, Z+4	; 0x04
    3fe8:	35 81       	ldd	r19, Z+5	; 0x05
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	9a 81       	ldd	r25, Y+2	; 0x02
    3fee:	fc 01       	movw	r30, r24
    3ff0:	31 87       	std	Z+9, r19	; 0x09
    3ff2:	20 87       	std	Z+8, r18	; 0x08
    3ff4:	89 81       	ldd	r24, Y+1	; 0x01
    3ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	26 81       	ldd	r18, Z+6	; 0x06
    3ffc:	37 81       	ldd	r19, Z+7	; 0x07
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	9a 81       	ldd	r25, Y+2	; 0x02
    4002:	fc 01       	movw	r30, r24
    4004:	33 87       	std	Z+11, r19	; 0x0b
    4006:	22 87       	std	Z+10, r18	; 0x0a
    4008:	15 c0       	rjmp	.+42     	; 0x4034 <_ZN12Adafruit_GFX11setRotationEh+0x9c>
    400a:	89 81       	ldd	r24, Y+1	; 0x01
    400c:	9a 81       	ldd	r25, Y+2	; 0x02
    400e:	fc 01       	movw	r30, r24
    4010:	26 81       	ldd	r18, Z+6	; 0x06
    4012:	37 81       	ldd	r19, Z+7	; 0x07
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	9a 81       	ldd	r25, Y+2	; 0x02
    4018:	fc 01       	movw	r30, r24
    401a:	31 87       	std	Z+9, r19	; 0x09
    401c:	20 87       	std	Z+8, r18	; 0x08
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	9a 81       	ldd	r25, Y+2	; 0x02
    4022:	fc 01       	movw	r30, r24
    4024:	24 81       	ldd	r18, Z+4	; 0x04
    4026:	35 81       	ldd	r19, Z+5	; 0x05
    4028:	89 81       	ldd	r24, Y+1	; 0x01
    402a:	9a 81       	ldd	r25, Y+2	; 0x02
    402c:	fc 01       	movw	r30, r24
    402e:	33 87       	std	Z+11, r19	; 0x0b
    4030:	22 87       	std	Z+10, r18	; 0x0a
    4032:	00 00       	nop
    4034:	00 00       	nop
    4036:	0f 90       	pop	r0
    4038:	0f 90       	pop	r0
    403a:	0f 90       	pop	r0
    403c:	df 91       	pop	r29
    403e:	cf 91       	pop	r28
    4040:	08 95       	ret

00004042 <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
    4042:	cf 93       	push	r28
    4044:	df 93       	push	r29
    4046:	00 d0       	rcall	.+0      	; 0x4048 <_ZN12Adafruit_GFX13invertDisplayEb+0x6>
    4048:	cd b7       	in	r28, 0x3d	; 61
    404a:	de b7       	in	r29, 0x3e	; 62
    404c:	9a 83       	std	Y+2, r25	; 0x02
    404e:	89 83       	std	Y+1, r24	; 0x01
    4050:	6b 83       	std	Y+3, r22	; 0x03
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    4052:	00 00       	nop
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	df 91       	pop	r29
    405c:	cf 91       	pop	r28
    405e:	08 95       	ret

00004060 <_ZN8SPIClass8transferEh>:
    SPCR = settings.spcr;
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    4060:	cf 93       	push	r28
    4062:	df 93       	push	r29
    4064:	1f 92       	push	r1
    4066:	cd b7       	in	r28, 0x3d	; 61
    4068:	de b7       	in	r29, 0x3e	; 62
    406a:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    406c:	8e e4       	ldi	r24, 0x4E	; 78
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	29 81       	ldd	r18, Y+1	; 0x01
    4072:	fc 01       	movw	r30, r24
    4074:	20 83       	st	Z, r18
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    4076:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    4078:	8d e4       	ldi	r24, 0x4D	; 77
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	fc 01       	movw	r30, r24
    407e:	80 81       	ld	r24, Z
    4080:	80 95       	com	r24
    4082:	88 1f       	adc	r24, r24
    4084:	88 27       	eor	r24, r24
    4086:	88 1f       	adc	r24, r24
    4088:	88 23       	and	r24, r24
    408a:	09 f0       	breq	.+2      	; 0x408e <_ZN8SPIClass8transferEh+0x2e>
    408c:	f5 cf       	rjmp	.-22     	; 0x4078 <_ZN8SPIClass8transferEh+0x18>
    return SPDR;
    408e:	8e e4       	ldi	r24, 0x4E	; 78
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	fc 01       	movw	r30, r24
    4094:	80 81       	ld	r24, Z
  }
    4096:	0f 90       	pop	r0
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	08 95       	ret

0000409e <_ZN11SPISettingsC1Ev>:
*/
void Adafruit_SSD1306::stopscroll(void) {
  TRANSACTION_START
  ssd1306_command1(SSD1306_DEACTIVATE_SCROLL);
  TRANSACTION_END
}
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	cd b7       	in	r28, 0x3d	; 61
    40a4:	de b7       	in	r29, 0x3e	; 62
    40a6:	2f 97       	sbiw	r28, 0x0f	; 15
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	f8 94       	cli
    40ac:	de bf       	out	0x3e, r29	; 62
    40ae:	0f be       	out	0x3f, r0	; 63
    40b0:	cd bf       	out	0x3d, r28	; 61
    40b2:	9f 87       	std	Y+15, r25	; 0x0f
    40b4:	8e 87       	std	Y+14, r24	; 0x0e
    40b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    40b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    40ba:	9a 83       	std	Y+2, r25	; 0x02
    40bc:	89 83       	std	Y+1, r24	; 0x01
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	99 e0       	ldi	r25, 0x09	; 9
    40c2:	ad e3       	ldi	r26, 0x3D	; 61
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	8b 83       	std	Y+3, r24	; 0x03
    40c8:	9c 83       	std	Y+4, r25	; 0x04
    40ca:	ad 83       	std	Y+5, r26	; 0x05
    40cc:	be 83       	std	Y+6, r27	; 0x06
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	8f 83       	std	Y+7, r24	; 0x07
    40d2:	18 86       	std	Y+8, r1	; 0x08
    40d4:	80 e0       	ldi	r24, 0x00	; 0
    40d6:	92 e1       	ldi	r25, 0x12	; 18
    40d8:	aa e7       	ldi	r26, 0x7A	; 122
    40da:	b0 e0       	ldi	r27, 0x00	; 0
    40dc:	89 87       	std	Y+9, r24	; 0x09
    40de:	9a 87       	std	Y+10, r25	; 0x0a
    40e0:	ab 87       	std	Y+11, r26	; 0x0b
    40e2:	bc 87       	std	Y+12, r27	; 0x0c
    40e4:	1d 86       	std	Y+13, r1	; 0x0d
    40e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e8:	86 30       	cpi	r24, 0x06	; 6
    40ea:	e8 f4       	brcc	.+58     	; 0x4126 <_ZN11SPISettingsC1Ev+0x88>
    40ec:	2b 81       	ldd	r18, Y+3	; 0x03
    40ee:	3c 81       	ldd	r19, Y+4	; 0x04
    40f0:	4d 81       	ldd	r20, Y+5	; 0x05
    40f2:	5e 81       	ldd	r21, Y+6	; 0x06
    40f4:	89 85       	ldd	r24, Y+9	; 0x09
    40f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    40fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    40fc:	28 17       	cp	r18, r24
    40fe:	39 07       	cpc	r19, r25
    4100:	4a 07       	cpc	r20, r26
    4102:	5b 07       	cpc	r21, r27
    4104:	80 f4       	brcc	.+32     	; 0x4126 <_ZN11SPISettingsC1Ev+0x88>
    4106:	89 85       	ldd	r24, Y+9	; 0x09
    4108:	9a 85       	ldd	r25, Y+10	; 0x0a
    410a:	ab 85       	ldd	r26, Y+11	; 0x0b
    410c:	bc 85       	ldd	r27, Y+12	; 0x0c
    410e:	b6 95       	lsr	r27
    4110:	a7 95       	ror	r26
    4112:	97 95       	ror	r25
    4114:	87 95       	ror	r24
    4116:	89 87       	std	Y+9, r24	; 0x09
    4118:	9a 87       	std	Y+10, r25	; 0x0a
    411a:	ab 87       	std	Y+11, r26	; 0x0b
    411c:	bc 87       	std	Y+12, r27	; 0x0c
    411e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4120:	8f 5f       	subi	r24, 0xFF	; 255
    4122:	8d 87       	std	Y+13, r24	; 0x0d
    4124:	e0 cf       	rjmp	.-64     	; 0x40e6 <_ZN11SPISettingsC1Ev+0x48>
    4126:	8d 85       	ldd	r24, Y+13	; 0x0d
    4128:	86 30       	cpi	r24, 0x06	; 6
    412a:	11 f4       	brne	.+4      	; 0x4130 <_ZN11SPISettingsC1Ev+0x92>
    412c:	87 e0       	ldi	r24, 0x07	; 7
    412e:	8d 87       	std	Y+13, r24	; 0x0d
    4130:	9d 85       	ldd	r25, Y+13	; 0x0d
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	89 27       	eor	r24, r25
    4136:	8d 87       	std	Y+13, r24	; 0x0d
    4138:	8f 81       	ldd	r24, Y+7	; 0x07
    413a:	88 23       	and	r24, r24
    413c:	11 f4       	brne	.+4      	; 0x4142 <_ZN11SPISettingsC1Ev+0xa4>
    413e:	80 e7       	ldi	r24, 0x70	; 112
    4140:	01 c0       	rjmp	.+2      	; 0x4144 <_ZN11SPISettingsC1Ev+0xa6>
    4142:	80 e5       	ldi	r24, 0x50	; 80
    4144:	98 85       	ldd	r25, Y+8	; 0x08
    4146:	9c 70       	andi	r25, 0x0C	; 12
    4148:	29 2f       	mov	r18, r25
    414a:	28 2b       	or	r18, r24
    414c:	8d 85       	ldd	r24, Y+13	; 0x0d
    414e:	88 2f       	mov	r24, r24
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	95 95       	asr	r25
    4154:	87 95       	ror	r24
    4156:	83 70       	andi	r24, 0x03	; 3
    4158:	82 2b       	or	r24, r18
    415a:	28 2f       	mov	r18, r24
    415c:	89 81       	ldd	r24, Y+1	; 0x01
    415e:	9a 81       	ldd	r25, Y+2	; 0x02
    4160:	fc 01       	movw	r30, r24
    4162:	20 83       	st	Z, r18
    4164:	8d 85       	ldd	r24, Y+13	; 0x0d
    4166:	28 2f       	mov	r18, r24
    4168:	21 70       	andi	r18, 0x01	; 1
    416a:	89 81       	ldd	r24, Y+1	; 0x01
    416c:	9a 81       	ldd	r25, Y+2	; 0x02
    416e:	fc 01       	movw	r30, r24
    4170:	21 83       	std	Z+1, r18	; 0x01
    4172:	00 00       	nop
    4174:	2f 96       	adiw	r28, 0x0f	; 15
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	f8 94       	cli
    417a:	de bf       	out	0x3e, r29	; 62
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	cd bf       	out	0x3d, r28	; 61
    4180:	df 91       	pop	r29
    4182:	cf 91       	pop	r28
    4184:	08 95       	ret

00004186 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    4186:	8f 92       	push	r8
    4188:	9f 92       	push	r9
    418a:	af 92       	push	r10
    418c:	bf 92       	push	r11
    418e:	cf 92       	push	r12
    4190:	df 92       	push	r13
    4192:	ef 92       	push	r14
    4194:	ff 92       	push	r15
    4196:	0f 93       	push	r16
    4198:	cf 93       	push	r28
    419a:	df 93       	push	r29
    419c:	cd b7       	in	r28, 0x3d	; 61
    419e:	de b7       	in	r29, 0x3e	; 62
    41a0:	2f 97       	sbiw	r28, 0x0f	; 15
    41a2:	0f b6       	in	r0, 0x3f	; 63
    41a4:	f8 94       	cli
    41a6:	de bf       	out	0x3e, r29	; 62
    41a8:	0f be       	out	0x3f, r0	; 63
    41aa:	cd bf       	out	0x3d, r28	; 61
    41ac:	9a 83       	std	Y+2, r25	; 0x02
    41ae:	89 83       	std	Y+1, r24	; 0x01
    41b0:	6b 83       	std	Y+3, r22	; 0x03
    41b2:	4c 83       	std	Y+4, r20	; 0x04
    41b4:	3e 83       	std	Y+6, r19	; 0x06
    41b6:	2d 83       	std	Y+5, r18	; 0x05
    41b8:	0f 83       	std	Y+7, r16	; 0x07
    41ba:	c8 86       	std	Y+8, r12	; 0x08
    41bc:	d9 86       	std	Y+9, r13	; 0x09
    41be:	ea 86       	std	Y+10, r14	; 0x0a
    41c0:	fb 86       	std	Y+11, r15	; 0x0b
    41c2:	8c 86       	std	Y+12, r8	; 0x0c
    41c4:	9d 86       	std	Y+13, r9	; 0x0d
    41c6:	ae 86       	std	Y+14, r10	; 0x0e
    41c8:	bf 86       	std	Y+15, r11	; 0x0f
    41ca:	8c 81       	ldd	r24, Y+4	; 0x04
    41cc:	48 2f       	mov	r20, r24
    41ce:	50 e0       	ldi	r21, 0x00	; 0
    41d0:	8b 81       	ldd	r24, Y+3	; 0x03
    41d2:	28 2f       	mov	r18, r24
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
    41d8:	9a 81       	ldd	r25, Y+2	; 0x02
    41da:	b9 01       	movw	r22, r18
    41dc:	0e 94 06 14 	call	0x280c	; 0x280c <_ZN12Adafruit_GFXC1Eii>
    41e0:	2d ec       	ldi	r18, 0xCD	; 205
    41e2:	32 e0       	ldi	r19, 0x02	; 2
    41e4:	89 81       	ldd	r24, Y+1	; 0x01
    41e6:	9a 81       	ldd	r25, Y+2	; 0x02
    41e8:	fc 01       	movw	r30, r24
    41ea:	31 83       	std	Z+1, r19	; 0x01
    41ec:	20 83       	st	Z, r18
    41ee:	89 81       	ldd	r24, Y+1	; 0x01
    41f0:	9a 81       	ldd	r25, Y+2	; 0x02
    41f2:	fc 01       	movw	r30, r24
    41f4:	14 8e       	std	Z+28, r1	; 0x1c
    41f6:	13 8e       	std	Z+27, r1	; 0x1b
    41f8:	8d 81       	ldd	r24, Y+5	; 0x05
    41fa:	9e 81       	ldd	r25, Y+6	; 0x06
    41fc:	89 2b       	or	r24, r25
    41fe:	19 f0       	breq	.+6      	; 0x4206 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x80>
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	02 c0       	rjmp	.+4      	; 0x420a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x84>
    4206:	85 ec       	ldi	r24, 0xC5	; 197
    4208:	95 e0       	ldi	r25, 0x05	; 5
    420a:	29 81       	ldd	r18, Y+1	; 0x01
    420c:	3a 81       	ldd	r19, Y+2	; 0x02
    420e:	f9 01       	movw	r30, r18
    4210:	96 8f       	std	Z+30, r25	; 0x1e
    4212:	85 8f       	std	Z+29, r24	; 0x1d
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	fc 01       	movw	r30, r24
    421a:	10 a2       	std	Z+32, r1	; 0x20
    421c:	17 8e       	std	Z+31, r1	; 0x1f
    421e:	89 81       	ldd	r24, Y+1	; 0x01
    4220:	9a 81       	ldd	r25, Y+2	; 0x02
    4222:	2f ef       	ldi	r18, 0xFF	; 255
    4224:	fc 01       	movw	r30, r24
    4226:	24 a3       	std	Z+36, r18	; 0x24
    4228:	89 81       	ldd	r24, Y+1	; 0x01
    422a:	9a 81       	ldd	r25, Y+2	; 0x02
    422c:	2f ef       	ldi	r18, 0xFF	; 255
    422e:	fc 01       	movw	r30, r24
    4230:	25 a3       	std	Z+37, r18	; 0x25
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	9a 81       	ldd	r25, Y+2	; 0x02
    4236:	2f ef       	ldi	r18, 0xFF	; 255
    4238:	fc 01       	movw	r30, r24
    423a:	26 a3       	std	Z+38, r18	; 0x26
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	9a 81       	ldd	r25, Y+2	; 0x02
    4240:	2f ef       	ldi	r18, 0xFF	; 255
    4242:	fc 01       	movw	r30, r24
    4244:	27 a3       	std	Z+39, r18	; 0x27
    4246:	89 81       	ldd	r24, Y+1	; 0x01
    4248:	9a 81       	ldd	r25, Y+2	; 0x02
    424a:	2f 81       	ldd	r18, Y+7	; 0x07
    424c:	fc 01       	movw	r30, r24
    424e:	20 a7       	std	Z+40, r18	; 0x28
    4250:	29 81       	ldd	r18, Y+1	; 0x01
    4252:	3a 81       	ldd	r19, Y+2	; 0x02
    4254:	88 85       	ldd	r24, Y+8	; 0x08
    4256:	99 85       	ldd	r25, Y+9	; 0x09
    4258:	aa 85       	ldd	r26, Y+10	; 0x0a
    425a:	bb 85       	ldd	r27, Y+11	; 0x0b
    425c:	f9 01       	movw	r30, r18
    425e:	85 ab       	std	Z+53, r24	; 0x35
    4260:	96 ab       	std	Z+54, r25	; 0x36
    4262:	a7 ab       	std	Z+55, r26	; 0x37
    4264:	b0 af       	std	Z+56, r27	; 0x38
    4266:	29 81       	ldd	r18, Y+1	; 0x01
    4268:	3a 81       	ldd	r19, Y+2	; 0x02
    426a:	8c 85       	ldd	r24, Y+12	; 0x0c
    426c:	9d 85       	ldd	r25, Y+13	; 0x0d
    426e:	ae 85       	ldd	r26, Y+14	; 0x0e
    4270:	bf 85       	ldd	r27, Y+15	; 0x0f
    4272:	f9 01       	movw	r30, r18
    4274:	81 af       	std	Z+57, r24	; 0x39
    4276:	92 af       	std	Z+58, r25	; 0x3a
    4278:	a3 af       	std	Z+59, r26	; 0x3b
    427a:	b4 af       	std	Z+60, r27	; 0x3c
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	9a 81       	ldd	r25, Y+2	; 0x02
    4280:	ce 96       	adiw	r24, 0x3e	; 62
    4282:	0d df       	rcall	.-486    	; 0x409e <_ZN11SPISettingsC1Ev>
    4284:	00 00       	nop
    4286:	2f 96       	adiw	r28, 0x0f	; 15
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	f8 94       	cli
    428c:	de bf       	out	0x3e, r29	; 62
    428e:	0f be       	out	0x3f, r0	; 63
    4290:	cd bf       	out	0x3d, r28	; 61
    4292:	df 91       	pop	r29
    4294:	cf 91       	pop	r28
    4296:	0f 91       	pop	r16
    4298:	ff 90       	pop	r15
    429a:	ef 90       	pop	r14
    429c:	df 90       	pop	r13
    429e:	cf 90       	pop	r12
    42a0:	bf 90       	pop	r11
    42a2:	af 90       	pop	r10
    42a4:	9f 90       	pop	r9
    42a6:	8f 90       	pop	r8
    42a8:	08 95       	ret

000042aa <_ZN16Adafruit_SSD1306D1Ev>:
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	1f 92       	push	r1
    42b0:	1f 92       	push	r1
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	9a 83       	std	Y+2, r25	; 0x02
    42b8:	89 83       	std	Y+1, r24	; 0x01
    42ba:	2d ec       	ldi	r18, 0xCD	; 205
    42bc:	32 e0       	ldi	r19, 0x02	; 2
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	9a 81       	ldd	r25, Y+2	; 0x02
    42c2:	fc 01       	movw	r30, r24
    42c4:	31 83       	std	Z+1, r19	; 0x01
    42c6:	20 83       	st	Z, r18
    42c8:	89 81       	ldd	r24, Y+1	; 0x01
    42ca:	9a 81       	ldd	r25, Y+2	; 0x02
    42cc:	fc 01       	movw	r30, r24
    42ce:	87 8d       	ldd	r24, Z+31	; 0x1f
    42d0:	90 a1       	ldd	r25, Z+32	; 0x20
    42d2:	89 2b       	or	r24, r25
    42d4:	61 f0       	breq	.+24     	; 0x42ee <_ZN16Adafruit_SSD1306D1Ev+0x44>
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	9a 81       	ldd	r25, Y+2	; 0x02
    42da:	fc 01       	movw	r30, r24
    42dc:	87 8d       	ldd	r24, Z+31	; 0x1f
    42de:	90 a1       	ldd	r25, Z+32	; 0x20
    42e0:	0e 94 90 64 	call	0xc920	; 0xc920 <free>
    42e4:	89 81       	ldd	r24, Y+1	; 0x01
    42e6:	9a 81       	ldd	r25, Y+2	; 0x02
    42e8:	fc 01       	movw	r30, r24
    42ea:	10 a2       	std	Z+32, r1	; 0x20
    42ec:	17 8e       	std	Z+31, r1	; 0x1f
    42ee:	00 00       	nop
    42f0:	0f 90       	pop	r0
    42f2:	0f 90       	pop	r0
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	08 95       	ret

000042fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    42fa:	cf 93       	push	r28
    42fc:	df 93       	push	r29
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
    4302:	27 97       	sbiw	r28, 0x07	; 7
    4304:	0f b6       	in	r0, 0x3f	; 63
    4306:	f8 94       	cli
    4308:	de bf       	out	0x3e, r29	; 62
    430a:	0f be       	out	0x3f, r0	; 63
    430c:	cd bf       	out	0x3d, r28	; 61
    430e:	9e 83       	std	Y+6, r25	; 0x06
    4310:	8d 83       	std	Y+5, r24	; 0x05
    4312:	6f 83       	std	Y+7, r22	; 0x07
    4314:	8d 81       	ldd	r24, Y+5	; 0x05
    4316:	9e 81       	ldd	r25, Y+6	; 0x06
    4318:	fc 01       	movw	r30, r24
    431a:	85 8d       	ldd	r24, Z+29	; 0x1d
    431c:	96 8d       	ldd	r25, Z+30	; 0x1e
    431e:	89 2b       	or	r24, r25
    4320:	e9 f1       	breq	.+122    	; 0x439c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xa2>
    4322:	8d 81       	ldd	r24, Y+5	; 0x05
    4324:	9e 81       	ldd	r25, Y+6	; 0x06
    4326:	fc 01       	movw	r30, r24
    4328:	81 a1       	ldd	r24, Z+33	; 0x21
    432a:	28 2f       	mov	r18, r24
    432c:	88 0f       	add	r24, r24
    432e:	33 0b       	sbc	r19, r19
    4330:	8d 81       	ldd	r24, Y+5	; 0x05
    4332:	9e 81       	ldd	r25, Y+6	; 0x06
    4334:	fc 01       	movw	r30, r24
    4336:	85 8d       	ldd	r24, Z+29	; 0x1d
    4338:	96 8d       	ldd	r25, Z+30	; 0x1e
    433a:	b9 01       	movw	r22, r18
    433c:	0e 94 71 56 	call	0xace2	; 0xace2 <_ZN7TwoWire17beginTransmissionEi>
    4340:	8d 81       	ldd	r24, Y+5	; 0x05
    4342:	9e 81       	ldd	r25, Y+6	; 0x06
    4344:	fc 01       	movw	r30, r24
    4346:	85 8d       	ldd	r24, Z+29	; 0x1d
    4348:	96 8d       	ldd	r25, Z+30	; 0x1e
    434a:	fc 01       	movw	r30, r24
    434c:	80 81       	ld	r24, Z
    434e:	91 81       	ldd	r25, Z+1	; 0x01
    4350:	fc 01       	movw	r30, r24
    4352:	20 81       	ld	r18, Z
    4354:	31 81       	ldd	r19, Z+1	; 0x01
    4356:	8d 81       	ldd	r24, Y+5	; 0x05
    4358:	9e 81       	ldd	r25, Y+6	; 0x06
    435a:	fc 01       	movw	r30, r24
    435c:	85 8d       	ldd	r24, Z+29	; 0x1d
    435e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4360:	60 e0       	ldi	r22, 0x00	; 0
    4362:	f9 01       	movw	r30, r18
    4364:	19 95       	eicall
    4366:	8d 81       	ldd	r24, Y+5	; 0x05
    4368:	9e 81       	ldd	r25, Y+6	; 0x06
    436a:	fc 01       	movw	r30, r24
    436c:	85 8d       	ldd	r24, Z+29	; 0x1d
    436e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4370:	fc 01       	movw	r30, r24
    4372:	80 81       	ld	r24, Z
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	fc 01       	movw	r30, r24
    4378:	20 81       	ld	r18, Z
    437a:	31 81       	ldd	r19, Z+1	; 0x01
    437c:	8d 81       	ldd	r24, Y+5	; 0x05
    437e:	9e 81       	ldd	r25, Y+6	; 0x06
    4380:	fc 01       	movw	r30, r24
    4382:	85 8d       	ldd	r24, Z+29	; 0x1d
    4384:	96 8d       	ldd	r25, Z+30	; 0x1e
    4386:	6f 81       	ldd	r22, Y+7	; 0x07
    4388:	f9 01       	movw	r30, r18
    438a:	19 95       	eicall
    438c:	8d 81       	ldd	r24, Y+5	; 0x05
    438e:	9e 81       	ldd	r25, Y+6	; 0x06
    4390:	fc 01       	movw	r30, r24
    4392:	85 8d       	ldd	r24, Z+29	; 0x1d
    4394:	96 8d       	ldd	r25, Z+30	; 0x1e
    4396:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>
    439a:	88 c0       	rjmp	.+272    	; 0x44ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x1b2>
    439c:	8d 81       	ldd	r24, Y+5	; 0x05
    439e:	9e 81       	ldd	r25, Y+6	; 0x06
    43a0:	fc 01       	movw	r30, r24
    43a2:	85 a5       	ldd	r24, Z+45	; 0x2d
    43a4:	96 a5       	ldd	r25, Z+46	; 0x2e
    43a6:	2d 81       	ldd	r18, Y+5	; 0x05
    43a8:	3e 81       	ldd	r19, Y+6	; 0x06
    43aa:	f9 01       	movw	r30, r18
    43ac:	25 a5       	ldd	r18, Z+45	; 0x2d
    43ae:	36 a5       	ldd	r19, Z+46	; 0x2e
    43b0:	f9 01       	movw	r30, r18
    43b2:	20 81       	ld	r18, Z
    43b4:	42 2f       	mov	r20, r18
    43b6:	2d 81       	ldd	r18, Y+5	; 0x05
    43b8:	3e 81       	ldd	r19, Y+6	; 0x06
    43ba:	f9 01       	movw	r30, r18
    43bc:	23 a9       	ldd	r18, Z+51	; 0x33
    43be:	20 95       	com	r18
    43c0:	24 23       	and	r18, r20
    43c2:	fc 01       	movw	r30, r24
    43c4:	20 83       	st	Z, r18
    43c6:	8d 81       	ldd	r24, Y+5	; 0x05
    43c8:	9e 81       	ldd	r25, Y+6	; 0x06
    43ca:	9a 83       	std	Y+2, r25	; 0x02
    43cc:	89 83       	std	Y+1, r24	; 0x01
    43ce:	8f 81       	ldd	r24, Y+7	; 0x07
    43d0:	8b 83       	std	Y+3, r24	; 0x03
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	9a 81       	ldd	r25, Y+2	; 0x02
    43d6:	fc 01       	movw	r30, r24
    43d8:	83 8d       	ldd	r24, Z+27	; 0x1b
    43da:	94 8d       	ldd	r25, Z+28	; 0x1c
    43dc:	89 2b       	or	r24, r25
    43de:	19 f0       	breq	.+6      	; 0x43e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xec>
    43e0:	8b 81       	ldd	r24, Y+3	; 0x03
    43e2:	3e de       	rcall	.-900    	; 0x4060 <_ZN8SPIClass8transferEh>
    43e4:	63 c0       	rjmp	.+198    	; 0x44ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x1b2>
    43e6:	80 e8       	ldi	r24, 0x80	; 128
    43e8:	8c 83       	std	Y+4, r24	; 0x04
    43ea:	8c 81       	ldd	r24, Y+4	; 0x04
    43ec:	88 23       	and	r24, r24
    43ee:	09 f4       	brne	.+2      	; 0x43f2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xf8>
    43f0:	5d c0       	rjmp	.+186    	; 0x44ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x1b2>
    43f2:	9b 81       	ldd	r25, Y+3	; 0x03
    43f4:	8c 81       	ldd	r24, Y+4	; 0x04
    43f6:	89 23       	and	r24, r25
    43f8:	88 23       	and	r24, r24
    43fa:	a1 f0       	breq	.+40     	; 0x4424 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x12a>
    43fc:	89 81       	ldd	r24, Y+1	; 0x01
    43fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4400:	fc 01       	movw	r30, r24
    4402:	81 a5       	ldd	r24, Z+41	; 0x29
    4404:	92 a5       	ldd	r25, Z+42	; 0x2a
    4406:	29 81       	ldd	r18, Y+1	; 0x01
    4408:	3a 81       	ldd	r19, Y+2	; 0x02
    440a:	f9 01       	movw	r30, r18
    440c:	21 a5       	ldd	r18, Z+41	; 0x29
    440e:	32 a5       	ldd	r19, Z+42	; 0x2a
    4410:	f9 01       	movw	r30, r18
    4412:	40 81       	ld	r20, Z
    4414:	29 81       	ldd	r18, Y+1	; 0x01
    4416:	3a 81       	ldd	r19, Y+2	; 0x02
    4418:	f9 01       	movw	r30, r18
    441a:	21 a9       	ldd	r18, Z+49	; 0x31
    441c:	24 2b       	or	r18, r20
    441e:	fc 01       	movw	r30, r24
    4420:	20 83       	st	Z, r18
    4422:	15 c0       	rjmp	.+42     	; 0x444e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x154>
    4424:	89 81       	ldd	r24, Y+1	; 0x01
    4426:	9a 81       	ldd	r25, Y+2	; 0x02
    4428:	fc 01       	movw	r30, r24
    442a:	81 a5       	ldd	r24, Z+41	; 0x29
    442c:	92 a5       	ldd	r25, Z+42	; 0x2a
    442e:	29 81       	ldd	r18, Y+1	; 0x01
    4430:	3a 81       	ldd	r19, Y+2	; 0x02
    4432:	f9 01       	movw	r30, r18
    4434:	21 a5       	ldd	r18, Z+41	; 0x29
    4436:	32 a5       	ldd	r19, Z+42	; 0x2a
    4438:	f9 01       	movw	r30, r18
    443a:	20 81       	ld	r18, Z
    443c:	42 2f       	mov	r20, r18
    443e:	29 81       	ldd	r18, Y+1	; 0x01
    4440:	3a 81       	ldd	r19, Y+2	; 0x02
    4442:	f9 01       	movw	r30, r18
    4444:	21 a9       	ldd	r18, Z+49	; 0x31
    4446:	20 95       	com	r18
    4448:	24 23       	and	r18, r20
    444a:	fc 01       	movw	r30, r24
    444c:	20 83       	st	Z, r18
    444e:	89 81       	ldd	r24, Y+1	; 0x01
    4450:	9a 81       	ldd	r25, Y+2	; 0x02
    4452:	fc 01       	movw	r30, r24
    4454:	83 a5       	ldd	r24, Z+43	; 0x2b
    4456:	94 a5       	ldd	r25, Z+44	; 0x2c
    4458:	29 81       	ldd	r18, Y+1	; 0x01
    445a:	3a 81       	ldd	r19, Y+2	; 0x02
    445c:	f9 01       	movw	r30, r18
    445e:	23 a5       	ldd	r18, Z+43	; 0x2b
    4460:	34 a5       	ldd	r19, Z+44	; 0x2c
    4462:	f9 01       	movw	r30, r18
    4464:	40 81       	ld	r20, Z
    4466:	29 81       	ldd	r18, Y+1	; 0x01
    4468:	3a 81       	ldd	r19, Y+2	; 0x02
    446a:	f9 01       	movw	r30, r18
    446c:	22 a9       	ldd	r18, Z+50	; 0x32
    446e:	24 2b       	or	r18, r20
    4470:	fc 01       	movw	r30, r24
    4472:	20 83       	st	Z, r18
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	9a 81       	ldd	r25, Y+2	; 0x02
    4478:	fc 01       	movw	r30, r24
    447a:	83 a5       	ldd	r24, Z+43	; 0x2b
    447c:	94 a5       	ldd	r25, Z+44	; 0x2c
    447e:	29 81       	ldd	r18, Y+1	; 0x01
    4480:	3a 81       	ldd	r19, Y+2	; 0x02
    4482:	f9 01       	movw	r30, r18
    4484:	23 a5       	ldd	r18, Z+43	; 0x2b
    4486:	34 a5       	ldd	r19, Z+44	; 0x2c
    4488:	f9 01       	movw	r30, r18
    448a:	20 81       	ld	r18, Z
    448c:	42 2f       	mov	r20, r18
    448e:	29 81       	ldd	r18, Y+1	; 0x01
    4490:	3a 81       	ldd	r19, Y+2	; 0x02
    4492:	f9 01       	movw	r30, r18
    4494:	22 a9       	ldd	r18, Z+50	; 0x32
    4496:	20 95       	com	r18
    4498:	24 23       	and	r18, r20
    449a:	fc 01       	movw	r30, r24
    449c:	20 83       	st	Z, r18
    449e:	8c 81       	ldd	r24, Y+4	; 0x04
    44a0:	88 2f       	mov	r24, r24
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	95 95       	asr	r25
    44a6:	87 95       	ror	r24
    44a8:	8c 83       	std	Y+4, r24	; 0x04
    44aa:	9f cf       	rjmp	.-194    	; 0x43ea <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xf0>
    44ac:	00 00       	nop
    44ae:	27 96       	adiw	r28, 0x07	; 7
    44b0:	0f b6       	in	r0, 0x3f	; 63
    44b2:	f8 94       	cli
    44b4:	de bf       	out	0x3e, r29	; 62
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	df 91       	pop	r29
    44bc:	cf 91       	pop	r28
    44be:	08 95       	ret

000044c0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	cd b7       	in	r28, 0x3d	; 61
    44c6:	de b7       	in	r29, 0x3e	; 62
    44c8:	61 97       	sbiw	r28, 0x11	; 17
    44ca:	0f b6       	in	r0, 0x3f	; 63
    44cc:	f8 94       	cli
    44ce:	de bf       	out	0x3e, r29	; 62
    44d0:	0f be       	out	0x3f, r0	; 63
    44d2:	cd bf       	out	0x3d, r28	; 61
    44d4:	9e 87       	std	Y+14, r25	; 0x0e
    44d6:	8d 87       	std	Y+13, r24	; 0x0d
    44d8:	78 8b       	std	Y+16, r23	; 0x10
    44da:	6f 87       	std	Y+15, r22	; 0x0f
    44dc:	49 8b       	std	Y+17, r20	; 0x11
    44de:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e2:	fc 01       	movw	r30, r24
    44e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    44e6:	96 8d       	ldd	r25, Z+30	; 0x1e
    44e8:	89 2b       	or	r24, r25
    44ea:	09 f4       	brne	.+2      	; 0x44ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x2e>
    44ec:	92 c0       	rjmp	.+292    	; 0x4612 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x152>
    44ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    44f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44f2:	fc 01       	movw	r30, r24
    44f4:	81 a1       	ldd	r24, Z+33	; 0x21
    44f6:	28 2f       	mov	r18, r24
    44f8:	88 0f       	add	r24, r24
    44fa:	33 0b       	sbc	r19, r19
    44fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4500:	fc 01       	movw	r30, r24
    4502:	85 8d       	ldd	r24, Z+29	; 0x1d
    4504:	96 8d       	ldd	r25, Z+30	; 0x1e
    4506:	b9 01       	movw	r22, r18
    4508:	0e 94 71 56 	call	0xace2	; 0xace2 <_ZN7TwoWire17beginTransmissionEi>
    450c:	8d 85       	ldd	r24, Y+13	; 0x0d
    450e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4510:	fc 01       	movw	r30, r24
    4512:	85 8d       	ldd	r24, Z+29	; 0x1d
    4514:	96 8d       	ldd	r25, Z+30	; 0x1e
    4516:	fc 01       	movw	r30, r24
    4518:	80 81       	ld	r24, Z
    451a:	91 81       	ldd	r25, Z+1	; 0x01
    451c:	fc 01       	movw	r30, r24
    451e:	20 81       	ld	r18, Z
    4520:	31 81       	ldd	r19, Z+1	; 0x01
    4522:	8d 85       	ldd	r24, Y+13	; 0x0d
    4524:	9e 85       	ldd	r25, Y+14	; 0x0e
    4526:	fc 01       	movw	r30, r24
    4528:	85 8d       	ldd	r24, Z+29	; 0x1d
    452a:	96 8d       	ldd	r25, Z+30	; 0x1e
    452c:	60 e0       	ldi	r22, 0x00	; 0
    452e:	f9 01       	movw	r30, r18
    4530:	19 95       	eicall
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	9a 83       	std	Y+2, r25	; 0x02
    4538:	89 83       	std	Y+1, r24	; 0x01
    453a:	89 89       	ldd	r24, Y+17	; 0x11
    453c:	9f ef       	ldi	r25, 0xFF	; 255
    453e:	98 0f       	add	r25, r24
    4540:	99 8b       	std	Y+17, r25	; 0x11
    4542:	91 e0       	ldi	r25, 0x01	; 1
    4544:	88 23       	and	r24, r24
    4546:	09 f4       	brne	.+2      	; 0x454a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8a>
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	99 23       	and	r25, r25
    454c:	09 f4       	brne	.+2      	; 0x4550 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x90>
    454e:	59 c0       	rjmp	.+178    	; 0x4602 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x142>
    4550:	89 81       	ldd	r24, Y+1	; 0x01
    4552:	9a 81       	ldd	r25, Y+2	; 0x02
    4554:	80 97       	sbiw	r24, 0x20	; 32
    4556:	68 f1       	brcs	.+90     	; 0x45b2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf2>
    4558:	8d 85       	ldd	r24, Y+13	; 0x0d
    455a:	9e 85       	ldd	r25, Y+14	; 0x0e
    455c:	fc 01       	movw	r30, r24
    455e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4560:	96 8d       	ldd	r25, Z+30	; 0x1e
    4562:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>
    4566:	8d 85       	ldd	r24, Y+13	; 0x0d
    4568:	9e 85       	ldd	r25, Y+14	; 0x0e
    456a:	fc 01       	movw	r30, r24
    456c:	81 a1       	ldd	r24, Z+33	; 0x21
    456e:	28 2f       	mov	r18, r24
    4570:	88 0f       	add	r24, r24
    4572:	33 0b       	sbc	r19, r19
    4574:	8d 85       	ldd	r24, Y+13	; 0x0d
    4576:	9e 85       	ldd	r25, Y+14	; 0x0e
    4578:	fc 01       	movw	r30, r24
    457a:	85 8d       	ldd	r24, Z+29	; 0x1d
    457c:	96 8d       	ldd	r25, Z+30	; 0x1e
    457e:	b9 01       	movw	r22, r18
    4580:	0e 94 71 56 	call	0xace2	; 0xace2 <_ZN7TwoWire17beginTransmissionEi>
    4584:	8d 85       	ldd	r24, Y+13	; 0x0d
    4586:	9e 85       	ldd	r25, Y+14	; 0x0e
    4588:	fc 01       	movw	r30, r24
    458a:	85 8d       	ldd	r24, Z+29	; 0x1d
    458c:	96 8d       	ldd	r25, Z+30	; 0x1e
    458e:	fc 01       	movw	r30, r24
    4590:	80 81       	ld	r24, Z
    4592:	91 81       	ldd	r25, Z+1	; 0x01
    4594:	fc 01       	movw	r30, r24
    4596:	20 81       	ld	r18, Z
    4598:	31 81       	ldd	r19, Z+1	; 0x01
    459a:	8d 85       	ldd	r24, Y+13	; 0x0d
    459c:	9e 85       	ldd	r25, Y+14	; 0x0e
    459e:	fc 01       	movw	r30, r24
    45a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    45a2:	96 8d       	ldd	r25, Z+30	; 0x1e
    45a4:	60 e0       	ldi	r22, 0x00	; 0
    45a6:	f9 01       	movw	r30, r18
    45a8:	19 95       	eicall
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	9a 83       	std	Y+2, r25	; 0x02
    45b0:	89 83       	std	Y+1, r24	; 0x01
    45b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    45b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    45b6:	fc 01       	movw	r30, r24
    45b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    45ba:	96 8d       	ldd	r25, Z+30	; 0x1e
    45bc:	fc 01       	movw	r30, r24
    45be:	80 81       	ld	r24, Z
    45c0:	91 81       	ldd	r25, Z+1	; 0x01
    45c2:	fc 01       	movw	r30, r24
    45c4:	20 81       	ld	r18, Z
    45c6:	31 81       	ldd	r19, Z+1	; 0x01
    45c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ca:	98 89       	ldd	r25, Y+16	; 0x10
    45cc:	ac 01       	movw	r20, r24
    45ce:	4f 5f       	subi	r20, 0xFF	; 255
    45d0:	5f 4f       	sbci	r21, 0xFF	; 255
    45d2:	58 8b       	std	Y+16, r21	; 0x10
    45d4:	4f 87       	std	Y+15, r20	; 0x0f
    45d6:	9c 83       	std	Y+4, r25	; 0x04
    45d8:	8b 83       	std	Y+3, r24	; 0x03
    45da:	8b 81       	ldd	r24, Y+3	; 0x03
    45dc:	9c 81       	ldd	r25, Y+4	; 0x04
    45de:	fc 01       	movw	r30, r24
    45e0:	84 91       	lpm	r24, Z
    45e2:	8d 83       	std	Y+5, r24	; 0x05
    45e4:	4d 81       	ldd	r20, Y+5	; 0x05
    45e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    45e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ea:	fc 01       	movw	r30, r24
    45ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    45ee:	96 8d       	ldd	r25, Z+30	; 0x1e
    45f0:	64 2f       	mov	r22, r20
    45f2:	f9 01       	movw	r30, r18
    45f4:	19 95       	eicall
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	9a 81       	ldd	r25, Y+2	; 0x02
    45fa:	01 96       	adiw	r24, 0x01	; 1
    45fc:	9a 83       	std	Y+2, r25	; 0x02
    45fe:	89 83       	std	Y+1, r24	; 0x01
    4600:	9c cf       	rjmp	.-200    	; 0x453a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7a>
    4602:	8d 85       	ldd	r24, Y+13	; 0x0d
    4604:	9e 85       	ldd	r25, Y+14	; 0x0e
    4606:	fc 01       	movw	r30, r24
    4608:	85 8d       	ldd	r24, Z+29	; 0x1d
    460a:	96 8d       	ldd	r25, Z+30	; 0x1e
    460c:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>
    4610:	a0 c0       	rjmp	.+320    	; 0x4752 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x292>
    4612:	8d 85       	ldd	r24, Y+13	; 0x0d
    4614:	9e 85       	ldd	r25, Y+14	; 0x0e
    4616:	fc 01       	movw	r30, r24
    4618:	85 a5       	ldd	r24, Z+45	; 0x2d
    461a:	96 a5       	ldd	r25, Z+46	; 0x2e
    461c:	2d 85       	ldd	r18, Y+13	; 0x0d
    461e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4620:	f9 01       	movw	r30, r18
    4622:	25 a5       	ldd	r18, Z+45	; 0x2d
    4624:	36 a5       	ldd	r19, Z+46	; 0x2e
    4626:	f9 01       	movw	r30, r18
    4628:	20 81       	ld	r18, Z
    462a:	42 2f       	mov	r20, r18
    462c:	2d 85       	ldd	r18, Y+13	; 0x0d
    462e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4630:	f9 01       	movw	r30, r18
    4632:	23 a9       	ldd	r18, Z+51	; 0x33
    4634:	20 95       	com	r18
    4636:	24 23       	and	r18, r20
    4638:	fc 01       	movw	r30, r24
    463a:	20 83       	st	Z, r18
    463c:	89 89       	ldd	r24, Y+17	; 0x11
    463e:	9f ef       	ldi	r25, 0xFF	; 255
    4640:	98 0f       	add	r25, r24
    4642:	99 8b       	std	Y+17, r25	; 0x11
    4644:	91 e0       	ldi	r25, 0x01	; 1
    4646:	88 23       	and	r24, r24
    4648:	09 f4       	brne	.+2      	; 0x464c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x18c>
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	99 23       	and	r25, r25
    464e:	09 f4       	brne	.+2      	; 0x4652 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x192>
    4650:	80 c0       	rjmp	.+256    	; 0x4752 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x292>
    4652:	8f 85       	ldd	r24, Y+15	; 0x0f
    4654:	98 89       	ldd	r25, Y+16	; 0x10
    4656:	9c 01       	movw	r18, r24
    4658:	2f 5f       	subi	r18, 0xFF	; 255
    465a:	3f 4f       	sbci	r19, 0xFF	; 255
    465c:	38 8b       	std	Y+16, r19	; 0x10
    465e:	2f 87       	std	Y+15, r18	; 0x0f
    4660:	9f 83       	std	Y+7, r25	; 0x07
    4662:	8e 83       	std	Y+6, r24	; 0x06
    4664:	8e 81       	ldd	r24, Y+6	; 0x06
    4666:	9f 81       	ldd	r25, Y+7	; 0x07
    4668:	fc 01       	movw	r30, r24
    466a:	84 91       	lpm	r24, Z
    466c:	88 87       	std	Y+8, r24	; 0x08
    466e:	28 85       	ldd	r18, Y+8	; 0x08
    4670:	8d 85       	ldd	r24, Y+13	; 0x0d
    4672:	9e 85       	ldd	r25, Y+14	; 0x0e
    4674:	9a 87       	std	Y+10, r25	; 0x0a
    4676:	89 87       	std	Y+9, r24	; 0x09
    4678:	2b 87       	std	Y+11, r18	; 0x0b
    467a:	89 85       	ldd	r24, Y+9	; 0x09
    467c:	9a 85       	ldd	r25, Y+10	; 0x0a
    467e:	fc 01       	movw	r30, r24
    4680:	83 8d       	ldd	r24, Z+27	; 0x1b
    4682:	94 8d       	ldd	r25, Z+28	; 0x1c
    4684:	89 2b       	or	r24, r25
    4686:	19 f0       	breq	.+6      	; 0x468e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x1ce>
    4688:	8b 85       	ldd	r24, Y+11	; 0x0b
    468a:	ea dc       	rcall	.-1580   	; 0x4060 <_ZN8SPIClass8transferEh>
    468c:	d7 cf       	rjmp	.-82     	; 0x463c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x17c>
    468e:	80 e8       	ldi	r24, 0x80	; 128
    4690:	8c 87       	std	Y+12, r24	; 0x0c
    4692:	8c 85       	ldd	r24, Y+12	; 0x0c
    4694:	88 23       	and	r24, r24
    4696:	91 f2       	breq	.-92     	; 0x463c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x17c>
    4698:	9b 85       	ldd	r25, Y+11	; 0x0b
    469a:	8c 85       	ldd	r24, Y+12	; 0x0c
    469c:	89 23       	and	r24, r25
    469e:	88 23       	and	r24, r24
    46a0:	a1 f0       	breq	.+40     	; 0x46ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20a>
    46a2:	89 85       	ldd	r24, Y+9	; 0x09
    46a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a6:	fc 01       	movw	r30, r24
    46a8:	81 a5       	ldd	r24, Z+41	; 0x29
    46aa:	92 a5       	ldd	r25, Z+42	; 0x2a
    46ac:	29 85       	ldd	r18, Y+9	; 0x09
    46ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    46b0:	f9 01       	movw	r30, r18
    46b2:	21 a5       	ldd	r18, Z+41	; 0x29
    46b4:	32 a5       	ldd	r19, Z+42	; 0x2a
    46b6:	f9 01       	movw	r30, r18
    46b8:	40 81       	ld	r20, Z
    46ba:	29 85       	ldd	r18, Y+9	; 0x09
    46bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    46be:	f9 01       	movw	r30, r18
    46c0:	21 a9       	ldd	r18, Z+49	; 0x31
    46c2:	24 2b       	or	r18, r20
    46c4:	fc 01       	movw	r30, r24
    46c6:	20 83       	st	Z, r18
    46c8:	15 c0       	rjmp	.+42     	; 0x46f4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x234>
    46ca:	89 85       	ldd	r24, Y+9	; 0x09
    46cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ce:	fc 01       	movw	r30, r24
    46d0:	81 a5       	ldd	r24, Z+41	; 0x29
    46d2:	92 a5       	ldd	r25, Z+42	; 0x2a
    46d4:	29 85       	ldd	r18, Y+9	; 0x09
    46d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    46d8:	f9 01       	movw	r30, r18
    46da:	21 a5       	ldd	r18, Z+41	; 0x29
    46dc:	32 a5       	ldd	r19, Z+42	; 0x2a
    46de:	f9 01       	movw	r30, r18
    46e0:	20 81       	ld	r18, Z
    46e2:	42 2f       	mov	r20, r18
    46e4:	29 85       	ldd	r18, Y+9	; 0x09
    46e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    46e8:	f9 01       	movw	r30, r18
    46ea:	21 a9       	ldd	r18, Z+49	; 0x31
    46ec:	20 95       	com	r18
    46ee:	24 23       	and	r18, r20
    46f0:	fc 01       	movw	r30, r24
    46f2:	20 83       	st	Z, r18
    46f4:	89 85       	ldd	r24, Y+9	; 0x09
    46f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46f8:	fc 01       	movw	r30, r24
    46fa:	83 a5       	ldd	r24, Z+43	; 0x2b
    46fc:	94 a5       	ldd	r25, Z+44	; 0x2c
    46fe:	29 85       	ldd	r18, Y+9	; 0x09
    4700:	3a 85       	ldd	r19, Y+10	; 0x0a
    4702:	f9 01       	movw	r30, r18
    4704:	23 a5       	ldd	r18, Z+43	; 0x2b
    4706:	34 a5       	ldd	r19, Z+44	; 0x2c
    4708:	f9 01       	movw	r30, r18
    470a:	40 81       	ld	r20, Z
    470c:	29 85       	ldd	r18, Y+9	; 0x09
    470e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4710:	f9 01       	movw	r30, r18
    4712:	22 a9       	ldd	r18, Z+50	; 0x32
    4714:	24 2b       	or	r18, r20
    4716:	fc 01       	movw	r30, r24
    4718:	20 83       	st	Z, r18
    471a:	89 85       	ldd	r24, Y+9	; 0x09
    471c:	9a 85       	ldd	r25, Y+10	; 0x0a
    471e:	fc 01       	movw	r30, r24
    4720:	83 a5       	ldd	r24, Z+43	; 0x2b
    4722:	94 a5       	ldd	r25, Z+44	; 0x2c
    4724:	29 85       	ldd	r18, Y+9	; 0x09
    4726:	3a 85       	ldd	r19, Y+10	; 0x0a
    4728:	f9 01       	movw	r30, r18
    472a:	23 a5       	ldd	r18, Z+43	; 0x2b
    472c:	34 a5       	ldd	r19, Z+44	; 0x2c
    472e:	f9 01       	movw	r30, r18
    4730:	20 81       	ld	r18, Z
    4732:	42 2f       	mov	r20, r18
    4734:	29 85       	ldd	r18, Y+9	; 0x09
    4736:	3a 85       	ldd	r19, Y+10	; 0x0a
    4738:	f9 01       	movw	r30, r18
    473a:	22 a9       	ldd	r18, Z+50	; 0x32
    473c:	20 95       	com	r18
    473e:	24 23       	and	r18, r20
    4740:	fc 01       	movw	r30, r24
    4742:	20 83       	st	Z, r18
    4744:	8c 85       	ldd	r24, Y+12	; 0x0c
    4746:	88 2f       	mov	r24, r24
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	95 95       	asr	r25
    474c:	87 95       	ror	r24
    474e:	8c 87       	std	Y+12, r24	; 0x0c
    4750:	a0 cf       	rjmp	.-192    	; 0x4692 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x1d2>
    4752:	00 00       	nop
    4754:	61 96       	adiw	r28, 0x11	; 17
    4756:	0f b6       	in	r0, 0x3f	; 63
    4758:	f8 94       	cli
    475a:	de bf       	out	0x3e, r29	; 62
    475c:	0f be       	out	0x3f, r0	; 63
    475e:	cd bf       	out	0x3d, r28	; 61
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
    4764:	08 95       	ret

00004766 <_ZN16Adafruit_SSD13065beginEhhbb>:
    4766:	cf 92       	push	r12
    4768:	df 92       	push	r13
    476a:	ef 92       	push	r14
    476c:	ff 92       	push	r15
    476e:	0f 93       	push	r16
    4770:	1f 93       	push	r17
    4772:	cf 93       	push	r28
    4774:	df 93       	push	r29
    4776:	cd b7       	in	r28, 0x3d	; 61
    4778:	de b7       	in	r29, 0x3e	; 62
    477a:	af 97       	sbiw	r28, 0x2f	; 47
    477c:	0f b6       	in	r0, 0x3f	; 63
    477e:	f8 94       	cli
    4780:	de bf       	out	0x3e, r29	; 62
    4782:	0f be       	out	0x3f, r0	; 63
    4784:	cd bf       	out	0x3d, r28	; 61
    4786:	9b a7       	std	Y+43, r25	; 0x2b
    4788:	8a a7       	std	Y+42, r24	; 0x2a
    478a:	6c a7       	std	Y+44, r22	; 0x2c
    478c:	4d a7       	std	Y+45, r20	; 0x2d
    478e:	2e a7       	std	Y+46, r18	; 0x2e
    4790:	0f a7       	std	Y+47, r16	; 0x2f
    4792:	8a a5       	ldd	r24, Y+42	; 0x2a
    4794:	9b a5       	ldd	r25, Y+43	; 0x2b
    4796:	fc 01       	movw	r30, r24
    4798:	87 8d       	ldd	r24, Z+31	; 0x1f
    479a:	90 a1       	ldd	r25, Z+32	; 0x20
    479c:	89 2b       	or	r24, r25
    479e:	69 f5       	brne	.+90     	; 0x47fa <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    47a0:	8a a5       	ldd	r24, Y+42	; 0x2a
    47a2:	9b a5       	ldd	r25, Y+43	; 0x2b
    47a4:	fc 01       	movw	r30, r24
    47a6:	24 81       	ldd	r18, Z+4	; 0x04
    47a8:	35 81       	ldd	r19, Z+5	; 0x05
    47aa:	8a a5       	ldd	r24, Y+42	; 0x2a
    47ac:	9b a5       	ldd	r25, Y+43	; 0x2b
    47ae:	fc 01       	movw	r30, r24
    47b0:	86 81       	ldd	r24, Z+6	; 0x06
    47b2:	97 81       	ldd	r25, Z+7	; 0x07
    47b4:	07 96       	adiw	r24, 0x07	; 7
    47b6:	99 23       	and	r25, r25
    47b8:	0c f4       	brge	.+2      	; 0x47bc <_ZN16Adafruit_SSD13065beginEhhbb+0x56>
    47ba:	07 96       	adiw	r24, 0x07	; 7
    47bc:	95 95       	asr	r25
    47be:	87 95       	ror	r24
    47c0:	95 95       	asr	r25
    47c2:	87 95       	ror	r24
    47c4:	95 95       	asr	r25
    47c6:	87 95       	ror	r24
    47c8:	ac 01       	movw	r20, r24
    47ca:	24 9f       	mul	r18, r20
    47cc:	c0 01       	movw	r24, r0
    47ce:	25 9f       	mul	r18, r21
    47d0:	90 0d       	add	r25, r0
    47d2:	34 9f       	mul	r19, r20
    47d4:	90 0d       	add	r25, r0
    47d6:	11 24       	eor	r1, r1
    47d8:	0e 94 f8 63 	call	0xc7f0	; 0xc7f0 <malloc>
    47dc:	9c 01       	movw	r18, r24
    47de:	8a a5       	ldd	r24, Y+42	; 0x2a
    47e0:	9b a5       	ldd	r25, Y+43	; 0x2b
    47e2:	fc 01       	movw	r30, r24
    47e4:	30 a3       	std	Z+32, r19	; 0x20
    47e6:	27 8f       	std	Z+31, r18	; 0x1f
    47e8:	8a a5       	ldd	r24, Y+42	; 0x2a
    47ea:	9b a5       	ldd	r25, Y+43	; 0x2b
    47ec:	fc 01       	movw	r30, r24
    47ee:	87 8d       	ldd	r24, Z+31	; 0x1f
    47f0:	90 a1       	ldd	r25, Z+32	; 0x20
    47f2:	89 2b       	or	r24, r25
    47f4:	11 f4       	brne	.+4      	; 0x47fa <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    47f6:	81 e0       	ldi	r24, 0x01	; 1
    47f8:	01 c0       	rjmp	.+2      	; 0x47fc <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	88 23       	and	r24, r24
    47fe:	11 f0       	breq	.+4      	; 0x4804 <_ZN16Adafruit_SSD13065beginEhhbb+0x9e>
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	31 c3       	rjmp	.+1634   	; 0x4e66 <_ZN16Adafruit_SSD13065beginEhhbb+0x700>
    4804:	8a a5       	ldd	r24, Y+42	; 0x2a
    4806:	9b a5       	ldd	r25, Y+43	; 0x2b
    4808:	fe d4       	rcall	.+2556   	; 0x5206 <_ZN16Adafruit_SSD130612clearDisplayEv>
    480a:	8a a5       	ldd	r24, Y+42	; 0x2a
    480c:	9b a5       	ldd	r25, Y+43	; 0x2b
    480e:	fc 01       	movw	r30, r24
    4810:	86 81       	ldd	r24, Z+6	; 0x06
    4812:	97 81       	ldd	r25, Z+7	; 0x07
    4814:	81 97       	sbiw	r24, 0x21	; 33
    4816:	54 f1       	brlt	.+84     	; 0x486c <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
    4818:	8a a5       	ldd	r24, Y+42	; 0x2a
    481a:	9b a5       	ldd	r25, Y+43	; 0x2b
    481c:	fc 01       	movw	r30, r24
    481e:	86 81       	ldd	r24, Z+6	; 0x06
    4820:	97 81       	ldd	r25, Z+7	; 0x07
    4822:	80 54       	subi	r24, 0x40	; 64
    4824:	91 09       	sbc	r25, r1
    4826:	99 23       	and	r25, r25
    4828:	0c f4       	brge	.+2      	; 0x482c <_ZN16Adafruit_SSD13065beginEhhbb+0xc6>
    482a:	01 96       	adiw	r24, 0x01	; 1
    482c:	95 95       	asr	r25
    482e:	87 95       	ror	r24
    4830:	ac 01       	movw	r20, r24
    4832:	8a a5       	ldd	r24, Y+42	; 0x2a
    4834:	9b a5       	ldd	r25, Y+43	; 0x2b
    4836:	fc 01       	movw	r30, r24
    4838:	84 81       	ldd	r24, Z+4	; 0x04
    483a:	95 81       	ldd	r25, Z+5	; 0x05
    483c:	82 55       	subi	r24, 0x52	; 82
    483e:	91 09       	sbc	r25, r1
    4840:	99 23       	and	r25, r25
    4842:	0c f4       	brge	.+2      	; 0x4846 <_ZN16Adafruit_SSD13065beginEhhbb+0xe0>
    4844:	01 96       	adiw	r24, 0x01	; 1
    4846:	95 95       	asr	r25
    4848:	87 95       	ror	r24
    484a:	bc 01       	movw	r22, r24
    484c:	8a a5       	ldd	r24, Y+42	; 0x2a
    484e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4850:	cc 24       	eor	r12, r12
    4852:	c3 94       	inc	r12
    4854:	d1 2c       	mov	r13, r1
    4856:	68 94       	set
    4858:	ee 24       	eor	r14, r14
    485a:	e6 f8       	bld	r14, 6
    485c:	f1 2c       	mov	r15, r1
    485e:	02 e5       	ldi	r16, 0x52	; 82
    4860:	10 e0       	ldi	r17, 0x00	; 0
    4862:	2d e9       	ldi	r18, 0x9D	; 157
    4864:	36 e0       	ldi	r19, 0x06	; 6
    4866:	0e 94 62 19 	call	0x32c4	; 0x32c4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    486a:	28 c0       	rjmp	.+80     	; 0x48bc <_ZN16Adafruit_SSD13065beginEhhbb+0x156>
    486c:	8a a5       	ldd	r24, Y+42	; 0x2a
    486e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4870:	fc 01       	movw	r30, r24
    4872:	86 81       	ldd	r24, Z+6	; 0x06
    4874:	97 81       	ldd	r25, Z+7	; 0x07
    4876:	80 97       	sbiw	r24, 0x20	; 32
    4878:	99 23       	and	r25, r25
    487a:	0c f4       	brge	.+2      	; 0x487e <_ZN16Adafruit_SSD13065beginEhhbb+0x118>
    487c:	01 96       	adiw	r24, 0x01	; 1
    487e:	95 95       	asr	r25
    4880:	87 95       	ror	r24
    4882:	ac 01       	movw	r20, r24
    4884:	8a a5       	ldd	r24, Y+42	; 0x2a
    4886:	9b a5       	ldd	r25, Y+43	; 0x2b
    4888:	fc 01       	movw	r30, r24
    488a:	84 81       	ldd	r24, Z+4	; 0x04
    488c:	95 81       	ldd	r25, Z+5	; 0x05
    488e:	83 57       	subi	r24, 0x73	; 115
    4890:	91 09       	sbc	r25, r1
    4892:	99 23       	and	r25, r25
    4894:	0c f4       	brge	.+2      	; 0x4898 <_ZN16Adafruit_SSD13065beginEhhbb+0x132>
    4896:	01 96       	adiw	r24, 0x01	; 1
    4898:	95 95       	asr	r25
    489a:	87 95       	ror	r24
    489c:	bc 01       	movw	r22, r24
    489e:	8a a5       	ldd	r24, Y+42	; 0x2a
    48a0:	9b a5       	ldd	r25, Y+43	; 0x2b
    48a2:	cc 24       	eor	r12, r12
    48a4:	c3 94       	inc	r12
    48a6:	d1 2c       	mov	r13, r1
    48a8:	68 94       	set
    48aa:	ee 24       	eor	r14, r14
    48ac:	e5 f8       	bld	r14, 5
    48ae:	f1 2c       	mov	r15, r1
    48b0:	03 e7       	ldi	r16, 0x73	; 115
    48b2:	10 e0       	ldi	r17, 0x00	; 0
    48b4:	2d e5       	ldi	r18, 0x5D	; 93
    48b6:	39 e0       	ldi	r19, 0x09	; 9
    48b8:	0e 94 62 19 	call	0x32c4	; 0x32c4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    48bc:	2c a5       	ldd	r18, Y+44	; 0x2c
    48be:	8a a5       	ldd	r24, Y+42	; 0x2a
    48c0:	9b a5       	ldd	r25, Y+43	; 0x2b
    48c2:	fc 01       	movw	r30, r24
    48c4:	22 a3       	std	Z+34, r18	; 0x22
    48c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    48c8:	9b a5       	ldd	r25, Y+43	; 0x2b
    48ca:	fc 01       	movw	r30, r24
    48cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    48ce:	96 8d       	ldd	r25, Z+30	; 0x1e
    48d0:	89 2b       	or	r24, r25
    48d2:	f9 f0       	breq	.+62     	; 0x4912 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ac>
    48d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    48d6:	88 23       	and	r24, r24
    48d8:	59 f4       	brne	.+22     	; 0x48f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x18a>
    48da:	8a a5       	ldd	r24, Y+42	; 0x2a
    48dc:	9b a5       	ldd	r25, Y+43	; 0x2b
    48de:	fc 01       	movw	r30, r24
    48e0:	86 81       	ldd	r24, Z+6	; 0x06
    48e2:	97 81       	ldd	r25, Z+7	; 0x07
    48e4:	80 97       	sbiw	r24, 0x20	; 32
    48e6:	11 f4       	brne	.+4      	; 0x48ec <_ZN16Adafruit_SSD13065beginEhhbb+0x186>
    48e8:	2c e3       	ldi	r18, 0x3C	; 60
    48ea:	03 c0       	rjmp	.+6      	; 0x48f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    48ec:	2d e3       	ldi	r18, 0x3D	; 61
    48ee:	01 c0       	rjmp	.+2      	; 0x48f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    48f0:	2d a5       	ldd	r18, Y+45	; 0x2d
    48f2:	8a a5       	ldd	r24, Y+42	; 0x2a
    48f4:	9b a5       	ldd	r25, Y+43	; 0x2b
    48f6:	fc 01       	movw	r30, r24
    48f8:	21 a3       	std	Z+33, r18	; 0x21
    48fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    48fc:	88 23       	and	r24, r24
    48fe:	09 f4       	brne	.+2      	; 0x4902 <_ZN16Adafruit_SSD13065beginEhhbb+0x19c>
    4900:	5a c1       	rjmp	.+692    	; 0x4bb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    4902:	8a a5       	ldd	r24, Y+42	; 0x2a
    4904:	9b a5       	ldd	r25, Y+43	; 0x2b
    4906:	fc 01       	movw	r30, r24
    4908:	85 8d       	ldd	r24, Z+29	; 0x1d
    490a:	96 8d       	ldd	r25, Z+30	; 0x1e
    490c:	0e 94 67 55 	call	0xaace	; 0xaace <_ZN7TwoWire5beginEv>
    4910:	52 c1       	rjmp	.+676    	; 0x4bb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    4912:	8a a5       	ldd	r24, Y+42	; 0x2a
    4914:	9b a5       	ldd	r25, Y+43	; 0x2b
    4916:	fc 01       	movw	r30, r24
    4918:	86 a1       	ldd	r24, Z+38	; 0x26
    491a:	61 e0       	ldi	r22, 0x01	; 1
    491c:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    4920:	8a a5       	ldd	r24, Y+42	; 0x2a
    4922:	9b a5       	ldd	r25, Y+43	; 0x2b
    4924:	fc 01       	movw	r30, r24
    4926:	87 a1       	ldd	r24, Z+39	; 0x27
    4928:	61 e0       	ldi	r22, 0x01	; 1
    492a:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    492e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4930:	9b a5       	ldd	r25, Y+43	; 0x2b
    4932:	fc 01       	movw	r30, r24
    4934:	86 a1       	ldd	r24, Z+38	; 0x26
    4936:	08 2e       	mov	r0, r24
    4938:	00 0c       	add	r0, r0
    493a:	99 0b       	sbc	r25, r25
    493c:	84 50       	subi	r24, 0x04	; 4
    493e:	94 4f       	sbci	r25, 0xF4	; 244
    4940:	9b 83       	std	Y+3, r25	; 0x03
    4942:	8a 83       	std	Y+2, r24	; 0x02
    4944:	8a 81       	ldd	r24, Y+2	; 0x02
    4946:	9b 81       	ldd	r25, Y+3	; 0x03
    4948:	fc 01       	movw	r30, r24
    494a:	84 91       	lpm	r24, Z
    494c:	8c 83       	std	Y+4, r24	; 0x04
    494e:	8c 81       	ldd	r24, Y+4	; 0x04
    4950:	88 2f       	mov	r24, r24
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	88 0f       	add	r24, r24
    4956:	99 1f       	adc	r25, r25
    4958:	84 5a       	subi	r24, 0xA4	; 164
    495a:	93 4f       	sbci	r25, 0xF3	; 243
    495c:	9e 83       	std	Y+6, r25	; 0x06
    495e:	8d 83       	std	Y+5, r24	; 0x05
    4960:	8d 81       	ldd	r24, Y+5	; 0x05
    4962:	9e 81       	ldd	r25, Y+6	; 0x06
    4964:	fc 01       	movw	r30, r24
    4966:	25 91       	lpm	r18, Z+
    4968:	34 91       	lpm	r19, Z
    496a:	cf 01       	movw	r24, r30
    496c:	38 87       	std	Y+8, r19	; 0x08
    496e:	2f 83       	std	Y+7, r18	; 0x07
    4970:	9e 83       	std	Y+6, r25	; 0x06
    4972:	8d 83       	std	Y+5, r24	; 0x05
    4974:	8f 81       	ldd	r24, Y+7	; 0x07
    4976:	98 85       	ldd	r25, Y+8	; 0x08
    4978:	9c 01       	movw	r18, r24
    497a:	8a a5       	ldd	r24, Y+42	; 0x2a
    497c:	9b a5       	ldd	r25, Y+43	; 0x2b
    497e:	fc 01       	movw	r30, r24
    4980:	36 a7       	std	Z+46, r19	; 0x2e
    4982:	25 a7       	std	Z+45, r18	; 0x2d
    4984:	8a a5       	ldd	r24, Y+42	; 0x2a
    4986:	9b a5       	ldd	r25, Y+43	; 0x2b
    4988:	fc 01       	movw	r30, r24
    498a:	86 a1       	ldd	r24, Z+38	; 0x26
    498c:	08 2e       	mov	r0, r24
    498e:	00 0c       	add	r0, r0
    4990:	99 0b       	sbc	r25, r25
    4992:	8a 54       	subi	r24, 0x4A	; 74
    4994:	94 4f       	sbci	r25, 0xF4	; 244
    4996:	9a 87       	std	Y+10, r25	; 0x0a
    4998:	89 87       	std	Y+9, r24	; 0x09
    499a:	89 85       	ldd	r24, Y+9	; 0x09
    499c:	9a 85       	ldd	r25, Y+10	; 0x0a
    499e:	fc 01       	movw	r30, r24
    49a0:	84 91       	lpm	r24, Z
    49a2:	8b 87       	std	Y+11, r24	; 0x0b
    49a4:	8a a5       	ldd	r24, Y+42	; 0x2a
    49a6:	9b a5       	ldd	r25, Y+43	; 0x2b
    49a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    49aa:	fc 01       	movw	r30, r24
    49ac:	23 ab       	std	Z+51, r18	; 0x33
    49ae:	8a a5       	ldd	r24, Y+42	; 0x2a
    49b0:	9b a5       	ldd	r25, Y+43	; 0x2b
    49b2:	fc 01       	movw	r30, r24
    49b4:	87 a1       	ldd	r24, Z+39	; 0x27
    49b6:	08 2e       	mov	r0, r24
    49b8:	00 0c       	add	r0, r0
    49ba:	99 0b       	sbc	r25, r25
    49bc:	84 50       	subi	r24, 0x04	; 4
    49be:	94 4f       	sbci	r25, 0xF4	; 244
    49c0:	9d 87       	std	Y+13, r25	; 0x0d
    49c2:	8c 87       	std	Y+12, r24	; 0x0c
    49c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    49c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    49c8:	fc 01       	movw	r30, r24
    49ca:	84 91       	lpm	r24, Z
    49cc:	8e 87       	std	Y+14, r24	; 0x0e
    49ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    49d0:	88 2f       	mov	r24, r24
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	88 0f       	add	r24, r24
    49d6:	99 1f       	adc	r25, r25
    49d8:	84 5a       	subi	r24, 0xA4	; 164
    49da:	93 4f       	sbci	r25, 0xF3	; 243
    49dc:	98 8b       	std	Y+16, r25	; 0x10
    49de:	8f 87       	std	Y+15, r24	; 0x0f
    49e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    49e2:	98 89       	ldd	r25, Y+16	; 0x10
    49e4:	fc 01       	movw	r30, r24
    49e6:	25 91       	lpm	r18, Z+
    49e8:	34 91       	lpm	r19, Z
    49ea:	cf 01       	movw	r24, r30
    49ec:	3a 8b       	std	Y+18, r19	; 0x12
    49ee:	29 8b       	std	Y+17, r18	; 0x11
    49f0:	98 8b       	std	Y+16, r25	; 0x10
    49f2:	8f 87       	std	Y+15, r24	; 0x0f
    49f4:	89 89       	ldd	r24, Y+17	; 0x11
    49f6:	9a 89       	ldd	r25, Y+18	; 0x12
    49f8:	9c 01       	movw	r18, r24
    49fa:	8a a5       	ldd	r24, Y+42	; 0x2a
    49fc:	9b a5       	ldd	r25, Y+43	; 0x2b
    49fe:	fc 01       	movw	r30, r24
    4a00:	30 ab       	std	Z+48, r19	; 0x30
    4a02:	27 a7       	std	Z+47, r18	; 0x2f
    4a04:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a06:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a08:	fc 01       	movw	r30, r24
    4a0a:	87 a1       	ldd	r24, Z+39	; 0x27
    4a0c:	08 2e       	mov	r0, r24
    4a0e:	00 0c       	add	r0, r0
    4a10:	99 0b       	sbc	r25, r25
    4a12:	8a 54       	subi	r24, 0x4A	; 74
    4a14:	94 4f       	sbci	r25, 0xF4	; 244
    4a16:	9c 8b       	std	Y+20, r25	; 0x14
    4a18:	8b 8b       	std	Y+19, r24	; 0x13
    4a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    4a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a1e:	fc 01       	movw	r30, r24
    4a20:	84 91       	lpm	r24, Z
    4a22:	8d 8b       	std	Y+21, r24	; 0x15
    4a24:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a26:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a28:	2d 89       	ldd	r18, Y+21	; 0x15
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	24 ab       	std	Z+52, r18	; 0x34
    4a2e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a30:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a32:	fc 01       	movw	r30, r24
    4a34:	87 a5       	ldd	r24, Z+47	; 0x2f
    4a36:	90 a9       	ldd	r25, Z+48	; 0x30
    4a38:	2a a5       	ldd	r18, Y+42	; 0x2a
    4a3a:	3b a5       	ldd	r19, Y+43	; 0x2b
    4a3c:	f9 01       	movw	r30, r18
    4a3e:	27 a5       	ldd	r18, Z+47	; 0x2f
    4a40:	30 a9       	ldd	r19, Z+48	; 0x30
    4a42:	f9 01       	movw	r30, r18
    4a44:	40 81       	ld	r20, Z
    4a46:	2a a5       	ldd	r18, Y+42	; 0x2a
    4a48:	3b a5       	ldd	r19, Y+43	; 0x2b
    4a4a:	f9 01       	movw	r30, r18
    4a4c:	24 a9       	ldd	r18, Z+52	; 0x34
    4a4e:	24 2b       	or	r18, r20
    4a50:	fc 01       	movw	r30, r24
    4a52:	20 83       	st	Z, r18
    4a54:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a56:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a58:	fc 01       	movw	r30, r24
    4a5a:	83 8d       	ldd	r24, Z+27	; 0x1b
    4a5c:	94 8d       	ldd	r25, Z+28	; 0x1c
    4a5e:	89 2b       	or	r24, r25
    4a60:	39 f0       	breq	.+14     	; 0x4a70 <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    4a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a64:	88 23       	and	r24, r24
    4a66:	09 f4       	brne	.+2      	; 0x4a6a <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    4a68:	a6 c0       	rjmp	.+332    	; 0x4bb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    4a6a:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <_ZN8SPIClass5beginEv>
    4a6e:	a3 c0       	rjmp	.+326    	; 0x4bb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    4a70:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a72:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a74:	fc 01       	movw	r30, r24
    4a76:	84 a1       	ldd	r24, Z+36	; 0x24
    4a78:	61 e0       	ldi	r22, 0x01	; 1
    4a7a:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    4a7e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a80:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a82:	fc 01       	movw	r30, r24
    4a84:	85 a1       	ldd	r24, Z+37	; 0x25
    4a86:	61 e0       	ldi	r22, 0x01	; 1
    4a88:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    4a8c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a8e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a90:	fc 01       	movw	r30, r24
    4a92:	84 a1       	ldd	r24, Z+36	; 0x24
    4a94:	08 2e       	mov	r0, r24
    4a96:	00 0c       	add	r0, r0
    4a98:	99 0b       	sbc	r25, r25
    4a9a:	84 50       	subi	r24, 0x04	; 4
    4a9c:	94 4f       	sbci	r25, 0xF4	; 244
    4a9e:	9f 8b       	std	Y+23, r25	; 0x17
    4aa0:	8e 8b       	std	Y+22, r24	; 0x16
    4aa2:	8e 89       	ldd	r24, Y+22	; 0x16
    4aa4:	9f 89       	ldd	r25, Y+23	; 0x17
    4aa6:	fc 01       	movw	r30, r24
    4aa8:	84 91       	lpm	r24, Z
    4aaa:	88 8f       	std	Y+24, r24	; 0x18
    4aac:	88 8d       	ldd	r24, Y+24	; 0x18
    4aae:	88 2f       	mov	r24, r24
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	88 0f       	add	r24, r24
    4ab4:	99 1f       	adc	r25, r25
    4ab6:	84 5a       	subi	r24, 0xA4	; 164
    4ab8:	93 4f       	sbci	r25, 0xF3	; 243
    4aba:	9a 8f       	std	Y+26, r25	; 0x1a
    4abc:	89 8f       	std	Y+25, r24	; 0x19
    4abe:	89 8d       	ldd	r24, Y+25	; 0x19
    4ac0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ac2:	fc 01       	movw	r30, r24
    4ac4:	25 91       	lpm	r18, Z+
    4ac6:	34 91       	lpm	r19, Z
    4ac8:	cf 01       	movw	r24, r30
    4aca:	3c 8f       	std	Y+28, r19	; 0x1c
    4acc:	2b 8f       	std	Y+27, r18	; 0x1b
    4ace:	9a 8f       	std	Y+26, r25	; 0x1a
    4ad0:	89 8f       	std	Y+25, r24	; 0x19
    4ad2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ad4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ad6:	9c 01       	movw	r18, r24
    4ad8:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ada:	9b a5       	ldd	r25, Y+43	; 0x2b
    4adc:	fc 01       	movw	r30, r24
    4ade:	32 a7       	std	Z+42, r19	; 0x2a
    4ae0:	21 a7       	std	Z+41, r18	; 0x29
    4ae2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ae4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	84 a1       	ldd	r24, Z+36	; 0x24
    4aea:	08 2e       	mov	r0, r24
    4aec:	00 0c       	add	r0, r0
    4aee:	99 0b       	sbc	r25, r25
    4af0:	8a 54       	subi	r24, 0x4A	; 74
    4af2:	94 4f       	sbci	r25, 0xF4	; 244
    4af4:	9e 8f       	std	Y+30, r25	; 0x1e
    4af6:	8d 8f       	std	Y+29, r24	; 0x1d
    4af8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4afa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4afc:	fc 01       	movw	r30, r24
    4afe:	84 91       	lpm	r24, Z
    4b00:	8f 8f       	std	Y+31, r24	; 0x1f
    4b02:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b04:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b06:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4b08:	fc 01       	movw	r30, r24
    4b0a:	21 ab       	std	Z+49, r18	; 0x31
    4b0c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b0e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b10:	fc 01       	movw	r30, r24
    4b12:	85 a1       	ldd	r24, Z+37	; 0x25
    4b14:	08 2e       	mov	r0, r24
    4b16:	00 0c       	add	r0, r0
    4b18:	99 0b       	sbc	r25, r25
    4b1a:	84 50       	subi	r24, 0x04	; 4
    4b1c:	94 4f       	sbci	r25, 0xF4	; 244
    4b1e:	99 a3       	std	Y+33, r25	; 0x21
    4b20:	88 a3       	std	Y+32, r24	; 0x20
    4b22:	88 a1       	ldd	r24, Y+32	; 0x20
    4b24:	99 a1       	ldd	r25, Y+33	; 0x21
    4b26:	fc 01       	movw	r30, r24
    4b28:	84 91       	lpm	r24, Z
    4b2a:	8a a3       	std	Y+34, r24	; 0x22
    4b2c:	8a a1       	ldd	r24, Y+34	; 0x22
    4b2e:	88 2f       	mov	r24, r24
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	88 0f       	add	r24, r24
    4b34:	99 1f       	adc	r25, r25
    4b36:	84 5a       	subi	r24, 0xA4	; 164
    4b38:	93 4f       	sbci	r25, 0xF3	; 243
    4b3a:	9c a3       	std	Y+36, r25	; 0x24
    4b3c:	8b a3       	std	Y+35, r24	; 0x23
    4b3e:	8b a1       	ldd	r24, Y+35	; 0x23
    4b40:	9c a1       	ldd	r25, Y+36	; 0x24
    4b42:	fc 01       	movw	r30, r24
    4b44:	25 91       	lpm	r18, Z+
    4b46:	34 91       	lpm	r19, Z
    4b48:	cf 01       	movw	r24, r30
    4b4a:	3e a3       	std	Y+38, r19	; 0x26
    4b4c:	2d a3       	std	Y+37, r18	; 0x25
    4b4e:	9c a3       	std	Y+36, r25	; 0x24
    4b50:	8b a3       	std	Y+35, r24	; 0x23
    4b52:	8d a1       	ldd	r24, Y+37	; 0x25
    4b54:	9e a1       	ldd	r25, Y+38	; 0x26
    4b56:	9c 01       	movw	r18, r24
    4b58:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b5a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b5c:	fc 01       	movw	r30, r24
    4b5e:	34 a7       	std	Z+44, r19	; 0x2c
    4b60:	23 a7       	std	Z+43, r18	; 0x2b
    4b62:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b64:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b66:	fc 01       	movw	r30, r24
    4b68:	85 a1       	ldd	r24, Z+37	; 0x25
    4b6a:	08 2e       	mov	r0, r24
    4b6c:	00 0c       	add	r0, r0
    4b6e:	99 0b       	sbc	r25, r25
    4b70:	8a 54       	subi	r24, 0x4A	; 74
    4b72:	94 4f       	sbci	r25, 0xF4	; 244
    4b74:	98 a7       	std	Y+40, r25	; 0x28
    4b76:	8f a3       	std	Y+39, r24	; 0x27
    4b78:	8f a1       	ldd	r24, Y+39	; 0x27
    4b7a:	98 a5       	ldd	r25, Y+40	; 0x28
    4b7c:	fc 01       	movw	r30, r24
    4b7e:	84 91       	lpm	r24, Z
    4b80:	89 a7       	std	Y+41, r24	; 0x29
    4b82:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b84:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b86:	29 a5       	ldd	r18, Y+41	; 0x29
    4b88:	fc 01       	movw	r30, r24
    4b8a:	22 ab       	std	Z+50, r18	; 0x32
    4b8c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b8e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b90:	fc 01       	movw	r30, r24
    4b92:	83 a5       	ldd	r24, Z+43	; 0x2b
    4b94:	94 a5       	ldd	r25, Z+44	; 0x2c
    4b96:	2a a5       	ldd	r18, Y+42	; 0x2a
    4b98:	3b a5       	ldd	r19, Y+43	; 0x2b
    4b9a:	f9 01       	movw	r30, r18
    4b9c:	23 a5       	ldd	r18, Z+43	; 0x2b
    4b9e:	34 a5       	ldd	r19, Z+44	; 0x2c
    4ba0:	f9 01       	movw	r30, r18
    4ba2:	20 81       	ld	r18, Z
    4ba4:	42 2f       	mov	r20, r18
    4ba6:	2a a5       	ldd	r18, Y+42	; 0x2a
    4ba8:	3b a5       	ldd	r19, Y+43	; 0x2b
    4baa:	f9 01       	movw	r30, r18
    4bac:	22 a9       	ldd	r18, Z+50	; 0x32
    4bae:	20 95       	com	r18
    4bb0:	24 23       	and	r18, r20
    4bb2:	fc 01       	movw	r30, r24
    4bb4:	20 83       	st	Z, r18
    4bb6:	8e a5       	ldd	r24, Y+46	; 0x2e
    4bb8:	88 23       	and	r24, r24
    4bba:	71 f1       	breq	.+92     	; 0x4c18 <_ZN16Adafruit_SSD13065beginEhhbb+0x4b2>
    4bbc:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bbe:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	80 a5       	ldd	r24, Z+40	; 0x28
    4bc4:	88 23       	and	r24, r24
    4bc6:	44 f1       	brlt	.+80     	; 0x4c18 <_ZN16Adafruit_SSD13065beginEhhbb+0x4b2>
    4bc8:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bca:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bcc:	fc 01       	movw	r30, r24
    4bce:	80 a5       	ldd	r24, Z+40	; 0x28
    4bd0:	61 e0       	ldi	r22, 0x01	; 1
    4bd2:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    4bd6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bd8:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bda:	fc 01       	movw	r30, r24
    4bdc:	80 a5       	ldd	r24, Z+40	; 0x28
    4bde:	61 e0       	ldi	r22, 0x01	; 1
    4be0:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    4be4:	61 e0       	ldi	r22, 0x01	; 1
    4be6:	70 e0       	ldi	r23, 0x00	; 0
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	0e 94 30 5f 	call	0xbe60	; 0xbe60 <delay>
    4bf0:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bf2:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	80 a5       	ldd	r24, Z+40	; 0x28
    4bf8:	60 e0       	ldi	r22, 0x00	; 0
    4bfa:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    4bfe:	6a e0       	ldi	r22, 0x0A	; 10
    4c00:	70 e0       	ldi	r23, 0x00	; 0
    4c02:	80 e0       	ldi	r24, 0x00	; 0
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	0e 94 30 5f 	call	0xbe60	; 0xbe60 <delay>
    4c0a:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c0c:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c0e:	fc 01       	movw	r30, r24
    4c10:	80 a5       	ldd	r24, Z+40	; 0x28
    4c12:	61 e0       	ldi	r22, 0x01	; 1
    4c14:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    4c18:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c1a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c1c:	fc 01       	movw	r30, r24
    4c1e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4c20:	96 8d       	ldd	r25, Z+30	; 0x1e
    4c22:	89 2b       	or	r24, r25
    4c24:	91 f0       	breq	.+36     	; 0x4c4a <_ZN16Adafruit_SSD13065beginEhhbb+0x4e4>
    4c26:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c28:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c2a:	fc 01       	movw	r30, r24
    4c2c:	85 a9       	ldd	r24, Z+53	; 0x35
    4c2e:	96 a9       	ldd	r25, Z+54	; 0x36
    4c30:	a7 a9       	ldd	r26, Z+55	; 0x37
    4c32:	b0 ad       	ldd	r27, Z+56	; 0x38
    4c34:	2a a5       	ldd	r18, Y+42	; 0x2a
    4c36:	3b a5       	ldd	r19, Y+43	; 0x2b
    4c38:	f9 01       	movw	r30, r18
    4c3a:	25 8d       	ldd	r18, Z+29	; 0x1d
    4c3c:	36 8d       	ldd	r19, Z+30	; 0x1e
    4c3e:	ac 01       	movw	r20, r24
    4c40:	bd 01       	movw	r22, r26
    4c42:	c9 01       	movw	r24, r18
    4c44:	0e 94 84 55 	call	0xab08	; 0xab08 <_ZN7TwoWire8setClockEm>
    4c48:	23 c0       	rjmp	.+70     	; 0x4c90 <_ZN16Adafruit_SSD13065beginEhhbb+0x52a>
    4c4a:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c4c:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c4e:	fc 01       	movw	r30, r24
    4c50:	83 8d       	ldd	r24, Z+27	; 0x1b
    4c52:	94 8d       	ldd	r25, Z+28	; 0x1c
    4c54:	89 2b       	or	r24, r25
    4c56:	39 f0       	breq	.+14     	; 0x4c66 <_ZN16Adafruit_SSD13065beginEhhbb+0x500>
    4c58:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c5a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	86 ad       	ldd	r24, Z+62	; 0x3e
    4c60:	97 ad       	ldd	r25, Z+63	; 0x3f
    4c62:	0e 94 d6 12 	call	0x25ac	; 0x25ac <_ZN8SPIClass16beginTransactionE11SPISettings>
    4c66:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c68:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	87 a5       	ldd	r24, Z+47	; 0x2f
    4c6e:	90 a9       	ldd	r25, Z+48	; 0x30
    4c70:	2a a5       	ldd	r18, Y+42	; 0x2a
    4c72:	3b a5       	ldd	r19, Y+43	; 0x2b
    4c74:	f9 01       	movw	r30, r18
    4c76:	27 a5       	ldd	r18, Z+47	; 0x2f
    4c78:	30 a9       	ldd	r19, Z+48	; 0x30
    4c7a:	f9 01       	movw	r30, r18
    4c7c:	20 81       	ld	r18, Z
    4c7e:	42 2f       	mov	r20, r18
    4c80:	2a a5       	ldd	r18, Y+42	; 0x2a
    4c82:	3b a5       	ldd	r19, Y+43	; 0x2b
    4c84:	f9 01       	movw	r30, r18
    4c86:	24 a9       	ldd	r18, Z+52	; 0x34
    4c88:	20 95       	com	r18
    4c8a:	24 23       	and	r18, r20
    4c8c:	fc 01       	movw	r30, r24
    4c8e:	20 83       	st	Z, r18
    4c90:	24 e0       	ldi	r18, 0x04	; 4
    4c92:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c94:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c96:	42 2f       	mov	r20, r18
    4c98:	6d e3       	ldi	r22, 0x3D	; 61
    4c9a:	7b e0       	ldi	r23, 0x0B	; 11
    4c9c:	11 dc       	rcall	.-2014   	; 0x44c0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4c9e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ca0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	86 81       	ldd	r24, Z+6	; 0x06
    4ca6:	97 81       	ldd	r25, Z+7	; 0x07
    4ca8:	2f ef       	ldi	r18, 0xFF	; 255
    4caa:	28 0f       	add	r18, r24
    4cac:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cae:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cb0:	62 2f       	mov	r22, r18
    4cb2:	23 db       	rcall	.-2490   	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4cb4:	24 e0       	ldi	r18, 0x04	; 4
    4cb6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cb8:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cba:	42 2f       	mov	r20, r18
    4cbc:	61 e4       	ldi	r22, 0x41	; 65
    4cbe:	7b e0       	ldi	r23, 0x0B	; 11
    4cc0:	ff db       	rcall	.-2050   	; 0x44c0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4cc2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cc4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	82 a1       	ldd	r24, Z+34	; 0x22
    4cca:	81 30       	cpi	r24, 0x01	; 1
    4ccc:	11 f4       	brne	.+4      	; 0x4cd2 <_ZN16Adafruit_SSD13065beginEhhbb+0x56c>
    4cce:	20 e1       	ldi	r18, 0x10	; 16
    4cd0:	01 c0       	rjmp	.+2      	; 0x4cd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x56e>
    4cd2:	24 e1       	ldi	r18, 0x14	; 20
    4cd4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cd6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cd8:	62 2f       	mov	r22, r18
    4cda:	0f db       	rcall	.-2530   	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4cdc:	24 e0       	ldi	r18, 0x04	; 4
    4cde:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ce0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ce2:	42 2f       	mov	r20, r18
    4ce4:	65 e4       	ldi	r22, 0x45	; 69
    4ce6:	7b e0       	ldi	r23, 0x0B	; 11
    4ce8:	eb db       	rcall	.-2090   	; 0x44c0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4cea:	82 e0       	ldi	r24, 0x02	; 2
    4cec:	89 83       	std	Y+1, r24	; 0x01
    4cee:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cf0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cf2:	2f e8       	ldi	r18, 0x8F	; 143
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	25 af       	std	Z+61, r18	; 0x3d
    4cf8:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cfa:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cfc:	fc 01       	movw	r30, r24
    4cfe:	84 81       	ldd	r24, Z+4	; 0x04
    4d00:	95 81       	ldd	r25, Z+5	; 0x05
    4d02:	80 38       	cpi	r24, 0x80	; 128
    4d04:	91 05       	cpc	r25, r1
    4d06:	79 f4       	brne	.+30     	; 0x4d26 <_ZN16Adafruit_SSD13065beginEhhbb+0x5c0>
    4d08:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d0a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d0c:	fc 01       	movw	r30, r24
    4d0e:	86 81       	ldd	r24, Z+6	; 0x06
    4d10:	97 81       	ldd	r25, Z+7	; 0x07
    4d12:	80 97       	sbiw	r24, 0x20	; 32
    4d14:	41 f4       	brne	.+16     	; 0x4d26 <_ZN16Adafruit_SSD13065beginEhhbb+0x5c0>
    4d16:	82 e0       	ldi	r24, 0x02	; 2
    4d18:	89 83       	std	Y+1, r24	; 0x01
    4d1a:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d1c:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d1e:	2f e8       	ldi	r18, 0x8F	; 143
    4d20:	fc 01       	movw	r30, r24
    4d22:	25 af       	std	Z+61, r18	; 0x3d
    4d24:	3e c0       	rjmp	.+124    	; 0x4da2 <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4d26:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d28:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	84 81       	ldd	r24, Z+4	; 0x04
    4d2e:	95 81       	ldd	r25, Z+5	; 0x05
    4d30:	80 38       	cpi	r24, 0x80	; 128
    4d32:	91 05       	cpc	r25, r1
    4d34:	c1 f4       	brne	.+48     	; 0x4d66 <_ZN16Adafruit_SSD13065beginEhhbb+0x600>
    4d36:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d38:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	86 81       	ldd	r24, Z+6	; 0x06
    4d3e:	97 81       	ldd	r25, Z+7	; 0x07
    4d40:	80 34       	cpi	r24, 0x40	; 64
    4d42:	91 05       	cpc	r25, r1
    4d44:	81 f4       	brne	.+32     	; 0x4d66 <_ZN16Adafruit_SSD13065beginEhhbb+0x600>
    4d46:	82 e1       	ldi	r24, 0x12	; 18
    4d48:	89 83       	std	Y+1, r24	; 0x01
    4d4a:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d4c:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d4e:	fc 01       	movw	r30, r24
    4d50:	82 a1       	ldd	r24, Z+34	; 0x22
    4d52:	81 30       	cpi	r24, 0x01	; 1
    4d54:	11 f4       	brne	.+4      	; 0x4d5a <_ZN16Adafruit_SSD13065beginEhhbb+0x5f4>
    4d56:	2f e9       	ldi	r18, 0x9F	; 159
    4d58:	01 c0       	rjmp	.+2      	; 0x4d5c <_ZN16Adafruit_SSD13065beginEhhbb+0x5f6>
    4d5a:	2f ec       	ldi	r18, 0xCF	; 207
    4d5c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d5e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d60:	fc 01       	movw	r30, r24
    4d62:	25 af       	std	Z+61, r18	; 0x3d
    4d64:	1e c0       	rjmp	.+60     	; 0x4da2 <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4d66:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d68:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	84 81       	ldd	r24, Z+4	; 0x04
    4d6e:	95 81       	ldd	r25, Z+5	; 0x05
    4d70:	80 36       	cpi	r24, 0x60	; 96
    4d72:	91 05       	cpc	r25, r1
    4d74:	b1 f4       	brne	.+44     	; 0x4da2 <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4d76:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d78:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d7a:	fc 01       	movw	r30, r24
    4d7c:	86 81       	ldd	r24, Z+6	; 0x06
    4d7e:	97 81       	ldd	r25, Z+7	; 0x07
    4d80:	40 97       	sbiw	r24, 0x10	; 16
    4d82:	79 f4       	brne	.+30     	; 0x4da2 <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4d84:	82 e0       	ldi	r24, 0x02	; 2
    4d86:	89 83       	std	Y+1, r24	; 0x01
    4d88:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d8a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	82 a1       	ldd	r24, Z+34	; 0x22
    4d90:	81 30       	cpi	r24, 0x01	; 1
    4d92:	11 f4       	brne	.+4      	; 0x4d98 <_ZN16Adafruit_SSD13065beginEhhbb+0x632>
    4d94:	20 e1       	ldi	r18, 0x10	; 16
    4d96:	01 c0       	rjmp	.+2      	; 0x4d9a <_ZN16Adafruit_SSD13065beginEhhbb+0x634>
    4d98:	2f ea       	ldi	r18, 0xAF	; 175
    4d9a:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d9c:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d9e:	fc 01       	movw	r30, r24
    4da0:	25 af       	std	Z+61, r18	; 0x3d
    4da2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4da4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4da6:	6a ed       	ldi	r22, 0xDA	; 218
    4da8:	a8 da       	rcall	.-2736   	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4daa:	8a a5       	ldd	r24, Y+42	; 0x2a
    4dac:	9b a5       	ldd	r25, Y+43	; 0x2b
    4dae:	69 81       	ldd	r22, Y+1	; 0x01
    4db0:	a4 da       	rcall	.-2744   	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4db2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4db4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4db6:	61 e8       	ldi	r22, 0x81	; 129
    4db8:	a0 da       	rcall	.-2752   	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4dba:	8a a5       	ldd	r24, Y+42	; 0x2a
    4dbc:	9b a5       	ldd	r25, Y+43	; 0x2b
    4dbe:	fc 01       	movw	r30, r24
    4dc0:	25 ad       	ldd	r18, Z+61	; 0x3d
    4dc2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4dc4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4dc6:	62 2f       	mov	r22, r18
    4dc8:	98 da       	rcall	.-2768   	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4dca:	8a a5       	ldd	r24, Y+42	; 0x2a
    4dcc:	9b a5       	ldd	r25, Y+43	; 0x2b
    4dce:	69 ed       	ldi	r22, 0xD9	; 217
    4dd0:	94 da       	rcall	.-2776   	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4dd2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4dd4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4dd6:	fc 01       	movw	r30, r24
    4dd8:	82 a1       	ldd	r24, Z+34	; 0x22
    4dda:	81 30       	cpi	r24, 0x01	; 1
    4ddc:	11 f4       	brne	.+4      	; 0x4de2 <_ZN16Adafruit_SSD13065beginEhhbb+0x67c>
    4dde:	22 e2       	ldi	r18, 0x22	; 34
    4de0:	01 c0       	rjmp	.+2      	; 0x4de4 <_ZN16Adafruit_SSD13065beginEhhbb+0x67e>
    4de2:	21 ef       	ldi	r18, 0xF1	; 241
    4de4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4de6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4de8:	62 2f       	mov	r22, r18
    4dea:	87 da       	rcall	.-2802   	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4dec:	26 e0       	ldi	r18, 0x06	; 6
    4dee:	8a a5       	ldd	r24, Y+42	; 0x2a
    4df0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4df2:	42 2f       	mov	r20, r18
    4df4:	69 e4       	ldi	r22, 0x49	; 73
    4df6:	7b e0       	ldi	r23, 0x0B	; 11
    4df8:	63 db       	rcall	.-2362   	; 0x44c0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4dfa:	8a a5       	ldd	r24, Y+42	; 0x2a
    4dfc:	9b a5       	ldd	r25, Y+43	; 0x2b
    4dfe:	fc 01       	movw	r30, r24
    4e00:	85 8d       	ldd	r24, Z+29	; 0x1d
    4e02:	96 8d       	ldd	r25, Z+30	; 0x1e
    4e04:	89 2b       	or	r24, r25
    4e06:	91 f0       	breq	.+36     	; 0x4e2c <_ZN16Adafruit_SSD13065beginEhhbb+0x6c6>
    4e08:	8a a5       	ldd	r24, Y+42	; 0x2a
    4e0a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4e0c:	fc 01       	movw	r30, r24
    4e0e:	81 ad       	ldd	r24, Z+57	; 0x39
    4e10:	92 ad       	ldd	r25, Z+58	; 0x3a
    4e12:	a3 ad       	ldd	r26, Z+59	; 0x3b
    4e14:	b4 ad       	ldd	r27, Z+60	; 0x3c
    4e16:	2a a5       	ldd	r18, Y+42	; 0x2a
    4e18:	3b a5       	ldd	r19, Y+43	; 0x2b
    4e1a:	f9 01       	movw	r30, r18
    4e1c:	25 8d       	ldd	r18, Z+29	; 0x1d
    4e1e:	36 8d       	ldd	r19, Z+30	; 0x1e
    4e20:	ac 01       	movw	r20, r24
    4e22:	bd 01       	movw	r22, r26
    4e24:	c9 01       	movw	r24, r18
    4e26:	0e 94 84 55 	call	0xab08	; 0xab08 <_ZN7TwoWire8setClockEm>
    4e2a:	1c c0       	rjmp	.+56     	; 0x4e64 <_ZN16Adafruit_SSD13065beginEhhbb+0x6fe>
    4e2c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4e2e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4e30:	fc 01       	movw	r30, r24
    4e32:	87 a5       	ldd	r24, Z+47	; 0x2f
    4e34:	90 a9       	ldd	r25, Z+48	; 0x30
    4e36:	2a a5       	ldd	r18, Y+42	; 0x2a
    4e38:	3b a5       	ldd	r19, Y+43	; 0x2b
    4e3a:	f9 01       	movw	r30, r18
    4e3c:	27 a5       	ldd	r18, Z+47	; 0x2f
    4e3e:	30 a9       	ldd	r19, Z+48	; 0x30
    4e40:	f9 01       	movw	r30, r18
    4e42:	40 81       	ld	r20, Z
    4e44:	2a a5       	ldd	r18, Y+42	; 0x2a
    4e46:	3b a5       	ldd	r19, Y+43	; 0x2b
    4e48:	f9 01       	movw	r30, r18
    4e4a:	24 a9       	ldd	r18, Z+52	; 0x34
    4e4c:	24 2b       	or	r18, r20
    4e4e:	fc 01       	movw	r30, r24
    4e50:	20 83       	st	Z, r18
    4e52:	8a a5       	ldd	r24, Y+42	; 0x2a
    4e54:	9b a5       	ldd	r25, Y+43	; 0x2b
    4e56:	fc 01       	movw	r30, r24
    4e58:	83 8d       	ldd	r24, Z+27	; 0x1b
    4e5a:	94 8d       	ldd	r25, Z+28	; 0x1c
    4e5c:	89 2b       	or	r24, r25
    4e5e:	11 f0       	breq	.+4      	; 0x4e64 <_ZN16Adafruit_SSD13065beginEhhbb+0x6fe>
    4e60:	0e 94 18 13 	call	0x2630	; 0x2630 <_ZN8SPIClass14endTransactionEv>
    4e64:	81 e0       	ldi	r24, 0x01	; 1
    4e66:	af 96       	adiw	r28, 0x2f	; 47
    4e68:	0f b6       	in	r0, 0x3f	; 63
    4e6a:	f8 94       	cli
    4e6c:	de bf       	out	0x3e, r29	; 62
    4e6e:	0f be       	out	0x3f, r0	; 63
    4e70:	cd bf       	out	0x3d, r28	; 61
    4e72:	df 91       	pop	r29
    4e74:	cf 91       	pop	r28
    4e76:	1f 91       	pop	r17
    4e78:	0f 91       	pop	r16
    4e7a:	ff 90       	pop	r15
    4e7c:	ef 90       	pop	r14
    4e7e:	df 90       	pop	r13
    4e80:	cf 90       	pop	r12
    4e82:	08 95       	ret

00004e84 <_ZN16Adafruit_SSD13069drawPixelEiij>:
    4e84:	cf 93       	push	r28
    4e86:	df 93       	push	r29
    4e88:	cd b7       	in	r28, 0x3d	; 61
    4e8a:	de b7       	in	r29, 0x3e	; 62
    4e8c:	28 97       	sbiw	r28, 0x08	; 8
    4e8e:	0f b6       	in	r0, 0x3f	; 63
    4e90:	f8 94       	cli
    4e92:	de bf       	out	0x3e, r29	; 62
    4e94:	0f be       	out	0x3f, r0	; 63
    4e96:	cd bf       	out	0x3d, r28	; 61
    4e98:	9a 83       	std	Y+2, r25	; 0x02
    4e9a:	89 83       	std	Y+1, r24	; 0x01
    4e9c:	7c 83       	std	Y+4, r23	; 0x04
    4e9e:	6b 83       	std	Y+3, r22	; 0x03
    4ea0:	5e 83       	std	Y+6, r21	; 0x06
    4ea2:	4d 83       	std	Y+5, r20	; 0x05
    4ea4:	38 87       	std	Y+8, r19	; 0x08
    4ea6:	2f 83       	std	Y+7, r18	; 0x07
    4ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    4eac:	99 23       	and	r25, r25
    4eae:	d4 f0       	brlt	.+52     	; 0x4ee4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4eb0:	89 81       	ldd	r24, Y+1	; 0x01
    4eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb4:	0e 94 79 13 	call	0x26f2	; 0x26f2 <_ZNK12Adafruit_GFX5widthEv>
    4eb8:	9c 01       	movw	r18, r24
    4eba:	8b 81       	ldd	r24, Y+3	; 0x03
    4ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ebe:	82 17       	cp	r24, r18
    4ec0:	93 07       	cpc	r25, r19
    4ec2:	84 f4       	brge	.+32     	; 0x4ee4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ec8:	99 23       	and	r25, r25
    4eca:	64 f0       	brlt	.+24     	; 0x4ee4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed0:	0e 94 8b 13 	call	0x2716	; 0x2716 <_ZNK12Adafruit_GFX6heightEv>
    4ed4:	9c 01       	movw	r18, r24
    4ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eda:	82 17       	cp	r24, r18
    4edc:	93 07       	cpc	r25, r19
    4ede:	14 f4       	brge	.+4      	; 0x4ee4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4ee0:	81 e0       	ldi	r24, 0x01	; 1
    4ee2:	01 c0       	rjmp	.+2      	; 0x4ee6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    4ee4:	80 e0       	ldi	r24, 0x00	; 0
    4ee6:	88 23       	and	r24, r24
    4ee8:	09 f4       	brne	.+2      	; 0x4eec <_ZN16Adafruit_SSD13069drawPixelEiij+0x68>
    4eea:	83 c1       	rjmp	.+774    	; 0x51f2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    4eec:	89 81       	ldd	r24, Y+1	; 0x01
    4eee:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef0:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZNK12Adafruit_GFX11getRotationEv>
    4ef4:	88 2f       	mov	r24, r24
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	82 30       	cpi	r24, 0x02	; 2
    4efa:	91 05       	cpc	r25, r1
    4efc:	81 f1       	breq	.+96     	; 0x4f5e <_ZN16Adafruit_SSD13069drawPixelEiij+0xda>
    4efe:	83 30       	cpi	r24, 0x03	; 3
    4f00:	91 05       	cpc	r25, r1
    4f02:	09 f4       	brne	.+2      	; 0x4f06 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    4f04:	4d c0       	rjmp	.+154    	; 0x4fa0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x11c>
    4f06:	01 97       	sbiw	r24, 0x01	; 1
    4f08:	09 f0       	breq	.+2      	; 0x4f0c <_ZN16Adafruit_SSD13069drawPixelEiij+0x88>
    4f0a:	73 c0       	rjmp	.+230    	; 0x4ff2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16e>
    4f0c:	2b 81       	ldd	r18, Y+3	; 0x03
    4f0e:	3c 81       	ldd	r19, Y+4	; 0x04
    4f10:	8d 81       	ldd	r24, Y+5	; 0x05
    4f12:	9e 81       	ldd	r25, Y+6	; 0x06
    4f14:	82 27       	eor	r24, r18
    4f16:	93 27       	eor	r25, r19
    4f18:	9c 83       	std	Y+4, r25	; 0x04
    4f1a:	8b 83       	std	Y+3, r24	; 0x03
    4f1c:	2d 81       	ldd	r18, Y+5	; 0x05
    4f1e:	3e 81       	ldd	r19, Y+6	; 0x06
    4f20:	8b 81       	ldd	r24, Y+3	; 0x03
    4f22:	9c 81       	ldd	r25, Y+4	; 0x04
    4f24:	82 27       	eor	r24, r18
    4f26:	93 27       	eor	r25, r19
    4f28:	9e 83       	std	Y+6, r25	; 0x06
    4f2a:	8d 83       	std	Y+5, r24	; 0x05
    4f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    4f2e:	3c 81       	ldd	r19, Y+4	; 0x04
    4f30:	8d 81       	ldd	r24, Y+5	; 0x05
    4f32:	9e 81       	ldd	r25, Y+6	; 0x06
    4f34:	82 27       	eor	r24, r18
    4f36:	93 27       	eor	r25, r19
    4f38:	9c 83       	std	Y+4, r25	; 0x04
    4f3a:	8b 83       	std	Y+3, r24	; 0x03
    4f3c:	89 81       	ldd	r24, Y+1	; 0x01
    4f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f40:	dc 01       	movw	r26, r24
    4f42:	14 96       	adiw	r26, 0x04	; 4
    4f44:	2d 91       	ld	r18, X+
    4f46:	3c 91       	ld	r19, X
    4f48:	15 97       	sbiw	r26, 0x05	; 5
    4f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f4e:	f9 01       	movw	r30, r18
    4f50:	e8 1b       	sub	r30, r24
    4f52:	f9 0b       	sbc	r31, r25
    4f54:	cf 01       	movw	r24, r30
    4f56:	01 97       	sbiw	r24, 0x01	; 1
    4f58:	9c 83       	std	Y+4, r25	; 0x04
    4f5a:	8b 83       	std	Y+3, r24	; 0x03
    4f5c:	4a c0       	rjmp	.+148    	; 0x4ff2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16e>
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
    4f60:	9a 81       	ldd	r25, Y+2	; 0x02
    4f62:	dc 01       	movw	r26, r24
    4f64:	14 96       	adiw	r26, 0x04	; 4
    4f66:	2d 91       	ld	r18, X+
    4f68:	3c 91       	ld	r19, X
    4f6a:	15 97       	sbiw	r26, 0x05	; 5
    4f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f70:	f9 01       	movw	r30, r18
    4f72:	e8 1b       	sub	r30, r24
    4f74:	f9 0b       	sbc	r31, r25
    4f76:	cf 01       	movw	r24, r30
    4f78:	01 97       	sbiw	r24, 0x01	; 1
    4f7a:	9c 83       	std	Y+4, r25	; 0x04
    4f7c:	8b 83       	std	Y+3, r24	; 0x03
    4f7e:	89 81       	ldd	r24, Y+1	; 0x01
    4f80:	9a 81       	ldd	r25, Y+2	; 0x02
    4f82:	dc 01       	movw	r26, r24
    4f84:	16 96       	adiw	r26, 0x06	; 6
    4f86:	2d 91       	ld	r18, X+
    4f88:	3c 91       	ld	r19, X
    4f8a:	17 97       	sbiw	r26, 0x07	; 7
    4f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f90:	f9 01       	movw	r30, r18
    4f92:	e8 1b       	sub	r30, r24
    4f94:	f9 0b       	sbc	r31, r25
    4f96:	cf 01       	movw	r24, r30
    4f98:	01 97       	sbiw	r24, 0x01	; 1
    4f9a:	9e 83       	std	Y+6, r25	; 0x06
    4f9c:	8d 83       	std	Y+5, r24	; 0x05
    4f9e:	29 c0       	rjmp	.+82     	; 0x4ff2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16e>
    4fa0:	2b 81       	ldd	r18, Y+3	; 0x03
    4fa2:	3c 81       	ldd	r19, Y+4	; 0x04
    4fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fa8:	82 27       	eor	r24, r18
    4faa:	93 27       	eor	r25, r19
    4fac:	9c 83       	std	Y+4, r25	; 0x04
    4fae:	8b 83       	std	Y+3, r24	; 0x03
    4fb0:	2d 81       	ldd	r18, Y+5	; 0x05
    4fb2:	3e 81       	ldd	r19, Y+6	; 0x06
    4fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    4fb8:	82 27       	eor	r24, r18
    4fba:	93 27       	eor	r25, r19
    4fbc:	9e 83       	std	Y+6, r25	; 0x06
    4fbe:	8d 83       	std	Y+5, r24	; 0x05
    4fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    4fc2:	3c 81       	ldd	r19, Y+4	; 0x04
    4fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc8:	82 27       	eor	r24, r18
    4fca:	93 27       	eor	r25, r19
    4fcc:	9c 83       	std	Y+4, r25	; 0x04
    4fce:	8b 83       	std	Y+3, r24	; 0x03
    4fd0:	89 81       	ldd	r24, Y+1	; 0x01
    4fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	16 96       	adiw	r26, 0x06	; 6
    4fd8:	2d 91       	ld	r18, X+
    4fda:	3c 91       	ld	r19, X
    4fdc:	17 97       	sbiw	r26, 0x07	; 7
    4fde:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe2:	f9 01       	movw	r30, r18
    4fe4:	e8 1b       	sub	r30, r24
    4fe6:	f9 0b       	sbc	r31, r25
    4fe8:	cf 01       	movw	r24, r30
    4fea:	01 97       	sbiw	r24, 0x01	; 1
    4fec:	9e 83       	std	Y+6, r25	; 0x06
    4fee:	8d 83       	std	Y+5, r24	; 0x05
    4ff0:	00 00       	nop
    4ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    4ff4:	98 85       	ldd	r25, Y+8	; 0x08
    4ff6:	81 30       	cpi	r24, 0x01	; 1
    4ff8:	91 05       	cpc	r25, r1
    4ffa:	41 f0       	breq	.+16     	; 0x500c <_ZN16Adafruit_SSD13069drawPixelEiij+0x188>
    4ffc:	81 30       	cpi	r24, 0x01	; 1
    4ffe:	91 05       	cpc	r25, r1
    5000:	08 f4       	brcc	.+2      	; 0x5004 <_ZN16Adafruit_SSD13069drawPixelEiij+0x180>
    5002:	56 c0       	rjmp	.+172    	; 0x50b0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x22c>
    5004:	02 97       	sbiw	r24, 0x02	; 2
    5006:	09 f4       	brne	.+2      	; 0x500a <_ZN16Adafruit_SSD13069drawPixelEiij+0x186>
    5008:	a4 c0       	rjmp	.+328    	; 0x5152 <_ZN16Adafruit_SSD13069drawPixelEiij+0x2ce>
    500a:	f3 c0       	rjmp	.+486    	; 0x51f2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	9a 81       	ldd	r25, Y+2	; 0x02
    5010:	dc 01       	movw	r26, r24
    5012:	5f 96       	adiw	r26, 0x1f	; 31
    5014:	2d 91       	ld	r18, X+
    5016:	3c 91       	ld	r19, X
    5018:	90 97       	sbiw	r26, 0x20	; 32
    501a:	8d 81       	ldd	r24, Y+5	; 0x05
    501c:	9e 81       	ldd	r25, Y+6	; 0x06
    501e:	99 23       	and	r25, r25
    5020:	0c f4       	brge	.+2      	; 0x5024 <_ZN16Adafruit_SSD13069drawPixelEiij+0x1a0>
    5022:	07 96       	adiw	r24, 0x07	; 7
    5024:	95 95       	asr	r25
    5026:	87 95       	ror	r24
    5028:	95 95       	asr	r25
    502a:	87 95       	ror	r24
    502c:	95 95       	asr	r25
    502e:	87 95       	ror	r24
    5030:	49 81       	ldd	r20, Y+1	; 0x01
    5032:	5a 81       	ldd	r21, Y+2	; 0x02
    5034:	fa 01       	movw	r30, r20
    5036:	44 81       	ldd	r20, Z+4	; 0x04
    5038:	55 81       	ldd	r21, Z+5	; 0x05
    503a:	84 9f       	mul	r24, r20
    503c:	b0 01       	movw	r22, r0
    503e:	85 9f       	mul	r24, r21
    5040:	70 0d       	add	r23, r0
    5042:	94 9f       	mul	r25, r20
    5044:	70 0d       	add	r23, r0
    5046:	11 24       	eor	r1, r1
    5048:	4b 81       	ldd	r20, Y+3	; 0x03
    504a:	5c 81       	ldd	r21, Y+4	; 0x04
    504c:	46 0f       	add	r20, r22
    504e:	57 1f       	adc	r21, r23
    5050:	24 0f       	add	r18, r20
    5052:	35 1f       	adc	r19, r21
    5054:	49 81       	ldd	r20, Y+1	; 0x01
    5056:	5a 81       	ldd	r21, Y+2	; 0x02
    5058:	da 01       	movw	r26, r20
    505a:	5f 96       	adiw	r26, 0x1f	; 31
    505c:	4d 91       	ld	r20, X+
    505e:	5c 91       	ld	r21, X
    5060:	90 97       	sbiw	r26, 0x20	; 32
    5062:	69 81       	ldd	r22, Y+1	; 0x01
    5064:	7a 81       	ldd	r23, Y+2	; 0x02
    5066:	db 01       	movw	r26, r22
    5068:	14 96       	adiw	r26, 0x04	; 4
    506a:	ed 91       	ld	r30, X+
    506c:	fc 91       	ld	r31, X
    506e:	15 97       	sbiw	r26, 0x05	; 5
    5070:	8e 9f       	mul	r24, r30
    5072:	b0 01       	movw	r22, r0
    5074:	8f 9f       	mul	r24, r31
    5076:	70 0d       	add	r23, r0
    5078:	9e 9f       	mul	r25, r30
    507a:	70 0d       	add	r23, r0
    507c:	11 24       	eor	r1, r1
    507e:	8b 81       	ldd	r24, Y+3	; 0x03
    5080:	9c 81       	ldd	r25, Y+4	; 0x04
    5082:	86 0f       	add	r24, r22
    5084:	97 1f       	adc	r25, r23
    5086:	84 0f       	add	r24, r20
    5088:	95 1f       	adc	r25, r21
    508a:	fc 01       	movw	r30, r24
    508c:	80 81       	ld	r24, Z
    508e:	68 2f       	mov	r22, r24
    5090:	8d 81       	ldd	r24, Y+5	; 0x05
    5092:	9e 81       	ldd	r25, Y+6	; 0x06
    5094:	ac 01       	movw	r20, r24
    5096:	47 70       	andi	r20, 0x07	; 7
    5098:	55 27       	eor	r21, r21
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	02 c0       	rjmp	.+4      	; 0x50a4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x220>
    50a0:	88 0f       	add	r24, r24
    50a2:	99 1f       	adc	r25, r25
    50a4:	4a 95       	dec	r20
    50a6:	e2 f7       	brpl	.-8      	; 0x50a0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x21c>
    50a8:	86 2b       	or	r24, r22
    50aa:	d9 01       	movw	r26, r18
    50ac:	8c 93       	st	X, r24
    50ae:	a1 c0       	rjmp	.+322    	; 0x51f2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    50b0:	89 81       	ldd	r24, Y+1	; 0x01
    50b2:	9a 81       	ldd	r25, Y+2	; 0x02
    50b4:	fc 01       	movw	r30, r24
    50b6:	27 8d       	ldd	r18, Z+31	; 0x1f
    50b8:	30 a1       	ldd	r19, Z+32	; 0x20
    50ba:	8d 81       	ldd	r24, Y+5	; 0x05
    50bc:	9e 81       	ldd	r25, Y+6	; 0x06
    50be:	99 23       	and	r25, r25
    50c0:	0c f4       	brge	.+2      	; 0x50c4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x240>
    50c2:	07 96       	adiw	r24, 0x07	; 7
    50c4:	95 95       	asr	r25
    50c6:	87 95       	ror	r24
    50c8:	95 95       	asr	r25
    50ca:	87 95       	ror	r24
    50cc:	95 95       	asr	r25
    50ce:	87 95       	ror	r24
    50d0:	49 81       	ldd	r20, Y+1	; 0x01
    50d2:	5a 81       	ldd	r21, Y+2	; 0x02
    50d4:	da 01       	movw	r26, r20
    50d6:	14 96       	adiw	r26, 0x04	; 4
    50d8:	4d 91       	ld	r20, X+
    50da:	5c 91       	ld	r21, X
    50dc:	15 97       	sbiw	r26, 0x05	; 5
    50de:	84 9f       	mul	r24, r20
    50e0:	b0 01       	movw	r22, r0
    50e2:	85 9f       	mul	r24, r21
    50e4:	70 0d       	add	r23, r0
    50e6:	94 9f       	mul	r25, r20
    50e8:	70 0d       	add	r23, r0
    50ea:	11 24       	eor	r1, r1
    50ec:	4b 81       	ldd	r20, Y+3	; 0x03
    50ee:	5c 81       	ldd	r21, Y+4	; 0x04
    50f0:	46 0f       	add	r20, r22
    50f2:	57 1f       	adc	r21, r23
    50f4:	24 0f       	add	r18, r20
    50f6:	35 1f       	adc	r19, r21
    50f8:	49 81       	ldd	r20, Y+1	; 0x01
    50fa:	5a 81       	ldd	r21, Y+2	; 0x02
    50fc:	fa 01       	movw	r30, r20
    50fe:	47 8d       	ldd	r20, Z+31	; 0x1f
    5100:	50 a1       	ldd	r21, Z+32	; 0x20
    5102:	69 81       	ldd	r22, Y+1	; 0x01
    5104:	7a 81       	ldd	r23, Y+2	; 0x02
    5106:	db 01       	movw	r26, r22
    5108:	14 96       	adiw	r26, 0x04	; 4
    510a:	ed 91       	ld	r30, X+
    510c:	fc 91       	ld	r31, X
    510e:	15 97       	sbiw	r26, 0x05	; 5
    5110:	8e 9f       	mul	r24, r30
    5112:	b0 01       	movw	r22, r0
    5114:	8f 9f       	mul	r24, r31
    5116:	70 0d       	add	r23, r0
    5118:	9e 9f       	mul	r25, r30
    511a:	70 0d       	add	r23, r0
    511c:	11 24       	eor	r1, r1
    511e:	8b 81       	ldd	r24, Y+3	; 0x03
    5120:	9c 81       	ldd	r25, Y+4	; 0x04
    5122:	86 0f       	add	r24, r22
    5124:	97 1f       	adc	r25, r23
    5126:	84 0f       	add	r24, r20
    5128:	95 1f       	adc	r25, r21
    512a:	fc 01       	movw	r30, r24
    512c:	80 81       	ld	r24, Z
    512e:	68 2f       	mov	r22, r24
    5130:	8d 81       	ldd	r24, Y+5	; 0x05
    5132:	9e 81       	ldd	r25, Y+6	; 0x06
    5134:	ac 01       	movw	r20, r24
    5136:	47 70       	andi	r20, 0x07	; 7
    5138:	55 27       	eor	r21, r21
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	02 c0       	rjmp	.+4      	; 0x5144 <_ZN16Adafruit_SSD13069drawPixelEiij+0x2c0>
    5140:	88 0f       	add	r24, r24
    5142:	99 1f       	adc	r25, r25
    5144:	4a 95       	dec	r20
    5146:	e2 f7       	brpl	.-8      	; 0x5140 <_ZN16Adafruit_SSD13069drawPixelEiij+0x2bc>
    5148:	80 95       	com	r24
    514a:	86 23       	and	r24, r22
    514c:	d9 01       	movw	r26, r18
    514e:	8c 93       	st	X, r24
    5150:	50 c0       	rjmp	.+160    	; 0x51f2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    5152:	89 81       	ldd	r24, Y+1	; 0x01
    5154:	9a 81       	ldd	r25, Y+2	; 0x02
    5156:	fc 01       	movw	r30, r24
    5158:	27 8d       	ldd	r18, Z+31	; 0x1f
    515a:	30 a1       	ldd	r19, Z+32	; 0x20
    515c:	8d 81       	ldd	r24, Y+5	; 0x05
    515e:	9e 81       	ldd	r25, Y+6	; 0x06
    5160:	99 23       	and	r25, r25
    5162:	0c f4       	brge	.+2      	; 0x5166 <_ZN16Adafruit_SSD13069drawPixelEiij+0x2e2>
    5164:	07 96       	adiw	r24, 0x07	; 7
    5166:	95 95       	asr	r25
    5168:	87 95       	ror	r24
    516a:	95 95       	asr	r25
    516c:	87 95       	ror	r24
    516e:	95 95       	asr	r25
    5170:	87 95       	ror	r24
    5172:	49 81       	ldd	r20, Y+1	; 0x01
    5174:	5a 81       	ldd	r21, Y+2	; 0x02
    5176:	da 01       	movw	r26, r20
    5178:	14 96       	adiw	r26, 0x04	; 4
    517a:	4d 91       	ld	r20, X+
    517c:	5c 91       	ld	r21, X
    517e:	15 97       	sbiw	r26, 0x05	; 5
    5180:	84 9f       	mul	r24, r20
    5182:	b0 01       	movw	r22, r0
    5184:	85 9f       	mul	r24, r21
    5186:	70 0d       	add	r23, r0
    5188:	94 9f       	mul	r25, r20
    518a:	70 0d       	add	r23, r0
    518c:	11 24       	eor	r1, r1
    518e:	4b 81       	ldd	r20, Y+3	; 0x03
    5190:	5c 81       	ldd	r21, Y+4	; 0x04
    5192:	46 0f       	add	r20, r22
    5194:	57 1f       	adc	r21, r23
    5196:	24 0f       	add	r18, r20
    5198:	35 1f       	adc	r19, r21
    519a:	49 81       	ldd	r20, Y+1	; 0x01
    519c:	5a 81       	ldd	r21, Y+2	; 0x02
    519e:	fa 01       	movw	r30, r20
    51a0:	47 8d       	ldd	r20, Z+31	; 0x1f
    51a2:	50 a1       	ldd	r21, Z+32	; 0x20
    51a4:	69 81       	ldd	r22, Y+1	; 0x01
    51a6:	7a 81       	ldd	r23, Y+2	; 0x02
    51a8:	db 01       	movw	r26, r22
    51aa:	14 96       	adiw	r26, 0x04	; 4
    51ac:	ed 91       	ld	r30, X+
    51ae:	fc 91       	ld	r31, X
    51b0:	15 97       	sbiw	r26, 0x05	; 5
    51b2:	8e 9f       	mul	r24, r30
    51b4:	b0 01       	movw	r22, r0
    51b6:	8f 9f       	mul	r24, r31
    51b8:	70 0d       	add	r23, r0
    51ba:	9e 9f       	mul	r25, r30
    51bc:	70 0d       	add	r23, r0
    51be:	11 24       	eor	r1, r1
    51c0:	8b 81       	ldd	r24, Y+3	; 0x03
    51c2:	9c 81       	ldd	r25, Y+4	; 0x04
    51c4:	86 0f       	add	r24, r22
    51c6:	97 1f       	adc	r25, r23
    51c8:	84 0f       	add	r24, r20
    51ca:	95 1f       	adc	r25, r21
    51cc:	fc 01       	movw	r30, r24
    51ce:	80 81       	ld	r24, Z
    51d0:	68 2f       	mov	r22, r24
    51d2:	8d 81       	ldd	r24, Y+5	; 0x05
    51d4:	9e 81       	ldd	r25, Y+6	; 0x06
    51d6:	ac 01       	movw	r20, r24
    51d8:	47 70       	andi	r20, 0x07	; 7
    51da:	55 27       	eor	r21, r21
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	02 c0       	rjmp	.+4      	; 0x51e6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x362>
    51e2:	88 0f       	add	r24, r24
    51e4:	99 1f       	adc	r25, r25
    51e6:	4a 95       	dec	r20
    51e8:	e2 f7       	brpl	.-8      	; 0x51e2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x35e>
    51ea:	86 27       	eor	r24, r22
    51ec:	d9 01       	movw	r26, r18
    51ee:	8c 93       	st	X, r24
    51f0:	00 00       	nop
    51f2:	00 00       	nop
    51f4:	28 96       	adiw	r28, 0x08	; 8
    51f6:	0f b6       	in	r0, 0x3f	; 63
    51f8:	f8 94       	cli
    51fa:	de bf       	out	0x3e, r29	; 62
    51fc:	0f be       	out	0x3f, r0	; 63
    51fe:	cd bf       	out	0x3d, r28	; 61
    5200:	df 91       	pop	r29
    5202:	cf 91       	pop	r28
    5204:	08 95       	ret

00005206 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    5206:	cf 93       	push	r28
    5208:	df 93       	push	r29
    520a:	1f 92       	push	r1
    520c:	1f 92       	push	r1
    520e:	cd b7       	in	r28, 0x3d	; 61
    5210:	de b7       	in	r29, 0x3e	; 62
    5212:	9a 83       	std	Y+2, r25	; 0x02
    5214:	89 83       	std	Y+1, r24	; 0x01
    5216:	89 81       	ldd	r24, Y+1	; 0x01
    5218:	9a 81       	ldd	r25, Y+2	; 0x02
    521a:	fc 01       	movw	r30, r24
    521c:	24 81       	ldd	r18, Z+4	; 0x04
    521e:	35 81       	ldd	r19, Z+5	; 0x05
    5220:	89 81       	ldd	r24, Y+1	; 0x01
    5222:	9a 81       	ldd	r25, Y+2	; 0x02
    5224:	fc 01       	movw	r30, r24
    5226:	86 81       	ldd	r24, Z+6	; 0x06
    5228:	97 81       	ldd	r25, Z+7	; 0x07
    522a:	07 96       	adiw	r24, 0x07	; 7
    522c:	99 23       	and	r25, r25
    522e:	0c f4       	brge	.+2      	; 0x5232 <_ZN16Adafruit_SSD130612clearDisplayEv+0x2c>
    5230:	07 96       	adiw	r24, 0x07	; 7
    5232:	95 95       	asr	r25
    5234:	87 95       	ror	r24
    5236:	95 95       	asr	r25
    5238:	87 95       	ror	r24
    523a:	95 95       	asr	r25
    523c:	87 95       	ror	r24
    523e:	ac 01       	movw	r20, r24
    5240:	24 9f       	mul	r18, r20
    5242:	c0 01       	movw	r24, r0
    5244:	25 9f       	mul	r18, r21
    5246:	90 0d       	add	r25, r0
    5248:	34 9f       	mul	r19, r20
    524a:	90 0d       	add	r25, r0
    524c:	11 24       	eor	r1, r1
    524e:	9c 01       	movw	r18, r24
    5250:	89 81       	ldd	r24, Y+1	; 0x01
    5252:	9a 81       	ldd	r25, Y+2	; 0x02
    5254:	fc 01       	movw	r30, r24
    5256:	87 8d       	ldd	r24, Z+31	; 0x1f
    5258:	90 a1       	ldd	r25, Z+32	; 0x20
    525a:	a9 01       	movw	r20, r18
    525c:	60 e0       	ldi	r22, 0x00	; 0
    525e:	70 e0       	ldi	r23, 0x00	; 0
    5260:	0e 94 0e 66 	call	0xcc1c	; 0xcc1c <memset>
    5264:	00 00       	nop
    5266:	0f 90       	pop	r0
    5268:	0f 90       	pop	r0
    526a:	df 91       	pop	r29
    526c:	cf 91       	pop	r28
    526e:	08 95       	ret

00005270 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    5270:	0f 93       	push	r16
    5272:	1f 93       	push	r17
    5274:	cf 93       	push	r28
    5276:	df 93       	push	r29
    5278:	cd b7       	in	r28, 0x3d	; 61
    527a:	de b7       	in	r29, 0x3e	; 62
    527c:	2b 97       	sbiw	r28, 0x0b	; 11
    527e:	0f b6       	in	r0, 0x3f	; 63
    5280:	f8 94       	cli
    5282:	de bf       	out	0x3e, r29	; 62
    5284:	0f be       	out	0x3f, r0	; 63
    5286:	cd bf       	out	0x3d, r28	; 61
    5288:	9b 83       	std	Y+3, r25	; 0x03
    528a:	8a 83       	std	Y+2, r24	; 0x02
    528c:	7d 83       	std	Y+5, r23	; 0x05
    528e:	6c 83       	std	Y+4, r22	; 0x04
    5290:	5f 83       	std	Y+7, r21	; 0x07
    5292:	4e 83       	std	Y+6, r20	; 0x06
    5294:	39 87       	std	Y+9, r19	; 0x09
    5296:	28 87       	std	Y+8, r18	; 0x08
    5298:	1b 87       	std	Y+11, r17	; 0x0b
    529a:	0a 87       	std	Y+10, r16	; 0x0a
    529c:	19 82       	std	Y+1, r1	; 0x01
    529e:	8a 81       	ldd	r24, Y+2	; 0x02
    52a0:	9b 81       	ldd	r25, Y+3	; 0x03
    52a2:	fc 01       	movw	r30, r24
    52a4:	86 89       	ldd	r24, Z+22	; 0x16
    52a6:	88 2f       	mov	r24, r24
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	82 30       	cpi	r24, 0x02	; 2
    52ac:	91 05       	cpc	r25, r1
    52ae:	81 f1       	breq	.+96     	; 0x5310 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xa0>
    52b0:	83 30       	cpi	r24, 0x03	; 3
    52b2:	91 05       	cpc	r25, r1
    52b4:	09 f4       	brne	.+2      	; 0x52b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x48>
    52b6:	54 c0       	rjmp	.+168    	; 0x5360 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xf0>
    52b8:	01 97       	sbiw	r24, 0x01	; 1
    52ba:	09 f0       	breq	.+2      	; 0x52be <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4e>
    52bc:	85 c0       	rjmp	.+266    	; 0x53c8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x158>
    52be:	81 e0       	ldi	r24, 0x01	; 1
    52c0:	89 83       	std	Y+1, r24	; 0x01
    52c2:	2c 81       	ldd	r18, Y+4	; 0x04
    52c4:	3d 81       	ldd	r19, Y+5	; 0x05
    52c6:	8e 81       	ldd	r24, Y+6	; 0x06
    52c8:	9f 81       	ldd	r25, Y+7	; 0x07
    52ca:	82 27       	eor	r24, r18
    52cc:	93 27       	eor	r25, r19
    52ce:	9d 83       	std	Y+5, r25	; 0x05
    52d0:	8c 83       	std	Y+4, r24	; 0x04
    52d2:	2e 81       	ldd	r18, Y+6	; 0x06
    52d4:	3f 81       	ldd	r19, Y+7	; 0x07
    52d6:	8c 81       	ldd	r24, Y+4	; 0x04
    52d8:	9d 81       	ldd	r25, Y+5	; 0x05
    52da:	82 27       	eor	r24, r18
    52dc:	93 27       	eor	r25, r19
    52de:	9f 83       	std	Y+7, r25	; 0x07
    52e0:	8e 83       	std	Y+6, r24	; 0x06
    52e2:	2c 81       	ldd	r18, Y+4	; 0x04
    52e4:	3d 81       	ldd	r19, Y+5	; 0x05
    52e6:	8e 81       	ldd	r24, Y+6	; 0x06
    52e8:	9f 81       	ldd	r25, Y+7	; 0x07
    52ea:	82 27       	eor	r24, r18
    52ec:	93 27       	eor	r25, r19
    52ee:	9d 83       	std	Y+5, r25	; 0x05
    52f0:	8c 83       	std	Y+4, r24	; 0x04
    52f2:	8a 81       	ldd	r24, Y+2	; 0x02
    52f4:	9b 81       	ldd	r25, Y+3	; 0x03
    52f6:	fc 01       	movw	r30, r24
    52f8:	24 81       	ldd	r18, Z+4	; 0x04
    52fa:	35 81       	ldd	r19, Z+5	; 0x05
    52fc:	8c 81       	ldd	r24, Y+4	; 0x04
    52fe:	9d 81       	ldd	r25, Y+5	; 0x05
    5300:	a9 01       	movw	r20, r18
    5302:	48 1b       	sub	r20, r24
    5304:	59 0b       	sbc	r21, r25
    5306:	ca 01       	movw	r24, r20
    5308:	01 97       	sbiw	r24, 0x01	; 1
    530a:	9d 83       	std	Y+5, r25	; 0x05
    530c:	8c 83       	std	Y+4, r24	; 0x04
    530e:	5c c0       	rjmp	.+184    	; 0x53c8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x158>
    5310:	8a 81       	ldd	r24, Y+2	; 0x02
    5312:	9b 81       	ldd	r25, Y+3	; 0x03
    5314:	fc 01       	movw	r30, r24
    5316:	24 81       	ldd	r18, Z+4	; 0x04
    5318:	35 81       	ldd	r19, Z+5	; 0x05
    531a:	8c 81       	ldd	r24, Y+4	; 0x04
    531c:	9d 81       	ldd	r25, Y+5	; 0x05
    531e:	a9 01       	movw	r20, r18
    5320:	48 1b       	sub	r20, r24
    5322:	59 0b       	sbc	r21, r25
    5324:	ca 01       	movw	r24, r20
    5326:	01 97       	sbiw	r24, 0x01	; 1
    5328:	9d 83       	std	Y+5, r25	; 0x05
    532a:	8c 83       	std	Y+4, r24	; 0x04
    532c:	8a 81       	ldd	r24, Y+2	; 0x02
    532e:	9b 81       	ldd	r25, Y+3	; 0x03
    5330:	fc 01       	movw	r30, r24
    5332:	26 81       	ldd	r18, Z+6	; 0x06
    5334:	37 81       	ldd	r19, Z+7	; 0x07
    5336:	8e 81       	ldd	r24, Y+6	; 0x06
    5338:	9f 81       	ldd	r25, Y+7	; 0x07
    533a:	a9 01       	movw	r20, r18
    533c:	48 1b       	sub	r20, r24
    533e:	59 0b       	sbc	r21, r25
    5340:	ca 01       	movw	r24, r20
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	9f 83       	std	Y+7, r25	; 0x07
    5346:	8e 83       	std	Y+6, r24	; 0x06
    5348:	88 85       	ldd	r24, Y+8	; 0x08
    534a:	99 85       	ldd	r25, Y+9	; 0x09
    534c:	01 97       	sbiw	r24, 0x01	; 1
    534e:	2c 81       	ldd	r18, Y+4	; 0x04
    5350:	3d 81       	ldd	r19, Y+5	; 0x05
    5352:	f9 01       	movw	r30, r18
    5354:	e8 1b       	sub	r30, r24
    5356:	f9 0b       	sbc	r31, r25
    5358:	cf 01       	movw	r24, r30
    535a:	9d 83       	std	Y+5, r25	; 0x05
    535c:	8c 83       	std	Y+4, r24	; 0x04
    535e:	34 c0       	rjmp	.+104    	; 0x53c8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x158>
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	89 83       	std	Y+1, r24	; 0x01
    5364:	2c 81       	ldd	r18, Y+4	; 0x04
    5366:	3d 81       	ldd	r19, Y+5	; 0x05
    5368:	8e 81       	ldd	r24, Y+6	; 0x06
    536a:	9f 81       	ldd	r25, Y+7	; 0x07
    536c:	82 27       	eor	r24, r18
    536e:	93 27       	eor	r25, r19
    5370:	9d 83       	std	Y+5, r25	; 0x05
    5372:	8c 83       	std	Y+4, r24	; 0x04
    5374:	2e 81       	ldd	r18, Y+6	; 0x06
    5376:	3f 81       	ldd	r19, Y+7	; 0x07
    5378:	8c 81       	ldd	r24, Y+4	; 0x04
    537a:	9d 81       	ldd	r25, Y+5	; 0x05
    537c:	82 27       	eor	r24, r18
    537e:	93 27       	eor	r25, r19
    5380:	9f 83       	std	Y+7, r25	; 0x07
    5382:	8e 83       	std	Y+6, r24	; 0x06
    5384:	2c 81       	ldd	r18, Y+4	; 0x04
    5386:	3d 81       	ldd	r19, Y+5	; 0x05
    5388:	8e 81       	ldd	r24, Y+6	; 0x06
    538a:	9f 81       	ldd	r25, Y+7	; 0x07
    538c:	82 27       	eor	r24, r18
    538e:	93 27       	eor	r25, r19
    5390:	9d 83       	std	Y+5, r25	; 0x05
    5392:	8c 83       	std	Y+4, r24	; 0x04
    5394:	8a 81       	ldd	r24, Y+2	; 0x02
    5396:	9b 81       	ldd	r25, Y+3	; 0x03
    5398:	fc 01       	movw	r30, r24
    539a:	26 81       	ldd	r18, Z+6	; 0x06
    539c:	37 81       	ldd	r19, Z+7	; 0x07
    539e:	8e 81       	ldd	r24, Y+6	; 0x06
    53a0:	9f 81       	ldd	r25, Y+7	; 0x07
    53a2:	a9 01       	movw	r20, r18
    53a4:	48 1b       	sub	r20, r24
    53a6:	59 0b       	sbc	r21, r25
    53a8:	ca 01       	movw	r24, r20
    53aa:	01 97       	sbiw	r24, 0x01	; 1
    53ac:	9f 83       	std	Y+7, r25	; 0x07
    53ae:	8e 83       	std	Y+6, r24	; 0x06
    53b0:	88 85       	ldd	r24, Y+8	; 0x08
    53b2:	99 85       	ldd	r25, Y+9	; 0x09
    53b4:	01 97       	sbiw	r24, 0x01	; 1
    53b6:	2e 81       	ldd	r18, Y+6	; 0x06
    53b8:	3f 81       	ldd	r19, Y+7	; 0x07
    53ba:	f9 01       	movw	r30, r18
    53bc:	e8 1b       	sub	r30, r24
    53be:	f9 0b       	sbc	r31, r25
    53c0:	cf 01       	movw	r24, r30
    53c2:	9f 83       	std	Y+7, r25	; 0x07
    53c4:	8e 83       	std	Y+6, r24	; 0x06
    53c6:	00 00       	nop
    53c8:	89 81       	ldd	r24, Y+1	; 0x01
    53ca:	88 23       	and	r24, r24
    53cc:	69 f0       	breq	.+26     	; 0x53e8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x178>
    53ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    53d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    53d2:	28 85       	ldd	r18, Y+8	; 0x08
    53d4:	39 85       	ldd	r19, Y+9	; 0x09
    53d6:	4e 81       	ldd	r20, Y+6	; 0x06
    53d8:	5f 81       	ldd	r21, Y+7	; 0x07
    53da:	6c 81       	ldd	r22, Y+4	; 0x04
    53dc:	7d 81       	ldd	r23, Y+5	; 0x05
    53de:	8a 81       	ldd	r24, Y+2	; 0x02
    53e0:	9b 81       	ldd	r25, Y+3	; 0x03
    53e2:	8f 01       	movw	r16, r30
    53e4:	e5 d1       	rcall	.+970    	; 0x57b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    53e6:	0c c0       	rjmp	.+24     	; 0x5400 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x190>
    53e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    53ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    53ec:	28 85       	ldd	r18, Y+8	; 0x08
    53ee:	39 85       	ldd	r19, Y+9	; 0x09
    53f0:	4e 81       	ldd	r20, Y+6	; 0x06
    53f2:	5f 81       	ldd	r21, Y+7	; 0x07
    53f4:	6c 81       	ldd	r22, Y+4	; 0x04
    53f6:	7d 81       	ldd	r23, Y+5	; 0x05
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
    53fa:	9b 81       	ldd	r25, Y+3	; 0x03
    53fc:	8f 01       	movw	r16, r30
    53fe:	0c d0       	rcall	.+24     	; 0x5418 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    5400:	00 00       	nop
    5402:	2b 96       	adiw	r28, 0x0b	; 11
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	f8 94       	cli
    5408:	de bf       	out	0x3e, r29	; 62
    540a:	0f be       	out	0x3f, r0	; 63
    540c:	cd bf       	out	0x3d, r28	; 61
    540e:	df 91       	pop	r29
    5410:	cf 91       	pop	r28
    5412:	1f 91       	pop	r17
    5414:	0f 91       	pop	r16
    5416:	08 95       	ret

00005418 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    5418:	0f 93       	push	r16
    541a:	1f 93       	push	r17
    541c:	cf 93       	push	r28
    541e:	df 93       	push	r29
    5420:	cd b7       	in	r28, 0x3d	; 61
    5422:	de b7       	in	r29, 0x3e	; 62
    5424:	2d 97       	sbiw	r28, 0x0d	; 13
    5426:	0f b6       	in	r0, 0x3f	; 63
    5428:	f8 94       	cli
    542a:	de bf       	out	0x3e, r29	; 62
    542c:	0f be       	out	0x3f, r0	; 63
    542e:	cd bf       	out	0x3d, r28	; 61
    5430:	9d 83       	std	Y+5, r25	; 0x05
    5432:	8c 83       	std	Y+4, r24	; 0x04
    5434:	7f 83       	std	Y+7, r23	; 0x07
    5436:	6e 83       	std	Y+6, r22	; 0x06
    5438:	59 87       	std	Y+9, r21	; 0x09
    543a:	48 87       	std	Y+8, r20	; 0x08
    543c:	3b 87       	std	Y+11, r19	; 0x0b
    543e:	2a 87       	std	Y+10, r18	; 0x0a
    5440:	1d 87       	std	Y+13, r17	; 0x0d
    5442:	0c 87       	std	Y+12, r16	; 0x0c
    5444:	88 85       	ldd	r24, Y+8	; 0x08
    5446:	99 85       	ldd	r25, Y+9	; 0x09
    5448:	99 23       	and	r25, r25
    544a:	0c f4       	brge	.+2      	; 0x544e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x36>
    544c:	d1 c0       	rjmp	.+418    	; 0x55f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    544e:	8c 81       	ldd	r24, Y+4	; 0x04
    5450:	9d 81       	ldd	r25, Y+5	; 0x05
    5452:	fc 01       	movw	r30, r24
    5454:	26 81       	ldd	r18, Z+6	; 0x06
    5456:	37 81       	ldd	r19, Z+7	; 0x07
    5458:	88 85       	ldd	r24, Y+8	; 0x08
    545a:	99 85       	ldd	r25, Y+9	; 0x09
    545c:	82 17       	cp	r24, r18
    545e:	93 07       	cpc	r25, r19
    5460:	0c f0       	brlt	.+2      	; 0x5464 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    5462:	c6 c0       	rjmp	.+396    	; 0x55f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    5464:	8e 81       	ldd	r24, Y+6	; 0x06
    5466:	9f 81       	ldd	r25, Y+7	; 0x07
    5468:	99 23       	and	r25, r25
    546a:	54 f4       	brge	.+20     	; 0x5480 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x68>
    546c:	2a 85       	ldd	r18, Y+10	; 0x0a
    546e:	3b 85       	ldd	r19, Y+11	; 0x0b
    5470:	8e 81       	ldd	r24, Y+6	; 0x06
    5472:	9f 81       	ldd	r25, Y+7	; 0x07
    5474:	82 0f       	add	r24, r18
    5476:	93 1f       	adc	r25, r19
    5478:	9b 87       	std	Y+11, r25	; 0x0b
    547a:	8a 87       	std	Y+10, r24	; 0x0a
    547c:	1f 82       	std	Y+7, r1	; 0x07
    547e:	1e 82       	std	Y+6, r1	; 0x06
    5480:	2e 81       	ldd	r18, Y+6	; 0x06
    5482:	3f 81       	ldd	r19, Y+7	; 0x07
    5484:	8a 85       	ldd	r24, Y+10	; 0x0a
    5486:	9b 85       	ldd	r25, Y+11	; 0x0b
    5488:	28 0f       	add	r18, r24
    548a:	39 1f       	adc	r19, r25
    548c:	8c 81       	ldd	r24, Y+4	; 0x04
    548e:	9d 81       	ldd	r25, Y+5	; 0x05
    5490:	fc 01       	movw	r30, r24
    5492:	84 81       	ldd	r24, Z+4	; 0x04
    5494:	95 81       	ldd	r25, Z+5	; 0x05
    5496:	82 17       	cp	r24, r18
    5498:	93 07       	cpc	r25, r19
    549a:	6c f4       	brge	.+26     	; 0x54b6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x9e>
    549c:	8c 81       	ldd	r24, Y+4	; 0x04
    549e:	9d 81       	ldd	r25, Y+5	; 0x05
    54a0:	fc 01       	movw	r30, r24
    54a2:	24 81       	ldd	r18, Z+4	; 0x04
    54a4:	35 81       	ldd	r19, Z+5	; 0x05
    54a6:	8e 81       	ldd	r24, Y+6	; 0x06
    54a8:	9f 81       	ldd	r25, Y+7	; 0x07
    54aa:	a9 01       	movw	r20, r18
    54ac:	48 1b       	sub	r20, r24
    54ae:	59 0b       	sbc	r21, r25
    54b0:	ca 01       	movw	r24, r20
    54b2:	9b 87       	std	Y+11, r25	; 0x0b
    54b4:	8a 87       	std	Y+10, r24	; 0x0a
    54b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    54b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    54ba:	18 16       	cp	r1, r24
    54bc:	19 06       	cpc	r1, r25
    54be:	0c f0       	brlt	.+2      	; 0x54c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xaa>
    54c0:	97 c0       	rjmp	.+302    	; 0x55f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    54c2:	8c 81       	ldd	r24, Y+4	; 0x04
    54c4:	9d 81       	ldd	r25, Y+5	; 0x05
    54c6:	fc 01       	movw	r30, r24
    54c8:	27 8d       	ldd	r18, Z+31	; 0x1f
    54ca:	30 a1       	ldd	r19, Z+32	; 0x20
    54cc:	88 85       	ldd	r24, Y+8	; 0x08
    54ce:	99 85       	ldd	r25, Y+9	; 0x09
    54d0:	99 23       	and	r25, r25
    54d2:	0c f4       	brge	.+2      	; 0x54d6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xbe>
    54d4:	07 96       	adiw	r24, 0x07	; 7
    54d6:	95 95       	asr	r25
    54d8:	87 95       	ror	r24
    54da:	95 95       	asr	r25
    54dc:	87 95       	ror	r24
    54de:	95 95       	asr	r25
    54e0:	87 95       	ror	r24
    54e2:	bc 01       	movw	r22, r24
    54e4:	8c 81       	ldd	r24, Y+4	; 0x04
    54e6:	9d 81       	ldd	r25, Y+5	; 0x05
    54e8:	fc 01       	movw	r30, r24
    54ea:	84 81       	ldd	r24, Z+4	; 0x04
    54ec:	95 81       	ldd	r25, Z+5	; 0x05
    54ee:	68 9f       	mul	r22, r24
    54f0:	a0 01       	movw	r20, r0
    54f2:	69 9f       	mul	r22, r25
    54f4:	50 0d       	add	r21, r0
    54f6:	78 9f       	mul	r23, r24
    54f8:	50 0d       	add	r21, r0
    54fa:	11 24       	eor	r1, r1
    54fc:	8e 81       	ldd	r24, Y+6	; 0x06
    54fe:	9f 81       	ldd	r25, Y+7	; 0x07
    5500:	84 0f       	add	r24, r20
    5502:	95 1f       	adc	r25, r21
    5504:	82 0f       	add	r24, r18
    5506:	93 1f       	adc	r25, r19
    5508:	9a 83       	std	Y+2, r25	; 0x02
    550a:	89 83       	std	Y+1, r24	; 0x01
    550c:	88 85       	ldd	r24, Y+8	; 0x08
    550e:	99 85       	ldd	r25, Y+9	; 0x09
    5510:	9c 01       	movw	r18, r24
    5512:	27 70       	andi	r18, 0x07	; 7
    5514:	33 27       	eor	r19, r19
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	02 c0       	rjmp	.+4      	; 0x5520 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x108>
    551c:	88 0f       	add	r24, r24
    551e:	99 1f       	adc	r25, r25
    5520:	2a 95       	dec	r18
    5522:	e2 f7       	brpl	.-8      	; 0x551c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x104>
    5524:	8b 83       	std	Y+3, r24	; 0x03
    5526:	8c 85       	ldd	r24, Y+12	; 0x0c
    5528:	9d 85       	ldd	r25, Y+13	; 0x0d
    552a:	81 30       	cpi	r24, 0x01	; 1
    552c:	91 05       	cpc	r25, r1
    552e:	31 f0       	breq	.+12     	; 0x553c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x124>
    5530:	81 30       	cpi	r24, 0x01	; 1
    5532:	91 05       	cpc	r25, r1
    5534:	f8 f0       	brcs	.+62     	; 0x5574 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x15c>
    5536:	02 97       	sbiw	r24, 0x02	; 2
    5538:	d9 f1       	breq	.+118    	; 0x55b0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x198>
    553a:	5a c0       	rjmp	.+180    	; 0x55f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    553c:	8a 85       	ldd	r24, Y+10	; 0x0a
    553e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5540:	9c 01       	movw	r18, r24
    5542:	21 50       	subi	r18, 0x01	; 1
    5544:	31 09       	sbc	r19, r1
    5546:	3b 87       	std	Y+11, r19	; 0x0b
    5548:	2a 87       	std	Y+10, r18	; 0x0a
    554a:	21 e0       	ldi	r18, 0x01	; 1
    554c:	89 2b       	or	r24, r25
    554e:	09 f4       	brne	.+2      	; 0x5552 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x13a>
    5550:	20 e0       	ldi	r18, 0x00	; 0
    5552:	22 23       	and	r18, r18
    5554:	09 f4       	brne	.+2      	; 0x5558 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x140>
    5556:	47 c0       	rjmp	.+142    	; 0x55e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1ce>
    5558:	89 81       	ldd	r24, Y+1	; 0x01
    555a:	9a 81       	ldd	r25, Y+2	; 0x02
    555c:	9c 01       	movw	r18, r24
    555e:	2f 5f       	subi	r18, 0xFF	; 255
    5560:	3f 4f       	sbci	r19, 0xFF	; 255
    5562:	3a 83       	std	Y+2, r19	; 0x02
    5564:	29 83       	std	Y+1, r18	; 0x01
    5566:	fc 01       	movw	r30, r24
    5568:	30 81       	ld	r19, Z
    556a:	2b 81       	ldd	r18, Y+3	; 0x03
    556c:	23 2b       	or	r18, r19
    556e:	fc 01       	movw	r30, r24
    5570:	20 83       	st	Z, r18
    5572:	e4 cf       	rjmp	.-56     	; 0x553c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x124>
    5574:	8b 81       	ldd	r24, Y+3	; 0x03
    5576:	80 95       	com	r24
    5578:	8b 83       	std	Y+3, r24	; 0x03
    557a:	8a 85       	ldd	r24, Y+10	; 0x0a
    557c:	9b 85       	ldd	r25, Y+11	; 0x0b
    557e:	9c 01       	movw	r18, r24
    5580:	21 50       	subi	r18, 0x01	; 1
    5582:	31 09       	sbc	r19, r1
    5584:	3b 87       	std	Y+11, r19	; 0x0b
    5586:	2a 87       	std	Y+10, r18	; 0x0a
    5588:	21 e0       	ldi	r18, 0x01	; 1
    558a:	89 2b       	or	r24, r25
    558c:	09 f4       	brne	.+2      	; 0x5590 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x178>
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	22 23       	and	r18, r18
    5592:	59 f1       	breq	.+86     	; 0x55ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d2>
    5594:	89 81       	ldd	r24, Y+1	; 0x01
    5596:	9a 81       	ldd	r25, Y+2	; 0x02
    5598:	9c 01       	movw	r18, r24
    559a:	2f 5f       	subi	r18, 0xFF	; 255
    559c:	3f 4f       	sbci	r19, 0xFF	; 255
    559e:	3a 83       	std	Y+2, r19	; 0x02
    55a0:	29 83       	std	Y+1, r18	; 0x01
    55a2:	fc 01       	movw	r30, r24
    55a4:	30 81       	ld	r19, Z
    55a6:	2b 81       	ldd	r18, Y+3	; 0x03
    55a8:	23 23       	and	r18, r19
    55aa:	fc 01       	movw	r30, r24
    55ac:	20 83       	st	Z, r18
    55ae:	e5 cf       	rjmp	.-54     	; 0x557a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x162>
    55b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    55b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    55b4:	9c 01       	movw	r18, r24
    55b6:	21 50       	subi	r18, 0x01	; 1
    55b8:	31 09       	sbc	r19, r1
    55ba:	3b 87       	std	Y+11, r19	; 0x0b
    55bc:	2a 87       	std	Y+10, r18	; 0x0a
    55be:	21 e0       	ldi	r18, 0x01	; 1
    55c0:	89 2b       	or	r24, r25
    55c2:	09 f4       	brne	.+2      	; 0x55c6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1ae>
    55c4:	20 e0       	ldi	r18, 0x00	; 0
    55c6:	22 23       	and	r18, r18
    55c8:	91 f0       	breq	.+36     	; 0x55ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d6>
    55ca:	89 81       	ldd	r24, Y+1	; 0x01
    55cc:	9a 81       	ldd	r25, Y+2	; 0x02
    55ce:	9c 01       	movw	r18, r24
    55d0:	2f 5f       	subi	r18, 0xFF	; 255
    55d2:	3f 4f       	sbci	r19, 0xFF	; 255
    55d4:	3a 83       	std	Y+2, r19	; 0x02
    55d6:	29 83       	std	Y+1, r18	; 0x01
    55d8:	fc 01       	movw	r30, r24
    55da:	30 81       	ld	r19, Z
    55dc:	2b 81       	ldd	r18, Y+3	; 0x03
    55de:	23 27       	eor	r18, r19
    55e0:	fc 01       	movw	r30, r24
    55e2:	20 83       	st	Z, r18
    55e4:	e5 cf       	rjmp	.-54     	; 0x55b0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x198>
    55e6:	00 00       	nop
    55e8:	03 c0       	rjmp	.+6      	; 0x55f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    55ea:	00 00       	nop
    55ec:	01 c0       	rjmp	.+2      	; 0x55f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    55ee:	00 00       	nop
    55f0:	00 00       	nop
    55f2:	2d 96       	adiw	r28, 0x0d	; 13
    55f4:	0f b6       	in	r0, 0x3f	; 63
    55f6:	f8 94       	cli
    55f8:	de bf       	out	0x3e, r29	; 62
    55fa:	0f be       	out	0x3f, r0	; 63
    55fc:	cd bf       	out	0x3d, r28	; 61
    55fe:	df 91       	pop	r29
    5600:	cf 91       	pop	r28
    5602:	1f 91       	pop	r17
    5604:	0f 91       	pop	r16
    5606:	08 95       	ret

00005608 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    5608:	0f 93       	push	r16
    560a:	1f 93       	push	r17
    560c:	cf 93       	push	r28
    560e:	df 93       	push	r29
    5610:	cd b7       	in	r28, 0x3d	; 61
    5612:	de b7       	in	r29, 0x3e	; 62
    5614:	2b 97       	sbiw	r28, 0x0b	; 11
    5616:	0f b6       	in	r0, 0x3f	; 63
    5618:	f8 94       	cli
    561a:	de bf       	out	0x3e, r29	; 62
    561c:	0f be       	out	0x3f, r0	; 63
    561e:	cd bf       	out	0x3d, r28	; 61
    5620:	9b 83       	std	Y+3, r25	; 0x03
    5622:	8a 83       	std	Y+2, r24	; 0x02
    5624:	7d 83       	std	Y+5, r23	; 0x05
    5626:	6c 83       	std	Y+4, r22	; 0x04
    5628:	5f 83       	std	Y+7, r21	; 0x07
    562a:	4e 83       	std	Y+6, r20	; 0x06
    562c:	39 87       	std	Y+9, r19	; 0x09
    562e:	28 87       	std	Y+8, r18	; 0x08
    5630:	1b 87       	std	Y+11, r17	; 0x0b
    5632:	0a 87       	std	Y+10, r16	; 0x0a
    5634:	19 82       	std	Y+1, r1	; 0x01
    5636:	8a 81       	ldd	r24, Y+2	; 0x02
    5638:	9b 81       	ldd	r25, Y+3	; 0x03
    563a:	fc 01       	movw	r30, r24
    563c:	86 89       	ldd	r24, Z+22	; 0x16
    563e:	88 2f       	mov	r24, r24
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	82 30       	cpi	r24, 0x02	; 2
    5644:	91 05       	cpc	r25, r1
    5646:	d9 f1       	breq	.+118    	; 0x56be <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xb6>
    5648:	83 30       	cpi	r24, 0x03	; 3
    564a:	91 05       	cpc	r25, r1
    564c:	09 f4       	brne	.+2      	; 0x5650 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x48>
    564e:	5f c0       	rjmp	.+190    	; 0x570e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x106>
    5650:	01 97       	sbiw	r24, 0x01	; 1
    5652:	09 f0       	breq	.+2      	; 0x5656 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4e>
    5654:	85 c0       	rjmp	.+266    	; 0x5760 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x158>
    5656:	81 e0       	ldi	r24, 0x01	; 1
    5658:	89 83       	std	Y+1, r24	; 0x01
    565a:	2c 81       	ldd	r18, Y+4	; 0x04
    565c:	3d 81       	ldd	r19, Y+5	; 0x05
    565e:	8e 81       	ldd	r24, Y+6	; 0x06
    5660:	9f 81       	ldd	r25, Y+7	; 0x07
    5662:	82 27       	eor	r24, r18
    5664:	93 27       	eor	r25, r19
    5666:	9d 83       	std	Y+5, r25	; 0x05
    5668:	8c 83       	std	Y+4, r24	; 0x04
    566a:	2e 81       	ldd	r18, Y+6	; 0x06
    566c:	3f 81       	ldd	r19, Y+7	; 0x07
    566e:	8c 81       	ldd	r24, Y+4	; 0x04
    5670:	9d 81       	ldd	r25, Y+5	; 0x05
    5672:	82 27       	eor	r24, r18
    5674:	93 27       	eor	r25, r19
    5676:	9f 83       	std	Y+7, r25	; 0x07
    5678:	8e 83       	std	Y+6, r24	; 0x06
    567a:	2c 81       	ldd	r18, Y+4	; 0x04
    567c:	3d 81       	ldd	r19, Y+5	; 0x05
    567e:	8e 81       	ldd	r24, Y+6	; 0x06
    5680:	9f 81       	ldd	r25, Y+7	; 0x07
    5682:	82 27       	eor	r24, r18
    5684:	93 27       	eor	r25, r19
    5686:	9d 83       	std	Y+5, r25	; 0x05
    5688:	8c 83       	std	Y+4, r24	; 0x04
    568a:	8a 81       	ldd	r24, Y+2	; 0x02
    568c:	9b 81       	ldd	r25, Y+3	; 0x03
    568e:	fc 01       	movw	r30, r24
    5690:	24 81       	ldd	r18, Z+4	; 0x04
    5692:	35 81       	ldd	r19, Z+5	; 0x05
    5694:	8c 81       	ldd	r24, Y+4	; 0x04
    5696:	9d 81       	ldd	r25, Y+5	; 0x05
    5698:	a9 01       	movw	r20, r18
    569a:	48 1b       	sub	r20, r24
    569c:	59 0b       	sbc	r21, r25
    569e:	ca 01       	movw	r24, r20
    56a0:	01 97       	sbiw	r24, 0x01	; 1
    56a2:	9d 83       	std	Y+5, r25	; 0x05
    56a4:	8c 83       	std	Y+4, r24	; 0x04
    56a6:	88 85       	ldd	r24, Y+8	; 0x08
    56a8:	99 85       	ldd	r25, Y+9	; 0x09
    56aa:	01 97       	sbiw	r24, 0x01	; 1
    56ac:	2c 81       	ldd	r18, Y+4	; 0x04
    56ae:	3d 81       	ldd	r19, Y+5	; 0x05
    56b0:	f9 01       	movw	r30, r18
    56b2:	e8 1b       	sub	r30, r24
    56b4:	f9 0b       	sbc	r31, r25
    56b6:	cf 01       	movw	r24, r30
    56b8:	9d 83       	std	Y+5, r25	; 0x05
    56ba:	8c 83       	std	Y+4, r24	; 0x04
    56bc:	51 c0       	rjmp	.+162    	; 0x5760 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x158>
    56be:	8a 81       	ldd	r24, Y+2	; 0x02
    56c0:	9b 81       	ldd	r25, Y+3	; 0x03
    56c2:	fc 01       	movw	r30, r24
    56c4:	24 81       	ldd	r18, Z+4	; 0x04
    56c6:	35 81       	ldd	r19, Z+5	; 0x05
    56c8:	8c 81       	ldd	r24, Y+4	; 0x04
    56ca:	9d 81       	ldd	r25, Y+5	; 0x05
    56cc:	a9 01       	movw	r20, r18
    56ce:	48 1b       	sub	r20, r24
    56d0:	59 0b       	sbc	r21, r25
    56d2:	ca 01       	movw	r24, r20
    56d4:	01 97       	sbiw	r24, 0x01	; 1
    56d6:	9d 83       	std	Y+5, r25	; 0x05
    56d8:	8c 83       	std	Y+4, r24	; 0x04
    56da:	8a 81       	ldd	r24, Y+2	; 0x02
    56dc:	9b 81       	ldd	r25, Y+3	; 0x03
    56de:	fc 01       	movw	r30, r24
    56e0:	26 81       	ldd	r18, Z+6	; 0x06
    56e2:	37 81       	ldd	r19, Z+7	; 0x07
    56e4:	8e 81       	ldd	r24, Y+6	; 0x06
    56e6:	9f 81       	ldd	r25, Y+7	; 0x07
    56e8:	a9 01       	movw	r20, r18
    56ea:	48 1b       	sub	r20, r24
    56ec:	59 0b       	sbc	r21, r25
    56ee:	ca 01       	movw	r24, r20
    56f0:	01 97       	sbiw	r24, 0x01	; 1
    56f2:	9f 83       	std	Y+7, r25	; 0x07
    56f4:	8e 83       	std	Y+6, r24	; 0x06
    56f6:	88 85       	ldd	r24, Y+8	; 0x08
    56f8:	99 85       	ldd	r25, Y+9	; 0x09
    56fa:	01 97       	sbiw	r24, 0x01	; 1
    56fc:	2e 81       	ldd	r18, Y+6	; 0x06
    56fe:	3f 81       	ldd	r19, Y+7	; 0x07
    5700:	f9 01       	movw	r30, r18
    5702:	e8 1b       	sub	r30, r24
    5704:	f9 0b       	sbc	r31, r25
    5706:	cf 01       	movw	r24, r30
    5708:	9f 83       	std	Y+7, r25	; 0x07
    570a:	8e 83       	std	Y+6, r24	; 0x06
    570c:	29 c0       	rjmp	.+82     	; 0x5760 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x158>
    570e:	81 e0       	ldi	r24, 0x01	; 1
    5710:	89 83       	std	Y+1, r24	; 0x01
    5712:	2c 81       	ldd	r18, Y+4	; 0x04
    5714:	3d 81       	ldd	r19, Y+5	; 0x05
    5716:	8e 81       	ldd	r24, Y+6	; 0x06
    5718:	9f 81       	ldd	r25, Y+7	; 0x07
    571a:	82 27       	eor	r24, r18
    571c:	93 27       	eor	r25, r19
    571e:	9d 83       	std	Y+5, r25	; 0x05
    5720:	8c 83       	std	Y+4, r24	; 0x04
    5722:	2e 81       	ldd	r18, Y+6	; 0x06
    5724:	3f 81       	ldd	r19, Y+7	; 0x07
    5726:	8c 81       	ldd	r24, Y+4	; 0x04
    5728:	9d 81       	ldd	r25, Y+5	; 0x05
    572a:	82 27       	eor	r24, r18
    572c:	93 27       	eor	r25, r19
    572e:	9f 83       	std	Y+7, r25	; 0x07
    5730:	8e 83       	std	Y+6, r24	; 0x06
    5732:	2c 81       	ldd	r18, Y+4	; 0x04
    5734:	3d 81       	ldd	r19, Y+5	; 0x05
    5736:	8e 81       	ldd	r24, Y+6	; 0x06
    5738:	9f 81       	ldd	r25, Y+7	; 0x07
    573a:	82 27       	eor	r24, r18
    573c:	93 27       	eor	r25, r19
    573e:	9d 83       	std	Y+5, r25	; 0x05
    5740:	8c 83       	std	Y+4, r24	; 0x04
    5742:	8a 81       	ldd	r24, Y+2	; 0x02
    5744:	9b 81       	ldd	r25, Y+3	; 0x03
    5746:	fc 01       	movw	r30, r24
    5748:	26 81       	ldd	r18, Z+6	; 0x06
    574a:	37 81       	ldd	r19, Z+7	; 0x07
    574c:	8e 81       	ldd	r24, Y+6	; 0x06
    574e:	9f 81       	ldd	r25, Y+7	; 0x07
    5750:	a9 01       	movw	r20, r18
    5752:	48 1b       	sub	r20, r24
    5754:	59 0b       	sbc	r21, r25
    5756:	ca 01       	movw	r24, r20
    5758:	01 97       	sbiw	r24, 0x01	; 1
    575a:	9f 83       	std	Y+7, r25	; 0x07
    575c:	8e 83       	std	Y+6, r24	; 0x06
    575e:	00 00       	nop
    5760:	89 81       	ldd	r24, Y+1	; 0x01
    5762:	88 23       	and	r24, r24
    5764:	69 f0       	breq	.+26     	; 0x5780 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x178>
    5766:	ea 85       	ldd	r30, Y+10	; 0x0a
    5768:	fb 85       	ldd	r31, Y+11	; 0x0b
    576a:	28 85       	ldd	r18, Y+8	; 0x08
    576c:	39 85       	ldd	r19, Y+9	; 0x09
    576e:	4e 81       	ldd	r20, Y+6	; 0x06
    5770:	5f 81       	ldd	r21, Y+7	; 0x07
    5772:	6c 81       	ldd	r22, Y+4	; 0x04
    5774:	7d 81       	ldd	r23, Y+5	; 0x05
    5776:	8a 81       	ldd	r24, Y+2	; 0x02
    5778:	9b 81       	ldd	r25, Y+3	; 0x03
    577a:	8f 01       	movw	r16, r30
    577c:	4d de       	rcall	.-870    	; 0x5418 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    577e:	0c c0       	rjmp	.+24     	; 0x5798 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x190>
    5780:	ea 85       	ldd	r30, Y+10	; 0x0a
    5782:	fb 85       	ldd	r31, Y+11	; 0x0b
    5784:	28 85       	ldd	r18, Y+8	; 0x08
    5786:	39 85       	ldd	r19, Y+9	; 0x09
    5788:	4e 81       	ldd	r20, Y+6	; 0x06
    578a:	5f 81       	ldd	r21, Y+7	; 0x07
    578c:	6c 81       	ldd	r22, Y+4	; 0x04
    578e:	7d 81       	ldd	r23, Y+5	; 0x05
    5790:	8a 81       	ldd	r24, Y+2	; 0x02
    5792:	9b 81       	ldd	r25, Y+3	; 0x03
    5794:	8f 01       	movw	r16, r30
    5796:	0c d0       	rcall	.+24     	; 0x57b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    5798:	00 00       	nop
    579a:	2b 96       	adiw	r28, 0x0b	; 11
    579c:	0f b6       	in	r0, 0x3f	; 63
    579e:	f8 94       	cli
    57a0:	de bf       	out	0x3e, r29	; 62
    57a2:	0f be       	out	0x3f, r0	; 63
    57a4:	cd bf       	out	0x3d, r28	; 61
    57a6:	df 91       	pop	r29
    57a8:	cf 91       	pop	r28
    57aa:	1f 91       	pop	r17
    57ac:	0f 91       	pop	r16
    57ae:	08 95       	ret

000057b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    57b0:	0f 93       	push	r16
    57b2:	1f 93       	push	r17
    57b4:	cf 93       	push	r28
    57b6:	df 93       	push	r29
    57b8:	cd b7       	in	r28, 0x3d	; 61
    57ba:	de b7       	in	r29, 0x3e	; 62
    57bc:	68 97       	sbiw	r28, 0x18	; 24
    57be:	0f b6       	in	r0, 0x3f	; 63
    57c0:	f8 94       	cli
    57c2:	de bf       	out	0x3e, r29	; 62
    57c4:	0f be       	out	0x3f, r0	; 63
    57c6:	cd bf       	out	0x3d, r28	; 61
    57c8:	98 8b       	std	Y+16, r25	; 0x10
    57ca:	8f 87       	std	Y+15, r24	; 0x0f
    57cc:	7a 8b       	std	Y+18, r23	; 0x12
    57ce:	69 8b       	std	Y+17, r22	; 0x11
    57d0:	5c 8b       	std	Y+20, r21	; 0x14
    57d2:	4b 8b       	std	Y+19, r20	; 0x13
    57d4:	3e 8b       	std	Y+22, r19	; 0x16
    57d6:	2d 8b       	std	Y+21, r18	; 0x15
    57d8:	18 8f       	std	Y+24, r17	; 0x18
    57da:	0f 8b       	std	Y+23, r16	; 0x17
    57dc:	89 89       	ldd	r24, Y+17	; 0x11
    57de:	9a 89       	ldd	r25, Y+18	; 0x12
    57e0:	99 23       	and	r25, r25
    57e2:	0c f4       	brge	.+2      	; 0x57e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x36>
    57e4:	62 c1       	rjmp	.+708    	; 0x5aaa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    57e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    57e8:	98 89       	ldd	r25, Y+16	; 0x10
    57ea:	fc 01       	movw	r30, r24
    57ec:	24 81       	ldd	r18, Z+4	; 0x04
    57ee:	35 81       	ldd	r19, Z+5	; 0x05
    57f0:	89 89       	ldd	r24, Y+17	; 0x11
    57f2:	9a 89       	ldd	r25, Y+18	; 0x12
    57f4:	82 17       	cp	r24, r18
    57f6:	93 07       	cpc	r25, r19
    57f8:	0c f0       	brlt	.+2      	; 0x57fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x4c>
    57fa:	57 c1       	rjmp	.+686    	; 0x5aaa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    57fc:	8b 89       	ldd	r24, Y+19	; 0x13
    57fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5800:	99 23       	and	r25, r25
    5802:	54 f4       	brge	.+20     	; 0x5818 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x68>
    5804:	2d 89       	ldd	r18, Y+21	; 0x15
    5806:	3e 89       	ldd	r19, Y+22	; 0x16
    5808:	8b 89       	ldd	r24, Y+19	; 0x13
    580a:	9c 89       	ldd	r25, Y+20	; 0x14
    580c:	82 0f       	add	r24, r18
    580e:	93 1f       	adc	r25, r19
    5810:	9e 8b       	std	Y+22, r25	; 0x16
    5812:	8d 8b       	std	Y+21, r24	; 0x15
    5814:	1c 8a       	std	Y+20, r1	; 0x14
    5816:	1b 8a       	std	Y+19, r1	; 0x13
    5818:	2b 89       	ldd	r18, Y+19	; 0x13
    581a:	3c 89       	ldd	r19, Y+20	; 0x14
    581c:	8d 89       	ldd	r24, Y+21	; 0x15
    581e:	9e 89       	ldd	r25, Y+22	; 0x16
    5820:	28 0f       	add	r18, r24
    5822:	39 1f       	adc	r19, r25
    5824:	8f 85       	ldd	r24, Y+15	; 0x0f
    5826:	98 89       	ldd	r25, Y+16	; 0x10
    5828:	fc 01       	movw	r30, r24
    582a:	86 81       	ldd	r24, Z+6	; 0x06
    582c:	97 81       	ldd	r25, Z+7	; 0x07
    582e:	82 17       	cp	r24, r18
    5830:	93 07       	cpc	r25, r19
    5832:	6c f4       	brge	.+26     	; 0x584e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x9e>
    5834:	8f 85       	ldd	r24, Y+15	; 0x0f
    5836:	98 89       	ldd	r25, Y+16	; 0x10
    5838:	fc 01       	movw	r30, r24
    583a:	26 81       	ldd	r18, Z+6	; 0x06
    583c:	37 81       	ldd	r19, Z+7	; 0x07
    583e:	8b 89       	ldd	r24, Y+19	; 0x13
    5840:	9c 89       	ldd	r25, Y+20	; 0x14
    5842:	a9 01       	movw	r20, r18
    5844:	48 1b       	sub	r20, r24
    5846:	59 0b       	sbc	r21, r25
    5848:	ca 01       	movw	r24, r20
    584a:	9e 8b       	std	Y+22, r25	; 0x16
    584c:	8d 8b       	std	Y+21, r24	; 0x15
    584e:	8d 89       	ldd	r24, Y+21	; 0x15
    5850:	9e 89       	ldd	r25, Y+22	; 0x16
    5852:	18 16       	cp	r1, r24
    5854:	19 06       	cpc	r1, r25
    5856:	0c f0       	brlt	.+2      	; 0x585a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xaa>
    5858:	28 c1       	rjmp	.+592    	; 0x5aaa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    585a:	8b 89       	ldd	r24, Y+19	; 0x13
    585c:	8e 83       	std	Y+6, r24	; 0x06
    585e:	8d 89       	ldd	r24, Y+21	; 0x15
    5860:	89 83       	std	Y+1, r24	; 0x01
    5862:	8f 85       	ldd	r24, Y+15	; 0x0f
    5864:	98 89       	ldd	r25, Y+16	; 0x10
    5866:	fc 01       	movw	r30, r24
    5868:	87 8d       	ldd	r24, Z+31	; 0x1f
    586a:	90 a1       	ldd	r25, Z+32	; 0x20
    586c:	2e 81       	ldd	r18, Y+6	; 0x06
    586e:	26 95       	lsr	r18
    5870:	26 95       	lsr	r18
    5872:	26 95       	lsr	r18
    5874:	62 2f       	mov	r22, r18
    5876:	70 e0       	ldi	r23, 0x00	; 0
    5878:	2f 85       	ldd	r18, Y+15	; 0x0f
    587a:	38 89       	ldd	r19, Y+16	; 0x10
    587c:	f9 01       	movw	r30, r18
    587e:	24 81       	ldd	r18, Z+4	; 0x04
    5880:	35 81       	ldd	r19, Z+5	; 0x05
    5882:	62 9f       	mul	r22, r18
    5884:	a0 01       	movw	r20, r0
    5886:	63 9f       	mul	r22, r19
    5888:	50 0d       	add	r21, r0
    588a:	72 9f       	mul	r23, r18
    588c:	50 0d       	add	r21, r0
    588e:	11 24       	eor	r1, r1
    5890:	29 89       	ldd	r18, Y+17	; 0x11
    5892:	3a 89       	ldd	r19, Y+18	; 0x12
    5894:	24 0f       	add	r18, r20
    5896:	35 1f       	adc	r19, r21
    5898:	82 0f       	add	r24, r18
    589a:	93 1f       	adc	r25, r19
    589c:	9b 83       	std	Y+3, r25	; 0x03
    589e:	8a 83       	std	Y+2, r24	; 0x02
    58a0:	8e 81       	ldd	r24, Y+6	; 0x06
    58a2:	87 70       	andi	r24, 0x07	; 7
    58a4:	8c 83       	std	Y+4, r24	; 0x04
    58a6:	8c 81       	ldd	r24, Y+4	; 0x04
    58a8:	88 23       	and	r24, r24
    58aa:	09 f4       	brne	.+2      	; 0x58ae <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    58ac:	68 c0       	rjmp	.+208    	; 0x597e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1ce>
    58ae:	98 e0       	ldi	r25, 0x08	; 8
    58b0:	8c 81       	ldd	r24, Y+4	; 0x04
    58b2:	f9 2f       	mov	r31, r25
    58b4:	f8 1b       	sub	r31, r24
    58b6:	8f 2f       	mov	r24, r31
    58b8:	8c 83       	std	Y+4, r24	; 0x04
    58ba:	8c 81       	ldd	r24, Y+4	; 0x04
    58bc:	88 2f       	mov	r24, r24
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	81 5b       	subi	r24, 0xB1	; 177
    58c2:	94 4f       	sbci	r25, 0xF4	; 244
    58c4:	98 87       	std	Y+8, r25	; 0x08
    58c6:	8f 83       	std	Y+7, r24	; 0x07
    58c8:	8f 81       	ldd	r24, Y+7	; 0x07
    58ca:	98 85       	ldd	r25, Y+8	; 0x08
    58cc:	fc 01       	movw	r30, r24
    58ce:	84 91       	lpm	r24, Z
    58d0:	89 87       	std	Y+9, r24	; 0x09
    58d2:	89 85       	ldd	r24, Y+9	; 0x09
    58d4:	8d 83       	std	Y+5, r24	; 0x05
    58d6:	99 81       	ldd	r25, Y+1	; 0x01
    58d8:	8c 81       	ldd	r24, Y+4	; 0x04
    58da:	98 17       	cp	r25, r24
    58dc:	98 f4       	brcc	.+38     	; 0x5904 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x154>
    58de:	8c 81       	ldd	r24, Y+4	; 0x04
    58e0:	28 2f       	mov	r18, r24
    58e2:	30 e0       	ldi	r19, 0x00	; 0
    58e4:	89 81       	ldd	r24, Y+1	; 0x01
    58e6:	88 2f       	mov	r24, r24
    58e8:	90 e0       	ldi	r25, 0x00	; 0
    58ea:	28 1b       	sub	r18, r24
    58ec:	39 0b       	sbc	r19, r25
    58ee:	8f ef       	ldi	r24, 0xFF	; 255
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	02 c0       	rjmp	.+4      	; 0x58f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x148>
    58f4:	95 95       	asr	r25
    58f6:	87 95       	ror	r24
    58f8:	2a 95       	dec	r18
    58fa:	e2 f7       	brpl	.-8      	; 0x58f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    58fc:	98 2f       	mov	r25, r24
    58fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5900:	89 23       	and	r24, r25
    5902:	8d 83       	std	Y+5, r24	; 0x05
    5904:	8f 89       	ldd	r24, Y+23	; 0x17
    5906:	98 8d       	ldd	r25, Y+24	; 0x18
    5908:	81 30       	cpi	r24, 0x01	; 1
    590a:	91 05       	cpc	r25, r1
    590c:	31 f0       	breq	.+12     	; 0x591a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x16a>
    590e:	81 30       	cpi	r24, 0x01	; 1
    5910:	91 05       	cpc	r25, r1
    5912:	78 f0       	brcs	.+30     	; 0x5932 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x182>
    5914:	02 97       	sbiw	r24, 0x02	; 2
    5916:	d9 f0       	breq	.+54     	; 0x594e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x19e>
    5918:	26 c0       	rjmp	.+76     	; 0x5966 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1b6>
    591a:	8a 81       	ldd	r24, Y+2	; 0x02
    591c:	9b 81       	ldd	r25, Y+3	; 0x03
    591e:	fc 01       	movw	r30, r24
    5920:	90 81       	ld	r25, Z
    5922:	8d 81       	ldd	r24, Y+5	; 0x05
    5924:	29 2f       	mov	r18, r25
    5926:	28 2b       	or	r18, r24
    5928:	8a 81       	ldd	r24, Y+2	; 0x02
    592a:	9b 81       	ldd	r25, Y+3	; 0x03
    592c:	fc 01       	movw	r30, r24
    592e:	20 83       	st	Z, r18
    5930:	1a c0       	rjmp	.+52     	; 0x5966 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1b6>
    5932:	8a 81       	ldd	r24, Y+2	; 0x02
    5934:	9b 81       	ldd	r25, Y+3	; 0x03
    5936:	fc 01       	movw	r30, r24
    5938:	80 81       	ld	r24, Z
    593a:	98 2f       	mov	r25, r24
    593c:	8d 81       	ldd	r24, Y+5	; 0x05
    593e:	80 95       	com	r24
    5940:	89 23       	and	r24, r25
    5942:	28 2f       	mov	r18, r24
    5944:	8a 81       	ldd	r24, Y+2	; 0x02
    5946:	9b 81       	ldd	r25, Y+3	; 0x03
    5948:	fc 01       	movw	r30, r24
    594a:	20 83       	st	Z, r18
    594c:	0c c0       	rjmp	.+24     	; 0x5966 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1b6>
    594e:	8a 81       	ldd	r24, Y+2	; 0x02
    5950:	9b 81       	ldd	r25, Y+3	; 0x03
    5952:	fc 01       	movw	r30, r24
    5954:	90 81       	ld	r25, Z
    5956:	8d 81       	ldd	r24, Y+5	; 0x05
    5958:	29 2f       	mov	r18, r25
    595a:	28 27       	eor	r18, r24
    595c:	8a 81       	ldd	r24, Y+2	; 0x02
    595e:	9b 81       	ldd	r25, Y+3	; 0x03
    5960:	fc 01       	movw	r30, r24
    5962:	20 83       	st	Z, r18
    5964:	00 00       	nop
    5966:	8f 85       	ldd	r24, Y+15	; 0x0f
    5968:	98 89       	ldd	r25, Y+16	; 0x10
    596a:	fc 01       	movw	r30, r24
    596c:	84 81       	ldd	r24, Z+4	; 0x04
    596e:	95 81       	ldd	r25, Z+5	; 0x05
    5970:	9c 01       	movw	r18, r24
    5972:	8a 81       	ldd	r24, Y+2	; 0x02
    5974:	9b 81       	ldd	r25, Y+3	; 0x03
    5976:	82 0f       	add	r24, r18
    5978:	93 1f       	adc	r25, r19
    597a:	9b 83       	std	Y+3, r25	; 0x03
    597c:	8a 83       	std	Y+2, r24	; 0x02
    597e:	99 81       	ldd	r25, Y+1	; 0x01
    5980:	8c 81       	ldd	r24, Y+4	; 0x04
    5982:	98 17       	cp	r25, r24
    5984:	08 f4       	brcc	.+2      	; 0x5988 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1d8>
    5986:	91 c0       	rjmp	.+290    	; 0x5aaa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5988:	99 81       	ldd	r25, Y+1	; 0x01
    598a:	8c 81       	ldd	r24, Y+4	; 0x04
    598c:	f9 2f       	mov	r31, r25
    598e:	f8 1b       	sub	r31, r24
    5990:	8f 2f       	mov	r24, r31
    5992:	89 83       	std	Y+1, r24	; 0x01
    5994:	89 81       	ldd	r24, Y+1	; 0x01
    5996:	88 30       	cpi	r24, 0x08	; 8
    5998:	08 f4       	brcc	.+2      	; 0x599c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1ec>
    599a:	41 c0       	rjmp	.+130    	; 0x5a1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x26e>
    599c:	8f 89       	ldd	r24, Y+23	; 0x17
    599e:	98 8d       	ldd	r25, Y+24	; 0x18
    59a0:	02 97       	sbiw	r24, 0x02	; 2
    59a2:	e9 f4       	brne	.+58     	; 0x59de <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x22e>
    59a4:	8a 81       	ldd	r24, Y+2	; 0x02
    59a6:	9b 81       	ldd	r25, Y+3	; 0x03
    59a8:	fc 01       	movw	r30, r24
    59aa:	80 81       	ld	r24, Z
    59ac:	28 2f       	mov	r18, r24
    59ae:	20 95       	com	r18
    59b0:	8a 81       	ldd	r24, Y+2	; 0x02
    59b2:	9b 81       	ldd	r25, Y+3	; 0x03
    59b4:	fc 01       	movw	r30, r24
    59b6:	20 83       	st	Z, r18
    59b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    59ba:	98 89       	ldd	r25, Y+16	; 0x10
    59bc:	fc 01       	movw	r30, r24
    59be:	84 81       	ldd	r24, Z+4	; 0x04
    59c0:	95 81       	ldd	r25, Z+5	; 0x05
    59c2:	9c 01       	movw	r18, r24
    59c4:	8a 81       	ldd	r24, Y+2	; 0x02
    59c6:	9b 81       	ldd	r25, Y+3	; 0x03
    59c8:	82 0f       	add	r24, r18
    59ca:	93 1f       	adc	r25, r19
    59cc:	9b 83       	std	Y+3, r25	; 0x03
    59ce:	8a 83       	std	Y+2, r24	; 0x02
    59d0:	89 81       	ldd	r24, Y+1	; 0x01
    59d2:	88 50       	subi	r24, 0x08	; 8
    59d4:	89 83       	std	Y+1, r24	; 0x01
    59d6:	89 81       	ldd	r24, Y+1	; 0x01
    59d8:	88 30       	cpi	r24, 0x08	; 8
    59da:	08 f1       	brcs	.+66     	; 0x5a1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x26e>
    59dc:	e3 cf       	rjmp	.-58     	; 0x59a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1f4>
    59de:	8f 89       	ldd	r24, Y+23	; 0x17
    59e0:	98 8d       	ldd	r25, Y+24	; 0x18
    59e2:	89 2b       	or	r24, r25
    59e4:	11 f0       	breq	.+4      	; 0x59ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x23a>
    59e6:	8f ef       	ldi	r24, 0xFF	; 255
    59e8:	01 c0       	rjmp	.+2      	; 0x59ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x23c>
    59ea:	80 e0       	ldi	r24, 0x00	; 0
    59ec:	8a 87       	std	Y+10, r24	; 0x0a
    59ee:	8a 81       	ldd	r24, Y+2	; 0x02
    59f0:	9b 81       	ldd	r25, Y+3	; 0x03
    59f2:	2a 85       	ldd	r18, Y+10	; 0x0a
    59f4:	fc 01       	movw	r30, r24
    59f6:	20 83       	st	Z, r18
    59f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    59fa:	98 89       	ldd	r25, Y+16	; 0x10
    59fc:	fc 01       	movw	r30, r24
    59fe:	84 81       	ldd	r24, Z+4	; 0x04
    5a00:	95 81       	ldd	r25, Z+5	; 0x05
    5a02:	9c 01       	movw	r18, r24
    5a04:	8a 81       	ldd	r24, Y+2	; 0x02
    5a06:	9b 81       	ldd	r25, Y+3	; 0x03
    5a08:	82 0f       	add	r24, r18
    5a0a:	93 1f       	adc	r25, r19
    5a0c:	9b 83       	std	Y+3, r25	; 0x03
    5a0e:	8a 83       	std	Y+2, r24	; 0x02
    5a10:	89 81       	ldd	r24, Y+1	; 0x01
    5a12:	88 50       	subi	r24, 0x08	; 8
    5a14:	89 83       	std	Y+1, r24	; 0x01
    5a16:	89 81       	ldd	r24, Y+1	; 0x01
    5a18:	88 30       	cpi	r24, 0x08	; 8
    5a1a:	08 f0       	brcs	.+2      	; 0x5a1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x26e>
    5a1c:	e8 cf       	rjmp	.-48     	; 0x59ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x23e>
    5a1e:	89 81       	ldd	r24, Y+1	; 0x01
    5a20:	88 23       	and	r24, r24
    5a22:	09 f4       	brne	.+2      	; 0x5a26 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x276>
    5a24:	42 c0       	rjmp	.+132    	; 0x5aaa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5a26:	89 81       	ldd	r24, Y+1	; 0x01
    5a28:	87 70       	andi	r24, 0x07	; 7
    5a2a:	8c 83       	std	Y+4, r24	; 0x04
    5a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    5a2e:	88 2f       	mov	r24, r24
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	89 5a       	subi	r24, 0xA9	; 169
    5a34:	94 4f       	sbci	r25, 0xF4	; 244
    5a36:	9c 87       	std	Y+12, r25	; 0x0c
    5a38:	8b 87       	std	Y+11, r24	; 0x0b
    5a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a3e:	fc 01       	movw	r30, r24
    5a40:	84 91       	lpm	r24, Z
    5a42:	8d 87       	std	Y+13, r24	; 0x0d
    5a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a46:	8e 87       	std	Y+14, r24	; 0x0e
    5a48:	8f 89       	ldd	r24, Y+23	; 0x17
    5a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    5a4c:	81 30       	cpi	r24, 0x01	; 1
    5a4e:	91 05       	cpc	r25, r1
    5a50:	31 f0       	breq	.+12     	; 0x5a5e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2ae>
    5a52:	81 30       	cpi	r24, 0x01	; 1
    5a54:	91 05       	cpc	r25, r1
    5a56:	78 f0       	brcs	.+30     	; 0x5a76 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2c6>
    5a58:	02 97       	sbiw	r24, 0x02	; 2
    5a5a:	d9 f0       	breq	.+54     	; 0x5a92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2e2>
    5a5c:	26 c0       	rjmp	.+76     	; 0x5aaa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a60:	9b 81       	ldd	r25, Y+3	; 0x03
    5a62:	fc 01       	movw	r30, r24
    5a64:	90 81       	ld	r25, Z
    5a66:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a68:	29 2f       	mov	r18, r25
    5a6a:	28 2b       	or	r18, r24
    5a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a70:	fc 01       	movw	r30, r24
    5a72:	20 83       	st	Z, r18
    5a74:	1a c0       	rjmp	.+52     	; 0x5aaa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5a76:	8a 81       	ldd	r24, Y+2	; 0x02
    5a78:	9b 81       	ldd	r25, Y+3	; 0x03
    5a7a:	fc 01       	movw	r30, r24
    5a7c:	80 81       	ld	r24, Z
    5a7e:	98 2f       	mov	r25, r24
    5a80:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a82:	80 95       	com	r24
    5a84:	89 23       	and	r24, r25
    5a86:	28 2f       	mov	r18, r24
    5a88:	8a 81       	ldd	r24, Y+2	; 0x02
    5a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    5a8c:	fc 01       	movw	r30, r24
    5a8e:	20 83       	st	Z, r18
    5a90:	0c c0       	rjmp	.+24     	; 0x5aaa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5a92:	8a 81       	ldd	r24, Y+2	; 0x02
    5a94:	9b 81       	ldd	r25, Y+3	; 0x03
    5a96:	fc 01       	movw	r30, r24
    5a98:	90 81       	ld	r25, Z
    5a9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a9c:	29 2f       	mov	r18, r25
    5a9e:	28 27       	eor	r18, r24
    5aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    5aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    5aa4:	fc 01       	movw	r30, r24
    5aa6:	20 83       	st	Z, r18
    5aa8:	00 00       	nop
    5aaa:	00 00       	nop
    5aac:	68 96       	adiw	r28, 0x18	; 24
    5aae:	0f b6       	in	r0, 0x3f	; 63
    5ab0:	f8 94       	cli
    5ab2:	de bf       	out	0x3e, r29	; 62
    5ab4:	0f be       	out	0x3f, r0	; 63
    5ab6:	cd bf       	out	0x3d, r28	; 61
    5ab8:	df 91       	pop	r29
    5aba:	cf 91       	pop	r28
    5abc:	1f 91       	pop	r17
    5abe:	0f 91       	pop	r16
    5ac0:	08 95       	ret

00005ac2 <_ZN16Adafruit_SSD13067displayEv>:
    5ac2:	cf 93       	push	r28
    5ac4:	df 93       	push	r29
    5ac6:	cd b7       	in	r28, 0x3d	; 61
    5ac8:	de b7       	in	r29, 0x3e	; 62
    5aca:	2c 97       	sbiw	r28, 0x0c	; 12
    5acc:	0f b6       	in	r0, 0x3f	; 63
    5ace:	f8 94       	cli
    5ad0:	de bf       	out	0x3e, r29	; 62
    5ad2:	0f be       	out	0x3f, r0	; 63
    5ad4:	cd bf       	out	0x3d, r28	; 61
    5ad6:	9c 87       	std	Y+12, r25	; 0x0c
    5ad8:	8b 87       	std	Y+11, r24	; 0x0b
    5ada:	8b 85       	ldd	r24, Y+11	; 0x0b
    5adc:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ade:	fc 01       	movw	r30, r24
    5ae0:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ae2:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ae4:	89 2b       	or	r24, r25
    5ae6:	91 f0       	breq	.+36     	; 0x5b0c <_ZN16Adafruit_SSD13067displayEv+0x4a>
    5ae8:	8b 85       	ldd	r24, Y+11	; 0x0b
    5aea:	9c 85       	ldd	r25, Y+12	; 0x0c
    5aec:	fc 01       	movw	r30, r24
    5aee:	85 a9       	ldd	r24, Z+53	; 0x35
    5af0:	96 a9       	ldd	r25, Z+54	; 0x36
    5af2:	a7 a9       	ldd	r26, Z+55	; 0x37
    5af4:	b0 ad       	ldd	r27, Z+56	; 0x38
    5af6:	2b 85       	ldd	r18, Y+11	; 0x0b
    5af8:	3c 85       	ldd	r19, Y+12	; 0x0c
    5afa:	f9 01       	movw	r30, r18
    5afc:	25 8d       	ldd	r18, Z+29	; 0x1d
    5afe:	36 8d       	ldd	r19, Z+30	; 0x1e
    5b00:	ac 01       	movw	r20, r24
    5b02:	bd 01       	movw	r22, r26
    5b04:	c9 01       	movw	r24, r18
    5b06:	0e 94 84 55 	call	0xab08	; 0xab08 <_ZN7TwoWire8setClockEm>
    5b0a:	23 c0       	rjmp	.+70     	; 0x5b52 <_ZN16Adafruit_SSD13067displayEv+0x90>
    5b0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b10:	fc 01       	movw	r30, r24
    5b12:	83 8d       	ldd	r24, Z+27	; 0x1b
    5b14:	94 8d       	ldd	r25, Z+28	; 0x1c
    5b16:	89 2b       	or	r24, r25
    5b18:	39 f0       	breq	.+14     	; 0x5b28 <_ZN16Adafruit_SSD13067displayEv+0x66>
    5b1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b1e:	fc 01       	movw	r30, r24
    5b20:	86 ad       	ldd	r24, Z+62	; 0x3e
    5b22:	97 ad       	ldd	r25, Z+63	; 0x3f
    5b24:	0e 94 d6 12 	call	0x25ac	; 0x25ac <_ZN8SPIClass16beginTransactionE11SPISettings>
    5b28:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b2c:	fc 01       	movw	r30, r24
    5b2e:	87 a5       	ldd	r24, Z+47	; 0x2f
    5b30:	90 a9       	ldd	r25, Z+48	; 0x30
    5b32:	2b 85       	ldd	r18, Y+11	; 0x0b
    5b34:	3c 85       	ldd	r19, Y+12	; 0x0c
    5b36:	f9 01       	movw	r30, r18
    5b38:	27 a5       	ldd	r18, Z+47	; 0x2f
    5b3a:	30 a9       	ldd	r19, Z+48	; 0x30
    5b3c:	f9 01       	movw	r30, r18
    5b3e:	20 81       	ld	r18, Z
    5b40:	42 2f       	mov	r20, r18
    5b42:	2b 85       	ldd	r18, Y+11	; 0x0b
    5b44:	3c 85       	ldd	r19, Y+12	; 0x0c
    5b46:	f9 01       	movw	r30, r18
    5b48:	24 a9       	ldd	r18, Z+52	; 0x34
    5b4a:	20 95       	com	r18
    5b4c:	24 23       	and	r18, r20
    5b4e:	fc 01       	movw	r30, r24
    5b50:	20 83       	st	Z, r18
    5b52:	25 e0       	ldi	r18, 0x05	; 5
    5b54:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b56:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b58:	42 2f       	mov	r20, r18
    5b5a:	6f e5       	ldi	r22, 0x5F	; 95
    5b5c:	7b e0       	ldi	r23, 0x0B	; 11
    5b5e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    5b62:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b64:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b66:	fc 01       	movw	r30, r24
    5b68:	84 81       	ldd	r24, Z+4	; 0x04
    5b6a:	95 81       	ldd	r25, Z+5	; 0x05
    5b6c:	2f ef       	ldi	r18, 0xFF	; 255
    5b6e:	28 0f       	add	r18, r24
    5b70:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b72:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b74:	62 2f       	mov	r22, r18
    5b76:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5b7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b7e:	fc 01       	movw	r30, r24
    5b80:	24 81       	ldd	r18, Z+4	; 0x04
    5b82:	35 81       	ldd	r19, Z+5	; 0x05
    5b84:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b86:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b88:	fc 01       	movw	r30, r24
    5b8a:	86 81       	ldd	r24, Z+6	; 0x06
    5b8c:	97 81       	ldd	r25, Z+7	; 0x07
    5b8e:	07 96       	adiw	r24, 0x07	; 7
    5b90:	99 23       	and	r25, r25
    5b92:	0c f4       	brge	.+2      	; 0x5b96 <_ZN16Adafruit_SSD13067displayEv+0xd4>
    5b94:	07 96       	adiw	r24, 0x07	; 7
    5b96:	95 95       	asr	r25
    5b98:	87 95       	ror	r24
    5b9a:	95 95       	asr	r25
    5b9c:	87 95       	ror	r24
    5b9e:	95 95       	asr	r25
    5ba0:	87 95       	ror	r24
    5ba2:	ac 01       	movw	r20, r24
    5ba4:	24 9f       	mul	r18, r20
    5ba6:	c0 01       	movw	r24, r0
    5ba8:	25 9f       	mul	r18, r21
    5baa:	90 0d       	add	r25, r0
    5bac:	34 9f       	mul	r19, r20
    5bae:	90 0d       	add	r25, r0
    5bb0:	11 24       	eor	r1, r1
    5bb2:	9a 83       	std	Y+2, r25	; 0x02
    5bb4:	89 83       	std	Y+1, r24	; 0x01
    5bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bba:	fc 01       	movw	r30, r24
    5bbc:	87 8d       	ldd	r24, Z+31	; 0x1f
    5bbe:	90 a1       	ldd	r25, Z+32	; 0x20
    5bc0:	9c 83       	std	Y+4, r25	; 0x04
    5bc2:	8b 83       	std	Y+3, r24	; 0x03
    5bc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bc8:	fc 01       	movw	r30, r24
    5bca:	85 8d       	ldd	r24, Z+29	; 0x1d
    5bcc:	96 8d       	ldd	r25, Z+30	; 0x1e
    5bce:	89 2b       	or	r24, r25
    5bd0:	09 f4       	brne	.+2      	; 0x5bd4 <_ZN16Adafruit_SSD13067displayEv+0x112>
    5bd2:	8f c0       	rjmp	.+286    	; 0x5cf2 <_ZN16Adafruit_SSD13067displayEv+0x230>
    5bd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bd8:	fc 01       	movw	r30, r24
    5bda:	81 a1       	ldd	r24, Z+33	; 0x21
    5bdc:	28 2f       	mov	r18, r24
    5bde:	88 0f       	add	r24, r24
    5be0:	33 0b       	sbc	r19, r19
    5be2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5be4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5be6:	fc 01       	movw	r30, r24
    5be8:	85 8d       	ldd	r24, Z+29	; 0x1d
    5bea:	96 8d       	ldd	r25, Z+30	; 0x1e
    5bec:	b9 01       	movw	r22, r18
    5bee:	0e 94 71 56 	call	0xace2	; 0xace2 <_ZN7TwoWire17beginTransmissionEi>
    5bf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bf4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bf6:	fc 01       	movw	r30, r24
    5bf8:	85 8d       	ldd	r24, Z+29	; 0x1d
    5bfa:	96 8d       	ldd	r25, Z+30	; 0x1e
    5bfc:	fc 01       	movw	r30, r24
    5bfe:	80 81       	ld	r24, Z
    5c00:	91 81       	ldd	r25, Z+1	; 0x01
    5c02:	fc 01       	movw	r30, r24
    5c04:	20 81       	ld	r18, Z
    5c06:	31 81       	ldd	r19, Z+1	; 0x01
    5c08:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c0c:	fc 01       	movw	r30, r24
    5c0e:	85 8d       	ldd	r24, Z+29	; 0x1d
    5c10:	96 8d       	ldd	r25, Z+30	; 0x1e
    5c12:	60 e4       	ldi	r22, 0x40	; 64
    5c14:	f9 01       	movw	r30, r18
    5c16:	19 95       	eicall
    5c18:	81 e0       	ldi	r24, 0x01	; 1
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	9e 83       	std	Y+6, r25	; 0x06
    5c1e:	8d 83       	std	Y+5, r24	; 0x05
    5c20:	89 81       	ldd	r24, Y+1	; 0x01
    5c22:	9a 81       	ldd	r25, Y+2	; 0x02
    5c24:	9c 01       	movw	r18, r24
    5c26:	21 50       	subi	r18, 0x01	; 1
    5c28:	31 09       	sbc	r19, r1
    5c2a:	3a 83       	std	Y+2, r19	; 0x02
    5c2c:	29 83       	std	Y+1, r18	; 0x01
    5c2e:	21 e0       	ldi	r18, 0x01	; 1
    5c30:	89 2b       	or	r24, r25
    5c32:	09 f4       	brne	.+2      	; 0x5c36 <_ZN16Adafruit_SSD13067displayEv+0x174>
    5c34:	20 e0       	ldi	r18, 0x00	; 0
    5c36:	22 23       	and	r18, r18
    5c38:	09 f4       	brne	.+2      	; 0x5c3c <_ZN16Adafruit_SSD13067displayEv+0x17a>
    5c3a:	53 c0       	rjmp	.+166    	; 0x5ce2 <_ZN16Adafruit_SSD13067displayEv+0x220>
    5c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    5c40:	80 97       	sbiw	r24, 0x20	; 32
    5c42:	68 f1       	brcs	.+90     	; 0x5c9e <_ZN16Adafruit_SSD13067displayEv+0x1dc>
    5c44:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c46:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c48:	fc 01       	movw	r30, r24
    5c4a:	85 8d       	ldd	r24, Z+29	; 0x1d
    5c4c:	96 8d       	ldd	r25, Z+30	; 0x1e
    5c4e:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>
    5c52:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c54:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c56:	fc 01       	movw	r30, r24
    5c58:	81 a1       	ldd	r24, Z+33	; 0x21
    5c5a:	28 2f       	mov	r18, r24
    5c5c:	88 0f       	add	r24, r24
    5c5e:	33 0b       	sbc	r19, r19
    5c60:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c62:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c64:	fc 01       	movw	r30, r24
    5c66:	85 8d       	ldd	r24, Z+29	; 0x1d
    5c68:	96 8d       	ldd	r25, Z+30	; 0x1e
    5c6a:	b9 01       	movw	r22, r18
    5c6c:	0e 94 71 56 	call	0xace2	; 0xace2 <_ZN7TwoWire17beginTransmissionEi>
    5c70:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c72:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c74:	fc 01       	movw	r30, r24
    5c76:	85 8d       	ldd	r24, Z+29	; 0x1d
    5c78:	96 8d       	ldd	r25, Z+30	; 0x1e
    5c7a:	fc 01       	movw	r30, r24
    5c7c:	80 81       	ld	r24, Z
    5c7e:	91 81       	ldd	r25, Z+1	; 0x01
    5c80:	fc 01       	movw	r30, r24
    5c82:	20 81       	ld	r18, Z
    5c84:	31 81       	ldd	r19, Z+1	; 0x01
    5c86:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c88:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	85 8d       	ldd	r24, Z+29	; 0x1d
    5c8e:	96 8d       	ldd	r25, Z+30	; 0x1e
    5c90:	60 e4       	ldi	r22, 0x40	; 64
    5c92:	f9 01       	movw	r30, r18
    5c94:	19 95       	eicall
    5c96:	81 e0       	ldi	r24, 0x01	; 1
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	9e 83       	std	Y+6, r25	; 0x06
    5c9c:	8d 83       	std	Y+5, r24	; 0x05
    5c9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ca0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ca2:	fc 01       	movw	r30, r24
    5ca4:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ca6:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ca8:	fc 01       	movw	r30, r24
    5caa:	80 81       	ld	r24, Z
    5cac:	91 81       	ldd	r25, Z+1	; 0x01
    5cae:	fc 01       	movw	r30, r24
    5cb0:	20 81       	ld	r18, Z
    5cb2:	31 81       	ldd	r19, Z+1	; 0x01
    5cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    5cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    5cb8:	ac 01       	movw	r20, r24
    5cba:	4f 5f       	subi	r20, 0xFF	; 255
    5cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cbe:	5c 83       	std	Y+4, r21	; 0x04
    5cc0:	4b 83       	std	Y+3, r20	; 0x03
    5cc2:	fc 01       	movw	r30, r24
    5cc4:	40 81       	ld	r20, Z
    5cc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cc8:	9c 85       	ldd	r25, Y+12	; 0x0c
    5cca:	fc 01       	movw	r30, r24
    5ccc:	85 8d       	ldd	r24, Z+29	; 0x1d
    5cce:	96 8d       	ldd	r25, Z+30	; 0x1e
    5cd0:	64 2f       	mov	r22, r20
    5cd2:	f9 01       	movw	r30, r18
    5cd4:	19 95       	eicall
    5cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    5cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    5cda:	01 96       	adiw	r24, 0x01	; 1
    5cdc:	9e 83       	std	Y+6, r25	; 0x06
    5cde:	8d 83       	std	Y+5, r24	; 0x05
    5ce0:	9f cf       	rjmp	.-194    	; 0x5c20 <_ZN16Adafruit_SSD13067displayEv+0x15e>
    5ce2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ce4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	85 8d       	ldd	r24, Z+29	; 0x1d
    5cea:	96 8d       	ldd	r25, Z+30	; 0x1e
    5cec:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>
    5cf0:	9c c0       	rjmp	.+312    	; 0x5e2a <_ZN16Adafruit_SSD13067displayEv+0x368>
    5cf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cf4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5cf6:	fc 01       	movw	r30, r24
    5cf8:	85 a5       	ldd	r24, Z+45	; 0x2d
    5cfa:	96 a5       	ldd	r25, Z+46	; 0x2e
    5cfc:	2b 85       	ldd	r18, Y+11	; 0x0b
    5cfe:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d00:	f9 01       	movw	r30, r18
    5d02:	25 a5       	ldd	r18, Z+45	; 0x2d
    5d04:	36 a5       	ldd	r19, Z+46	; 0x2e
    5d06:	f9 01       	movw	r30, r18
    5d08:	40 81       	ld	r20, Z
    5d0a:	2b 85       	ldd	r18, Y+11	; 0x0b
    5d0c:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d0e:	f9 01       	movw	r30, r18
    5d10:	23 a9       	ldd	r18, Z+51	; 0x33
    5d12:	24 2b       	or	r18, r20
    5d14:	fc 01       	movw	r30, r24
    5d16:	20 83       	st	Z, r18
    5d18:	89 81       	ldd	r24, Y+1	; 0x01
    5d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    5d1c:	9c 01       	movw	r18, r24
    5d1e:	21 50       	subi	r18, 0x01	; 1
    5d20:	31 09       	sbc	r19, r1
    5d22:	3a 83       	std	Y+2, r19	; 0x02
    5d24:	29 83       	std	Y+1, r18	; 0x01
    5d26:	21 e0       	ldi	r18, 0x01	; 1
    5d28:	89 2b       	or	r24, r25
    5d2a:	09 f4       	brne	.+2      	; 0x5d2e <_ZN16Adafruit_SSD13067displayEv+0x26c>
    5d2c:	20 e0       	ldi	r18, 0x00	; 0
    5d2e:	22 23       	and	r18, r18
    5d30:	09 f4       	brne	.+2      	; 0x5d34 <_ZN16Adafruit_SSD13067displayEv+0x272>
    5d32:	7b c0       	rjmp	.+246    	; 0x5e2a <_ZN16Adafruit_SSD13067displayEv+0x368>
    5d34:	8b 81       	ldd	r24, Y+3	; 0x03
    5d36:	9c 81       	ldd	r25, Y+4	; 0x04
    5d38:	9c 01       	movw	r18, r24
    5d3a:	2f 5f       	subi	r18, 0xFF	; 255
    5d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d3e:	3c 83       	std	Y+4, r19	; 0x04
    5d40:	2b 83       	std	Y+3, r18	; 0x03
    5d42:	fc 01       	movw	r30, r24
    5d44:	20 81       	ld	r18, Z
    5d46:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d48:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d4a:	98 87       	std	Y+8, r25	; 0x08
    5d4c:	8f 83       	std	Y+7, r24	; 0x07
    5d4e:	29 87       	std	Y+9, r18	; 0x09
    5d50:	8f 81       	ldd	r24, Y+7	; 0x07
    5d52:	98 85       	ldd	r25, Y+8	; 0x08
    5d54:	fc 01       	movw	r30, r24
    5d56:	83 8d       	ldd	r24, Z+27	; 0x1b
    5d58:	94 8d       	ldd	r25, Z+28	; 0x1c
    5d5a:	89 2b       	or	r24, r25
    5d5c:	21 f0       	breq	.+8      	; 0x5d66 <_ZN16Adafruit_SSD13067displayEv+0x2a4>
    5d5e:	89 85       	ldd	r24, Y+9	; 0x09
    5d60:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    5d64:	d9 cf       	rjmp	.-78     	; 0x5d18 <_ZN16Adafruit_SSD13067displayEv+0x256>
    5d66:	80 e8       	ldi	r24, 0x80	; 128
    5d68:	8a 87       	std	Y+10, r24	; 0x0a
    5d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d6c:	88 23       	and	r24, r24
    5d6e:	a1 f2       	breq	.-88     	; 0x5d18 <_ZN16Adafruit_SSD13067displayEv+0x256>
    5d70:	99 85       	ldd	r25, Y+9	; 0x09
    5d72:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d74:	89 23       	and	r24, r25
    5d76:	88 23       	and	r24, r24
    5d78:	a1 f0       	breq	.+40     	; 0x5da2 <_ZN16Adafruit_SSD13067displayEv+0x2e0>
    5d7a:	8f 81       	ldd	r24, Y+7	; 0x07
    5d7c:	98 85       	ldd	r25, Y+8	; 0x08
    5d7e:	fc 01       	movw	r30, r24
    5d80:	81 a5       	ldd	r24, Z+41	; 0x29
    5d82:	92 a5       	ldd	r25, Z+42	; 0x2a
    5d84:	2f 81       	ldd	r18, Y+7	; 0x07
    5d86:	38 85       	ldd	r19, Y+8	; 0x08
    5d88:	f9 01       	movw	r30, r18
    5d8a:	21 a5       	ldd	r18, Z+41	; 0x29
    5d8c:	32 a5       	ldd	r19, Z+42	; 0x2a
    5d8e:	f9 01       	movw	r30, r18
    5d90:	40 81       	ld	r20, Z
    5d92:	2f 81       	ldd	r18, Y+7	; 0x07
    5d94:	38 85       	ldd	r19, Y+8	; 0x08
    5d96:	f9 01       	movw	r30, r18
    5d98:	21 a9       	ldd	r18, Z+49	; 0x31
    5d9a:	24 2b       	or	r18, r20
    5d9c:	fc 01       	movw	r30, r24
    5d9e:	20 83       	st	Z, r18
    5da0:	15 c0       	rjmp	.+42     	; 0x5dcc <_ZN16Adafruit_SSD13067displayEv+0x30a>
    5da2:	8f 81       	ldd	r24, Y+7	; 0x07
    5da4:	98 85       	ldd	r25, Y+8	; 0x08
    5da6:	fc 01       	movw	r30, r24
    5da8:	81 a5       	ldd	r24, Z+41	; 0x29
    5daa:	92 a5       	ldd	r25, Z+42	; 0x2a
    5dac:	2f 81       	ldd	r18, Y+7	; 0x07
    5dae:	38 85       	ldd	r19, Y+8	; 0x08
    5db0:	f9 01       	movw	r30, r18
    5db2:	21 a5       	ldd	r18, Z+41	; 0x29
    5db4:	32 a5       	ldd	r19, Z+42	; 0x2a
    5db6:	f9 01       	movw	r30, r18
    5db8:	20 81       	ld	r18, Z
    5dba:	42 2f       	mov	r20, r18
    5dbc:	2f 81       	ldd	r18, Y+7	; 0x07
    5dbe:	38 85       	ldd	r19, Y+8	; 0x08
    5dc0:	f9 01       	movw	r30, r18
    5dc2:	21 a9       	ldd	r18, Z+49	; 0x31
    5dc4:	20 95       	com	r18
    5dc6:	24 23       	and	r18, r20
    5dc8:	fc 01       	movw	r30, r24
    5dca:	20 83       	st	Z, r18
    5dcc:	8f 81       	ldd	r24, Y+7	; 0x07
    5dce:	98 85       	ldd	r25, Y+8	; 0x08
    5dd0:	fc 01       	movw	r30, r24
    5dd2:	83 a5       	ldd	r24, Z+43	; 0x2b
    5dd4:	94 a5       	ldd	r25, Z+44	; 0x2c
    5dd6:	2f 81       	ldd	r18, Y+7	; 0x07
    5dd8:	38 85       	ldd	r19, Y+8	; 0x08
    5dda:	f9 01       	movw	r30, r18
    5ddc:	23 a5       	ldd	r18, Z+43	; 0x2b
    5dde:	34 a5       	ldd	r19, Z+44	; 0x2c
    5de0:	f9 01       	movw	r30, r18
    5de2:	40 81       	ld	r20, Z
    5de4:	2f 81       	ldd	r18, Y+7	; 0x07
    5de6:	38 85       	ldd	r19, Y+8	; 0x08
    5de8:	f9 01       	movw	r30, r18
    5dea:	22 a9       	ldd	r18, Z+50	; 0x32
    5dec:	24 2b       	or	r18, r20
    5dee:	fc 01       	movw	r30, r24
    5df0:	20 83       	st	Z, r18
    5df2:	8f 81       	ldd	r24, Y+7	; 0x07
    5df4:	98 85       	ldd	r25, Y+8	; 0x08
    5df6:	fc 01       	movw	r30, r24
    5df8:	83 a5       	ldd	r24, Z+43	; 0x2b
    5dfa:	94 a5       	ldd	r25, Z+44	; 0x2c
    5dfc:	2f 81       	ldd	r18, Y+7	; 0x07
    5dfe:	38 85       	ldd	r19, Y+8	; 0x08
    5e00:	f9 01       	movw	r30, r18
    5e02:	23 a5       	ldd	r18, Z+43	; 0x2b
    5e04:	34 a5       	ldd	r19, Z+44	; 0x2c
    5e06:	f9 01       	movw	r30, r18
    5e08:	20 81       	ld	r18, Z
    5e0a:	42 2f       	mov	r20, r18
    5e0c:	2f 81       	ldd	r18, Y+7	; 0x07
    5e0e:	38 85       	ldd	r19, Y+8	; 0x08
    5e10:	f9 01       	movw	r30, r18
    5e12:	22 a9       	ldd	r18, Z+50	; 0x32
    5e14:	20 95       	com	r18
    5e16:	24 23       	and	r18, r20
    5e18:	fc 01       	movw	r30, r24
    5e1a:	20 83       	st	Z, r18
    5e1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e1e:	88 2f       	mov	r24, r24
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	95 95       	asr	r25
    5e24:	87 95       	ror	r24
    5e26:	8a 87       	std	Y+10, r24	; 0x0a
    5e28:	a0 cf       	rjmp	.-192    	; 0x5d6a <_ZN16Adafruit_SSD13067displayEv+0x2a8>
    5e2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e2e:	fc 01       	movw	r30, r24
    5e30:	85 8d       	ldd	r24, Z+29	; 0x1d
    5e32:	96 8d       	ldd	r25, Z+30	; 0x1e
    5e34:	89 2b       	or	r24, r25
    5e36:	91 f0       	breq	.+36     	; 0x5e5c <_ZN16Adafruit_SSD13067displayEv+0x39a>
    5e38:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e3c:	fc 01       	movw	r30, r24
    5e3e:	81 ad       	ldd	r24, Z+57	; 0x39
    5e40:	92 ad       	ldd	r25, Z+58	; 0x3a
    5e42:	a3 ad       	ldd	r26, Z+59	; 0x3b
    5e44:	b4 ad       	ldd	r27, Z+60	; 0x3c
    5e46:	2b 85       	ldd	r18, Y+11	; 0x0b
    5e48:	3c 85       	ldd	r19, Y+12	; 0x0c
    5e4a:	f9 01       	movw	r30, r18
    5e4c:	25 8d       	ldd	r18, Z+29	; 0x1d
    5e4e:	36 8d       	ldd	r19, Z+30	; 0x1e
    5e50:	ac 01       	movw	r20, r24
    5e52:	bd 01       	movw	r22, r26
    5e54:	c9 01       	movw	r24, r18
    5e56:	0e 94 84 55 	call	0xab08	; 0xab08 <_ZN7TwoWire8setClockEm>
    5e5a:	1c c0       	rjmp	.+56     	; 0x5e94 <_ZN16Adafruit_SSD13067displayEv+0x3d2>
    5e5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e60:	fc 01       	movw	r30, r24
    5e62:	87 a5       	ldd	r24, Z+47	; 0x2f
    5e64:	90 a9       	ldd	r25, Z+48	; 0x30
    5e66:	2b 85       	ldd	r18, Y+11	; 0x0b
    5e68:	3c 85       	ldd	r19, Y+12	; 0x0c
    5e6a:	f9 01       	movw	r30, r18
    5e6c:	27 a5       	ldd	r18, Z+47	; 0x2f
    5e6e:	30 a9       	ldd	r19, Z+48	; 0x30
    5e70:	f9 01       	movw	r30, r18
    5e72:	40 81       	ld	r20, Z
    5e74:	2b 85       	ldd	r18, Y+11	; 0x0b
    5e76:	3c 85       	ldd	r19, Y+12	; 0x0c
    5e78:	f9 01       	movw	r30, r18
    5e7a:	24 a9       	ldd	r18, Z+52	; 0x34
    5e7c:	24 2b       	or	r18, r20
    5e7e:	fc 01       	movw	r30, r24
    5e80:	20 83       	st	Z, r18
    5e82:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e84:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e86:	fc 01       	movw	r30, r24
    5e88:	83 8d       	ldd	r24, Z+27	; 0x1b
    5e8a:	94 8d       	ldd	r25, Z+28	; 0x1c
    5e8c:	89 2b       	or	r24, r25
    5e8e:	11 f0       	breq	.+4      	; 0x5e94 <_ZN16Adafruit_SSD13067displayEv+0x3d2>
    5e90:	0e 94 18 13 	call	0x2630	; 0x2630 <_ZN8SPIClass14endTransactionEv>
    5e94:	00 00       	nop
    5e96:	2c 96       	adiw	r28, 0x0c	; 12
    5e98:	0f b6       	in	r0, 0x3f	; 63
    5e9a:	f8 94       	cli
    5e9c:	de bf       	out	0x3e, r29	; 62
    5e9e:	0f be       	out	0x3f, r0	; 63
    5ea0:	cd bf       	out	0x3d, r28	; 61
    5ea2:	df 91       	pop	r29
    5ea4:	cf 91       	pop	r28
    5ea6:	08 95       	ret

00005ea8 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    5ea8:	cf 93       	push	r28
    5eaa:	df 93       	push	r29
    5eac:	00 d0       	rcall	.+0      	; 0x5eae <_ZN16Adafruit_SSD130613invertDisplayEb+0x6>
    5eae:	cd b7       	in	r28, 0x3d	; 61
    5eb0:	de b7       	in	r29, 0x3e	; 62
    5eb2:	9a 83       	std	Y+2, r25	; 0x02
    5eb4:	89 83       	std	Y+1, r24	; 0x01
    5eb6:	6b 83       	std	Y+3, r22	; 0x03
  TRANSACTION_START
    5eb8:	89 81       	ldd	r24, Y+1	; 0x01
    5eba:	9a 81       	ldd	r25, Y+2	; 0x02
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ec0:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ec2:	89 2b       	or	r24, r25
    5ec4:	91 f0       	breq	.+36     	; 0x5eea <_ZN16Adafruit_SSD130613invertDisplayEb+0x42>
    5ec6:	89 81       	ldd	r24, Y+1	; 0x01
    5ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    5eca:	fc 01       	movw	r30, r24
    5ecc:	85 a9       	ldd	r24, Z+53	; 0x35
    5ece:	96 a9       	ldd	r25, Z+54	; 0x36
    5ed0:	a7 a9       	ldd	r26, Z+55	; 0x37
    5ed2:	b0 ad       	ldd	r27, Z+56	; 0x38
    5ed4:	29 81       	ldd	r18, Y+1	; 0x01
    5ed6:	3a 81       	ldd	r19, Y+2	; 0x02
    5ed8:	f9 01       	movw	r30, r18
    5eda:	25 8d       	ldd	r18, Z+29	; 0x1d
    5edc:	36 8d       	ldd	r19, Z+30	; 0x1e
    5ede:	ac 01       	movw	r20, r24
    5ee0:	bd 01       	movw	r22, r26
    5ee2:	c9 01       	movw	r24, r18
    5ee4:	0e 94 84 55 	call	0xab08	; 0xab08 <_ZN7TwoWire8setClockEm>
    5ee8:	23 c0       	rjmp	.+70     	; 0x5f30 <_ZN16Adafruit_SSD130613invertDisplayEb+0x88>
    5eea:	89 81       	ldd	r24, Y+1	; 0x01
    5eec:	9a 81       	ldd	r25, Y+2	; 0x02
    5eee:	fc 01       	movw	r30, r24
    5ef0:	83 8d       	ldd	r24, Z+27	; 0x1b
    5ef2:	94 8d       	ldd	r25, Z+28	; 0x1c
    5ef4:	89 2b       	or	r24, r25
    5ef6:	39 f0       	breq	.+14     	; 0x5f06 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
    5ef8:	89 81       	ldd	r24, Y+1	; 0x01
    5efa:	9a 81       	ldd	r25, Y+2	; 0x02
    5efc:	fc 01       	movw	r30, r24
    5efe:	86 ad       	ldd	r24, Z+62	; 0x3e
    5f00:	97 ad       	ldd	r25, Z+63	; 0x3f
    5f02:	0e 94 d6 12 	call	0x25ac	; 0x25ac <_ZN8SPIClass16beginTransactionE11SPISettings>
    5f06:	89 81       	ldd	r24, Y+1	; 0x01
    5f08:	9a 81       	ldd	r25, Y+2	; 0x02
    5f0a:	fc 01       	movw	r30, r24
    5f0c:	87 a5       	ldd	r24, Z+47	; 0x2f
    5f0e:	90 a9       	ldd	r25, Z+48	; 0x30
    5f10:	29 81       	ldd	r18, Y+1	; 0x01
    5f12:	3a 81       	ldd	r19, Y+2	; 0x02
    5f14:	f9 01       	movw	r30, r18
    5f16:	27 a5       	ldd	r18, Z+47	; 0x2f
    5f18:	30 a9       	ldd	r19, Z+48	; 0x30
    5f1a:	f9 01       	movw	r30, r18
    5f1c:	20 81       	ld	r18, Z
    5f1e:	42 2f       	mov	r20, r18
    5f20:	29 81       	ldd	r18, Y+1	; 0x01
    5f22:	3a 81       	ldd	r19, Y+2	; 0x02
    5f24:	f9 01       	movw	r30, r18
    5f26:	24 a9       	ldd	r18, Z+52	; 0x34
    5f28:	20 95       	com	r18
    5f2a:	24 23       	and	r18, r20
    5f2c:	fc 01       	movw	r30, r24
    5f2e:	20 83       	st	Z, r18
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    5f30:	8b 81       	ldd	r24, Y+3	; 0x03
    5f32:	88 23       	and	r24, r24
    5f34:	11 f0       	breq	.+4      	; 0x5f3a <_ZN16Adafruit_SSD130613invertDisplayEb+0x92>
    5f36:	27 ea       	ldi	r18, 0xA7	; 167
    5f38:	01 c0       	rjmp	.+2      	; 0x5f3c <_ZN16Adafruit_SSD130613invertDisplayEb+0x94>
    5f3a:	26 ea       	ldi	r18, 0xA6	; 166
    5f3c:	89 81       	ldd	r24, Y+1	; 0x01
    5f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f40:	62 2f       	mov	r22, r18
    5f42:	0e 94 7d 21 	call	0x42fa	; 0x42fa <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
    5f46:	89 81       	ldd	r24, Y+1	; 0x01
    5f48:	9a 81       	ldd	r25, Y+2	; 0x02
    5f4a:	fc 01       	movw	r30, r24
    5f4c:	85 8d       	ldd	r24, Z+29	; 0x1d
    5f4e:	96 8d       	ldd	r25, Z+30	; 0x1e
    5f50:	89 2b       	or	r24, r25
    5f52:	91 f0       	breq	.+36     	; 0x5f78 <_ZN16Adafruit_SSD130613invertDisplayEb+0xd0>
    5f54:	89 81       	ldd	r24, Y+1	; 0x01
    5f56:	9a 81       	ldd	r25, Y+2	; 0x02
    5f58:	fc 01       	movw	r30, r24
    5f5a:	81 ad       	ldd	r24, Z+57	; 0x39
    5f5c:	92 ad       	ldd	r25, Z+58	; 0x3a
    5f5e:	a3 ad       	ldd	r26, Z+59	; 0x3b
    5f60:	b4 ad       	ldd	r27, Z+60	; 0x3c
    5f62:	29 81       	ldd	r18, Y+1	; 0x01
    5f64:	3a 81       	ldd	r19, Y+2	; 0x02
    5f66:	f9 01       	movw	r30, r18
    5f68:	25 8d       	ldd	r18, Z+29	; 0x1d
    5f6a:	36 8d       	ldd	r19, Z+30	; 0x1e
    5f6c:	ac 01       	movw	r20, r24
    5f6e:	bd 01       	movw	r22, r26
    5f70:	c9 01       	movw	r24, r18
    5f72:	0e 94 84 55 	call	0xab08	; 0xab08 <_ZN7TwoWire8setClockEm>
}
    5f76:	1c c0       	rjmp	.+56     	; 0x5fb0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x108>
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
    5f78:	89 81       	ldd	r24, Y+1	; 0x01
    5f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f7c:	fc 01       	movw	r30, r24
    5f7e:	87 a5       	ldd	r24, Z+47	; 0x2f
    5f80:	90 a9       	ldd	r25, Z+48	; 0x30
    5f82:	29 81       	ldd	r18, Y+1	; 0x01
    5f84:	3a 81       	ldd	r19, Y+2	; 0x02
    5f86:	f9 01       	movw	r30, r18
    5f88:	27 a5       	ldd	r18, Z+47	; 0x2f
    5f8a:	30 a9       	ldd	r19, Z+48	; 0x30
    5f8c:	f9 01       	movw	r30, r18
    5f8e:	40 81       	ld	r20, Z
    5f90:	29 81       	ldd	r18, Y+1	; 0x01
    5f92:	3a 81       	ldd	r19, Y+2	; 0x02
    5f94:	f9 01       	movw	r30, r18
    5f96:	24 a9       	ldd	r18, Z+52	; 0x34
    5f98:	24 2b       	or	r18, r20
    5f9a:	fc 01       	movw	r30, r24
    5f9c:	20 83       	st	Z, r18
    5f9e:	89 81       	ldd	r24, Y+1	; 0x01
    5fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    5fa2:	fc 01       	movw	r30, r24
    5fa4:	83 8d       	ldd	r24, Z+27	; 0x1b
    5fa6:	94 8d       	ldd	r25, Z+28	; 0x1c
    5fa8:	89 2b       	or	r24, r25
    5faa:	11 f0       	breq	.+4      	; 0x5fb0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x108>
    5fac:	0e 94 18 13 	call	0x2630	; 0x2630 <_ZN8SPIClass14endTransactionEv>
}
    5fb0:	00 00       	nop
    5fb2:	0f 90       	pop	r0
    5fb4:	0f 90       	pop	r0
    5fb6:	0f 90       	pop	r0
    5fb8:	df 91       	pop	r29
    5fba:	cf 91       	pop	r28
    5fbc:	08 95       	ret

00005fbe <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    5fbe:	cf 93       	push	r28
    5fc0:	df 93       	push	r29
    5fc2:	1f 92       	push	r1
    5fc4:	1f 92       	push	r1
    5fc6:	cd b7       	in	r28, 0x3d	; 61
    5fc8:	de b7       	in	r29, 0x3e	; 62
    5fca:	9a 83       	std	Y+2, r25	; 0x02
    5fcc:	89 83       	std	Y+1, r24	; 0x01
    5fce:	f8 94       	cli
    5fd0:	00 00       	nop
    5fd2:	0f 90       	pop	r0
    5fd4:	0f 90       	pop	r0
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	08 95       	ret

00005fdc <_ZN13InterruptLockD1Ev>:
    5fdc:	cf 93       	push	r28
    5fde:	df 93       	push	r29
    5fe0:	1f 92       	push	r1
    5fe2:	1f 92       	push	r1
    5fe4:	cd b7       	in	r28, 0x3d	; 61
    5fe6:	de b7       	in	r29, 0x3e	; 62
    5fe8:	9a 83       	std	Y+2, r25	; 0x02
    5fea:	89 83       	std	Y+1, r24	; 0x01
    5fec:	78 94       	sei
    5fee:	00 00       	nop
    5ff0:	0f 90       	pop	r0
    5ff2:	0f 90       	pop	r0
    5ff4:	df 91       	pop	r29
    5ff6:	cf 91       	pop	r28
    5ff8:	08 95       	ret

00005ffa <_ZN3DHTC1Ehhh>:
    5ffa:	cf 93       	push	r28
    5ffc:	df 93       	push	r29
    5ffe:	cd b7       	in	r28, 0x3d	; 61
    6000:	de b7       	in	r29, 0x3e	; 62
    6002:	2b 97       	sbiw	r28, 0x0b	; 11
    6004:	0f b6       	in	r0, 0x3f	; 63
    6006:	f8 94       	cli
    6008:	de bf       	out	0x3e, r29	; 62
    600a:	0f be       	out	0x3f, r0	; 63
    600c:	cd bf       	out	0x3d, r28	; 61
    600e:	98 87       	std	Y+8, r25	; 0x08
    6010:	8f 83       	std	Y+7, r24	; 0x07
    6012:	69 87       	std	Y+9, r22	; 0x09
    6014:	4a 87       	std	Y+10, r20	; 0x0a
    6016:	2b 87       	std	Y+11, r18	; 0x0b
    6018:	8f 81       	ldd	r24, Y+7	; 0x07
    601a:	98 85       	ldd	r25, Y+8	; 0x08
    601c:	29 85       	ldd	r18, Y+9	; 0x09
    601e:	fc 01       	movw	r30, r24
    6020:	25 83       	std	Z+5, r18	; 0x05
    6022:	8f 81       	ldd	r24, Y+7	; 0x07
    6024:	98 85       	ldd	r25, Y+8	; 0x08
    6026:	2a 85       	ldd	r18, Y+10	; 0x0a
    6028:	fc 01       	movw	r30, r24
    602a:	26 83       	std	Z+6, r18	; 0x06
    602c:	89 85       	ldd	r24, Y+9	; 0x09
    602e:	88 2f       	mov	r24, r24
    6030:	90 e0       	ldi	r25, 0x00	; 0
    6032:	8a 54       	subi	r24, 0x4A	; 74
    6034:	94 4f       	sbci	r25, 0xF4	; 244
    6036:	9a 83       	std	Y+2, r25	; 0x02
    6038:	89 83       	std	Y+1, r24	; 0x01
    603a:	89 81       	ldd	r24, Y+1	; 0x01
    603c:	9a 81       	ldd	r25, Y+2	; 0x02
    603e:	fc 01       	movw	r30, r24
    6040:	84 91       	lpm	r24, Z
    6042:	8b 83       	std	Y+3, r24	; 0x03
    6044:	8f 81       	ldd	r24, Y+7	; 0x07
    6046:	98 85       	ldd	r25, Y+8	; 0x08
    6048:	2b 81       	ldd	r18, Y+3	; 0x03
    604a:	fc 01       	movw	r30, r24
    604c:	27 83       	std	Z+7, r18	; 0x07
    604e:	89 85       	ldd	r24, Y+9	; 0x09
    6050:	88 2f       	mov	r24, r24
    6052:	90 e0       	ldi	r25, 0x00	; 0
    6054:	84 50       	subi	r24, 0x04	; 4
    6056:	94 4f       	sbci	r25, 0xF4	; 244
    6058:	9d 83       	std	Y+5, r25	; 0x05
    605a:	8c 83       	std	Y+4, r24	; 0x04
    605c:	8c 81       	ldd	r24, Y+4	; 0x04
    605e:	9d 81       	ldd	r25, Y+5	; 0x05
    6060:	fc 01       	movw	r30, r24
    6062:	84 91       	lpm	r24, Z
    6064:	8e 83       	std	Y+6, r24	; 0x06
    6066:	8f 81       	ldd	r24, Y+7	; 0x07
    6068:	98 85       	ldd	r25, Y+8	; 0x08
    606a:	2e 81       	ldd	r18, Y+6	; 0x06
    606c:	fc 01       	movw	r30, r24
    606e:	20 87       	std	Z+8, r18	; 0x08
    6070:	2f 81       	ldd	r18, Y+7	; 0x07
    6072:	38 85       	ldd	r19, Y+8	; 0x08
    6074:	80 e8       	ldi	r24, 0x80	; 128
    6076:	9e e3       	ldi	r25, 0x3E	; 62
    6078:	a0 e0       	ldi	r26, 0x00	; 0
    607a:	b0 e0       	ldi	r27, 0x00	; 0
    607c:	f9 01       	movw	r30, r18
    607e:	85 87       	std	Z+13, r24	; 0x0d
    6080:	96 87       	std	Z+14, r25	; 0x0e
    6082:	a7 87       	std	Z+15, r26	; 0x0f
    6084:	b0 8b       	std	Z+16, r27	; 0x10
    6086:	00 00       	nop
    6088:	2b 96       	adiw	r28, 0x0b	; 11
    608a:	0f b6       	in	r0, 0x3f	; 63
    608c:	f8 94       	cli
    608e:	de bf       	out	0x3e, r29	; 62
    6090:	0f be       	out	0x3f, r0	; 63
    6092:	cd bf       	out	0x3d, r28	; 61
    6094:	df 91       	pop	r29
    6096:	cf 91       	pop	r28
    6098:	08 95       	ret

0000609a <_ZN3DHT5beginEh>:
    609a:	cf 93       	push	r28
    609c:	df 93       	push	r29
    609e:	00 d0       	rcall	.+0      	; 0x60a0 <_ZN3DHT5beginEh+0x6>
    60a0:	cd b7       	in	r28, 0x3d	; 61
    60a2:	de b7       	in	r29, 0x3e	; 62
    60a4:	9a 83       	std	Y+2, r25	; 0x02
    60a6:	89 83       	std	Y+1, r24	; 0x01
    60a8:	6b 83       	std	Y+3, r22	; 0x03
    60aa:	89 81       	ldd	r24, Y+1	; 0x01
    60ac:	9a 81       	ldd	r25, Y+2	; 0x02
    60ae:	fc 01       	movw	r30, r24
    60b0:	85 81       	ldd	r24, Z+5	; 0x05
    60b2:	62 e0       	ldi	r22, 0x02	; 2
    60b4:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    60b8:	0e 94 ff 5e 	call	0xbdfe	; 0xbdfe <millis>
    60bc:	dc 01       	movw	r26, r24
    60be:	cb 01       	movw	r24, r22
    60c0:	80 5d       	subi	r24, 0xD0	; 208
    60c2:	97 40       	sbci	r25, 0x07	; 7
    60c4:	a1 09       	sbc	r26, r1
    60c6:	b1 09       	sbc	r27, r1
    60c8:	29 81       	ldd	r18, Y+1	; 0x01
    60ca:	3a 81       	ldd	r19, Y+2	; 0x02
    60cc:	f9 01       	movw	r30, r18
    60ce:	81 87       	std	Z+9, r24	; 0x09
    60d0:	92 87       	std	Z+10, r25	; 0x0a
    60d2:	a3 87       	std	Z+11, r26	; 0x0b
    60d4:	b4 87       	std	Z+12, r27	; 0x0c
    60d6:	89 81       	ldd	r24, Y+1	; 0x01
    60d8:	9a 81       	ldd	r25, Y+2	; 0x02
    60da:	2b 81       	ldd	r18, Y+3	; 0x03
    60dc:	fc 01       	movw	r30, r24
    60de:	22 8b       	std	Z+18, r18	; 0x12
    60e0:	00 00       	nop
    60e2:	0f 90       	pop	r0
    60e4:	0f 90       	pop	r0
    60e6:	0f 90       	pop	r0
    60e8:	df 91       	pop	r29
    60ea:	cf 91       	pop	r28
    60ec:	08 95       	ret

000060ee <_ZN3DHT15readTemperatureEbb>:
    60ee:	cf 93       	push	r28
    60f0:	df 93       	push	r29
    60f2:	cd b7       	in	r28, 0x3d	; 61
    60f4:	de b7       	in	r29, 0x3e	; 62
    60f6:	28 97       	sbiw	r28, 0x08	; 8
    60f8:	0f b6       	in	r0, 0x3f	; 63
    60fa:	f8 94       	cli
    60fc:	de bf       	out	0x3e, r29	; 62
    60fe:	0f be       	out	0x3f, r0	; 63
    6100:	cd bf       	out	0x3d, r28	; 61
    6102:	9e 83       	std	Y+6, r25	; 0x06
    6104:	8d 83       	std	Y+5, r24	; 0x05
    6106:	6f 83       	std	Y+7, r22	; 0x07
    6108:	48 87       	std	Y+8, r20	; 0x08
    610a:	80 e0       	ldi	r24, 0x00	; 0
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	a0 ec       	ldi	r26, 0xC0	; 192
    6110:	bf e7       	ldi	r27, 0x7F	; 127
    6112:	89 83       	std	Y+1, r24	; 0x01
    6114:	9a 83       	std	Y+2, r25	; 0x02
    6116:	ab 83       	std	Y+3, r26	; 0x03
    6118:	bc 83       	std	Y+4, r27	; 0x04
    611a:	8d 81       	ldd	r24, Y+5	; 0x05
    611c:	9e 81       	ldd	r25, Y+6	; 0x06
    611e:	68 85       	ldd	r22, Y+8	; 0x08
    6120:	1d d2       	rcall	.+1082   	; 0x655c <_ZN3DHT4readEb>
    6122:	88 23       	and	r24, r24
    6124:	09 f4       	brne	.+2      	; 0x6128 <_ZN3DHT15readTemperatureEbb+0x3a>
    6126:	34 c1       	rjmp	.+616    	; 0x6390 <_ZN3DHT15readTemperatureEbb+0x2a2>
    6128:	8d 81       	ldd	r24, Y+5	; 0x05
    612a:	9e 81       	ldd	r25, Y+6	; 0x06
    612c:	fc 01       	movw	r30, r24
    612e:	86 81       	ldd	r24, Z+6	; 0x06
    6130:	88 2f       	mov	r24, r24
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	8c 30       	cpi	r24, 0x0C	; 12
    6136:	91 05       	cpc	r25, r1
    6138:	09 f4       	brne	.+2      	; 0x613c <_ZN3DHT15readTemperatureEbb+0x4e>
    613a:	72 c0       	rjmp	.+228    	; 0x6220 <_ZN3DHT15readTemperatureEbb+0x132>
    613c:	8d 30       	cpi	r24, 0x0D	; 13
    613e:	91 05       	cpc	r25, r1
    6140:	1c f4       	brge	.+6      	; 0x6148 <_ZN3DHT15readTemperatureEbb+0x5a>
    6142:	0b 97       	sbiw	r24, 0x0b	; 11
    6144:	31 f0       	breq	.+12     	; 0x6152 <_ZN3DHT15readTemperatureEbb+0x64>
    6146:	24 c1       	rjmp	.+584    	; 0x6390 <_ZN3DHT15readTemperatureEbb+0x2a2>
    6148:	45 97       	sbiw	r24, 0x15	; 21
    614a:	02 97       	sbiw	r24, 0x02	; 2
    614c:	08 f0       	brcs	.+2      	; 0x6150 <_ZN3DHT15readTemperatureEbb+0x62>
    614e:	20 c1       	rjmp	.+576    	; 0x6390 <_ZN3DHT15readTemperatureEbb+0x2a2>
    6150:	c7 c0       	rjmp	.+398    	; 0x62e0 <_ZN3DHT15readTemperatureEbb+0x1f2>
    6152:	8d 81       	ldd	r24, Y+5	; 0x05
    6154:	9e 81       	ldd	r25, Y+6	; 0x06
    6156:	fc 01       	movw	r30, r24
    6158:	82 81       	ldd	r24, Z+2	; 0x02
    615a:	88 2f       	mov	r24, r24
    615c:	90 e0       	ldi	r25, 0x00	; 0
    615e:	a0 e0       	ldi	r26, 0x00	; 0
    6160:	b0 e0       	ldi	r27, 0x00	; 0
    6162:	bc 01       	movw	r22, r24
    6164:	cd 01       	movw	r24, r26
    6166:	0e 94 72 59 	call	0xb2e4	; 0xb2e4 <__floatunsisf>
    616a:	dc 01       	movw	r26, r24
    616c:	cb 01       	movw	r24, r22
    616e:	89 83       	std	Y+1, r24	; 0x01
    6170:	9a 83       	std	Y+2, r25	; 0x02
    6172:	ab 83       	std	Y+3, r26	; 0x03
    6174:	bc 83       	std	Y+4, r27	; 0x04
    6176:	8d 81       	ldd	r24, Y+5	; 0x05
    6178:	9e 81       	ldd	r25, Y+6	; 0x06
    617a:	fc 01       	movw	r30, r24
    617c:	83 81       	ldd	r24, Z+3	; 0x03
    617e:	88 23       	and	r24, r24
    6180:	84 f4       	brge	.+32     	; 0x61a2 <_ZN3DHT15readTemperatureEbb+0xb4>
    6182:	29 81       	ldd	r18, Y+1	; 0x01
    6184:	3a 81       	ldd	r19, Y+2	; 0x02
    6186:	4b 81       	ldd	r20, Y+3	; 0x03
    6188:	5c 81       	ldd	r21, Y+4	; 0x04
    618a:	60 e0       	ldi	r22, 0x00	; 0
    618c:	70 e0       	ldi	r23, 0x00	; 0
    618e:	80 e8       	ldi	r24, 0x80	; 128
    6190:	9f eb       	ldi	r25, 0xBF	; 191
    6192:	0e 94 75 58 	call	0xb0ea	; 0xb0ea <__subsf3>
    6196:	dc 01       	movw	r26, r24
    6198:	cb 01       	movw	r24, r22
    619a:	89 83       	std	Y+1, r24	; 0x01
    619c:	9a 83       	std	Y+2, r25	; 0x02
    619e:	ab 83       	std	Y+3, r26	; 0x03
    61a0:	bc 83       	std	Y+4, r27	; 0x04
    61a2:	8d 81       	ldd	r24, Y+5	; 0x05
    61a4:	9e 81       	ldd	r25, Y+6	; 0x06
    61a6:	fc 01       	movw	r30, r24
    61a8:	83 81       	ldd	r24, Z+3	; 0x03
    61aa:	88 2f       	mov	r24, r24
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	8f 70       	andi	r24, 0x0F	; 15
    61b0:	99 27       	eor	r25, r25
    61b2:	09 2e       	mov	r0, r25
    61b4:	00 0c       	add	r0, r0
    61b6:	aa 0b       	sbc	r26, r26
    61b8:	bb 0b       	sbc	r27, r27
    61ba:	bc 01       	movw	r22, r24
    61bc:	cd 01       	movw	r24, r26
    61be:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <__floatsisf>
    61c2:	dc 01       	movw	r26, r24
    61c4:	cb 01       	movw	r24, r22
    61c6:	2d ec       	ldi	r18, 0xCD	; 205
    61c8:	3c ec       	ldi	r19, 0xCC	; 204
    61ca:	4c ec       	ldi	r20, 0xCC	; 204
    61cc:	5d e3       	ldi	r21, 0x3D	; 61
    61ce:	bc 01       	movw	r22, r24
    61d0:	cd 01       	movw	r24, r26
    61d2:	0e 94 28 5a 	call	0xb450	; 0xb450 <__mulsf3>
    61d6:	dc 01       	movw	r26, r24
    61d8:	cb 01       	movw	r24, r22
    61da:	9c 01       	movw	r18, r24
    61dc:	ad 01       	movw	r20, r26
    61de:	69 81       	ldd	r22, Y+1	; 0x01
    61e0:	7a 81       	ldd	r23, Y+2	; 0x02
    61e2:	8b 81       	ldd	r24, Y+3	; 0x03
    61e4:	9c 81       	ldd	r25, Y+4	; 0x04
    61e6:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__addsf3>
    61ea:	dc 01       	movw	r26, r24
    61ec:	cb 01       	movw	r24, r22
    61ee:	89 83       	std	Y+1, r24	; 0x01
    61f0:	9a 83       	std	Y+2, r25	; 0x02
    61f2:	ab 83       	std	Y+3, r26	; 0x03
    61f4:	bc 83       	std	Y+4, r27	; 0x04
    61f6:	8f 81       	ldd	r24, Y+7	; 0x07
    61f8:	88 23       	and	r24, r24
    61fa:	09 f4       	brne	.+2      	; 0x61fe <_ZN3DHT15readTemperatureEbb+0x110>
    61fc:	c4 c0       	rjmp	.+392    	; 0x6386 <_ZN3DHT15readTemperatureEbb+0x298>
    61fe:	89 81       	ldd	r24, Y+1	; 0x01
    6200:	9a 81       	ldd	r25, Y+2	; 0x02
    6202:	ab 81       	ldd	r26, Y+3	; 0x03
    6204:	bc 81       	ldd	r27, Y+4	; 0x04
    6206:	2d 81       	ldd	r18, Y+5	; 0x05
    6208:	3e 81       	ldd	r19, Y+6	; 0x06
    620a:	ac 01       	movw	r20, r24
    620c:	bd 01       	movw	r22, r26
    620e:	c9 01       	movw	r24, r18
    6210:	ce d0       	rcall	.+412    	; 0x63ae <_ZN3DHT11convertCtoFEf>
    6212:	dc 01       	movw	r26, r24
    6214:	cb 01       	movw	r24, r22
    6216:	89 83       	std	Y+1, r24	; 0x01
    6218:	9a 83       	std	Y+2, r25	; 0x02
    621a:	ab 83       	std	Y+3, r26	; 0x03
    621c:	bc 83       	std	Y+4, r27	; 0x04
    621e:	b3 c0       	rjmp	.+358    	; 0x6386 <_ZN3DHT15readTemperatureEbb+0x298>
    6220:	8d 81       	ldd	r24, Y+5	; 0x05
    6222:	9e 81       	ldd	r25, Y+6	; 0x06
    6224:	fc 01       	movw	r30, r24
    6226:	82 81       	ldd	r24, Z+2	; 0x02
    6228:	88 2f       	mov	r24, r24
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	a0 e0       	ldi	r26, 0x00	; 0
    622e:	b0 e0       	ldi	r27, 0x00	; 0
    6230:	bc 01       	movw	r22, r24
    6232:	cd 01       	movw	r24, r26
    6234:	0e 94 72 59 	call	0xb2e4	; 0xb2e4 <__floatunsisf>
    6238:	dc 01       	movw	r26, r24
    623a:	cb 01       	movw	r24, r22
    623c:	89 83       	std	Y+1, r24	; 0x01
    623e:	9a 83       	std	Y+2, r25	; 0x02
    6240:	ab 83       	std	Y+3, r26	; 0x03
    6242:	bc 83       	std	Y+4, r27	; 0x04
    6244:	8d 81       	ldd	r24, Y+5	; 0x05
    6246:	9e 81       	ldd	r25, Y+6	; 0x06
    6248:	fc 01       	movw	r30, r24
    624a:	83 81       	ldd	r24, Z+3	; 0x03
    624c:	88 2f       	mov	r24, r24
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	8f 70       	andi	r24, 0x0F	; 15
    6252:	99 27       	eor	r25, r25
    6254:	09 2e       	mov	r0, r25
    6256:	00 0c       	add	r0, r0
    6258:	aa 0b       	sbc	r26, r26
    625a:	bb 0b       	sbc	r27, r27
    625c:	bc 01       	movw	r22, r24
    625e:	cd 01       	movw	r24, r26
    6260:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <__floatsisf>
    6264:	dc 01       	movw	r26, r24
    6266:	cb 01       	movw	r24, r22
    6268:	2d ec       	ldi	r18, 0xCD	; 205
    626a:	3c ec       	ldi	r19, 0xCC	; 204
    626c:	4c ec       	ldi	r20, 0xCC	; 204
    626e:	5d e3       	ldi	r21, 0x3D	; 61
    6270:	bc 01       	movw	r22, r24
    6272:	cd 01       	movw	r24, r26
    6274:	0e 94 28 5a 	call	0xb450	; 0xb450 <__mulsf3>
    6278:	dc 01       	movw	r26, r24
    627a:	cb 01       	movw	r24, r22
    627c:	9c 01       	movw	r18, r24
    627e:	ad 01       	movw	r20, r26
    6280:	69 81       	ldd	r22, Y+1	; 0x01
    6282:	7a 81       	ldd	r23, Y+2	; 0x02
    6284:	8b 81       	ldd	r24, Y+3	; 0x03
    6286:	9c 81       	ldd	r25, Y+4	; 0x04
    6288:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__addsf3>
    628c:	dc 01       	movw	r26, r24
    628e:	cb 01       	movw	r24, r22
    6290:	89 83       	std	Y+1, r24	; 0x01
    6292:	9a 83       	std	Y+2, r25	; 0x02
    6294:	ab 83       	std	Y+3, r26	; 0x03
    6296:	bc 83       	std	Y+4, r27	; 0x04
    6298:	8d 81       	ldd	r24, Y+5	; 0x05
    629a:	9e 81       	ldd	r25, Y+6	; 0x06
    629c:	fc 01       	movw	r30, r24
    629e:	82 81       	ldd	r24, Z+2	; 0x02
    62a0:	88 23       	and	r24, r24
    62a2:	4c f4       	brge	.+18     	; 0x62b6 <_ZN3DHT15readTemperatureEbb+0x1c8>
    62a4:	89 81       	ldd	r24, Y+1	; 0x01
    62a6:	9a 81       	ldd	r25, Y+2	; 0x02
    62a8:	ab 81       	ldd	r26, Y+3	; 0x03
    62aa:	bc 81       	ldd	r27, Y+4	; 0x04
    62ac:	b0 58       	subi	r27, 0x80	; 128
    62ae:	89 83       	std	Y+1, r24	; 0x01
    62b0:	9a 83       	std	Y+2, r25	; 0x02
    62b2:	ab 83       	std	Y+3, r26	; 0x03
    62b4:	bc 83       	std	Y+4, r27	; 0x04
    62b6:	8f 81       	ldd	r24, Y+7	; 0x07
    62b8:	88 23       	and	r24, r24
    62ba:	09 f4       	brne	.+2      	; 0x62be <_ZN3DHT15readTemperatureEbb+0x1d0>
    62bc:	66 c0       	rjmp	.+204    	; 0x638a <_ZN3DHT15readTemperatureEbb+0x29c>
    62be:	89 81       	ldd	r24, Y+1	; 0x01
    62c0:	9a 81       	ldd	r25, Y+2	; 0x02
    62c2:	ab 81       	ldd	r26, Y+3	; 0x03
    62c4:	bc 81       	ldd	r27, Y+4	; 0x04
    62c6:	2d 81       	ldd	r18, Y+5	; 0x05
    62c8:	3e 81       	ldd	r19, Y+6	; 0x06
    62ca:	ac 01       	movw	r20, r24
    62cc:	bd 01       	movw	r22, r26
    62ce:	c9 01       	movw	r24, r18
    62d0:	6e d0       	rcall	.+220    	; 0x63ae <_ZN3DHT11convertCtoFEf>
    62d2:	dc 01       	movw	r26, r24
    62d4:	cb 01       	movw	r24, r22
    62d6:	89 83       	std	Y+1, r24	; 0x01
    62d8:	9a 83       	std	Y+2, r25	; 0x02
    62da:	ab 83       	std	Y+3, r26	; 0x03
    62dc:	bc 83       	std	Y+4, r27	; 0x04
    62de:	55 c0       	rjmp	.+170    	; 0x638a <_ZN3DHT15readTemperatureEbb+0x29c>
    62e0:	8d 81       	ldd	r24, Y+5	; 0x05
    62e2:	9e 81       	ldd	r25, Y+6	; 0x06
    62e4:	fc 01       	movw	r30, r24
    62e6:	82 81       	ldd	r24, Z+2	; 0x02
    62e8:	88 2f       	mov	r24, r24
    62ea:	90 e0       	ldi	r25, 0x00	; 0
    62ec:	8f 77       	andi	r24, 0x7F	; 127
    62ee:	99 27       	eor	r25, r25
    62f0:	38 2f       	mov	r19, r24
    62f2:	22 27       	eor	r18, r18
    62f4:	8d 81       	ldd	r24, Y+5	; 0x05
    62f6:	9e 81       	ldd	r25, Y+6	; 0x06
    62f8:	fc 01       	movw	r30, r24
    62fa:	83 81       	ldd	r24, Z+3	; 0x03
    62fc:	88 2f       	mov	r24, r24
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	82 2b       	or	r24, r18
    6302:	93 2b       	or	r25, r19
    6304:	cc 01       	movw	r24, r24
    6306:	a0 e0       	ldi	r26, 0x00	; 0
    6308:	b0 e0       	ldi	r27, 0x00	; 0
    630a:	bc 01       	movw	r22, r24
    630c:	cd 01       	movw	r24, r26
    630e:	0e 94 72 59 	call	0xb2e4	; 0xb2e4 <__floatunsisf>
    6312:	dc 01       	movw	r26, r24
    6314:	cb 01       	movw	r24, r22
    6316:	89 83       	std	Y+1, r24	; 0x01
    6318:	9a 83       	std	Y+2, r25	; 0x02
    631a:	ab 83       	std	Y+3, r26	; 0x03
    631c:	bc 83       	std	Y+4, r27	; 0x04
    631e:	2d ec       	ldi	r18, 0xCD	; 205
    6320:	3c ec       	ldi	r19, 0xCC	; 204
    6322:	4c ec       	ldi	r20, 0xCC	; 204
    6324:	5d e3       	ldi	r21, 0x3D	; 61
    6326:	69 81       	ldd	r22, Y+1	; 0x01
    6328:	7a 81       	ldd	r23, Y+2	; 0x02
    632a:	8b 81       	ldd	r24, Y+3	; 0x03
    632c:	9c 81       	ldd	r25, Y+4	; 0x04
    632e:	0e 94 28 5a 	call	0xb450	; 0xb450 <__mulsf3>
    6332:	dc 01       	movw	r26, r24
    6334:	cb 01       	movw	r24, r22
    6336:	89 83       	std	Y+1, r24	; 0x01
    6338:	9a 83       	std	Y+2, r25	; 0x02
    633a:	ab 83       	std	Y+3, r26	; 0x03
    633c:	bc 83       	std	Y+4, r27	; 0x04
    633e:	8d 81       	ldd	r24, Y+5	; 0x05
    6340:	9e 81       	ldd	r25, Y+6	; 0x06
    6342:	fc 01       	movw	r30, r24
    6344:	82 81       	ldd	r24, Z+2	; 0x02
    6346:	88 23       	and	r24, r24
    6348:	4c f4       	brge	.+18     	; 0x635c <_ZN3DHT15readTemperatureEbb+0x26e>
    634a:	89 81       	ldd	r24, Y+1	; 0x01
    634c:	9a 81       	ldd	r25, Y+2	; 0x02
    634e:	ab 81       	ldd	r26, Y+3	; 0x03
    6350:	bc 81       	ldd	r27, Y+4	; 0x04
    6352:	b0 58       	subi	r27, 0x80	; 128
    6354:	89 83       	std	Y+1, r24	; 0x01
    6356:	9a 83       	std	Y+2, r25	; 0x02
    6358:	ab 83       	std	Y+3, r26	; 0x03
    635a:	bc 83       	std	Y+4, r27	; 0x04
    635c:	8f 81       	ldd	r24, Y+7	; 0x07
    635e:	88 23       	and	r24, r24
    6360:	b1 f0       	breq	.+44     	; 0x638e <_ZN3DHT15readTemperatureEbb+0x2a0>
    6362:	89 81       	ldd	r24, Y+1	; 0x01
    6364:	9a 81       	ldd	r25, Y+2	; 0x02
    6366:	ab 81       	ldd	r26, Y+3	; 0x03
    6368:	bc 81       	ldd	r27, Y+4	; 0x04
    636a:	2d 81       	ldd	r18, Y+5	; 0x05
    636c:	3e 81       	ldd	r19, Y+6	; 0x06
    636e:	ac 01       	movw	r20, r24
    6370:	bd 01       	movw	r22, r26
    6372:	c9 01       	movw	r24, r18
    6374:	1c d0       	rcall	.+56     	; 0x63ae <_ZN3DHT11convertCtoFEf>
    6376:	dc 01       	movw	r26, r24
    6378:	cb 01       	movw	r24, r22
    637a:	89 83       	std	Y+1, r24	; 0x01
    637c:	9a 83       	std	Y+2, r25	; 0x02
    637e:	ab 83       	std	Y+3, r26	; 0x03
    6380:	bc 83       	std	Y+4, r27	; 0x04
    6382:	00 00       	nop
    6384:	04 c0       	rjmp	.+8      	; 0x638e <_ZN3DHT15readTemperatureEbb+0x2a0>
    6386:	00 00       	nop
    6388:	03 c0       	rjmp	.+6      	; 0x6390 <_ZN3DHT15readTemperatureEbb+0x2a2>
    638a:	00 00       	nop
    638c:	01 c0       	rjmp	.+2      	; 0x6390 <_ZN3DHT15readTemperatureEbb+0x2a2>
    638e:	00 00       	nop
    6390:	89 81       	ldd	r24, Y+1	; 0x01
    6392:	9a 81       	ldd	r25, Y+2	; 0x02
    6394:	ab 81       	ldd	r26, Y+3	; 0x03
    6396:	bc 81       	ldd	r27, Y+4	; 0x04
    6398:	bc 01       	movw	r22, r24
    639a:	cd 01       	movw	r24, r26
    639c:	28 96       	adiw	r28, 0x08	; 8
    639e:	0f b6       	in	r0, 0x3f	; 63
    63a0:	f8 94       	cli
    63a2:	de bf       	out	0x3e, r29	; 62
    63a4:	0f be       	out	0x3f, r0	; 63
    63a6:	cd bf       	out	0x3d, r28	; 61
    63a8:	df 91       	pop	r29
    63aa:	cf 91       	pop	r28
    63ac:	08 95       	ret

000063ae <_ZN3DHT11convertCtoFEf>:
    63ae:	cf 93       	push	r28
    63b0:	df 93       	push	r29
    63b2:	00 d0       	rcall	.+0      	; 0x63b4 <_ZN3DHT11convertCtoFEf+0x6>
    63b4:	00 d0       	rcall	.+0      	; 0x63b6 <_ZN3DHT11convertCtoFEf+0x8>
    63b6:	cd b7       	in	r28, 0x3d	; 61
    63b8:	de b7       	in	r29, 0x3e	; 62
    63ba:	9a 83       	std	Y+2, r25	; 0x02
    63bc:	89 83       	std	Y+1, r24	; 0x01
    63be:	4b 83       	std	Y+3, r20	; 0x03
    63c0:	5c 83       	std	Y+4, r21	; 0x04
    63c2:	6d 83       	std	Y+5, r22	; 0x05
    63c4:	7e 83       	std	Y+6, r23	; 0x06
    63c6:	26 e6       	ldi	r18, 0x66	; 102
    63c8:	36 e6       	ldi	r19, 0x66	; 102
    63ca:	46 ee       	ldi	r20, 0xE6	; 230
    63cc:	5f e3       	ldi	r21, 0x3F	; 63
    63ce:	6b 81       	ldd	r22, Y+3	; 0x03
    63d0:	7c 81       	ldd	r23, Y+4	; 0x04
    63d2:	8d 81       	ldd	r24, Y+5	; 0x05
    63d4:	9e 81       	ldd	r25, Y+6	; 0x06
    63d6:	0e 94 28 5a 	call	0xb450	; 0xb450 <__mulsf3>
    63da:	dc 01       	movw	r26, r24
    63dc:	cb 01       	movw	r24, r22
    63de:	20 e0       	ldi	r18, 0x00	; 0
    63e0:	30 e0       	ldi	r19, 0x00	; 0
    63e2:	40 e0       	ldi	r20, 0x00	; 0
    63e4:	52 e4       	ldi	r21, 0x42	; 66
    63e6:	bc 01       	movw	r22, r24
    63e8:	cd 01       	movw	r24, r26
    63ea:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__addsf3>
    63ee:	dc 01       	movw	r26, r24
    63f0:	cb 01       	movw	r24, r22
    63f2:	bc 01       	movw	r22, r24
    63f4:	cd 01       	movw	r24, r26
    63f6:	26 96       	adiw	r28, 0x06	; 6
    63f8:	0f b6       	in	r0, 0x3f	; 63
    63fa:	f8 94       	cli
    63fc:	de bf       	out	0x3e, r29	; 62
    63fe:	0f be       	out	0x3f, r0	; 63
    6400:	cd bf       	out	0x3d, r28	; 61
    6402:	df 91       	pop	r29
    6404:	cf 91       	pop	r28
    6406:	08 95       	ret

00006408 <_ZN3DHT12readHumidityEb>:
    6408:	cf 92       	push	r12
    640a:	df 92       	push	r13
    640c:	ef 92       	push	r14
    640e:	ff 92       	push	r15
    6410:	cf 93       	push	r28
    6412:	df 93       	push	r29
    6414:	cd b7       	in	r28, 0x3d	; 61
    6416:	de b7       	in	r29, 0x3e	; 62
    6418:	27 97       	sbiw	r28, 0x07	; 7
    641a:	0f b6       	in	r0, 0x3f	; 63
    641c:	f8 94       	cli
    641e:	de bf       	out	0x3e, r29	; 62
    6420:	0f be       	out	0x3f, r0	; 63
    6422:	cd bf       	out	0x3d, r28	; 61
    6424:	9e 83       	std	Y+6, r25	; 0x06
    6426:	8d 83       	std	Y+5, r24	; 0x05
    6428:	6f 83       	std	Y+7, r22	; 0x07
    642a:	80 e0       	ldi	r24, 0x00	; 0
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	a0 ec       	ldi	r26, 0xC0	; 192
    6430:	bf e7       	ldi	r27, 0x7F	; 127
    6432:	89 83       	std	Y+1, r24	; 0x01
    6434:	9a 83       	std	Y+2, r25	; 0x02
    6436:	ab 83       	std	Y+3, r26	; 0x03
    6438:	bc 83       	std	Y+4, r27	; 0x04
    643a:	8d 81       	ldd	r24, Y+5	; 0x05
    643c:	9e 81       	ldd	r25, Y+6	; 0x06
    643e:	6f 81       	ldd	r22, Y+7	; 0x07
    6440:	8d d0       	rcall	.+282    	; 0x655c <_ZN3DHT4readEb>
    6442:	88 23       	and	r24, r24
    6444:	09 f4       	brne	.+2      	; 0x6448 <_ZN3DHT12readHumidityEb+0x40>
    6446:	77 c0       	rjmp	.+238    	; 0x6536 <_ZN3DHT12readHumidityEb+0x12e>
    6448:	8d 81       	ldd	r24, Y+5	; 0x05
    644a:	9e 81       	ldd	r25, Y+6	; 0x06
    644c:	fc 01       	movw	r30, r24
    644e:	86 81       	ldd	r24, Z+6	; 0x06
    6450:	88 2f       	mov	r24, r24
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	8b 30       	cpi	r24, 0x0B	; 11
    6456:	91 05       	cpc	r25, r1
    6458:	0c f4       	brge	.+2      	; 0x645c <_ZN3DHT12readHumidityEb+0x54>
    645a:	6d c0       	rjmp	.+218    	; 0x6536 <_ZN3DHT12readHumidityEb+0x12e>
    645c:	8d 30       	cpi	r24, 0x0D	; 13
    645e:	91 05       	cpc	r25, r1
    6460:	2c f0       	brlt	.+10     	; 0x646c <_ZN3DHT12readHumidityEb+0x64>
    6462:	45 97       	sbiw	r24, 0x15	; 21
    6464:	02 97       	sbiw	r24, 0x02	; 2
    6466:	08 f0       	brcs	.+2      	; 0x646a <_ZN3DHT12readHumidityEb+0x62>
    6468:	66 c0       	rjmp	.+204    	; 0x6536 <_ZN3DHT12readHumidityEb+0x12e>
    646a:	37 c0       	rjmp	.+110    	; 0x64da <_ZN3DHT12readHumidityEb+0xd2>
    646c:	8d 81       	ldd	r24, Y+5	; 0x05
    646e:	9e 81       	ldd	r25, Y+6	; 0x06
    6470:	fc 01       	movw	r30, r24
    6472:	80 81       	ld	r24, Z
    6474:	88 2f       	mov	r24, r24
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	09 2e       	mov	r0, r25
    647a:	00 0c       	add	r0, r0
    647c:	aa 0b       	sbc	r26, r26
    647e:	bb 0b       	sbc	r27, r27
    6480:	bc 01       	movw	r22, r24
    6482:	cd 01       	movw	r24, r26
    6484:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <__floatsisf>
    6488:	6b 01       	movw	r12, r22
    648a:	7c 01       	movw	r14, r24
    648c:	8d 81       	ldd	r24, Y+5	; 0x05
    648e:	9e 81       	ldd	r25, Y+6	; 0x06
    6490:	fc 01       	movw	r30, r24
    6492:	81 81       	ldd	r24, Z+1	; 0x01
    6494:	88 2f       	mov	r24, r24
    6496:	90 e0       	ldi	r25, 0x00	; 0
    6498:	09 2e       	mov	r0, r25
    649a:	00 0c       	add	r0, r0
    649c:	aa 0b       	sbc	r26, r26
    649e:	bb 0b       	sbc	r27, r27
    64a0:	bc 01       	movw	r22, r24
    64a2:	cd 01       	movw	r24, r26
    64a4:	0e 94 74 59 	call	0xb2e8	; 0xb2e8 <__floatsisf>
    64a8:	dc 01       	movw	r26, r24
    64aa:	cb 01       	movw	r24, r22
    64ac:	2d ec       	ldi	r18, 0xCD	; 205
    64ae:	3c ec       	ldi	r19, 0xCC	; 204
    64b0:	4c ec       	ldi	r20, 0xCC	; 204
    64b2:	5d e3       	ldi	r21, 0x3D	; 61
    64b4:	bc 01       	movw	r22, r24
    64b6:	cd 01       	movw	r24, r26
    64b8:	0e 94 28 5a 	call	0xb450	; 0xb450 <__mulsf3>
    64bc:	dc 01       	movw	r26, r24
    64be:	cb 01       	movw	r24, r22
    64c0:	9c 01       	movw	r18, r24
    64c2:	ad 01       	movw	r20, r26
    64c4:	c7 01       	movw	r24, r14
    64c6:	b6 01       	movw	r22, r12
    64c8:	0e 94 76 58 	call	0xb0ec	; 0xb0ec <__addsf3>
    64cc:	dc 01       	movw	r26, r24
    64ce:	cb 01       	movw	r24, r22
    64d0:	89 83       	std	Y+1, r24	; 0x01
    64d2:	9a 83       	std	Y+2, r25	; 0x02
    64d4:	ab 83       	std	Y+3, r26	; 0x03
    64d6:	bc 83       	std	Y+4, r27	; 0x04
    64d8:	2e c0       	rjmp	.+92     	; 0x6536 <_ZN3DHT12readHumidityEb+0x12e>
    64da:	8d 81       	ldd	r24, Y+5	; 0x05
    64dc:	9e 81       	ldd	r25, Y+6	; 0x06
    64de:	fc 01       	movw	r30, r24
    64e0:	80 81       	ld	r24, Z
    64e2:	88 2f       	mov	r24, r24
    64e4:	90 e0       	ldi	r25, 0x00	; 0
    64e6:	38 2f       	mov	r19, r24
    64e8:	22 27       	eor	r18, r18
    64ea:	8d 81       	ldd	r24, Y+5	; 0x05
    64ec:	9e 81       	ldd	r25, Y+6	; 0x06
    64ee:	fc 01       	movw	r30, r24
    64f0:	81 81       	ldd	r24, Z+1	; 0x01
    64f2:	88 2f       	mov	r24, r24
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	82 2b       	or	r24, r18
    64f8:	93 2b       	or	r25, r19
    64fa:	cc 01       	movw	r24, r24
    64fc:	a0 e0       	ldi	r26, 0x00	; 0
    64fe:	b0 e0       	ldi	r27, 0x00	; 0
    6500:	bc 01       	movw	r22, r24
    6502:	cd 01       	movw	r24, r26
    6504:	0e 94 72 59 	call	0xb2e4	; 0xb2e4 <__floatunsisf>
    6508:	dc 01       	movw	r26, r24
    650a:	cb 01       	movw	r24, r22
    650c:	89 83       	std	Y+1, r24	; 0x01
    650e:	9a 83       	std	Y+2, r25	; 0x02
    6510:	ab 83       	std	Y+3, r26	; 0x03
    6512:	bc 83       	std	Y+4, r27	; 0x04
    6514:	2d ec       	ldi	r18, 0xCD	; 205
    6516:	3c ec       	ldi	r19, 0xCC	; 204
    6518:	4c ec       	ldi	r20, 0xCC	; 204
    651a:	5d e3       	ldi	r21, 0x3D	; 61
    651c:	69 81       	ldd	r22, Y+1	; 0x01
    651e:	7a 81       	ldd	r23, Y+2	; 0x02
    6520:	8b 81       	ldd	r24, Y+3	; 0x03
    6522:	9c 81       	ldd	r25, Y+4	; 0x04
    6524:	0e 94 28 5a 	call	0xb450	; 0xb450 <__mulsf3>
    6528:	dc 01       	movw	r26, r24
    652a:	cb 01       	movw	r24, r22
    652c:	89 83       	std	Y+1, r24	; 0x01
    652e:	9a 83       	std	Y+2, r25	; 0x02
    6530:	ab 83       	std	Y+3, r26	; 0x03
    6532:	bc 83       	std	Y+4, r27	; 0x04
    6534:	00 00       	nop
    6536:	89 81       	ldd	r24, Y+1	; 0x01
    6538:	9a 81       	ldd	r25, Y+2	; 0x02
    653a:	ab 81       	ldd	r26, Y+3	; 0x03
    653c:	bc 81       	ldd	r27, Y+4	; 0x04
    653e:	bc 01       	movw	r22, r24
    6540:	cd 01       	movw	r24, r26
    6542:	27 96       	adiw	r28, 0x07	; 7
    6544:	0f b6       	in	r0, 0x3f	; 63
    6546:	f8 94       	cli
    6548:	de bf       	out	0x3e, r29	; 62
    654a:	0f be       	out	0x3f, r0	; 63
    654c:	cd bf       	out	0x3d, r28	; 61
    654e:	df 91       	pop	r29
    6550:	cf 91       	pop	r28
    6552:	ff 90       	pop	r15
    6554:	ef 90       	pop	r14
    6556:	df 90       	pop	r13
    6558:	cf 90       	pop	r12
    655a:	08 95       	ret

0000655c <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    655c:	af 92       	push	r10
    655e:	bf 92       	push	r11
    6560:	cf 92       	push	r12
    6562:	df 92       	push	r13
    6564:	ff 92       	push	r15
    6566:	0f 93       	push	r16
    6568:	1f 93       	push	r17
    656a:	cf 93       	push	r28
    656c:	df 93       	push	r29
    656e:	cd b7       	in	r28, 0x3d	; 61
    6570:	de b7       	in	r29, 0x3e	; 62
    6572:	c4 55       	subi	r28, 0x54	; 84
    6574:	d1 40       	sbci	r29, 0x01	; 1
    6576:	0f b6       	in	r0, 0x3f	; 63
    6578:	f8 94       	cli
    657a:	de bf       	out	0x3e, r29	; 62
    657c:	0f be       	out	0x3f, r0	; 63
    657e:	cd bf       	out	0x3d, r28	; 61
    6580:	9e 01       	movw	r18, r28
    6582:	2e 5a       	subi	r18, 0xAE	; 174
    6584:	3e 4f       	sbci	r19, 0xFE	; 254
    6586:	f9 01       	movw	r30, r18
    6588:	91 83       	std	Z+1, r25	; 0x01
    658a:	80 83       	st	Z, r24
    658c:	ce 01       	movw	r24, r28
    658e:	8c 5a       	subi	r24, 0xAC	; 172
    6590:	9e 4f       	sbci	r25, 0xFE	; 254
    6592:	fc 01       	movw	r30, r24
    6594:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    6596:	0e 94 ff 5e 	call	0xbdfe	; 0xbdfe <millis>
    659a:	dc 01       	movw	r26, r24
    659c:	cb 01       	movw	r24, r22
    659e:	8d 83       	std	Y+5, r24	; 0x05
    65a0:	9e 83       	std	Y+6, r25	; 0x06
    65a2:	af 83       	std	Y+7, r26	; 0x07
    65a4:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    65a6:	ce 01       	movw	r24, r28
    65a8:	8c 5a       	subi	r24, 0xAC	; 172
    65aa:	9e 4f       	sbci	r25, 0xFE	; 254
    65ac:	fc 01       	movw	r30, r24
    65ae:	90 81       	ld	r25, Z
    65b0:	81 e0       	ldi	r24, 0x01	; 1
    65b2:	89 27       	eor	r24, r25
    65b4:	88 23       	and	r24, r24
    65b6:	29 f1       	breq	.+74     	; 0x6602 <_ZN3DHT4readEb+0xa6>
    65b8:	ce 01       	movw	r24, r28
    65ba:	8e 5a       	subi	r24, 0xAE	; 174
    65bc:	9e 4f       	sbci	r25, 0xFE	; 254
    65be:	fc 01       	movw	r30, r24
    65c0:	80 81       	ld	r24, Z
    65c2:	91 81       	ldd	r25, Z+1	; 0x01
    65c4:	fc 01       	movw	r30, r24
    65c6:	81 85       	ldd	r24, Z+9	; 0x09
    65c8:	92 85       	ldd	r25, Z+10	; 0x0a
    65ca:	a3 85       	ldd	r26, Z+11	; 0x0b
    65cc:	b4 85       	ldd	r27, Z+12	; 0x0c
    65ce:	2d 81       	ldd	r18, Y+5	; 0x05
    65d0:	3e 81       	ldd	r19, Y+6	; 0x06
    65d2:	4f 81       	ldd	r20, Y+7	; 0x07
    65d4:	58 85       	ldd	r21, Y+8	; 0x08
    65d6:	59 01       	movw	r10, r18
    65d8:	6a 01       	movw	r12, r20
    65da:	a8 1a       	sub	r10, r24
    65dc:	b9 0a       	sbc	r11, r25
    65de:	ca 0a       	sbc	r12, r26
    65e0:	db 0a       	sbc	r13, r27
    65e2:	d6 01       	movw	r26, r12
    65e4:	c5 01       	movw	r24, r10
    65e6:	80 3d       	cpi	r24, 0xD0	; 208
    65e8:	97 40       	sbci	r25, 0x07	; 7
    65ea:	a1 05       	cpc	r26, r1
    65ec:	b1 05       	cpc	r27, r1
    65ee:	48 f4       	brcc	.+18     	; 0x6602 <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    65f0:	ce 01       	movw	r24, r28
    65f2:	8e 5a       	subi	r24, 0xAE	; 174
    65f4:	9e 4f       	sbci	r25, 0xFE	; 254
    65f6:	fc 01       	movw	r30, r24
    65f8:	80 81       	ld	r24, Z
    65fa:	91 81       	ldd	r25, Z+1	; 0x01
    65fc:	fc 01       	movw	r30, r24
    65fe:	f1 88       	ldd	r15, Z+17	; 0x11
    6600:	5f c2       	rjmp	.+1214   	; 0x6ac0 <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    6602:	ce 01       	movw	r24, r28
    6604:	8e 5a       	subi	r24, 0xAE	; 174
    6606:	9e 4f       	sbci	r25, 0xFE	; 254
    6608:	fc 01       	movw	r30, r24
    660a:	20 81       	ld	r18, Z
    660c:	31 81       	ldd	r19, Z+1	; 0x01
    660e:	8d 81       	ldd	r24, Y+5	; 0x05
    6610:	9e 81       	ldd	r25, Y+6	; 0x06
    6612:	af 81       	ldd	r26, Y+7	; 0x07
    6614:	b8 85       	ldd	r27, Y+8	; 0x08
    6616:	f9 01       	movw	r30, r18
    6618:	81 87       	std	Z+9, r24	; 0x09
    661a:	92 87       	std	Z+10, r25	; 0x0a
    661c:	a3 87       	std	Z+11, r26	; 0x0b
    661e:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    6620:	ce 01       	movw	r24, r28
    6622:	8e 5a       	subi	r24, 0xAE	; 174
    6624:	9e 4f       	sbci	r25, 0xFE	; 254
    6626:	fc 01       	movw	r30, r24
    6628:	80 81       	ld	r24, Z
    662a:	91 81       	ldd	r25, Z+1	; 0x01
    662c:	fc 01       	movw	r30, r24
    662e:	14 82       	std	Z+4, r1	; 0x04
    6630:	ce 01       	movw	r24, r28
    6632:	8e 5a       	subi	r24, 0xAE	; 174
    6634:	9e 4f       	sbci	r25, 0xFE	; 254
    6636:	fc 01       	movw	r30, r24
    6638:	80 81       	ld	r24, Z
    663a:	91 81       	ldd	r25, Z+1	; 0x01
    663c:	fc 01       	movw	r30, r24
    663e:	24 81       	ldd	r18, Z+4	; 0x04
    6640:	ce 01       	movw	r24, r28
    6642:	8e 5a       	subi	r24, 0xAE	; 174
    6644:	9e 4f       	sbci	r25, 0xFE	; 254
    6646:	fc 01       	movw	r30, r24
    6648:	80 81       	ld	r24, Z
    664a:	91 81       	ldd	r25, Z+1	; 0x01
    664c:	fc 01       	movw	r30, r24
    664e:	23 83       	std	Z+3, r18	; 0x03
    6650:	ce 01       	movw	r24, r28
    6652:	8e 5a       	subi	r24, 0xAE	; 174
    6654:	9e 4f       	sbci	r25, 0xFE	; 254
    6656:	fc 01       	movw	r30, r24
    6658:	80 81       	ld	r24, Z
    665a:	91 81       	ldd	r25, Z+1	; 0x01
    665c:	fc 01       	movw	r30, r24
    665e:	23 81       	ldd	r18, Z+3	; 0x03
    6660:	ce 01       	movw	r24, r28
    6662:	8e 5a       	subi	r24, 0xAE	; 174
    6664:	9e 4f       	sbci	r25, 0xFE	; 254
    6666:	fc 01       	movw	r30, r24
    6668:	80 81       	ld	r24, Z
    666a:	91 81       	ldd	r25, Z+1	; 0x01
    666c:	fc 01       	movw	r30, r24
    666e:	22 83       	std	Z+2, r18	; 0x02
    6670:	ce 01       	movw	r24, r28
    6672:	8e 5a       	subi	r24, 0xAE	; 174
    6674:	9e 4f       	sbci	r25, 0xFE	; 254
    6676:	fc 01       	movw	r30, r24
    6678:	80 81       	ld	r24, Z
    667a:	91 81       	ldd	r25, Z+1	; 0x01
    667c:	fc 01       	movw	r30, r24
    667e:	22 81       	ldd	r18, Z+2	; 0x02
    6680:	ce 01       	movw	r24, r28
    6682:	8e 5a       	subi	r24, 0xAE	; 174
    6684:	9e 4f       	sbci	r25, 0xFE	; 254
    6686:	fc 01       	movw	r30, r24
    6688:	80 81       	ld	r24, Z
    668a:	91 81       	ldd	r25, Z+1	; 0x01
    668c:	fc 01       	movw	r30, r24
    668e:	21 83       	std	Z+1, r18	; 0x01
    6690:	ce 01       	movw	r24, r28
    6692:	8e 5a       	subi	r24, 0xAE	; 174
    6694:	9e 4f       	sbci	r25, 0xFE	; 254
    6696:	fc 01       	movw	r30, r24
    6698:	80 81       	ld	r24, Z
    669a:	91 81       	ldd	r25, Z+1	; 0x01
    669c:	fc 01       	movw	r30, r24
    669e:	21 81       	ldd	r18, Z+1	; 0x01
    66a0:	ce 01       	movw	r24, r28
    66a2:	8e 5a       	subi	r24, 0xAE	; 174
    66a4:	9e 4f       	sbci	r25, 0xFE	; 254
    66a6:	fc 01       	movw	r30, r24
    66a8:	80 81       	ld	r24, Z
    66aa:	91 81       	ldd	r25, Z+1	; 0x01
    66ac:	fc 01       	movw	r30, r24
    66ae:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    66b0:	ce 01       	movw	r24, r28
    66b2:	8e 5a       	subi	r24, 0xAE	; 174
    66b4:	9e 4f       	sbci	r25, 0xFE	; 254
    66b6:	fc 01       	movw	r30, r24
    66b8:	80 81       	ld	r24, Z
    66ba:	91 81       	ldd	r25, Z+1	; 0x01
    66bc:	fc 01       	movw	r30, r24
    66be:	85 81       	ldd	r24, Z+5	; 0x05
    66c0:	62 e0       	ldi	r22, 0x02	; 2
    66c2:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
  delay(1);
    66c6:	61 e0       	ldi	r22, 0x01	; 1
    66c8:	70 e0       	ldi	r23, 0x00	; 0
    66ca:	80 e0       	ldi	r24, 0x00	; 0
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	0e 94 30 5f 	call	0xbe60	; 0xbe60 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    66d2:	ce 01       	movw	r24, r28
    66d4:	8e 5a       	subi	r24, 0xAE	; 174
    66d6:	9e 4f       	sbci	r25, 0xFE	; 254
    66d8:	fc 01       	movw	r30, r24
    66da:	80 81       	ld	r24, Z
    66dc:	91 81       	ldd	r25, Z+1	; 0x01
    66de:	fc 01       	movw	r30, r24
    66e0:	85 81       	ldd	r24, Z+5	; 0x05
    66e2:	61 e0       	ldi	r22, 0x01	; 1
    66e4:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
  digitalWrite(_pin, LOW);
    66e8:	ce 01       	movw	r24, r28
    66ea:	8e 5a       	subi	r24, 0xAE	; 174
    66ec:	9e 4f       	sbci	r25, 0xFE	; 254
    66ee:	fc 01       	movw	r30, r24
    66f0:	80 81       	ld	r24, Z
    66f2:	91 81       	ldd	r25, Z+1	; 0x01
    66f4:	fc 01       	movw	r30, r24
    66f6:	85 81       	ldd	r24, Z+5	; 0x05
    66f8:	60 e0       	ldi	r22, 0x00	; 0
    66fa:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
  switch (_type) {
    66fe:	ce 01       	movw	r24, r28
    6700:	8e 5a       	subi	r24, 0xAE	; 174
    6702:	9e 4f       	sbci	r25, 0xFE	; 254
    6704:	fc 01       	movw	r30, r24
    6706:	80 81       	ld	r24, Z
    6708:	91 81       	ldd	r25, Z+1	; 0x01
    670a:	fc 01       	movw	r30, r24
    670c:	86 81       	ldd	r24, Z+6	; 0x06
    670e:	88 2f       	mov	r24, r24
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	45 97       	sbiw	r24, 0x15	; 21
    6714:	02 97       	sbiw	r24, 0x02	; 2
    6716:	28 f4       	brcc	.+10     	; 0x6722 <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    6718:	8c e4       	ldi	r24, 0x4C	; 76
    671a:	94 e0       	ldi	r25, 0x04	; 4
    671c:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
    break;
    6720:	07 c0       	rjmp	.+14     	; 0x6730 <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    6722:	64 e1       	ldi	r22, 0x14	; 20
    6724:	70 e0       	ldi	r23, 0x00	; 0
    6726:	80 e0       	ldi	r24, 0x00	; 0
    6728:	90 e0       	ldi	r25, 0x00	; 0
    672a:	0e 94 30 5f 	call	0xbe60	; 0xbe60 <delay>
    break;
    672e:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    6730:	ce 01       	movw	r24, r28
    6732:	8e 5a       	subi	r24, 0xAE	; 174
    6734:	9e 4f       	sbci	r25, 0xFE	; 254
    6736:	fc 01       	movw	r30, r24
    6738:	80 81       	ld	r24, Z
    673a:	91 81       	ldd	r25, Z+1	; 0x01
    673c:	fc 01       	movw	r30, r24
    673e:	85 81       	ldd	r24, Z+5	; 0x05
    6740:	62 e0       	ldi	r22, 0x02	; 2
    6742:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    6746:	ce 01       	movw	r24, r28
    6748:	8e 5a       	subi	r24, 0xAE	; 174
    674a:	9e 4f       	sbci	r25, 0xFE	; 254
    674c:	fc 01       	movw	r30, r24
    674e:	80 81       	ld	r24, Z
    6750:	91 81       	ldd	r25, Z+1	; 0x01
    6752:	fc 01       	movw	r30, r24
    6754:	82 89       	ldd	r24, Z+18	; 0x12
    6756:	88 2f       	mov	r24, r24
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    675e:	ce 01       	movw	r24, r28
    6760:	8f 5a       	subi	r24, 0xAF	; 175
    6762:	9e 4f       	sbci	r25, 0xFE	; 254
    6764:	2c dc       	rcall	.-1960   	; 0x5fbe <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    6766:	ce 01       	movw	r24, r28
    6768:	8e 5a       	subi	r24, 0xAE	; 174
    676a:	9e 4f       	sbci	r25, 0xFE	; 254
    676c:	fc 01       	movw	r30, r24
    676e:	80 81       	ld	r24, Z
    6770:	91 81       	ldd	r25, Z+1	; 0x01
    6772:	60 e0       	ldi	r22, 0x00	; 0
    6774:	b7 d1       	rcall	.+878    	; 0x6ae4 <_ZN3DHT11expectPulseEb>
    6776:	dc 01       	movw	r26, r24
    6778:	cb 01       	movw	r24, r22
    677a:	21 e0       	ldi	r18, 0x01	; 1
    677c:	8f 3f       	cpi	r24, 0xFF	; 255
    677e:	9f 4f       	sbci	r25, 0xFF	; 255
    6780:	af 4f       	sbci	r26, 0xFF	; 255
    6782:	bf 4f       	sbci	r27, 0xFF	; 255
    6784:	09 f0       	breq	.+2      	; 0x6788 <_ZN3DHT4readEb+0x22c>
    6786:	20 e0       	ldi	r18, 0x00	; 0
    6788:	22 23       	and	r18, r18
    678a:	99 f0       	breq	.+38     	; 0x67b2 <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    678c:	ce 01       	movw	r24, r28
    678e:	8e 5a       	subi	r24, 0xAE	; 174
    6790:	9e 4f       	sbci	r25, 0xFE	; 254
    6792:	fc 01       	movw	r30, r24
    6794:	80 81       	ld	r24, Z
    6796:	91 81       	ldd	r25, Z+1	; 0x01
    6798:	fc 01       	movw	r30, r24
    679a:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    679c:	ce 01       	movw	r24, r28
    679e:	8e 5a       	subi	r24, 0xAE	; 174
    67a0:	9e 4f       	sbci	r25, 0xFE	; 254
    67a2:	fc 01       	movw	r30, r24
    67a4:	80 81       	ld	r24, Z
    67a6:	91 81       	ldd	r25, Z+1	; 0x01
    67a8:	fc 01       	movw	r30, r24
    67aa:	f1 88       	ldd	r15, Z+17	; 0x11
    67ac:	00 e0       	ldi	r16, 0x00	; 0
    67ae:	10 e0       	ldi	r17, 0x00	; 0
    67b0:	72 c0       	rjmp	.+228    	; 0x6896 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    67b2:	ce 01       	movw	r24, r28
    67b4:	8e 5a       	subi	r24, 0xAE	; 174
    67b6:	9e 4f       	sbci	r25, 0xFE	; 254
    67b8:	fc 01       	movw	r30, r24
    67ba:	80 81       	ld	r24, Z
    67bc:	91 81       	ldd	r25, Z+1	; 0x01
    67be:	61 e0       	ldi	r22, 0x01	; 1
    67c0:	91 d1       	rcall	.+802    	; 0x6ae4 <_ZN3DHT11expectPulseEb>
    67c2:	dc 01       	movw	r26, r24
    67c4:	cb 01       	movw	r24, r22
    67c6:	21 e0       	ldi	r18, 0x01	; 1
    67c8:	8f 3f       	cpi	r24, 0xFF	; 255
    67ca:	9f 4f       	sbci	r25, 0xFF	; 255
    67cc:	af 4f       	sbci	r26, 0xFF	; 255
    67ce:	bf 4f       	sbci	r27, 0xFF	; 255
    67d0:	09 f0       	breq	.+2      	; 0x67d4 <_ZN3DHT4readEb+0x278>
    67d2:	20 e0       	ldi	r18, 0x00	; 0
    67d4:	22 23       	and	r18, r18
    67d6:	99 f0       	breq	.+38     	; 0x67fe <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    67d8:	ce 01       	movw	r24, r28
    67da:	8e 5a       	subi	r24, 0xAE	; 174
    67dc:	9e 4f       	sbci	r25, 0xFE	; 254
    67de:	fc 01       	movw	r30, r24
    67e0:	80 81       	ld	r24, Z
    67e2:	91 81       	ldd	r25, Z+1	; 0x01
    67e4:	fc 01       	movw	r30, r24
    67e6:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    67e8:	ce 01       	movw	r24, r28
    67ea:	8e 5a       	subi	r24, 0xAE	; 174
    67ec:	9e 4f       	sbci	r25, 0xFE	; 254
    67ee:	fc 01       	movw	r30, r24
    67f0:	80 81       	ld	r24, Z
    67f2:	91 81       	ldd	r25, Z+1	; 0x01
    67f4:	fc 01       	movw	r30, r24
    67f6:	f1 88       	ldd	r15, Z+17	; 0x11
    67f8:	00 e0       	ldi	r16, 0x00	; 0
    67fa:	10 e0       	ldi	r17, 0x00	; 0
    67fc:	4c c0       	rjmp	.+152    	; 0x6896 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    67fe:	1a 82       	std	Y+2, r1	; 0x02
    6800:	19 82       	std	Y+1, r1	; 0x01
    6802:	89 81       	ldd	r24, Y+1	; 0x01
    6804:	9a 81       	ldd	r25, Y+2	; 0x02
    6806:	80 35       	cpi	r24, 0x50	; 80
    6808:	91 05       	cpc	r25, r1
    680a:	0c f0       	brlt	.+2      	; 0x680e <_ZN3DHT4readEb+0x2b2>
    680c:	42 c0       	rjmp	.+132    	; 0x6892 <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    680e:	ce 01       	movw	r24, r28
    6810:	8e 5a       	subi	r24, 0xAE	; 174
    6812:	9e 4f       	sbci	r25, 0xFE	; 254
    6814:	fc 01       	movw	r30, r24
    6816:	80 81       	ld	r24, Z
    6818:	91 81       	ldd	r25, Z+1	; 0x01
    681a:	60 e0       	ldi	r22, 0x00	; 0
    681c:	63 d1       	rcall	.+710    	; 0x6ae4 <_ZN3DHT11expectPulseEb>
    681e:	dc 01       	movw	r26, r24
    6820:	cb 01       	movw	r24, r22
    6822:	29 81       	ldd	r18, Y+1	; 0x01
    6824:	3a 81       	ldd	r19, Y+2	; 0x02
    6826:	22 0f       	add	r18, r18
    6828:	33 1f       	adc	r19, r19
    682a:	22 0f       	add	r18, r18
    682c:	33 1f       	adc	r19, r19
    682e:	ae 01       	movw	r20, r28
    6830:	4f 5f       	subi	r20, 0xFF	; 255
    6832:	5f 4f       	sbci	r21, 0xFF	; 255
    6834:	24 0f       	add	r18, r20
    6836:	35 1f       	adc	r19, r21
    6838:	20 5f       	subi	r18, 0xF0	; 240
    683a:	3f 4f       	sbci	r19, 0xFF	; 255
    683c:	f9 01       	movw	r30, r18
    683e:	80 83       	st	Z, r24
    6840:	91 83       	std	Z+1, r25	; 0x01
    6842:	a2 83       	std	Z+2, r26	; 0x02
    6844:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    6846:	89 81       	ldd	r24, Y+1	; 0x01
    6848:	9a 81       	ldd	r25, Y+2	; 0x02
    684a:	8c 01       	movw	r16, r24
    684c:	0f 5f       	subi	r16, 0xFF	; 255
    684e:	1f 4f       	sbci	r17, 0xFF	; 255
    6850:	ce 01       	movw	r24, r28
    6852:	8e 5a       	subi	r24, 0xAE	; 174
    6854:	9e 4f       	sbci	r25, 0xFE	; 254
    6856:	fc 01       	movw	r30, r24
    6858:	80 81       	ld	r24, Z
    685a:	91 81       	ldd	r25, Z+1	; 0x01
    685c:	61 e0       	ldi	r22, 0x01	; 1
    685e:	42 d1       	rcall	.+644    	; 0x6ae4 <_ZN3DHT11expectPulseEb>
    6860:	dc 01       	movw	r26, r24
    6862:	cb 01       	movw	r24, r22
    6864:	98 01       	movw	r18, r16
    6866:	22 0f       	add	r18, r18
    6868:	33 1f       	adc	r19, r19
    686a:	22 0f       	add	r18, r18
    686c:	33 1f       	adc	r19, r19
    686e:	ae 01       	movw	r20, r28
    6870:	4f 5f       	subi	r20, 0xFF	; 255
    6872:	5f 4f       	sbci	r21, 0xFF	; 255
    6874:	24 0f       	add	r18, r20
    6876:	35 1f       	adc	r19, r21
    6878:	20 5f       	subi	r18, 0xF0	; 240
    687a:	3f 4f       	sbci	r19, 0xFF	; 255
    687c:	f9 01       	movw	r30, r18
    687e:	80 83       	st	Z, r24
    6880:	91 83       	std	Z+1, r25	; 0x01
    6882:	a2 83       	std	Z+2, r26	; 0x02
    6884:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    6886:	89 81       	ldd	r24, Y+1	; 0x01
    6888:	9a 81       	ldd	r25, Y+2	; 0x02
    688a:	02 96       	adiw	r24, 0x02	; 2
    688c:	9a 83       	std	Y+2, r25	; 0x02
    688e:	89 83       	std	Y+1, r24	; 0x01
    6890:	b8 cf       	rjmp	.-144    	; 0x6802 <_ZN3DHT4readEb+0x2a6>
    6892:	01 e0       	ldi	r16, 0x01	; 1
    6894:	10 e0       	ldi	r17, 0x00	; 0
    6896:	ce 01       	movw	r24, r28
    6898:	8f 5a       	subi	r24, 0xAF	; 175
    689a:	9e 4f       	sbci	r25, 0xFE	; 254
    689c:	9f db       	rcall	.-2242   	; 0x5fdc <_ZN13InterruptLockD1Ev>
    689e:	01 30       	cpi	r16, 0x01	; 1
    68a0:	11 05       	cpc	r17, r1
    68a2:	09 f0       	breq	.+2      	; 0x68a6 <_ZN3DHT4readEb+0x34a>
    68a4:	0d c1       	rjmp	.+538    	; 0x6ac0 <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    68a6:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    68a8:	1c 82       	std	Y+4, r1	; 0x04
    68aa:	1b 82       	std	Y+3, r1	; 0x03
    68ac:	8b 81       	ldd	r24, Y+3	; 0x03
    68ae:	9c 81       	ldd	r25, Y+4	; 0x04
    68b0:	88 97       	sbiw	r24, 0x28	; 40
    68b2:	0c f0       	brlt	.+2      	; 0x68b6 <_ZN3DHT4readEb+0x35a>
    68b4:	a7 c0       	rjmp	.+334    	; 0x6a04 <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    68b6:	8b 81       	ldd	r24, Y+3	; 0x03
    68b8:	9c 81       	ldd	r25, Y+4	; 0x04
    68ba:	88 0f       	add	r24, r24
    68bc:	99 1f       	adc	r25, r25
    68be:	88 0f       	add	r24, r24
    68c0:	99 1f       	adc	r25, r25
    68c2:	88 0f       	add	r24, r24
    68c4:	99 1f       	adc	r25, r25
    68c6:	9e 01       	movw	r18, r28
    68c8:	2f 5f       	subi	r18, 0xFF	; 255
    68ca:	3f 4f       	sbci	r19, 0xFF	; 255
    68cc:	82 0f       	add	r24, r18
    68ce:	93 1f       	adc	r25, r19
    68d0:	40 96       	adiw	r24, 0x10	; 16
    68d2:	fc 01       	movw	r30, r24
    68d4:	80 81       	ld	r24, Z
    68d6:	91 81       	ldd	r25, Z+1	; 0x01
    68d8:	a2 81       	ldd	r26, Z+2	; 0x02
    68da:	b3 81       	ldd	r27, Z+3	; 0x03
    68dc:	89 87       	std	Y+9, r24	; 0x09
    68de:	9a 87       	std	Y+10, r25	; 0x0a
    68e0:	ab 87       	std	Y+11, r26	; 0x0b
    68e2:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    68e4:	8b 81       	ldd	r24, Y+3	; 0x03
    68e6:	9c 81       	ldd	r25, Y+4	; 0x04
    68e8:	88 0f       	add	r24, r24
    68ea:	99 1f       	adc	r25, r25
    68ec:	01 96       	adiw	r24, 0x01	; 1
    68ee:	88 0f       	add	r24, r24
    68f0:	99 1f       	adc	r25, r25
    68f2:	88 0f       	add	r24, r24
    68f4:	99 1f       	adc	r25, r25
    68f6:	9e 01       	movw	r18, r28
    68f8:	2f 5f       	subi	r18, 0xFF	; 255
    68fa:	3f 4f       	sbci	r19, 0xFF	; 255
    68fc:	82 0f       	add	r24, r18
    68fe:	93 1f       	adc	r25, r19
    6900:	40 96       	adiw	r24, 0x10	; 16
    6902:	fc 01       	movw	r30, r24
    6904:	80 81       	ld	r24, Z
    6906:	91 81       	ldd	r25, Z+1	; 0x01
    6908:	a2 81       	ldd	r26, Z+2	; 0x02
    690a:	b3 81       	ldd	r27, Z+3	; 0x03
    690c:	8d 87       	std	Y+13, r24	; 0x0d
    690e:	9e 87       	std	Y+14, r25	; 0x0e
    6910:	af 87       	std	Y+15, r26	; 0x0f
    6912:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    6914:	89 85       	ldd	r24, Y+9	; 0x09
    6916:	9a 85       	ldd	r25, Y+10	; 0x0a
    6918:	ab 85       	ldd	r26, Y+11	; 0x0b
    691a:	bc 85       	ldd	r27, Y+12	; 0x0c
    691c:	8f 3f       	cpi	r24, 0xFF	; 255
    691e:	9f 4f       	sbci	r25, 0xFF	; 255
    6920:	af 4f       	sbci	r26, 0xFF	; 255
    6922:	bf 4f       	sbci	r27, 0xFF	; 255
    6924:	49 f0       	breq	.+18     	; 0x6938 <_ZN3DHT4readEb+0x3dc>
    6926:	8d 85       	ldd	r24, Y+13	; 0x0d
    6928:	9e 85       	ldd	r25, Y+14	; 0x0e
    692a:	af 85       	ldd	r26, Y+15	; 0x0f
    692c:	b8 89       	ldd	r27, Y+16	; 0x10
    692e:	8f 3f       	cpi	r24, 0xFF	; 255
    6930:	9f 4f       	sbci	r25, 0xFF	; 255
    6932:	af 4f       	sbci	r26, 0xFF	; 255
    6934:	bf 4f       	sbci	r27, 0xFF	; 255
    6936:	89 f4       	brne	.+34     	; 0x695a <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    6938:	ce 01       	movw	r24, r28
    693a:	8e 5a       	subi	r24, 0xAE	; 174
    693c:	9e 4f       	sbci	r25, 0xFE	; 254
    693e:	fc 01       	movw	r30, r24
    6940:	80 81       	ld	r24, Z
    6942:	91 81       	ldd	r25, Z+1	; 0x01
    6944:	fc 01       	movw	r30, r24
    6946:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    6948:	ce 01       	movw	r24, r28
    694a:	8e 5a       	subi	r24, 0xAE	; 174
    694c:	9e 4f       	sbci	r25, 0xFE	; 254
    694e:	fc 01       	movw	r30, r24
    6950:	80 81       	ld	r24, Z
    6952:	91 81       	ldd	r25, Z+1	; 0x01
    6954:	fc 01       	movw	r30, r24
    6956:	f1 88       	ldd	r15, Z+17	; 0x11
    6958:	b3 c0       	rjmp	.+358    	; 0x6ac0 <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    695a:	8b 81       	ldd	r24, Y+3	; 0x03
    695c:	9c 81       	ldd	r25, Y+4	; 0x04
    695e:	99 23       	and	r25, r25
    6960:	0c f4       	brge	.+2      	; 0x6964 <_ZN3DHT4readEb+0x408>
    6962:	07 96       	adiw	r24, 0x07	; 7
    6964:	95 95       	asr	r25
    6966:	87 95       	ror	r24
    6968:	95 95       	asr	r25
    696a:	87 95       	ror	r24
    696c:	95 95       	asr	r25
    696e:	87 95       	ror	r24
    6970:	9e 01       	movw	r18, r28
    6972:	2e 5a       	subi	r18, 0xAE	; 174
    6974:	3e 4f       	sbci	r19, 0xFE	; 254
    6976:	f9 01       	movw	r30, r18
    6978:	20 81       	ld	r18, Z
    697a:	31 81       	ldd	r19, Z+1	; 0x01
    697c:	28 0f       	add	r18, r24
    697e:	39 1f       	adc	r19, r25
    6980:	f9 01       	movw	r30, r18
    6982:	20 81       	ld	r18, Z
    6984:	42 2f       	mov	r20, r18
    6986:	44 0f       	add	r20, r20
    6988:	9e 01       	movw	r18, r28
    698a:	2e 5a       	subi	r18, 0xAE	; 174
    698c:	3e 4f       	sbci	r19, 0xFE	; 254
    698e:	f9 01       	movw	r30, r18
    6990:	20 81       	ld	r18, Z
    6992:	31 81       	ldd	r19, Z+1	; 0x01
    6994:	82 0f       	add	r24, r18
    6996:	93 1f       	adc	r25, r19
    6998:	fc 01       	movw	r30, r24
    699a:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    699c:	2d 85       	ldd	r18, Y+13	; 0x0d
    699e:	3e 85       	ldd	r19, Y+14	; 0x0e
    69a0:	4f 85       	ldd	r20, Y+15	; 0x0f
    69a2:	58 89       	ldd	r21, Y+16	; 0x10
    69a4:	89 85       	ldd	r24, Y+9	; 0x09
    69a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    69a8:	ab 85       	ldd	r26, Y+11	; 0x0b
    69aa:	bc 85       	ldd	r27, Y+12	; 0x0c
    69ac:	82 17       	cp	r24, r18
    69ae:	93 07       	cpc	r25, r19
    69b0:	a4 07       	cpc	r26, r20
    69b2:	b5 07       	cpc	r27, r21
    69b4:	08 f5       	brcc	.+66     	; 0x69f8 <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    69b6:	8b 81       	ldd	r24, Y+3	; 0x03
    69b8:	9c 81       	ldd	r25, Y+4	; 0x04
    69ba:	99 23       	and	r25, r25
    69bc:	0c f4       	brge	.+2      	; 0x69c0 <_ZN3DHT4readEb+0x464>
    69be:	07 96       	adiw	r24, 0x07	; 7
    69c0:	95 95       	asr	r25
    69c2:	87 95       	ror	r24
    69c4:	95 95       	asr	r25
    69c6:	87 95       	ror	r24
    69c8:	95 95       	asr	r25
    69ca:	87 95       	ror	r24
    69cc:	9e 01       	movw	r18, r28
    69ce:	2e 5a       	subi	r18, 0xAE	; 174
    69d0:	3e 4f       	sbci	r19, 0xFE	; 254
    69d2:	f9 01       	movw	r30, r18
    69d4:	20 81       	ld	r18, Z
    69d6:	31 81       	ldd	r19, Z+1	; 0x01
    69d8:	28 0f       	add	r18, r24
    69da:	39 1f       	adc	r19, r25
    69dc:	f9 01       	movw	r30, r18
    69de:	20 81       	ld	r18, Z
    69e0:	42 2f       	mov	r20, r18
    69e2:	41 60       	ori	r20, 0x01	; 1
    69e4:	9e 01       	movw	r18, r28
    69e6:	2e 5a       	subi	r18, 0xAE	; 174
    69e8:	3e 4f       	sbci	r19, 0xFE	; 254
    69ea:	f9 01       	movw	r30, r18
    69ec:	20 81       	ld	r18, Z
    69ee:	31 81       	ldd	r19, Z+1	; 0x01
    69f0:	82 0f       	add	r24, r18
    69f2:	93 1f       	adc	r25, r19
    69f4:	fc 01       	movw	r30, r24
    69f6:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    69f8:	8b 81       	ldd	r24, Y+3	; 0x03
    69fa:	9c 81       	ldd	r25, Y+4	; 0x04
    69fc:	01 96       	adiw	r24, 0x01	; 1
    69fe:	9c 83       	std	Y+4, r25	; 0x04
    6a00:	8b 83       	std	Y+3, r24	; 0x03
    6a02:	54 cf       	rjmp	.-344    	; 0x68ac <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    6a04:	ce 01       	movw	r24, r28
    6a06:	8e 5a       	subi	r24, 0xAE	; 174
    6a08:	9e 4f       	sbci	r25, 0xFE	; 254
    6a0a:	fc 01       	movw	r30, r24
    6a0c:	80 81       	ld	r24, Z
    6a0e:	91 81       	ldd	r25, Z+1	; 0x01
    6a10:	fc 01       	movw	r30, r24
    6a12:	84 81       	ldd	r24, Z+4	; 0x04
    6a14:	28 2f       	mov	r18, r24
    6a16:	30 e0       	ldi	r19, 0x00	; 0
    6a18:	ce 01       	movw	r24, r28
    6a1a:	8e 5a       	subi	r24, 0xAE	; 174
    6a1c:	9e 4f       	sbci	r25, 0xFE	; 254
    6a1e:	fc 01       	movw	r30, r24
    6a20:	80 81       	ld	r24, Z
    6a22:	91 81       	ldd	r25, Z+1	; 0x01
    6a24:	fc 01       	movw	r30, r24
    6a26:	80 81       	ld	r24, Z
    6a28:	48 2f       	mov	r20, r24
    6a2a:	50 e0       	ldi	r21, 0x00	; 0
    6a2c:	ce 01       	movw	r24, r28
    6a2e:	8e 5a       	subi	r24, 0xAE	; 174
    6a30:	9e 4f       	sbci	r25, 0xFE	; 254
    6a32:	fc 01       	movw	r30, r24
    6a34:	80 81       	ld	r24, Z
    6a36:	91 81       	ldd	r25, Z+1	; 0x01
    6a38:	fc 01       	movw	r30, r24
    6a3a:	81 81       	ldd	r24, Z+1	; 0x01
    6a3c:	88 2f       	mov	r24, r24
    6a3e:	90 e0       	ldi	r25, 0x00	; 0
    6a40:	48 0f       	add	r20, r24
    6a42:	59 1f       	adc	r21, r25
    6a44:	ce 01       	movw	r24, r28
    6a46:	8e 5a       	subi	r24, 0xAE	; 174
    6a48:	9e 4f       	sbci	r25, 0xFE	; 254
    6a4a:	fc 01       	movw	r30, r24
    6a4c:	80 81       	ld	r24, Z
    6a4e:	91 81       	ldd	r25, Z+1	; 0x01
    6a50:	fc 01       	movw	r30, r24
    6a52:	82 81       	ldd	r24, Z+2	; 0x02
    6a54:	88 2f       	mov	r24, r24
    6a56:	90 e0       	ldi	r25, 0x00	; 0
    6a58:	48 0f       	add	r20, r24
    6a5a:	59 1f       	adc	r21, r25
    6a5c:	ce 01       	movw	r24, r28
    6a5e:	8e 5a       	subi	r24, 0xAE	; 174
    6a60:	9e 4f       	sbci	r25, 0xFE	; 254
    6a62:	fc 01       	movw	r30, r24
    6a64:	80 81       	ld	r24, Z
    6a66:	91 81       	ldd	r25, Z+1	; 0x01
    6a68:	fc 01       	movw	r30, r24
    6a6a:	83 81       	ldd	r24, Z+3	; 0x03
    6a6c:	88 2f       	mov	r24, r24
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	84 0f       	add	r24, r20
    6a72:	95 1f       	adc	r25, r21
    6a74:	99 27       	eor	r25, r25
    6a76:	28 17       	cp	r18, r24
    6a78:	39 07       	cpc	r19, r25
    6a7a:	91 f4       	brne	.+36     	; 0x6aa0 <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    6a7c:	ce 01       	movw	r24, r28
    6a7e:	8e 5a       	subi	r24, 0xAE	; 174
    6a80:	9e 4f       	sbci	r25, 0xFE	; 254
    6a82:	fc 01       	movw	r30, r24
    6a84:	80 81       	ld	r24, Z
    6a86:	91 81       	ldd	r25, Z+1	; 0x01
    6a88:	21 e0       	ldi	r18, 0x01	; 1
    6a8a:	fc 01       	movw	r30, r24
    6a8c:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    6a8e:	ce 01       	movw	r24, r28
    6a90:	8e 5a       	subi	r24, 0xAE	; 174
    6a92:	9e 4f       	sbci	r25, 0xFE	; 254
    6a94:	fc 01       	movw	r30, r24
    6a96:	80 81       	ld	r24, Z
    6a98:	91 81       	ldd	r25, Z+1	; 0x01
    6a9a:	fc 01       	movw	r30, r24
    6a9c:	f1 88       	ldd	r15, Z+17	; 0x11
    6a9e:	10 c0       	rjmp	.+32     	; 0x6ac0 <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    6aa0:	ce 01       	movw	r24, r28
    6aa2:	8e 5a       	subi	r24, 0xAE	; 174
    6aa4:	9e 4f       	sbci	r25, 0xFE	; 254
    6aa6:	fc 01       	movw	r30, r24
    6aa8:	80 81       	ld	r24, Z
    6aaa:	91 81       	ldd	r25, Z+1	; 0x01
    6aac:	fc 01       	movw	r30, r24
    6aae:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    6ab0:	ce 01       	movw	r24, r28
    6ab2:	8e 5a       	subi	r24, 0xAE	; 174
    6ab4:	9e 4f       	sbci	r25, 0xFE	; 254
    6ab6:	fc 01       	movw	r30, r24
    6ab8:	80 81       	ld	r24, Z
    6aba:	91 81       	ldd	r25, Z+1	; 0x01
    6abc:	fc 01       	movw	r30, r24
    6abe:	f1 88       	ldd	r15, Z+17	; 0x11
    6ac0:	8f 2d       	mov	r24, r15
  }
}
    6ac2:	cc 5a       	subi	r28, 0xAC	; 172
    6ac4:	de 4f       	sbci	r29, 0xFE	; 254
    6ac6:	0f b6       	in	r0, 0x3f	; 63
    6ac8:	f8 94       	cli
    6aca:	de bf       	out	0x3e, r29	; 62
    6acc:	0f be       	out	0x3f, r0	; 63
    6ace:	cd bf       	out	0x3d, r28	; 61
    6ad0:	df 91       	pop	r29
    6ad2:	cf 91       	pop	r28
    6ad4:	1f 91       	pop	r17
    6ad6:	0f 91       	pop	r16
    6ad8:	ff 90       	pop	r15
    6ada:	df 90       	pop	r13
    6adc:	cf 90       	pop	r12
    6ade:	bf 90       	pop	r11
    6ae0:	af 90       	pop	r10
    6ae2:	08 95       	ret

00006ae4 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    6ae4:	cf 93       	push	r28
    6ae6:	df 93       	push	r29
    6ae8:	cd b7       	in	r28, 0x3d	; 61
    6aea:	de b7       	in	r29, 0x3e	; 62
    6aec:	2a 97       	sbiw	r28, 0x0a	; 10
    6aee:	0f b6       	in	r0, 0x3f	; 63
    6af0:	f8 94       	cli
    6af2:	de bf       	out	0x3e, r29	; 62
    6af4:	0f be       	out	0x3f, r0	; 63
    6af6:	cd bf       	out	0x3d, r28	; 61
    6af8:	99 87       	std	Y+9, r25	; 0x09
    6afa:	88 87       	std	Y+8, r24	; 0x08
    6afc:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    6afe:	1a 82       	std	Y+2, r1	; 0x02
    6b00:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    6b02:	8a 85       	ldd	r24, Y+10	; 0x0a
    6b04:	88 23       	and	r24, r24
    6b06:	29 f0       	breq	.+10     	; 0x6b12 <_ZN3DHT11expectPulseEb+0x2e>
    6b08:	88 85       	ldd	r24, Y+8	; 0x08
    6b0a:	99 85       	ldd	r25, Y+9	; 0x09
    6b0c:	fc 01       	movw	r30, r24
    6b0e:	87 81       	ldd	r24, Z+7	; 0x07
    6b10:	01 c0       	rjmp	.+2      	; 0x6b14 <_ZN3DHT11expectPulseEb+0x30>
    6b12:	80 e0       	ldi	r24, 0x00	; 0
    6b14:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    6b16:	88 85       	ldd	r24, Y+8	; 0x08
    6b18:	99 85       	ldd	r25, Y+9	; 0x09
    6b1a:	fc 01       	movw	r30, r24
    6b1c:	80 85       	ldd	r24, Z+8	; 0x08
    6b1e:	88 2f       	mov	r24, r24
    6b20:	90 e0       	ldi	r25, 0x00	; 0
    6b22:	88 0f       	add	r24, r24
    6b24:	99 1f       	adc	r25, r25
    6b26:	8e 5b       	subi	r24, 0xBE	; 190
    6b28:	93 4f       	sbci	r25, 0xF3	; 243
    6b2a:	9d 83       	std	Y+5, r25	; 0x05
    6b2c:	8c 83       	std	Y+4, r24	; 0x04
    6b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b30:	9d 81       	ldd	r25, Y+5	; 0x05
    6b32:	fc 01       	movw	r30, r24
    6b34:	25 91       	lpm	r18, Z+
    6b36:	34 91       	lpm	r19, Z
    6b38:	cf 01       	movw	r24, r30
    6b3a:	3f 83       	std	Y+7, r19	; 0x07
    6b3c:	2e 83       	std	Y+6, r18	; 0x06
    6b3e:	9d 83       	std	Y+5, r25	; 0x05
    6b40:	8c 83       	std	Y+4, r24	; 0x04
    6b42:	8e 81       	ldd	r24, Y+6	; 0x06
    6b44:	9f 81       	ldd	r25, Y+7	; 0x07
    6b46:	fc 01       	movw	r30, r24
    6b48:	20 81       	ld	r18, Z
    6b4a:	88 85       	ldd	r24, Y+8	; 0x08
    6b4c:	99 85       	ldd	r25, Y+9	; 0x09
    6b4e:	fc 01       	movw	r30, r24
    6b50:	87 81       	ldd	r24, Z+7	; 0x07
    6b52:	28 23       	and	r18, r24
    6b54:	81 e0       	ldi	r24, 0x01	; 1
    6b56:	9b 81       	ldd	r25, Y+3	; 0x03
    6b58:	29 17       	cp	r18, r25
    6b5a:	09 f0       	breq	.+2      	; 0x6b5e <_ZN3DHT11expectPulseEb+0x7a>
    6b5c:	80 e0       	ldi	r24, 0x00	; 0
    6b5e:	88 23       	and	r24, r24
    6b60:	f9 f0       	breq	.+62     	; 0x6ba0 <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    6b62:	89 81       	ldd	r24, Y+1	; 0x01
    6b64:	9a 81       	ldd	r25, Y+2	; 0x02
    6b66:	9c 01       	movw	r18, r24
    6b68:	2f 5f       	subi	r18, 0xFF	; 255
    6b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b6c:	3a 83       	std	Y+2, r19	; 0x02
    6b6e:	29 83       	std	Y+1, r18	; 0x01
    6b70:	9c 01       	movw	r18, r24
    6b72:	40 e0       	ldi	r20, 0x00	; 0
    6b74:	50 e0       	ldi	r21, 0x00	; 0
    6b76:	88 85       	ldd	r24, Y+8	; 0x08
    6b78:	99 85       	ldd	r25, Y+9	; 0x09
    6b7a:	fc 01       	movw	r30, r24
    6b7c:	85 85       	ldd	r24, Z+13	; 0x0d
    6b7e:	96 85       	ldd	r25, Z+14	; 0x0e
    6b80:	a7 85       	ldd	r26, Z+15	; 0x0f
    6b82:	b0 89       	ldd	r27, Z+16	; 0x10
    6b84:	61 e0       	ldi	r22, 0x01	; 1
    6b86:	28 17       	cp	r18, r24
    6b88:	39 07       	cpc	r19, r25
    6b8a:	4a 07       	cpc	r20, r26
    6b8c:	5b 07       	cpc	r21, r27
    6b8e:	08 f4       	brcc	.+2      	; 0x6b92 <_ZN3DHT11expectPulseEb+0xae>
    6b90:	60 e0       	ldi	r22, 0x00	; 0
    6b92:	66 23       	and	r22, r22
    6b94:	09 f4       	brne	.+2      	; 0x6b98 <_ZN3DHT11expectPulseEb+0xb4>
    6b96:	bf cf       	rjmp	.-130    	; 0x6b16 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    6b98:	8f ef       	ldi	r24, 0xFF	; 255
    6b9a:	9f ef       	ldi	r25, 0xFF	; 255
    6b9c:	dc 01       	movw	r26, r24
    6b9e:	05 c0       	rjmp	.+10     	; 0x6baa <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    6ba0:	89 81       	ldd	r24, Y+1	; 0x01
    6ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ba4:	cc 01       	movw	r24, r24
    6ba6:	a0 e0       	ldi	r26, 0x00	; 0
    6ba8:	b0 e0       	ldi	r27, 0x00	; 0
}
    6baa:	bc 01       	movw	r22, r24
    6bac:	cd 01       	movw	r24, r26
    6bae:	2a 96       	adiw	r28, 0x0a	; 10
    6bb0:	0f b6       	in	r0, 0x3f	; 63
    6bb2:	f8 94       	cli
    6bb4:	de bf       	out	0x3e, r29	; 62
    6bb6:	0f be       	out	0x3f, r0	; 63
    6bb8:	cd bf       	out	0x3d, r28	; 61
    6bba:	df 91       	pop	r29
    6bbc:	cf 91       	pop	r28
    6bbe:	08 95       	ret

00006bc0 <_ZN7TwoWire5writeEi>:
	{
		return 7;
	}

	return dow;
}
    6bc0:	cf 93       	push	r28
    6bc2:	df 93       	push	r29
    6bc4:	00 d0       	rcall	.+0      	; 0x6bc6 <_ZN7TwoWire5writeEi+0x6>
    6bc6:	1f 92       	push	r1
    6bc8:	cd b7       	in	r28, 0x3d	; 61
    6bca:	de b7       	in	r29, 0x3e	; 62
    6bcc:	9a 83       	std	Y+2, r25	; 0x02
    6bce:	89 83       	std	Y+1, r24	; 0x01
    6bd0:	7c 83       	std	Y+4, r23	; 0x04
    6bd2:	6b 83       	std	Y+3, r22	; 0x03
    6bd4:	89 81       	ldd	r24, Y+1	; 0x01
    6bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    6bd8:	fc 01       	movw	r30, r24
    6bda:	80 81       	ld	r24, Z
    6bdc:	91 81       	ldd	r25, Z+1	; 0x01
    6bde:	fc 01       	movw	r30, r24
    6be0:	20 81       	ld	r18, Z
    6be2:	31 81       	ldd	r19, Z+1	; 0x01
    6be4:	4b 81       	ldd	r20, Y+3	; 0x03
    6be6:	89 81       	ldd	r24, Y+1	; 0x01
    6be8:	9a 81       	ldd	r25, Y+2	; 0x02
    6bea:	64 2f       	mov	r22, r20
    6bec:	f9 01       	movw	r30, r18
    6bee:	19 95       	eicall
    6bf0:	0f 90       	pop	r0
    6bf2:	0f 90       	pop	r0
    6bf4:	0f 90       	pop	r0
    6bf6:	0f 90       	pop	r0
    6bf8:	df 91       	pop	r29
    6bfa:	cf 91       	pop	r28
    6bfc:	08 95       	ret

00006bfe <_ZN6DS32315beginEv>:
    6bfe:	cf 93       	push	r28
    6c00:	df 93       	push	r29
    6c02:	1f 92       	push	r1
    6c04:	1f 92       	push	r1
    6c06:	cd b7       	in	r28, 0x3d	; 61
    6c08:	de b7       	in	r29, 0x3e	; 62
    6c0a:	9a 83       	std	Y+2, r25	; 0x02
    6c0c:	89 83       	std	Y+1, r24	; 0x01
    6c0e:	85 ec       	ldi	r24, 0xC5	; 197
    6c10:	95 e0       	ldi	r25, 0x05	; 5
    6c12:	0e 94 67 55 	call	0xaace	; 0xaace <_ZN7TwoWire5beginEv>
    6c16:	89 81       	ldd	r24, Y+1	; 0x01
    6c18:	9a 81       	ldd	r25, Y+2	; 0x02
    6c1a:	40 e0       	ldi	r20, 0x00	; 0
    6c1c:	61 e0       	ldi	r22, 0x01	; 1
    6c1e:	e3 d0       	rcall	.+454    	; 0x6de6 <_ZN6DS323110setBatteryEbb>
    6c20:	89 81       	ldd	r24, Y+1	; 0x01
    6c22:	9a 81       	ldd	r25, Y+2	; 0x02
    6c24:	20 ed       	ldi	r18, 0xD0	; 208
    6c26:	37 e0       	ldi	r19, 0x07	; 7
    6c28:	fc 01       	movw	r30, r24
    6c2a:	31 83       	std	Z+1, r19	; 0x01
    6c2c:	20 83       	st	Z, r18
    6c2e:	89 81       	ldd	r24, Y+1	; 0x01
    6c30:	9a 81       	ldd	r25, Y+2	; 0x02
    6c32:	21 e0       	ldi	r18, 0x01	; 1
    6c34:	fc 01       	movw	r30, r24
    6c36:	22 83       	std	Z+2, r18	; 0x02
    6c38:	89 81       	ldd	r24, Y+1	; 0x01
    6c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    6c3c:	21 e0       	ldi	r18, 0x01	; 1
    6c3e:	fc 01       	movw	r30, r24
    6c40:	23 83       	std	Z+3, r18	; 0x03
    6c42:	89 81       	ldd	r24, Y+1	; 0x01
    6c44:	9a 81       	ldd	r25, Y+2	; 0x02
    6c46:	fc 01       	movw	r30, r24
    6c48:	14 82       	std	Z+4, r1	; 0x04
    6c4a:	89 81       	ldd	r24, Y+1	; 0x01
    6c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    6c4e:	fc 01       	movw	r30, r24
    6c50:	15 82       	std	Z+5, r1	; 0x05
    6c52:	89 81       	ldd	r24, Y+1	; 0x01
    6c54:	9a 81       	ldd	r25, Y+2	; 0x02
    6c56:	fc 01       	movw	r30, r24
    6c58:	16 82       	std	Z+6, r1	; 0x06
    6c5a:	89 81       	ldd	r24, Y+1	; 0x01
    6c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    6c5e:	26 e0       	ldi	r18, 0x06	; 6
    6c60:	fc 01       	movw	r30, r24
    6c62:	27 83       	std	Z+7, r18	; 0x07
    6c64:	29 81       	ldd	r18, Y+1	; 0x01
    6c66:	3a 81       	ldd	r19, Y+2	; 0x02
    6c68:	80 e7       	ldi	r24, 0x70	; 112
    6c6a:	95 e3       	ldi	r25, 0x35	; 53
    6c6c:	ad e6       	ldi	r26, 0x6D	; 109
    6c6e:	b8 e3       	ldi	r27, 0x38	; 56
    6c70:	f9 01       	movw	r30, r18
    6c72:	80 87       	std	Z+8, r24	; 0x08
    6c74:	91 87       	std	Z+9, r25	; 0x09
    6c76:	a2 87       	std	Z+10, r26	; 0x0a
    6c78:	b3 87       	std	Z+11, r27	; 0x0b
    6c7a:	81 e0       	ldi	r24, 0x01	; 1
    6c7c:	0f 90       	pop	r0
    6c7e:	0f 90       	pop	r0
    6c80:	df 91       	pop	r29
    6c82:	cf 91       	pop	r28
    6c84:	08 95       	ret

00006c86 <_ZN6DS323111getDateTimeEv>:
    6c86:	cf 93       	push	r28
    6c88:	df 93       	push	r29
    6c8a:	cd b7       	in	r28, 0x3d	; 61
    6c8c:	de b7       	in	r29, 0x3e	; 62
    6c8e:	64 97       	sbiw	r28, 0x14	; 20
    6c90:	0f b6       	in	r0, 0x3f	; 63
    6c92:	f8 94       	cli
    6c94:	de bf       	out	0x3e, r29	; 62
    6c96:	0f be       	out	0x3f, r0	; 63
    6c98:	cd bf       	out	0x3d, r28	; 61
    6c9a:	9a 8b       	std	Y+18, r25	; 0x12
    6c9c:	89 8b       	std	Y+17, r24	; 0x11
    6c9e:	7c 8b       	std	Y+20, r23	; 0x14
    6ca0:	6b 8b       	std	Y+19, r22	; 0x13
    6ca2:	68 e6       	ldi	r22, 0x68	; 104
    6ca4:	70 e0       	ldi	r23, 0x00	; 0
    6ca6:	85 ec       	ldi	r24, 0xC5	; 197
    6ca8:	95 e0       	ldi	r25, 0x05	; 5
    6caa:	0e 94 71 56 	call	0xace2	; 0xace2 <_ZN7TwoWire17beginTransmissionEi>
    6cae:	60 e0       	ldi	r22, 0x00	; 0
    6cb0:	70 e0       	ldi	r23, 0x00	; 0
    6cb2:	85 ec       	ldi	r24, 0xC5	; 197
    6cb4:	95 e0       	ldi	r25, 0x05	; 5
    6cb6:	84 df       	rcall	.-248    	; 0x6bc0 <_ZN7TwoWire5writeEi>
    6cb8:	85 ec       	ldi	r24, 0xC5	; 197
    6cba:	95 e0       	ldi	r25, 0x05	; 5
    6cbc:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>
    6cc0:	47 e0       	ldi	r20, 0x07	; 7
    6cc2:	50 e0       	ldi	r21, 0x00	; 0
    6cc4:	68 e6       	ldi	r22, 0x68	; 104
    6cc6:	70 e0       	ldi	r23, 0x00	; 0
    6cc8:	85 ec       	ldi	r24, 0xC5	; 197
    6cca:	95 e0       	ldi	r25, 0x05	; 5
    6ccc:	0e 94 3c 56 	call	0xac78	; 0xac78 <_ZN7TwoWire11requestFromEii>
    6cd0:	85 ec       	ldi	r24, 0xC5	; 197
    6cd2:	95 e0       	ldi	r25, 0x05	; 5
    6cd4:	0e 94 3c 57 	call	0xae78	; 0xae78 <_ZN7TwoWire9availableEv>
    6cd8:	21 e0       	ldi	r18, 0x01	; 1
    6cda:	89 2b       	or	r24, r25
    6cdc:	09 f0       	breq	.+2      	; 0x6ce0 <_ZN6DS323111getDateTimeEv+0x5a>
    6cde:	20 e0       	ldi	r18, 0x00	; 0
    6ce0:	22 23       	and	r18, r18
    6ce2:	09 f0       	breq	.+2      	; 0x6ce6 <_ZN6DS323111getDateTimeEv+0x60>
    6ce4:	f5 cf       	rjmp	.-22     	; 0x6cd0 <_ZN6DS323111getDateTimeEv+0x4a>
    6ce6:	86 e0       	ldi	r24, 0x06	; 6
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	9a 83       	std	Y+2, r25	; 0x02
    6cec:	89 83       	std	Y+1, r24	; 0x01
    6cee:	89 81       	ldd	r24, Y+1	; 0x01
    6cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    6cf2:	99 23       	and	r25, r25
    6cf4:	f4 f0       	brlt	.+60     	; 0x6d32 <_ZN6DS323111getDateTimeEv+0xac>
    6cf6:	85 ec       	ldi	r24, 0xC5	; 197
    6cf8:	95 e0       	ldi	r25, 0x05	; 5
    6cfa:	0e 94 55 57 	call	0xaeaa	; 0xaeaa <_ZN7TwoWire4readEv>
    6cfe:	28 2f       	mov	r18, r24
    6d00:	8b 89       	ldd	r24, Y+19	; 0x13
    6d02:	9c 89       	ldd	r25, Y+20	; 0x14
    6d04:	62 2f       	mov	r22, r18
    6d06:	a1 d0       	rcall	.+322    	; 0x6e4a <_ZN6DS32317bcd2decEh>
    6d08:	28 2f       	mov	r18, r24
    6d0a:	30 e0       	ldi	r19, 0x00	; 0
    6d0c:	89 81       	ldd	r24, Y+1	; 0x01
    6d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    6d10:	88 0f       	add	r24, r24
    6d12:	99 1f       	adc	r25, r25
    6d14:	ae 01       	movw	r20, r28
    6d16:	4f 5f       	subi	r20, 0xFF	; 255
    6d18:	5f 4f       	sbci	r21, 0xFF	; 255
    6d1a:	84 0f       	add	r24, r20
    6d1c:	95 1f       	adc	r25, r21
    6d1e:	02 96       	adiw	r24, 0x02	; 2
    6d20:	fc 01       	movw	r30, r24
    6d22:	31 83       	std	Z+1, r19	; 0x01
    6d24:	20 83       	st	Z, r18
    6d26:	89 81       	ldd	r24, Y+1	; 0x01
    6d28:	9a 81       	ldd	r25, Y+2	; 0x02
    6d2a:	01 97       	sbiw	r24, 0x01	; 1
    6d2c:	9a 83       	std	Y+2, r25	; 0x02
    6d2e:	89 83       	std	Y+1, r24	; 0x01
    6d30:	de cf       	rjmp	.-68     	; 0x6cee <_ZN6DS323111getDateTimeEv+0x68>
    6d32:	85 ec       	ldi	r24, 0xC5	; 197
    6d34:	95 e0       	ldi	r25, 0x05	; 5
    6d36:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>
    6d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    6d3e:	80 53       	subi	r24, 0x30	; 48
    6d40:	98 4f       	sbci	r25, 0xF8	; 248
    6d42:	9c 01       	movw	r18, r24
    6d44:	8b 89       	ldd	r24, Y+19	; 0x13
    6d46:	9c 89       	ldd	r25, Y+20	; 0x14
    6d48:	fc 01       	movw	r30, r24
    6d4a:	31 83       	std	Z+1, r19	; 0x01
    6d4c:	20 83       	st	Z, r18
    6d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    6d50:	9e 81       	ldd	r25, Y+6	; 0x06
    6d52:	28 2f       	mov	r18, r24
    6d54:	8b 89       	ldd	r24, Y+19	; 0x13
    6d56:	9c 89       	ldd	r25, Y+20	; 0x14
    6d58:	fc 01       	movw	r30, r24
    6d5a:	22 83       	std	Z+2, r18	; 0x02
    6d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    6d5e:	98 85       	ldd	r25, Y+8	; 0x08
    6d60:	28 2f       	mov	r18, r24
    6d62:	8b 89       	ldd	r24, Y+19	; 0x13
    6d64:	9c 89       	ldd	r25, Y+20	; 0x14
    6d66:	fc 01       	movw	r30, r24
    6d68:	23 83       	std	Z+3, r18	; 0x03
    6d6a:	89 85       	ldd	r24, Y+9	; 0x09
    6d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d6e:	28 2f       	mov	r18, r24
    6d70:	8b 89       	ldd	r24, Y+19	; 0x13
    6d72:	9c 89       	ldd	r25, Y+20	; 0x14
    6d74:	fc 01       	movw	r30, r24
    6d76:	27 83       	std	Z+7, r18	; 0x07
    6d78:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    6d7c:	28 2f       	mov	r18, r24
    6d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    6d80:	9c 89       	ldd	r25, Y+20	; 0x14
    6d82:	fc 01       	movw	r30, r24
    6d84:	24 83       	std	Z+4, r18	; 0x04
    6d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d8a:	28 2f       	mov	r18, r24
    6d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    6d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    6d90:	fc 01       	movw	r30, r24
    6d92:	25 83       	std	Z+5, r18	; 0x05
    6d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d96:	98 89       	ldd	r25, Y+16	; 0x10
    6d98:	28 2f       	mov	r18, r24
    6d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    6d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    6d9e:	fc 01       	movw	r30, r24
    6da0:	26 83       	std	Z+6, r18	; 0x06
    6da2:	8b 89       	ldd	r24, Y+19	; 0x13
    6da4:	9c 89       	ldd	r25, Y+20	; 0x14
    6da6:	5a d1       	rcall	.+692    	; 0x705c <_ZN6DS32318unixtimeEv>
    6da8:	dc 01       	movw	r26, r24
    6daa:	cb 01       	movw	r24, r22
    6dac:	2b 89       	ldd	r18, Y+19	; 0x13
    6dae:	3c 89       	ldd	r19, Y+20	; 0x14
    6db0:	f9 01       	movw	r30, r18
    6db2:	80 87       	std	Z+8, r24	; 0x08
    6db4:	91 87       	std	Z+9, r25	; 0x09
    6db6:	a2 87       	std	Z+10, r26	; 0x0a
    6db8:	b3 87       	std	Z+11, r27	; 0x0b
    6dba:	89 89       	ldd	r24, Y+17	; 0x11
    6dbc:	9a 89       	ldd	r25, Y+18	; 0x12
    6dbe:	2b 89       	ldd	r18, Y+19	; 0x13
    6dc0:	3c 89       	ldd	r19, Y+20	; 0x14
    6dc2:	4c e0       	ldi	r20, 0x0C	; 12
    6dc4:	f9 01       	movw	r30, r18
    6dc6:	dc 01       	movw	r26, r24
    6dc8:	01 90       	ld	r0, Z+
    6dca:	0d 92       	st	X+, r0
    6dcc:	4a 95       	dec	r20
    6dce:	e1 f7       	brne	.-8      	; 0x6dc8 <_ZN6DS323111getDateTimeEv+0x142>
    6dd0:	89 89       	ldd	r24, Y+17	; 0x11
    6dd2:	9a 89       	ldd	r25, Y+18	; 0x12
    6dd4:	64 96       	adiw	r28, 0x14	; 20
    6dd6:	0f b6       	in	r0, 0x3f	; 63
    6dd8:	f8 94       	cli
    6dda:	de bf       	out	0x3e, r29	; 62
    6ddc:	0f be       	out	0x3f, r0	; 63
    6dde:	cd bf       	out	0x3d, r28	; 61
    6de0:	df 91       	pop	r29
    6de2:	cf 91       	pop	r28
    6de4:	08 95       	ret

00006de6 <_ZN6DS323110setBatteryEbb>:
    6de6:	cf 93       	push	r28
    6de8:	df 93       	push	r29
    6dea:	00 d0       	rcall	.+0      	; 0x6dec <_ZN6DS323110setBatteryEbb+0x6>
    6dec:	1f 92       	push	r1
    6dee:	1f 92       	push	r1
    6df0:	cd b7       	in	r28, 0x3d	; 61
    6df2:	de b7       	in	r29, 0x3e	; 62
    6df4:	9b 83       	std	Y+3, r25	; 0x03
    6df6:	8a 83       	std	Y+2, r24	; 0x02
    6df8:	6c 83       	std	Y+4, r22	; 0x04
    6dfa:	4d 83       	std	Y+5, r20	; 0x05
    6dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    6dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    6e00:	6e e0       	ldi	r22, 0x0E	; 14
    6e02:	a4 d1       	rcall	.+840    	; 0x714c <_ZN6DS323113readRegister8Eh>
    6e04:	89 83       	std	Y+1, r24	; 0x01
    6e06:	8d 81       	ldd	r24, Y+5	; 0x05
    6e08:	88 23       	and	r24, r24
    6e0a:	21 f0       	breq	.+8      	; 0x6e14 <_ZN6DS323110setBatteryEbb+0x2e>
    6e0c:	89 81       	ldd	r24, Y+1	; 0x01
    6e0e:	80 64       	ori	r24, 0x40	; 64
    6e10:	89 83       	std	Y+1, r24	; 0x01
    6e12:	03 c0       	rjmp	.+6      	; 0x6e1a <_ZN6DS323110setBatteryEbb+0x34>
    6e14:	89 81       	ldd	r24, Y+1	; 0x01
    6e16:	8f 7b       	andi	r24, 0xBF	; 191
    6e18:	89 83       	std	Y+1, r24	; 0x01
    6e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    6e1c:	88 23       	and	r24, r24
    6e1e:	21 f0       	breq	.+8      	; 0x6e28 <_ZN6DS323110setBatteryEbb+0x42>
    6e20:	89 81       	ldd	r24, Y+1	; 0x01
    6e22:	8b 77       	andi	r24, 0x7B	; 123
    6e24:	89 83       	std	Y+1, r24	; 0x01
    6e26:	03 c0       	rjmp	.+6      	; 0x6e2e <_ZN6DS323110setBatteryEbb+0x48>
    6e28:	89 81       	ldd	r24, Y+1	; 0x01
    6e2a:	80 68       	ori	r24, 0x80	; 128
    6e2c:	89 83       	std	Y+1, r24	; 0x01
    6e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    6e30:	9b 81       	ldd	r25, Y+3	; 0x03
    6e32:	49 81       	ldd	r20, Y+1	; 0x01
    6e34:	6e e0       	ldi	r22, 0x0E	; 14
    6e36:	64 d1       	rcall	.+712    	; 0x7100 <_ZN6DS323114writeRegister8Ehh>
    6e38:	00 00       	nop
    6e3a:	0f 90       	pop	r0
    6e3c:	0f 90       	pop	r0
    6e3e:	0f 90       	pop	r0
    6e40:	0f 90       	pop	r0
    6e42:	0f 90       	pop	r0
    6e44:	df 91       	pop	r29
    6e46:	cf 91       	pop	r28
    6e48:	08 95       	ret

00006e4a <_ZN6DS32317bcd2decEh>:
    6e4a:	cf 93       	push	r28
    6e4c:	df 93       	push	r29
    6e4e:	00 d0       	rcall	.+0      	; 0x6e50 <_ZN6DS32317bcd2decEh+0x6>
    6e50:	cd b7       	in	r28, 0x3d	; 61
    6e52:	de b7       	in	r29, 0x3e	; 62
    6e54:	9a 83       	std	Y+2, r25	; 0x02
    6e56:	89 83       	std	Y+1, r24	; 0x01
    6e58:	6b 83       	std	Y+3, r22	; 0x03
    6e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    6e5c:	82 95       	swap	r24
    6e5e:	8f 70       	andi	r24, 0x0F	; 15
    6e60:	88 0f       	add	r24, r24
    6e62:	98 2f       	mov	r25, r24
    6e64:	99 0f       	add	r25, r25
    6e66:	99 0f       	add	r25, r25
    6e68:	98 0f       	add	r25, r24
    6e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    6e6c:	8f 70       	andi	r24, 0x0F	; 15
    6e6e:	89 0f       	add	r24, r25
    6e70:	0f 90       	pop	r0
    6e72:	0f 90       	pop	r0
    6e74:	0f 90       	pop	r0
    6e76:	df 91       	pop	r29
    6e78:	cf 91       	pop	r28
    6e7a:	08 95       	ret

00006e7c <_ZN6DS32319time2longEjhhh>:
    6e7c:	0f 93       	push	r16
    6e7e:	cf 93       	push	r28
    6e80:	df 93       	push	r29
    6e82:	cd b7       	in	r28, 0x3d	; 61
    6e84:	de b7       	in	r29, 0x3e	; 62
    6e86:	27 97       	sbiw	r28, 0x07	; 7
    6e88:	0f b6       	in	r0, 0x3f	; 63
    6e8a:	f8 94       	cli
    6e8c:	de bf       	out	0x3e, r29	; 62
    6e8e:	0f be       	out	0x3f, r0	; 63
    6e90:	cd bf       	out	0x3d, r28	; 61
    6e92:	9a 83       	std	Y+2, r25	; 0x02
    6e94:	89 83       	std	Y+1, r24	; 0x01
    6e96:	7c 83       	std	Y+4, r23	; 0x04
    6e98:	6b 83       	std	Y+3, r22	; 0x03
    6e9a:	4d 83       	std	Y+5, r20	; 0x05
    6e9c:	2e 83       	std	Y+6, r18	; 0x06
    6e9e:	0f 83       	std	Y+7, r16	; 0x07
    6ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    6ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    6ea4:	9c 01       	movw	r18, r24
    6ea6:	40 e0       	ldi	r20, 0x00	; 0
    6ea8:	50 e0       	ldi	r21, 0x00	; 0
    6eaa:	da 01       	movw	r26, r20
    6eac:	c9 01       	movw	r24, r18
    6eae:	88 0f       	add	r24, r24
    6eb0:	99 1f       	adc	r25, r25
    6eb2:	aa 1f       	adc	r26, r26
    6eb4:	bb 1f       	adc	r27, r27
    6eb6:	82 0f       	add	r24, r18
    6eb8:	93 1f       	adc	r25, r19
    6eba:	a4 1f       	adc	r26, r20
    6ebc:	b5 1f       	adc	r27, r21
    6ebe:	88 0f       	add	r24, r24
    6ec0:	99 1f       	adc	r25, r25
    6ec2:	aa 1f       	adc	r26, r26
    6ec4:	bb 1f       	adc	r27, r27
    6ec6:	88 0f       	add	r24, r24
    6ec8:	99 1f       	adc	r25, r25
    6eca:	aa 1f       	adc	r26, r26
    6ecc:	bb 1f       	adc	r27, r27
    6ece:	88 0f       	add	r24, r24
    6ed0:	99 1f       	adc	r25, r25
    6ed2:	aa 1f       	adc	r26, r26
    6ed4:	bb 1f       	adc	r27, r27
    6ed6:	9c 01       	movw	r18, r24
    6ed8:	ad 01       	movw	r20, r26
    6eda:	8d 81       	ldd	r24, Y+5	; 0x05
    6edc:	88 2f       	mov	r24, r24
    6ede:	90 e0       	ldi	r25, 0x00	; 0
    6ee0:	a0 e0       	ldi	r26, 0x00	; 0
    6ee2:	b0 e0       	ldi	r27, 0x00	; 0
    6ee4:	28 0f       	add	r18, r24
    6ee6:	39 1f       	adc	r19, r25
    6ee8:	4a 1f       	adc	r20, r26
    6eea:	5b 1f       	adc	r21, r27
    6eec:	8c e3       	ldi	r24, 0x3C	; 60
    6eee:	90 e0       	ldi	r25, 0x00	; 0
    6ef0:	dc 01       	movw	r26, r24
    6ef2:	0e 94 ee 63 	call	0xc7dc	; 0xc7dc <__muluhisi3>
    6ef6:	9b 01       	movw	r18, r22
    6ef8:	ac 01       	movw	r20, r24
    6efa:	8e 81       	ldd	r24, Y+6	; 0x06
    6efc:	88 2f       	mov	r24, r24
    6efe:	90 e0       	ldi	r25, 0x00	; 0
    6f00:	a0 e0       	ldi	r26, 0x00	; 0
    6f02:	b0 e0       	ldi	r27, 0x00	; 0
    6f04:	28 0f       	add	r18, r24
    6f06:	39 1f       	adc	r19, r25
    6f08:	4a 1f       	adc	r20, r26
    6f0a:	5b 1f       	adc	r21, r27
    6f0c:	8c e3       	ldi	r24, 0x3C	; 60
    6f0e:	90 e0       	ldi	r25, 0x00	; 0
    6f10:	dc 01       	movw	r26, r24
    6f12:	0e 94 ee 63 	call	0xc7dc	; 0xc7dc <__muluhisi3>
    6f16:	9b 01       	movw	r18, r22
    6f18:	ac 01       	movw	r20, r24
    6f1a:	8f 81       	ldd	r24, Y+7	; 0x07
    6f1c:	88 2f       	mov	r24, r24
    6f1e:	90 e0       	ldi	r25, 0x00	; 0
    6f20:	a0 e0       	ldi	r26, 0x00	; 0
    6f22:	b0 e0       	ldi	r27, 0x00	; 0
    6f24:	82 0f       	add	r24, r18
    6f26:	93 1f       	adc	r25, r19
    6f28:	a4 1f       	adc	r26, r20
    6f2a:	b5 1f       	adc	r27, r21
    6f2c:	bc 01       	movw	r22, r24
    6f2e:	cd 01       	movw	r24, r26
    6f30:	27 96       	adiw	r28, 0x07	; 7
    6f32:	0f b6       	in	r0, 0x3f	; 63
    6f34:	f8 94       	cli
    6f36:	de bf       	out	0x3e, r29	; 62
    6f38:	0f be       	out	0x3f, r0	; 63
    6f3a:	cd bf       	out	0x3d, r28	; 61
    6f3c:	df 91       	pop	r29
    6f3e:	cf 91       	pop	r28
    6f40:	0f 91       	pop	r16
    6f42:	08 95       	ret

00006f44 <_ZN6DS323110isLeapYearEj>:
    6f44:	cf 93       	push	r28
    6f46:	df 93       	push	r29
    6f48:	00 d0       	rcall	.+0      	; 0x6f4a <_ZN6DS323110isLeapYearEj+0x6>
    6f4a:	1f 92       	push	r1
    6f4c:	cd b7       	in	r28, 0x3d	; 61
    6f4e:	de b7       	in	r29, 0x3e	; 62
    6f50:	9a 83       	std	Y+2, r25	; 0x02
    6f52:	89 83       	std	Y+1, r24	; 0x01
    6f54:	7c 83       	std	Y+4, r23	; 0x04
    6f56:	6b 83       	std	Y+3, r22	; 0x03
    6f58:	8b 81       	ldd	r24, Y+3	; 0x03
    6f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    6f5c:	83 70       	andi	r24, 0x03	; 3
    6f5e:	99 27       	eor	r25, r25
    6f60:	21 e0       	ldi	r18, 0x01	; 1
    6f62:	89 2b       	or	r24, r25
    6f64:	09 f0       	breq	.+2      	; 0x6f68 <_ZN6DS323110isLeapYearEj+0x24>
    6f66:	20 e0       	ldi	r18, 0x00	; 0
    6f68:	82 2f       	mov	r24, r18
    6f6a:	0f 90       	pop	r0
    6f6c:	0f 90       	pop	r0
    6f6e:	0f 90       	pop	r0
    6f70:	0f 90       	pop	r0
    6f72:	df 91       	pop	r29
    6f74:	cf 91       	pop	r28
    6f76:	08 95       	ret

00006f78 <_ZN6DS32319date2daysEjhh>:
    6f78:	cf 93       	push	r28
    6f7a:	df 93       	push	r29
    6f7c:	cd b7       	in	r28, 0x3d	; 61
    6f7e:	de b7       	in	r29, 0x3e	; 62
    6f80:	2c 97       	sbiw	r28, 0x0c	; 12
    6f82:	0f b6       	in	r0, 0x3f	; 63
    6f84:	f8 94       	cli
    6f86:	de bf       	out	0x3e, r29	; 62
    6f88:	0f be       	out	0x3f, r0	; 63
    6f8a:	cd bf       	out	0x3d, r28	; 61
    6f8c:	98 87       	std	Y+8, r25	; 0x08
    6f8e:	8f 83       	std	Y+7, r24	; 0x07
    6f90:	7a 87       	std	Y+10, r23	; 0x0a
    6f92:	69 87       	std	Y+9, r22	; 0x09
    6f94:	4b 87       	std	Y+11, r20	; 0x0b
    6f96:	2c 87       	std	Y+12, r18	; 0x0c
    6f98:	89 85       	ldd	r24, Y+9	; 0x09
    6f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f9c:	80 5d       	subi	r24, 0xD0	; 208
    6f9e:	97 40       	sbci	r25, 0x07	; 7
    6fa0:	9a 87       	std	Y+10, r25	; 0x0a
    6fa2:	89 87       	std	Y+9, r24	; 0x09
    6fa4:	8c 85       	ldd	r24, Y+12	; 0x0c
    6fa6:	88 2f       	mov	r24, r24
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	9a 83       	std	Y+2, r25	; 0x02
    6fac:	89 83       	std	Y+1, r24	; 0x01
    6fae:	81 e0       	ldi	r24, 0x01	; 1
    6fb0:	8b 83       	std	Y+3, r24	; 0x03
    6fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    6fb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    6fb6:	98 17       	cp	r25, r24
    6fb8:	d0 f4       	brcc	.+52     	; 0x6fee <_ZN6DS32319date2daysEjhh+0x76>
    6fba:	8b 81       	ldd	r24, Y+3	; 0x03
    6fbc:	88 2f       	mov	r24, r24
    6fbe:	90 e0       	ldi	r25, 0x00	; 0
    6fc0:	01 97       	sbiw	r24, 0x01	; 1
    6fc2:	8c 59       	subi	r24, 0x9C	; 156
    6fc4:	94 4f       	sbci	r25, 0xF4	; 244
    6fc6:	9d 83       	std	Y+5, r25	; 0x05
    6fc8:	8c 83       	std	Y+4, r24	; 0x04
    6fca:	8c 81       	ldd	r24, Y+4	; 0x04
    6fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    6fce:	fc 01       	movw	r30, r24
    6fd0:	84 91       	lpm	r24, Z
    6fd2:	8e 83       	std	Y+6, r24	; 0x06
    6fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    6fd6:	88 2f       	mov	r24, r24
    6fd8:	90 e0       	ldi	r25, 0x00	; 0
    6fda:	29 81       	ldd	r18, Y+1	; 0x01
    6fdc:	3a 81       	ldd	r19, Y+2	; 0x02
    6fde:	82 0f       	add	r24, r18
    6fe0:	93 1f       	adc	r25, r19
    6fe2:	9a 83       	std	Y+2, r25	; 0x02
    6fe4:	89 83       	std	Y+1, r24	; 0x01
    6fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    6fe8:	8f 5f       	subi	r24, 0xFF	; 255
    6fea:	8b 83       	std	Y+3, r24	; 0x03
    6fec:	e2 cf       	rjmp	.-60     	; 0x6fb2 <_ZN6DS32319date2daysEjhh+0x3a>
    6fee:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ff0:	82 30       	cpi	r24, 0x02	; 2
    6ff2:	51 f4       	brne	.+20     	; 0x7008 <_ZN6DS32319date2daysEjhh+0x90>
    6ff4:	29 85       	ldd	r18, Y+9	; 0x09
    6ff6:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ff8:	8f 81       	ldd	r24, Y+7	; 0x07
    6ffa:	98 85       	ldd	r25, Y+8	; 0x08
    6ffc:	b9 01       	movw	r22, r18
    6ffe:	a2 df       	rcall	.-188    	; 0x6f44 <_ZN6DS323110isLeapYearEj>
    7000:	88 23       	and	r24, r24
    7002:	11 f0       	breq	.+4      	; 0x7008 <_ZN6DS32319date2daysEjhh+0x90>
    7004:	81 e0       	ldi	r24, 0x01	; 1
    7006:	01 c0       	rjmp	.+2      	; 0x700a <_ZN6DS32319date2daysEjhh+0x92>
    7008:	80 e0       	ldi	r24, 0x00	; 0
    700a:	88 23       	and	r24, r24
    700c:	29 f0       	breq	.+10     	; 0x7018 <_ZN6DS32319date2daysEjhh+0xa0>
    700e:	89 81       	ldd	r24, Y+1	; 0x01
    7010:	9a 81       	ldd	r25, Y+2	; 0x02
    7012:	01 96       	adiw	r24, 0x01	; 1
    7014:	9a 83       	std	Y+2, r25	; 0x02
    7016:	89 83       	std	Y+1, r24	; 0x01
    7018:	49 85       	ldd	r20, Y+9	; 0x09
    701a:	5a 85       	ldd	r21, Y+10	; 0x0a
    701c:	8d e6       	ldi	r24, 0x6D	; 109
    701e:	91 e0       	ldi	r25, 0x01	; 1
    7020:	48 9f       	mul	r20, r24
    7022:	90 01       	movw	r18, r0
    7024:	49 9f       	mul	r20, r25
    7026:	30 0d       	add	r19, r0
    7028:	58 9f       	mul	r21, r24
    702a:	30 0d       	add	r19, r0
    702c:	11 24       	eor	r1, r1
    702e:	89 81       	ldd	r24, Y+1	; 0x01
    7030:	9a 81       	ldd	r25, Y+2	; 0x02
    7032:	28 0f       	add	r18, r24
    7034:	39 1f       	adc	r19, r25
    7036:	89 85       	ldd	r24, Y+9	; 0x09
    7038:	9a 85       	ldd	r25, Y+10	; 0x0a
    703a:	03 96       	adiw	r24, 0x03	; 3
    703c:	96 95       	lsr	r25
    703e:	87 95       	ror	r24
    7040:	96 95       	lsr	r25
    7042:	87 95       	ror	r24
    7044:	82 0f       	add	r24, r18
    7046:	93 1f       	adc	r25, r19
    7048:	01 97       	sbiw	r24, 0x01	; 1
    704a:	2c 96       	adiw	r28, 0x0c	; 12
    704c:	0f b6       	in	r0, 0x3f	; 63
    704e:	f8 94       	cli
    7050:	de bf       	out	0x3e, r29	; 62
    7052:	0f be       	out	0x3f, r0	; 63
    7054:	cd bf       	out	0x3d, r28	; 61
    7056:	df 91       	pop	r29
    7058:	cf 91       	pop	r28
    705a:	08 95       	ret

0000705c <_ZN6DS32318unixtimeEv>:
    705c:	ff 92       	push	r15
    705e:	0f 93       	push	r16
    7060:	1f 93       	push	r17
    7062:	cf 93       	push	r28
    7064:	df 93       	push	r29
    7066:	00 d0       	rcall	.+0      	; 0x7068 <_ZN6DS32318unixtimeEv+0xc>
    7068:	00 d0       	rcall	.+0      	; 0x706a <_ZN6DS32318unixtimeEv+0xe>
    706a:	cd b7       	in	r28, 0x3d	; 61
    706c:	de b7       	in	r29, 0x3e	; 62
    706e:	9e 83       	std	Y+6, r25	; 0x06
    7070:	8d 83       	std	Y+5, r24	; 0x05
    7072:	8d 81       	ldd	r24, Y+5	; 0x05
    7074:	9e 81       	ldd	r25, Y+6	; 0x06
    7076:	fc 01       	movw	r30, r24
    7078:	06 81       	ldd	r16, Z+6	; 0x06
    707a:	8d 81       	ldd	r24, Y+5	; 0x05
    707c:	9e 81       	ldd	r25, Y+6	; 0x06
    707e:	fc 01       	movw	r30, r24
    7080:	f5 80       	ldd	r15, Z+5	; 0x05
    7082:	8d 81       	ldd	r24, Y+5	; 0x05
    7084:	9e 81       	ldd	r25, Y+6	; 0x06
    7086:	fc 01       	movw	r30, r24
    7088:	14 81       	ldd	r17, Z+4	; 0x04
    708a:	8d 81       	ldd	r24, Y+5	; 0x05
    708c:	9e 81       	ldd	r25, Y+6	; 0x06
    708e:	fc 01       	movw	r30, r24
    7090:	23 81       	ldd	r18, Z+3	; 0x03
    7092:	8d 81       	ldd	r24, Y+5	; 0x05
    7094:	9e 81       	ldd	r25, Y+6	; 0x06
    7096:	fc 01       	movw	r30, r24
    7098:	32 81       	ldd	r19, Z+2	; 0x02
    709a:	8d 81       	ldd	r24, Y+5	; 0x05
    709c:	9e 81       	ldd	r25, Y+6	; 0x06
    709e:	fc 01       	movw	r30, r24
    70a0:	60 81       	ld	r22, Z
    70a2:	71 81       	ldd	r23, Z+1	; 0x01
    70a4:	8d 81       	ldd	r24, Y+5	; 0x05
    70a6:	9e 81       	ldd	r25, Y+6	; 0x06
    70a8:	43 2f       	mov	r20, r19
    70aa:	66 df       	rcall	.-308    	; 0x6f78 <_ZN6DS32319date2daysEjhh>
    70ac:	bc 01       	movw	r22, r24
    70ae:	8d 81       	ldd	r24, Y+5	; 0x05
    70b0:	9e 81       	ldd	r25, Y+6	; 0x06
    70b2:	2f 2d       	mov	r18, r15
    70b4:	41 2f       	mov	r20, r17
    70b6:	e2 de       	rcall	.-572    	; 0x6e7c <_ZN6DS32319time2longEjhhh>
    70b8:	dc 01       	movw	r26, r24
    70ba:	cb 01       	movw	r24, r22
    70bc:	89 83       	std	Y+1, r24	; 0x01
    70be:	9a 83       	std	Y+2, r25	; 0x02
    70c0:	ab 83       	std	Y+3, r26	; 0x03
    70c2:	bc 83       	std	Y+4, r27	; 0x04
    70c4:	89 81       	ldd	r24, Y+1	; 0x01
    70c6:	9a 81       	ldd	r25, Y+2	; 0x02
    70c8:	ab 81       	ldd	r26, Y+3	; 0x03
    70ca:	bc 81       	ldd	r27, Y+4	; 0x04
    70cc:	80 59       	subi	r24, 0x90	; 144
    70ce:	9a 4c       	sbci	r25, 0xCA	; 202
    70d0:	a2 49       	sbci	r26, 0x92	; 146
    70d2:	b7 4c       	sbci	r27, 0xC7	; 199
    70d4:	89 83       	std	Y+1, r24	; 0x01
    70d6:	9a 83       	std	Y+2, r25	; 0x02
    70d8:	ab 83       	std	Y+3, r26	; 0x03
    70da:	bc 83       	std	Y+4, r27	; 0x04
    70dc:	89 81       	ldd	r24, Y+1	; 0x01
    70de:	9a 81       	ldd	r25, Y+2	; 0x02
    70e0:	ab 81       	ldd	r26, Y+3	; 0x03
    70e2:	bc 81       	ldd	r27, Y+4	; 0x04
    70e4:	bc 01       	movw	r22, r24
    70e6:	cd 01       	movw	r24, r26
    70e8:	26 96       	adiw	r28, 0x06	; 6
    70ea:	0f b6       	in	r0, 0x3f	; 63
    70ec:	f8 94       	cli
    70ee:	de bf       	out	0x3e, r29	; 62
    70f0:	0f be       	out	0x3f, r0	; 63
    70f2:	cd bf       	out	0x3d, r28	; 61
    70f4:	df 91       	pop	r29
    70f6:	cf 91       	pop	r28
    70f8:	1f 91       	pop	r17
    70fa:	0f 91       	pop	r16
    70fc:	ff 90       	pop	r15
    70fe:	08 95       	ret

00007100 <_ZN6DS323114writeRegister8Ehh>:

void DS3231::writeRegister8(uint8_t reg, uint8_t value)
{
    7100:	cf 93       	push	r28
    7102:	df 93       	push	r29
    7104:	00 d0       	rcall	.+0      	; 0x7106 <_ZN6DS323114writeRegister8Ehh+0x6>
    7106:	1f 92       	push	r1
    7108:	cd b7       	in	r28, 0x3d	; 61
    710a:	de b7       	in	r29, 0x3e	; 62
    710c:	9a 83       	std	Y+2, r25	; 0x02
    710e:	89 83       	std	Y+1, r24	; 0x01
    7110:	6b 83       	std	Y+3, r22	; 0x03
    7112:	4c 83       	std	Y+4, r20	; 0x04
	Wire.beginTransmission(DS3231_ADDRESS);
    7114:	68 e6       	ldi	r22, 0x68	; 104
    7116:	70 e0       	ldi	r23, 0x00	; 0
    7118:	85 ec       	ldi	r24, 0xC5	; 197
    711a:	95 e0       	ldi	r25, 0x05	; 5
    711c:	0e 94 71 56 	call	0xace2	; 0xace2 <_ZN7TwoWire17beginTransmissionEi>
	#if ARDUINO >= 100
	Wire.write(reg);
    7120:	6b 81       	ldd	r22, Y+3	; 0x03
    7122:	85 ec       	ldi	r24, 0xC5	; 197
    7124:	95 e0       	ldi	r25, 0x05	; 5
    7126:	0e 94 bd 56 	call	0xad7a	; 0xad7a <_ZN7TwoWire5writeEh>
	Wire.write(value);
    712a:	6c 81       	ldd	r22, Y+4	; 0x04
    712c:	85 ec       	ldi	r24, 0xC5	; 197
    712e:	95 e0       	ldi	r25, 0x05	; 5
    7130:	0e 94 bd 56 	call	0xad7a	; 0xad7a <_ZN7TwoWire5writeEh>
	#else
	Wire.send(reg);
	Wire.send(value);
	#endif
	Wire.endTransmission();
    7134:	85 ec       	ldi	r24, 0xC5	; 197
    7136:	95 e0       	ldi	r25, 0x05	; 5
    7138:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>
}
    713c:	00 00       	nop
    713e:	0f 90       	pop	r0
    7140:	0f 90       	pop	r0
    7142:	0f 90       	pop	r0
    7144:	0f 90       	pop	r0
    7146:	df 91       	pop	r29
    7148:	cf 91       	pop	r28
    714a:	08 95       	ret

0000714c <_ZN6DS323113readRegister8Eh>:

uint8_t DS3231::readRegister8(uint8_t reg)
{
    714c:	cf 93       	push	r28
    714e:	df 93       	push	r29
    7150:	00 d0       	rcall	.+0      	; 0x7152 <_ZN6DS323113readRegister8Eh+0x6>
    7152:	1f 92       	push	r1
    7154:	cd b7       	in	r28, 0x3d	; 61
    7156:	de b7       	in	r29, 0x3e	; 62
    7158:	9b 83       	std	Y+3, r25	; 0x03
    715a:	8a 83       	std	Y+2, r24	; 0x02
    715c:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t value;
	Wire.beginTransmission(DS3231_ADDRESS);
    715e:	68 e6       	ldi	r22, 0x68	; 104
    7160:	70 e0       	ldi	r23, 0x00	; 0
    7162:	85 ec       	ldi	r24, 0xC5	; 197
    7164:	95 e0       	ldi	r25, 0x05	; 5
    7166:	0e 94 71 56 	call	0xace2	; 0xace2 <_ZN7TwoWire17beginTransmissionEi>
	#if ARDUINO >= 100
	Wire.write(reg);
    716a:	6c 81       	ldd	r22, Y+4	; 0x04
    716c:	85 ec       	ldi	r24, 0xC5	; 197
    716e:	95 e0       	ldi	r25, 0x05	; 5
    7170:	0e 94 bd 56 	call	0xad7a	; 0xad7a <_ZN7TwoWire5writeEh>
	#else
	Wire.send(reg);
	#endif
	Wire.endTransmission();
    7174:	85 ec       	ldi	r24, 0xC5	; 197
    7176:	95 e0       	ldi	r25, 0x05	; 5
    7178:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(DS3231_ADDRESS, 1);
    717c:	41 e0       	ldi	r20, 0x01	; 1
    717e:	50 e0       	ldi	r21, 0x00	; 0
    7180:	68 e6       	ldi	r22, 0x68	; 104
    7182:	70 e0       	ldi	r23, 0x00	; 0
    7184:	85 ec       	ldi	r24, 0xC5	; 197
    7186:	95 e0       	ldi	r25, 0x05	; 5
    7188:	0e 94 3c 56 	call	0xac78	; 0xac78 <_ZN7TwoWire11requestFromEii>
	while(!Wire.available()) {};
    718c:	85 ec       	ldi	r24, 0xC5	; 197
    718e:	95 e0       	ldi	r25, 0x05	; 5
    7190:	0e 94 3c 57 	call	0xae78	; 0xae78 <_ZN7TwoWire9availableEv>
    7194:	21 e0       	ldi	r18, 0x01	; 1
    7196:	89 2b       	or	r24, r25
    7198:	09 f0       	breq	.+2      	; 0x719c <_ZN6DS323113readRegister8Eh+0x50>
    719a:	20 e0       	ldi	r18, 0x00	; 0
    719c:	22 23       	and	r18, r18
    719e:	09 f0       	breq	.+2      	; 0x71a2 <_ZN6DS323113readRegister8Eh+0x56>
    71a0:	f5 cf       	rjmp	.-22     	; 0x718c <_ZN6DS323113readRegister8Eh+0x40>
	#if ARDUINO >= 100
	value = Wire.read();
    71a2:	85 ec       	ldi	r24, 0xC5	; 197
    71a4:	95 e0       	ldi	r25, 0x05	; 5
    71a6:	0e 94 55 57 	call	0xaeaa	; 0xaeaa <_ZN7TwoWire4readEv>
    71aa:	89 83       	std	Y+1, r24	; 0x01
	#else
	value = Wire.receive();
	#endif;
	Wire.endTransmission();
    71ac:	85 ec       	ldi	r24, 0xC5	; 197
    71ae:	95 e0       	ldi	r25, 0x05	; 5
    71b0:	0e 94 ac 56 	call	0xad58	; 0xad58 <_ZN7TwoWire15endTransmissionEv>

	return value;
    71b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    71b6:	0f 90       	pop	r0
    71b8:	0f 90       	pop	r0
    71ba:	0f 90       	pop	r0
    71bc:	0f 90       	pop	r0
    71be:	df 91       	pop	r29
    71c0:	cf 91       	pop	r28
    71c2:	08 95       	ret

000071c4 <_ZN6HCSR044initEiPii>:
	this->n = n;
	pinMode(this->out, OUTPUT);
	for(int i=0;i<n;i++){ pinMode(this->echo[i], INPUT); }
}
HCSR04::HCSR04(int out,int echo){this->init(out,new int[1]{echo},1);}
HCSR04::HCSR04(int out,int echo[],int n){this->init(out,echo,n);}
    71c4:	cf 93       	push	r28
    71c6:	df 93       	push	r29
    71c8:	cd b7       	in	r28, 0x3d	; 61
    71ca:	de b7       	in	r29, 0x3e	; 62
    71cc:	2a 97       	sbiw	r28, 0x0a	; 10
    71ce:	0f b6       	in	r0, 0x3f	; 63
    71d0:	f8 94       	cli
    71d2:	de bf       	out	0x3e, r29	; 62
    71d4:	0f be       	out	0x3f, r0	; 63
    71d6:	cd bf       	out	0x3d, r28	; 61
    71d8:	9c 83       	std	Y+4, r25	; 0x04
    71da:	8b 83       	std	Y+3, r24	; 0x03
    71dc:	7e 83       	std	Y+6, r23	; 0x06
    71de:	6d 83       	std	Y+5, r22	; 0x05
    71e0:	58 87       	std	Y+8, r21	; 0x08
    71e2:	4f 83       	std	Y+7, r20	; 0x07
    71e4:	3a 87       	std	Y+10, r19	; 0x0a
    71e6:	29 87       	std	Y+9, r18	; 0x09
    71e8:	8b 81       	ldd	r24, Y+3	; 0x03
    71ea:	9c 81       	ldd	r25, Y+4	; 0x04
    71ec:	2d 81       	ldd	r18, Y+5	; 0x05
    71ee:	3e 81       	ldd	r19, Y+6	; 0x06
    71f0:	fc 01       	movw	r30, r24
    71f2:	31 83       	std	Z+1, r19	; 0x01
    71f4:	20 83       	st	Z, r18
    71f6:	8b 81       	ldd	r24, Y+3	; 0x03
    71f8:	9c 81       	ldd	r25, Y+4	; 0x04
    71fa:	2f 81       	ldd	r18, Y+7	; 0x07
    71fc:	38 85       	ldd	r19, Y+8	; 0x08
    71fe:	fc 01       	movw	r30, r24
    7200:	33 83       	std	Z+3, r19	; 0x03
    7202:	22 83       	std	Z+2, r18	; 0x02
    7204:	8b 81       	ldd	r24, Y+3	; 0x03
    7206:	9c 81       	ldd	r25, Y+4	; 0x04
    7208:	29 85       	ldd	r18, Y+9	; 0x09
    720a:	3a 85       	ldd	r19, Y+10	; 0x0a
    720c:	fc 01       	movw	r30, r24
    720e:	35 83       	std	Z+5, r19	; 0x05
    7210:	24 83       	std	Z+4, r18	; 0x04
    7212:	8b 81       	ldd	r24, Y+3	; 0x03
    7214:	9c 81       	ldd	r25, Y+4	; 0x04
    7216:	fc 01       	movw	r30, r24
    7218:	80 81       	ld	r24, Z
    721a:	91 81       	ldd	r25, Z+1	; 0x01
    721c:	61 e0       	ldi	r22, 0x01	; 1
    721e:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    7222:	1a 82       	std	Y+2, r1	; 0x02
    7224:	19 82       	std	Y+1, r1	; 0x01
    7226:	29 81       	ldd	r18, Y+1	; 0x01
    7228:	3a 81       	ldd	r19, Y+2	; 0x02
    722a:	89 85       	ldd	r24, Y+9	; 0x09
    722c:	9a 85       	ldd	r25, Y+10	; 0x0a
    722e:	28 17       	cp	r18, r24
    7230:	39 07       	cpc	r19, r25
    7232:	bc f4       	brge	.+46     	; 0x7262 <_ZN6HCSR044initEiPii+0x9e>
    7234:	8b 81       	ldd	r24, Y+3	; 0x03
    7236:	9c 81       	ldd	r25, Y+4	; 0x04
    7238:	fc 01       	movw	r30, r24
    723a:	22 81       	ldd	r18, Z+2	; 0x02
    723c:	33 81       	ldd	r19, Z+3	; 0x03
    723e:	89 81       	ldd	r24, Y+1	; 0x01
    7240:	9a 81       	ldd	r25, Y+2	; 0x02
    7242:	88 0f       	add	r24, r24
    7244:	99 1f       	adc	r25, r25
    7246:	82 0f       	add	r24, r18
    7248:	93 1f       	adc	r25, r19
    724a:	fc 01       	movw	r30, r24
    724c:	80 81       	ld	r24, Z
    724e:	91 81       	ldd	r25, Z+1	; 0x01
    7250:	60 e0       	ldi	r22, 0x00	; 0
    7252:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    7256:	89 81       	ldd	r24, Y+1	; 0x01
    7258:	9a 81       	ldd	r25, Y+2	; 0x02
    725a:	01 96       	adiw	r24, 0x01	; 1
    725c:	9a 83       	std	Y+2, r25	; 0x02
    725e:	89 83       	std	Y+1, r24	; 0x01
    7260:	e2 cf       	rjmp	.-60     	; 0x7226 <_ZN6HCSR044initEiPii+0x62>
    7262:	00 00       	nop
    7264:	2a 96       	adiw	r28, 0x0a	; 10
    7266:	0f b6       	in	r0, 0x3f	; 63
    7268:	f8 94       	cli
    726a:	de bf       	out	0x3e, r29	; 62
    726c:	0f be       	out	0x3f, r0	; 63
    726e:	cd bf       	out	0x3d, r28	; 61
    7270:	df 91       	pop	r29
    7272:	cf 91       	pop	r28
    7274:	08 95       	ret

00007276 <_ZN6HCSR04C1Eii>:
    7276:	cf 93       	push	r28
    7278:	df 93       	push	r29
    727a:	00 d0       	rcall	.+0      	; 0x727c <_ZN6HCSR04C1Eii+0x6>
    727c:	00 d0       	rcall	.+0      	; 0x727e <_ZN6HCSR04C1Eii+0x8>
    727e:	cd b7       	in	r28, 0x3d	; 61
    7280:	de b7       	in	r29, 0x3e	; 62
    7282:	9a 83       	std	Y+2, r25	; 0x02
    7284:	89 83       	std	Y+1, r24	; 0x01
    7286:	7c 83       	std	Y+4, r23	; 0x04
    7288:	6b 83       	std	Y+3, r22	; 0x03
    728a:	5e 83       	std	Y+6, r21	; 0x06
    728c:	4d 83       	std	Y+5, r20	; 0x05
    728e:	82 e0       	ldi	r24, 0x02	; 2
    7290:	90 e0       	ldi	r25, 0x00	; 0
    7292:	0e 94 9a 5c 	call	0xb934	; 0xb934 <_Znaj>
    7296:	ac 01       	movw	r20, r24
    7298:	9a 01       	movw	r18, r20
    729a:	8d 81       	ldd	r24, Y+5	; 0x05
    729c:	9e 81       	ldd	r25, Y+6	; 0x06
    729e:	f9 01       	movw	r30, r18
    72a0:	91 83       	std	Z+1, r25	; 0x01
    72a2:	80 83       	st	Z, r24
    72a4:	6b 81       	ldd	r22, Y+3	; 0x03
    72a6:	7c 81       	ldd	r23, Y+4	; 0x04
    72a8:	89 81       	ldd	r24, Y+1	; 0x01
    72aa:	9a 81       	ldd	r25, Y+2	; 0x02
    72ac:	21 e0       	ldi	r18, 0x01	; 1
    72ae:	30 e0       	ldi	r19, 0x00	; 0
    72b0:	89 df       	rcall	.-238    	; 0x71c4 <_ZN6HCSR044initEiPii>
    72b2:	00 00       	nop
    72b4:	26 96       	adiw	r28, 0x06	; 6
    72b6:	0f b6       	in	r0, 0x3f	; 63
    72b8:	f8 94       	cli
    72ba:	de bf       	out	0x3e, r29	; 62
    72bc:	0f be       	out	0x3f, r0	; 63
    72be:	cd bf       	out	0x3d, r28	; 61
    72c0:	df 91       	pop	r29
    72c2:	cf 91       	pop	r28
    72c4:	08 95       	ret

000072c6 <_ZN6HCSR04D1Ev>:
HCSR04::~HCSR04()
    72c6:	cf 93       	push	r28
    72c8:	df 93       	push	r29
    72ca:	1f 92       	push	r1
    72cc:	1f 92       	push	r1
    72ce:	cd b7       	in	r28, 0x3d	; 61
    72d0:	de b7       	in	r29, 0x3e	; 62
    72d2:	9a 83       	std	Y+2, r25	; 0x02
    72d4:	89 83       	std	Y+1, r24	; 0x01
{
	~this->out;
	delete[] this->echo;
    72d6:	89 81       	ldd	r24, Y+1	; 0x01
    72d8:	9a 81       	ldd	r25, Y+2	; 0x02
    72da:	fc 01       	movw	r30, r24
    72dc:	82 81       	ldd	r24, Z+2	; 0x02
    72de:	93 81       	ldd	r25, Z+3	; 0x03
    72e0:	89 2b       	or	r24, r25
    72e2:	39 f0       	breq	.+14     	; 0x72f2 <_ZN6HCSR04D1Ev+0x2c>
    72e4:	89 81       	ldd	r24, Y+1	; 0x01
    72e6:	9a 81       	ldd	r25, Y+2	; 0x02
    72e8:	fc 01       	movw	r30, r24
    72ea:	82 81       	ldd	r24, Z+2	; 0x02
    72ec:	93 81       	ldd	r25, Z+3	; 0x03
    72ee:	0e 94 9b 5c 	call	0xb936	; 0xb936 <_ZdaPv>
	~this->n;
}
    72f2:	00 00       	nop
    72f4:	0f 90       	pop	r0
    72f6:	0f 90       	pop	r0
    72f8:	df 91       	pop	r29
    72fa:	cf 91       	pop	r28
    72fc:	08 95       	ret

000072fe <_ZNK6HCSR044distEi>:
///////////////////////////////////////////////////dist
float HCSR04::dist(int n) const
{
    72fe:	cf 93       	push	r28
    7300:	df 93       	push	r29
    7302:	cd b7       	in	r28, 0x3d	; 61
    7304:	de b7       	in	r29, 0x3e	; 62
    7306:	28 97       	sbiw	r28, 0x08	; 8
    7308:	0f b6       	in	r0, 0x3f	; 63
    730a:	f8 94       	cli
    730c:	de bf       	out	0x3e, r29	; 62
    730e:	0f be       	out	0x3f, r0	; 63
    7310:	cd bf       	out	0x3d, r28	; 61
    7312:	9e 83       	std	Y+6, r25	; 0x06
    7314:	8d 83       	std	Y+5, r24	; 0x05
    7316:	78 87       	std	Y+8, r23	; 0x08
    7318:	6f 83       	std	Y+7, r22	; 0x07
	digitalWrite(this->out, LOW);
    731a:	8d 81       	ldd	r24, Y+5	; 0x05
    731c:	9e 81       	ldd	r25, Y+6	; 0x06
    731e:	fc 01       	movw	r30, r24
    7320:	80 81       	ld	r24, Z
    7322:	91 81       	ldd	r25, Z+1	; 0x01
    7324:	60 e0       	ldi	r22, 0x00	; 0
    7326:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
	delayMicroseconds(2);
    732a:	82 e0       	ldi	r24, 0x02	; 2
    732c:	90 e0       	ldi	r25, 0x00	; 0
    732e:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
	digitalWrite(this->out, HIGH);
    7332:	8d 81       	ldd	r24, Y+5	; 0x05
    7334:	9e 81       	ldd	r25, Y+6	; 0x06
    7336:	fc 01       	movw	r30, r24
    7338:	80 81       	ld	r24, Z
    733a:	91 81       	ldd	r25, Z+1	; 0x01
    733c:	61 e0       	ldi	r22, 0x01	; 1
    733e:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
	delayMicroseconds(10);
    7342:	8a e0       	ldi	r24, 0x0A	; 10
    7344:	90 e0       	ldi	r25, 0x00	; 0
    7346:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
	digitalWrite(this->out, LOW);
    734a:	8d 81       	ldd	r24, Y+5	; 0x05
    734c:	9e 81       	ldd	r25, Y+6	; 0x06
    734e:	fc 01       	movw	r30, r24
    7350:	80 81       	ld	r24, Z
    7352:	91 81       	ldd	r25, Z+1	; 0x01
    7354:	60 e0       	ldi	r22, 0x00	; 0
    7356:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
	noInterrupts();
    735a:	f8 94       	cli
	float d=pulseIn(this->echo[n], HIGH);
    735c:	8d 81       	ldd	r24, Y+5	; 0x05
    735e:	9e 81       	ldd	r25, Y+6	; 0x06
    7360:	fc 01       	movw	r30, r24
    7362:	22 81       	ldd	r18, Z+2	; 0x02
    7364:	33 81       	ldd	r19, Z+3	; 0x03
    7366:	8f 81       	ldd	r24, Y+7	; 0x07
    7368:	98 85       	ldd	r25, Y+8	; 0x08
    736a:	88 0f       	add	r24, r24
    736c:	99 1f       	adc	r25, r25
    736e:	82 0f       	add	r24, r18
    7370:	93 1f       	adc	r25, r19
    7372:	fc 01       	movw	r30, r24
    7374:	80 81       	ld	r24, Z
    7376:	91 81       	ldd	r25, Z+1	; 0x01
    7378:	20 e4       	ldi	r18, 0x40	; 64
    737a:	32 e4       	ldi	r19, 0x42	; 66
    737c:	4f e0       	ldi	r20, 0x0F	; 15
    737e:	50 e0       	ldi	r21, 0x00	; 0
    7380:	61 e0       	ldi	r22, 0x01	; 1
    7382:	0e 94 a8 61 	call	0xc350	; 0xc350 <pulseIn>
    7386:	dc 01       	movw	r26, r24
    7388:	cb 01       	movw	r24, r22
    738a:	bc 01       	movw	r22, r24
    738c:	cd 01       	movw	r24, r26
    738e:	0e 94 72 59 	call	0xb2e4	; 0xb2e4 <__floatunsisf>
    7392:	dc 01       	movw	r26, r24
    7394:	cb 01       	movw	r24, r22
    7396:	89 83       	std	Y+1, r24	; 0x01
    7398:	9a 83       	std	Y+2, r25	; 0x02
    739a:	ab 83       	std	Y+3, r26	; 0x03
    739c:	bc 83       	std	Y+4, r27	; 0x04
	interrupts();
    739e:	78 94       	sei
	return d / 58.0;
    73a0:	20 e0       	ldi	r18, 0x00	; 0
    73a2:	30 e0       	ldi	r19, 0x00	; 0
    73a4:	48 e6       	ldi	r20, 0x68	; 104
    73a6:	52 e4       	ldi	r21, 0x42	; 66
    73a8:	69 81       	ldd	r22, Y+1	; 0x01
    73aa:	7a 81       	ldd	r23, Y+2	; 0x02
    73ac:	8b 81       	ldd	r24, Y+3	; 0x03
    73ae:	9c 81       	ldd	r25, Y+4	; 0x04
    73b0:	0e 94 de 58 	call	0xb1bc	; 0xb1bc <__divsf3>
    73b4:	dc 01       	movw	r26, r24
    73b6:	cb 01       	movw	r24, r22
}
    73b8:	bc 01       	movw	r22, r24
    73ba:	cd 01       	movw	r24, r26
    73bc:	28 96       	adiw	r28, 0x08	; 8
    73be:	0f b6       	in	r0, 0x3f	; 63
    73c0:	f8 94       	cli
    73c2:	de bf       	out	0x3e, r29	; 62
    73c4:	0f be       	out	0x3f, r0	; 63
    73c6:	cd bf       	out	0x3d, r28	; 61
    73c8:	df 91       	pop	r29
    73ca:	cf 91       	pop	r28
    73cc:	08 95       	ret

000073ce <_ZNK6HCSR044distEv>:
float HCSR04::dist() const{return this->dist(0);}
    73ce:	cf 93       	push	r28
    73d0:	df 93       	push	r29
    73d2:	1f 92       	push	r1
    73d4:	1f 92       	push	r1
    73d6:	cd b7       	in	r28, 0x3d	; 61
    73d8:	de b7       	in	r29, 0x3e	; 62
    73da:	9a 83       	std	Y+2, r25	; 0x02
    73dc:	89 83       	std	Y+1, r24	; 0x01
    73de:	89 81       	ldd	r24, Y+1	; 0x01
    73e0:	9a 81       	ldd	r25, Y+2	; 0x02
    73e2:	60 e0       	ldi	r22, 0x00	; 0
    73e4:	70 e0       	ldi	r23, 0x00	; 0
    73e6:	8b df       	rcall	.-234    	; 0x72fe <_ZNK6HCSR044distEi>
    73e8:	dc 01       	movw	r26, r24
    73ea:	cb 01       	movw	r24, r22
    73ec:	bc 01       	movw	r22, r24
    73ee:	cd 01       	movw	r24, r26
    73f0:	0f 90       	pop	r0
    73f2:	0f 90       	pop	r0
    73f4:	df 91       	pop	r29
    73f6:	cf 91       	pop	r28
    73f8:	08 95       	ret

000073fa <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
    73fa:	cf 93       	push	r28
    73fc:	df 93       	push	r29
    73fe:	1f 92       	push	r1
    7400:	1f 92       	push	r1
    7402:	cd b7       	in	r28, 0x3d	; 61
    7404:	de b7       	in	r29, 0x3e	; 62
    7406:	9a 83       	std	Y+2, r25	; 0x02
    7408:	89 83       	std	Y+1, r24	; 0x01
	kchar = NO_KEY;
    740a:	89 81       	ldd	r24, Y+1	; 0x01
    740c:	9a 81       	ldd	r25, Y+2	; 0x02
    740e:	fc 01       	movw	r30, r24
    7410:	10 82       	st	Z, r1
	kstate = IDLE;
    7412:	89 81       	ldd	r24, Y+1	; 0x01
    7414:	9a 81       	ldd	r25, Y+2	; 0x02
    7416:	fc 01       	movw	r30, r24
    7418:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
    741a:	89 81       	ldd	r24, Y+1	; 0x01
    741c:	9a 81       	ldd	r25, Y+2	; 0x02
    741e:	fc 01       	movw	r30, r24
    7420:	14 82       	std	Z+4, r1	; 0x04
}
    7422:	00 00       	nop
    7424:	0f 90       	pop	r0
    7426:	0f 90       	pop	r0
    7428:	df 91       	pop	r29
    742a:	cf 91       	pop	r28
    742c:	08 95       	ret

0000742e <_ZN6Keypad8pin_modeEhh>:
    holdTime = hold;
}

void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
}
    742e:	cf 93       	push	r28
    7430:	df 93       	push	r29
    7432:	00 d0       	rcall	.+0      	; 0x7434 <_ZN6Keypad8pin_modeEhh+0x6>
    7434:	1f 92       	push	r1
    7436:	cd b7       	in	r28, 0x3d	; 61
    7438:	de b7       	in	r29, 0x3e	; 62
    743a:	9a 83       	std	Y+2, r25	; 0x02
    743c:	89 83       	std	Y+1, r24	; 0x01
    743e:	6b 83       	std	Y+3, r22	; 0x03
    7440:	4c 83       	std	Y+4, r20	; 0x04
    7442:	6c 81       	ldd	r22, Y+4	; 0x04
    7444:	8b 81       	ldd	r24, Y+3	; 0x03
    7446:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    744a:	00 00       	nop
    744c:	0f 90       	pop	r0
    744e:	0f 90       	pop	r0
    7450:	0f 90       	pop	r0
    7452:	0f 90       	pop	r0
    7454:	df 91       	pop	r29
    7456:	cf 91       	pop	r28
    7458:	08 95       	ret

0000745a <_ZN6Keypad9pin_writeEhb>:
    745a:	cf 93       	push	r28
    745c:	df 93       	push	r29
    745e:	00 d0       	rcall	.+0      	; 0x7460 <_ZN6Keypad9pin_writeEhb+0x6>
    7460:	1f 92       	push	r1
    7462:	cd b7       	in	r28, 0x3d	; 61
    7464:	de b7       	in	r29, 0x3e	; 62
    7466:	9a 83       	std	Y+2, r25	; 0x02
    7468:	89 83       	std	Y+1, r24	; 0x01
    746a:	6b 83       	std	Y+3, r22	; 0x03
    746c:	4c 83       	std	Y+4, r20	; 0x04
    746e:	8c 81       	ldd	r24, Y+4	; 0x04
    7470:	68 2f       	mov	r22, r24
    7472:	8b 81       	ldd	r24, Y+3	; 0x03
    7474:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    7478:	00 00       	nop
    747a:	0f 90       	pop	r0
    747c:	0f 90       	pop	r0
    747e:	0f 90       	pop	r0
    7480:	0f 90       	pop	r0
    7482:	df 91       	pop	r29
    7484:	cf 91       	pop	r28
    7486:	08 95       	ret

00007488 <_ZN6Keypad8pin_readEh>:
    7488:	cf 93       	push	r28
    748a:	df 93       	push	r29
    748c:	00 d0       	rcall	.+0      	; 0x748e <_ZN6Keypad8pin_readEh+0x6>
    748e:	cd b7       	in	r28, 0x3d	; 61
    7490:	de b7       	in	r29, 0x3e	; 62
    7492:	9a 83       	std	Y+2, r25	; 0x02
    7494:	89 83       	std	Y+1, r24	; 0x01
    7496:	6b 83       	std	Y+3, r22	; 0x03
    7498:	8b 81       	ldd	r24, Y+3	; 0x03
    749a:	0e 94 80 61 	call	0xc300	; 0xc300 <digitalRead>
    749e:	0f 90       	pop	r0
    74a0:	0f 90       	pop	r0
    74a2:	0f 90       	pop	r0
    74a4:	df 91       	pop	r29
    74a6:	cf 91       	pop	r28
    74a8:	08 95       	ret

000074aa <_ZN6KeypadC1EPcPhS1_hh>:
    74aa:	ef 92       	push	r14
    74ac:	ff 92       	push	r15
    74ae:	0f 93       	push	r16
    74b0:	1f 93       	push	r17
    74b2:	cf 93       	push	r28
    74b4:	df 93       	push	r29
    74b6:	cd b7       	in	r28, 0x3d	; 61
    74b8:	de b7       	in	r29, 0x3e	; 62
    74ba:	2a 97       	sbiw	r28, 0x0a	; 10
    74bc:	0f b6       	in	r0, 0x3f	; 63
    74be:	f8 94       	cli
    74c0:	de bf       	out	0x3e, r29	; 62
    74c2:	0f be       	out	0x3f, r0	; 63
    74c4:	cd bf       	out	0x3d, r28	; 61
    74c6:	9a 83       	std	Y+2, r25	; 0x02
    74c8:	89 83       	std	Y+1, r24	; 0x01
    74ca:	7c 83       	std	Y+4, r23	; 0x04
    74cc:	6b 83       	std	Y+3, r22	; 0x03
    74ce:	5e 83       	std	Y+6, r21	; 0x06
    74d0:	4d 83       	std	Y+5, r20	; 0x05
    74d2:	38 87       	std	Y+8, r19	; 0x08
    74d4:	2f 83       	std	Y+7, r18	; 0x07
    74d6:	09 87       	std	Y+9, r16	; 0x09
    74d8:	ea 86       	std	Y+10, r14	; 0x0a
    74da:	89 81       	ldd	r24, Y+1	; 0x01
    74dc:	9a 81       	ldd	r25, Y+2	; 0x02
    74de:	02 96       	adiw	r24, 0x02	; 2
    74e0:	8c df       	rcall	.-232    	; 0x73fa <_ZN3KeyC1Ev>
    74e2:	29 ef       	ldi	r18, 0xF9	; 249
    74e4:	32 e0       	ldi	r19, 0x02	; 2
    74e6:	89 81       	ldd	r24, Y+1	; 0x01
    74e8:	9a 81       	ldd	r25, Y+2	; 0x02
    74ea:	fc 01       	movw	r30, r24
    74ec:	31 83       	std	Z+1, r19	; 0x01
    74ee:	20 83       	st	Z, r18
    74f0:	89 81       	ldd	r24, Y+1	; 0x01
    74f2:	9a 81       	ldd	r25, Y+2	; 0x02
    74f4:	4b 96       	adiw	r24, 0x1b	; 27
    74f6:	09 e0       	ldi	r16, 0x09	; 9
    74f8:	10 e0       	ldi	r17, 0x00	; 0
    74fa:	7c 01       	movw	r14, r24
    74fc:	0f 3f       	cpi	r16, 0xFF	; 255
    74fe:	ff ef       	ldi	r31, 0xFF	; 255
    7500:	1f 07       	cpc	r17, r31
    7502:	41 f0       	breq	.+16     	; 0x7514 <_ZN6KeypadC1EPcPhS1_hh+0x6a>
    7504:	c7 01       	movw	r24, r14
    7506:	79 df       	rcall	.-270    	; 0x73fa <_ZN3KeyC1Ev>
    7508:	85 e0       	ldi	r24, 0x05	; 5
    750a:	e8 0e       	add	r14, r24
    750c:	f1 1c       	adc	r15, r1
    750e:	01 50       	subi	r16, 0x01	; 1
    7510:	11 09       	sbc	r17, r1
    7512:	f4 cf       	rjmp	.-24     	; 0x74fc <_ZN6KeypadC1EPcPhS1_hh+0x52>
    7514:	89 81       	ldd	r24, Y+1	; 0x01
    7516:	9a 81       	ldd	r25, Y+2	; 0x02
    7518:	89 5a       	subi	r24, 0xA9	; 169
    751a:	9f 4f       	sbci	r25, 0xFF	; 255
    751c:	2d 81       	ldd	r18, Y+5	; 0x05
    751e:	3e 81       	ldd	r19, Y+6	; 0x06
    7520:	fc 01       	movw	r30, r24
    7522:	31 83       	std	Z+1, r19	; 0x01
    7524:	20 83       	st	Z, r18
    7526:	89 81       	ldd	r24, Y+1	; 0x01
    7528:	9a 81       	ldd	r25, Y+2	; 0x02
    752a:	87 5a       	subi	r24, 0xA7	; 167
    752c:	9f 4f       	sbci	r25, 0xFF	; 255
    752e:	2f 81       	ldd	r18, Y+7	; 0x07
    7530:	38 85       	ldd	r19, Y+8	; 0x08
    7532:	fc 01       	movw	r30, r24
    7534:	31 83       	std	Z+1, r19	; 0x01
    7536:	20 83       	st	Z, r18
    7538:	89 81       	ldd	r24, Y+1	; 0x01
    753a:	9a 81       	ldd	r25, Y+2	; 0x02
    753c:	85 5a       	subi	r24, 0xA5	; 165
    753e:	9f 4f       	sbci	r25, 0xFF	; 255
    7540:	29 85       	ldd	r18, Y+9	; 0x09
    7542:	fc 01       	movw	r30, r24
    7544:	20 83       	st	Z, r18
    7546:	89 81       	ldd	r24, Y+1	; 0x01
    7548:	9a 81       	ldd	r25, Y+2	; 0x02
    754a:	84 5a       	subi	r24, 0xA4	; 164
    754c:	9f 4f       	sbci	r25, 0xFF	; 255
    754e:	2a 85       	ldd	r18, Y+10	; 0x0a
    7550:	fc 01       	movw	r30, r24
    7552:	20 83       	st	Z, r18
    7554:	2b 81       	ldd	r18, Y+3	; 0x03
    7556:	3c 81       	ldd	r19, Y+4	; 0x04
    7558:	89 81       	ldd	r24, Y+1	; 0x01
    755a:	9a 81       	ldd	r25, Y+2	; 0x02
    755c:	b9 01       	movw	r22, r18
    755e:	2e d0       	rcall	.+92     	; 0x75bc <_ZN6Keypad5beginEPc>
    7560:	89 81       	ldd	r24, Y+1	; 0x01
    7562:	9a 81       	ldd	r25, Y+2	; 0x02
    7564:	6a e0       	ldi	r22, 0x0A	; 10
    7566:	70 e0       	ldi	r23, 0x00	; 0
    7568:	55 d4       	rcall	.+2218   	; 0x7e14 <_ZN6Keypad15setDebounceTimeEj>
    756a:	89 81       	ldd	r24, Y+1	; 0x01
    756c:	9a 81       	ldd	r25, Y+2	; 0x02
    756e:	64 ef       	ldi	r22, 0xF4	; 244
    7570:	71 e0       	ldi	r23, 0x01	; 1
    7572:	79 d4       	rcall	.+2290   	; 0x7e66 <_ZN6Keypad11setHoldTimeEj>
    7574:	89 81       	ldd	r24, Y+1	; 0x01
    7576:	9a 81       	ldd	r25, Y+2	; 0x02
    7578:	8e 59       	subi	r24, 0x9E	; 158
    757a:	9f 4f       	sbci	r25, 0xFF	; 255
    757c:	fc 01       	movw	r30, r24
    757e:	11 82       	std	Z+1, r1	; 0x01
    7580:	10 82       	st	Z, r1
    7582:	89 81       	ldd	r24, Y+1	; 0x01
    7584:	9a 81       	ldd	r25, Y+2	; 0x02
    7586:	8f 5a       	subi	r24, 0xAF	; 175
    7588:	9f 4f       	sbci	r25, 0xFF	; 255
    758a:	fc 01       	movw	r30, r24
    758c:	10 82       	st	Z, r1
    758e:	11 82       	std	Z+1, r1	; 0x01
    7590:	12 82       	std	Z+2, r1	; 0x02
    7592:	13 82       	std	Z+3, r1	; 0x03
    7594:	89 81       	ldd	r24, Y+1	; 0x01
    7596:	9a 81       	ldd	r25, Y+2	; 0x02
    7598:	8f 59       	subi	r24, 0x9F	; 159
    759a:	9f 4f       	sbci	r25, 0xFF	; 255
    759c:	fc 01       	movw	r30, r24
    759e:	10 82       	st	Z, r1
    75a0:	00 00       	nop
    75a2:	2a 96       	adiw	r28, 0x0a	; 10
    75a4:	0f b6       	in	r0, 0x3f	; 63
    75a6:	f8 94       	cli
    75a8:	de bf       	out	0x3e, r29	; 62
    75aa:	0f be       	out	0x3f, r0	; 63
    75ac:	cd bf       	out	0x3d, r28	; 61
    75ae:	df 91       	pop	r29
    75b0:	cf 91       	pop	r28
    75b2:	1f 91       	pop	r17
    75b4:	0f 91       	pop	r16
    75b6:	ff 90       	pop	r15
    75b8:	ef 90       	pop	r14
    75ba:	08 95       	ret

000075bc <_ZN6Keypad5beginEPc>:
    75bc:	cf 93       	push	r28
    75be:	df 93       	push	r29
    75c0:	00 d0       	rcall	.+0      	; 0x75c2 <_ZN6Keypad5beginEPc+0x6>
    75c2:	1f 92       	push	r1
    75c4:	cd b7       	in	r28, 0x3d	; 61
    75c6:	de b7       	in	r29, 0x3e	; 62
    75c8:	9a 83       	std	Y+2, r25	; 0x02
    75ca:	89 83       	std	Y+1, r24	; 0x01
    75cc:	7c 83       	std	Y+4, r23	; 0x04
    75ce:	6b 83       	std	Y+3, r22	; 0x03
    75d0:	89 81       	ldd	r24, Y+1	; 0x01
    75d2:	9a 81       	ldd	r25, Y+2	; 0x02
    75d4:	8b 5a       	subi	r24, 0xAB	; 171
    75d6:	9f 4f       	sbci	r25, 0xFF	; 255
    75d8:	2b 81       	ldd	r18, Y+3	; 0x03
    75da:	3c 81       	ldd	r19, Y+4	; 0x04
    75dc:	fc 01       	movw	r30, r24
    75de:	31 83       	std	Z+1, r19	; 0x01
    75e0:	20 83       	st	Z, r18
    75e2:	00 00       	nop
    75e4:	0f 90       	pop	r0
    75e6:	0f 90       	pop	r0
    75e8:	0f 90       	pop	r0
    75ea:	0f 90       	pop	r0
    75ec:	df 91       	pop	r29
    75ee:	cf 91       	pop	r28
    75f0:	08 95       	ret

000075f2 <_ZN6Keypad6getKeyEv>:
    75f2:	cf 93       	push	r28
    75f4:	df 93       	push	r29
    75f6:	1f 92       	push	r1
    75f8:	1f 92       	push	r1
    75fa:	cd b7       	in	r28, 0x3d	; 61
    75fc:	de b7       	in	r29, 0x3e	; 62
    75fe:	9a 83       	std	Y+2, r25	; 0x02
    7600:	89 83       	std	Y+1, r24	; 0x01
    7602:	89 81       	ldd	r24, Y+1	; 0x01
    7604:	9a 81       	ldd	r25, Y+2	; 0x02
    7606:	8f 59       	subi	r24, 0x9F	; 159
    7608:	9f 4f       	sbci	r25, 0xFF	; 255
    760a:	21 e0       	ldi	r18, 0x01	; 1
    760c:	fc 01       	movw	r30, r24
    760e:	20 83       	st	Z, r18
    7610:	89 81       	ldd	r24, Y+1	; 0x01
    7612:	9a 81       	ldd	r25, Y+2	; 0x02
    7614:	24 d0       	rcall	.+72     	; 0x765e <_ZN6Keypad7getKeysEv>
    7616:	88 23       	and	r24, r24
    7618:	71 f0       	breq	.+28     	; 0x7636 <_ZN6Keypad6getKeyEv+0x44>
    761a:	89 81       	ldd	r24, Y+1	; 0x01
    761c:	9a 81       	ldd	r25, Y+2	; 0x02
    761e:	fc 01       	movw	r30, r24
    7620:	87 8d       	ldd	r24, Z+31	; 0x1f
    7622:	88 23       	and	r24, r24
    7624:	41 f0       	breq	.+16     	; 0x7636 <_ZN6Keypad6getKeyEv+0x44>
    7626:	89 81       	ldd	r24, Y+1	; 0x01
    7628:	9a 81       	ldd	r25, Y+2	; 0x02
    762a:	fc 01       	movw	r30, r24
    762c:	86 8d       	ldd	r24, Z+30	; 0x1e
    762e:	81 30       	cpi	r24, 0x01	; 1
    7630:	11 f4       	brne	.+4      	; 0x7636 <_ZN6Keypad6getKeyEv+0x44>
    7632:	81 e0       	ldi	r24, 0x01	; 1
    7634:	01 c0       	rjmp	.+2      	; 0x7638 <_ZN6Keypad6getKeyEv+0x46>
    7636:	80 e0       	ldi	r24, 0x00	; 0
    7638:	88 23       	and	r24, r24
    763a:	29 f0       	breq	.+10     	; 0x7646 <_ZN6Keypad6getKeyEv+0x54>
    763c:	89 81       	ldd	r24, Y+1	; 0x01
    763e:	9a 81       	ldd	r25, Y+2	; 0x02
    7640:	fc 01       	movw	r30, r24
    7642:	83 8d       	ldd	r24, Z+27	; 0x1b
    7644:	07 c0       	rjmp	.+14     	; 0x7654 <_ZN6Keypad6getKeyEv+0x62>
    7646:	89 81       	ldd	r24, Y+1	; 0x01
    7648:	9a 81       	ldd	r25, Y+2	; 0x02
    764a:	8f 59       	subi	r24, 0x9F	; 159
    764c:	9f 4f       	sbci	r25, 0xFF	; 255
    764e:	fc 01       	movw	r30, r24
    7650:	10 82       	st	Z, r1
    7652:	80 e0       	ldi	r24, 0x00	; 0
    7654:	0f 90       	pop	r0
    7656:	0f 90       	pop	r0
    7658:	df 91       	pop	r29
    765a:	cf 91       	pop	r28
    765c:	08 95       	ret

0000765e <_ZN6Keypad7getKeysEv>:
    765e:	cf 93       	push	r28
    7660:	df 93       	push	r29
    7662:	00 d0       	rcall	.+0      	; 0x7664 <_ZN6Keypad7getKeysEv+0x6>
    7664:	cd b7       	in	r28, 0x3d	; 61
    7666:	de b7       	in	r29, 0x3e	; 62
    7668:	9b 83       	std	Y+3, r25	; 0x03
    766a:	8a 83       	std	Y+2, r24	; 0x02
    766c:	19 82       	std	Y+1, r1	; 0x01
    766e:	0e 94 ff 5e 	call	0xbdfe	; 0xbdfe <millis>
    7672:	9b 01       	movw	r18, r22
    7674:	ac 01       	movw	r20, r24
    7676:	8a 81       	ldd	r24, Y+2	; 0x02
    7678:	9b 81       	ldd	r25, Y+3	; 0x03
    767a:	8f 5a       	subi	r24, 0xAF	; 175
    767c:	9f 4f       	sbci	r25, 0xFF	; 255
    767e:	fc 01       	movw	r30, r24
    7680:	80 81       	ld	r24, Z
    7682:	91 81       	ldd	r25, Z+1	; 0x01
    7684:	a2 81       	ldd	r26, Z+2	; 0x02
    7686:	b3 81       	ldd	r27, Z+3	; 0x03
    7688:	28 1b       	sub	r18, r24
    768a:	39 0b       	sbc	r19, r25
    768c:	4a 0b       	sbc	r20, r26
    768e:	5b 0b       	sbc	r21, r27
    7690:	8a 81       	ldd	r24, Y+2	; 0x02
    7692:	9b 81       	ldd	r25, Y+3	; 0x03
    7694:	83 5a       	subi	r24, 0xA3	; 163
    7696:	9f 4f       	sbci	r25, 0xFF	; 255
    7698:	fc 01       	movw	r30, r24
    769a:	80 81       	ld	r24, Z
    769c:	91 81       	ldd	r25, Z+1	; 0x01
    769e:	cc 01       	movw	r24, r24
    76a0:	a0 e0       	ldi	r26, 0x00	; 0
    76a2:	b0 e0       	ldi	r27, 0x00	; 0
    76a4:	61 e0       	ldi	r22, 0x01	; 1
    76a6:	82 17       	cp	r24, r18
    76a8:	93 07       	cpc	r25, r19
    76aa:	a4 07       	cpc	r26, r20
    76ac:	b5 07       	cpc	r27, r21
    76ae:	08 f0       	brcs	.+2      	; 0x76b2 <_ZN6Keypad7getKeysEv+0x54>
    76b0:	60 e0       	ldi	r22, 0x00	; 0
    76b2:	66 23       	and	r22, r22
    76b4:	a1 f0       	breq	.+40     	; 0x76de <_ZN6Keypad7getKeysEv+0x80>
    76b6:	8a 81       	ldd	r24, Y+2	; 0x02
    76b8:	9b 81       	ldd	r25, Y+3	; 0x03
    76ba:	18 d0       	rcall	.+48     	; 0x76ec <_ZN6Keypad8scanKeysEv>
    76bc:	8a 81       	ldd	r24, Y+2	; 0x02
    76be:	9b 81       	ldd	r25, Y+3	; 0x03
    76c0:	58 d1       	rcall	.+688    	; 0x7972 <_ZN6Keypad10updateListEv>
    76c2:	89 83       	std	Y+1, r24	; 0x01
    76c4:	0e 94 ff 5e 	call	0xbdfe	; 0xbdfe <millis>
    76c8:	dc 01       	movw	r26, r24
    76ca:	cb 01       	movw	r24, r22
    76cc:	2a 81       	ldd	r18, Y+2	; 0x02
    76ce:	3b 81       	ldd	r19, Y+3	; 0x03
    76d0:	2f 5a       	subi	r18, 0xAF	; 175
    76d2:	3f 4f       	sbci	r19, 0xFF	; 255
    76d4:	f9 01       	movw	r30, r18
    76d6:	80 83       	st	Z, r24
    76d8:	91 83       	std	Z+1, r25	; 0x01
    76da:	a2 83       	std	Z+2, r26	; 0x02
    76dc:	b3 83       	std	Z+3, r27	; 0x03
    76de:	89 81       	ldd	r24, Y+1	; 0x01
    76e0:	0f 90       	pop	r0
    76e2:	0f 90       	pop	r0
    76e4:	0f 90       	pop	r0
    76e6:	df 91       	pop	r29
    76e8:	cf 91       	pop	r28
    76ea:	08 95       	ret

000076ec <_ZN6Keypad8scanKeysEv>:
    76ec:	cf 93       	push	r28
    76ee:	df 93       	push	r29
    76f0:	00 d0       	rcall	.+0      	; 0x76f2 <_ZN6Keypad8scanKeysEv+0x6>
    76f2:	1f 92       	push	r1
    76f4:	1f 92       	push	r1
    76f6:	cd b7       	in	r28, 0x3d	; 61
    76f8:	de b7       	in	r29, 0x3e	; 62
    76fa:	9d 83       	std	Y+5, r25	; 0x05
    76fc:	8c 83       	std	Y+4, r24	; 0x04
    76fe:	19 82       	std	Y+1, r1	; 0x01
    7700:	8c 81       	ldd	r24, Y+4	; 0x04
    7702:	9d 81       	ldd	r25, Y+5	; 0x05
    7704:	85 5a       	subi	r24, 0xA5	; 165
    7706:	9f 4f       	sbci	r25, 0xFF	; 255
    7708:	fc 01       	movw	r30, r24
    770a:	90 81       	ld	r25, Z
    770c:	89 81       	ldd	r24, Y+1	; 0x01
    770e:	89 17       	cp	r24, r25
    7710:	00 f5       	brcc	.+64     	; 0x7752 <_ZN6Keypad8scanKeysEv+0x66>
    7712:	8c 81       	ldd	r24, Y+4	; 0x04
    7714:	9d 81       	ldd	r25, Y+5	; 0x05
    7716:	fc 01       	movw	r30, r24
    7718:	80 81       	ld	r24, Z
    771a:	91 81       	ldd	r25, Z+1	; 0x01
    771c:	fc 01       	movw	r30, r24
    771e:	20 81       	ld	r18, Z
    7720:	31 81       	ldd	r19, Z+1	; 0x01
    7722:	8c 81       	ldd	r24, Y+4	; 0x04
    7724:	9d 81       	ldd	r25, Y+5	; 0x05
    7726:	89 5a       	subi	r24, 0xA9	; 169
    7728:	9f 4f       	sbci	r25, 0xFF	; 255
    772a:	fc 01       	movw	r30, r24
    772c:	40 81       	ld	r20, Z
    772e:	51 81       	ldd	r21, Z+1	; 0x01
    7730:	89 81       	ldd	r24, Y+1	; 0x01
    7732:	88 2f       	mov	r24, r24
    7734:	90 e0       	ldi	r25, 0x00	; 0
    7736:	84 0f       	add	r24, r20
    7738:	95 1f       	adc	r25, r21
    773a:	fc 01       	movw	r30, r24
    773c:	50 81       	ld	r21, Z
    773e:	8c 81       	ldd	r24, Y+4	; 0x04
    7740:	9d 81       	ldd	r25, Y+5	; 0x05
    7742:	42 e0       	ldi	r20, 0x02	; 2
    7744:	65 2f       	mov	r22, r21
    7746:	f9 01       	movw	r30, r18
    7748:	19 95       	eicall
    774a:	89 81       	ldd	r24, Y+1	; 0x01
    774c:	8f 5f       	subi	r24, 0xFF	; 255
    774e:	89 83       	std	Y+1, r24	; 0x01
    7750:	d7 cf       	rjmp	.-82     	; 0x7700 <_ZN6Keypad8scanKeysEv+0x14>
    7752:	1a 82       	std	Y+2, r1	; 0x02
    7754:	8c 81       	ldd	r24, Y+4	; 0x04
    7756:	9d 81       	ldd	r25, Y+5	; 0x05
    7758:	84 5a       	subi	r24, 0xA4	; 164
    775a:	9f 4f       	sbci	r25, 0xFF	; 255
    775c:	fc 01       	movw	r30, r24
    775e:	90 81       	ld	r25, Z
    7760:	8a 81       	ldd	r24, Y+2	; 0x02
    7762:	89 17       	cp	r24, r25
    7764:	08 f0       	brcs	.+2      	; 0x7768 <_ZN6Keypad8scanKeysEv+0x7c>
    7766:	fc c0       	rjmp	.+504    	; 0x7960 <_ZN6Keypad8scanKeysEv+0x274>
    7768:	8c 81       	ldd	r24, Y+4	; 0x04
    776a:	9d 81       	ldd	r25, Y+5	; 0x05
    776c:	fc 01       	movw	r30, r24
    776e:	80 81       	ld	r24, Z
    7770:	91 81       	ldd	r25, Z+1	; 0x01
    7772:	fc 01       	movw	r30, r24
    7774:	20 81       	ld	r18, Z
    7776:	31 81       	ldd	r19, Z+1	; 0x01
    7778:	8c 81       	ldd	r24, Y+4	; 0x04
    777a:	9d 81       	ldd	r25, Y+5	; 0x05
    777c:	87 5a       	subi	r24, 0xA7	; 167
    777e:	9f 4f       	sbci	r25, 0xFF	; 255
    7780:	fc 01       	movw	r30, r24
    7782:	40 81       	ld	r20, Z
    7784:	51 81       	ldd	r21, Z+1	; 0x01
    7786:	8a 81       	ldd	r24, Y+2	; 0x02
    7788:	88 2f       	mov	r24, r24
    778a:	90 e0       	ldi	r25, 0x00	; 0
    778c:	84 0f       	add	r24, r20
    778e:	95 1f       	adc	r25, r21
    7790:	fc 01       	movw	r30, r24
    7792:	50 81       	ld	r21, Z
    7794:	8c 81       	ldd	r24, Y+4	; 0x04
    7796:	9d 81       	ldd	r25, Y+5	; 0x05
    7798:	41 e0       	ldi	r20, 0x01	; 1
    779a:	65 2f       	mov	r22, r21
    779c:	f9 01       	movw	r30, r18
    779e:	19 95       	eicall
    77a0:	8c 81       	ldd	r24, Y+4	; 0x04
    77a2:	9d 81       	ldd	r25, Y+5	; 0x05
    77a4:	fc 01       	movw	r30, r24
    77a6:	80 81       	ld	r24, Z
    77a8:	91 81       	ldd	r25, Z+1	; 0x01
    77aa:	02 96       	adiw	r24, 0x02	; 2
    77ac:	fc 01       	movw	r30, r24
    77ae:	20 81       	ld	r18, Z
    77b0:	31 81       	ldd	r19, Z+1	; 0x01
    77b2:	8c 81       	ldd	r24, Y+4	; 0x04
    77b4:	9d 81       	ldd	r25, Y+5	; 0x05
    77b6:	87 5a       	subi	r24, 0xA7	; 167
    77b8:	9f 4f       	sbci	r25, 0xFF	; 255
    77ba:	fc 01       	movw	r30, r24
    77bc:	40 81       	ld	r20, Z
    77be:	51 81       	ldd	r21, Z+1	; 0x01
    77c0:	8a 81       	ldd	r24, Y+2	; 0x02
    77c2:	88 2f       	mov	r24, r24
    77c4:	90 e0       	ldi	r25, 0x00	; 0
    77c6:	84 0f       	add	r24, r20
    77c8:	95 1f       	adc	r25, r21
    77ca:	fc 01       	movw	r30, r24
    77cc:	50 81       	ld	r21, Z
    77ce:	8c 81       	ldd	r24, Y+4	; 0x04
    77d0:	9d 81       	ldd	r25, Y+5	; 0x05
    77d2:	40 e0       	ldi	r20, 0x00	; 0
    77d4:	65 2f       	mov	r22, r21
    77d6:	f9 01       	movw	r30, r18
    77d8:	19 95       	eicall
    77da:	1b 82       	std	Y+3, r1	; 0x03
    77dc:	8c 81       	ldd	r24, Y+4	; 0x04
    77de:	9d 81       	ldd	r25, Y+5	; 0x05
    77e0:	85 5a       	subi	r24, 0xA5	; 165
    77e2:	9f 4f       	sbci	r25, 0xFF	; 255
    77e4:	fc 01       	movw	r30, r24
    77e6:	90 81       	ld	r25, Z
    77e8:	8b 81       	ldd	r24, Y+3	; 0x03
    77ea:	89 17       	cp	r24, r25
    77ec:	08 f0       	brcs	.+2      	; 0x77f0 <_ZN6Keypad8scanKeysEv+0x104>
    77ee:	7b c0       	rjmp	.+246    	; 0x78e6 <_ZN6Keypad8scanKeysEv+0x1fa>
    77f0:	8c 81       	ldd	r24, Y+4	; 0x04
    77f2:	9d 81       	ldd	r25, Y+5	; 0x05
    77f4:	fc 01       	movw	r30, r24
    77f6:	80 81       	ld	r24, Z
    77f8:	91 81       	ldd	r25, Z+1	; 0x01
    77fa:	04 96       	adiw	r24, 0x04	; 4
    77fc:	fc 01       	movw	r30, r24
    77fe:	20 81       	ld	r18, Z
    7800:	31 81       	ldd	r19, Z+1	; 0x01
    7802:	8c 81       	ldd	r24, Y+4	; 0x04
    7804:	9d 81       	ldd	r25, Y+5	; 0x05
    7806:	89 5a       	subi	r24, 0xA9	; 169
    7808:	9f 4f       	sbci	r25, 0xFF	; 255
    780a:	fc 01       	movw	r30, r24
    780c:	40 81       	ld	r20, Z
    780e:	51 81       	ldd	r21, Z+1	; 0x01
    7810:	8b 81       	ldd	r24, Y+3	; 0x03
    7812:	88 2f       	mov	r24, r24
    7814:	90 e0       	ldi	r25, 0x00	; 0
    7816:	84 0f       	add	r24, r20
    7818:	95 1f       	adc	r25, r21
    781a:	fc 01       	movw	r30, r24
    781c:	40 81       	ld	r20, Z
    781e:	8c 81       	ldd	r24, Y+4	; 0x04
    7820:	9d 81       	ldd	r25, Y+5	; 0x05
    7822:	64 2f       	mov	r22, r20
    7824:	f9 01       	movw	r30, r18
    7826:	19 95       	eicall
    7828:	89 2b       	or	r24, r25
    782a:	61 f5       	brne	.+88     	; 0x7884 <_ZN6Keypad8scanKeysEv+0x198>
    782c:	8b 81       	ldd	r24, Y+3	; 0x03
    782e:	68 2f       	mov	r22, r24
    7830:	70 e0       	ldi	r23, 0x00	; 0
    7832:	8b 81       	ldd	r24, Y+3	; 0x03
    7834:	88 2f       	mov	r24, r24
    7836:	90 e0       	ldi	r25, 0x00	; 0
    7838:	2c 81       	ldd	r18, Y+4	; 0x04
    783a:	3d 81       	ldd	r19, Y+5	; 0x05
    783c:	88 0f       	add	r24, r24
    783e:	99 1f       	adc	r25, r25
    7840:	82 0f       	add	r24, r18
    7842:	93 1f       	adc	r25, r19
    7844:	07 96       	adiw	r24, 0x07	; 7
    7846:	fc 01       	movw	r30, r24
    7848:	20 81       	ld	r18, Z
    784a:	31 81       	ldd	r19, Z+1	; 0x01
    784c:	8a 81       	ldd	r24, Y+2	; 0x02
    784e:	48 2f       	mov	r20, r24
    7850:	50 e0       	ldi	r21, 0x00	; 0
    7852:	81 e0       	ldi	r24, 0x01	; 1
    7854:	90 e0       	ldi	r25, 0x00	; 0
    7856:	a0 e0       	ldi	r26, 0x00	; 0
    7858:	b0 e0       	ldi	r27, 0x00	; 0
    785a:	04 c0       	rjmp	.+8      	; 0x7864 <_ZN6Keypad8scanKeysEv+0x178>
    785c:	88 0f       	add	r24, r24
    785e:	99 1f       	adc	r25, r25
    7860:	aa 1f       	adc	r26, r26
    7862:	bb 1f       	adc	r27, r27
    7864:	4a 95       	dec	r20
    7866:	d2 f7       	brpl	.-12     	; 0x785c <_ZN6Keypad8scanKeysEv+0x170>
    7868:	28 2b       	or	r18, r24
    786a:	39 2b       	or	r19, r25
    786c:	4c 81       	ldd	r20, Y+4	; 0x04
    786e:	5d 81       	ldd	r21, Y+5	; 0x05
    7870:	cb 01       	movw	r24, r22
    7872:	88 0f       	add	r24, r24
    7874:	99 1f       	adc	r25, r25
    7876:	84 0f       	add	r24, r20
    7878:	95 1f       	adc	r25, r21
    787a:	07 96       	adiw	r24, 0x07	; 7
    787c:	fc 01       	movw	r30, r24
    787e:	31 83       	std	Z+1, r19	; 0x01
    7880:	20 83       	st	Z, r18
    7882:	2d c0       	rjmp	.+90     	; 0x78de <_ZN6Keypad8scanKeysEv+0x1f2>
    7884:	8b 81       	ldd	r24, Y+3	; 0x03
    7886:	68 2f       	mov	r22, r24
    7888:	70 e0       	ldi	r23, 0x00	; 0
    788a:	8b 81       	ldd	r24, Y+3	; 0x03
    788c:	88 2f       	mov	r24, r24
    788e:	90 e0       	ldi	r25, 0x00	; 0
    7890:	2c 81       	ldd	r18, Y+4	; 0x04
    7892:	3d 81       	ldd	r19, Y+5	; 0x05
    7894:	88 0f       	add	r24, r24
    7896:	99 1f       	adc	r25, r25
    7898:	82 0f       	add	r24, r18
    789a:	93 1f       	adc	r25, r19
    789c:	07 96       	adiw	r24, 0x07	; 7
    789e:	fc 01       	movw	r30, r24
    78a0:	20 81       	ld	r18, Z
    78a2:	31 81       	ldd	r19, Z+1	; 0x01
    78a4:	8a 81       	ldd	r24, Y+2	; 0x02
    78a6:	48 2f       	mov	r20, r24
    78a8:	50 e0       	ldi	r21, 0x00	; 0
    78aa:	81 e0       	ldi	r24, 0x01	; 1
    78ac:	90 e0       	ldi	r25, 0x00	; 0
    78ae:	a0 e0       	ldi	r26, 0x00	; 0
    78b0:	b0 e0       	ldi	r27, 0x00	; 0
    78b2:	04 c0       	rjmp	.+8      	; 0x78bc <_ZN6Keypad8scanKeysEv+0x1d0>
    78b4:	88 0f       	add	r24, r24
    78b6:	99 1f       	adc	r25, r25
    78b8:	aa 1f       	adc	r26, r26
    78ba:	bb 1f       	adc	r27, r27
    78bc:	4a 95       	dec	r20
    78be:	d2 f7       	brpl	.-12     	; 0x78b4 <_ZN6Keypad8scanKeysEv+0x1c8>
    78c0:	80 95       	com	r24
    78c2:	90 95       	com	r25
    78c4:	28 23       	and	r18, r24
    78c6:	39 23       	and	r19, r25
    78c8:	4c 81       	ldd	r20, Y+4	; 0x04
    78ca:	5d 81       	ldd	r21, Y+5	; 0x05
    78cc:	cb 01       	movw	r24, r22
    78ce:	88 0f       	add	r24, r24
    78d0:	99 1f       	adc	r25, r25
    78d2:	84 0f       	add	r24, r20
    78d4:	95 1f       	adc	r25, r21
    78d6:	07 96       	adiw	r24, 0x07	; 7
    78d8:	fc 01       	movw	r30, r24
    78da:	31 83       	std	Z+1, r19	; 0x01
    78dc:	20 83       	st	Z, r18
    78de:	8b 81       	ldd	r24, Y+3	; 0x03
    78e0:	8f 5f       	subi	r24, 0xFF	; 255
    78e2:	8b 83       	std	Y+3, r24	; 0x03
    78e4:	7b cf       	rjmp	.-266    	; 0x77dc <_ZN6Keypad8scanKeysEv+0xf0>
    78e6:	8c 81       	ldd	r24, Y+4	; 0x04
    78e8:	9d 81       	ldd	r25, Y+5	; 0x05
    78ea:	fc 01       	movw	r30, r24
    78ec:	80 81       	ld	r24, Z
    78ee:	91 81       	ldd	r25, Z+1	; 0x01
    78f0:	02 96       	adiw	r24, 0x02	; 2
    78f2:	fc 01       	movw	r30, r24
    78f4:	20 81       	ld	r18, Z
    78f6:	31 81       	ldd	r19, Z+1	; 0x01
    78f8:	8c 81       	ldd	r24, Y+4	; 0x04
    78fa:	9d 81       	ldd	r25, Y+5	; 0x05
    78fc:	87 5a       	subi	r24, 0xA7	; 167
    78fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7900:	fc 01       	movw	r30, r24
    7902:	40 81       	ld	r20, Z
    7904:	51 81       	ldd	r21, Z+1	; 0x01
    7906:	8a 81       	ldd	r24, Y+2	; 0x02
    7908:	88 2f       	mov	r24, r24
    790a:	90 e0       	ldi	r25, 0x00	; 0
    790c:	84 0f       	add	r24, r20
    790e:	95 1f       	adc	r25, r21
    7910:	fc 01       	movw	r30, r24
    7912:	50 81       	ld	r21, Z
    7914:	8c 81       	ldd	r24, Y+4	; 0x04
    7916:	9d 81       	ldd	r25, Y+5	; 0x05
    7918:	41 e0       	ldi	r20, 0x01	; 1
    791a:	65 2f       	mov	r22, r21
    791c:	f9 01       	movw	r30, r18
    791e:	19 95       	eicall
    7920:	8c 81       	ldd	r24, Y+4	; 0x04
    7922:	9d 81       	ldd	r25, Y+5	; 0x05
    7924:	fc 01       	movw	r30, r24
    7926:	80 81       	ld	r24, Z
    7928:	91 81       	ldd	r25, Z+1	; 0x01
    792a:	fc 01       	movw	r30, r24
    792c:	20 81       	ld	r18, Z
    792e:	31 81       	ldd	r19, Z+1	; 0x01
    7930:	8c 81       	ldd	r24, Y+4	; 0x04
    7932:	9d 81       	ldd	r25, Y+5	; 0x05
    7934:	87 5a       	subi	r24, 0xA7	; 167
    7936:	9f 4f       	sbci	r25, 0xFF	; 255
    7938:	fc 01       	movw	r30, r24
    793a:	40 81       	ld	r20, Z
    793c:	51 81       	ldd	r21, Z+1	; 0x01
    793e:	8a 81       	ldd	r24, Y+2	; 0x02
    7940:	88 2f       	mov	r24, r24
    7942:	90 e0       	ldi	r25, 0x00	; 0
    7944:	84 0f       	add	r24, r20
    7946:	95 1f       	adc	r25, r21
    7948:	fc 01       	movw	r30, r24
    794a:	50 81       	ld	r21, Z
    794c:	8c 81       	ldd	r24, Y+4	; 0x04
    794e:	9d 81       	ldd	r25, Y+5	; 0x05
    7950:	40 e0       	ldi	r20, 0x00	; 0
    7952:	65 2f       	mov	r22, r21
    7954:	f9 01       	movw	r30, r18
    7956:	19 95       	eicall
    7958:	8a 81       	ldd	r24, Y+2	; 0x02
    795a:	8f 5f       	subi	r24, 0xFF	; 255
    795c:	8a 83       	std	Y+2, r24	; 0x02
    795e:	fa ce       	rjmp	.-524    	; 0x7754 <_ZN6Keypad8scanKeysEv+0x68>
    7960:	00 00       	nop
    7962:	0f 90       	pop	r0
    7964:	0f 90       	pop	r0
    7966:	0f 90       	pop	r0
    7968:	0f 90       	pop	r0
    796a:	0f 90       	pop	r0
    796c:	df 91       	pop	r29
    796e:	cf 91       	pop	r28
    7970:	08 95       	ret

00007972 <_ZN6Keypad10updateListEv>:
    7972:	cf 93       	push	r28
    7974:	df 93       	push	r29
    7976:	cd b7       	in	r28, 0x3d	; 61
    7978:	de b7       	in	r29, 0x3e	; 62
    797a:	2e 97       	sbiw	r28, 0x0e	; 14
    797c:	0f b6       	in	r0, 0x3f	; 63
    797e:	f8 94       	cli
    7980:	de bf       	out	0x3e, r29	; 62
    7982:	0f be       	out	0x3f, r0	; 63
    7984:	cd bf       	out	0x3d, r28	; 61
    7986:	9e 87       	std	Y+14, r25	; 0x0e
    7988:	8d 87       	std	Y+13, r24	; 0x0d
    798a:	19 82       	std	Y+1, r1	; 0x01
    798c:	1a 82       	std	Y+2, r1	; 0x02
    798e:	8a 81       	ldd	r24, Y+2	; 0x02
    7990:	8a 30       	cpi	r24, 0x0A	; 10
    7992:	08 f0       	brcs	.+2      	; 0x7996 <_ZN6Keypad10updateListEv+0x24>
    7994:	4d c0       	rjmp	.+154    	; 0x7a30 <_ZN6Keypad10updateListEv+0xbe>
    7996:	8a 81       	ldd	r24, Y+2	; 0x02
    7998:	28 2f       	mov	r18, r24
    799a:	30 e0       	ldi	r19, 0x00	; 0
    799c:	4d 85       	ldd	r20, Y+13	; 0x0d
    799e:	5e 85       	ldd	r21, Y+14	; 0x0e
    79a0:	c9 01       	movw	r24, r18
    79a2:	88 0f       	add	r24, r24
    79a4:	99 1f       	adc	r25, r25
    79a6:	88 0f       	add	r24, r24
    79a8:	99 1f       	adc	r25, r25
    79aa:	82 0f       	add	r24, r18
    79ac:	93 1f       	adc	r25, r19
    79ae:	84 0f       	add	r24, r20
    79b0:	95 1f       	adc	r25, r21
    79b2:	4e 96       	adiw	r24, 0x1e	; 30
    79b4:	fc 01       	movw	r30, r24
    79b6:	80 81       	ld	r24, Z
    79b8:	88 23       	and	r24, r24
    79ba:	b1 f5       	brne	.+108    	; 0x7a28 <_ZN6Keypad10updateListEv+0xb6>
    79bc:	8a 81       	ldd	r24, Y+2	; 0x02
    79be:	28 2f       	mov	r18, r24
    79c0:	30 e0       	ldi	r19, 0x00	; 0
    79c2:	4d 85       	ldd	r20, Y+13	; 0x0d
    79c4:	5e 85       	ldd	r21, Y+14	; 0x0e
    79c6:	c9 01       	movw	r24, r18
    79c8:	88 0f       	add	r24, r24
    79ca:	99 1f       	adc	r25, r25
    79cc:	88 0f       	add	r24, r24
    79ce:	99 1f       	adc	r25, r25
    79d0:	82 0f       	add	r24, r18
    79d2:	93 1f       	adc	r25, r19
    79d4:	84 0f       	add	r24, r20
    79d6:	95 1f       	adc	r25, r21
    79d8:	4b 96       	adiw	r24, 0x1b	; 27
    79da:	fc 01       	movw	r30, r24
    79dc:	10 82       	st	Z, r1
    79de:	8a 81       	ldd	r24, Y+2	; 0x02
    79e0:	28 2f       	mov	r18, r24
    79e2:	30 e0       	ldi	r19, 0x00	; 0
    79e4:	4d 85       	ldd	r20, Y+13	; 0x0d
    79e6:	5e 85       	ldd	r21, Y+14	; 0x0e
    79e8:	c9 01       	movw	r24, r18
    79ea:	88 0f       	add	r24, r24
    79ec:	99 1f       	adc	r25, r25
    79ee:	88 0f       	add	r24, r24
    79f0:	99 1f       	adc	r25, r25
    79f2:	82 0f       	add	r24, r18
    79f4:	93 1f       	adc	r25, r19
    79f6:	84 0f       	add	r24, r20
    79f8:	95 1f       	adc	r25, r21
    79fa:	4c 96       	adiw	r24, 0x1c	; 28
    79fc:	2f ef       	ldi	r18, 0xFF	; 255
    79fe:	3f ef       	ldi	r19, 0xFF	; 255
    7a00:	fc 01       	movw	r30, r24
    7a02:	31 83       	std	Z+1, r19	; 0x01
    7a04:	20 83       	st	Z, r18
    7a06:	8a 81       	ldd	r24, Y+2	; 0x02
    7a08:	28 2f       	mov	r18, r24
    7a0a:	30 e0       	ldi	r19, 0x00	; 0
    7a0c:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a0e:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a10:	c9 01       	movw	r24, r18
    7a12:	88 0f       	add	r24, r24
    7a14:	99 1f       	adc	r25, r25
    7a16:	88 0f       	add	r24, r24
    7a18:	99 1f       	adc	r25, r25
    7a1a:	82 0f       	add	r24, r18
    7a1c:	93 1f       	adc	r25, r19
    7a1e:	84 0f       	add	r24, r20
    7a20:	95 1f       	adc	r25, r21
    7a22:	4f 96       	adiw	r24, 0x1f	; 31
    7a24:	fc 01       	movw	r30, r24
    7a26:	10 82       	st	Z, r1
    7a28:	8a 81       	ldd	r24, Y+2	; 0x02
    7a2a:	8f 5f       	subi	r24, 0xFF	; 255
    7a2c:	8a 83       	std	Y+2, r24	; 0x02
    7a2e:	af cf       	rjmp	.-162    	; 0x798e <_ZN6Keypad10updateListEv+0x1c>
    7a30:	1b 82       	std	Y+3, r1	; 0x03
    7a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a36:	85 5a       	subi	r24, 0xA5	; 165
    7a38:	9f 4f       	sbci	r25, 0xFF	; 255
    7a3a:	fc 01       	movw	r30, r24
    7a3c:	90 81       	ld	r25, Z
    7a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    7a40:	89 17       	cp	r24, r25
    7a42:	08 f0       	brcs	.+2      	; 0x7a46 <_ZN6Keypad10updateListEv+0xd4>
    7a44:	df c0       	rjmp	.+446    	; 0x7c04 <_ZN6Keypad10updateListEv+0x292>
    7a46:	1c 82       	std	Y+4, r1	; 0x04
    7a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a4c:	84 5a       	subi	r24, 0xA4	; 164
    7a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7a50:	fc 01       	movw	r30, r24
    7a52:	90 81       	ld	r25, Z
    7a54:	8c 81       	ldd	r24, Y+4	; 0x04
    7a56:	89 17       	cp	r24, r25
    7a58:	08 f0       	brcs	.+2      	; 0x7a5c <_ZN6Keypad10updateListEv+0xea>
    7a5a:	d0 c0       	rjmp	.+416    	; 0x7bfc <_ZN6Keypad10updateListEv+0x28a>
    7a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    7a5e:	88 2f       	mov	r24, r24
    7a60:	90 e0       	ldi	r25, 0x00	; 0
    7a62:	2d 85       	ldd	r18, Y+13	; 0x0d
    7a64:	3e 85       	ldd	r19, Y+14	; 0x0e
    7a66:	88 0f       	add	r24, r24
    7a68:	99 1f       	adc	r25, r25
    7a6a:	82 0f       	add	r24, r18
    7a6c:	93 1f       	adc	r25, r19
    7a6e:	07 96       	adiw	r24, 0x07	; 7
    7a70:	fc 01       	movw	r30, r24
    7a72:	80 81       	ld	r24, Z
    7a74:	91 81       	ldd	r25, Z+1	; 0x01
    7a76:	2c 81       	ldd	r18, Y+4	; 0x04
    7a78:	22 2f       	mov	r18, r18
    7a7a:	30 e0       	ldi	r19, 0x00	; 0
    7a7c:	02 c0       	rjmp	.+4      	; 0x7a82 <_ZN6Keypad10updateListEv+0x110>
    7a7e:	96 95       	lsr	r25
    7a80:	87 95       	ror	r24
    7a82:	2a 95       	dec	r18
    7a84:	e2 f7       	brpl	.-8      	; 0x7a7e <_ZN6Keypad10updateListEv+0x10c>
    7a86:	81 70       	andi	r24, 0x01	; 1
    7a88:	99 27       	eor	r25, r25
    7a8a:	21 e0       	ldi	r18, 0x01	; 1
    7a8c:	89 2b       	or	r24, r25
    7a8e:	09 f4       	brne	.+2      	; 0x7a92 <_ZN6Keypad10updateListEv+0x120>
    7a90:	20 e0       	ldi	r18, 0x00	; 0
    7a92:	2f 83       	std	Y+7, r18	; 0x07
    7a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a98:	8b 5a       	subi	r24, 0xAB	; 171
    7a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    7a9c:	fc 01       	movw	r30, r24
    7a9e:	80 81       	ld	r24, Z
    7aa0:	91 81       	ldd	r25, Z+1	; 0x01
    7aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    7aa4:	62 2f       	mov	r22, r18
    7aa6:	70 e0       	ldi	r23, 0x00	; 0
    7aa8:	2d 85       	ldd	r18, Y+13	; 0x0d
    7aaa:	3e 85       	ldd	r19, Y+14	; 0x0e
    7aac:	24 5a       	subi	r18, 0xA4	; 164
    7aae:	3f 4f       	sbci	r19, 0xFF	; 255
    7ab0:	f9 01       	movw	r30, r18
    7ab2:	20 81       	ld	r18, Z
    7ab4:	22 2f       	mov	r18, r18
    7ab6:	30 e0       	ldi	r19, 0x00	; 0
    7ab8:	62 9f       	mul	r22, r18
    7aba:	a0 01       	movw	r20, r0
    7abc:	63 9f       	mul	r22, r19
    7abe:	50 0d       	add	r21, r0
    7ac0:	72 9f       	mul	r23, r18
    7ac2:	50 0d       	add	r21, r0
    7ac4:	11 24       	eor	r1, r1
    7ac6:	2c 81       	ldd	r18, Y+4	; 0x04
    7ac8:	22 2f       	mov	r18, r18
    7aca:	30 e0       	ldi	r19, 0x00	; 0
    7acc:	24 0f       	add	r18, r20
    7ace:	35 1f       	adc	r19, r21
    7ad0:	82 0f       	add	r24, r18
    7ad2:	93 1f       	adc	r25, r19
    7ad4:	fc 01       	movw	r30, r24
    7ad6:	80 81       	ld	r24, Z
    7ad8:	88 87       	std	Y+8, r24	; 0x08
    7ada:	8b 81       	ldd	r24, Y+3	; 0x03
    7adc:	48 2f       	mov	r20, r24
    7ade:	50 e0       	ldi	r21, 0x00	; 0
    7ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    7ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    7ae4:	84 5a       	subi	r24, 0xA4	; 164
    7ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    7ae8:	fc 01       	movw	r30, r24
    7aea:	80 81       	ld	r24, Z
    7aec:	88 2f       	mov	r24, r24
    7aee:	90 e0       	ldi	r25, 0x00	; 0
    7af0:	48 9f       	mul	r20, r24
    7af2:	90 01       	movw	r18, r0
    7af4:	49 9f       	mul	r20, r25
    7af6:	30 0d       	add	r19, r0
    7af8:	58 9f       	mul	r21, r24
    7afa:	30 0d       	add	r19, r0
    7afc:	11 24       	eor	r1, r1
    7afe:	8c 81       	ldd	r24, Y+4	; 0x04
    7b00:	88 2f       	mov	r24, r24
    7b02:	90 e0       	ldi	r25, 0x00	; 0
    7b04:	82 0f       	add	r24, r18
    7b06:	93 1f       	adc	r25, r19
    7b08:	9a 87       	std	Y+10, r25	; 0x0a
    7b0a:	89 87       	std	Y+9, r24	; 0x09
    7b0c:	29 85       	ldd	r18, Y+9	; 0x09
    7b0e:	3a 85       	ldd	r19, Y+10	; 0x0a
    7b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    7b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    7b14:	b9 01       	movw	r22, r18
    7b16:	46 d1       	rcall	.+652    	; 0x7da4 <_ZN6Keypad10findInListEi>
    7b18:	9c 87       	std	Y+12, r25	; 0x0c
    7b1a:	8b 87       	std	Y+11, r24	; 0x0b
    7b1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    7b1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7b20:	99 23       	and	r25, r25
    7b22:	34 f0       	brlt	.+12     	; 0x7b30 <_ZN6Keypad10updateListEv+0x1be>
    7b24:	2b 85       	ldd	r18, Y+11	; 0x0b
    7b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    7b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    7b2a:	4f 81       	ldd	r20, Y+7	; 0x07
    7b2c:	62 2f       	mov	r22, r18
    7b2e:	91 d0       	rcall	.+290    	; 0x7c52 <_ZN6Keypad12nextKeyStateEhb>
    7b30:	8b 85       	ldd	r24, Y+11	; 0x0b
    7b32:	9c 85       	ldd	r25, Y+12	; 0x0c
    7b34:	01 96       	adiw	r24, 0x01	; 1
    7b36:	09 f0       	breq	.+2      	; 0x7b3a <_ZN6Keypad10updateListEv+0x1c8>
    7b38:	5d c0       	rjmp	.+186    	; 0x7bf4 <_ZN6Keypad10updateListEv+0x282>
    7b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    7b3c:	88 23       	and	r24, r24
    7b3e:	09 f4       	brne	.+2      	; 0x7b42 <_ZN6Keypad10updateListEv+0x1d0>
    7b40:	59 c0       	rjmp	.+178    	; 0x7bf4 <_ZN6Keypad10updateListEv+0x282>
    7b42:	1d 82       	std	Y+5, r1	; 0x05
    7b44:	8d 81       	ldd	r24, Y+5	; 0x05
    7b46:	8a 30       	cpi	r24, 0x0A	; 10
    7b48:	08 f0       	brcs	.+2      	; 0x7b4c <_ZN6Keypad10updateListEv+0x1da>
    7b4a:	54 c0       	rjmp	.+168    	; 0x7bf4 <_ZN6Keypad10updateListEv+0x282>
    7b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    7b4e:	28 2f       	mov	r18, r24
    7b50:	30 e0       	ldi	r19, 0x00	; 0
    7b52:	4d 85       	ldd	r20, Y+13	; 0x0d
    7b54:	5e 85       	ldd	r21, Y+14	; 0x0e
    7b56:	c9 01       	movw	r24, r18
    7b58:	88 0f       	add	r24, r24
    7b5a:	99 1f       	adc	r25, r25
    7b5c:	88 0f       	add	r24, r24
    7b5e:	99 1f       	adc	r25, r25
    7b60:	82 0f       	add	r24, r18
    7b62:	93 1f       	adc	r25, r19
    7b64:	84 0f       	add	r24, r20
    7b66:	95 1f       	adc	r25, r21
    7b68:	4b 96       	adiw	r24, 0x1b	; 27
    7b6a:	fc 01       	movw	r30, r24
    7b6c:	80 81       	ld	r24, Z
    7b6e:	88 23       	and	r24, r24
    7b70:	e9 f5       	brne	.+122    	; 0x7bec <_ZN6Keypad10updateListEv+0x27a>
    7b72:	8d 81       	ldd	r24, Y+5	; 0x05
    7b74:	28 2f       	mov	r18, r24
    7b76:	30 e0       	ldi	r19, 0x00	; 0
    7b78:	4d 85       	ldd	r20, Y+13	; 0x0d
    7b7a:	5e 85       	ldd	r21, Y+14	; 0x0e
    7b7c:	c9 01       	movw	r24, r18
    7b7e:	88 0f       	add	r24, r24
    7b80:	99 1f       	adc	r25, r25
    7b82:	88 0f       	add	r24, r24
    7b84:	99 1f       	adc	r25, r25
    7b86:	82 0f       	add	r24, r18
    7b88:	93 1f       	adc	r25, r19
    7b8a:	84 0f       	add	r24, r20
    7b8c:	95 1f       	adc	r25, r21
    7b8e:	4b 96       	adiw	r24, 0x1b	; 27
    7b90:	28 85       	ldd	r18, Y+8	; 0x08
    7b92:	fc 01       	movw	r30, r24
    7b94:	20 83       	st	Z, r18
    7b96:	8d 81       	ldd	r24, Y+5	; 0x05
    7b98:	28 2f       	mov	r18, r24
    7b9a:	30 e0       	ldi	r19, 0x00	; 0
    7b9c:	4d 85       	ldd	r20, Y+13	; 0x0d
    7b9e:	5e 85       	ldd	r21, Y+14	; 0x0e
    7ba0:	c9 01       	movw	r24, r18
    7ba2:	88 0f       	add	r24, r24
    7ba4:	99 1f       	adc	r25, r25
    7ba6:	88 0f       	add	r24, r24
    7ba8:	99 1f       	adc	r25, r25
    7baa:	82 0f       	add	r24, r18
    7bac:	93 1f       	adc	r25, r19
    7bae:	84 0f       	add	r24, r20
    7bb0:	95 1f       	adc	r25, r21
    7bb2:	4c 96       	adiw	r24, 0x1c	; 28
    7bb4:	29 85       	ldd	r18, Y+9	; 0x09
    7bb6:	3a 85       	ldd	r19, Y+10	; 0x0a
    7bb8:	fc 01       	movw	r30, r24
    7bba:	31 83       	std	Z+1, r19	; 0x01
    7bbc:	20 83       	st	Z, r18
    7bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    7bc0:	28 2f       	mov	r18, r24
    7bc2:	30 e0       	ldi	r19, 0x00	; 0
    7bc4:	4d 85       	ldd	r20, Y+13	; 0x0d
    7bc6:	5e 85       	ldd	r21, Y+14	; 0x0e
    7bc8:	c9 01       	movw	r24, r18
    7bca:	88 0f       	add	r24, r24
    7bcc:	99 1f       	adc	r25, r25
    7bce:	88 0f       	add	r24, r24
    7bd0:	99 1f       	adc	r25, r25
    7bd2:	82 0f       	add	r24, r18
    7bd4:	93 1f       	adc	r25, r19
    7bd6:	84 0f       	add	r24, r20
    7bd8:	95 1f       	adc	r25, r21
    7bda:	4e 96       	adiw	r24, 0x1e	; 30
    7bdc:	fc 01       	movw	r30, r24
    7bde:	10 82       	st	Z, r1
    7be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    7be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    7be4:	4f 81       	ldd	r20, Y+7	; 0x07
    7be6:	6d 81       	ldd	r22, Y+5	; 0x05
    7be8:	34 d0       	rcall	.+104    	; 0x7c52 <_ZN6Keypad12nextKeyStateEhb>
    7bea:	04 c0       	rjmp	.+8      	; 0x7bf4 <_ZN6Keypad10updateListEv+0x282>
    7bec:	8d 81       	ldd	r24, Y+5	; 0x05
    7bee:	8f 5f       	subi	r24, 0xFF	; 255
    7bf0:	8d 83       	std	Y+5, r24	; 0x05
    7bf2:	a8 cf       	rjmp	.-176    	; 0x7b44 <_ZN6Keypad10updateListEv+0x1d2>
    7bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    7bf6:	8f 5f       	subi	r24, 0xFF	; 255
    7bf8:	8c 83       	std	Y+4, r24	; 0x04
    7bfa:	26 cf       	rjmp	.-436    	; 0x7a48 <_ZN6Keypad10updateListEv+0xd6>
    7bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    7bfe:	8f 5f       	subi	r24, 0xFF	; 255
    7c00:	8b 83       	std	Y+3, r24	; 0x03
    7c02:	17 cf       	rjmp	.-466    	; 0x7a32 <_ZN6Keypad10updateListEv+0xc0>
    7c04:	1e 82       	std	Y+6, r1	; 0x06
    7c06:	8e 81       	ldd	r24, Y+6	; 0x06
    7c08:	8a 30       	cpi	r24, 0x0A	; 10
    7c0a:	c8 f4       	brcc	.+50     	; 0x7c3e <_ZN6Keypad10updateListEv+0x2cc>
    7c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    7c0e:	28 2f       	mov	r18, r24
    7c10:	30 e0       	ldi	r19, 0x00	; 0
    7c12:	4d 85       	ldd	r20, Y+13	; 0x0d
    7c14:	5e 85       	ldd	r21, Y+14	; 0x0e
    7c16:	c9 01       	movw	r24, r18
    7c18:	88 0f       	add	r24, r24
    7c1a:	99 1f       	adc	r25, r25
    7c1c:	88 0f       	add	r24, r24
    7c1e:	99 1f       	adc	r25, r25
    7c20:	82 0f       	add	r24, r18
    7c22:	93 1f       	adc	r25, r19
    7c24:	84 0f       	add	r24, r20
    7c26:	95 1f       	adc	r25, r21
    7c28:	4f 96       	adiw	r24, 0x1f	; 31
    7c2a:	fc 01       	movw	r30, r24
    7c2c:	80 81       	ld	r24, Z
    7c2e:	88 23       	and	r24, r24
    7c30:	11 f0       	breq	.+4      	; 0x7c36 <_ZN6Keypad10updateListEv+0x2c4>
    7c32:	81 e0       	ldi	r24, 0x01	; 1
    7c34:	89 83       	std	Y+1, r24	; 0x01
    7c36:	8e 81       	ldd	r24, Y+6	; 0x06
    7c38:	8f 5f       	subi	r24, 0xFF	; 255
    7c3a:	8e 83       	std	Y+6, r24	; 0x06
    7c3c:	e4 cf       	rjmp	.-56     	; 0x7c06 <_ZN6Keypad10updateListEv+0x294>
    7c3e:	89 81       	ldd	r24, Y+1	; 0x01
    7c40:	2e 96       	adiw	r28, 0x0e	; 14
    7c42:	0f b6       	in	r0, 0x3f	; 63
    7c44:	f8 94       	cli
    7c46:	de bf       	out	0x3e, r29	; 62
    7c48:	0f be       	out	0x3f, r0	; 63
    7c4a:	cd bf       	out	0x3d, r28	; 61
    7c4c:	df 91       	pop	r29
    7c4e:	cf 91       	pop	r28
    7c50:	08 95       	ret

00007c52 <_ZN6Keypad12nextKeyStateEhb>:
    7c52:	cf 93       	push	r28
    7c54:	df 93       	push	r29
    7c56:	00 d0       	rcall	.+0      	; 0x7c58 <_ZN6Keypad12nextKeyStateEhb+0x6>
    7c58:	1f 92       	push	r1
    7c5a:	cd b7       	in	r28, 0x3d	; 61
    7c5c:	de b7       	in	r29, 0x3e	; 62
    7c5e:	9a 83       	std	Y+2, r25	; 0x02
    7c60:	89 83       	std	Y+1, r24	; 0x01
    7c62:	6b 83       	std	Y+3, r22	; 0x03
    7c64:	4c 83       	std	Y+4, r20	; 0x04
    7c66:	8b 81       	ldd	r24, Y+3	; 0x03
    7c68:	28 2f       	mov	r18, r24
    7c6a:	30 e0       	ldi	r19, 0x00	; 0
    7c6c:	49 81       	ldd	r20, Y+1	; 0x01
    7c6e:	5a 81       	ldd	r21, Y+2	; 0x02
    7c70:	c9 01       	movw	r24, r18
    7c72:	88 0f       	add	r24, r24
    7c74:	99 1f       	adc	r25, r25
    7c76:	88 0f       	add	r24, r24
    7c78:	99 1f       	adc	r25, r25
    7c7a:	82 0f       	add	r24, r18
    7c7c:	93 1f       	adc	r25, r19
    7c7e:	84 0f       	add	r24, r20
    7c80:	95 1f       	adc	r25, r21
    7c82:	4f 96       	adiw	r24, 0x1f	; 31
    7c84:	fc 01       	movw	r30, r24
    7c86:	10 82       	st	Z, r1
    7c88:	8b 81       	ldd	r24, Y+3	; 0x03
    7c8a:	28 2f       	mov	r18, r24
    7c8c:	30 e0       	ldi	r19, 0x00	; 0
    7c8e:	49 81       	ldd	r20, Y+1	; 0x01
    7c90:	5a 81       	ldd	r21, Y+2	; 0x02
    7c92:	c9 01       	movw	r24, r18
    7c94:	88 0f       	add	r24, r24
    7c96:	99 1f       	adc	r25, r25
    7c98:	88 0f       	add	r24, r24
    7c9a:	99 1f       	adc	r25, r25
    7c9c:	82 0f       	add	r24, r18
    7c9e:	93 1f       	adc	r25, r19
    7ca0:	84 0f       	add	r24, r20
    7ca2:	95 1f       	adc	r25, r21
    7ca4:	4e 96       	adiw	r24, 0x1e	; 30
    7ca6:	fc 01       	movw	r30, r24
    7ca8:	80 81       	ld	r24, Z
    7caa:	88 2f       	mov	r24, r24
    7cac:	90 e0       	ldi	r25, 0x00	; 0
    7cae:	81 30       	cpi	r24, 0x01	; 1
    7cb0:	91 05       	cpc	r25, r1
    7cb2:	29 f1       	breq	.+74     	; 0x7cfe <_ZN6Keypad12nextKeyStateEhb+0xac>
    7cb4:	82 30       	cpi	r24, 0x02	; 2
    7cb6:	91 05       	cpc	r25, r1
    7cb8:	1c f4       	brge	.+6      	; 0x7cc0 <_ZN6Keypad12nextKeyStateEhb+0x6e>
    7cba:	89 2b       	or	r24, r25
    7cbc:	49 f0       	breq	.+18     	; 0x7cd0 <_ZN6Keypad12nextKeyStateEhb+0x7e>
    7cbe:	6a c0       	rjmp	.+212    	; 0x7d94 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7cc0:	82 30       	cpi	r24, 0x02	; 2
    7cc2:	91 05       	cpc	r25, r1
    7cc4:	09 f4       	brne	.+2      	; 0x7cc8 <_ZN6Keypad12nextKeyStateEhb+0x76>
    7cc6:	50 c0       	rjmp	.+160    	; 0x7d68 <_ZN6Keypad12nextKeyStateEhb+0x116>
    7cc8:	03 97       	sbiw	r24, 0x03	; 3
    7cca:	09 f4       	brne	.+2      	; 0x7cce <_ZN6Keypad12nextKeyStateEhb+0x7c>
    7ccc:	58 c0       	rjmp	.+176    	; 0x7d7e <_ZN6Keypad12nextKeyStateEhb+0x12c>
    7cce:	62 c0       	rjmp	.+196    	; 0x7d94 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    7cd2:	88 23       	and	r24, r24
    7cd4:	09 f4       	brne	.+2      	; 0x7cd8 <_ZN6Keypad12nextKeyStateEhb+0x86>
    7cd6:	59 c0       	rjmp	.+178    	; 0x7d8a <_ZN6Keypad12nextKeyStateEhb+0x138>
    7cd8:	89 81       	ldd	r24, Y+1	; 0x01
    7cda:	9a 81       	ldd	r25, Y+2	; 0x02
    7cdc:	41 e0       	ldi	r20, 0x01	; 1
    7cde:	6b 81       	ldd	r22, Y+3	; 0x03
    7ce0:	dd d0       	rcall	.+442    	; 0x7e9c <_ZN6Keypad12transitionToEh8KeyState>
    7ce2:	0e 94 ff 5e 	call	0xbdfe	; 0xbdfe <millis>
    7ce6:	dc 01       	movw	r26, r24
    7ce8:	cb 01       	movw	r24, r22
    7cea:	29 81       	ldd	r18, Y+1	; 0x01
    7cec:	3a 81       	ldd	r19, Y+2	; 0x02
    7cee:	23 5b       	subi	r18, 0xB3	; 179
    7cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    7cf2:	f9 01       	movw	r30, r18
    7cf4:	80 83       	st	Z, r24
    7cf6:	91 83       	std	Z+1, r25	; 0x01
    7cf8:	a2 83       	std	Z+2, r26	; 0x02
    7cfa:	b3 83       	std	Z+3, r27	; 0x03
    7cfc:	46 c0       	rjmp	.+140    	; 0x7d8a <_ZN6Keypad12nextKeyStateEhb+0x138>
    7cfe:	0e 94 ff 5e 	call	0xbdfe	; 0xbdfe <millis>
    7d02:	9b 01       	movw	r18, r22
    7d04:	ac 01       	movw	r20, r24
    7d06:	89 81       	ldd	r24, Y+1	; 0x01
    7d08:	9a 81       	ldd	r25, Y+2	; 0x02
    7d0a:	83 5b       	subi	r24, 0xB3	; 179
    7d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d0e:	fc 01       	movw	r30, r24
    7d10:	80 81       	ld	r24, Z
    7d12:	91 81       	ldd	r25, Z+1	; 0x01
    7d14:	a2 81       	ldd	r26, Z+2	; 0x02
    7d16:	b3 81       	ldd	r27, Z+3	; 0x03
    7d18:	28 1b       	sub	r18, r24
    7d1a:	39 0b       	sbc	r19, r25
    7d1c:	4a 0b       	sbc	r20, r26
    7d1e:	5b 0b       	sbc	r21, r27
    7d20:	89 81       	ldd	r24, Y+1	; 0x01
    7d22:	9a 81       	ldd	r25, Y+2	; 0x02
    7d24:	81 5a       	subi	r24, 0xA1	; 161
    7d26:	9f 4f       	sbci	r25, 0xFF	; 255
    7d28:	fc 01       	movw	r30, r24
    7d2a:	80 81       	ld	r24, Z
    7d2c:	91 81       	ldd	r25, Z+1	; 0x01
    7d2e:	cc 01       	movw	r24, r24
    7d30:	a0 e0       	ldi	r26, 0x00	; 0
    7d32:	b0 e0       	ldi	r27, 0x00	; 0
    7d34:	61 e0       	ldi	r22, 0x01	; 1
    7d36:	82 17       	cp	r24, r18
    7d38:	93 07       	cpc	r25, r19
    7d3a:	a4 07       	cpc	r26, r20
    7d3c:	b5 07       	cpc	r27, r21
    7d3e:	08 f0       	brcs	.+2      	; 0x7d42 <_ZN6Keypad12nextKeyStateEhb+0xf0>
    7d40:	60 e0       	ldi	r22, 0x00	; 0
    7d42:	66 23       	and	r22, r22
    7d44:	31 f0       	breq	.+12     	; 0x7d52 <_ZN6Keypad12nextKeyStateEhb+0x100>
    7d46:	89 81       	ldd	r24, Y+1	; 0x01
    7d48:	9a 81       	ldd	r25, Y+2	; 0x02
    7d4a:	42 e0       	ldi	r20, 0x02	; 2
    7d4c:	6b 81       	ldd	r22, Y+3	; 0x03
    7d4e:	a6 d0       	rcall	.+332    	; 0x7e9c <_ZN6Keypad12transitionToEh8KeyState>
    7d50:	1e c0       	rjmp	.+60     	; 0x7d8e <_ZN6Keypad12nextKeyStateEhb+0x13c>
    7d52:	9c 81       	ldd	r25, Y+4	; 0x04
    7d54:	81 e0       	ldi	r24, 0x01	; 1
    7d56:	89 27       	eor	r24, r25
    7d58:	88 23       	and	r24, r24
    7d5a:	c9 f0       	breq	.+50     	; 0x7d8e <_ZN6Keypad12nextKeyStateEhb+0x13c>
    7d5c:	89 81       	ldd	r24, Y+1	; 0x01
    7d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    7d60:	43 e0       	ldi	r20, 0x03	; 3
    7d62:	6b 81       	ldd	r22, Y+3	; 0x03
    7d64:	9b d0       	rcall	.+310    	; 0x7e9c <_ZN6Keypad12transitionToEh8KeyState>
    7d66:	13 c0       	rjmp	.+38     	; 0x7d8e <_ZN6Keypad12nextKeyStateEhb+0x13c>
    7d68:	9c 81       	ldd	r25, Y+4	; 0x04
    7d6a:	81 e0       	ldi	r24, 0x01	; 1
    7d6c:	89 27       	eor	r24, r25
    7d6e:	88 23       	and	r24, r24
    7d70:	81 f0       	breq	.+32     	; 0x7d92 <_ZN6Keypad12nextKeyStateEhb+0x140>
    7d72:	89 81       	ldd	r24, Y+1	; 0x01
    7d74:	9a 81       	ldd	r25, Y+2	; 0x02
    7d76:	43 e0       	ldi	r20, 0x03	; 3
    7d78:	6b 81       	ldd	r22, Y+3	; 0x03
    7d7a:	90 d0       	rcall	.+288    	; 0x7e9c <_ZN6Keypad12transitionToEh8KeyState>
    7d7c:	0a c0       	rjmp	.+20     	; 0x7d92 <_ZN6Keypad12nextKeyStateEhb+0x140>
    7d7e:	89 81       	ldd	r24, Y+1	; 0x01
    7d80:	9a 81       	ldd	r25, Y+2	; 0x02
    7d82:	40 e0       	ldi	r20, 0x00	; 0
    7d84:	6b 81       	ldd	r22, Y+3	; 0x03
    7d86:	8a d0       	rcall	.+276    	; 0x7e9c <_ZN6Keypad12transitionToEh8KeyState>
    7d88:	05 c0       	rjmp	.+10     	; 0x7d94 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7d8a:	00 00       	nop
    7d8c:	03 c0       	rjmp	.+6      	; 0x7d94 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7d8e:	00 00       	nop
    7d90:	01 c0       	rjmp	.+2      	; 0x7d94 <_ZN6Keypad12nextKeyStateEhb+0x142>
    7d92:	00 00       	nop
    7d94:	00 00       	nop
    7d96:	0f 90       	pop	r0
    7d98:	0f 90       	pop	r0
    7d9a:	0f 90       	pop	r0
    7d9c:	0f 90       	pop	r0
    7d9e:	df 91       	pop	r29
    7da0:	cf 91       	pop	r28
    7da2:	08 95       	ret

00007da4 <_ZN6Keypad10findInListEi>:
    7da4:	cf 93       	push	r28
    7da6:	df 93       	push	r29
    7da8:	00 d0       	rcall	.+0      	; 0x7daa <_ZN6Keypad10findInListEi+0x6>
    7daa:	1f 92       	push	r1
    7dac:	1f 92       	push	r1
    7dae:	cd b7       	in	r28, 0x3d	; 61
    7db0:	de b7       	in	r29, 0x3e	; 62
    7db2:	9b 83       	std	Y+3, r25	; 0x03
    7db4:	8a 83       	std	Y+2, r24	; 0x02
    7db6:	7d 83       	std	Y+5, r23	; 0x05
    7db8:	6c 83       	std	Y+4, r22	; 0x04
    7dba:	19 82       	std	Y+1, r1	; 0x01
    7dbc:	89 81       	ldd	r24, Y+1	; 0x01
    7dbe:	8a 30       	cpi	r24, 0x0A	; 10
    7dc0:	f8 f4       	brcc	.+62     	; 0x7e00 <_ZN6Keypad10findInListEi+0x5c>
    7dc2:	89 81       	ldd	r24, Y+1	; 0x01
    7dc4:	28 2f       	mov	r18, r24
    7dc6:	30 e0       	ldi	r19, 0x00	; 0
    7dc8:	4a 81       	ldd	r20, Y+2	; 0x02
    7dca:	5b 81       	ldd	r21, Y+3	; 0x03
    7dcc:	c9 01       	movw	r24, r18
    7dce:	88 0f       	add	r24, r24
    7dd0:	99 1f       	adc	r25, r25
    7dd2:	88 0f       	add	r24, r24
    7dd4:	99 1f       	adc	r25, r25
    7dd6:	82 0f       	add	r24, r18
    7dd8:	93 1f       	adc	r25, r19
    7dda:	84 0f       	add	r24, r20
    7ddc:	95 1f       	adc	r25, r21
    7dde:	4c 96       	adiw	r24, 0x1c	; 28
    7de0:	fc 01       	movw	r30, r24
    7de2:	20 81       	ld	r18, Z
    7de4:	31 81       	ldd	r19, Z+1	; 0x01
    7de6:	8c 81       	ldd	r24, Y+4	; 0x04
    7de8:	9d 81       	ldd	r25, Y+5	; 0x05
    7dea:	28 17       	cp	r18, r24
    7dec:	39 07       	cpc	r19, r25
    7dee:	21 f4       	brne	.+8      	; 0x7df8 <_ZN6Keypad10findInListEi+0x54>
    7df0:	89 81       	ldd	r24, Y+1	; 0x01
    7df2:	88 2f       	mov	r24, r24
    7df4:	90 e0       	ldi	r25, 0x00	; 0
    7df6:	06 c0       	rjmp	.+12     	; 0x7e04 <_ZN6Keypad10findInListEi+0x60>
    7df8:	89 81       	ldd	r24, Y+1	; 0x01
    7dfa:	8f 5f       	subi	r24, 0xFF	; 255
    7dfc:	89 83       	std	Y+1, r24	; 0x01
    7dfe:	de cf       	rjmp	.-68     	; 0x7dbc <_ZN6Keypad10findInListEi+0x18>
    7e00:	8f ef       	ldi	r24, 0xFF	; 255
    7e02:	9f ef       	ldi	r25, 0xFF	; 255
    7e04:	0f 90       	pop	r0
    7e06:	0f 90       	pop	r0
    7e08:	0f 90       	pop	r0
    7e0a:	0f 90       	pop	r0
    7e0c:	0f 90       	pop	r0
    7e0e:	df 91       	pop	r29
    7e10:	cf 91       	pop	r28
    7e12:	08 95       	ret

00007e14 <_ZN6Keypad15setDebounceTimeEj>:
    7e14:	cf 93       	push	r28
    7e16:	df 93       	push	r29
    7e18:	00 d0       	rcall	.+0      	; 0x7e1a <_ZN6Keypad15setDebounceTimeEj+0x6>
    7e1a:	1f 92       	push	r1
    7e1c:	cd b7       	in	r28, 0x3d	; 61
    7e1e:	de b7       	in	r29, 0x3e	; 62
    7e20:	9a 83       	std	Y+2, r25	; 0x02
    7e22:	89 83       	std	Y+1, r24	; 0x01
    7e24:	7c 83       	std	Y+4, r23	; 0x04
    7e26:	6b 83       	std	Y+3, r22	; 0x03
    7e28:	8b 81       	ldd	r24, Y+3	; 0x03
    7e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    7e2c:	89 2b       	or	r24, r25
    7e2e:	51 f4       	brne	.+20     	; 0x7e44 <_ZN6Keypad15setDebounceTimeEj+0x30>
    7e30:	89 81       	ldd	r24, Y+1	; 0x01
    7e32:	9a 81       	ldd	r25, Y+2	; 0x02
    7e34:	83 5a       	subi	r24, 0xA3	; 163
    7e36:	9f 4f       	sbci	r25, 0xFF	; 255
    7e38:	21 e0       	ldi	r18, 0x01	; 1
    7e3a:	30 e0       	ldi	r19, 0x00	; 0
    7e3c:	fc 01       	movw	r30, r24
    7e3e:	31 83       	std	Z+1, r19	; 0x01
    7e40:	20 83       	st	Z, r18
    7e42:	09 c0       	rjmp	.+18     	; 0x7e56 <_ZN6Keypad15setDebounceTimeEj+0x42>
    7e44:	89 81       	ldd	r24, Y+1	; 0x01
    7e46:	9a 81       	ldd	r25, Y+2	; 0x02
    7e48:	83 5a       	subi	r24, 0xA3	; 163
    7e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    7e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    7e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    7e50:	fc 01       	movw	r30, r24
    7e52:	31 83       	std	Z+1, r19	; 0x01
    7e54:	20 83       	st	Z, r18
    7e56:	00 00       	nop
    7e58:	0f 90       	pop	r0
    7e5a:	0f 90       	pop	r0
    7e5c:	0f 90       	pop	r0
    7e5e:	0f 90       	pop	r0
    7e60:	df 91       	pop	r29
    7e62:	cf 91       	pop	r28
    7e64:	08 95       	ret

00007e66 <_ZN6Keypad11setHoldTimeEj>:
    7e66:	cf 93       	push	r28
    7e68:	df 93       	push	r29
    7e6a:	00 d0       	rcall	.+0      	; 0x7e6c <_ZN6Keypad11setHoldTimeEj+0x6>
    7e6c:	1f 92       	push	r1
    7e6e:	cd b7       	in	r28, 0x3d	; 61
    7e70:	de b7       	in	r29, 0x3e	; 62
    7e72:	9a 83       	std	Y+2, r25	; 0x02
    7e74:	89 83       	std	Y+1, r24	; 0x01
    7e76:	7c 83       	std	Y+4, r23	; 0x04
    7e78:	6b 83       	std	Y+3, r22	; 0x03
    7e7a:	89 81       	ldd	r24, Y+1	; 0x01
    7e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e7e:	81 5a       	subi	r24, 0xA1	; 161
    7e80:	9f 4f       	sbci	r25, 0xFF	; 255
    7e82:	2b 81       	ldd	r18, Y+3	; 0x03
    7e84:	3c 81       	ldd	r19, Y+4	; 0x04
    7e86:	fc 01       	movw	r30, r24
    7e88:	31 83       	std	Z+1, r19	; 0x01
    7e8a:	20 83       	st	Z, r18
    7e8c:	00 00       	nop
    7e8e:	0f 90       	pop	r0
    7e90:	0f 90       	pop	r0
    7e92:	0f 90       	pop	r0
    7e94:	0f 90       	pop	r0
    7e96:	df 91       	pop	r29
    7e98:	cf 91       	pop	r28
    7e9a:	08 95       	ret

00007e9c <_ZN6Keypad12transitionToEh8KeyState>:

void Keypad::transitionTo(byte idx, KeyState nextState) {
    7e9c:	cf 93       	push	r28
    7e9e:	df 93       	push	r29
    7ea0:	00 d0       	rcall	.+0      	; 0x7ea2 <_ZN6Keypad12transitionToEh8KeyState+0x6>
    7ea2:	1f 92       	push	r1
    7ea4:	cd b7       	in	r28, 0x3d	; 61
    7ea6:	de b7       	in	r29, 0x3e	; 62
    7ea8:	9a 83       	std	Y+2, r25	; 0x02
    7eaa:	89 83       	std	Y+1, r24	; 0x01
    7eac:	6b 83       	std	Y+3, r22	; 0x03
    7eae:	4c 83       	std	Y+4, r20	; 0x04
	key[idx].kstate = nextState;
    7eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    7eb2:	28 2f       	mov	r18, r24
    7eb4:	30 e0       	ldi	r19, 0x00	; 0
    7eb6:	49 81       	ldd	r20, Y+1	; 0x01
    7eb8:	5a 81       	ldd	r21, Y+2	; 0x02
    7eba:	c9 01       	movw	r24, r18
    7ebc:	88 0f       	add	r24, r24
    7ebe:	99 1f       	adc	r25, r25
    7ec0:	88 0f       	add	r24, r24
    7ec2:	99 1f       	adc	r25, r25
    7ec4:	82 0f       	add	r24, r18
    7ec6:	93 1f       	adc	r25, r19
    7ec8:	84 0f       	add	r24, r20
    7eca:	95 1f       	adc	r25, r21
    7ecc:	4e 96       	adiw	r24, 0x1e	; 30
    7ece:	2c 81       	ldd	r18, Y+4	; 0x04
    7ed0:	fc 01       	movw	r30, r24
    7ed2:	20 83       	st	Z, r18
	key[idx].stateChanged = true;
    7ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    7ed6:	28 2f       	mov	r18, r24
    7ed8:	30 e0       	ldi	r19, 0x00	; 0
    7eda:	49 81       	ldd	r20, Y+1	; 0x01
    7edc:	5a 81       	ldd	r21, Y+2	; 0x02
    7ede:	c9 01       	movw	r24, r18
    7ee0:	88 0f       	add	r24, r24
    7ee2:	99 1f       	adc	r25, r25
    7ee4:	88 0f       	add	r24, r24
    7ee6:	99 1f       	adc	r25, r25
    7ee8:	82 0f       	add	r24, r18
    7eea:	93 1f       	adc	r25, r19
    7eec:	84 0f       	add	r24, r20
    7eee:	95 1f       	adc	r25, r21
    7ef0:	4f 96       	adiw	r24, 0x1f	; 31
    7ef2:	21 e0       	ldi	r18, 0x01	; 1
    7ef4:	fc 01       	movw	r30, r24
    7ef6:	20 83       	st	Z, r18

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    7ef8:	89 81       	ldd	r24, Y+1	; 0x01
    7efa:	9a 81       	ldd	r25, Y+2	; 0x02
    7efc:	8f 59       	subi	r24, 0x9F	; 159
    7efe:	9f 4f       	sbci	r25, 0xFF	; 255
    7f00:	fc 01       	movw	r30, r24
    7f02:	80 81       	ld	r24, Z
    7f04:	88 23       	and	r24, r24
    7f06:	d1 f0       	breq	.+52     	; 0x7f3c <_ZN6Keypad12transitionToEh8KeyState+0xa0>
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    7f08:	89 81       	ldd	r24, Y+1	; 0x01
    7f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    7f0c:	8e 59       	subi	r24, 0x9E	; 158
    7f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f10:	fc 01       	movw	r30, r24
    7f12:	80 81       	ld	r24, Z
    7f14:	91 81       	ldd	r25, Z+1	; 0x01
    7f16:	89 2b       	or	r24, r25
    7f18:	a1 f1       	breq	.+104    	; 0x7f82 <_ZN6Keypad12transitionToEh8KeyState+0xe6>
    7f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    7f1c:	88 23       	and	r24, r24
    7f1e:	89 f5       	brne	.+98     	; 0x7f82 <_ZN6Keypad12transitionToEh8KeyState+0xe6>
			keypadEventListener(key[0].kchar);
    7f20:	89 81       	ldd	r24, Y+1	; 0x01
    7f22:	9a 81       	ldd	r25, Y+2	; 0x02
    7f24:	8e 59       	subi	r24, 0x9E	; 158
    7f26:	9f 4f       	sbci	r25, 0xFF	; 255
    7f28:	fc 01       	movw	r30, r24
    7f2a:	20 81       	ld	r18, Z
    7f2c:	31 81       	ldd	r19, Z+1	; 0x01
    7f2e:	89 81       	ldd	r24, Y+1	; 0x01
    7f30:	9a 81       	ldd	r25, Y+2	; 0x02
    7f32:	fc 01       	movw	r30, r24
    7f34:	83 8d       	ldd	r24, Z+27	; 0x1b
    7f36:	f9 01       	movw	r30, r18
    7f38:	19 95       	eicall
	else {
	  	if (keypadEventListener!=NULL)  {
			keypadEventListener(key[idx].kchar);
		}
	}
}
    7f3a:	23 c0       	rjmp	.+70     	; 0x7f82 <_ZN6Keypad12transitionToEh8KeyState+0xe6>
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
    7f3c:	89 81       	ldd	r24, Y+1	; 0x01
    7f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    7f40:	8e 59       	subi	r24, 0x9E	; 158
    7f42:	9f 4f       	sbci	r25, 0xFF	; 255
    7f44:	fc 01       	movw	r30, r24
    7f46:	80 81       	ld	r24, Z
    7f48:	91 81       	ldd	r25, Z+1	; 0x01
    7f4a:	89 2b       	or	r24, r25
    7f4c:	d1 f0       	breq	.+52     	; 0x7f82 <_ZN6Keypad12transitionToEh8KeyState+0xe6>
			keypadEventListener(key[idx].kchar);
    7f4e:	89 81       	ldd	r24, Y+1	; 0x01
    7f50:	9a 81       	ldd	r25, Y+2	; 0x02
    7f52:	8e 59       	subi	r24, 0x9E	; 158
    7f54:	9f 4f       	sbci	r25, 0xFF	; 255
    7f56:	fc 01       	movw	r30, r24
    7f58:	40 81       	ld	r20, Z
    7f5a:	51 81       	ldd	r21, Z+1	; 0x01
    7f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    7f5e:	28 2f       	mov	r18, r24
    7f60:	30 e0       	ldi	r19, 0x00	; 0
    7f62:	69 81       	ldd	r22, Y+1	; 0x01
    7f64:	7a 81       	ldd	r23, Y+2	; 0x02
    7f66:	c9 01       	movw	r24, r18
    7f68:	88 0f       	add	r24, r24
    7f6a:	99 1f       	adc	r25, r25
    7f6c:	88 0f       	add	r24, r24
    7f6e:	99 1f       	adc	r25, r25
    7f70:	82 0f       	add	r24, r18
    7f72:	93 1f       	adc	r25, r19
    7f74:	86 0f       	add	r24, r22
    7f76:	97 1f       	adc	r25, r23
    7f78:	4b 96       	adiw	r24, 0x1b	; 27
    7f7a:	fc 01       	movw	r30, r24
    7f7c:	80 81       	ld	r24, Z
    7f7e:	fa 01       	movw	r30, r20
    7f80:	19 95       	eicall
		}
	}
}
    7f82:	00 00       	nop
    7f84:	0f 90       	pop	r0
    7f86:	0f 90       	pop	r0
    7f88:	0f 90       	pop	r0
    7f8a:	0f 90       	pop	r0
    7f8c:	df 91       	pop	r29
    7f8e:	cf 91       	pop	r28
    7f90:	08 95       	ret

00007f92 <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    7f92:	8f 92       	push	r8
    7f94:	af 92       	push	r10
    7f96:	cf 92       	push	r12
    7f98:	ef 92       	push	r14
    7f9a:	0f 93       	push	r16
    7f9c:	cf 93       	push	r28
    7f9e:	df 93       	push	r29
    7fa0:	cd b7       	in	r28, 0x3d	; 61
    7fa2:	de b7       	in	r29, 0x3e	; 62
    7fa4:	28 97       	sbiw	r28, 0x08	; 8
    7fa6:	0f b6       	in	r0, 0x3f	; 63
    7fa8:	f8 94       	cli
    7faa:	de bf       	out	0x3e, r29	; 62
    7fac:	0f be       	out	0x3f, r0	; 63
    7fae:	cd bf       	out	0x3d, r28	; 61
    7fb0:	9a 83       	std	Y+2, r25	; 0x02
    7fb2:	89 83       	std	Y+1, r24	; 0x01
    7fb4:	6b 83       	std	Y+3, r22	; 0x03
    7fb6:	4c 83       	std	Y+4, r20	; 0x04
    7fb8:	2d 83       	std	Y+5, r18	; 0x05
    7fba:	0e 83       	std	Y+6, r16	; 0x06
    7fbc:	ef 82       	std	Y+7, r14	; 0x07
    7fbe:	c8 86       	std	Y+8, r12	; 0x08
    7fc0:	89 81       	ldd	r24, Y+1	; 0x01
    7fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    7fc4:	0e 94 42 13 	call	0x2684	; 0x2684 <_ZN5PrintC1Ev>
    7fc8:	23 e0       	ldi	r18, 0x03	; 3
    7fca:	33 e0       	ldi	r19, 0x03	; 3
    7fcc:	89 81       	ldd	r24, Y+1	; 0x01
    7fce:	9a 81       	ldd	r25, Y+2	; 0x02
    7fd0:	fc 01       	movw	r30, r24
    7fd2:	31 83       	std	Z+1, r19	; 0x01
    7fd4:	20 83       	st	Z, r18
    7fd6:	89 81       	ldd	r24, Y+1	; 0x01
    7fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    7fda:	1f 92       	push	r1
    7fdc:	1f 92       	push	r1
    7fde:	1f 92       	push	r1
    7fe0:	1f 92       	push	r1
    7fe2:	88 84       	ldd	r8, Y+8	; 0x08
    7fe4:	af 80       	ldd	r10, Y+7	; 0x07
    7fe6:	ce 80       	ldd	r12, Y+6	; 0x06
    7fe8:	ed 80       	ldd	r14, Y+5	; 0x05
    7fea:	0c 81       	ldd	r16, Y+4	; 0x04
    7fec:	2f ef       	ldi	r18, 0xFF	; 255
    7fee:	4b 81       	ldd	r20, Y+3	; 0x03
    7ff0:	61 e0       	ldi	r22, 0x01	; 1
    7ff2:	13 d0       	rcall	.+38     	; 0x801a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    7ff4:	0f 90       	pop	r0
    7ff6:	0f 90       	pop	r0
    7ff8:	0f 90       	pop	r0
    7ffa:	0f 90       	pop	r0
    7ffc:	00 00       	nop
    7ffe:	28 96       	adiw	r28, 0x08	; 8
    8000:	0f b6       	in	r0, 0x3f	; 63
    8002:	f8 94       	cli
    8004:	de bf       	out	0x3e, r29	; 62
    8006:	0f be       	out	0x3f, r0	; 63
    8008:	cd bf       	out	0x3d, r28	; 61
    800a:	df 91       	pop	r29
    800c:	cf 91       	pop	r28
    800e:	0f 91       	pop	r16
    8010:	ef 90       	pop	r14
    8012:	cf 90       	pop	r12
    8014:	af 90       	pop	r10
    8016:	8f 90       	pop	r8
    8018:	08 95       	ret

0000801a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
    801a:	8f 92       	push	r8
    801c:	af 92       	push	r10
    801e:	cf 92       	push	r12
    8020:	ef 92       	push	r14
    8022:	0f 93       	push	r16
    8024:	cf 93       	push	r28
    8026:	df 93       	push	r29
    8028:	cd b7       	in	r28, 0x3d	; 61
    802a:	de b7       	in	r29, 0x3e	; 62
    802c:	2a 97       	sbiw	r28, 0x0a	; 10
    802e:	0f b6       	in	r0, 0x3f	; 63
    8030:	f8 94       	cli
    8032:	de bf       	out	0x3e, r29	; 62
    8034:	0f be       	out	0x3f, r0	; 63
    8036:	cd bf       	out	0x3d, r28	; 61
    8038:	9a 83       	std	Y+2, r25	; 0x02
    803a:	89 83       	std	Y+1, r24	; 0x01
    803c:	6b 83       	std	Y+3, r22	; 0x03
    803e:	4c 83       	std	Y+4, r20	; 0x04
    8040:	2d 83       	std	Y+5, r18	; 0x05
    8042:	0e 83       	std	Y+6, r16	; 0x06
    8044:	ef 82       	std	Y+7, r14	; 0x07
    8046:	c8 86       	std	Y+8, r12	; 0x08
    8048:	a9 86       	std	Y+9, r10	; 0x09
    804a:	8a 86       	std	Y+10, r8	; 0x0a
    804c:	89 81       	ldd	r24, Y+1	; 0x01
    804e:	9a 81       	ldd	r25, Y+2	; 0x02
    8050:	2c 81       	ldd	r18, Y+4	; 0x04
    8052:	fc 01       	movw	r30, r24
    8054:	24 83       	std	Z+4, r18	; 0x04
    8056:	89 81       	ldd	r24, Y+1	; 0x01
    8058:	9a 81       	ldd	r25, Y+2	; 0x02
    805a:	2d 81       	ldd	r18, Y+5	; 0x05
    805c:	fc 01       	movw	r30, r24
    805e:	25 83       	std	Z+5, r18	; 0x05
    8060:	89 81       	ldd	r24, Y+1	; 0x01
    8062:	9a 81       	ldd	r25, Y+2	; 0x02
    8064:	2e 81       	ldd	r18, Y+6	; 0x06
    8066:	fc 01       	movw	r30, r24
    8068:	26 83       	std	Z+6, r18	; 0x06
    806a:	89 81       	ldd	r24, Y+1	; 0x01
    806c:	9a 81       	ldd	r25, Y+2	; 0x02
    806e:	2f 81       	ldd	r18, Y+7	; 0x07
    8070:	fc 01       	movw	r30, r24
    8072:	27 83       	std	Z+7, r18	; 0x07
    8074:	89 81       	ldd	r24, Y+1	; 0x01
    8076:	9a 81       	ldd	r25, Y+2	; 0x02
    8078:	28 85       	ldd	r18, Y+8	; 0x08
    807a:	fc 01       	movw	r30, r24
    807c:	20 87       	std	Z+8, r18	; 0x08
    807e:	89 81       	ldd	r24, Y+1	; 0x01
    8080:	9a 81       	ldd	r25, Y+2	; 0x02
    8082:	29 85       	ldd	r18, Y+9	; 0x09
    8084:	fc 01       	movw	r30, r24
    8086:	21 87       	std	Z+9, r18	; 0x09
    8088:	89 81       	ldd	r24, Y+1	; 0x01
    808a:	9a 81       	ldd	r25, Y+2	; 0x02
    808c:	2a 85       	ldd	r18, Y+10	; 0x0a
    808e:	fc 01       	movw	r30, r24
    8090:	22 87       	std	Z+10, r18	; 0x0a
    8092:	89 81       	ldd	r24, Y+1	; 0x01
    8094:	9a 81       	ldd	r25, Y+2	; 0x02
    8096:	2d 89       	ldd	r18, Y+21	; 0x15
    8098:	fc 01       	movw	r30, r24
    809a:	23 87       	std	Z+11, r18	; 0x0b
    809c:	89 81       	ldd	r24, Y+1	; 0x01
    809e:	9a 81       	ldd	r25, Y+2	; 0x02
    80a0:	2e 89       	ldd	r18, Y+22	; 0x16
    80a2:	fc 01       	movw	r30, r24
    80a4:	24 87       	std	Z+12, r18	; 0x0c
    80a6:	89 81       	ldd	r24, Y+1	; 0x01
    80a8:	9a 81       	ldd	r25, Y+2	; 0x02
    80aa:	2f 89       	ldd	r18, Y+23	; 0x17
    80ac:	fc 01       	movw	r30, r24
    80ae:	25 87       	std	Z+13, r18	; 0x0d
    80b0:	89 81       	ldd	r24, Y+1	; 0x01
    80b2:	9a 81       	ldd	r25, Y+2	; 0x02
    80b4:	28 8d       	ldd	r18, Y+24	; 0x18
    80b6:	fc 01       	movw	r30, r24
    80b8:	26 87       	std	Z+14, r18	; 0x0e
    80ba:	8b 81       	ldd	r24, Y+3	; 0x03
    80bc:	88 23       	and	r24, r24
    80be:	29 f0       	breq	.+10     	; 0x80ca <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xb0>
    80c0:	89 81       	ldd	r24, Y+1	; 0x01
    80c2:	9a 81       	ldd	r25, Y+2	; 0x02
    80c4:	fc 01       	movw	r30, r24
    80c6:	17 86       	std	Z+15, r1	; 0x0f
    80c8:	05 c0       	rjmp	.+10     	; 0x80d4 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xba>
    80ca:	89 81       	ldd	r24, Y+1	; 0x01
    80cc:	9a 81       	ldd	r25, Y+2	; 0x02
    80ce:	20 e1       	ldi	r18, 0x10	; 16
    80d0:	fc 01       	movw	r30, r24
    80d2:	27 87       	std	Z+15, r18	; 0x0f
    80d4:	89 81       	ldd	r24, Y+1	; 0x01
    80d6:	9a 81       	ldd	r25, Y+2	; 0x02
    80d8:	20 e0       	ldi	r18, 0x00	; 0
    80da:	41 e0       	ldi	r20, 0x01	; 1
    80dc:	60 e1       	ldi	r22, 0x10	; 16
    80de:	0f d0       	rcall	.+30     	; 0x80fe <_ZN13LiquidCrystal5beginEhhh>
    80e0:	00 00       	nop
    80e2:	2a 96       	adiw	r28, 0x0a	; 10
    80e4:	0f b6       	in	r0, 0x3f	; 63
    80e6:	f8 94       	cli
    80e8:	de bf       	out	0x3e, r29	; 62
    80ea:	0f be       	out	0x3f, r0	; 63
    80ec:	cd bf       	out	0x3d, r28	; 61
    80ee:	df 91       	pop	r29
    80f0:	cf 91       	pop	r28
    80f2:	0f 91       	pop	r16
    80f4:	ef 90       	pop	r14
    80f6:	cf 90       	pop	r12
    80f8:	af 90       	pop	r10
    80fa:	8f 90       	pop	r8
    80fc:	08 95       	ret

000080fe <_ZN13LiquidCrystal5beginEhhh>:
    80fe:	0f 93       	push	r16
    8100:	1f 93       	push	r17
    8102:	cf 93       	push	r28
    8104:	df 93       	push	r29
    8106:	cd b7       	in	r28, 0x3d	; 61
    8108:	de b7       	in	r29, 0x3e	; 62
    810a:	27 97       	sbiw	r28, 0x07	; 7
    810c:	0f b6       	in	r0, 0x3f	; 63
    810e:	f8 94       	cli
    8110:	de bf       	out	0x3e, r29	; 62
    8112:	0f be       	out	0x3f, r0	; 63
    8114:	cd bf       	out	0x3d, r28	; 61
    8116:	9c 83       	std	Y+4, r25	; 0x04
    8118:	8b 83       	std	Y+3, r24	; 0x03
    811a:	6d 83       	std	Y+5, r22	; 0x05
    811c:	4e 83       	std	Y+6, r20	; 0x06
    811e:	2f 83       	std	Y+7, r18	; 0x07
    8120:	8e 81       	ldd	r24, Y+6	; 0x06
    8122:	82 30       	cpi	r24, 0x02	; 2
    8124:	50 f0       	brcs	.+20     	; 0x813a <_ZN13LiquidCrystal5beginEhhh+0x3c>
    8126:	8b 81       	ldd	r24, Y+3	; 0x03
    8128:	9c 81       	ldd	r25, Y+4	; 0x04
    812a:	fc 01       	movw	r30, r24
    812c:	87 85       	ldd	r24, Z+15	; 0x0f
    812e:	28 2f       	mov	r18, r24
    8130:	28 60       	ori	r18, 0x08	; 8
    8132:	8b 81       	ldd	r24, Y+3	; 0x03
    8134:	9c 81       	ldd	r25, Y+4	; 0x04
    8136:	fc 01       	movw	r30, r24
    8138:	27 87       	std	Z+15, r18	; 0x0f
    813a:	8b 81       	ldd	r24, Y+3	; 0x03
    813c:	9c 81       	ldd	r25, Y+4	; 0x04
    813e:	2e 81       	ldd	r18, Y+6	; 0x06
    8140:	fc 01       	movw	r30, r24
    8142:	23 8b       	std	Z+19, r18	; 0x13
    8144:	8d 81       	ldd	r24, Y+5	; 0x05
    8146:	88 2f       	mov	r24, r24
    8148:	90 e0       	ldi	r25, 0x00	; 0
    814a:	ac 01       	movw	r20, r24
    814c:	40 5c       	subi	r20, 0xC0	; 192
    814e:	5f 4f       	sbci	r21, 0xFF	; 255
    8150:	8d 81       	ldd	r24, Y+5	; 0x05
    8152:	28 2f       	mov	r18, r24
    8154:	30 e0       	ldi	r19, 0x00	; 0
    8156:	8b 81       	ldd	r24, Y+3	; 0x03
    8158:	9c 81       	ldd	r25, Y+4	; 0x04
    815a:	8a 01       	movw	r16, r20
    815c:	40 e4       	ldi	r20, 0x40	; 64
    815e:	50 e0       	ldi	r21, 0x00	; 0
    8160:	60 e0       	ldi	r22, 0x00	; 0
    8162:	70 e0       	ldi	r23, 0x00	; 0
    8164:	ef d0       	rcall	.+478    	; 0x8344 <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    8166:	8f 81       	ldd	r24, Y+7	; 0x07
    8168:	88 23       	and	r24, r24
    816a:	69 f0       	breq	.+26     	; 0x8186 <_ZN13LiquidCrystal5beginEhhh+0x88>
    816c:	8e 81       	ldd	r24, Y+6	; 0x06
    816e:	81 30       	cpi	r24, 0x01	; 1
    8170:	51 f4       	brne	.+20     	; 0x8186 <_ZN13LiquidCrystal5beginEhhh+0x88>
    8172:	8b 81       	ldd	r24, Y+3	; 0x03
    8174:	9c 81       	ldd	r25, Y+4	; 0x04
    8176:	fc 01       	movw	r30, r24
    8178:	87 85       	ldd	r24, Z+15	; 0x0f
    817a:	28 2f       	mov	r18, r24
    817c:	24 60       	ori	r18, 0x04	; 4
    817e:	8b 81       	ldd	r24, Y+3	; 0x03
    8180:	9c 81       	ldd	r25, Y+4	; 0x04
    8182:	fc 01       	movw	r30, r24
    8184:	27 87       	std	Z+15, r18	; 0x0f
    8186:	8b 81       	ldd	r24, Y+3	; 0x03
    8188:	9c 81       	ldd	r25, Y+4	; 0x04
    818a:	fc 01       	movw	r30, r24
    818c:	84 81       	ldd	r24, Z+4	; 0x04
    818e:	61 e0       	ldi	r22, 0x01	; 1
    8190:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    8194:	8b 81       	ldd	r24, Y+3	; 0x03
    8196:	9c 81       	ldd	r25, Y+4	; 0x04
    8198:	fc 01       	movw	r30, r24
    819a:	85 81       	ldd	r24, Z+5	; 0x05
    819c:	8f 3f       	cpi	r24, 0xFF	; 255
    819e:	39 f0       	breq	.+14     	; 0x81ae <_ZN13LiquidCrystal5beginEhhh+0xb0>
    81a0:	8b 81       	ldd	r24, Y+3	; 0x03
    81a2:	9c 81       	ldd	r25, Y+4	; 0x04
    81a4:	fc 01       	movw	r30, r24
    81a6:	85 81       	ldd	r24, Z+5	; 0x05
    81a8:	61 e0       	ldi	r22, 0x01	; 1
    81aa:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    81ae:	8b 81       	ldd	r24, Y+3	; 0x03
    81b0:	9c 81       	ldd	r25, Y+4	; 0x04
    81b2:	fc 01       	movw	r30, r24
    81b4:	86 81       	ldd	r24, Z+6	; 0x06
    81b6:	61 e0       	ldi	r22, 0x01	; 1
    81b8:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    81bc:	1a 82       	std	Y+2, r1	; 0x02
    81be:	19 82       	std	Y+1, r1	; 0x01
    81c0:	8b 81       	ldd	r24, Y+3	; 0x03
    81c2:	9c 81       	ldd	r25, Y+4	; 0x04
    81c4:	fc 01       	movw	r30, r24
    81c6:	87 85       	ldd	r24, Z+15	; 0x0f
    81c8:	88 2f       	mov	r24, r24
    81ca:	90 e0       	ldi	r25, 0x00	; 0
    81cc:	80 71       	andi	r24, 0x10	; 16
    81ce:	99 27       	eor	r25, r25
    81d0:	89 2b       	or	r24, r25
    81d2:	19 f0       	breq	.+6      	; 0x81da <_ZN13LiquidCrystal5beginEhhh+0xdc>
    81d4:	88 e0       	ldi	r24, 0x08	; 8
    81d6:	90 e0       	ldi	r25, 0x00	; 0
    81d8:	02 c0       	rjmp	.+4      	; 0x81de <_ZN13LiquidCrystal5beginEhhh+0xe0>
    81da:	84 e0       	ldi	r24, 0x04	; 4
    81dc:	90 e0       	ldi	r25, 0x00	; 0
    81de:	29 81       	ldd	r18, Y+1	; 0x01
    81e0:	3a 81       	ldd	r19, Y+2	; 0x02
    81e2:	28 17       	cp	r18, r24
    81e4:	39 07       	cpc	r19, r25
    81e6:	94 f4       	brge	.+36     	; 0x820c <_ZN13LiquidCrystal5beginEhhh+0x10e>
    81e8:	2b 81       	ldd	r18, Y+3	; 0x03
    81ea:	3c 81       	ldd	r19, Y+4	; 0x04
    81ec:	89 81       	ldd	r24, Y+1	; 0x01
    81ee:	9a 81       	ldd	r25, Y+2	; 0x02
    81f0:	82 0f       	add	r24, r18
    81f2:	93 1f       	adc	r25, r19
    81f4:	07 96       	adiw	r24, 0x07	; 7
    81f6:	fc 01       	movw	r30, r24
    81f8:	80 81       	ld	r24, Z
    81fa:	61 e0       	ldi	r22, 0x01	; 1
    81fc:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    8200:	89 81       	ldd	r24, Y+1	; 0x01
    8202:	9a 81       	ldd	r25, Y+2	; 0x02
    8204:	01 96       	adiw	r24, 0x01	; 1
    8206:	9a 83       	std	Y+2, r25	; 0x02
    8208:	89 83       	std	Y+1, r24	; 0x01
    820a:	da cf       	rjmp	.-76     	; 0x81c0 <_ZN13LiquidCrystal5beginEhhh+0xc2>
    820c:	80 e5       	ldi	r24, 0x50	; 80
    820e:	93 ec       	ldi	r25, 0xC3	; 195
    8210:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
    8214:	8b 81       	ldd	r24, Y+3	; 0x03
    8216:	9c 81       	ldd	r25, Y+4	; 0x04
    8218:	fc 01       	movw	r30, r24
    821a:	84 81       	ldd	r24, Z+4	; 0x04
    821c:	60 e0       	ldi	r22, 0x00	; 0
    821e:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    8222:	8b 81       	ldd	r24, Y+3	; 0x03
    8224:	9c 81       	ldd	r25, Y+4	; 0x04
    8226:	fc 01       	movw	r30, r24
    8228:	86 81       	ldd	r24, Z+6	; 0x06
    822a:	60 e0       	ldi	r22, 0x00	; 0
    822c:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    8230:	8b 81       	ldd	r24, Y+3	; 0x03
    8232:	9c 81       	ldd	r25, Y+4	; 0x04
    8234:	fc 01       	movw	r30, r24
    8236:	85 81       	ldd	r24, Z+5	; 0x05
    8238:	8f 3f       	cpi	r24, 0xFF	; 255
    823a:	39 f0       	breq	.+14     	; 0x824a <_ZN13LiquidCrystal5beginEhhh+0x14c>
    823c:	8b 81       	ldd	r24, Y+3	; 0x03
    823e:	9c 81       	ldd	r25, Y+4	; 0x04
    8240:	fc 01       	movw	r30, r24
    8242:	85 81       	ldd	r24, Z+5	; 0x05
    8244:	60 e0       	ldi	r22, 0x00	; 0
    8246:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    824a:	8b 81       	ldd	r24, Y+3	; 0x03
    824c:	9c 81       	ldd	r25, Y+4	; 0x04
    824e:	fc 01       	movw	r30, r24
    8250:	87 85       	ldd	r24, Z+15	; 0x0f
    8252:	88 2f       	mov	r24, r24
    8254:	90 e0       	ldi	r25, 0x00	; 0
    8256:	80 71       	andi	r24, 0x10	; 16
    8258:	99 27       	eor	r25, r25
    825a:	89 2b       	or	r24, r25
    825c:	e9 f4       	brne	.+58     	; 0x8298 <_ZN13LiquidCrystal5beginEhhh+0x19a>
    825e:	8b 81       	ldd	r24, Y+3	; 0x03
    8260:	9c 81       	ldd	r25, Y+4	; 0x04
    8262:	63 e0       	ldi	r22, 0x03	; 3
    8264:	ba d1       	rcall	.+884    	; 0x85da <_ZN13LiquidCrystal10write4bitsEh>
    8266:	84 e9       	ldi	r24, 0x94	; 148
    8268:	91 e1       	ldi	r25, 0x11	; 17
    826a:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
    826e:	8b 81       	ldd	r24, Y+3	; 0x03
    8270:	9c 81       	ldd	r25, Y+4	; 0x04
    8272:	63 e0       	ldi	r22, 0x03	; 3
    8274:	b2 d1       	rcall	.+868    	; 0x85da <_ZN13LiquidCrystal10write4bitsEh>
    8276:	84 e9       	ldi	r24, 0x94	; 148
    8278:	91 e1       	ldi	r25, 0x11	; 17
    827a:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
    827e:	8b 81       	ldd	r24, Y+3	; 0x03
    8280:	9c 81       	ldd	r25, Y+4	; 0x04
    8282:	63 e0       	ldi	r22, 0x03	; 3
    8284:	aa d1       	rcall	.+852    	; 0x85da <_ZN13LiquidCrystal10write4bitsEh>
    8286:	86 e9       	ldi	r24, 0x96	; 150
    8288:	90 e0       	ldi	r25, 0x00	; 0
    828a:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
    828e:	8b 81       	ldd	r24, Y+3	; 0x03
    8290:	9c 81       	ldd	r25, Y+4	; 0x04
    8292:	62 e0       	ldi	r22, 0x02	; 2
    8294:	a2 d1       	rcall	.+836    	; 0x85da <_ZN13LiquidCrystal10write4bitsEh>
    8296:	26 c0       	rjmp	.+76     	; 0x82e4 <_ZN13LiquidCrystal5beginEhhh+0x1e6>
    8298:	8b 81       	ldd	r24, Y+3	; 0x03
    829a:	9c 81       	ldd	r25, Y+4	; 0x04
    829c:	fc 01       	movw	r30, r24
    829e:	87 85       	ldd	r24, Z+15	; 0x0f
    82a0:	28 2f       	mov	r18, r24
    82a2:	20 62       	ori	r18, 0x20	; 32
    82a4:	8b 81       	ldd	r24, Y+3	; 0x03
    82a6:	9c 81       	ldd	r25, Y+4	; 0x04
    82a8:	62 2f       	mov	r22, r18
    82aa:	f6 d0       	rcall	.+492    	; 0x8498 <_ZN13LiquidCrystal7commandEh>
    82ac:	84 e9       	ldi	r24, 0x94	; 148
    82ae:	91 e1       	ldi	r25, 0x11	; 17
    82b0:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
    82b4:	8b 81       	ldd	r24, Y+3	; 0x03
    82b6:	9c 81       	ldd	r25, Y+4	; 0x04
    82b8:	fc 01       	movw	r30, r24
    82ba:	87 85       	ldd	r24, Z+15	; 0x0f
    82bc:	28 2f       	mov	r18, r24
    82be:	20 62       	ori	r18, 0x20	; 32
    82c0:	8b 81       	ldd	r24, Y+3	; 0x03
    82c2:	9c 81       	ldd	r25, Y+4	; 0x04
    82c4:	62 2f       	mov	r22, r18
    82c6:	e8 d0       	rcall	.+464    	; 0x8498 <_ZN13LiquidCrystal7commandEh>
    82c8:	86 e9       	ldi	r24, 0x96	; 150
    82ca:	90 e0       	ldi	r25, 0x00	; 0
    82cc:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
    82d0:	8b 81       	ldd	r24, Y+3	; 0x03
    82d2:	9c 81       	ldd	r25, Y+4	; 0x04
    82d4:	fc 01       	movw	r30, r24
    82d6:	87 85       	ldd	r24, Z+15	; 0x0f
    82d8:	28 2f       	mov	r18, r24
    82da:	20 62       	ori	r18, 0x20	; 32
    82dc:	8b 81       	ldd	r24, Y+3	; 0x03
    82de:	9c 81       	ldd	r25, Y+4	; 0x04
    82e0:	62 2f       	mov	r22, r18
    82e2:	da d0       	rcall	.+436    	; 0x8498 <_ZN13LiquidCrystal7commandEh>
    82e4:	8b 81       	ldd	r24, Y+3	; 0x03
    82e6:	9c 81       	ldd	r25, Y+4	; 0x04
    82e8:	fc 01       	movw	r30, r24
    82ea:	87 85       	ldd	r24, Z+15	; 0x0f
    82ec:	28 2f       	mov	r18, r24
    82ee:	20 62       	ori	r18, 0x20	; 32
    82f0:	8b 81       	ldd	r24, Y+3	; 0x03
    82f2:	9c 81       	ldd	r25, Y+4	; 0x04
    82f4:	62 2f       	mov	r22, r18
    82f6:	d0 d0       	rcall	.+416    	; 0x8498 <_ZN13LiquidCrystal7commandEh>
    82f8:	8b 81       	ldd	r24, Y+3	; 0x03
    82fa:	9c 81       	ldd	r25, Y+4	; 0x04
    82fc:	24 e0       	ldi	r18, 0x04	; 4
    82fe:	fc 01       	movw	r30, r24
    8300:	20 8b       	std	Z+16, r18	; 0x10
    8302:	8b 81       	ldd	r24, Y+3	; 0x03
    8304:	9c 81       	ldd	r25, Y+4	; 0x04
    8306:	a6 d0       	rcall	.+332    	; 0x8454 <_ZN13LiquidCrystal7displayEv>
    8308:	8b 81       	ldd	r24, Y+3	; 0x03
    830a:	9c 81       	ldd	r25, Y+4	; 0x04
    830c:	51 d0       	rcall	.+162    	; 0x83b0 <_ZN13LiquidCrystal5clearEv>
    830e:	8b 81       	ldd	r24, Y+3	; 0x03
    8310:	9c 81       	ldd	r25, Y+4	; 0x04
    8312:	22 e0       	ldi	r18, 0x02	; 2
    8314:	fc 01       	movw	r30, r24
    8316:	21 8b       	std	Z+17, r18	; 0x11
    8318:	8b 81       	ldd	r24, Y+3	; 0x03
    831a:	9c 81       	ldd	r25, Y+4	; 0x04
    831c:	fc 01       	movw	r30, r24
    831e:	81 89       	ldd	r24, Z+17	; 0x11
    8320:	28 2f       	mov	r18, r24
    8322:	24 60       	ori	r18, 0x04	; 4
    8324:	8b 81       	ldd	r24, Y+3	; 0x03
    8326:	9c 81       	ldd	r25, Y+4	; 0x04
    8328:	62 2f       	mov	r22, r18
    832a:	b6 d0       	rcall	.+364    	; 0x8498 <_ZN13LiquidCrystal7commandEh>
    832c:	00 00       	nop
    832e:	27 96       	adiw	r28, 0x07	; 7
    8330:	0f b6       	in	r0, 0x3f	; 63
    8332:	f8 94       	cli
    8334:	de bf       	out	0x3e, r29	; 62
    8336:	0f be       	out	0x3f, r0	; 63
    8338:	cd bf       	out	0x3d, r28	; 61
    833a:	df 91       	pop	r29
    833c:	cf 91       	pop	r28
    833e:	1f 91       	pop	r17
    8340:	0f 91       	pop	r16
    8342:	08 95       	ret

00008344 <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    8344:	0f 93       	push	r16
    8346:	1f 93       	push	r17
    8348:	cf 93       	push	r28
    834a:	df 93       	push	r29
    834c:	cd b7       	in	r28, 0x3d	; 61
    834e:	de b7       	in	r29, 0x3e	; 62
    8350:	2a 97       	sbiw	r28, 0x0a	; 10
    8352:	0f b6       	in	r0, 0x3f	; 63
    8354:	f8 94       	cli
    8356:	de bf       	out	0x3e, r29	; 62
    8358:	0f be       	out	0x3f, r0	; 63
    835a:	cd bf       	out	0x3d, r28	; 61
    835c:	9a 83       	std	Y+2, r25	; 0x02
    835e:	89 83       	std	Y+1, r24	; 0x01
    8360:	7c 83       	std	Y+4, r23	; 0x04
    8362:	6b 83       	std	Y+3, r22	; 0x03
    8364:	5e 83       	std	Y+6, r21	; 0x06
    8366:	4d 83       	std	Y+5, r20	; 0x05
    8368:	38 87       	std	Y+8, r19	; 0x08
    836a:	2f 83       	std	Y+7, r18	; 0x07
    836c:	1a 87       	std	Y+10, r17	; 0x0a
    836e:	09 87       	std	Y+9, r16	; 0x09
    8370:	2b 81       	ldd	r18, Y+3	; 0x03
    8372:	89 81       	ldd	r24, Y+1	; 0x01
    8374:	9a 81       	ldd	r25, Y+2	; 0x02
    8376:	fc 01       	movw	r30, r24
    8378:	24 8b       	std	Z+20, r18	; 0x14
    837a:	2d 81       	ldd	r18, Y+5	; 0x05
    837c:	89 81       	ldd	r24, Y+1	; 0x01
    837e:	9a 81       	ldd	r25, Y+2	; 0x02
    8380:	fc 01       	movw	r30, r24
    8382:	25 8b       	std	Z+21, r18	; 0x15
    8384:	2f 81       	ldd	r18, Y+7	; 0x07
    8386:	89 81       	ldd	r24, Y+1	; 0x01
    8388:	9a 81       	ldd	r25, Y+2	; 0x02
    838a:	fc 01       	movw	r30, r24
    838c:	26 8b       	std	Z+22, r18	; 0x16
    838e:	29 85       	ldd	r18, Y+9	; 0x09
    8390:	89 81       	ldd	r24, Y+1	; 0x01
    8392:	9a 81       	ldd	r25, Y+2	; 0x02
    8394:	fc 01       	movw	r30, r24
    8396:	27 8b       	std	Z+23, r18	; 0x17
    8398:	00 00       	nop
    839a:	2a 96       	adiw	r28, 0x0a	; 10
    839c:	0f b6       	in	r0, 0x3f	; 63
    839e:	f8 94       	cli
    83a0:	de bf       	out	0x3e, r29	; 62
    83a2:	0f be       	out	0x3f, r0	; 63
    83a4:	cd bf       	out	0x3d, r28	; 61
    83a6:	df 91       	pop	r29
    83a8:	cf 91       	pop	r28
    83aa:	1f 91       	pop	r17
    83ac:	0f 91       	pop	r16
    83ae:	08 95       	ret

000083b0 <_ZN13LiquidCrystal5clearEv>:
    83b0:	cf 93       	push	r28
    83b2:	df 93       	push	r29
    83b4:	1f 92       	push	r1
    83b6:	1f 92       	push	r1
    83b8:	cd b7       	in	r28, 0x3d	; 61
    83ba:	de b7       	in	r29, 0x3e	; 62
    83bc:	9a 83       	std	Y+2, r25	; 0x02
    83be:	89 83       	std	Y+1, r24	; 0x01
    83c0:	89 81       	ldd	r24, Y+1	; 0x01
    83c2:	9a 81       	ldd	r25, Y+2	; 0x02
    83c4:	61 e0       	ldi	r22, 0x01	; 1
    83c6:	68 d0       	rcall	.+208    	; 0x8498 <_ZN13LiquidCrystal7commandEh>
    83c8:	80 ed       	ldi	r24, 0xD0	; 208
    83ca:	97 e0       	ldi	r25, 0x07	; 7
    83cc:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
    83d0:	00 00       	nop
    83d2:	0f 90       	pop	r0
    83d4:	0f 90       	pop	r0
    83d6:	df 91       	pop	r29
    83d8:	cf 91       	pop	r28
    83da:	08 95       	ret

000083dc <_ZN13LiquidCrystal9setCursorEhh>:
    83dc:	cf 93       	push	r28
    83de:	df 93       	push	r29
    83e0:	00 d0       	rcall	.+0      	; 0x83e2 <_ZN13LiquidCrystal9setCursorEhh+0x6>
    83e2:	00 d0       	rcall	.+0      	; 0x83e4 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    83e4:	cd b7       	in	r28, 0x3d	; 61
    83e6:	de b7       	in	r29, 0x3e	; 62
    83e8:	9c 83       	std	Y+4, r25	; 0x04
    83ea:	8b 83       	std	Y+3, r24	; 0x03
    83ec:	6d 83       	std	Y+5, r22	; 0x05
    83ee:	4e 83       	std	Y+6, r20	; 0x06
    83f0:	84 e0       	ldi	r24, 0x04	; 4
    83f2:	90 e0       	ldi	r25, 0x00	; 0
    83f4:	9a 83       	std	Y+2, r25	; 0x02
    83f6:	89 83       	std	Y+1, r24	; 0x01
    83f8:	8e 81       	ldd	r24, Y+6	; 0x06
    83fa:	84 30       	cpi	r24, 0x04	; 4
    83fc:	10 f0       	brcs	.+4      	; 0x8402 <_ZN13LiquidCrystal9setCursorEhh+0x26>
    83fe:	83 e0       	ldi	r24, 0x03	; 3
    8400:	8e 83       	std	Y+6, r24	; 0x06
    8402:	8b 81       	ldd	r24, Y+3	; 0x03
    8404:	9c 81       	ldd	r25, Y+4	; 0x04
    8406:	fc 01       	movw	r30, r24
    8408:	93 89       	ldd	r25, Z+19	; 0x13
    840a:	8e 81       	ldd	r24, Y+6	; 0x06
    840c:	89 17       	cp	r24, r25
    840e:	30 f0       	brcs	.+12     	; 0x841c <_ZN13LiquidCrystal9setCursorEhh+0x40>
    8410:	8b 81       	ldd	r24, Y+3	; 0x03
    8412:	9c 81       	ldd	r25, Y+4	; 0x04
    8414:	fc 01       	movw	r30, r24
    8416:	83 89       	ldd	r24, Z+19	; 0x13
    8418:	81 50       	subi	r24, 0x01	; 1
    841a:	8e 83       	std	Y+6, r24	; 0x06
    841c:	8e 81       	ldd	r24, Y+6	; 0x06
    841e:	88 2f       	mov	r24, r24
    8420:	90 e0       	ldi	r25, 0x00	; 0
    8422:	2b 81       	ldd	r18, Y+3	; 0x03
    8424:	3c 81       	ldd	r19, Y+4	; 0x04
    8426:	82 0f       	add	r24, r18
    8428:	93 1f       	adc	r25, r19
    842a:	44 96       	adiw	r24, 0x14	; 20
    842c:	fc 01       	movw	r30, r24
    842e:	90 81       	ld	r25, Z
    8430:	8d 81       	ldd	r24, Y+5	; 0x05
    8432:	89 0f       	add	r24, r25
    8434:	80 68       	ori	r24, 0x80	; 128
    8436:	28 2f       	mov	r18, r24
    8438:	8b 81       	ldd	r24, Y+3	; 0x03
    843a:	9c 81       	ldd	r25, Y+4	; 0x04
    843c:	62 2f       	mov	r22, r18
    843e:	2c d0       	rcall	.+88     	; 0x8498 <_ZN13LiquidCrystal7commandEh>
    8440:	00 00       	nop
    8442:	26 96       	adiw	r28, 0x06	; 6
    8444:	0f b6       	in	r0, 0x3f	; 63
    8446:	f8 94       	cli
    8448:	de bf       	out	0x3e, r29	; 62
    844a:	0f be       	out	0x3f, r0	; 63
    844c:	cd bf       	out	0x3d, r28	; 61
    844e:	df 91       	pop	r29
    8450:	cf 91       	pop	r28
    8452:	08 95       	ret

00008454 <_ZN13LiquidCrystal7displayEv>:
    8454:	cf 93       	push	r28
    8456:	df 93       	push	r29
    8458:	1f 92       	push	r1
    845a:	1f 92       	push	r1
    845c:	cd b7       	in	r28, 0x3d	; 61
    845e:	de b7       	in	r29, 0x3e	; 62
    8460:	9a 83       	std	Y+2, r25	; 0x02
    8462:	89 83       	std	Y+1, r24	; 0x01
    8464:	89 81       	ldd	r24, Y+1	; 0x01
    8466:	9a 81       	ldd	r25, Y+2	; 0x02
    8468:	fc 01       	movw	r30, r24
    846a:	80 89       	ldd	r24, Z+16	; 0x10
    846c:	28 2f       	mov	r18, r24
    846e:	24 60       	ori	r18, 0x04	; 4
    8470:	89 81       	ldd	r24, Y+1	; 0x01
    8472:	9a 81       	ldd	r25, Y+2	; 0x02
    8474:	fc 01       	movw	r30, r24
    8476:	20 8b       	std	Z+16, r18	; 0x10
    8478:	89 81       	ldd	r24, Y+1	; 0x01
    847a:	9a 81       	ldd	r25, Y+2	; 0x02
    847c:	fc 01       	movw	r30, r24
    847e:	80 89       	ldd	r24, Z+16	; 0x10
    8480:	28 2f       	mov	r18, r24
    8482:	28 60       	ori	r18, 0x08	; 8
    8484:	89 81       	ldd	r24, Y+1	; 0x01
    8486:	9a 81       	ldd	r25, Y+2	; 0x02
    8488:	62 2f       	mov	r22, r18
    848a:	06 d0       	rcall	.+12     	; 0x8498 <_ZN13LiquidCrystal7commandEh>
    848c:	00 00       	nop
    848e:	0f 90       	pop	r0
    8490:	0f 90       	pop	r0
    8492:	df 91       	pop	r29
    8494:	cf 91       	pop	r28
    8496:	08 95       	ret

00008498 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    8498:	cf 93       	push	r28
    849a:	df 93       	push	r29
    849c:	00 d0       	rcall	.+0      	; 0x849e <_ZN13LiquidCrystal7commandEh+0x6>
    849e:	cd b7       	in	r28, 0x3d	; 61
    84a0:	de b7       	in	r29, 0x3e	; 62
    84a2:	9a 83       	std	Y+2, r25	; 0x02
    84a4:	89 83       	std	Y+1, r24	; 0x01
    84a6:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    84a8:	89 81       	ldd	r24, Y+1	; 0x01
    84aa:	9a 81       	ldd	r25, Y+2	; 0x02
    84ac:	40 e0       	ldi	r20, 0x00	; 0
    84ae:	6b 81       	ldd	r22, Y+3	; 0x03
    84b0:	1c d0       	rcall	.+56     	; 0x84ea <_ZN13LiquidCrystal4sendEhh>
}
    84b2:	00 00       	nop
    84b4:	0f 90       	pop	r0
    84b6:	0f 90       	pop	r0
    84b8:	0f 90       	pop	r0
    84ba:	df 91       	pop	r29
    84bc:	cf 91       	pop	r28
    84be:	08 95       	ret

000084c0 <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    84c0:	cf 93       	push	r28
    84c2:	df 93       	push	r29
    84c4:	00 d0       	rcall	.+0      	; 0x84c6 <_ZN13LiquidCrystal5writeEh+0x6>
    84c6:	cd b7       	in	r28, 0x3d	; 61
    84c8:	de b7       	in	r29, 0x3e	; 62
    84ca:	9a 83       	std	Y+2, r25	; 0x02
    84cc:	89 83       	std	Y+1, r24	; 0x01
    84ce:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    84d0:	89 81       	ldd	r24, Y+1	; 0x01
    84d2:	9a 81       	ldd	r25, Y+2	; 0x02
    84d4:	41 e0       	ldi	r20, 0x01	; 1
    84d6:	6b 81       	ldd	r22, Y+3	; 0x03
    84d8:	08 d0       	rcall	.+16     	; 0x84ea <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    84da:	81 e0       	ldi	r24, 0x01	; 1
    84dc:	90 e0       	ldi	r25, 0x00	; 0
}
    84de:	0f 90       	pop	r0
    84e0:	0f 90       	pop	r0
    84e2:	0f 90       	pop	r0
    84e4:	df 91       	pop	r29
    84e6:	cf 91       	pop	r28
    84e8:	08 95       	ret

000084ea <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    84ea:	cf 93       	push	r28
    84ec:	df 93       	push	r29
    84ee:	00 d0       	rcall	.+0      	; 0x84f0 <_ZN13LiquidCrystal4sendEhh+0x6>
    84f0:	1f 92       	push	r1
    84f2:	cd b7       	in	r28, 0x3d	; 61
    84f4:	de b7       	in	r29, 0x3e	; 62
    84f6:	9a 83       	std	Y+2, r25	; 0x02
    84f8:	89 83       	std	Y+1, r24	; 0x01
    84fa:	6b 83       	std	Y+3, r22	; 0x03
    84fc:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    84fe:	89 81       	ldd	r24, Y+1	; 0x01
    8500:	9a 81       	ldd	r25, Y+2	; 0x02
    8502:	fc 01       	movw	r30, r24
    8504:	84 81       	ldd	r24, Z+4	; 0x04
    8506:	6c 81       	ldd	r22, Y+4	; 0x04
    8508:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    850c:	89 81       	ldd	r24, Y+1	; 0x01
    850e:	9a 81       	ldd	r25, Y+2	; 0x02
    8510:	fc 01       	movw	r30, r24
    8512:	85 81       	ldd	r24, Z+5	; 0x05
    8514:	8f 3f       	cpi	r24, 0xFF	; 255
    8516:	39 f0       	breq	.+14     	; 0x8526 <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    8518:	89 81       	ldd	r24, Y+1	; 0x01
    851a:	9a 81       	ldd	r25, Y+2	; 0x02
    851c:	fc 01       	movw	r30, r24
    851e:	85 81       	ldd	r24, Z+5	; 0x05
    8520:	60 e0       	ldi	r22, 0x00	; 0
    8522:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    8526:	89 81       	ldd	r24, Y+1	; 0x01
    8528:	9a 81       	ldd	r25, Y+2	; 0x02
    852a:	fc 01       	movw	r30, r24
    852c:	87 85       	ldd	r24, Z+15	; 0x0f
    852e:	88 2f       	mov	r24, r24
    8530:	90 e0       	ldi	r25, 0x00	; 0
    8532:	80 71       	andi	r24, 0x10	; 16
    8534:	99 27       	eor	r25, r25
    8536:	89 2b       	or	r24, r25
    8538:	29 f0       	breq	.+10     	; 0x8544 <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    853a:	89 81       	ldd	r24, Y+1	; 0x01
    853c:	9a 81       	ldd	r25, Y+2	; 0x02
    853e:	6b 81       	ldd	r22, Y+3	; 0x03
    8540:	85 d0       	rcall	.+266    	; 0x864c <_ZN13LiquidCrystal10write8bitsEh>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
    8542:	14 c0       	rjmp	.+40     	; 0x856c <_ZN13LiquidCrystal4sendEhh+0x82>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    8544:	8b 81       	ldd	r24, Y+3	; 0x03
    8546:	88 2f       	mov	r24, r24
    8548:	90 e0       	ldi	r25, 0x00	; 0
    854a:	95 95       	asr	r25
    854c:	87 95       	ror	r24
    854e:	95 95       	asr	r25
    8550:	87 95       	ror	r24
    8552:	95 95       	asr	r25
    8554:	87 95       	ror	r24
    8556:	95 95       	asr	r25
    8558:	87 95       	ror	r24
    855a:	28 2f       	mov	r18, r24
    855c:	89 81       	ldd	r24, Y+1	; 0x01
    855e:	9a 81       	ldd	r25, Y+2	; 0x02
    8560:	62 2f       	mov	r22, r18
    8562:	3b d0       	rcall	.+118    	; 0x85da <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    8564:	89 81       	ldd	r24, Y+1	; 0x01
    8566:	9a 81       	ldd	r25, Y+2	; 0x02
    8568:	6b 81       	ldd	r22, Y+3	; 0x03
    856a:	37 d0       	rcall	.+110    	; 0x85da <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    856c:	00 00       	nop
    856e:	0f 90       	pop	r0
    8570:	0f 90       	pop	r0
    8572:	0f 90       	pop	r0
    8574:	0f 90       	pop	r0
    8576:	df 91       	pop	r29
    8578:	cf 91       	pop	r28
    857a:	08 95       	ret

0000857c <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    857c:	cf 93       	push	r28
    857e:	df 93       	push	r29
    8580:	1f 92       	push	r1
    8582:	1f 92       	push	r1
    8584:	cd b7       	in	r28, 0x3d	; 61
    8586:	de b7       	in	r29, 0x3e	; 62
    8588:	9a 83       	std	Y+2, r25	; 0x02
    858a:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    858c:	89 81       	ldd	r24, Y+1	; 0x01
    858e:	9a 81       	ldd	r25, Y+2	; 0x02
    8590:	fc 01       	movw	r30, r24
    8592:	86 81       	ldd	r24, Z+6	; 0x06
    8594:	60 e0       	ldi	r22, 0x00	; 0
    8596:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
  delayMicroseconds(1);    
    859a:	81 e0       	ldi	r24, 0x01	; 1
    859c:	90 e0       	ldi	r25, 0x00	; 0
    859e:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    85a2:	89 81       	ldd	r24, Y+1	; 0x01
    85a4:	9a 81       	ldd	r25, Y+2	; 0x02
    85a6:	fc 01       	movw	r30, r24
    85a8:	86 81       	ldd	r24, Z+6	; 0x06
    85aa:	61 e0       	ldi	r22, 0x01	; 1
    85ac:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    85b0:	81 e0       	ldi	r24, 0x01	; 1
    85b2:	90 e0       	ldi	r25, 0x00	; 0
    85b4:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    85b8:	89 81       	ldd	r24, Y+1	; 0x01
    85ba:	9a 81       	ldd	r25, Y+2	; 0x02
    85bc:	fc 01       	movw	r30, r24
    85be:	86 81       	ldd	r24, Z+6	; 0x06
    85c0:	60 e0       	ldi	r22, 0x00	; 0
    85c2:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    85c6:	84 e6       	ldi	r24, 0x64	; 100
    85c8:	90 e0       	ldi	r25, 0x00	; 0
    85ca:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
}
    85ce:	00 00       	nop
    85d0:	0f 90       	pop	r0
    85d2:	0f 90       	pop	r0
    85d4:	df 91       	pop	r29
    85d6:	cf 91       	pop	r28
    85d8:	08 95       	ret

000085da <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    85da:	cf 93       	push	r28
    85dc:	df 93       	push	r29
    85de:	00 d0       	rcall	.+0      	; 0x85e0 <_ZN13LiquidCrystal10write4bitsEh+0x6>
    85e0:	1f 92       	push	r1
    85e2:	1f 92       	push	r1
    85e4:	cd b7       	in	r28, 0x3d	; 61
    85e6:	de b7       	in	r29, 0x3e	; 62
    85e8:	9c 83       	std	Y+4, r25	; 0x04
    85ea:	8b 83       	std	Y+3, r24	; 0x03
    85ec:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    85ee:	1a 82       	std	Y+2, r1	; 0x02
    85f0:	19 82       	std	Y+1, r1	; 0x01
    85f2:	89 81       	ldd	r24, Y+1	; 0x01
    85f4:	9a 81       	ldd	r25, Y+2	; 0x02
    85f6:	04 97       	sbiw	r24, 0x04	; 4
    85f8:	ec f4       	brge	.+58     	; 0x8634 <_ZN13LiquidCrystal10write4bitsEh+0x5a>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    85fa:	8d 81       	ldd	r24, Y+5	; 0x05
    85fc:	88 2f       	mov	r24, r24
    85fe:	90 e0       	ldi	r25, 0x00	; 0
    8600:	09 80       	ldd	r0, Y+1	; 0x01
    8602:	02 c0       	rjmp	.+4      	; 0x8608 <_ZN13LiquidCrystal10write4bitsEh+0x2e>
    8604:	95 95       	asr	r25
    8606:	87 95       	ror	r24
    8608:	0a 94       	dec	r0
    860a:	e2 f7       	brpl	.-8      	; 0x8604 <_ZN13LiquidCrystal10write4bitsEh+0x2a>
    860c:	48 2f       	mov	r20, r24
    860e:	41 70       	andi	r20, 0x01	; 1
    8610:	2b 81       	ldd	r18, Y+3	; 0x03
    8612:	3c 81       	ldd	r19, Y+4	; 0x04
    8614:	89 81       	ldd	r24, Y+1	; 0x01
    8616:	9a 81       	ldd	r25, Y+2	; 0x02
    8618:	82 0f       	add	r24, r18
    861a:	93 1f       	adc	r25, r19
    861c:	07 96       	adiw	r24, 0x07	; 7
    861e:	fc 01       	movw	r30, r24
    8620:	80 81       	ld	r24, Z
    8622:	64 2f       	mov	r22, r20
    8624:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    8628:	89 81       	ldd	r24, Y+1	; 0x01
    862a:	9a 81       	ldd	r25, Y+2	; 0x02
    862c:	01 96       	adiw	r24, 0x01	; 1
    862e:	9a 83       	std	Y+2, r25	; 0x02
    8630:	89 83       	std	Y+1, r24	; 0x01
    8632:	df cf       	rjmp	.-66     	; 0x85f2 <_ZN13LiquidCrystal10write4bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    8634:	8b 81       	ldd	r24, Y+3	; 0x03
    8636:	9c 81       	ldd	r25, Y+4	; 0x04
    8638:	a1 df       	rcall	.-190    	; 0x857c <_ZN13LiquidCrystal11pulseEnableEv>
}
    863a:	00 00       	nop
    863c:	0f 90       	pop	r0
    863e:	0f 90       	pop	r0
    8640:	0f 90       	pop	r0
    8642:	0f 90       	pop	r0
    8644:	0f 90       	pop	r0
    8646:	df 91       	pop	r29
    8648:	cf 91       	pop	r28
    864a:	08 95       	ret

0000864c <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    864c:	cf 93       	push	r28
    864e:	df 93       	push	r29
    8650:	00 d0       	rcall	.+0      	; 0x8652 <_ZN13LiquidCrystal10write8bitsEh+0x6>
    8652:	1f 92       	push	r1
    8654:	1f 92       	push	r1
    8656:	cd b7       	in	r28, 0x3d	; 61
    8658:	de b7       	in	r29, 0x3e	; 62
    865a:	9c 83       	std	Y+4, r25	; 0x04
    865c:	8b 83       	std	Y+3, r24	; 0x03
    865e:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    8660:	1a 82       	std	Y+2, r1	; 0x02
    8662:	19 82       	std	Y+1, r1	; 0x01
    8664:	89 81       	ldd	r24, Y+1	; 0x01
    8666:	9a 81       	ldd	r25, Y+2	; 0x02
    8668:	08 97       	sbiw	r24, 0x08	; 8
    866a:	ec f4       	brge	.+58     	; 0x86a6 <_ZN13LiquidCrystal10write8bitsEh+0x5a>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    866c:	8d 81       	ldd	r24, Y+5	; 0x05
    866e:	88 2f       	mov	r24, r24
    8670:	90 e0       	ldi	r25, 0x00	; 0
    8672:	09 80       	ldd	r0, Y+1	; 0x01
    8674:	02 c0       	rjmp	.+4      	; 0x867a <_ZN13LiquidCrystal10write8bitsEh+0x2e>
    8676:	95 95       	asr	r25
    8678:	87 95       	ror	r24
    867a:	0a 94       	dec	r0
    867c:	e2 f7       	brpl	.-8      	; 0x8676 <_ZN13LiquidCrystal10write8bitsEh+0x2a>
    867e:	48 2f       	mov	r20, r24
    8680:	41 70       	andi	r20, 0x01	; 1
    8682:	2b 81       	ldd	r18, Y+3	; 0x03
    8684:	3c 81       	ldd	r19, Y+4	; 0x04
    8686:	89 81       	ldd	r24, Y+1	; 0x01
    8688:	9a 81       	ldd	r25, Y+2	; 0x02
    868a:	82 0f       	add	r24, r18
    868c:	93 1f       	adc	r25, r19
    868e:	07 96       	adiw	r24, 0x07	; 7
    8690:	fc 01       	movw	r30, r24
    8692:	80 81       	ld	r24, Z
    8694:	64 2f       	mov	r22, r20
    8696:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    869a:	89 81       	ldd	r24, Y+1	; 0x01
    869c:	9a 81       	ldd	r25, Y+2	; 0x02
    869e:	01 96       	adiw	r24, 0x01	; 1
    86a0:	9a 83       	std	Y+2, r25	; 0x02
    86a2:	89 83       	std	Y+1, r24	; 0x01
    86a4:	df cf       	rjmp	.-66     	; 0x8664 <_ZN13LiquidCrystal10write8bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    86a6:	8b 81       	ldd	r24, Y+3	; 0x03
    86a8:	9c 81       	ldd	r25, Y+4	; 0x04
    86aa:	68 df       	rcall	.-304    	; 0x857c <_ZN13LiquidCrystal11pulseEnableEv>
}
    86ac:	00 00       	nop
    86ae:	0f 90       	pop	r0
    86b0:	0f 90       	pop	r0
    86b2:	0f 90       	pop	r0
    86b4:	0f 90       	pop	r0
    86b6:	0f 90       	pop	r0
    86b8:	df 91       	pop	r29
    86ba:	cf 91       	pop	r28
    86bc:	08 95       	ret

000086be <_ZN7MFRC522C1Ehh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    86be:	cf 93       	push	r28
    86c0:	df 93       	push	r29
    86c2:	00 d0       	rcall	.+0      	; 0x86c4 <_ZN7MFRC522C1Ehh+0x6>
    86c4:	1f 92       	push	r1
    86c6:	cd b7       	in	r28, 0x3d	; 61
    86c8:	de b7       	in	r29, 0x3e	; 62
    86ca:	9a 83       	std	Y+2, r25	; 0x02
    86cc:	89 83       	std	Y+1, r24	; 0x01
    86ce:	6b 83       	std	Y+3, r22	; 0x03
    86d0:	4c 83       	std	Y+4, r20	; 0x04
    86d2:	2f e0       	ldi	r18, 0x0F	; 15
    86d4:	33 e0       	ldi	r19, 0x03	; 3
    86d6:	89 81       	ldd	r24, Y+1	; 0x01
    86d8:	9a 81       	ldd	r25, Y+2	; 0x02
    86da:	fc 01       	movw	r30, r24
    86dc:	31 83       	std	Z+1, r19	; 0x01
    86de:	20 83       	st	Z, r18
    86e0:	89 81       	ldd	r24, Y+1	; 0x01
    86e2:	9a 81       	ldd	r25, Y+2	; 0x02
    86e4:	2b 81       	ldd	r18, Y+3	; 0x03
    86e6:	fc 01       	movw	r30, r24
    86e8:	26 87       	std	Z+14, r18	; 0x0e
    86ea:	89 81       	ldd	r24, Y+1	; 0x01
    86ec:	9a 81       	ldd	r25, Y+2	; 0x02
    86ee:	2c 81       	ldd	r18, Y+4	; 0x04
    86f0:	fc 01       	movw	r30, r24
    86f2:	27 87       	std	Z+15, r18	; 0x0f
    86f4:	00 00       	nop
    86f6:	0f 90       	pop	r0
    86f8:	0f 90       	pop	r0
    86fa:	0f 90       	pop	r0
    86fc:	0f 90       	pop	r0
    86fe:	df 91       	pop	r29
    8700:	cf 91       	pop	r28
    8702:	08 95       	ret

00008704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    8704:	0f 93       	push	r16
    8706:	cf 93       	push	r28
    8708:	df 93       	push	r29
    870a:	00 d0       	rcall	.+0      	; 0x870c <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0x8>
    870c:	00 d0       	rcall	.+0      	; 0x870e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0xa>
    870e:	cd b7       	in	r28, 0x3d	; 61
    8710:	de b7       	in	r29, 0x3e	; 62
    8712:	9c 83       	std	Y+4, r25	; 0x04
    8714:	8b 83       	std	Y+3, r24	; 0x03
    8716:	6d 83       	std	Y+5, r22	; 0x05
    8718:	4e 83       	std	Y+6, r20	; 0x06
    871a:	00 e0       	ldi	r16, 0x00	; 0
    871c:	21 e0       	ldi	r18, 0x01	; 1
    871e:	40 e0       	ldi	r20, 0x00	; 0
    8720:	59 e0       	ldi	r21, 0x09	; 9
    8722:	6d e3       	ldi	r22, 0x3D	; 61
    8724:	70 e0       	ldi	r23, 0x00	; 0
    8726:	ce 01       	movw	r24, r28
    8728:	01 96       	adiw	r24, 0x01	; 1
    872a:	0e 94 2f 12 	call	0x245e	; 0x245e <_ZN11SPISettingsC1Emhh>
    872e:	89 81       	ldd	r24, Y+1	; 0x01
    8730:	9a 81       	ldd	r25, Y+2	; 0x02
    8732:	0e 94 d6 12 	call	0x25ac	; 0x25ac <_ZN8SPIClass16beginTransactionE11SPISettings>
    8736:	8b 81       	ldd	r24, Y+3	; 0x03
    8738:	9c 81       	ldd	r25, Y+4	; 0x04
    873a:	fc 01       	movw	r30, r24
    873c:	86 85       	ldd	r24, Z+14	; 0x0e
    873e:	60 e0       	ldi	r22, 0x00	; 0
    8740:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    8744:	8d 81       	ldd	r24, Y+5	; 0x05
    8746:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    874a:	8e 81       	ldd	r24, Y+6	; 0x06
    874c:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    8750:	8b 81       	ldd	r24, Y+3	; 0x03
    8752:	9c 81       	ldd	r25, Y+4	; 0x04
    8754:	fc 01       	movw	r30, r24
    8756:	86 85       	ldd	r24, Z+14	; 0x0e
    8758:	61 e0       	ldi	r22, 0x01	; 1
    875a:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    875e:	0e 94 18 13 	call	0x2630	; 0x2630 <_ZN8SPIClass14endTransactionEv>
    8762:	00 00       	nop
    8764:	26 96       	adiw	r28, 0x06	; 6
    8766:	0f b6       	in	r0, 0x3f	; 63
    8768:	f8 94       	cli
    876a:	de bf       	out	0x3e, r29	; 62
    876c:	0f be       	out	0x3f, r0	; 63
    876e:	cd bf       	out	0x3d, r28	; 61
    8770:	df 91       	pop	r29
    8772:	cf 91       	pop	r28
    8774:	0f 91       	pop	r16
    8776:	08 95       	ret

00008778 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    8778:	0f 93       	push	r16
    877a:	cf 93       	push	r28
    877c:	df 93       	push	r29
    877e:	cd b7       	in	r28, 0x3d	; 61
    8780:	de b7       	in	r29, 0x3e	; 62
    8782:	29 97       	sbiw	r28, 0x09	; 9
    8784:	0f b6       	in	r0, 0x3f	; 63
    8786:	f8 94       	cli
    8788:	de bf       	out	0x3e, r29	; 62
    878a:	0f be       	out	0x3f, r0	; 63
    878c:	cd bf       	out	0x3d, r28	; 61
    878e:	9d 83       	std	Y+5, r25	; 0x05
    8790:	8c 83       	std	Y+4, r24	; 0x04
    8792:	6e 83       	std	Y+6, r22	; 0x06
    8794:	4f 83       	std	Y+7, r20	; 0x07
    8796:	39 87       	std	Y+9, r19	; 0x09
    8798:	28 87       	std	Y+8, r18	; 0x08
    879a:	ce 01       	movw	r24, r28
    879c:	02 96       	adiw	r24, 0x02	; 2
    879e:	00 e0       	ldi	r16, 0x00	; 0
    87a0:	21 e0       	ldi	r18, 0x01	; 1
    87a2:	40 e0       	ldi	r20, 0x00	; 0
    87a4:	59 e0       	ldi	r21, 0x09	; 9
    87a6:	6d e3       	ldi	r22, 0x3D	; 61
    87a8:	70 e0       	ldi	r23, 0x00	; 0
    87aa:	0e 94 2f 12 	call	0x245e	; 0x245e <_ZN11SPISettingsC1Emhh>
    87ae:	8a 81       	ldd	r24, Y+2	; 0x02
    87b0:	9b 81       	ldd	r25, Y+3	; 0x03
    87b2:	0e 94 d6 12 	call	0x25ac	; 0x25ac <_ZN8SPIClass16beginTransactionE11SPISettings>
    87b6:	8c 81       	ldd	r24, Y+4	; 0x04
    87b8:	9d 81       	ldd	r25, Y+5	; 0x05
    87ba:	fc 01       	movw	r30, r24
    87bc:	86 85       	ldd	r24, Z+14	; 0x0e
    87be:	60 e0       	ldi	r22, 0x00	; 0
    87c0:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    87c4:	8e 81       	ldd	r24, Y+6	; 0x06
    87c6:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    87ca:	19 82       	std	Y+1, r1	; 0x01
    87cc:	99 81       	ldd	r25, Y+1	; 0x01
    87ce:	8f 81       	ldd	r24, Y+7	; 0x07
    87d0:	98 17       	cp	r25, r24
    87d2:	78 f4       	brcc	.+30     	; 0x87f2 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x7a>
    87d4:	89 81       	ldd	r24, Y+1	; 0x01
    87d6:	88 2f       	mov	r24, r24
    87d8:	90 e0       	ldi	r25, 0x00	; 0
    87da:	28 85       	ldd	r18, Y+8	; 0x08
    87dc:	39 85       	ldd	r19, Y+9	; 0x09
    87de:	82 0f       	add	r24, r18
    87e0:	93 1f       	adc	r25, r19
    87e2:	fc 01       	movw	r30, r24
    87e4:	80 81       	ld	r24, Z
    87e6:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    87ea:	89 81       	ldd	r24, Y+1	; 0x01
    87ec:	8f 5f       	subi	r24, 0xFF	; 255
    87ee:	89 83       	std	Y+1, r24	; 0x01
    87f0:	ed cf       	rjmp	.-38     	; 0x87cc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x54>
    87f2:	8c 81       	ldd	r24, Y+4	; 0x04
    87f4:	9d 81       	ldd	r25, Y+5	; 0x05
    87f6:	fc 01       	movw	r30, r24
    87f8:	86 85       	ldd	r24, Z+14	; 0x0e
    87fa:	61 e0       	ldi	r22, 0x01	; 1
    87fc:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    8800:	0e 94 18 13 	call	0x2630	; 0x2630 <_ZN8SPIClass14endTransactionEv>
    8804:	00 00       	nop
    8806:	29 96       	adiw	r28, 0x09	; 9
    8808:	0f b6       	in	r0, 0x3f	; 63
    880a:	f8 94       	cli
    880c:	de bf       	out	0x3e, r29	; 62
    880e:	0f be       	out	0x3f, r0	; 63
    8810:	cd bf       	out	0x3d, r28	; 61
    8812:	df 91       	pop	r29
    8814:	cf 91       	pop	r28
    8816:	0f 91       	pop	r16
    8818:	08 95       	ret

0000881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    881a:	0f 93       	push	r16
    881c:	cf 93       	push	r28
    881e:	df 93       	push	r29
    8820:	00 d0       	rcall	.+0      	; 0x8822 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0x8>
    8822:	00 d0       	rcall	.+0      	; 0x8824 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0xa>
    8824:	cd b7       	in	r28, 0x3d	; 61
    8826:	de b7       	in	r29, 0x3e	; 62
    8828:	9d 83       	std	Y+5, r25	; 0x05
    882a:	8c 83       	std	Y+4, r24	; 0x04
    882c:	6e 83       	std	Y+6, r22	; 0x06
    882e:	ce 01       	movw	r24, r28
    8830:	02 96       	adiw	r24, 0x02	; 2
    8832:	00 e0       	ldi	r16, 0x00	; 0
    8834:	21 e0       	ldi	r18, 0x01	; 1
    8836:	40 e0       	ldi	r20, 0x00	; 0
    8838:	59 e0       	ldi	r21, 0x09	; 9
    883a:	6d e3       	ldi	r22, 0x3D	; 61
    883c:	70 e0       	ldi	r23, 0x00	; 0
    883e:	0e 94 2f 12 	call	0x245e	; 0x245e <_ZN11SPISettingsC1Emhh>
    8842:	8a 81       	ldd	r24, Y+2	; 0x02
    8844:	9b 81       	ldd	r25, Y+3	; 0x03
    8846:	0e 94 d6 12 	call	0x25ac	; 0x25ac <_ZN8SPIClass16beginTransactionE11SPISettings>
    884a:	8c 81       	ldd	r24, Y+4	; 0x04
    884c:	9d 81       	ldd	r25, Y+5	; 0x05
    884e:	fc 01       	movw	r30, r24
    8850:	86 85       	ldd	r24, Z+14	; 0x0e
    8852:	60 e0       	ldi	r22, 0x00	; 0
    8854:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    8858:	8e 81       	ldd	r24, Y+6	; 0x06
    885a:	80 68       	ori	r24, 0x80	; 128
    885c:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    8860:	80 e0       	ldi	r24, 0x00	; 0
    8862:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    8866:	89 83       	std	Y+1, r24	; 0x01
    8868:	8c 81       	ldd	r24, Y+4	; 0x04
    886a:	9d 81       	ldd	r25, Y+5	; 0x05
    886c:	fc 01       	movw	r30, r24
    886e:	86 85       	ldd	r24, Z+14	; 0x0e
    8870:	61 e0       	ldi	r22, 0x01	; 1
    8872:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    8876:	0e 94 18 13 	call	0x2630	; 0x2630 <_ZN8SPIClass14endTransactionEv>
    887a:	89 81       	ldd	r24, Y+1	; 0x01
    887c:	26 96       	adiw	r28, 0x06	; 6
    887e:	0f b6       	in	r0, 0x3f	; 63
    8880:	f8 94       	cli
    8882:	de bf       	out	0x3e, r29	; 62
    8884:	0f be       	out	0x3f, r0	; 63
    8886:	cd bf       	out	0x3d, r28	; 61
    8888:	df 91       	pop	r29
    888a:	cf 91       	pop	r28
    888c:	0f 91       	pop	r16
    888e:	08 95       	ret

00008890 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    8890:	0f 93       	push	r16
    8892:	1f 93       	push	r17
    8894:	cf 93       	push	r28
    8896:	df 93       	push	r29
    8898:	cd b7       	in	r28, 0x3d	; 61
    889a:	de b7       	in	r29, 0x3e	; 62
    889c:	2d 97       	sbiw	r28, 0x0d	; 13
    889e:	0f b6       	in	r0, 0x3f	; 63
    88a0:	f8 94       	cli
    88a2:	de bf       	out	0x3e, r29	; 62
    88a4:	0f be       	out	0x3f, r0	; 63
    88a6:	cd bf       	out	0x3d, r28	; 61
    88a8:	98 87       	std	Y+8, r25	; 0x08
    88aa:	8f 83       	std	Y+7, r24	; 0x07
    88ac:	69 87       	std	Y+9, r22	; 0x09
    88ae:	4a 87       	std	Y+10, r20	; 0x0a
    88b0:	3c 87       	std	Y+12, r19	; 0x0c
    88b2:	2b 87       	std	Y+11, r18	; 0x0b
    88b4:	0d 87       	std	Y+13, r16	; 0x0d
    88b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    88b8:	88 23       	and	r24, r24
    88ba:	09 f4       	brne	.+2      	; 0x88be <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x2e>
    88bc:	71 c0       	rjmp	.+226    	; 0x89a0 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x110>
    88be:	89 85       	ldd	r24, Y+9	; 0x09
    88c0:	80 68       	ori	r24, 0x80	; 128
    88c2:	8a 83       	std	Y+2, r24	; 0x02
    88c4:	19 82       	std	Y+1, r1	; 0x01
    88c6:	ce 01       	movw	r24, r28
    88c8:	05 96       	adiw	r24, 0x05	; 5
    88ca:	00 e0       	ldi	r16, 0x00	; 0
    88cc:	21 e0       	ldi	r18, 0x01	; 1
    88ce:	40 e0       	ldi	r20, 0x00	; 0
    88d0:	59 e0       	ldi	r21, 0x09	; 9
    88d2:	6d e3       	ldi	r22, 0x3D	; 61
    88d4:	70 e0       	ldi	r23, 0x00	; 0
    88d6:	0e 94 2f 12 	call	0x245e	; 0x245e <_ZN11SPISettingsC1Emhh>
    88da:	8d 81       	ldd	r24, Y+5	; 0x05
    88dc:	9e 81       	ldd	r25, Y+6	; 0x06
    88de:	0e 94 d6 12 	call	0x25ac	; 0x25ac <_ZN8SPIClass16beginTransactionE11SPISettings>
    88e2:	8f 81       	ldd	r24, Y+7	; 0x07
    88e4:	98 85       	ldd	r25, Y+8	; 0x08
    88e6:	fc 01       	movw	r30, r24
    88e8:	86 85       	ldd	r24, Z+14	; 0x0e
    88ea:	60 e0       	ldi	r22, 0x00	; 0
    88ec:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    88f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    88f2:	81 50       	subi	r24, 0x01	; 1
    88f4:	8a 87       	std	Y+10, r24	; 0x0a
    88f6:	8a 81       	ldd	r24, Y+2	; 0x02
    88f8:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    88fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    88fe:	88 23       	and	r24, r24
    8900:	19 f1       	breq	.+70     	; 0x8948 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xb8>
    8902:	8d 85       	ldd	r24, Y+13	; 0x0d
    8904:	28 2f       	mov	r18, r24
    8906:	30 e0       	ldi	r19, 0x00	; 0
    8908:	8f ef       	ldi	r24, 0xFF	; 255
    890a:	90 e0       	ldi	r25, 0x00	; 0
    890c:	02 c0       	rjmp	.+4      	; 0x8912 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x82>
    890e:	88 0f       	add	r24, r24
    8910:	99 1f       	adc	r25, r25
    8912:	2a 95       	dec	r18
    8914:	e2 f7       	brpl	.-8      	; 0x890e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x7e>
    8916:	8b 83       	std	Y+3, r24	; 0x03
    8918:	8a 81       	ldd	r24, Y+2	; 0x02
    891a:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    891e:	8c 83       	std	Y+4, r24	; 0x04
    8920:	8b 85       	ldd	r24, Y+11	; 0x0b
    8922:	9c 85       	ldd	r25, Y+12	; 0x0c
    8924:	fc 01       	movw	r30, r24
    8926:	80 81       	ld	r24, Z
    8928:	98 2f       	mov	r25, r24
    892a:	8b 81       	ldd	r24, Y+3	; 0x03
    892c:	80 95       	com	r24
    892e:	89 23       	and	r24, r25
    8930:	2c 81       	ldd	r18, Y+4	; 0x04
    8932:	9b 81       	ldd	r25, Y+3	; 0x03
    8934:	92 23       	and	r25, r18
    8936:	89 2b       	or	r24, r25
    8938:	28 2f       	mov	r18, r24
    893a:	8b 85       	ldd	r24, Y+11	; 0x0b
    893c:	9c 85       	ldd	r25, Y+12	; 0x0c
    893e:	fc 01       	movw	r30, r24
    8940:	20 83       	st	Z, r18
    8942:	89 81       	ldd	r24, Y+1	; 0x01
    8944:	8f 5f       	subi	r24, 0xFF	; 255
    8946:	89 83       	std	Y+1, r24	; 0x01
    8948:	99 81       	ldd	r25, Y+1	; 0x01
    894a:	8a 85       	ldd	r24, Y+10	; 0x0a
    894c:	98 17       	cp	r25, r24
    894e:	88 f4       	brcc	.+34     	; 0x8972 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xe2>
    8950:	89 81       	ldd	r24, Y+1	; 0x01
    8952:	88 2f       	mov	r24, r24
    8954:	90 e0       	ldi	r25, 0x00	; 0
    8956:	2b 85       	ldd	r18, Y+11	; 0x0b
    8958:	3c 85       	ldd	r19, Y+12	; 0x0c
    895a:	89 01       	movw	r16, r18
    895c:	08 0f       	add	r16, r24
    895e:	19 1f       	adc	r17, r25
    8960:	8a 81       	ldd	r24, Y+2	; 0x02
    8962:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    8966:	f8 01       	movw	r30, r16
    8968:	80 83       	st	Z, r24
    896a:	89 81       	ldd	r24, Y+1	; 0x01
    896c:	8f 5f       	subi	r24, 0xFF	; 255
    896e:	89 83       	std	Y+1, r24	; 0x01
    8970:	eb cf       	rjmp	.-42     	; 0x8948 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xb8>
    8972:	89 81       	ldd	r24, Y+1	; 0x01
    8974:	88 2f       	mov	r24, r24
    8976:	90 e0       	ldi	r25, 0x00	; 0
    8978:	2b 85       	ldd	r18, Y+11	; 0x0b
    897a:	3c 85       	ldd	r19, Y+12	; 0x0c
    897c:	89 01       	movw	r16, r18
    897e:	08 0f       	add	r16, r24
    8980:	19 1f       	adc	r17, r25
    8982:	80 e0       	ldi	r24, 0x00	; 0
    8984:	0e 94 30 20 	call	0x4060	; 0x4060 <_ZN8SPIClass8transferEh>
    8988:	f8 01       	movw	r30, r16
    898a:	80 83       	st	Z, r24
    898c:	8f 81       	ldd	r24, Y+7	; 0x07
    898e:	98 85       	ldd	r25, Y+8	; 0x08
    8990:	fc 01       	movw	r30, r24
    8992:	86 85       	ldd	r24, Z+14	; 0x0e
    8994:	61 e0       	ldi	r22, 0x01	; 1
    8996:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    899a:	0e 94 18 13 	call	0x2630	; 0x2630 <_ZN8SPIClass14endTransactionEv>
    899e:	01 c0       	rjmp	.+2      	; 0x89a2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x112>
    89a0:	00 00       	nop
    89a2:	2d 96       	adiw	r28, 0x0d	; 13
    89a4:	0f b6       	in	r0, 0x3f	; 63
    89a6:	f8 94       	cli
    89a8:	de bf       	out	0x3e, r29	; 62
    89aa:	0f be       	out	0x3f, r0	; 63
    89ac:	cd bf       	out	0x3d, r28	; 61
    89ae:	df 91       	pop	r29
    89b0:	cf 91       	pop	r28
    89b2:	1f 91       	pop	r17
    89b4:	0f 91       	pop	r16
    89b6:	08 95       	ret

000089b8 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    89b8:	cf 93       	push	r28
    89ba:	df 93       	push	r29
    89bc:	00 d0       	rcall	.+0      	; 0x89be <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh+0x6>
    89be:	1f 92       	push	r1
    89c0:	1f 92       	push	r1
    89c2:	cd b7       	in	r28, 0x3d	; 61
    89c4:	de b7       	in	r29, 0x3e	; 62
    89c6:	9b 83       	std	Y+3, r25	; 0x03
    89c8:	8a 83       	std	Y+2, r24	; 0x02
    89ca:	6c 83       	std	Y+4, r22	; 0x04
    89cc:	4d 83       	std	Y+5, r20	; 0x05
    89ce:	8a 81       	ldd	r24, Y+2	; 0x02
    89d0:	9b 81       	ldd	r25, Y+3	; 0x03
    89d2:	6c 81       	ldd	r22, Y+4	; 0x04
    89d4:	22 df       	rcall	.-444    	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    89d6:	89 83       	std	Y+1, r24	; 0x01
    89d8:	99 81       	ldd	r25, Y+1	; 0x01
    89da:	8d 81       	ldd	r24, Y+5	; 0x05
    89dc:	29 2f       	mov	r18, r25
    89de:	28 2b       	or	r18, r24
    89e0:	8a 81       	ldd	r24, Y+2	; 0x02
    89e2:	9b 81       	ldd	r25, Y+3	; 0x03
    89e4:	42 2f       	mov	r20, r18
    89e6:	6c 81       	ldd	r22, Y+4	; 0x04
    89e8:	8d de       	rcall	.-742    	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    89ea:	00 00       	nop
    89ec:	0f 90       	pop	r0
    89ee:	0f 90       	pop	r0
    89f0:	0f 90       	pop	r0
    89f2:	0f 90       	pop	r0
    89f4:	0f 90       	pop	r0
    89f6:	df 91       	pop	r29
    89f8:	cf 91       	pop	r28
    89fa:	08 95       	ret

000089fc <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    89fc:	cf 93       	push	r28
    89fe:	df 93       	push	r29
    8a00:	00 d0       	rcall	.+0      	; 0x8a02 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh+0x6>
    8a02:	1f 92       	push	r1
    8a04:	1f 92       	push	r1
    8a06:	cd b7       	in	r28, 0x3d	; 61
    8a08:	de b7       	in	r29, 0x3e	; 62
    8a0a:	9b 83       	std	Y+3, r25	; 0x03
    8a0c:	8a 83       	std	Y+2, r24	; 0x02
    8a0e:	6c 83       	std	Y+4, r22	; 0x04
    8a10:	4d 83       	std	Y+5, r20	; 0x05
    8a12:	8a 81       	ldd	r24, Y+2	; 0x02
    8a14:	9b 81       	ldd	r25, Y+3	; 0x03
    8a16:	6c 81       	ldd	r22, Y+4	; 0x04
    8a18:	00 df       	rcall	.-512    	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8a1a:	89 83       	std	Y+1, r24	; 0x01
    8a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    8a1e:	98 2f       	mov	r25, r24
    8a20:	90 95       	com	r25
    8a22:	89 81       	ldd	r24, Y+1	; 0x01
    8a24:	89 23       	and	r24, r25
    8a26:	28 2f       	mov	r18, r24
    8a28:	8a 81       	ldd	r24, Y+2	; 0x02
    8a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    8a2c:	42 2f       	mov	r20, r18
    8a2e:	6c 81       	ldd	r22, Y+4	; 0x04
    8a30:	69 de       	rcall	.-814    	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8a32:	00 00       	nop
    8a34:	0f 90       	pop	r0
    8a36:	0f 90       	pop	r0
    8a38:	0f 90       	pop	r0
    8a3a:	0f 90       	pop	r0
    8a3c:	0f 90       	pop	r0
    8a3e:	df 91       	pop	r29
    8a40:	cf 91       	pop	r28
    8a42:	08 95       	ret

00008a44 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    8a44:	0f 93       	push	r16
    8a46:	1f 93       	push	r17
    8a48:	cf 93       	push	r28
    8a4a:	df 93       	push	r29
    8a4c:	cd b7       	in	r28, 0x3d	; 61
    8a4e:	de b7       	in	r29, 0x3e	; 62
    8a50:	2a 97       	sbiw	r28, 0x0a	; 10
    8a52:	0f b6       	in	r0, 0x3f	; 63
    8a54:	f8 94       	cli
    8a56:	de bf       	out	0x3e, r29	; 62
    8a58:	0f be       	out	0x3f, r0	; 63
    8a5a:	cd bf       	out	0x3d, r28	; 61
    8a5c:	9d 83       	std	Y+5, r25	; 0x05
    8a5e:	8c 83       	std	Y+4, r24	; 0x04
    8a60:	7f 83       	std	Y+7, r23	; 0x07
    8a62:	6e 83       	std	Y+6, r22	; 0x06
    8a64:	48 87       	std	Y+8, r20	; 0x08
    8a66:	3a 87       	std	Y+10, r19	; 0x0a
    8a68:	29 87       	std	Y+9, r18	; 0x09
    8a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    8a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    8a6e:	40 e0       	ldi	r20, 0x00	; 0
    8a70:	62 e0       	ldi	r22, 0x02	; 2
    8a72:	48 de       	rcall	.-880    	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8a74:	8c 81       	ldd	r24, Y+4	; 0x04
    8a76:	9d 81       	ldd	r25, Y+5	; 0x05
    8a78:	44 e0       	ldi	r20, 0x04	; 4
    8a7a:	6a e0       	ldi	r22, 0x0A	; 10
    8a7c:	43 de       	rcall	.-890    	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    8a80:	9d 81       	ldd	r25, Y+5	; 0x05
    8a82:	40 e8       	ldi	r20, 0x80	; 128
    8a84:	64 e1       	ldi	r22, 0x14	; 20
    8a86:	3e de       	rcall	.-900    	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8a88:	2e 81       	ldd	r18, Y+6	; 0x06
    8a8a:	3f 81       	ldd	r19, Y+7	; 0x07
    8a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    8a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    8a90:	48 85       	ldd	r20, Y+8	; 0x08
    8a92:	62 e1       	ldi	r22, 0x12	; 18
    8a94:	71 de       	rcall	.-798    	; 0x8778 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    8a96:	8c 81       	ldd	r24, Y+4	; 0x04
    8a98:	9d 81       	ldd	r25, Y+5	; 0x05
    8a9a:	43 e0       	ldi	r20, 0x03	; 3
    8a9c:	62 e0       	ldi	r22, 0x02	; 2
    8a9e:	32 de       	rcall	.-924    	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8aa0:	88 e8       	ldi	r24, 0x88	; 136
    8aa2:	93 e1       	ldi	r25, 0x13	; 19
    8aa4:	9a 83       	std	Y+2, r25	; 0x02
    8aa6:	89 83       	std	Y+1, r24	; 0x01
    8aa8:	89 81       	ldd	r24, Y+1	; 0x01
    8aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    8aac:	89 2b       	or	r24, r25
    8aae:	69 f1       	breq	.+90     	; 0x8b0a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xc6>
    8ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    8ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    8ab4:	6a e0       	ldi	r22, 0x0A	; 10
    8ab6:	b1 de       	rcall	.-670    	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8ab8:	8b 83       	std	Y+3, r24	; 0x03
    8aba:	8b 81       	ldd	r24, Y+3	; 0x03
    8abc:	88 2f       	mov	r24, r24
    8abe:	90 e0       	ldi	r25, 0x00	; 0
    8ac0:	84 70       	andi	r24, 0x04	; 4
    8ac2:	99 27       	eor	r25, r25
    8ac4:	89 2b       	or	r24, r25
    8ac6:	d9 f0       	breq	.+54     	; 0x8afe <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xba>
    8ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    8aca:	9d 81       	ldd	r25, Y+5	; 0x05
    8acc:	40 e0       	ldi	r20, 0x00	; 0
    8ace:	62 e0       	ldi	r22, 0x02	; 2
    8ad0:	19 de       	rcall	.-974    	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    8ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    8ad6:	64 e4       	ldi	r22, 0x44	; 68
    8ad8:	a0 de       	rcall	.-704    	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8ada:	28 2f       	mov	r18, r24
    8adc:	89 85       	ldd	r24, Y+9	; 0x09
    8ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    8ae0:	fc 01       	movw	r30, r24
    8ae2:	20 83       	st	Z, r18
    8ae4:	89 85       	ldd	r24, Y+9	; 0x09
    8ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    8ae8:	8c 01       	movw	r16, r24
    8aea:	0f 5f       	subi	r16, 0xFF	; 255
    8aec:	1f 4f       	sbci	r17, 0xFF	; 255
    8aee:	8c 81       	ldd	r24, Y+4	; 0x04
    8af0:	9d 81       	ldd	r25, Y+5	; 0x05
    8af2:	62 e4       	ldi	r22, 0x42	; 66
    8af4:	92 de       	rcall	.-732    	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8af6:	f8 01       	movw	r30, r16
    8af8:	80 83       	st	Z, r24
    8afa:	80 e0       	ldi	r24, 0x00	; 0
    8afc:	07 c0       	rjmp	.+14     	; 0x8b0c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xc8>
    8afe:	89 81       	ldd	r24, Y+1	; 0x01
    8b00:	9a 81       	ldd	r25, Y+2	; 0x02
    8b02:	01 97       	sbiw	r24, 0x01	; 1
    8b04:	9a 83       	std	Y+2, r25	; 0x02
    8b06:	89 83       	std	Y+1, r24	; 0x01
    8b08:	cf cf       	rjmp	.-98     	; 0x8aa8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    8b0a:	83 e0       	ldi	r24, 0x03	; 3
    8b0c:	2a 96       	adiw	r28, 0x0a	; 10
    8b0e:	0f b6       	in	r0, 0x3f	; 63
    8b10:	f8 94       	cli
    8b12:	de bf       	out	0x3e, r29	; 62
    8b14:	0f be       	out	0x3f, r0	; 63
    8b16:	cd bf       	out	0x3d, r28	; 61
    8b18:	df 91       	pop	r29
    8b1a:	cf 91       	pop	r28
    8b1c:	1f 91       	pop	r17
    8b1e:	0f 91       	pop	r16
    8b20:	08 95       	ret

00008b22 <_ZN7MFRC5228PCD_InitEv>:
    8b22:	cf 93       	push	r28
    8b24:	df 93       	push	r29
    8b26:	00 d0       	rcall	.+0      	; 0x8b28 <_ZN7MFRC5228PCD_InitEv+0x6>
    8b28:	cd b7       	in	r28, 0x3d	; 61
    8b2a:	de b7       	in	r29, 0x3e	; 62
    8b2c:	9b 83       	std	Y+3, r25	; 0x03
    8b2e:	8a 83       	std	Y+2, r24	; 0x02
    8b30:	19 82       	std	Y+1, r1	; 0x01
    8b32:	8a 81       	ldd	r24, Y+2	; 0x02
    8b34:	9b 81       	ldd	r25, Y+3	; 0x03
    8b36:	fc 01       	movw	r30, r24
    8b38:	86 85       	ldd	r24, Z+14	; 0x0e
    8b3a:	61 e0       	ldi	r22, 0x01	; 1
    8b3c:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    8b40:	8a 81       	ldd	r24, Y+2	; 0x02
    8b42:	9b 81       	ldd	r25, Y+3	; 0x03
    8b44:	fc 01       	movw	r30, r24
    8b46:	86 85       	ldd	r24, Z+14	; 0x0e
    8b48:	61 e0       	ldi	r22, 0x01	; 1
    8b4a:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    8b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    8b50:	9b 81       	ldd	r25, Y+3	; 0x03
    8b52:	fc 01       	movw	r30, r24
    8b54:	87 85       	ldd	r24, Z+15	; 0x0f
    8b56:	8f 3f       	cpi	r24, 0xFF	; 255
    8b58:	a1 f1       	breq	.+104    	; 0x8bc2 <_ZN7MFRC5228PCD_InitEv+0xa0>
    8b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    8b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    8b5e:	fc 01       	movw	r30, r24
    8b60:	87 85       	ldd	r24, Z+15	; 0x0f
    8b62:	60 e0       	ldi	r22, 0x00	; 0
    8b64:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    8b68:	8a 81       	ldd	r24, Y+2	; 0x02
    8b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    8b6c:	fc 01       	movw	r30, r24
    8b6e:	87 85       	ldd	r24, Z+15	; 0x0f
    8b70:	0e 94 80 61 	call	0xc300	; 0xc300 <digitalRead>
    8b74:	21 e0       	ldi	r18, 0x01	; 1
    8b76:	89 2b       	or	r24, r25
    8b78:	09 f0       	breq	.+2      	; 0x8b7c <_ZN7MFRC5228PCD_InitEv+0x5a>
    8b7a:	20 e0       	ldi	r18, 0x00	; 0
    8b7c:	22 23       	and	r18, r18
    8b7e:	09 f1       	breq	.+66     	; 0x8bc2 <_ZN7MFRC5228PCD_InitEv+0xa0>
    8b80:	8a 81       	ldd	r24, Y+2	; 0x02
    8b82:	9b 81       	ldd	r25, Y+3	; 0x03
    8b84:	fc 01       	movw	r30, r24
    8b86:	87 85       	ldd	r24, Z+15	; 0x0f
    8b88:	61 e0       	ldi	r22, 0x01	; 1
    8b8a:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    8b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    8b90:	9b 81       	ldd	r25, Y+3	; 0x03
    8b92:	fc 01       	movw	r30, r24
    8b94:	87 85       	ldd	r24, Z+15	; 0x0f
    8b96:	60 e0       	ldi	r22, 0x00	; 0
    8b98:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    8b9c:	82 e0       	ldi	r24, 0x02	; 2
    8b9e:	90 e0       	ldi	r25, 0x00	; 0
    8ba0:	0e 94 69 5f 	call	0xbed2	; 0xbed2 <delayMicroseconds>
    8ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    8ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    8ba8:	fc 01       	movw	r30, r24
    8baa:	87 85       	ldd	r24, Z+15	; 0x0f
    8bac:	61 e0       	ldi	r22, 0x01	; 1
    8bae:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    8bb2:	62 e3       	ldi	r22, 0x32	; 50
    8bb4:	70 e0       	ldi	r23, 0x00	; 0
    8bb6:	80 e0       	ldi	r24, 0x00	; 0
    8bb8:	90 e0       	ldi	r25, 0x00	; 0
    8bba:	0e 94 30 5f 	call	0xbe60	; 0xbe60 <delay>
    8bbe:	81 e0       	ldi	r24, 0x01	; 1
    8bc0:	89 83       	std	Y+1, r24	; 0x01
    8bc2:	99 81       	ldd	r25, Y+1	; 0x01
    8bc4:	81 e0       	ldi	r24, 0x01	; 1
    8bc6:	89 27       	eor	r24, r25
    8bc8:	88 23       	and	r24, r24
    8bca:	19 f0       	breq	.+6      	; 0x8bd2 <_ZN7MFRC5228PCD_InitEv+0xb0>
    8bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    8bce:	9b 81       	ldd	r25, Y+3	; 0x03
    8bd0:	37 d0       	rcall	.+110    	; 0x8c40 <_ZN7MFRC5229PCD_ResetEv>
    8bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    8bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    8bd6:	40 e0       	ldi	r20, 0x00	; 0
    8bd8:	64 e2       	ldi	r22, 0x24	; 36
    8bda:	94 dd       	rcall	.-1240   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    8bde:	9b 81       	ldd	r25, Y+3	; 0x03
    8be0:	40 e0       	ldi	r20, 0x00	; 0
    8be2:	66 e2       	ldi	r22, 0x26	; 38
    8be4:	8f dd       	rcall	.-1250   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8be6:	8a 81       	ldd	r24, Y+2	; 0x02
    8be8:	9b 81       	ldd	r25, Y+3	; 0x03
    8bea:	46 e2       	ldi	r20, 0x26	; 38
    8bec:	68 e4       	ldi	r22, 0x48	; 72
    8bee:	8a dd       	rcall	.-1260   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    8bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    8bf4:	40 e8       	ldi	r20, 0x80	; 128
    8bf6:	64 e5       	ldi	r22, 0x54	; 84
    8bf8:	85 dd       	rcall	.-1270   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    8bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    8bfe:	49 ea       	ldi	r20, 0xA9	; 169
    8c00:	66 e5       	ldi	r22, 0x56	; 86
    8c02:	80 dd       	rcall	.-1280   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8c04:	8a 81       	ldd	r24, Y+2	; 0x02
    8c06:	9b 81       	ldd	r25, Y+3	; 0x03
    8c08:	43 e0       	ldi	r20, 0x03	; 3
    8c0a:	68 e5       	ldi	r22, 0x58	; 88
    8c0c:	7b dd       	rcall	.-1290   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    8c10:	9b 81       	ldd	r25, Y+3	; 0x03
    8c12:	48 ee       	ldi	r20, 0xE8	; 232
    8c14:	6a e5       	ldi	r22, 0x5A	; 90
    8c16:	76 dd       	rcall	.-1300   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8c18:	8a 81       	ldd	r24, Y+2	; 0x02
    8c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    8c1c:	40 e4       	ldi	r20, 0x40	; 64
    8c1e:	6a e2       	ldi	r22, 0x2A	; 42
    8c20:	71 dd       	rcall	.-1310   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8c22:	8a 81       	ldd	r24, Y+2	; 0x02
    8c24:	9b 81       	ldd	r25, Y+3	; 0x03
    8c26:	4d e3       	ldi	r20, 0x3D	; 61
    8c28:	62 e2       	ldi	r22, 0x22	; 34
    8c2a:	6c dd       	rcall	.-1320   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    8c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    8c30:	37 d0       	rcall	.+110    	; 0x8ca0 <_ZN7MFRC52213PCD_AntennaOnEv>
    8c32:	00 00       	nop
    8c34:	0f 90       	pop	r0
    8c36:	0f 90       	pop	r0
    8c38:	0f 90       	pop	r0
    8c3a:	df 91       	pop	r29
    8c3c:	cf 91       	pop	r28
    8c3e:	08 95       	ret

00008c40 <_ZN7MFRC5229PCD_ResetEv>:
    8c40:	cf 93       	push	r28
    8c42:	df 93       	push	r29
    8c44:	00 d0       	rcall	.+0      	; 0x8c46 <_ZN7MFRC5229PCD_ResetEv+0x6>
    8c46:	cd b7       	in	r28, 0x3d	; 61
    8c48:	de b7       	in	r29, 0x3e	; 62
    8c4a:	9b 83       	std	Y+3, r25	; 0x03
    8c4c:	8a 83       	std	Y+2, r24	; 0x02
    8c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    8c50:	9b 81       	ldd	r25, Y+3	; 0x03
    8c52:	4f e0       	ldi	r20, 0x0F	; 15
    8c54:	62 e0       	ldi	r22, 0x02	; 2
    8c56:	56 dd       	rcall	.-1364   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8c58:	19 82       	std	Y+1, r1	; 0x01
    8c5a:	62 e3       	ldi	r22, 0x32	; 50
    8c5c:	70 e0       	ldi	r23, 0x00	; 0
    8c5e:	80 e0       	ldi	r24, 0x00	; 0
    8c60:	90 e0       	ldi	r25, 0x00	; 0
    8c62:	0e 94 30 5f 	call	0xbe60	; 0xbe60 <delay>
    8c66:	8a 81       	ldd	r24, Y+2	; 0x02
    8c68:	9b 81       	ldd	r25, Y+3	; 0x03
    8c6a:	62 e0       	ldi	r22, 0x02	; 2
    8c6c:	d6 dd       	rcall	.-1108   	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8c6e:	88 2f       	mov	r24, r24
    8c70:	90 e0       	ldi	r25, 0x00	; 0
    8c72:	80 71       	andi	r24, 0x10	; 16
    8c74:	99 27       	eor	r25, r25
    8c76:	89 2b       	or	r24, r25
    8c78:	41 f0       	breq	.+16     	; 0x8c8a <_ZN7MFRC5229PCD_ResetEv+0x4a>
    8c7a:	89 81       	ldd	r24, Y+1	; 0x01
    8c7c:	8f 5f       	subi	r24, 0xFF	; 255
    8c7e:	89 83       	std	Y+1, r24	; 0x01
    8c80:	89 81       	ldd	r24, Y+1	; 0x01
    8c82:	83 30       	cpi	r24, 0x03	; 3
    8c84:	10 f4       	brcc	.+4      	; 0x8c8a <_ZN7MFRC5229PCD_ResetEv+0x4a>
    8c86:	81 e0       	ldi	r24, 0x01	; 1
    8c88:	01 c0       	rjmp	.+2      	; 0x8c8c <_ZN7MFRC5229PCD_ResetEv+0x4c>
    8c8a:	80 e0       	ldi	r24, 0x00	; 0
    8c8c:	88 23       	and	r24, r24
    8c8e:	09 f0       	breq	.+2      	; 0x8c92 <_ZN7MFRC5229PCD_ResetEv+0x52>
    8c90:	e4 cf       	rjmp	.-56     	; 0x8c5a <_ZN7MFRC5229PCD_ResetEv+0x1a>
    8c92:	00 00       	nop
    8c94:	0f 90       	pop	r0
    8c96:	0f 90       	pop	r0
    8c98:	0f 90       	pop	r0
    8c9a:	df 91       	pop	r29
    8c9c:	cf 91       	pop	r28
    8c9e:	08 95       	ret

00008ca0 <_ZN7MFRC52213PCD_AntennaOnEv>:
    8ca0:	cf 93       	push	r28
    8ca2:	df 93       	push	r29
    8ca4:	00 d0       	rcall	.+0      	; 0x8ca6 <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    8ca6:	cd b7       	in	r28, 0x3d	; 61
    8ca8:	de b7       	in	r29, 0x3e	; 62
    8caa:	9b 83       	std	Y+3, r25	; 0x03
    8cac:	8a 83       	std	Y+2, r24	; 0x02
    8cae:	8a 81       	ldd	r24, Y+2	; 0x02
    8cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    8cb2:	68 e2       	ldi	r22, 0x28	; 40
    8cb4:	b2 dd       	rcall	.-1180   	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8cb6:	89 83       	std	Y+1, r24	; 0x01
    8cb8:	89 81       	ldd	r24, Y+1	; 0x01
    8cba:	88 2f       	mov	r24, r24
    8cbc:	90 e0       	ldi	r25, 0x00	; 0
    8cbe:	83 70       	andi	r24, 0x03	; 3
    8cc0:	99 27       	eor	r25, r25
    8cc2:	03 97       	sbiw	r24, 0x03	; 3
    8cc4:	41 f0       	breq	.+16     	; 0x8cd6 <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    8cc6:	89 81       	ldd	r24, Y+1	; 0x01
    8cc8:	28 2f       	mov	r18, r24
    8cca:	23 60       	ori	r18, 0x03	; 3
    8ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    8cce:	9b 81       	ldd	r25, Y+3	; 0x03
    8cd0:	42 2f       	mov	r20, r18
    8cd2:	68 e2       	ldi	r22, 0x28	; 40
    8cd4:	17 dd       	rcall	.-1490   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8cd6:	00 00       	nop
    8cd8:	0f 90       	pop	r0
    8cda:	0f 90       	pop	r0
    8cdc:	0f 90       	pop	r0
    8cde:	df 91       	pop	r29
    8ce0:	cf 91       	pop	r28
    8ce2:	08 95       	ret

00008ce4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    8ce4:	8f 92       	push	r8
    8ce6:	af 92       	push	r10
    8ce8:	bf 92       	push	r11
    8cea:	cf 92       	push	r12
    8cec:	df 92       	push	r13
    8cee:	ef 92       	push	r14
    8cf0:	ff 92       	push	r15
    8cf2:	0f 93       	push	r16
    8cf4:	1f 93       	push	r17
    8cf6:	cf 93       	push	r28
    8cf8:	df 93       	push	r29
    8cfa:	cd b7       	in	r28, 0x3d	; 61
    8cfc:	de b7       	in	r29, 0x3e	; 62
    8cfe:	2e 97       	sbiw	r28, 0x0e	; 14
    8d00:	0f b6       	in	r0, 0x3f	; 63
    8d02:	f8 94       	cli
    8d04:	de bf       	out	0x3e, r29	; 62
    8d06:	0f be       	out	0x3f, r0	; 63
    8d08:	cd bf       	out	0x3d, r28	; 61
    8d0a:	9b 83       	std	Y+3, r25	; 0x03
    8d0c:	8a 83       	std	Y+2, r24	; 0x02
    8d0e:	7d 83       	std	Y+5, r23	; 0x05
    8d10:	6c 83       	std	Y+4, r22	; 0x04
    8d12:	4e 83       	std	Y+6, r20	; 0x06
    8d14:	38 87       	std	Y+8, r19	; 0x08
    8d16:	2f 83       	std	Y+7, r18	; 0x07
    8d18:	1a 87       	std	Y+10, r17	; 0x0a
    8d1a:	09 87       	std	Y+9, r16	; 0x09
    8d1c:	fc 86       	std	Y+12, r15	; 0x0c
    8d1e:	eb 86       	std	Y+11, r14	; 0x0b
    8d20:	cd 86       	std	Y+13, r12	; 0x0d
    8d22:	ae 86       	std	Y+14, r10	; 0x0e
    8d24:	80 e3       	ldi	r24, 0x30	; 48
    8d26:	89 83       	std	Y+1, r24	; 0x01
    8d28:	eb 85       	ldd	r30, Y+11	; 0x0b
    8d2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    8d2c:	69 85       	ldd	r22, Y+9	; 0x09
    8d2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d30:	4f 81       	ldd	r20, Y+7	; 0x07
    8d32:	58 85       	ldd	r21, Y+8	; 0x08
    8d34:	2c 81       	ldd	r18, Y+4	; 0x04
    8d36:	3d 81       	ldd	r19, Y+5	; 0x05
    8d38:	8a 81       	ldd	r24, Y+2	; 0x02
    8d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    8d3c:	ae 85       	ldd	r26, Y+14	; 0x0e
    8d3e:	af 93       	push	r26
    8d40:	8d 84       	ldd	r8, Y+13	; 0x0d
    8d42:	5f 01       	movw	r10, r30
    8d44:	6b 01       	movw	r12, r22
    8d46:	7a 01       	movw	r14, r20
    8d48:	0e 81       	ldd	r16, Y+6	; 0x06
    8d4a:	49 81       	ldd	r20, Y+1	; 0x01
    8d4c:	6c e0       	ldi	r22, 0x0C	; 12
    8d4e:	13 d0       	rcall	.+38     	; 0x8d76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    8d50:	0f 90       	pop	r0
    8d52:	2e 96       	adiw	r28, 0x0e	; 14
    8d54:	0f b6       	in	r0, 0x3f	; 63
    8d56:	f8 94       	cli
    8d58:	de bf       	out	0x3e, r29	; 62
    8d5a:	0f be       	out	0x3f, r0	; 63
    8d5c:	cd bf       	out	0x3d, r28	; 61
    8d5e:	df 91       	pop	r29
    8d60:	cf 91       	pop	r28
    8d62:	1f 91       	pop	r17
    8d64:	0f 91       	pop	r16
    8d66:	ff 90       	pop	r15
    8d68:	ef 90       	pop	r14
    8d6a:	df 90       	pop	r13
    8d6c:	cf 90       	pop	r12
    8d6e:	bf 90       	pop	r11
    8d70:	af 90       	pop	r10
    8d72:	8f 90       	pop	r8
    8d74:	08 95       	ret

00008d76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    8d76:	8f 92       	push	r8
    8d78:	af 92       	push	r10
    8d7a:	bf 92       	push	r11
    8d7c:	cf 92       	push	r12
    8d7e:	df 92       	push	r13
    8d80:	ef 92       	push	r14
    8d82:	ff 92       	push	r15
    8d84:	0f 93       	push	r16
    8d86:	cf 93       	push	r28
    8d88:	df 93       	push	r29
    8d8a:	cd b7       	in	r28, 0x3d	; 61
    8d8c:	de b7       	in	r29, 0x3e	; 62
    8d8e:	69 97       	sbiw	r28, 0x19	; 25
    8d90:	0f b6       	in	r0, 0x3f	; 63
    8d92:	f8 94       	cli
    8d94:	de bf       	out	0x3e, r29	; 62
    8d96:	0f be       	out	0x3f, r0	; 63
    8d98:	cd bf       	out	0x3d, r28	; 61
    8d9a:	9d 87       	std	Y+13, r25	; 0x0d
    8d9c:	8c 87       	std	Y+12, r24	; 0x0c
    8d9e:	6e 87       	std	Y+14, r22	; 0x0e
    8da0:	4f 87       	std	Y+15, r20	; 0x0f
    8da2:	39 8b       	std	Y+17, r19	; 0x11
    8da4:	28 8b       	std	Y+16, r18	; 0x10
    8da6:	0a 8b       	std	Y+18, r16	; 0x12
    8da8:	fc 8a       	std	Y+20, r15	; 0x14
    8daa:	eb 8a       	std	Y+19, r14	; 0x13
    8dac:	de 8a       	std	Y+22, r13	; 0x16
    8dae:	cd 8a       	std	Y+21, r12	; 0x15
    8db0:	b8 8e       	std	Y+24, r11	; 0x18
    8db2:	af 8a       	std	Y+23, r10	; 0x17
    8db4:	89 8e       	std	Y+25, r8	; 0x19
    8db6:	8f 89       	ldd	r24, Y+23	; 0x17
    8db8:	98 8d       	ldd	r25, Y+24	; 0x18
    8dba:	89 2b       	or	r24, r25
    8dbc:	29 f0       	breq	.+10     	; 0x8dc8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    8dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    8dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    8dc2:	fc 01       	movw	r30, r24
    8dc4:	80 81       	ld	r24, Z
    8dc6:	01 c0       	rjmp	.+2      	; 0x8dca <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    8dc8:	80 e0       	ldi	r24, 0x00	; 0
    8dca:	8c 83       	std	Y+4, r24	; 0x04
    8dcc:	89 8d       	ldd	r24, Y+25	; 0x19
    8dce:	98 2f       	mov	r25, r24
    8dd0:	92 95       	swap	r25
    8dd2:	90 7f       	andi	r25, 0xF0	; 240
    8dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    8dd6:	89 0f       	add	r24, r25
    8dd8:	8d 83       	std	Y+5, r24	; 0x05
    8dda:	8c 85       	ldd	r24, Y+12	; 0x0c
    8ddc:	9d 85       	ldd	r25, Y+13	; 0x0d
    8dde:	40 e0       	ldi	r20, 0x00	; 0
    8de0:	62 e0       	ldi	r22, 0x02	; 2
    8de2:	90 dc       	rcall	.-1760   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8de4:	8c 85       	ldd	r24, Y+12	; 0x0c
    8de6:	9d 85       	ldd	r25, Y+13	; 0x0d
    8de8:	4f e7       	ldi	r20, 0x7F	; 127
    8dea:	68 e0       	ldi	r22, 0x08	; 8
    8dec:	8b dc       	rcall	.-1770   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8dee:	8c 85       	ldd	r24, Y+12	; 0x0c
    8df0:	9d 85       	ldd	r25, Y+13	; 0x0d
    8df2:	40 e8       	ldi	r20, 0x80	; 128
    8df4:	64 e1       	ldi	r22, 0x14	; 20
    8df6:	86 dc       	rcall	.-1780   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8df8:	28 89       	ldd	r18, Y+16	; 0x10
    8dfa:	39 89       	ldd	r19, Y+17	; 0x11
    8dfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    8dfe:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e00:	4a 89       	ldd	r20, Y+18	; 0x12
    8e02:	62 e1       	ldi	r22, 0x12	; 18
    8e04:	b9 dc       	rcall	.-1678   	; 0x8778 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    8e06:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e08:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e0a:	4d 81       	ldd	r20, Y+5	; 0x05
    8e0c:	6a e1       	ldi	r22, 0x1A	; 26
    8e0e:	7a dc       	rcall	.-1804   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8e10:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e12:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e14:	4e 85       	ldd	r20, Y+14	; 0x0e
    8e16:	62 e0       	ldi	r22, 0x02	; 2
    8e18:	75 dc       	rcall	.-1814   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8e1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    8e1c:	8c 30       	cpi	r24, 0x0C	; 12
    8e1e:	29 f4       	brne	.+10     	; 0x8e2a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    8e20:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e22:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e24:	40 e8       	ldi	r20, 0x80	; 128
    8e26:	6a e1       	ldi	r22, 0x1A	; 26
    8e28:	c7 dd       	rcall	.-1138   	; 0x89b8 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    8e2a:	80 ed       	ldi	r24, 0xD0	; 208
    8e2c:	97 e0       	ldi	r25, 0x07	; 7
    8e2e:	9a 83       	std	Y+2, r25	; 0x02
    8e30:	89 83       	std	Y+1, r24	; 0x01
    8e32:	89 81       	ldd	r24, Y+1	; 0x01
    8e34:	9a 81       	ldd	r25, Y+2	; 0x02
    8e36:	89 2b       	or	r24, r25
    8e38:	d1 f0       	breq	.+52     	; 0x8e6e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    8e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e3e:	68 e0       	ldi	r22, 0x08	; 8
    8e40:	ec dc       	rcall	.-1576   	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8e42:	8e 83       	std	Y+6, r24	; 0x06
    8e44:	9e 81       	ldd	r25, Y+6	; 0x06
    8e46:	8f 85       	ldd	r24, Y+15	; 0x0f
    8e48:	89 23       	and	r24, r25
    8e4a:	88 23       	and	r24, r24
    8e4c:	79 f4       	brne	.+30     	; 0x8e6c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf6>
    8e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    8e50:	88 2f       	mov	r24, r24
    8e52:	90 e0       	ldi	r25, 0x00	; 0
    8e54:	81 70       	andi	r24, 0x01	; 1
    8e56:	99 27       	eor	r25, r25
    8e58:	89 2b       	or	r24, r25
    8e5a:	11 f0       	breq	.+4      	; 0x8e60 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xea>
    8e5c:	83 e0       	ldi	r24, 0x03	; 3
    8e5e:	b2 c0       	rjmp	.+356    	; 0x8fc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e60:	89 81       	ldd	r24, Y+1	; 0x01
    8e62:	9a 81       	ldd	r25, Y+2	; 0x02
    8e64:	01 97       	sbiw	r24, 0x01	; 1
    8e66:	9a 83       	std	Y+2, r25	; 0x02
    8e68:	89 83       	std	Y+1, r24	; 0x01
    8e6a:	e3 cf       	rjmp	.-58     	; 0x8e32 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    8e6c:	00 00       	nop
    8e6e:	89 81       	ldd	r24, Y+1	; 0x01
    8e70:	9a 81       	ldd	r25, Y+2	; 0x02
    8e72:	89 2b       	or	r24, r25
    8e74:	11 f4       	brne	.+4      	; 0x8e7a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x104>
    8e76:	83 e0       	ldi	r24, 0x03	; 3
    8e78:	a5 c0       	rjmp	.+330    	; 0x8fc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e7e:	6c e0       	ldi	r22, 0x0C	; 12
    8e80:	cc dc       	rcall	.-1640   	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8e82:	8f 83       	std	Y+7, r24	; 0x07
    8e84:	8f 81       	ldd	r24, Y+7	; 0x07
    8e86:	88 2f       	mov	r24, r24
    8e88:	90 e0       	ldi	r25, 0x00	; 0
    8e8a:	83 71       	andi	r24, 0x13	; 19
    8e8c:	99 27       	eor	r25, r25
    8e8e:	89 2b       	or	r24, r25
    8e90:	11 f0       	breq	.+4      	; 0x8e96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x120>
    8e92:	81 e0       	ldi	r24, 0x01	; 1
    8e94:	97 c0       	rjmp	.+302    	; 0x8fc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e96:	1b 82       	std	Y+3, r1	; 0x03
    8e98:	8b 89       	ldd	r24, Y+19	; 0x13
    8e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    8e9c:	89 2b       	or	r24, r25
    8e9e:	71 f1       	breq	.+92     	; 0x8efc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x186>
    8ea0:	8d 89       	ldd	r24, Y+21	; 0x15
    8ea2:	9e 89       	ldd	r25, Y+22	; 0x16
    8ea4:	89 2b       	or	r24, r25
    8ea6:	51 f1       	breq	.+84     	; 0x8efc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x186>
    8ea8:	8c 85       	ldd	r24, Y+12	; 0x0c
    8eaa:	9d 85       	ldd	r25, Y+13	; 0x0d
    8eac:	64 e1       	ldi	r22, 0x14	; 20
    8eae:	b5 dc       	rcall	.-1686   	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8eb0:	88 87       	std	Y+8, r24	; 0x08
    8eb2:	8d 89       	ldd	r24, Y+21	; 0x15
    8eb4:	9e 89       	ldd	r25, Y+22	; 0x16
    8eb6:	fc 01       	movw	r30, r24
    8eb8:	90 81       	ld	r25, Z
    8eba:	88 85       	ldd	r24, Y+8	; 0x08
    8ebc:	98 17       	cp	r25, r24
    8ebe:	10 f4       	brcc	.+4      	; 0x8ec4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
    8ec0:	84 e0       	ldi	r24, 0x04	; 4
    8ec2:	80 c0       	rjmp	.+256    	; 0x8fc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8ec4:	8d 89       	ldd	r24, Y+21	; 0x15
    8ec6:	9e 89       	ldd	r25, Y+22	; 0x16
    8ec8:	28 85       	ldd	r18, Y+8	; 0x08
    8eca:	fc 01       	movw	r30, r24
    8ecc:	20 83       	st	Z, r18
    8ece:	2b 89       	ldd	r18, Y+19	; 0x13
    8ed0:	3c 89       	ldd	r19, Y+20	; 0x14
    8ed2:	8c 85       	ldd	r24, Y+12	; 0x0c
    8ed4:	9d 85       	ldd	r25, Y+13	; 0x0d
    8ed6:	09 8d       	ldd	r16, Y+25	; 0x19
    8ed8:	48 85       	ldd	r20, Y+8	; 0x08
    8eda:	62 e1       	ldi	r22, 0x12	; 18
    8edc:	d9 dc       	rcall	.-1614   	; 0x8890 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    8ede:	8c 85       	ldd	r24, Y+12	; 0x0c
    8ee0:	9d 85       	ldd	r25, Y+13	; 0x0d
    8ee2:	68 e1       	ldi	r22, 0x18	; 24
    8ee4:	9a dc       	rcall	.-1740   	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8ee6:	87 70       	andi	r24, 0x07	; 7
    8ee8:	8b 83       	std	Y+3, r24	; 0x03
    8eea:	8f 89       	ldd	r24, Y+23	; 0x17
    8eec:	98 8d       	ldd	r25, Y+24	; 0x18
    8eee:	89 2b       	or	r24, r25
    8ef0:	29 f0       	breq	.+10     	; 0x8efc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x186>
    8ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    8ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    8ef6:	2b 81       	ldd	r18, Y+3	; 0x03
    8ef8:	fc 01       	movw	r30, r24
    8efa:	20 83       	st	Z, r18
    8efc:	8f 81       	ldd	r24, Y+7	; 0x07
    8efe:	88 2f       	mov	r24, r24
    8f00:	90 e0       	ldi	r25, 0x00	; 0
    8f02:	88 70       	andi	r24, 0x08	; 8
    8f04:	99 27       	eor	r25, r25
    8f06:	89 2b       	or	r24, r25
    8f08:	11 f0       	breq	.+4      	; 0x8f0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x198>
    8f0a:	82 e0       	ldi	r24, 0x02	; 2
    8f0c:	5b c0       	rjmp	.+182    	; 0x8fc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    8f10:	9c 89       	ldd	r25, Y+20	; 0x14
    8f12:	89 2b       	or	r24, r25
    8f14:	09 f4       	brne	.+2      	; 0x8f18 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a2>
    8f16:	55 c0       	rjmp	.+170    	; 0x8fc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8f18:	8d 89       	ldd	r24, Y+21	; 0x15
    8f1a:	9e 89       	ldd	r25, Y+22	; 0x16
    8f1c:	89 2b       	or	r24, r25
    8f1e:	09 f4       	brne	.+2      	; 0x8f22 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ac>
    8f20:	50 c0       	rjmp	.+160    	; 0x8fc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8f22:	8f a1       	ldd	r24, Y+39	; 0x27
    8f24:	88 23       	and	r24, r24
    8f26:	09 f4       	brne	.+2      	; 0x8f2a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b4>
    8f28:	4c c0       	rjmp	.+152    	; 0x8fc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8f2a:	8d 89       	ldd	r24, Y+21	; 0x15
    8f2c:	9e 89       	ldd	r25, Y+22	; 0x16
    8f2e:	fc 01       	movw	r30, r24
    8f30:	80 81       	ld	r24, Z
    8f32:	81 30       	cpi	r24, 0x01	; 1
    8f34:	29 f4       	brne	.+10     	; 0x8f40 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ca>
    8f36:	8b 81       	ldd	r24, Y+3	; 0x03
    8f38:	84 30       	cpi	r24, 0x04	; 4
    8f3a:	11 f4       	brne	.+4      	; 0x8f40 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ca>
    8f3c:	8f ef       	ldi	r24, 0xFF	; 255
    8f3e:	42 c0       	rjmp	.+132    	; 0x8fc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8f40:	8d 89       	ldd	r24, Y+21	; 0x15
    8f42:	9e 89       	ldd	r25, Y+22	; 0x16
    8f44:	fc 01       	movw	r30, r24
    8f46:	80 81       	ld	r24, Z
    8f48:	82 30       	cpi	r24, 0x02	; 2
    8f4a:	18 f0       	brcs	.+6      	; 0x8f52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    8f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    8f4e:	88 23       	and	r24, r24
    8f50:	11 f0       	breq	.+4      	; 0x8f56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1e0>
    8f52:	87 e0       	ldi	r24, 0x07	; 7
    8f54:	37 c0       	rjmp	.+110    	; 0x8fc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8f56:	8d 89       	ldd	r24, Y+21	; 0x15
    8f58:	9e 89       	ldd	r25, Y+22	; 0x16
    8f5a:	fc 01       	movw	r30, r24
    8f5c:	80 81       	ld	r24, Z
    8f5e:	4e ef       	ldi	r20, 0xFE	; 254
    8f60:	48 0f       	add	r20, r24
    8f62:	9e 01       	movw	r18, r28
    8f64:	26 5f       	subi	r18, 0xF6	; 246
    8f66:	3f 4f       	sbci	r19, 0xFF	; 255
    8f68:	6b 89       	ldd	r22, Y+19	; 0x13
    8f6a:	7c 89       	ldd	r23, Y+20	; 0x14
    8f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    8f6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    8f70:	69 dd       	rcall	.-1326   	; 0x8a44 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    8f72:	89 87       	std	Y+9, r24	; 0x09
    8f74:	89 85       	ldd	r24, Y+9	; 0x09
    8f76:	88 23       	and	r24, r24
    8f78:	11 f0       	breq	.+4      	; 0x8f7e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x208>
    8f7a:	89 85       	ldd	r24, Y+9	; 0x09
    8f7c:	23 c0       	rjmp	.+70     	; 0x8fc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8f7e:	8d 89       	ldd	r24, Y+21	; 0x15
    8f80:	9e 89       	ldd	r25, Y+22	; 0x16
    8f82:	fc 01       	movw	r30, r24
    8f84:	80 81       	ld	r24, Z
    8f86:	88 2f       	mov	r24, r24
    8f88:	90 e0       	ldi	r25, 0x00	; 0
    8f8a:	02 97       	sbiw	r24, 0x02	; 2
    8f8c:	2b 89       	ldd	r18, Y+19	; 0x13
    8f8e:	3c 89       	ldd	r19, Y+20	; 0x14
    8f90:	82 0f       	add	r24, r18
    8f92:	93 1f       	adc	r25, r19
    8f94:	fc 01       	movw	r30, r24
    8f96:	90 81       	ld	r25, Z
    8f98:	8a 85       	ldd	r24, Y+10	; 0x0a
    8f9a:	98 17       	cp	r25, r24
    8f9c:	81 f4       	brne	.+32     	; 0x8fbe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    8f9e:	8d 89       	ldd	r24, Y+21	; 0x15
    8fa0:	9e 89       	ldd	r25, Y+22	; 0x16
    8fa2:	fc 01       	movw	r30, r24
    8fa4:	80 81       	ld	r24, Z
    8fa6:	88 2f       	mov	r24, r24
    8fa8:	90 e0       	ldi	r25, 0x00	; 0
    8faa:	01 97       	sbiw	r24, 0x01	; 1
    8fac:	2b 89       	ldd	r18, Y+19	; 0x13
    8fae:	3c 89       	ldd	r19, Y+20	; 0x14
    8fb0:	82 0f       	add	r24, r18
    8fb2:	93 1f       	adc	r25, r19
    8fb4:	fc 01       	movw	r30, r24
    8fb6:	90 81       	ld	r25, Z
    8fb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    8fba:	98 17       	cp	r25, r24
    8fbc:	11 f0       	breq	.+4      	; 0x8fc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8fbe:	87 e0       	ldi	r24, 0x07	; 7
    8fc0:	01 c0       	rjmp	.+2      	; 0x8fc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8fc2:	80 e0       	ldi	r24, 0x00	; 0
    8fc4:	69 96       	adiw	r28, 0x19	; 25
    8fc6:	0f b6       	in	r0, 0x3f	; 63
    8fc8:	f8 94       	cli
    8fca:	de bf       	out	0x3e, r29	; 62
    8fcc:	0f be       	out	0x3f, r0	; 63
    8fce:	cd bf       	out	0x3d, r28	; 61
    8fd0:	df 91       	pop	r29
    8fd2:	cf 91       	pop	r28
    8fd4:	0f 91       	pop	r16
    8fd6:	ff 90       	pop	r15
    8fd8:	ef 90       	pop	r14
    8fda:	df 90       	pop	r13
    8fdc:	cf 90       	pop	r12
    8fde:	bf 90       	pop	r11
    8fe0:	af 90       	pop	r10
    8fe2:	8f 90       	pop	r8
    8fe4:	08 95       	ret

00008fe6 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    8fe6:	cf 93       	push	r28
    8fe8:	df 93       	push	r29
    8fea:	00 d0       	rcall	.+0      	; 0x8fec <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    8fec:	00 d0       	rcall	.+0      	; 0x8fee <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    8fee:	cd b7       	in	r28, 0x3d	; 61
    8ff0:	de b7       	in	r29, 0x3e	; 62
    8ff2:	9a 83       	std	Y+2, r25	; 0x02
    8ff4:	89 83       	std	Y+1, r24	; 0x01
    8ff6:	7c 83       	std	Y+4, r23	; 0x04
    8ff8:	6b 83       	std	Y+3, r22	; 0x03
    8ffa:	5e 83       	std	Y+6, r21	; 0x06
    8ffc:	4d 83       	std	Y+5, r20	; 0x05
    8ffe:	2d 81       	ldd	r18, Y+5	; 0x05
    9000:	3e 81       	ldd	r19, Y+6	; 0x06
    9002:	4b 81       	ldd	r20, Y+3	; 0x03
    9004:	5c 81       	ldd	r21, Y+4	; 0x04
    9006:	89 81       	ldd	r24, Y+1	; 0x01
    9008:	9a 81       	ldd	r25, Y+2	; 0x02
    900a:	66 e2       	ldi	r22, 0x26	; 38
    900c:	09 d0       	rcall	.+18     	; 0x9020 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    900e:	26 96       	adiw	r28, 0x06	; 6
    9010:	0f b6       	in	r0, 0x3f	; 63
    9012:	f8 94       	cli
    9014:	de bf       	out	0x3e, r29	; 62
    9016:	0f be       	out	0x3f, r0	; 63
    9018:	cd bf       	out	0x3d, r28	; 61
    901a:	df 91       	pop	r29
    901c:	cf 91       	pop	r28
    901e:	08 95       	ret

00009020 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    9020:	af 92       	push	r10
    9022:	cf 92       	push	r12
    9024:	ef 92       	push	r14
    9026:	ff 92       	push	r15
    9028:	0f 93       	push	r16
    902a:	1f 93       	push	r17
    902c:	cf 93       	push	r28
    902e:	df 93       	push	r29
    9030:	cd b7       	in	r28, 0x3d	; 61
    9032:	de b7       	in	r29, 0x3e	; 62
    9034:	29 97       	sbiw	r28, 0x09	; 9
    9036:	0f b6       	in	r0, 0x3f	; 63
    9038:	f8 94       	cli
    903a:	de bf       	out	0x3e, r29	; 62
    903c:	0f be       	out	0x3f, r0	; 63
    903e:	cd bf       	out	0x3d, r28	; 61
    9040:	9c 83       	std	Y+4, r25	; 0x04
    9042:	8b 83       	std	Y+3, r24	; 0x03
    9044:	6d 83       	std	Y+5, r22	; 0x05
    9046:	5f 83       	std	Y+7, r21	; 0x07
    9048:	4e 83       	std	Y+6, r20	; 0x06
    904a:	39 87       	std	Y+9, r19	; 0x09
    904c:	28 87       	std	Y+8, r18	; 0x08
    904e:	8e 81       	ldd	r24, Y+6	; 0x06
    9050:	9f 81       	ldd	r25, Y+7	; 0x07
    9052:	89 2b       	or	r24, r25
    9054:	31 f0       	breq	.+12     	; 0x9062 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    9056:	88 85       	ldd	r24, Y+8	; 0x08
    9058:	99 85       	ldd	r25, Y+9	; 0x09
    905a:	fc 01       	movw	r30, r24
    905c:	80 81       	ld	r24, Z
    905e:	82 30       	cpi	r24, 0x02	; 2
    9060:	10 f4       	brcc	.+4      	; 0x9066 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    9062:	84 e0       	ldi	r24, 0x04	; 4
    9064:	2a c0       	rjmp	.+84     	; 0x90ba <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    9066:	8b 81       	ldd	r24, Y+3	; 0x03
    9068:	9c 81       	ldd	r25, Y+4	; 0x04
    906a:	40 e8       	ldi	r20, 0x80	; 128
    906c:	6c e1       	ldi	r22, 0x1C	; 28
    906e:	c6 dc       	rcall	.-1652   	; 0x89fc <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    9070:	87 e0       	ldi	r24, 0x07	; 7
    9072:	8a 83       	std	Y+2, r24	; 0x02
    9074:	fe 01       	movw	r30, r28
    9076:	32 96       	adiw	r30, 0x02	; 2
    9078:	48 85       	ldd	r20, Y+8	; 0x08
    907a:	59 85       	ldd	r21, Y+9	; 0x09
    907c:	2e 81       	ldd	r18, Y+6	; 0x06
    907e:	3f 81       	ldd	r19, Y+7	; 0x07
    9080:	be 01       	movw	r22, r28
    9082:	6b 5f       	subi	r22, 0xFB	; 251
    9084:	7f 4f       	sbci	r23, 0xFF	; 255
    9086:	8b 81       	ldd	r24, Y+3	; 0x03
    9088:	9c 81       	ldd	r25, Y+4	; 0x04
    908a:	a1 2c       	mov	r10, r1
    908c:	c1 2c       	mov	r12, r1
    908e:	7f 01       	movw	r14, r30
    9090:	8a 01       	movw	r16, r20
    9092:	41 e0       	ldi	r20, 0x01	; 1
    9094:	27 de       	rcall	.-946    	; 0x8ce4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    9096:	89 83       	std	Y+1, r24	; 0x01
    9098:	89 81       	ldd	r24, Y+1	; 0x01
    909a:	88 23       	and	r24, r24
    909c:	11 f0       	breq	.+4      	; 0x90a2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    909e:	89 81       	ldd	r24, Y+1	; 0x01
    90a0:	0c c0       	rjmp	.+24     	; 0x90ba <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    90a2:	88 85       	ldd	r24, Y+8	; 0x08
    90a4:	99 85       	ldd	r25, Y+9	; 0x09
    90a6:	fc 01       	movw	r30, r24
    90a8:	80 81       	ld	r24, Z
    90aa:	82 30       	cpi	r24, 0x02	; 2
    90ac:	19 f4       	brne	.+6      	; 0x90b4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    90ae:	8a 81       	ldd	r24, Y+2	; 0x02
    90b0:	88 23       	and	r24, r24
    90b2:	11 f0       	breq	.+4      	; 0x90b8 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    90b4:	81 e0       	ldi	r24, 0x01	; 1
    90b6:	01 c0       	rjmp	.+2      	; 0x90ba <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    90b8:	80 e0       	ldi	r24, 0x00	; 0
    90ba:	29 96       	adiw	r28, 0x09	; 9
    90bc:	0f b6       	in	r0, 0x3f	; 63
    90be:	f8 94       	cli
    90c0:	de bf       	out	0x3e, r29	; 62
    90c2:	0f be       	out	0x3f, r0	; 63
    90c4:	cd bf       	out	0x3d, r28	; 61
    90c6:	df 91       	pop	r29
    90c8:	cf 91       	pop	r28
    90ca:	1f 91       	pop	r17
    90cc:	0f 91       	pop	r16
    90ce:	ff 90       	pop	r15
    90d0:	ef 90       	pop	r14
    90d2:	cf 90       	pop	r12
    90d4:	af 90       	pop	r10
    90d6:	08 95       	ret

000090d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    90d8:	af 92       	push	r10
    90da:	cf 92       	push	r12
    90dc:	ef 92       	push	r14
    90de:	ff 92       	push	r15
    90e0:	0f 93       	push	r16
    90e2:	1f 93       	push	r17
    90e4:	cf 93       	push	r28
    90e6:	df 93       	push	r29
    90e8:	cd b7       	in	r28, 0x3d	; 61
    90ea:	de b7       	in	r29, 0x3e	; 62
    90ec:	a2 97       	sbiw	r28, 0x22	; 34
    90ee:	0f b6       	in	r0, 0x3f	; 63
    90f0:	f8 94       	cli
    90f2:	de bf       	out	0x3e, r29	; 62
    90f4:	0f be       	out	0x3f, r0	; 63
    90f6:	cd bf       	out	0x3d, r28	; 61
    90f8:	9f 8f       	std	Y+31, r25	; 0x1f
    90fa:	8e 8f       	std	Y+30, r24	; 0x1e
    90fc:	79 a3       	std	Y+33, r23	; 0x21
    90fe:	68 a3       	std	Y+32, r22	; 0x20
    9100:	4a a3       	std	Y+34, r20	; 0x22
    9102:	81 e0       	ldi	r24, 0x01	; 1
    9104:	8c 83       	std	Y+4, r24	; 0x04
    9106:	8a a1       	ldd	r24, Y+34	; 0x22
    9108:	81 35       	cpi	r24, 0x51	; 81
    910a:	10 f0       	brcs	.+4      	; 0x9110 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    910c:	86 e0       	ldi	r24, 0x06	; 6
    910e:	31 c2       	rjmp	.+1122   	; 0x9572 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9110:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9112:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9114:	40 e8       	ldi	r20, 0x80	; 128
    9116:	6c e1       	ldi	r22, 0x1C	; 28
    9118:	71 dc       	rcall	.-1822   	; 0x89fc <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    911a:	19 82       	std	Y+1, r1	; 0x01
    911c:	89 81       	ldd	r24, Y+1	; 0x01
    911e:	88 23       	and	r24, r24
    9120:	09 f0       	breq	.+2      	; 0x9124 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    9122:	1c c2       	rjmp	.+1080   	; 0x955c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x484>
    9124:	8c 81       	ldd	r24, Y+4	; 0x04
    9126:	88 2f       	mov	r24, r24
    9128:	90 e0       	ldi	r25, 0x00	; 0
    912a:	82 30       	cpi	r24, 0x02	; 2
    912c:	91 05       	cpc	r25, r1
    912e:	b1 f0       	breq	.+44     	; 0x915c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    9130:	83 30       	cpi	r24, 0x03	; 3
    9132:	91 05       	cpc	r25, r1
    9134:	29 f1       	breq	.+74     	; 0x9180 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    9136:	01 97       	sbiw	r24, 0x01	; 1
    9138:	49 f5       	brne	.+82     	; 0x918c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    913a:	83 e9       	ldi	r24, 0x93	; 147
    913c:	8b 8b       	std	Y+19, r24	; 0x13
    913e:	1f 82       	std	Y+7, r1	; 0x07
    9140:	8a a1       	ldd	r24, Y+34	; 0x22
    9142:	88 23       	and	r24, r24
    9144:	41 f0       	breq	.+16     	; 0x9156 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    9146:	88 a1       	ldd	r24, Y+32	; 0x20
    9148:	99 a1       	ldd	r25, Y+33	; 0x21
    914a:	fc 01       	movw	r30, r24
    914c:	80 81       	ld	r24, Z
    914e:	85 30       	cpi	r24, 0x05	; 5
    9150:	10 f0       	brcs	.+4      	; 0x9156 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    9152:	81 e0       	ldi	r24, 0x01	; 1
    9154:	01 c0       	rjmp	.+2      	; 0x9158 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    9156:	80 e0       	ldi	r24, 0x00	; 0
    9158:	8b 83       	std	Y+3, r24	; 0x03
    915a:	1a c0       	rjmp	.+52     	; 0x9190 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    915c:	85 e9       	ldi	r24, 0x95	; 149
    915e:	8b 8b       	std	Y+19, r24	; 0x13
    9160:	83 e0       	ldi	r24, 0x03	; 3
    9162:	8f 83       	std	Y+7, r24	; 0x07
    9164:	8a a1       	ldd	r24, Y+34	; 0x22
    9166:	88 23       	and	r24, r24
    9168:	41 f0       	breq	.+16     	; 0x917a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    916a:	88 a1       	ldd	r24, Y+32	; 0x20
    916c:	99 a1       	ldd	r25, Y+33	; 0x21
    916e:	fc 01       	movw	r30, r24
    9170:	80 81       	ld	r24, Z
    9172:	88 30       	cpi	r24, 0x08	; 8
    9174:	10 f0       	brcs	.+4      	; 0x917a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    9176:	81 e0       	ldi	r24, 0x01	; 1
    9178:	01 c0       	rjmp	.+2      	; 0x917c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    917a:	80 e0       	ldi	r24, 0x00	; 0
    917c:	8b 83       	std	Y+3, r24	; 0x03
    917e:	08 c0       	rjmp	.+16     	; 0x9190 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    9180:	87 e9       	ldi	r24, 0x97	; 151
    9182:	8b 8b       	std	Y+19, r24	; 0x13
    9184:	86 e0       	ldi	r24, 0x06	; 6
    9186:	8f 83       	std	Y+7, r24	; 0x07
    9188:	1b 82       	std	Y+3, r1	; 0x03
    918a:	02 c0       	rjmp	.+4      	; 0x9190 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    918c:	85 e0       	ldi	r24, 0x05	; 5
    918e:	f1 c1       	rjmp	.+994    	; 0x9572 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9190:	8f 81       	ldd	r24, Y+7	; 0x07
    9192:	88 0f       	add	r24, r24
    9194:	88 0f       	add	r24, r24
    9196:	88 0f       	add	r24, r24
    9198:	9a a1       	ldd	r25, Y+34	; 0x22
    919a:	f9 2f       	mov	r31, r25
    919c:	f8 1b       	sub	r31, r24
    919e:	8f 2f       	mov	r24, r31
    91a0:	88 87       	std	Y+8, r24	; 0x08
    91a2:	88 85       	ldd	r24, Y+8	; 0x08
    91a4:	88 23       	and	r24, r24
    91a6:	0c f4       	brge	.+2      	; 0x91aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    91a8:	18 86       	std	Y+8, r1	; 0x08
    91aa:	82 e0       	ldi	r24, 0x02	; 2
    91ac:	8e 83       	std	Y+6, r24	; 0x06
    91ae:	8b 81       	ldd	r24, Y+3	; 0x03
    91b0:	88 23       	and	r24, r24
    91b2:	71 f0       	breq	.+28     	; 0x91d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    91b4:	8e 81       	ldd	r24, Y+6	; 0x06
    91b6:	91 e0       	ldi	r25, 0x01	; 1
    91b8:	98 0f       	add	r25, r24
    91ba:	9e 83       	std	Y+6, r25	; 0x06
    91bc:	88 2f       	mov	r24, r24
    91be:	90 e0       	ldi	r25, 0x00	; 0
    91c0:	9e 01       	movw	r18, r28
    91c2:	2d 5e       	subi	r18, 0xED	; 237
    91c4:	3f 4f       	sbci	r19, 0xFF	; 255
    91c6:	82 0f       	add	r24, r18
    91c8:	93 1f       	adc	r25, r19
    91ca:	28 e8       	ldi	r18, 0x88	; 136
    91cc:	fc 01       	movw	r30, r24
    91ce:	20 83       	st	Z, r18
    91d0:	88 85       	ldd	r24, Y+8	; 0x08
    91d2:	88 23       	and	r24, r24
    91d4:	0c f4       	brge	.+2      	; 0x91d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    91d6:	89 5f       	subi	r24, 0xF9	; 249
    91d8:	85 95       	asr	r24
    91da:	85 95       	asr	r24
    91dc:	85 95       	asr	r24
    91de:	98 2f       	mov	r25, r24
    91e0:	88 85       	ldd	r24, Y+8	; 0x08
    91e2:	87 70       	andi	r24, 0x07	; 7
    91e4:	88 23       	and	r24, r24
    91e6:	11 f0       	breq	.+4      	; 0x91ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    91e8:	81 e0       	ldi	r24, 0x01	; 1
    91ea:	01 c0       	rjmp	.+2      	; 0x91ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    91ec:	80 e0       	ldi	r24, 0x00	; 0
    91ee:	89 0f       	add	r24, r25
    91f0:	8c 87       	std	Y+12, r24	; 0x0c
    91f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    91f4:	88 23       	and	r24, r24
    91f6:	99 f1       	breq	.+102    	; 0x925e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    91f8:	8b 81       	ldd	r24, Y+3	; 0x03
    91fa:	88 23       	and	r24, r24
    91fc:	11 f0       	breq	.+4      	; 0x9202 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    91fe:	83 e0       	ldi	r24, 0x03	; 3
    9200:	01 c0       	rjmp	.+2      	; 0x9204 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    9202:	84 e0       	ldi	r24, 0x04	; 4
    9204:	8e 87       	std	Y+14, r24	; 0x0e
    9206:	9c 85       	ldd	r25, Y+12	; 0x0c
    9208:	8e 85       	ldd	r24, Y+14	; 0x0e
    920a:	89 17       	cp	r24, r25
    920c:	10 f4       	brcc	.+4      	; 0x9212 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    920e:	8e 85       	ldd	r24, Y+14	; 0x0e
    9210:	8c 87       	std	Y+12, r24	; 0x0c
    9212:	1d 82       	std	Y+5, r1	; 0x05
    9214:	9d 81       	ldd	r25, Y+5	; 0x05
    9216:	8c 85       	ldd	r24, Y+12	; 0x0c
    9218:	98 17       	cp	r25, r24
    921a:	08 f5       	brcc	.+66     	; 0x925e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    921c:	8e 81       	ldd	r24, Y+6	; 0x06
    921e:	91 e0       	ldi	r25, 0x01	; 1
    9220:	98 0f       	add	r25, r24
    9222:	9e 83       	std	Y+6, r25	; 0x06
    9224:	88 2f       	mov	r24, r24
    9226:	90 e0       	ldi	r25, 0x00	; 0
    9228:	2f 81       	ldd	r18, Y+7	; 0x07
    922a:	42 2f       	mov	r20, r18
    922c:	50 e0       	ldi	r21, 0x00	; 0
    922e:	2d 81       	ldd	r18, Y+5	; 0x05
    9230:	22 2f       	mov	r18, r18
    9232:	30 e0       	ldi	r19, 0x00	; 0
    9234:	24 0f       	add	r18, r20
    9236:	35 1f       	adc	r19, r21
    9238:	48 a1       	ldd	r20, Y+32	; 0x20
    923a:	59 a1       	ldd	r21, Y+33	; 0x21
    923c:	24 0f       	add	r18, r20
    923e:	35 1f       	adc	r19, r21
    9240:	2f 5f       	subi	r18, 0xFF	; 255
    9242:	3f 4f       	sbci	r19, 0xFF	; 255
    9244:	f9 01       	movw	r30, r18
    9246:	40 81       	ld	r20, Z
    9248:	9e 01       	movw	r18, r28
    924a:	2d 5e       	subi	r18, 0xED	; 237
    924c:	3f 4f       	sbci	r19, 0xFF	; 255
    924e:	82 0f       	add	r24, r18
    9250:	93 1f       	adc	r25, r19
    9252:	fc 01       	movw	r30, r24
    9254:	40 83       	st	Z, r20
    9256:	8d 81       	ldd	r24, Y+5	; 0x05
    9258:	8f 5f       	subi	r24, 0xFF	; 255
    925a:	8d 83       	std	Y+5, r24	; 0x05
    925c:	db cf       	rjmp	.-74     	; 0x9214 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    925e:	8b 81       	ldd	r24, Y+3	; 0x03
    9260:	88 23       	and	r24, r24
    9262:	19 f0       	breq	.+6      	; 0x926a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    9264:	88 85       	ldd	r24, Y+8	; 0x08
    9266:	88 5f       	subi	r24, 0xF8	; 248
    9268:	88 87       	std	Y+8, r24	; 0x08
    926a:	1a 82       	std	Y+2, r1	; 0x02
    926c:	8a 81       	ldd	r24, Y+2	; 0x02
    926e:	88 23       	and	r24, r24
    9270:	09 f0       	breq	.+2      	; 0x9274 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    9272:	fd c0       	rjmp	.+506    	; 0x946e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x396>
    9274:	88 85       	ldd	r24, Y+8	; 0x08
    9276:	80 32       	cpi	r24, 0x20	; 32
    9278:	3c f1       	brlt	.+78     	; 0x92c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    927a:	80 e7       	ldi	r24, 0x70	; 112
    927c:	8c 8b       	std	Y+20, r24	; 0x14
    927e:	9d 89       	ldd	r25, Y+21	; 0x15
    9280:	8e 89       	ldd	r24, Y+22	; 0x16
    9282:	98 27       	eor	r25, r24
    9284:	8f 89       	ldd	r24, Y+23	; 0x17
    9286:	98 27       	eor	r25, r24
    9288:	88 8d       	ldd	r24, Y+24	; 0x18
    928a:	89 27       	eor	r24, r25
    928c:	89 8f       	std	Y+25, r24	; 0x19
    928e:	ce 01       	movw	r24, r28
    9290:	43 96       	adiw	r24, 0x13	; 19
    9292:	9c 01       	movw	r18, r24
    9294:	29 5f       	subi	r18, 0xF9	; 249
    9296:	3f 4f       	sbci	r19, 0xFF	; 255
    9298:	be 01       	movw	r22, r28
    929a:	6d 5e       	subi	r22, 0xED	; 237
    929c:	7f 4f       	sbci	r23, 0xFF	; 255
    929e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    92a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    92a2:	47 e0       	ldi	r20, 0x07	; 7
    92a4:	cf db       	rcall	.-2146   	; 0x8a44 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    92a6:	8f 87       	std	Y+15, r24	; 0x0f
    92a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    92aa:	88 23       	and	r24, r24
    92ac:	11 f0       	breq	.+4      	; 0x92b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    92ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    92b0:	60 c1       	rjmp	.+704    	; 0x9572 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    92b2:	1c 8e       	std	Y+28, r1	; 0x1c
    92b4:	89 e0       	ldi	r24, 0x09	; 9
    92b6:	89 87       	std	Y+9, r24	; 0x09
    92b8:	ce 01       	movw	r24, r28
    92ba:	43 96       	adiw	r24, 0x13	; 19
    92bc:	06 96       	adiw	r24, 0x06	; 6
    92be:	9b 87       	std	Y+11, r25	; 0x0b
    92c0:	8a 87       	std	Y+10, r24	; 0x0a
    92c2:	83 e0       	ldi	r24, 0x03	; 3
    92c4:	8d 8f       	std	Y+29, r24	; 0x1d
    92c6:	33 c0       	rjmp	.+102    	; 0x932e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    92c8:	88 85       	ldd	r24, Y+8	; 0x08
    92ca:	87 78       	andi	r24, 0x87	; 135
    92cc:	88 23       	and	r24, r24
    92ce:	1c f4       	brge	.+6      	; 0x92d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    92d0:	81 50       	subi	r24, 0x01	; 1
    92d2:	88 6f       	ori	r24, 0xF8	; 248
    92d4:	8f 5f       	subi	r24, 0xFF	; 255
    92d6:	8c 8f       	std	Y+28, r24	; 0x1c
    92d8:	88 85       	ldd	r24, Y+8	; 0x08
    92da:	88 23       	and	r24, r24
    92dc:	0c f4       	brge	.+2      	; 0x92e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    92de:	89 5f       	subi	r24, 0xF9	; 249
    92e0:	85 95       	asr	r24
    92e2:	85 95       	asr	r24
    92e4:	85 95       	asr	r24
    92e6:	8d 83       	std	Y+5, r24	; 0x05
    92e8:	8d 81       	ldd	r24, Y+5	; 0x05
    92ea:	8e 5f       	subi	r24, 0xFE	; 254
    92ec:	8e 83       	std	Y+6, r24	; 0x06
    92ee:	8e 81       	ldd	r24, Y+6	; 0x06
    92f0:	98 2f       	mov	r25, r24
    92f2:	92 95       	swap	r25
    92f4:	90 7f       	andi	r25, 0xF0	; 240
    92f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    92f8:	89 0f       	add	r24, r25
    92fa:	8c 8b       	std	Y+20, r24	; 0x14
    92fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    92fe:	88 23       	and	r24, r24
    9300:	11 f0       	breq	.+4      	; 0x9306 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    9302:	81 e0       	ldi	r24, 0x01	; 1
    9304:	01 c0       	rjmp	.+2      	; 0x9308 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    9306:	80 e0       	ldi	r24, 0x00	; 0
    9308:	9e 81       	ldd	r25, Y+6	; 0x06
    930a:	89 0f       	add	r24, r25
    930c:	89 87       	std	Y+9, r24	; 0x09
    930e:	8e 81       	ldd	r24, Y+6	; 0x06
    9310:	88 2f       	mov	r24, r24
    9312:	90 e0       	ldi	r25, 0x00	; 0
    9314:	9e 01       	movw	r18, r28
    9316:	2d 5e       	subi	r18, 0xED	; 237
    9318:	3f 4f       	sbci	r19, 0xFF	; 255
    931a:	82 0f       	add	r24, r18
    931c:	93 1f       	adc	r25, r19
    931e:	9b 87       	std	Y+11, r25	; 0x0b
    9320:	8a 87       	std	Y+10, r24	; 0x0a
    9322:	99 e0       	ldi	r25, 0x09	; 9
    9324:	8e 81       	ldd	r24, Y+6	; 0x06
    9326:	f9 2f       	mov	r31, r25
    9328:	f8 1b       	sub	r31, r24
    932a:	8f 2f       	mov	r24, r31
    932c:	8d 8f       	std	Y+29, r24	; 0x1d
    932e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9330:	88 8b       	std	Y+16, r24	; 0x10
    9332:	88 89       	ldd	r24, Y+16	; 0x10
    9334:	98 2f       	mov	r25, r24
    9336:	92 95       	swap	r25
    9338:	90 7f       	andi	r25, 0xF0	; 240
    933a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    933c:	29 2f       	mov	r18, r25
    933e:	28 0f       	add	r18, r24
    9340:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9342:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9344:	42 2f       	mov	r20, r18
    9346:	6a e1       	ldi	r22, 0x1A	; 26
    9348:	dd d9       	rcall	.-3142   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    934a:	fe 01       	movw	r30, r28
    934c:	7c 96       	adiw	r30, 0x1c	; 28
    934e:	ae 01       	movw	r20, r28
    9350:	43 5e       	subi	r20, 0xE3	; 227
    9352:	5f 4f       	sbci	r21, 0xFF	; 255
    9354:	2a 85       	ldd	r18, Y+10	; 0x0a
    9356:	3b 85       	ldd	r19, Y+11	; 0x0b
    9358:	be 01       	movw	r22, r28
    935a:	6d 5e       	subi	r22, 0xED	; 237
    935c:	7f 4f       	sbci	r23, 0xFF	; 255
    935e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9360:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9362:	a1 2c       	mov	r10, r1
    9364:	c8 88       	ldd	r12, Y+16	; 0x10
    9366:	7f 01       	movw	r14, r30
    9368:	8a 01       	movw	r16, r20
    936a:	49 85       	ldd	r20, Y+9	; 0x09
    936c:	bb dc       	rcall	.-1674   	; 0x8ce4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    936e:	8f 87       	std	Y+15, r24	; 0x0f
    9370:	8f 85       	ldd	r24, Y+15	; 0x0f
    9372:	82 30       	cpi	r24, 0x02	; 2
    9374:	09 f0       	breq	.+2      	; 0x9378 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    9376:	6d c0       	rjmp	.+218    	; 0x9452 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x37a>
    9378:	8e 8d       	ldd	r24, Y+30	; 0x1e
    937a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    937c:	6c e1       	ldi	r22, 0x1C	; 28
    937e:	4d da       	rcall	.-2918   	; 0x881a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    9380:	89 8b       	std	Y+17, r24	; 0x11
    9382:	89 89       	ldd	r24, Y+17	; 0x11
    9384:	88 2f       	mov	r24, r24
    9386:	90 e0       	ldi	r25, 0x00	; 0
    9388:	80 72       	andi	r24, 0x20	; 32
    938a:	99 27       	eor	r25, r25
    938c:	89 2b       	or	r24, r25
    938e:	11 f0       	breq	.+4      	; 0x9394 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    9390:	82 e0       	ldi	r24, 0x02	; 2
    9392:	ef c0       	rjmp	.+478    	; 0x9572 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9394:	89 89       	ldd	r24, Y+17	; 0x11
    9396:	8f 71       	andi	r24, 0x1F	; 31
    9398:	8d 87       	std	Y+13, r24	; 0x0d
    939a:	8d 85       	ldd	r24, Y+13	; 0x0d
    939c:	88 23       	and	r24, r24
    939e:	11 f4       	brne	.+4      	; 0x93a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    93a0:	80 e2       	ldi	r24, 0x20	; 32
    93a2:	8d 87       	std	Y+13, r24	; 0x0d
    93a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    93a6:	28 2f       	mov	r18, r24
    93a8:	30 e0       	ldi	r19, 0x00	; 0
    93aa:	88 85       	ldd	r24, Y+8	; 0x08
    93ac:	08 2e       	mov	r0, r24
    93ae:	00 0c       	add	r0, r0
    93b0:	99 0b       	sbc	r25, r25
    93b2:	82 17       	cp	r24, r18
    93b4:	93 07       	cpc	r25, r19
    93b6:	14 f0       	brlt	.+4      	; 0x93bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    93b8:	85 e0       	ldi	r24, 0x05	; 5
    93ba:	db c0       	rjmp	.+438    	; 0x9572 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    93bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    93be:	88 87       	std	Y+8, r24	; 0x08
    93c0:	88 85       	ldd	r24, Y+8	; 0x08
    93c2:	87 78       	andi	r24, 0x87	; 135
    93c4:	88 23       	and	r24, r24
    93c6:	1c f4       	brge	.+6      	; 0x93ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2f6>
    93c8:	81 50       	subi	r24, 0x01	; 1
    93ca:	88 6f       	ori	r24, 0xF8	; 248
    93cc:	8f 5f       	subi	r24, 0xFF	; 255
    93ce:	8d 83       	std	Y+5, r24	; 0x05
    93d0:	88 85       	ldd	r24, Y+8	; 0x08
    93d2:	08 2e       	mov	r0, r24
    93d4:	00 0c       	add	r0, r0
    93d6:	99 0b       	sbc	r25, r25
    93d8:	01 97       	sbiw	r24, 0x01	; 1
    93da:	87 70       	andi	r24, 0x07	; 7
    93dc:	90 78       	andi	r25, 0x80	; 128
    93de:	99 23       	and	r25, r25
    93e0:	24 f4       	brge	.+8      	; 0x93ea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x312>
    93e2:	01 97       	sbiw	r24, 0x01	; 1
    93e4:	88 6f       	ori	r24, 0xF8	; 248
    93e6:	9f 6f       	ori	r25, 0xFF	; 255
    93e8:	01 96       	adiw	r24, 0x01	; 1
    93ea:	8a 8b       	std	Y+18, r24	; 0x12
    93ec:	88 85       	ldd	r24, Y+8	; 0x08
    93ee:	88 23       	and	r24, r24
    93f0:	0c f4       	brge	.+2      	; 0x93f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31c>
    93f2:	89 5f       	subi	r24, 0xF9	; 249
    93f4:	85 95       	asr	r24
    93f6:	85 95       	asr	r24
    93f8:	85 95       	asr	r24
    93fa:	98 2f       	mov	r25, r24
    93fc:	8d 81       	ldd	r24, Y+5	; 0x05
    93fe:	88 23       	and	r24, r24
    9400:	11 f0       	breq	.+4      	; 0x9406 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32e>
    9402:	81 e0       	ldi	r24, 0x01	; 1
    9404:	01 c0       	rjmp	.+2      	; 0x9408 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x330>
    9406:	80 e0       	ldi	r24, 0x00	; 0
    9408:	89 0f       	add	r24, r25
    940a:	8f 5f       	subi	r24, 0xFF	; 255
    940c:	8e 83       	std	Y+6, r24	; 0x06
    940e:	8e 81       	ldd	r24, Y+6	; 0x06
    9410:	88 2f       	mov	r24, r24
    9412:	90 e0       	ldi	r25, 0x00	; 0
    9414:	2e 81       	ldd	r18, Y+6	; 0x06
    9416:	22 2f       	mov	r18, r18
    9418:	30 e0       	ldi	r19, 0x00	; 0
    941a:	ae 01       	movw	r20, r28
    941c:	4d 5e       	subi	r20, 0xED	; 237
    941e:	5f 4f       	sbci	r21, 0xFF	; 255
    9420:	24 0f       	add	r18, r20
    9422:	35 1f       	adc	r19, r21
    9424:	f9 01       	movw	r30, r18
    9426:	20 81       	ld	r18, Z
    9428:	62 2f       	mov	r22, r18
    942a:	2a 89       	ldd	r18, Y+18	; 0x12
    942c:	42 2f       	mov	r20, r18
    942e:	50 e0       	ldi	r21, 0x00	; 0
    9430:	21 e0       	ldi	r18, 0x01	; 1
    9432:	30 e0       	ldi	r19, 0x00	; 0
    9434:	02 c0       	rjmp	.+4      	; 0x943a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x362>
    9436:	22 0f       	add	r18, r18
    9438:	33 1f       	adc	r19, r19
    943a:	4a 95       	dec	r20
    943c:	e2 f7       	brpl	.-8      	; 0x9436 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x35e>
    943e:	26 2b       	or	r18, r22
    9440:	42 2f       	mov	r20, r18
    9442:	9e 01       	movw	r18, r28
    9444:	2d 5e       	subi	r18, 0xED	; 237
    9446:	3f 4f       	sbci	r19, 0xFF	; 255
    9448:	82 0f       	add	r24, r18
    944a:	93 1f       	adc	r25, r19
    944c:	fc 01       	movw	r30, r24
    944e:	40 83       	st	Z, r20
    9450:	0d cf       	rjmp	.-486    	; 0x926c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    9452:	8f 85       	ldd	r24, Y+15	; 0x0f
    9454:	88 23       	and	r24, r24
    9456:	11 f0       	breq	.+4      	; 0x945c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x384>
    9458:	8f 85       	ldd	r24, Y+15	; 0x0f
    945a:	8b c0       	rjmp	.+278    	; 0x9572 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    945c:	88 85       	ldd	r24, Y+8	; 0x08
    945e:	80 32       	cpi	r24, 0x20	; 32
    9460:	1c f0       	brlt	.+6      	; 0x9468 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    9462:	81 e0       	ldi	r24, 0x01	; 1
    9464:	8a 83       	std	Y+2, r24	; 0x02
    9466:	02 cf       	rjmp	.-508    	; 0x926c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    9468:	80 e2       	ldi	r24, 0x20	; 32
    946a:	88 87       	std	Y+8, r24	; 0x08
    946c:	ff ce       	rjmp	.-514    	; 0x926c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    946e:	8d 89       	ldd	r24, Y+21	; 0x15
    9470:	88 38       	cpi	r24, 0x88	; 136
    9472:	11 f4       	brne	.+4      	; 0x9478 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    9474:	83 e0       	ldi	r24, 0x03	; 3
    9476:	01 c0       	rjmp	.+2      	; 0x947a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a2>
    9478:	82 e0       	ldi	r24, 0x02	; 2
    947a:	8e 83       	std	Y+6, r24	; 0x06
    947c:	8d 89       	ldd	r24, Y+21	; 0x15
    947e:	88 38       	cpi	r24, 0x88	; 136
    9480:	11 f4       	brne	.+4      	; 0x9486 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ae>
    9482:	83 e0       	ldi	r24, 0x03	; 3
    9484:	01 c0       	rjmp	.+2      	; 0x9488 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3b0>
    9486:	84 e0       	ldi	r24, 0x04	; 4
    9488:	8c 87       	std	Y+12, r24	; 0x0c
    948a:	1d 82       	std	Y+5, r1	; 0x05
    948c:	9d 81       	ldd	r25, Y+5	; 0x05
    948e:	8c 85       	ldd	r24, Y+12	; 0x0c
    9490:	98 17       	cp	r25, r24
    9492:	00 f5       	brcc	.+64     	; 0x94d4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    9494:	8f 81       	ldd	r24, Y+7	; 0x07
    9496:	28 2f       	mov	r18, r24
    9498:	30 e0       	ldi	r19, 0x00	; 0
    949a:	8d 81       	ldd	r24, Y+5	; 0x05
    949c:	88 2f       	mov	r24, r24
    949e:	90 e0       	ldi	r25, 0x00	; 0
    94a0:	82 0f       	add	r24, r18
    94a2:	93 1f       	adc	r25, r19
    94a4:	2e 81       	ldd	r18, Y+6	; 0x06
    94a6:	31 e0       	ldi	r19, 0x01	; 1
    94a8:	32 0f       	add	r19, r18
    94aa:	3e 83       	std	Y+6, r19	; 0x06
    94ac:	22 2f       	mov	r18, r18
    94ae:	30 e0       	ldi	r19, 0x00	; 0
    94b0:	ae 01       	movw	r20, r28
    94b2:	4d 5e       	subi	r20, 0xED	; 237
    94b4:	5f 4f       	sbci	r21, 0xFF	; 255
    94b6:	24 0f       	add	r18, r20
    94b8:	35 1f       	adc	r19, r21
    94ba:	f9 01       	movw	r30, r18
    94bc:	40 81       	ld	r20, Z
    94be:	28 a1       	ldd	r18, Y+32	; 0x20
    94c0:	39 a1       	ldd	r19, Y+33	; 0x21
    94c2:	82 0f       	add	r24, r18
    94c4:	93 1f       	adc	r25, r19
    94c6:	01 96       	adiw	r24, 0x01	; 1
    94c8:	fc 01       	movw	r30, r24
    94ca:	40 83       	st	Z, r20
    94cc:	8d 81       	ldd	r24, Y+5	; 0x05
    94ce:	8f 5f       	subi	r24, 0xFF	; 255
    94d0:	8d 83       	std	Y+5, r24	; 0x05
    94d2:	dc cf       	rjmp	.-72     	; 0x948c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3b4>
    94d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    94d6:	83 30       	cpi	r24, 0x03	; 3
    94d8:	19 f4       	brne	.+6      	; 0x94e0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x408>
    94da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    94dc:	88 23       	and	r24, r24
    94de:	11 f0       	breq	.+4      	; 0x94e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x40c>
    94e0:	81 e0       	ldi	r24, 0x01	; 1
    94e2:	47 c0       	rjmp	.+142    	; 0x9572 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    94e4:	ce 01       	movw	r24, r28
    94e6:	43 96       	adiw	r24, 0x13	; 19
    94e8:	9c 01       	movw	r18, r24
    94ea:	2e 5f       	subi	r18, 0xFE	; 254
    94ec:	3f 4f       	sbci	r19, 0xFF	; 255
    94ee:	6a 85       	ldd	r22, Y+10	; 0x0a
    94f0:	7b 85       	ldd	r23, Y+11	; 0x0b
    94f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    94f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    94f6:	41 e0       	ldi	r20, 0x01	; 1
    94f8:	a5 da       	rcall	.-2742   	; 0x8a44 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    94fa:	8f 87       	std	Y+15, r24	; 0x0f
    94fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    94fe:	88 23       	and	r24, r24
    9500:	11 f0       	breq	.+4      	; 0x9506 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x42e>
    9502:	8f 85       	ldd	r24, Y+15	; 0x0f
    9504:	36 c0       	rjmp	.+108    	; 0x9572 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9506:	2d 89       	ldd	r18, Y+21	; 0x15
    9508:	8a 85       	ldd	r24, Y+10	; 0x0a
    950a:	9b 85       	ldd	r25, Y+11	; 0x0b
    950c:	01 96       	adiw	r24, 0x01	; 1
    950e:	fc 01       	movw	r30, r24
    9510:	80 81       	ld	r24, Z
    9512:	28 17       	cp	r18, r24
    9514:	41 f4       	brne	.+16     	; 0x9526 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44e>
    9516:	2e 89       	ldd	r18, Y+22	; 0x16
    9518:	8a 85       	ldd	r24, Y+10	; 0x0a
    951a:	9b 85       	ldd	r25, Y+11	; 0x0b
    951c:	02 96       	adiw	r24, 0x02	; 2
    951e:	fc 01       	movw	r30, r24
    9520:	80 81       	ld	r24, Z
    9522:	28 17       	cp	r18, r24
    9524:	11 f0       	breq	.+4      	; 0x952a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x452>
    9526:	87 e0       	ldi	r24, 0x07	; 7
    9528:	24 c0       	rjmp	.+72     	; 0x9572 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    952a:	8a 85       	ldd	r24, Y+10	; 0x0a
    952c:	9b 85       	ldd	r25, Y+11	; 0x0b
    952e:	fc 01       	movw	r30, r24
    9530:	80 81       	ld	r24, Z
    9532:	88 2f       	mov	r24, r24
    9534:	90 e0       	ldi	r25, 0x00	; 0
    9536:	84 70       	andi	r24, 0x04	; 4
    9538:	99 27       	eor	r25, r25
    953a:	89 2b       	or	r24, r25
    953c:	21 f0       	breq	.+8      	; 0x9546 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x46e>
    953e:	8c 81       	ldd	r24, Y+4	; 0x04
    9540:	8f 5f       	subi	r24, 0xFF	; 255
    9542:	8c 83       	std	Y+4, r24	; 0x04
    9544:	eb cd       	rjmp	.-1066   	; 0x911c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    9546:	81 e0       	ldi	r24, 0x01	; 1
    9548:	89 83       	std	Y+1, r24	; 0x01
    954a:	8a 85       	ldd	r24, Y+10	; 0x0a
    954c:	9b 85       	ldd	r25, Y+11	; 0x0b
    954e:	fc 01       	movw	r30, r24
    9550:	20 81       	ld	r18, Z
    9552:	88 a1       	ldd	r24, Y+32	; 0x20
    9554:	99 a1       	ldd	r25, Y+33	; 0x21
    9556:	fc 01       	movw	r30, r24
    9558:	23 87       	std	Z+11, r18	; 0x0b
    955a:	e0 cd       	rjmp	.-1088   	; 0x911c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    955c:	9c 81       	ldd	r25, Y+4	; 0x04
    955e:	89 2f       	mov	r24, r25
    9560:	88 0f       	add	r24, r24
    9562:	89 0f       	add	r24, r25
    9564:	21 e0       	ldi	r18, 0x01	; 1
    9566:	28 0f       	add	r18, r24
    9568:	88 a1       	ldd	r24, Y+32	; 0x20
    956a:	99 a1       	ldd	r25, Y+33	; 0x21
    956c:	fc 01       	movw	r30, r24
    956e:	20 83       	st	Z, r18
    9570:	80 e0       	ldi	r24, 0x00	; 0
    9572:	a2 96       	adiw	r28, 0x22	; 34
    9574:	0f b6       	in	r0, 0x3f	; 63
    9576:	f8 94       	cli
    9578:	de bf       	out	0x3e, r29	; 62
    957a:	0f be       	out	0x3f, r0	; 63
    957c:	cd bf       	out	0x3d, r28	; 61
    957e:	df 91       	pop	r29
    9580:	cf 91       	pop	r28
    9582:	1f 91       	pop	r17
    9584:	0f 91       	pop	r16
    9586:	ff 90       	pop	r15
    9588:	ef 90       	pop	r14
    958a:	cf 90       	pop	r12
    958c:	af 90       	pop	r10
    958e:	08 95       	ret

00009590 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    9590:	cf 93       	push	r28
    9592:	df 93       	push	r29
    9594:	00 d0       	rcall	.+0      	; 0x9596 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    9596:	00 d0       	rcall	.+0      	; 0x9598 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    9598:	cd b7       	in	r28, 0x3d	; 61
    959a:	de b7       	in	r29, 0x3e	; 62
    959c:	9e 83       	std	Y+6, r25	; 0x06
    959e:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    95a0:	82 e0       	ldi	r24, 0x02	; 2
    95a2:	8c 83       	std	Y+4, r24	; 0x04

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
    95a4:	8d 81       	ldd	r24, Y+5	; 0x05
    95a6:	9e 81       	ldd	r25, Y+6	; 0x06
    95a8:	40 e0       	ldi	r20, 0x00	; 0
    95aa:	64 e2       	ldi	r22, 0x24	; 36
    95ac:	ab d8       	rcall	.-3754   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
    95ae:	8d 81       	ldd	r24, Y+5	; 0x05
    95b0:	9e 81       	ldd	r25, Y+6	; 0x06
    95b2:	40 e0       	ldi	r20, 0x00	; 0
    95b4:	66 e2       	ldi	r22, 0x26	; 38
    95b6:	a6 d8       	rcall	.-3764   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
    95b8:	8d 81       	ldd	r24, Y+5	; 0x05
    95ba:	9e 81       	ldd	r25, Y+6	; 0x06
    95bc:	46 e2       	ldi	r20, 0x26	; 38
    95be:	68 e4       	ldi	r22, 0x48	; 72
    95c0:	a1 d8       	rcall	.-3774   	; 0x8704 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    95c2:	ae 01       	movw	r20, r28
    95c4:	4c 5f       	subi	r20, 0xFC	; 252
    95c6:	5f 4f       	sbci	r21, 0xFF	; 255
    95c8:	9e 01       	movw	r18, r28
    95ca:	2e 5f       	subi	r18, 0xFE	; 254
    95cc:	3f 4f       	sbci	r19, 0xFF	; 255
    95ce:	8d 81       	ldd	r24, Y+5	; 0x05
    95d0:	9e 81       	ldd	r25, Y+6	; 0x06
    95d2:	b9 01       	movw	r22, r18
    95d4:	08 dd       	rcall	.-1520   	; 0x8fe6 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    95d6:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    95d8:	89 81       	ldd	r24, Y+1	; 0x01
    95da:	88 23       	and	r24, r24
    95dc:	19 f0       	breq	.+6      	; 0x95e4 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    95de:	89 81       	ldd	r24, Y+1	; 0x01
    95e0:	82 30       	cpi	r24, 0x02	; 2
    95e2:	11 f4       	brne	.+4      	; 0x95e8 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x58>
    95e4:	81 e0       	ldi	r24, 0x01	; 1
    95e6:	01 c0       	rjmp	.+2      	; 0x95ea <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x5a>
    95e8:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    95ea:	26 96       	adiw	r28, 0x06	; 6
    95ec:	0f b6       	in	r0, 0x3f	; 63
    95ee:	f8 94       	cli
    95f0:	de bf       	out	0x3e, r29	; 62
    95f2:	0f be       	out	0x3f, r0	; 63
    95f4:	cd bf       	out	0x3d, r28	; 61
    95f6:	df 91       	pop	r29
    95f8:	cf 91       	pop	r28
    95fa:	08 95       	ret

000095fc <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    95fc:	cf 93       	push	r28
    95fe:	df 93       	push	r29
    9600:	00 d0       	rcall	.+0      	; 0x9602 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    9602:	cd b7       	in	r28, 0x3d	; 61
    9604:	de b7       	in	r29, 0x3e	; 62
    9606:	9b 83       	std	Y+3, r25	; 0x03
    9608:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    960a:	8a 81       	ldd	r24, Y+2	; 0x02
    960c:	9b 81       	ldd	r25, Y+3	; 0x03
    960e:	fc 01       	movw	r30, r24
    9610:	80 81       	ld	r24, Z
    9612:	91 81       	ldd	r25, Z+1	; 0x01
    9614:	fc 01       	movw	r30, r24
    9616:	20 81       	ld	r18, Z
    9618:	31 81       	ldd	r19, Z+1	; 0x01
    961a:	8a 81       	ldd	r24, Y+2	; 0x02
    961c:	9b 81       	ldd	r25, Y+3	; 0x03
    961e:	bc 01       	movw	r22, r24
    9620:	6e 5f       	subi	r22, 0xFE	; 254
    9622:	7f 4f       	sbci	r23, 0xFF	; 255
    9624:	8a 81       	ldd	r24, Y+2	; 0x02
    9626:	9b 81       	ldd	r25, Y+3	; 0x03
    9628:	40 e0       	ldi	r20, 0x00	; 0
    962a:	f9 01       	movw	r30, r18
    962c:	19 95       	eicall
    962e:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    9630:	81 e0       	ldi	r24, 0x01	; 1
    9632:	99 81       	ldd	r25, Y+1	; 0x01
    9634:	99 23       	and	r25, r25
    9636:	09 f0       	breq	.+2      	; 0x963a <_ZN7MFRC52219PICC_ReadCardSerialEv+0x3e>
    9638:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    963a:	0f 90       	pop	r0
    963c:	0f 90       	pop	r0
    963e:	0f 90       	pop	r0
    9640:	df 91       	pop	r29
    9642:	cf 91       	pop	r28
    9644:	08 95       	ret

00009646 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    9646:	cf 93       	push	r28
    9648:	df 93       	push	r29
    964a:	00 d0       	rcall	.+0      	; 0x964c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    964c:	1f 92       	push	r1
    964e:	1f 92       	push	r1
    9650:	cd b7       	in	r28, 0x3d	; 61
    9652:	de b7       	in	r29, 0x3e	; 62
    9654:	89 83       	std	Y+1, r24	; 0x01
    9656:	7b 83       	std	Y+3, r23	; 0x03
    9658:	6a 83       	std	Y+2, r22	; 0x02
    965a:	5d 83       	std	Y+5, r21	; 0x05
    965c:	4c 83       	std	Y+4, r20	; 0x04
    965e:	89 81       	ldd	r24, Y+1	; 0x01
    9660:	88 2f       	mov	r24, r24
    9662:	90 e0       	ldi	r25, 0x00	; 0
    9664:	8a 50       	subi	r24, 0x0A	; 10
    9666:	9b 4f       	sbci	r25, 0xFB	; 251
    9668:	fc 01       	movw	r30, r24
    966a:	80 81       	ld	r24, Z
    966c:	88 1f       	adc	r24, r24
    966e:	88 27       	eor	r24, r24
    9670:	88 1f       	adc	r24, r24
    9672:	88 23       	and	r24, r24
    9674:	31 f0       	breq	.+12     	; 0x9682 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    9676:	8a 81       	ldd	r24, Y+2	; 0x02
    9678:	9b 81       	ldd	r25, Y+3	; 0x03
    967a:	fc 01       	movw	r30, r24
    967c:	11 82       	std	Z+1, r1	; 0x01
    967e:	10 82       	st	Z, r1
    9680:	72 c0       	rjmp	.+228    	; 0x9766 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    9682:	89 81       	ldd	r24, Y+1	; 0x01
    9684:	28 2f       	mov	r18, r24
    9686:	30 e0       	ldi	r19, 0x00	; 0
    9688:	c9 01       	movw	r24, r18
    968a:	88 0f       	add	r24, r24
    968c:	99 1f       	adc	r25, r25
    968e:	82 0f       	add	r24, r18
    9690:	93 1f       	adc	r25, r19
    9692:	88 0f       	add	r24, r24
    9694:	99 1f       	adc	r25, r25
    9696:	88 0f       	add	r24, r24
    9698:	99 1f       	adc	r25, r25
    969a:	9c 01       	movw	r18, r24
    969c:	89 81       	ldd	r24, Y+1	; 0x01
    969e:	88 2f       	mov	r24, r24
    96a0:	90 e0       	ldi	r25, 0x00	; 0
    96a2:	8a 50       	subi	r24, 0x0A	; 10
    96a4:	9b 4f       	sbci	r25, 0xFB	; 251
    96a6:	fc 01       	movw	r30, r24
    96a8:	80 81       	ld	r24, Z
    96aa:	08 2e       	mov	r0, r24
    96ac:	00 0c       	add	r0, r0
    96ae:	99 0b       	sbc	r25, r25
    96b0:	28 0f       	add	r18, r24
    96b2:	39 1f       	adc	r19, r25
    96b4:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ServoCount>
    96b8:	88 2f       	mov	r24, r24
    96ba:	90 e0       	ldi	r25, 0x00	; 0
    96bc:	28 17       	cp	r18, r24
    96be:	39 07       	cpc	r19, r25
    96c0:	4c f5       	brge	.+82     	; 0x9714 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    96c2:	89 81       	ldd	r24, Y+1	; 0x01
    96c4:	28 2f       	mov	r18, r24
    96c6:	30 e0       	ldi	r19, 0x00	; 0
    96c8:	c9 01       	movw	r24, r18
    96ca:	88 0f       	add	r24, r24
    96cc:	99 1f       	adc	r25, r25
    96ce:	82 0f       	add	r24, r18
    96d0:	93 1f       	adc	r25, r19
    96d2:	88 0f       	add	r24, r24
    96d4:	99 1f       	adc	r25, r25
    96d6:	88 0f       	add	r24, r24
    96d8:	99 1f       	adc	r25, r25
    96da:	9c 01       	movw	r18, r24
    96dc:	89 81       	ldd	r24, Y+1	; 0x01
    96de:	88 2f       	mov	r24, r24
    96e0:	90 e0       	ldi	r25, 0x00	; 0
    96e2:	8a 50       	subi	r24, 0x0A	; 10
    96e4:	9b 4f       	sbci	r25, 0xFB	; 251
    96e6:	fc 01       	movw	r30, r24
    96e8:	80 81       	ld	r24, Z
    96ea:	08 2e       	mov	r0, r24
    96ec:	00 0c       	add	r0, r0
    96ee:	99 0b       	sbc	r25, r25
    96f0:	28 0f       	add	r18, r24
    96f2:	39 1f       	adc	r19, r25
    96f4:	c9 01       	movw	r24, r18
    96f6:	88 0f       	add	r24, r24
    96f8:	99 1f       	adc	r25, r25
    96fa:	82 0f       	add	r24, r18
    96fc:	93 1f       	adc	r25, r19
    96fe:	8a 59       	subi	r24, 0x9A	; 154
    9700:	9b 4f       	sbci	r25, 0xFB	; 251
    9702:	fc 01       	movw	r30, r24
    9704:	80 81       	ld	r24, Z
    9706:	86 fb       	bst	r24, 6
    9708:	88 27       	eor	r24, r24
    970a:	80 f9       	bld	r24, 0
    970c:	81 30       	cpi	r24, 0x01	; 1
    970e:	11 f4       	brne	.+4      	; 0x9714 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    9710:	81 e0       	ldi	r24, 0x01	; 1
    9712:	01 c0       	rjmp	.+2      	; 0x9716 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    9714:	80 e0       	ldi	r24, 0x00	; 0
    9716:	88 23       	and	r24, r24
    9718:	31 f1       	breq	.+76     	; 0x9766 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    971a:	89 81       	ldd	r24, Y+1	; 0x01
    971c:	28 2f       	mov	r18, r24
    971e:	30 e0       	ldi	r19, 0x00	; 0
    9720:	c9 01       	movw	r24, r18
    9722:	88 0f       	add	r24, r24
    9724:	99 1f       	adc	r25, r25
    9726:	82 0f       	add	r24, r18
    9728:	93 1f       	adc	r25, r19
    972a:	88 0f       	add	r24, r24
    972c:	99 1f       	adc	r25, r25
    972e:	88 0f       	add	r24, r24
    9730:	99 1f       	adc	r25, r25
    9732:	9c 01       	movw	r18, r24
    9734:	89 81       	ldd	r24, Y+1	; 0x01
    9736:	88 2f       	mov	r24, r24
    9738:	90 e0       	ldi	r25, 0x00	; 0
    973a:	8a 50       	subi	r24, 0x0A	; 10
    973c:	9b 4f       	sbci	r25, 0xFB	; 251
    973e:	fc 01       	movw	r30, r24
    9740:	80 81       	ld	r24, Z
    9742:	08 2e       	mov	r0, r24
    9744:	00 0c       	add	r0, r0
    9746:	99 0b       	sbc	r25, r25
    9748:	28 0f       	add	r18, r24
    974a:	39 1f       	adc	r19, r25
    974c:	c9 01       	movw	r24, r18
    974e:	88 0f       	add	r24, r24
    9750:	99 1f       	adc	r25, r25
    9752:	82 0f       	add	r24, r18
    9754:	93 1f       	adc	r25, r19
    9756:	8a 59       	subi	r24, 0x9A	; 154
    9758:	9b 4f       	sbci	r25, 0xFB	; 251
    975a:	fc 01       	movw	r30, r24
    975c:	80 81       	ld	r24, Z
    975e:	8f 73       	andi	r24, 0x3F	; 63
    9760:	60 e0       	ldi	r22, 0x00	; 0
    9762:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    9766:	89 81       	ldd	r24, Y+1	; 0x01
    9768:	88 2f       	mov	r24, r24
    976a:	90 e0       	ldi	r25, 0x00	; 0
    976c:	9c 01       	movw	r18, r24
    976e:	2a 50       	subi	r18, 0x0A	; 10
    9770:	3b 4f       	sbci	r19, 0xFB	; 251
    9772:	f9 01       	movw	r30, r18
    9774:	20 81       	ld	r18, Z
    9776:	2f 5f       	subi	r18, 0xFF	; 255
    9778:	8a 50       	subi	r24, 0x0A	; 10
    977a:	9b 4f       	sbci	r25, 0xFB	; 251
    977c:	fc 01       	movw	r30, r24
    977e:	20 83       	st	Z, r18
    9780:	89 81       	ldd	r24, Y+1	; 0x01
    9782:	28 2f       	mov	r18, r24
    9784:	30 e0       	ldi	r19, 0x00	; 0
    9786:	c9 01       	movw	r24, r18
    9788:	88 0f       	add	r24, r24
    978a:	99 1f       	adc	r25, r25
    978c:	82 0f       	add	r24, r18
    978e:	93 1f       	adc	r25, r19
    9790:	88 0f       	add	r24, r24
    9792:	99 1f       	adc	r25, r25
    9794:	88 0f       	add	r24, r24
    9796:	99 1f       	adc	r25, r25
    9798:	9c 01       	movw	r18, r24
    979a:	89 81       	ldd	r24, Y+1	; 0x01
    979c:	88 2f       	mov	r24, r24
    979e:	90 e0       	ldi	r25, 0x00	; 0
    97a0:	8a 50       	subi	r24, 0x0A	; 10
    97a2:	9b 4f       	sbci	r25, 0xFB	; 251
    97a4:	fc 01       	movw	r30, r24
    97a6:	80 81       	ld	r24, Z
    97a8:	08 2e       	mov	r0, r24
    97aa:	00 0c       	add	r0, r0
    97ac:	99 0b       	sbc	r25, r25
    97ae:	28 0f       	add	r18, r24
    97b0:	39 1f       	adc	r19, r25
    97b2:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ServoCount>
    97b6:	88 2f       	mov	r24, r24
    97b8:	90 e0       	ldi	r25, 0x00	; 0
    97ba:	28 17       	cp	r18, r24
    97bc:	39 07       	cpc	r19, r25
    97be:	5c f4       	brge	.+22     	; 0x97d6 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    97c0:	89 81       	ldd	r24, Y+1	; 0x01
    97c2:	88 2f       	mov	r24, r24
    97c4:	90 e0       	ldi	r25, 0x00	; 0
    97c6:	8a 50       	subi	r24, 0x0A	; 10
    97c8:	9b 4f       	sbci	r25, 0xFB	; 251
    97ca:	fc 01       	movw	r30, r24
    97cc:	80 81       	ld	r24, Z
    97ce:	8c 30       	cpi	r24, 0x0C	; 12
    97d0:	14 f4       	brge	.+4      	; 0x97d6 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    97d2:	81 e0       	ldi	r24, 0x01	; 1
    97d4:	01 c0       	rjmp	.+2      	; 0x97d8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    97d6:	80 e0       	ldi	r24, 0x00	; 0
    97d8:	88 23       	and	r24, r24
    97da:	09 f4       	brne	.+2      	; 0x97de <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    97dc:	7f c0       	rjmp	.+254    	; 0x98dc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    97de:	8a 81       	ldd	r24, Y+2	; 0x02
    97e0:	9b 81       	ldd	r25, Y+3	; 0x03
    97e2:	fc 01       	movw	r30, r24
    97e4:	40 81       	ld	r20, Z
    97e6:	51 81       	ldd	r21, Z+1	; 0x01
    97e8:	89 81       	ldd	r24, Y+1	; 0x01
    97ea:	28 2f       	mov	r18, r24
    97ec:	30 e0       	ldi	r19, 0x00	; 0
    97ee:	c9 01       	movw	r24, r18
    97f0:	88 0f       	add	r24, r24
    97f2:	99 1f       	adc	r25, r25
    97f4:	82 0f       	add	r24, r18
    97f6:	93 1f       	adc	r25, r19
    97f8:	88 0f       	add	r24, r24
    97fa:	99 1f       	adc	r25, r25
    97fc:	88 0f       	add	r24, r24
    97fe:	99 1f       	adc	r25, r25
    9800:	9c 01       	movw	r18, r24
    9802:	89 81       	ldd	r24, Y+1	; 0x01
    9804:	88 2f       	mov	r24, r24
    9806:	90 e0       	ldi	r25, 0x00	; 0
    9808:	8a 50       	subi	r24, 0x0A	; 10
    980a:	9b 4f       	sbci	r25, 0xFB	; 251
    980c:	fc 01       	movw	r30, r24
    980e:	80 81       	ld	r24, Z
    9810:	08 2e       	mov	r0, r24
    9812:	00 0c       	add	r0, r0
    9814:	99 0b       	sbc	r25, r25
    9816:	28 0f       	add	r18, r24
    9818:	39 1f       	adc	r19, r25
    981a:	c9 01       	movw	r24, r18
    981c:	88 0f       	add	r24, r24
    981e:	99 1f       	adc	r25, r25
    9820:	82 0f       	add	r24, r18
    9822:	93 1f       	adc	r25, r19
    9824:	89 59       	subi	r24, 0x99	; 153
    9826:	9b 4f       	sbci	r25, 0xFB	; 251
    9828:	fc 01       	movw	r30, r24
    982a:	80 81       	ld	r24, Z
    982c:	91 81       	ldd	r25, Z+1	; 0x01
    982e:	9a 01       	movw	r18, r20
    9830:	28 0f       	add	r18, r24
    9832:	39 1f       	adc	r19, r25
    9834:	8c 81       	ldd	r24, Y+4	; 0x04
    9836:	9d 81       	ldd	r25, Y+5	; 0x05
    9838:	fc 01       	movw	r30, r24
    983a:	31 83       	std	Z+1, r19	; 0x01
    983c:	20 83       	st	Z, r18
    983e:	89 81       	ldd	r24, Y+1	; 0x01
    9840:	28 2f       	mov	r18, r24
    9842:	30 e0       	ldi	r19, 0x00	; 0
    9844:	c9 01       	movw	r24, r18
    9846:	88 0f       	add	r24, r24
    9848:	99 1f       	adc	r25, r25
    984a:	82 0f       	add	r24, r18
    984c:	93 1f       	adc	r25, r19
    984e:	88 0f       	add	r24, r24
    9850:	99 1f       	adc	r25, r25
    9852:	88 0f       	add	r24, r24
    9854:	99 1f       	adc	r25, r25
    9856:	9c 01       	movw	r18, r24
    9858:	89 81       	ldd	r24, Y+1	; 0x01
    985a:	88 2f       	mov	r24, r24
    985c:	90 e0       	ldi	r25, 0x00	; 0
    985e:	8a 50       	subi	r24, 0x0A	; 10
    9860:	9b 4f       	sbci	r25, 0xFB	; 251
    9862:	fc 01       	movw	r30, r24
    9864:	80 81       	ld	r24, Z
    9866:	08 2e       	mov	r0, r24
    9868:	00 0c       	add	r0, r0
    986a:	99 0b       	sbc	r25, r25
    986c:	28 0f       	add	r18, r24
    986e:	39 1f       	adc	r19, r25
    9870:	c9 01       	movw	r24, r18
    9872:	88 0f       	add	r24, r24
    9874:	99 1f       	adc	r25, r25
    9876:	82 0f       	add	r24, r18
    9878:	93 1f       	adc	r25, r19
    987a:	8a 59       	subi	r24, 0x9A	; 154
    987c:	9b 4f       	sbci	r25, 0xFB	; 251
    987e:	fc 01       	movw	r30, r24
    9880:	80 81       	ld	r24, Z
    9882:	86 fb       	bst	r24, 6
    9884:	88 27       	eor	r24, r24
    9886:	80 f9       	bld	r24, 0
    9888:	88 23       	and	r24, r24
    988a:	09 f4       	brne	.+2      	; 0x988e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    988c:	51 c0       	rjmp	.+162    	; 0x9930 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    988e:	89 81       	ldd	r24, Y+1	; 0x01
    9890:	28 2f       	mov	r18, r24
    9892:	30 e0       	ldi	r19, 0x00	; 0
    9894:	c9 01       	movw	r24, r18
    9896:	88 0f       	add	r24, r24
    9898:	99 1f       	adc	r25, r25
    989a:	82 0f       	add	r24, r18
    989c:	93 1f       	adc	r25, r19
    989e:	88 0f       	add	r24, r24
    98a0:	99 1f       	adc	r25, r25
    98a2:	88 0f       	add	r24, r24
    98a4:	99 1f       	adc	r25, r25
    98a6:	9c 01       	movw	r18, r24
    98a8:	89 81       	ldd	r24, Y+1	; 0x01
    98aa:	88 2f       	mov	r24, r24
    98ac:	90 e0       	ldi	r25, 0x00	; 0
    98ae:	8a 50       	subi	r24, 0x0A	; 10
    98b0:	9b 4f       	sbci	r25, 0xFB	; 251
    98b2:	fc 01       	movw	r30, r24
    98b4:	80 81       	ld	r24, Z
    98b6:	08 2e       	mov	r0, r24
    98b8:	00 0c       	add	r0, r0
    98ba:	99 0b       	sbc	r25, r25
    98bc:	28 0f       	add	r18, r24
    98be:	39 1f       	adc	r19, r25
    98c0:	c9 01       	movw	r24, r18
    98c2:	88 0f       	add	r24, r24
    98c4:	99 1f       	adc	r25, r25
    98c6:	82 0f       	add	r24, r18
    98c8:	93 1f       	adc	r25, r19
    98ca:	8a 59       	subi	r24, 0x9A	; 154
    98cc:	9b 4f       	sbci	r25, 0xFB	; 251
    98ce:	fc 01       	movw	r30, r24
    98d0:	80 81       	ld	r24, Z
    98d2:	8f 73       	andi	r24, 0x3F	; 63
    98d4:	61 e0       	ldi	r22, 0x01	; 1
    98d6:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    98da:	2a c0       	rjmp	.+84     	; 0x9930 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    98dc:	8a 81       	ldd	r24, Y+2	; 0x02
    98de:	9b 81       	ldd	r25, Y+3	; 0x03
    98e0:	fc 01       	movw	r30, r24
    98e2:	80 81       	ld	r24, Z
    98e4:	91 81       	ldd	r25, Z+1	; 0x01
    98e6:	04 96       	adiw	r24, 0x04	; 4
    98e8:	21 e0       	ldi	r18, 0x01	; 1
    98ea:	80 34       	cpi	r24, 0x40	; 64
    98ec:	9c 49       	sbci	r25, 0x9C	; 156
    98ee:	08 f0       	brcs	.+2      	; 0x98f2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    98f0:	20 e0       	ldi	r18, 0x00	; 0
    98f2:	22 23       	and	r18, r18
    98f4:	41 f0       	breq	.+16     	; 0x9906 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    98f6:	8c 81       	ldd	r24, Y+4	; 0x04
    98f8:	9d 81       	ldd	r25, Y+5	; 0x05
    98fa:	20 e4       	ldi	r18, 0x40	; 64
    98fc:	3c e9       	ldi	r19, 0x9C	; 156
    98fe:	fc 01       	movw	r30, r24
    9900:	31 83       	std	Z+1, r19	; 0x01
    9902:	20 83       	st	Z, r18
    9904:	0d c0       	rjmp	.+26     	; 0x9920 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    9906:	8a 81       	ldd	r24, Y+2	; 0x02
    9908:	9b 81       	ldd	r25, Y+3	; 0x03
    990a:	fc 01       	movw	r30, r24
    990c:	80 81       	ld	r24, Z
    990e:	91 81       	ldd	r25, Z+1	; 0x01
    9910:	9c 01       	movw	r18, r24
    9912:	2c 5f       	subi	r18, 0xFC	; 252
    9914:	3f 4f       	sbci	r19, 0xFF	; 255
    9916:	8c 81       	ldd	r24, Y+4	; 0x04
    9918:	9d 81       	ldd	r25, Y+5	; 0x05
    991a:	fc 01       	movw	r30, r24
    991c:	31 83       	std	Z+1, r19	; 0x01
    991e:	20 83       	st	Z, r18
    9920:	89 81       	ldd	r24, Y+1	; 0x01
    9922:	88 2f       	mov	r24, r24
    9924:	90 e0       	ldi	r25, 0x00	; 0
    9926:	8a 50       	subi	r24, 0x0A	; 10
    9928:	9b 4f       	sbci	r25, 0xFB	; 251
    992a:	2f ef       	ldi	r18, 0xFF	; 255
    992c:	fc 01       	movw	r30, r24
    992e:	20 83       	st	Z, r18
    9930:	00 00       	nop
    9932:	0f 90       	pop	r0
    9934:	0f 90       	pop	r0
    9936:	0f 90       	pop	r0
    9938:	0f 90       	pop	r0
    993a:	0f 90       	pop	r0
    993c:	df 91       	pop	r29
    993e:	cf 91       	pop	r28
    9940:	08 95       	ret

00009942 <__vector_17>:
    9942:	1f 92       	push	r1
    9944:	0f 92       	push	r0
    9946:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    994a:	0f 92       	push	r0
    994c:	11 24       	eor	r1, r1
    994e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9952:	0f 92       	push	r0
    9954:	2f 93       	push	r18
    9956:	3f 93       	push	r19
    9958:	4f 93       	push	r20
    995a:	5f 93       	push	r21
    995c:	6f 93       	push	r22
    995e:	7f 93       	push	r23
    9960:	8f 93       	push	r24
    9962:	9f 93       	push	r25
    9964:	af 93       	push	r26
    9966:	bf 93       	push	r27
    9968:	ef 93       	push	r30
    996a:	ff 93       	push	r31
    996c:	cf 93       	push	r28
    996e:	df 93       	push	r29
    9970:	cd b7       	in	r28, 0x3d	; 61
    9972:	de b7       	in	r29, 0x3e	; 62
    9974:	48 e8       	ldi	r20, 0x88	; 136
    9976:	50 e0       	ldi	r21, 0x00	; 0
    9978:	64 e8       	ldi	r22, 0x84	; 132
    997a:	70 e0       	ldi	r23, 0x00	; 0
    997c:	81 e0       	ldi	r24, 0x01	; 1
    997e:	63 de       	rcall	.-826    	; 0x9646 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    9980:	00 00       	nop
    9982:	df 91       	pop	r29
    9984:	cf 91       	pop	r28
    9986:	ff 91       	pop	r31
    9988:	ef 91       	pop	r30
    998a:	bf 91       	pop	r27
    998c:	af 91       	pop	r26
    998e:	9f 91       	pop	r25
    9990:	8f 91       	pop	r24
    9992:	7f 91       	pop	r23
    9994:	6f 91       	pop	r22
    9996:	5f 91       	pop	r21
    9998:	4f 91       	pop	r20
    999a:	3f 91       	pop	r19
    999c:	2f 91       	pop	r18
    999e:	0f 90       	pop	r0
    99a0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    99a4:	0f 90       	pop	r0
    99a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    99aa:	0f 90       	pop	r0
    99ac:	1f 90       	pop	r1
    99ae:	18 95       	reti

000099b0 <__vector_32>:
    99b0:	1f 92       	push	r1
    99b2:	0f 92       	push	r0
    99b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    99b8:	0f 92       	push	r0
    99ba:	11 24       	eor	r1, r1
    99bc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    99c0:	0f 92       	push	r0
    99c2:	2f 93       	push	r18
    99c4:	3f 93       	push	r19
    99c6:	4f 93       	push	r20
    99c8:	5f 93       	push	r21
    99ca:	6f 93       	push	r22
    99cc:	7f 93       	push	r23
    99ce:	8f 93       	push	r24
    99d0:	9f 93       	push	r25
    99d2:	af 93       	push	r26
    99d4:	bf 93       	push	r27
    99d6:	ef 93       	push	r30
    99d8:	ff 93       	push	r31
    99da:	cf 93       	push	r28
    99dc:	df 93       	push	r29
    99de:	cd b7       	in	r28, 0x3d	; 61
    99e0:	de b7       	in	r29, 0x3e	; 62
    99e2:	48 e9       	ldi	r20, 0x98	; 152
    99e4:	50 e0       	ldi	r21, 0x00	; 0
    99e6:	64 e9       	ldi	r22, 0x94	; 148
    99e8:	70 e0       	ldi	r23, 0x00	; 0
    99ea:	82 e0       	ldi	r24, 0x02	; 2
    99ec:	2c de       	rcall	.-936    	; 0x9646 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    99ee:	00 00       	nop
    99f0:	df 91       	pop	r29
    99f2:	cf 91       	pop	r28
    99f4:	ff 91       	pop	r31
    99f6:	ef 91       	pop	r30
    99f8:	bf 91       	pop	r27
    99fa:	af 91       	pop	r26
    99fc:	9f 91       	pop	r25
    99fe:	8f 91       	pop	r24
    9a00:	7f 91       	pop	r23
    9a02:	6f 91       	pop	r22
    9a04:	5f 91       	pop	r21
    9a06:	4f 91       	pop	r20
    9a08:	3f 91       	pop	r19
    9a0a:	2f 91       	pop	r18
    9a0c:	0f 90       	pop	r0
    9a0e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9a12:	0f 90       	pop	r0
    9a14:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9a18:	0f 90       	pop	r0
    9a1a:	1f 90       	pop	r1
    9a1c:	18 95       	reti

00009a1e <__vector_42>:
    9a1e:	1f 92       	push	r1
    9a20:	0f 92       	push	r0
    9a22:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9a26:	0f 92       	push	r0
    9a28:	11 24       	eor	r1, r1
    9a2a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9a2e:	0f 92       	push	r0
    9a30:	2f 93       	push	r18
    9a32:	3f 93       	push	r19
    9a34:	4f 93       	push	r20
    9a36:	5f 93       	push	r21
    9a38:	6f 93       	push	r22
    9a3a:	7f 93       	push	r23
    9a3c:	8f 93       	push	r24
    9a3e:	9f 93       	push	r25
    9a40:	af 93       	push	r26
    9a42:	bf 93       	push	r27
    9a44:	ef 93       	push	r30
    9a46:	ff 93       	push	r31
    9a48:	cf 93       	push	r28
    9a4a:	df 93       	push	r29
    9a4c:	cd b7       	in	r28, 0x3d	; 61
    9a4e:	de b7       	in	r29, 0x3e	; 62
    9a50:	48 ea       	ldi	r20, 0xA8	; 168
    9a52:	50 e0       	ldi	r21, 0x00	; 0
    9a54:	64 ea       	ldi	r22, 0xA4	; 164
    9a56:	70 e0       	ldi	r23, 0x00	; 0
    9a58:	83 e0       	ldi	r24, 0x03	; 3
    9a5a:	f5 dd       	rcall	.-1046   	; 0x9646 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    9a5c:	00 00       	nop
    9a5e:	df 91       	pop	r29
    9a60:	cf 91       	pop	r28
    9a62:	ff 91       	pop	r31
    9a64:	ef 91       	pop	r30
    9a66:	bf 91       	pop	r27
    9a68:	af 91       	pop	r26
    9a6a:	9f 91       	pop	r25
    9a6c:	8f 91       	pop	r24
    9a6e:	7f 91       	pop	r23
    9a70:	6f 91       	pop	r22
    9a72:	5f 91       	pop	r21
    9a74:	4f 91       	pop	r20
    9a76:	3f 91       	pop	r19
    9a78:	2f 91       	pop	r18
    9a7a:	0f 90       	pop	r0
    9a7c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9a80:	0f 90       	pop	r0
    9a82:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9a86:	0f 90       	pop	r0
    9a88:	1f 90       	pop	r1
    9a8a:	18 95       	reti

00009a8c <__vector_47>:
    9a8c:	1f 92       	push	r1
    9a8e:	0f 92       	push	r0
    9a90:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9a94:	0f 92       	push	r0
    9a96:	11 24       	eor	r1, r1
    9a98:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9a9c:	0f 92       	push	r0
    9a9e:	2f 93       	push	r18
    9aa0:	3f 93       	push	r19
    9aa2:	4f 93       	push	r20
    9aa4:	5f 93       	push	r21
    9aa6:	6f 93       	push	r22
    9aa8:	7f 93       	push	r23
    9aaa:	8f 93       	push	r24
    9aac:	9f 93       	push	r25
    9aae:	af 93       	push	r26
    9ab0:	bf 93       	push	r27
    9ab2:	ef 93       	push	r30
    9ab4:	ff 93       	push	r31
    9ab6:	cf 93       	push	r28
    9ab8:	df 93       	push	r29
    9aba:	cd b7       	in	r28, 0x3d	; 61
    9abc:	de b7       	in	r29, 0x3e	; 62
    9abe:	48 e2       	ldi	r20, 0x28	; 40
    9ac0:	51 e0       	ldi	r21, 0x01	; 1
    9ac2:	64 e2       	ldi	r22, 0x24	; 36
    9ac4:	71 e0       	ldi	r23, 0x01	; 1
    9ac6:	80 e0       	ldi	r24, 0x00	; 0
    9ac8:	be dd       	rcall	.-1156   	; 0x9646 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    9aca:	00 00       	nop
    9acc:	df 91       	pop	r29
    9ace:	cf 91       	pop	r28
    9ad0:	ff 91       	pop	r31
    9ad2:	ef 91       	pop	r30
    9ad4:	bf 91       	pop	r27
    9ad6:	af 91       	pop	r26
    9ad8:	9f 91       	pop	r25
    9ada:	8f 91       	pop	r24
    9adc:	7f 91       	pop	r23
    9ade:	6f 91       	pop	r22
    9ae0:	5f 91       	pop	r21
    9ae2:	4f 91       	pop	r20
    9ae4:	3f 91       	pop	r19
    9ae6:	2f 91       	pop	r18
    9ae8:	0f 90       	pop	r0
    9aea:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9aee:	0f 90       	pop	r0
    9af0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9af4:	0f 90       	pop	r0
    9af6:	1f 90       	pop	r1
    9af8:	18 95       	reti

00009afa <_ZL7initISR18timer16_Sequence_t>:
    9afa:	cf 93       	push	r28
    9afc:	df 93       	push	r29
    9afe:	1f 92       	push	r1
    9b00:	cd b7       	in	r28, 0x3d	; 61
    9b02:	de b7       	in	r29, 0x3e	; 62
    9b04:	89 83       	std	Y+1, r24	; 0x01
    9b06:	89 81       	ldd	r24, Y+1	; 0x01
    9b08:	81 30       	cpi	r24, 0x01	; 1
    9b0a:	01 f5       	brne	.+64     	; 0x9b4c <_ZL7initISR18timer16_Sequence_t+0x52>
    9b0c:	80 e8       	ldi	r24, 0x80	; 128
    9b0e:	90 e0       	ldi	r25, 0x00	; 0
    9b10:	fc 01       	movw	r30, r24
    9b12:	10 82       	st	Z, r1
    9b14:	81 e8       	ldi	r24, 0x81	; 129
    9b16:	90 e0       	ldi	r25, 0x00	; 0
    9b18:	22 e0       	ldi	r18, 0x02	; 2
    9b1a:	fc 01       	movw	r30, r24
    9b1c:	20 83       	st	Z, r18
    9b1e:	84 e8       	ldi	r24, 0x84	; 132
    9b20:	90 e0       	ldi	r25, 0x00	; 0
    9b22:	fc 01       	movw	r30, r24
    9b24:	11 82       	std	Z+1, r1	; 0x01
    9b26:	10 82       	st	Z, r1
    9b28:	86 e3       	ldi	r24, 0x36	; 54
    9b2a:	90 e0       	ldi	r25, 0x00	; 0
    9b2c:	26 e3       	ldi	r18, 0x36	; 54
    9b2e:	30 e0       	ldi	r19, 0x00	; 0
    9b30:	f9 01       	movw	r30, r18
    9b32:	20 81       	ld	r18, Z
    9b34:	22 60       	ori	r18, 0x02	; 2
    9b36:	fc 01       	movw	r30, r24
    9b38:	20 83       	st	Z, r18
    9b3a:	8f e6       	ldi	r24, 0x6F	; 111
    9b3c:	90 e0       	ldi	r25, 0x00	; 0
    9b3e:	2f e6       	ldi	r18, 0x6F	; 111
    9b40:	30 e0       	ldi	r19, 0x00	; 0
    9b42:	f9 01       	movw	r30, r18
    9b44:	20 81       	ld	r18, Z
    9b46:	22 60       	ori	r18, 0x02	; 2
    9b48:	fc 01       	movw	r30, r24
    9b4a:	20 83       	st	Z, r18
    9b4c:	89 81       	ldd	r24, Y+1	; 0x01
    9b4e:	82 30       	cpi	r24, 0x02	; 2
    9b50:	c1 f4       	brne	.+48     	; 0x9b82 <_ZL7initISR18timer16_Sequence_t+0x88>
    9b52:	80 e9       	ldi	r24, 0x90	; 144
    9b54:	90 e0       	ldi	r25, 0x00	; 0
    9b56:	fc 01       	movw	r30, r24
    9b58:	10 82       	st	Z, r1
    9b5a:	81 e9       	ldi	r24, 0x91	; 145
    9b5c:	90 e0       	ldi	r25, 0x00	; 0
    9b5e:	22 e0       	ldi	r18, 0x02	; 2
    9b60:	fc 01       	movw	r30, r24
    9b62:	20 83       	st	Z, r18
    9b64:	84 e9       	ldi	r24, 0x94	; 148
    9b66:	90 e0       	ldi	r25, 0x00	; 0
    9b68:	fc 01       	movw	r30, r24
    9b6a:	11 82       	std	Z+1, r1	; 0x01
    9b6c:	10 82       	st	Z, r1
    9b6e:	88 e3       	ldi	r24, 0x38	; 56
    9b70:	90 e0       	ldi	r25, 0x00	; 0
    9b72:	22 e0       	ldi	r18, 0x02	; 2
    9b74:	fc 01       	movw	r30, r24
    9b76:	20 83       	st	Z, r18
    9b78:	81 e7       	ldi	r24, 0x71	; 113
    9b7a:	90 e0       	ldi	r25, 0x00	; 0
    9b7c:	22 e0       	ldi	r18, 0x02	; 2
    9b7e:	fc 01       	movw	r30, r24
    9b80:	20 83       	st	Z, r18
    9b82:	89 81       	ldd	r24, Y+1	; 0x01
    9b84:	83 30       	cpi	r24, 0x03	; 3
    9b86:	c1 f4       	brne	.+48     	; 0x9bb8 <_ZL7initISR18timer16_Sequence_t+0xbe>
    9b88:	80 ea       	ldi	r24, 0xA0	; 160
    9b8a:	90 e0       	ldi	r25, 0x00	; 0
    9b8c:	fc 01       	movw	r30, r24
    9b8e:	10 82       	st	Z, r1
    9b90:	81 ea       	ldi	r24, 0xA1	; 161
    9b92:	90 e0       	ldi	r25, 0x00	; 0
    9b94:	22 e0       	ldi	r18, 0x02	; 2
    9b96:	fc 01       	movw	r30, r24
    9b98:	20 83       	st	Z, r18
    9b9a:	84 ea       	ldi	r24, 0xA4	; 164
    9b9c:	90 e0       	ldi	r25, 0x00	; 0
    9b9e:	fc 01       	movw	r30, r24
    9ba0:	11 82       	std	Z+1, r1	; 0x01
    9ba2:	10 82       	st	Z, r1
    9ba4:	89 e3       	ldi	r24, 0x39	; 57
    9ba6:	90 e0       	ldi	r25, 0x00	; 0
    9ba8:	22 e0       	ldi	r18, 0x02	; 2
    9baa:	fc 01       	movw	r30, r24
    9bac:	20 83       	st	Z, r18
    9bae:	82 e7       	ldi	r24, 0x72	; 114
    9bb0:	90 e0       	ldi	r25, 0x00	; 0
    9bb2:	22 e0       	ldi	r18, 0x02	; 2
    9bb4:	fc 01       	movw	r30, r24
    9bb6:	20 83       	st	Z, r18
    9bb8:	89 81       	ldd	r24, Y+1	; 0x01
    9bba:	88 23       	and	r24, r24
    9bbc:	c1 f4       	brne	.+48     	; 0x9bee <_ZL7initISR18timer16_Sequence_t+0xf4>
    9bbe:	80 e2       	ldi	r24, 0x20	; 32
    9bc0:	91 e0       	ldi	r25, 0x01	; 1
    9bc2:	fc 01       	movw	r30, r24
    9bc4:	10 82       	st	Z, r1
    9bc6:	81 e2       	ldi	r24, 0x21	; 33
    9bc8:	91 e0       	ldi	r25, 0x01	; 1
    9bca:	22 e0       	ldi	r18, 0x02	; 2
    9bcc:	fc 01       	movw	r30, r24
    9bce:	20 83       	st	Z, r18
    9bd0:	84 e2       	ldi	r24, 0x24	; 36
    9bd2:	91 e0       	ldi	r25, 0x01	; 1
    9bd4:	fc 01       	movw	r30, r24
    9bd6:	11 82       	std	Z+1, r1	; 0x01
    9bd8:	10 82       	st	Z, r1
    9bda:	8a e3       	ldi	r24, 0x3A	; 58
    9bdc:	90 e0       	ldi	r25, 0x00	; 0
    9bde:	22 e0       	ldi	r18, 0x02	; 2
    9be0:	fc 01       	movw	r30, r24
    9be2:	20 83       	st	Z, r18
    9be4:	83 e7       	ldi	r24, 0x73	; 115
    9be6:	90 e0       	ldi	r25, 0x00	; 0
    9be8:	22 e0       	ldi	r18, 0x02	; 2
    9bea:	fc 01       	movw	r30, r24
    9bec:	20 83       	st	Z, r18
    9bee:	00 00       	nop
    9bf0:	0f 90       	pop	r0
    9bf2:	df 91       	pop	r29
    9bf4:	cf 91       	pop	r28
    9bf6:	08 95       	ret

00009bf8 <_ZL13isTimerActive18timer16_Sequence_t>:
    9bf8:	cf 93       	push	r28
    9bfa:	df 93       	push	r29
    9bfc:	1f 92       	push	r1
    9bfe:	1f 92       	push	r1
    9c00:	cd b7       	in	r28, 0x3d	; 61
    9c02:	de b7       	in	r29, 0x3e	; 62
    9c04:	8a 83       	std	Y+2, r24	; 0x02
    9c06:	19 82       	std	Y+1, r1	; 0x01
    9c08:	89 81       	ldd	r24, Y+1	; 0x01
    9c0a:	8c 30       	cpi	r24, 0x0C	; 12
    9c0c:	30 f5       	brcc	.+76     	; 0x9c5a <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    9c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    9c10:	28 2f       	mov	r18, r24
    9c12:	30 e0       	ldi	r19, 0x00	; 0
    9c14:	c9 01       	movw	r24, r18
    9c16:	88 0f       	add	r24, r24
    9c18:	99 1f       	adc	r25, r25
    9c1a:	82 0f       	add	r24, r18
    9c1c:	93 1f       	adc	r25, r19
    9c1e:	88 0f       	add	r24, r24
    9c20:	99 1f       	adc	r25, r25
    9c22:	88 0f       	add	r24, r24
    9c24:	99 1f       	adc	r25, r25
    9c26:	9c 01       	movw	r18, r24
    9c28:	89 81       	ldd	r24, Y+1	; 0x01
    9c2a:	88 2f       	mov	r24, r24
    9c2c:	90 e0       	ldi	r25, 0x00	; 0
    9c2e:	28 0f       	add	r18, r24
    9c30:	39 1f       	adc	r19, r25
    9c32:	c9 01       	movw	r24, r18
    9c34:	88 0f       	add	r24, r24
    9c36:	99 1f       	adc	r25, r25
    9c38:	82 0f       	add	r24, r18
    9c3a:	93 1f       	adc	r25, r19
    9c3c:	8a 59       	subi	r24, 0x9A	; 154
    9c3e:	9b 4f       	sbci	r25, 0xFB	; 251
    9c40:	fc 01       	movw	r30, r24
    9c42:	80 81       	ld	r24, Z
    9c44:	86 fb       	bst	r24, 6
    9c46:	88 27       	eor	r24, r24
    9c48:	80 f9       	bld	r24, 0
    9c4a:	81 30       	cpi	r24, 0x01	; 1
    9c4c:	11 f4       	brne	.+4      	; 0x9c52 <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    9c4e:	81 e0       	ldi	r24, 0x01	; 1
    9c50:	05 c0       	rjmp	.+10     	; 0x9c5c <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    9c52:	89 81       	ldd	r24, Y+1	; 0x01
    9c54:	8f 5f       	subi	r24, 0xFF	; 255
    9c56:	89 83       	std	Y+1, r24	; 0x01
    9c58:	d7 cf       	rjmp	.-82     	; 0x9c08 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    9c5a:	80 e0       	ldi	r24, 0x00	; 0
    9c5c:	0f 90       	pop	r0
    9c5e:	0f 90       	pop	r0
    9c60:	df 91       	pop	r29
    9c62:	cf 91       	pop	r28
    9c64:	08 95       	ret

00009c66 <_ZN5ServoC1Ev>:
    9c66:	cf 93       	push	r28
    9c68:	df 93       	push	r29
    9c6a:	1f 92       	push	r1
    9c6c:	1f 92       	push	r1
    9c6e:	cd b7       	in	r28, 0x3d	; 61
    9c70:	de b7       	in	r29, 0x3e	; 62
    9c72:	9a 83       	std	Y+2, r25	; 0x02
    9c74:	89 83       	std	Y+1, r24	; 0x01
    9c76:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ServoCount>
    9c7a:	80 33       	cpi	r24, 0x30	; 48
    9c7c:	e8 f4       	brcc	.+58     	; 0x9cb8 <_ZN5ServoC1Ev+0x52>
    9c7e:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <ServoCount>
    9c82:	81 e0       	ldi	r24, 0x01	; 1
    9c84:	82 0f       	add	r24, r18
    9c86:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <ServoCount>
    9c8a:	89 81       	ldd	r24, Y+1	; 0x01
    9c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    9c8e:	fc 01       	movw	r30, r24
    9c90:	20 83       	st	Z, r18
    9c92:	89 81       	ldd	r24, Y+1	; 0x01
    9c94:	9a 81       	ldd	r25, Y+2	; 0x02
    9c96:	fc 01       	movw	r30, r24
    9c98:	80 81       	ld	r24, Z
    9c9a:	28 2f       	mov	r18, r24
    9c9c:	30 e0       	ldi	r19, 0x00	; 0
    9c9e:	c9 01       	movw	r24, r18
    9ca0:	88 0f       	add	r24, r24
    9ca2:	99 1f       	adc	r25, r25
    9ca4:	82 0f       	add	r24, r18
    9ca6:	93 1f       	adc	r25, r19
    9ca8:	89 59       	subi	r24, 0x99	; 153
    9caa:	9b 4f       	sbci	r25, 0xFB	; 251
    9cac:	28 eb       	ldi	r18, 0xB8	; 184
    9cae:	3b e0       	ldi	r19, 0x0B	; 11
    9cb0:	fc 01       	movw	r30, r24
    9cb2:	31 83       	std	Z+1, r19	; 0x01
    9cb4:	20 83       	st	Z, r18
    9cb6:	05 c0       	rjmp	.+10     	; 0x9cc2 <_ZN5ServoC1Ev+0x5c>
    9cb8:	89 81       	ldd	r24, Y+1	; 0x01
    9cba:	9a 81       	ldd	r25, Y+2	; 0x02
    9cbc:	2f ef       	ldi	r18, 0xFF	; 255
    9cbe:	fc 01       	movw	r30, r24
    9cc0:	20 83       	st	Z, r18
    9cc2:	00 00       	nop
    9cc4:	0f 90       	pop	r0
    9cc6:	0f 90       	pop	r0
    9cc8:	df 91       	pop	r29
    9cca:	cf 91       	pop	r28
    9ccc:	08 95       	ret

00009cce <_ZN5Servo6attachEi>:
    9cce:	cf 93       	push	r28
    9cd0:	df 93       	push	r29
    9cd2:	00 d0       	rcall	.+0      	; 0x9cd4 <_ZN5Servo6attachEi+0x6>
    9cd4:	1f 92       	push	r1
    9cd6:	cd b7       	in	r28, 0x3d	; 61
    9cd8:	de b7       	in	r29, 0x3e	; 62
    9cda:	9a 83       	std	Y+2, r25	; 0x02
    9cdc:	89 83       	std	Y+1, r24	; 0x01
    9cde:	7c 83       	std	Y+4, r23	; 0x04
    9ce0:	6b 83       	std	Y+3, r22	; 0x03
    9ce2:	6b 81       	ldd	r22, Y+3	; 0x03
    9ce4:	7c 81       	ldd	r23, Y+4	; 0x04
    9ce6:	89 81       	ldd	r24, Y+1	; 0x01
    9ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    9cea:	20 e6       	ldi	r18, 0x60	; 96
    9cec:	39 e0       	ldi	r19, 0x09	; 9
    9cee:	40 e2       	ldi	r20, 0x20	; 32
    9cf0:	52 e0       	ldi	r21, 0x02	; 2
    9cf2:	07 d0       	rcall	.+14     	; 0x9d02 <_ZN5Servo6attachEiii>
    9cf4:	0f 90       	pop	r0
    9cf6:	0f 90       	pop	r0
    9cf8:	0f 90       	pop	r0
    9cfa:	0f 90       	pop	r0
    9cfc:	df 91       	pop	r29
    9cfe:	cf 91       	pop	r28
    9d00:	08 95       	ret

00009d02 <_ZN5Servo6attachEiii>:
    9d02:	cf 93       	push	r28
    9d04:	df 93       	push	r29
    9d06:	cd b7       	in	r28, 0x3d	; 61
    9d08:	de b7       	in	r29, 0x3e	; 62
    9d0a:	29 97       	sbiw	r28, 0x09	; 9
    9d0c:	0f b6       	in	r0, 0x3f	; 63
    9d0e:	f8 94       	cli
    9d10:	de bf       	out	0x3e, r29	; 62
    9d12:	0f be       	out	0x3f, r0	; 63
    9d14:	cd bf       	out	0x3d, r28	; 61
    9d16:	9b 83       	std	Y+3, r25	; 0x03
    9d18:	8a 83       	std	Y+2, r24	; 0x02
    9d1a:	7d 83       	std	Y+5, r23	; 0x05
    9d1c:	6c 83       	std	Y+4, r22	; 0x04
    9d1e:	5f 83       	std	Y+7, r21	; 0x07
    9d20:	4e 83       	std	Y+6, r20	; 0x06
    9d22:	39 87       	std	Y+9, r19	; 0x09
    9d24:	28 87       	std	Y+8, r18	; 0x08
    9d26:	8a 81       	ldd	r24, Y+2	; 0x02
    9d28:	9b 81       	ldd	r25, Y+3	; 0x03
    9d2a:	fc 01       	movw	r30, r24
    9d2c:	80 81       	ld	r24, Z
    9d2e:	80 33       	cpi	r24, 0x30	; 48
    9d30:	08 f0       	brcs	.+2      	; 0x9d34 <_ZN5Servo6attachEiii+0x32>
    9d32:	6b c0       	rjmp	.+214    	; 0x9e0a <_ZN5Servo6attachEiii+0x108>
    9d34:	8c 81       	ldd	r24, Y+4	; 0x04
    9d36:	61 e0       	ldi	r22, 0x01	; 1
    9d38:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    9d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    9d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    9d40:	fc 01       	movw	r30, r24
    9d42:	80 81       	ld	r24, Z
    9d44:	28 2f       	mov	r18, r24
    9d46:	30 e0       	ldi	r19, 0x00	; 0
    9d48:	8c 81       	ldd	r24, Y+4	; 0x04
    9d4a:	48 2f       	mov	r20, r24
    9d4c:	4f 73       	andi	r20, 0x3F	; 63
    9d4e:	c9 01       	movw	r24, r18
    9d50:	88 0f       	add	r24, r24
    9d52:	99 1f       	adc	r25, r25
    9d54:	82 0f       	add	r24, r18
    9d56:	93 1f       	adc	r25, r19
    9d58:	8a 59       	subi	r24, 0x9A	; 154
    9d5a:	9b 4f       	sbci	r25, 0xFB	; 251
    9d5c:	24 2f       	mov	r18, r20
    9d5e:	2f 73       	andi	r18, 0x3F	; 63
    9d60:	fc 01       	movw	r30, r24
    9d62:	30 81       	ld	r19, Z
    9d64:	30 7c       	andi	r19, 0xC0	; 192
    9d66:	23 2b       	or	r18, r19
    9d68:	fc 01       	movw	r30, r24
    9d6a:	20 83       	st	Z, r18
    9d6c:	20 e2       	ldi	r18, 0x20	; 32
    9d6e:	32 e0       	ldi	r19, 0x02	; 2
    9d70:	8e 81       	ldd	r24, Y+6	; 0x06
    9d72:	9f 81       	ldd	r25, Y+7	; 0x07
    9d74:	a9 01       	movw	r20, r18
    9d76:	48 1b       	sub	r20, r24
    9d78:	59 0b       	sbc	r21, r25
    9d7a:	ca 01       	movw	r24, r20
    9d7c:	99 23       	and	r25, r25
    9d7e:	0c f4       	brge	.+2      	; 0x9d82 <_ZN5Servo6attachEiii+0x80>
    9d80:	03 96       	adiw	r24, 0x03	; 3
    9d82:	95 95       	asr	r25
    9d84:	87 95       	ror	r24
    9d86:	95 95       	asr	r25
    9d88:	87 95       	ror	r24
    9d8a:	28 2f       	mov	r18, r24
    9d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    9d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    9d90:	fc 01       	movw	r30, r24
    9d92:	21 83       	std	Z+1, r18	; 0x01
    9d94:	20 e6       	ldi	r18, 0x60	; 96
    9d96:	39 e0       	ldi	r19, 0x09	; 9
    9d98:	88 85       	ldd	r24, Y+8	; 0x08
    9d9a:	99 85       	ldd	r25, Y+9	; 0x09
    9d9c:	a9 01       	movw	r20, r18
    9d9e:	48 1b       	sub	r20, r24
    9da0:	59 0b       	sbc	r21, r25
    9da2:	ca 01       	movw	r24, r20
    9da4:	99 23       	and	r25, r25
    9da6:	0c f4       	brge	.+2      	; 0x9daa <_ZN5Servo6attachEiii+0xa8>
    9da8:	03 96       	adiw	r24, 0x03	; 3
    9daa:	95 95       	asr	r25
    9dac:	87 95       	ror	r24
    9dae:	95 95       	asr	r25
    9db0:	87 95       	ror	r24
    9db2:	28 2f       	mov	r18, r24
    9db4:	8a 81       	ldd	r24, Y+2	; 0x02
    9db6:	9b 81       	ldd	r25, Y+3	; 0x03
    9db8:	fc 01       	movw	r30, r24
    9dba:	22 83       	std	Z+2, r18	; 0x02
    9dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    9dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    9dc0:	fc 01       	movw	r30, r24
    9dc2:	90 81       	ld	r25, Z
    9dc4:	8b ea       	ldi	r24, 0xAB	; 171
    9dc6:	98 9f       	mul	r25, r24
    9dc8:	81 2d       	mov	r24, r1
    9dca:	11 24       	eor	r1, r1
    9dcc:	86 95       	lsr	r24
    9dce:	86 95       	lsr	r24
    9dd0:	86 95       	lsr	r24
    9dd2:	89 83       	std	Y+1, r24	; 0x01
    9dd4:	89 81       	ldd	r24, Y+1	; 0x01
    9dd6:	10 df       	rcall	.-480    	; 0x9bf8 <_ZL13isTimerActive18timer16_Sequence_t>
    9dd8:	98 2f       	mov	r25, r24
    9dda:	81 e0       	ldi	r24, 0x01	; 1
    9ddc:	89 27       	eor	r24, r25
    9dde:	88 23       	and	r24, r24
    9de0:	11 f0       	breq	.+4      	; 0x9de6 <_ZN5Servo6attachEiii+0xe4>
    9de2:	89 81       	ldd	r24, Y+1	; 0x01
    9de4:	8a de       	rcall	.-748    	; 0x9afa <_ZL7initISR18timer16_Sequence_t>
    9de6:	8a 81       	ldd	r24, Y+2	; 0x02
    9de8:	9b 81       	ldd	r25, Y+3	; 0x03
    9dea:	fc 01       	movw	r30, r24
    9dec:	80 81       	ld	r24, Z
    9dee:	28 2f       	mov	r18, r24
    9df0:	30 e0       	ldi	r19, 0x00	; 0
    9df2:	c9 01       	movw	r24, r18
    9df4:	88 0f       	add	r24, r24
    9df6:	99 1f       	adc	r25, r25
    9df8:	82 0f       	add	r24, r18
    9dfa:	93 1f       	adc	r25, r19
    9dfc:	8a 59       	subi	r24, 0x9A	; 154
    9dfe:	9b 4f       	sbci	r25, 0xFB	; 251
    9e00:	fc 01       	movw	r30, r24
    9e02:	20 81       	ld	r18, Z
    9e04:	20 64       	ori	r18, 0x40	; 64
    9e06:	fc 01       	movw	r30, r24
    9e08:	20 83       	st	Z, r18
    9e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    9e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    9e0e:	fc 01       	movw	r30, r24
    9e10:	80 81       	ld	r24, Z
    9e12:	29 96       	adiw	r28, 0x09	; 9
    9e14:	0f b6       	in	r0, 0x3f	; 63
    9e16:	f8 94       	cli
    9e18:	de bf       	out	0x3e, r29	; 62
    9e1a:	0f be       	out	0x3f, r0	; 63
    9e1c:	cd bf       	out	0x3d, r28	; 61
    9e1e:	df 91       	pop	r29
    9e20:	cf 91       	pop	r28
    9e22:	08 95       	ret

00009e24 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    9e24:	6f 92       	push	r6
    9e26:	7f 92       	push	r7
    9e28:	8f 92       	push	r8
    9e2a:	9f 92       	push	r9
    9e2c:	af 92       	push	r10
    9e2e:	bf 92       	push	r11
    9e30:	cf 92       	push	r12
    9e32:	df 92       	push	r13
    9e34:	ef 92       	push	r14
    9e36:	ff 92       	push	r15
    9e38:	0f 93       	push	r16
    9e3a:	1f 93       	push	r17
    9e3c:	cf 93       	push	r28
    9e3e:	df 93       	push	r29
    9e40:	00 d0       	rcall	.+0      	; 0x9e42 <_ZN5Servo5writeEi+0x1e>
    9e42:	1f 92       	push	r1
    9e44:	cd b7       	in	r28, 0x3d	; 61
    9e46:	de b7       	in	r29, 0x3e	; 62
    9e48:	9a 83       	std	Y+2, r25	; 0x02
    9e4a:	89 83       	std	Y+1, r24	; 0x01
    9e4c:	7c 83       	std	Y+4, r23	; 0x04
    9e4e:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    9e50:	8b 81       	ldd	r24, Y+3	; 0x03
    9e52:	9c 81       	ldd	r25, Y+4	; 0x04
    9e54:	80 32       	cpi	r24, 0x20	; 32
    9e56:	92 40       	sbci	r25, 0x02	; 2
    9e58:	0c f0       	brlt	.+2      	; 0x9e5c <_ZN5Servo5writeEi+0x38>
    9e5a:	5c c0       	rjmp	.+184    	; 0x9f14 <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    9e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    9e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    9e60:	99 23       	and	r25, r25
    9e62:	14 f4       	brge	.+4      	; 0x9e68 <_ZN5Servo5writeEi+0x44>
    9e64:	1c 82       	std	Y+4, r1	; 0x04
    9e66:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    9e68:	8b 81       	ldd	r24, Y+3	; 0x03
    9e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    9e6c:	85 3b       	cpi	r24, 0xB5	; 181
    9e6e:	91 05       	cpc	r25, r1
    9e70:	24 f0       	brlt	.+8      	; 0x9e7a <_ZN5Servo5writeEi+0x56>
    9e72:	84 eb       	ldi	r24, 0xB4	; 180
    9e74:	90 e0       	ldi	r25, 0x00	; 0
    9e76:	9c 83       	std	Y+4, r25	; 0x04
    9e78:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    9e7a:	89 81       	ldd	r24, Y+1	; 0x01
    9e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    9e7e:	fc 01       	movw	r30, r24
    9e80:	82 81       	ldd	r24, Z+2	; 0x02
    9e82:	08 2e       	mov	r0, r24
    9e84:	00 0c       	add	r0, r0
    9e86:	99 0b       	sbc	r25, r25
    9e88:	28 e5       	ldi	r18, 0x58	; 88
    9e8a:	32 e0       	ldi	r19, 0x02	; 2
    9e8c:	a9 01       	movw	r20, r18
    9e8e:	48 1b       	sub	r20, r24
    9e90:	59 0b       	sbc	r21, r25
    9e92:	ca 01       	movw	r24, r20
    9e94:	88 0f       	add	r24, r24
    9e96:	99 1f       	adc	r25, r25
    9e98:	88 0f       	add	r24, r24
    9e9a:	99 1f       	adc	r25, r25
    9e9c:	09 2e       	mov	r0, r25
    9e9e:	00 0c       	add	r0, r0
    9ea0:	aa 0b       	sbc	r26, r26
    9ea2:	bb 0b       	sbc	r27, r27
    9ea4:	29 81       	ldd	r18, Y+1	; 0x01
    9ea6:	3a 81       	ldd	r19, Y+2	; 0x02
    9ea8:	f9 01       	movw	r30, r18
    9eaa:	21 81       	ldd	r18, Z+1	; 0x01
    9eac:	02 2e       	mov	r0, r18
    9eae:	00 0c       	add	r0, r0
    9eb0:	33 0b       	sbc	r19, r19
    9eb2:	48 e8       	ldi	r20, 0x88	; 136
    9eb4:	50 e0       	ldi	r21, 0x00	; 0
    9eb6:	ba 01       	movw	r22, r20
    9eb8:	62 1b       	sub	r22, r18
    9eba:	73 0b       	sbc	r23, r19
    9ebc:	9b 01       	movw	r18, r22
    9ebe:	22 0f       	add	r18, r18
    9ec0:	33 1f       	adc	r19, r19
    9ec2:	22 0f       	add	r18, r18
    9ec4:	33 1f       	adc	r19, r19
    9ec6:	03 2e       	mov	r0, r19
    9ec8:	00 0c       	add	r0, r0
    9eca:	44 0b       	sbc	r20, r20
    9ecc:	55 0b       	sbc	r21, r21
    9ece:	6b 81       	ldd	r22, Y+3	; 0x03
    9ed0:	7c 81       	ldd	r23, Y+4	; 0x04
    9ed2:	3b 01       	movw	r6, r22
    9ed4:	77 0f       	add	r23, r23
    9ed6:	88 08       	sbc	r8, r8
    9ed8:	99 08       	sbc	r9, r9
    9eda:	6b 2f       	mov	r22, r27
    9edc:	6f 93       	push	r22
    9ede:	6a 2f       	mov	r22, r26
    9ee0:	6f 93       	push	r22
    9ee2:	69 2f       	mov	r22, r25
    9ee4:	6f 93       	push	r22
    9ee6:	8f 93       	push	r24
    9ee8:	59 01       	movw	r10, r18
    9eea:	6a 01       	movw	r12, r20
    9eec:	14 eb       	ldi	r17, 0xB4	; 180
    9eee:	e1 2e       	mov	r14, r17
    9ef0:	f1 2c       	mov	r15, r1
    9ef2:	00 e0       	ldi	r16, 0x00	; 0
    9ef4:	10 e0       	ldi	r17, 0x00	; 0
    9ef6:	20 e0       	ldi	r18, 0x00	; 0
    9ef8:	30 e0       	ldi	r19, 0x00	; 0
    9efa:	a9 01       	movw	r20, r18
    9efc:	c4 01       	movw	r24, r8
    9efe:	b3 01       	movw	r22, r6
    9f00:	0e 94 da 61 	call	0xc3b4	; 0xc3b4 <_Z3maplllll>
    9f04:	0f 90       	pop	r0
    9f06:	0f 90       	pop	r0
    9f08:	0f 90       	pop	r0
    9f0a:	0f 90       	pop	r0
    9f0c:	dc 01       	movw	r26, r24
    9f0e:	cb 01       	movw	r24, r22
    9f10:	9c 83       	std	Y+4, r25	; 0x04
    9f12:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    9f14:	2b 81       	ldd	r18, Y+3	; 0x03
    9f16:	3c 81       	ldd	r19, Y+4	; 0x04
    9f18:	89 81       	ldd	r24, Y+1	; 0x01
    9f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    9f1c:	b9 01       	movw	r22, r18
    9f1e:	14 d0       	rcall	.+40     	; 0x9f48 <_ZN5Servo17writeMicrosecondsEi>
}
    9f20:	00 00       	nop
    9f22:	0f 90       	pop	r0
    9f24:	0f 90       	pop	r0
    9f26:	0f 90       	pop	r0
    9f28:	0f 90       	pop	r0
    9f2a:	df 91       	pop	r29
    9f2c:	cf 91       	pop	r28
    9f2e:	1f 91       	pop	r17
    9f30:	0f 91       	pop	r16
    9f32:	ff 90       	pop	r15
    9f34:	ef 90       	pop	r14
    9f36:	df 90       	pop	r13
    9f38:	cf 90       	pop	r12
    9f3a:	bf 90       	pop	r11
    9f3c:	af 90       	pop	r10
    9f3e:	9f 90       	pop	r9
    9f40:	8f 90       	pop	r8
    9f42:	7f 90       	pop	r7
    9f44:	6f 90       	pop	r6
    9f46:	08 95       	ret

00009f48 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    9f48:	cf 93       	push	r28
    9f4a:	df 93       	push	r29
    9f4c:	00 d0       	rcall	.+0      	; 0x9f4e <_ZN5Servo17writeMicrosecondsEi+0x6>
    9f4e:	00 d0       	rcall	.+0      	; 0x9f50 <_ZN5Servo17writeMicrosecondsEi+0x8>
    9f50:	cd b7       	in	r28, 0x3d	; 61
    9f52:	de b7       	in	r29, 0x3e	; 62
    9f54:	9c 83       	std	Y+4, r25	; 0x04
    9f56:	8b 83       	std	Y+3, r24	; 0x03
    9f58:	7e 83       	std	Y+6, r23	; 0x06
    9f5a:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    9f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    9f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    9f60:	fc 01       	movw	r30, r24
    9f62:	80 81       	ld	r24, Z
    9f64:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    9f66:	89 81       	ldd	r24, Y+1	; 0x01
    9f68:	80 33       	cpi	r24, 0x30	; 48
    9f6a:	08 f0       	brcs	.+2      	; 0x9f6e <_ZN5Servo17writeMicrosecondsEi+0x26>
    9f6c:	99 c0       	rjmp	.+306    	; 0xa0a0 <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    9f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    9f70:	9c 81       	ldd	r25, Y+4	; 0x04
    9f72:	fc 01       	movw	r30, r24
    9f74:	81 81       	ldd	r24, Z+1	; 0x01
    9f76:	08 2e       	mov	r0, r24
    9f78:	00 0c       	add	r0, r0
    9f7a:	99 0b       	sbc	r25, r25
    9f7c:	28 e8       	ldi	r18, 0x88	; 136
    9f7e:	30 e0       	ldi	r19, 0x00	; 0
    9f80:	a9 01       	movw	r20, r18
    9f82:	48 1b       	sub	r20, r24
    9f84:	59 0b       	sbc	r21, r25
    9f86:	ca 01       	movw	r24, r20
    9f88:	9c 01       	movw	r18, r24
    9f8a:	22 0f       	add	r18, r18
    9f8c:	33 1f       	adc	r19, r19
    9f8e:	22 0f       	add	r18, r18
    9f90:	33 1f       	adc	r19, r19
    9f92:	8d 81       	ldd	r24, Y+5	; 0x05
    9f94:	9e 81       	ldd	r25, Y+6	; 0x06
    9f96:	82 17       	cp	r24, r18
    9f98:	93 07       	cpc	r25, r19
    9f9a:	a4 f4       	brge	.+40     	; 0x9fc4 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    9f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    9f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    9fa0:	fc 01       	movw	r30, r24
    9fa2:	81 81       	ldd	r24, Z+1	; 0x01
    9fa4:	08 2e       	mov	r0, r24
    9fa6:	00 0c       	add	r0, r0
    9fa8:	99 0b       	sbc	r25, r25
    9faa:	28 e8       	ldi	r18, 0x88	; 136
    9fac:	30 e0       	ldi	r19, 0x00	; 0
    9fae:	a9 01       	movw	r20, r18
    9fb0:	48 1b       	sub	r20, r24
    9fb2:	59 0b       	sbc	r21, r25
    9fb4:	ca 01       	movw	r24, r20
    9fb6:	88 0f       	add	r24, r24
    9fb8:	99 1f       	adc	r25, r25
    9fba:	88 0f       	add	r24, r24
    9fbc:	99 1f       	adc	r25, r25
    9fbe:	9e 83       	std	Y+6, r25	; 0x06
    9fc0:	8d 83       	std	Y+5, r24	; 0x05
    9fc2:	2a c0       	rjmp	.+84     	; 0xa018 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    9fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    9fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    9fc8:	fc 01       	movw	r30, r24
    9fca:	82 81       	ldd	r24, Z+2	; 0x02
    9fcc:	08 2e       	mov	r0, r24
    9fce:	00 0c       	add	r0, r0
    9fd0:	99 0b       	sbc	r25, r25
    9fd2:	28 e5       	ldi	r18, 0x58	; 88
    9fd4:	32 e0       	ldi	r19, 0x02	; 2
    9fd6:	a9 01       	movw	r20, r18
    9fd8:	48 1b       	sub	r20, r24
    9fda:	59 0b       	sbc	r21, r25
    9fdc:	ca 01       	movw	r24, r20
    9fde:	9c 01       	movw	r18, r24
    9fe0:	22 0f       	add	r18, r18
    9fe2:	33 1f       	adc	r19, r19
    9fe4:	22 0f       	add	r18, r18
    9fe6:	33 1f       	adc	r19, r19
    9fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    9fea:	9e 81       	ldd	r25, Y+6	; 0x06
    9fec:	28 17       	cp	r18, r24
    9fee:	39 07       	cpc	r19, r25
    9ff0:	9c f4       	brge	.+38     	; 0xa018 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    9ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    9ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    9ff6:	fc 01       	movw	r30, r24
    9ff8:	82 81       	ldd	r24, Z+2	; 0x02
    9ffa:	08 2e       	mov	r0, r24
    9ffc:	00 0c       	add	r0, r0
    9ffe:	99 0b       	sbc	r25, r25
    a000:	28 e5       	ldi	r18, 0x58	; 88
    a002:	32 e0       	ldi	r19, 0x02	; 2
    a004:	a9 01       	movw	r20, r18
    a006:	48 1b       	sub	r20, r24
    a008:	59 0b       	sbc	r21, r25
    a00a:	ca 01       	movw	r24, r20
    a00c:	88 0f       	add	r24, r24
    a00e:	99 1f       	adc	r25, r25
    a010:	88 0f       	add	r24, r24
    a012:	99 1f       	adc	r25, r25
    a014:	9e 83       	std	Y+6, r25	; 0x06
    a016:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    a018:	8d 81       	ldd	r24, Y+5	; 0x05
    a01a:	9e 81       	ldd	r25, Y+6	; 0x06
    a01c:	02 97       	sbiw	r24, 0x02	; 2
    a01e:	9e 83       	std	Y+6, r25	; 0x06
    a020:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    a022:	8d 81       	ldd	r24, Y+5	; 0x05
    a024:	9e 81       	ldd	r25, Y+6	; 0x06
    a026:	09 2e       	mov	r0, r25
    a028:	00 0c       	add	r0, r0
    a02a:	aa 0b       	sbc	r26, r26
    a02c:	bb 0b       	sbc	r27, r27
    a02e:	88 0f       	add	r24, r24
    a030:	99 1f       	adc	r25, r25
    a032:	aa 1f       	adc	r26, r26
    a034:	bb 1f       	adc	r27, r27
    a036:	88 0f       	add	r24, r24
    a038:	99 1f       	adc	r25, r25
    a03a:	aa 1f       	adc	r26, r26
    a03c:	bb 1f       	adc	r27, r27
    a03e:	88 0f       	add	r24, r24
    a040:	99 1f       	adc	r25, r25
    a042:	aa 1f       	adc	r26, r26
    a044:	bb 1f       	adc	r27, r27
    a046:	88 0f       	add	r24, r24
    a048:	99 1f       	adc	r25, r25
    a04a:	aa 1f       	adc	r26, r26
    a04c:	bb 1f       	adc	r27, r27
    a04e:	bb 23       	and	r27, r27
    a050:	1c f4       	brge	.+6      	; 0xa058 <_ZN5Servo17writeMicrosecondsEi+0x110>
    a052:	07 96       	adiw	r24, 0x07	; 7
    a054:	a1 1d       	adc	r26, r1
    a056:	b1 1d       	adc	r27, r1
    a058:	68 94       	set
    a05a:	12 f8       	bld	r1, 2
    a05c:	b5 95       	asr	r27
    a05e:	a7 95       	ror	r26
    a060:	97 95       	ror	r25
    a062:	87 95       	ror	r24
    a064:	16 94       	lsr	r1
    a066:	d1 f7       	brne	.-12     	; 0xa05c <_ZN5Servo17writeMicrosecondsEi+0x114>
    a068:	9e 83       	std	Y+6, r25	; 0x06
    a06a:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    a06c:	8f e5       	ldi	r24, 0x5F	; 95
    a06e:	90 e0       	ldi	r25, 0x00	; 0
    a070:	fc 01       	movw	r30, r24
    a072:	80 81       	ld	r24, Z
    a074:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    a076:	f8 94       	cli
    servos[channel].ticks = value;
    a078:	89 81       	ldd	r24, Y+1	; 0x01
    a07a:	28 2f       	mov	r18, r24
    a07c:	30 e0       	ldi	r19, 0x00	; 0
    a07e:	4d 81       	ldd	r20, Y+5	; 0x05
    a080:	5e 81       	ldd	r21, Y+6	; 0x06
    a082:	c9 01       	movw	r24, r18
    a084:	88 0f       	add	r24, r24
    a086:	99 1f       	adc	r25, r25
    a088:	82 0f       	add	r24, r18
    a08a:	93 1f       	adc	r25, r19
    a08c:	89 59       	subi	r24, 0x99	; 153
    a08e:	9b 4f       	sbci	r25, 0xFB	; 251
    a090:	fc 01       	movw	r30, r24
    a092:	51 83       	std	Z+1, r21	; 0x01
    a094:	40 83       	st	Z, r20
    SREG = oldSREG;
    a096:	8f e5       	ldi	r24, 0x5F	; 95
    a098:	90 e0       	ldi	r25, 0x00	; 0
    a09a:	2a 81       	ldd	r18, Y+2	; 0x02
    a09c:	fc 01       	movw	r30, r24
    a09e:	20 83       	st	Z, r18
  }
}
    a0a0:	00 00       	nop
    a0a2:	26 96       	adiw	r28, 0x06	; 6
    a0a4:	0f b6       	in	r0, 0x3f	; 63
    a0a6:	f8 94       	cli
    a0a8:	de bf       	out	0x3e, r29	; 62
    a0aa:	0f be       	out	0x3f, r0	; 63
    a0ac:	cd bf       	out	0x3d, r28	; 61
    a0ae:	df 91       	pop	r29
    a0b0:	cf 91       	pop	r28
    a0b2:	08 95       	ret

0000a0b4 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    a0b4:	cf 93       	push	r28
    a0b6:	df 93       	push	r29
    a0b8:	cd b7       	in	r28, 0x3d	; 61
    a0ba:	de b7       	in	r29, 0x3e	; 62
    a0bc:	2f 97       	sbiw	r28, 0x0f	; 15
    a0be:	0f b6       	in	r0, 0x3f	; 63
    a0c0:	f8 94       	cli
    a0c2:	de bf       	out	0x3e, r29	; 62
    a0c4:	0f be       	out	0x3f, r0	; 63
    a0c6:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    a0c8:	8f e5       	ldi	r24, 0x5F	; 95
    a0ca:	90 e0       	ldi	r25, 0x00	; 0
    a0cc:	fc 01       	movw	r30, r24
    a0ce:	80 81       	ld	r24, Z
    a0d0:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    a0d2:	f8 94       	cli
  if (!initialized) {
    a0d4:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <_ZN8SPIClass11initializedE>
    a0d8:	88 23       	and	r24, r24
    a0da:	09 f0       	breq	.+2      	; 0xa0de <_ZN8SPIClass5beginEv+0x2a>
    a0dc:	5b c0       	rjmp	.+182    	; 0xa194 <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    a0de:	81 e3       	ldi	r24, 0x31	; 49
    a0e0:	9c e0       	ldi	r25, 0x0C	; 12
    a0e2:	9b 83       	std	Y+3, r25	; 0x03
    a0e4:	8a 83       	std	Y+2, r24	; 0x02
    a0e6:	8a 81       	ldd	r24, Y+2	; 0x02
    a0e8:	9b 81       	ldd	r25, Y+3	; 0x03
    a0ea:	fc 01       	movw	r30, r24
    a0ec:	84 91       	lpm	r24, Z
    a0ee:	8c 83       	std	Y+4, r24	; 0x04
    a0f0:	8c 81       	ldd	r24, Y+4	; 0x04
    a0f2:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    a0f4:	8b ee       	ldi	r24, 0xEB	; 235
    a0f6:	9b e0       	ldi	r25, 0x0B	; 11
    a0f8:	9f 83       	std	Y+7, r25	; 0x07
    a0fa:	8e 83       	std	Y+6, r24	; 0x06
    a0fc:	8e 81       	ldd	r24, Y+6	; 0x06
    a0fe:	9f 81       	ldd	r25, Y+7	; 0x07
    a100:	fc 01       	movw	r30, r24
    a102:	84 91       	lpm	r24, Z
    a104:	88 87       	std	Y+8, r24	; 0x08
    a106:	88 85       	ldd	r24, Y+8	; 0x08
    a108:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    a10a:	8d 81       	ldd	r24, Y+5	; 0x05
    a10c:	88 2f       	mov	r24, r24
    a10e:	90 e0       	ldi	r25, 0x00	; 0
    a110:	88 0f       	add	r24, r24
    a112:	99 1f       	adc	r25, r25
    a114:	8a 58       	subi	r24, 0x8A	; 138
    a116:	93 4f       	sbci	r25, 0xF3	; 243
    a118:	9b 87       	std	Y+11, r25	; 0x0b
    a11a:	8a 87       	std	Y+10, r24	; 0x0a
    a11c:	8a 85       	ldd	r24, Y+10	; 0x0a
    a11e:	9b 85       	ldd	r25, Y+11	; 0x0b
    a120:	fc 01       	movw	r30, r24
    a122:	25 91       	lpm	r18, Z+
    a124:	34 91       	lpm	r19, Z
    a126:	cf 01       	movw	r24, r30
    a128:	3d 87       	std	Y+13, r19	; 0x0d
    a12a:	2c 87       	std	Y+12, r18	; 0x0c
    a12c:	9b 87       	std	Y+11, r25	; 0x0b
    a12e:	8a 87       	std	Y+10, r24	; 0x0a
    a130:	8c 85       	ldd	r24, Y+12	; 0x0c
    a132:	9d 85       	ldd	r25, Y+13	; 0x0d
    a134:	9f 87       	std	Y+15, r25	; 0x0f
    a136:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    a138:	8e 85       	ldd	r24, Y+14	; 0x0e
    a13a:	9f 85       	ldd	r25, Y+15	; 0x0f
    a13c:	fc 01       	movw	r30, r24
    a13e:	90 81       	ld	r25, Z
    a140:	89 85       	ldd	r24, Y+9	; 0x09
    a142:	98 23       	and	r25, r24
    a144:	81 e0       	ldi	r24, 0x01	; 1
    a146:	99 23       	and	r25, r25
    a148:	09 f0       	breq	.+2      	; 0xa14c <_ZN8SPIClass5beginEv+0x98>
    a14a:	80 e0       	ldi	r24, 0x00	; 0
    a14c:	88 23       	and	r24, r24
    a14e:	21 f0       	breq	.+8      	; 0xa158 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    a150:	61 e0       	ldi	r22, 0x01	; 1
    a152:	85 e3       	ldi	r24, 0x35	; 53
    a154:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    a158:	61 e0       	ldi	r22, 0x01	; 1
    a15a:	85 e3       	ldi	r24, 0x35	; 53
    a15c:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    a160:	8c e4       	ldi	r24, 0x4C	; 76
    a162:	90 e0       	ldi	r25, 0x00	; 0
    a164:	2c e4       	ldi	r18, 0x4C	; 76
    a166:	30 e0       	ldi	r19, 0x00	; 0
    a168:	f9 01       	movw	r30, r18
    a16a:	20 81       	ld	r18, Z
    a16c:	20 61       	ori	r18, 0x10	; 16
    a16e:	fc 01       	movw	r30, r24
    a170:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    a172:	8c e4       	ldi	r24, 0x4C	; 76
    a174:	90 e0       	ldi	r25, 0x00	; 0
    a176:	2c e4       	ldi	r18, 0x4C	; 76
    a178:	30 e0       	ldi	r19, 0x00	; 0
    a17a:	f9 01       	movw	r30, r18
    a17c:	20 81       	ld	r18, Z
    a17e:	20 64       	ori	r18, 0x40	; 64
    a180:	fc 01       	movw	r30, r24
    a182:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    a184:	61 e0       	ldi	r22, 0x01	; 1
    a186:	84 e3       	ldi	r24, 0x34	; 52
    a188:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
    pinMode(MOSI, OUTPUT);
    a18c:	61 e0       	ldi	r22, 0x01	; 1
    a18e:	83 e3       	ldi	r24, 0x33	; 51
    a190:	0e 94 16 61 	call	0xc22c	; 0xc22c <pinMode>
  }
  initialized++; // reference count
    a194:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <_ZN8SPIClass11initializedE>
    a198:	8f 5f       	subi	r24, 0xFF	; 255
    a19a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <_ZN8SPIClass11initializedE>
  SREG = sreg;
    a19e:	8f e5       	ldi	r24, 0x5F	; 95
    a1a0:	90 e0       	ldi	r25, 0x00	; 0
    a1a2:	29 81       	ldd	r18, Y+1	; 0x01
    a1a4:	fc 01       	movw	r30, r24
    a1a6:	20 83       	st	Z, r18
}
    a1a8:	00 00       	nop
    a1aa:	2f 96       	adiw	r28, 0x0f	; 15
    a1ac:	0f b6       	in	r0, 0x3f	; 63
    a1ae:	f8 94       	cli
    a1b0:	de bf       	out	0x3e, r29	; 62
    a1b2:	0f be       	out	0x3f, r0	; 63
    a1b4:	cd bf       	out	0x3d, r28	; 61
    a1b6:	df 91       	pop	r29
    a1b8:	cf 91       	pop	r28
    a1ba:	08 95       	ret

0000a1bc <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    a1bc:	1f 92       	push	r1
    a1be:	0f 92       	push	r0
    a1c0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a1c4:	0f 92       	push	r0
    a1c6:	11 24       	eor	r1, r1
    a1c8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a1cc:	0f 92       	push	r0
    a1ce:	2f 93       	push	r18
    a1d0:	3f 93       	push	r19
    a1d2:	4f 93       	push	r20
    a1d4:	5f 93       	push	r21
    a1d6:	6f 93       	push	r22
    a1d8:	7f 93       	push	r23
    a1da:	8f 93       	push	r24
    a1dc:	9f 93       	push	r25
    a1de:	af 93       	push	r26
    a1e0:	bf 93       	push	r27
    a1e2:	ef 93       	push	r30
    a1e4:	ff 93       	push	r31
    a1e6:	cf 93       	push	r28
    a1e8:	df 93       	push	r29
    a1ea:	cd b7       	in	r28, 0x3d	; 61
    a1ec:	de b7       	in	r29, 0x3e	; 62
  Timer1.isrCallback();
    a1ee:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZN8TimerOne11isrCallbackE>
    a1f2:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <_ZN8TimerOne11isrCallbackE+0x1>
    a1f6:	fc 01       	movw	r30, r24
    a1f8:	19 95       	eicall
}
    a1fa:	00 00       	nop
    a1fc:	df 91       	pop	r29
    a1fe:	cf 91       	pop	r28
    a200:	ff 91       	pop	r31
    a202:	ef 91       	pop	r30
    a204:	bf 91       	pop	r27
    a206:	af 91       	pop	r26
    a208:	9f 91       	pop	r25
    a20a:	8f 91       	pop	r24
    a20c:	7f 91       	pop	r23
    a20e:	6f 91       	pop	r22
    a210:	5f 91       	pop	r21
    a212:	4f 91       	pop	r20
    a214:	3f 91       	pop	r19
    a216:	2f 91       	pop	r18
    a218:	0f 90       	pop	r0
    a21a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a21e:	0f 90       	pop	r0
    a220:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a224:	0f 90       	pop	r0
    a226:	1f 90       	pop	r1
    a228:	18 95       	reti

0000a22a <__vector_35>:
void (*TimerThree::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER3_OVF_vect)
{
    a22a:	1f 92       	push	r1
    a22c:	0f 92       	push	r0
    a22e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a232:	0f 92       	push	r0
    a234:	11 24       	eor	r1, r1
    a236:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a23a:	0f 92       	push	r0
    a23c:	2f 93       	push	r18
    a23e:	3f 93       	push	r19
    a240:	4f 93       	push	r20
    a242:	5f 93       	push	r21
    a244:	6f 93       	push	r22
    a246:	7f 93       	push	r23
    a248:	8f 93       	push	r24
    a24a:	9f 93       	push	r25
    a24c:	af 93       	push	r26
    a24e:	bf 93       	push	r27
    a250:	ef 93       	push	r30
    a252:	ff 93       	push	r31
    a254:	cf 93       	push	r28
    a256:	df 93       	push	r29
    a258:	cd b7       	in	r28, 0x3d	; 61
    a25a:	de b7       	in	r29, 0x3e	; 62
  Timer3.isrCallback();
    a25c:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <_ZN10TimerThree11isrCallbackE>
    a260:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <_ZN10TimerThree11isrCallbackE+0x1>
    a264:	fc 01       	movw	r30, r24
    a266:	19 95       	eicall
}
    a268:	00 00       	nop
    a26a:	df 91       	pop	r29
    a26c:	cf 91       	pop	r28
    a26e:	ff 91       	pop	r31
    a270:	ef 91       	pop	r30
    a272:	bf 91       	pop	r27
    a274:	af 91       	pop	r26
    a276:	9f 91       	pop	r25
    a278:	8f 91       	pop	r24
    a27a:	7f 91       	pop	r23
    a27c:	6f 91       	pop	r22
    a27e:	5f 91       	pop	r21
    a280:	4f 91       	pop	r20
    a282:	3f 91       	pop	r19
    a284:	2f 91       	pop	r18
    a286:	0f 90       	pop	r0
    a288:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a28c:	0f 90       	pop	r0
    a28e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a292:	0f 90       	pop	r0
    a294:	1f 90       	pop	r1
    a296:	18 95       	reti

0000a298 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    a298:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <twi_state>
    a29c:	81 e0       	ldi	r24, 0x01	; 1
    a29e:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_sendStop>
    a2a2:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <twi_inRepStart>
    a2a6:	61 e0       	ldi	r22, 0x01	; 1
    a2a8:	84 e1       	ldi	r24, 0x14	; 20
    a2aa:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    a2ae:	61 e0       	ldi	r22, 0x01	; 1
    a2b0:	85 e1       	ldi	r24, 0x15	; 21
    a2b2:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    a2b6:	e9 eb       	ldi	r30, 0xB9	; 185
    a2b8:	f0 e0       	ldi	r31, 0x00	; 0
    a2ba:	80 81       	ld	r24, Z
    a2bc:	8e 7f       	andi	r24, 0xFE	; 254
    a2be:	80 83       	st	Z, r24
    a2c0:	80 81       	ld	r24, Z
    a2c2:	8d 7f       	andi	r24, 0xFD	; 253
    a2c4:	80 83       	st	Z, r24
    a2c6:	88 e4       	ldi	r24, 0x48	; 72
    a2c8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a2cc:	85 e4       	ldi	r24, 0x45	; 69
    a2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a2d2:	08 95       	ret

0000a2d4 <twi_disable>:
    a2d4:	ec eb       	ldi	r30, 0xBC	; 188
    a2d6:	f0 e0       	ldi	r31, 0x00	; 0
    a2d8:	80 81       	ld	r24, Z
    a2da:	8a 7b       	andi	r24, 0xBA	; 186
    a2dc:	80 83       	st	Z, r24
    a2de:	60 e0       	ldi	r22, 0x00	; 0
    a2e0:	84 e1       	ldi	r24, 0x14	; 20
    a2e2:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <digitalWrite>
    a2e6:	60 e0       	ldi	r22, 0x00	; 0
    a2e8:	85 e1       	ldi	r24, 0x15	; 21
    a2ea:	0c 94 52 61 	jmp	0xc2a4	; 0xc2a4 <digitalWrite>

0000a2ee <twi_setFrequency>:
    a2ee:	9b 01       	movw	r18, r22
    a2f0:	ac 01       	movw	r20, r24
    a2f2:	60 e0       	ldi	r22, 0x00	; 0
    a2f4:	74 e2       	ldi	r23, 0x24	; 36
    a2f6:	84 ef       	ldi	r24, 0xF4	; 244
    a2f8:	90 e0       	ldi	r25, 0x00	; 0
    a2fa:	0e 94 99 63 	call	0xc732	; 0xc732 <__udivmodsi4>
    a2fe:	da 01       	movw	r26, r20
    a300:	c9 01       	movw	r24, r18
    a302:	40 97       	sbiw	r24, 0x10	; 16
    a304:	a1 09       	sbc	r26, r1
    a306:	b1 09       	sbc	r27, r1
    a308:	b6 95       	lsr	r27
    a30a:	a7 95       	ror	r26
    a30c:	97 95       	ror	r25
    a30e:	87 95       	ror	r24
    a310:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a314:	08 95       	ret

0000a316 <twi_transmit>:
    a316:	40 91 29 05 	lds	r20, 0x0529	; 0x800529 <twi_txBufferLength>
    a31a:	26 2f       	mov	r18, r22
    a31c:	30 e0       	ldi	r19, 0x00	; 0
    a31e:	24 0f       	add	r18, r20
    a320:	31 1d       	adc	r19, r1
    a322:	21 32       	cpi	r18, 0x21	; 33
    a324:	31 05       	cpc	r19, r1
    a326:	dc f4       	brge	.+54     	; 0xa35e <twi_transmit+0x48>
    a328:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <twi_state>
    a32c:	24 30       	cpi	r18, 0x04	; 4
    a32e:	c9 f4       	brne	.+50     	; 0xa362 <twi_transmit+0x4c>
    a330:	fc 01       	movw	r30, r24
    a332:	80 e0       	ldi	r24, 0x00	; 0
    a334:	90 e0       	ldi	r25, 0x00	; 0
    a336:	86 17       	cp	r24, r22
    a338:	58 f4       	brcc	.+22     	; 0xa350 <twi_transmit+0x3a>
    a33a:	30 91 29 05 	lds	r19, 0x0529	; 0x800529 <twi_txBufferLength>
    a33e:	21 91       	ld	r18, Z+
    a340:	dc 01       	movw	r26, r24
    a342:	a5 5d       	subi	r26, 0xD5	; 213
    a344:	ba 4f       	sbci	r27, 0xFA	; 250
    a346:	a3 0f       	add	r26, r19
    a348:	b1 1d       	adc	r27, r1
    a34a:	2c 93       	st	X, r18
    a34c:	01 96       	adiw	r24, 0x01	; 1
    a34e:	f3 cf       	rjmp	.-26     	; 0xa336 <twi_transmit+0x20>
    a350:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <twi_txBufferLength>
    a354:	68 0f       	add	r22, r24
    a356:	60 93 29 05 	sts	0x0529, r22	; 0x800529 <twi_txBufferLength>
    a35a:	80 e0       	ldi	r24, 0x00	; 0
    a35c:	08 95       	ret
    a35e:	81 e0       	ldi	r24, 0x01	; 1
    a360:	08 95       	ret
    a362:	82 e0       	ldi	r24, 0x02	; 2
    a364:	08 95       	ret

0000a366 <twi_attachSlaveRxEvent>:
    a366:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <twi_onSlaveReceive+0x1>
    a36a:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_onSlaveReceive>
    a36e:	08 95       	ret

0000a370 <twi_attachSlaveTxEvent>:
    a370:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <twi_onSlaveTransmit+0x1>
    a374:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <twi_onSlaveTransmit>
    a378:	08 95       	ret

0000a37a <twi_releaseBus>:
    a37a:	85 ec       	ldi	r24, 0xC5	; 197
    a37c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a380:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <twi_state>
    a384:	08 95       	ret

0000a386 <twi_handleTimeout>:
    a386:	cf 93       	push	r28
    a388:	df 93       	push	r29
    a38a:	91 e0       	ldi	r25, 0x01	; 1
    a38c:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <twi_timed_out_flag>
    a390:	88 23       	and	r24, r24
    a392:	51 f0       	breq	.+20     	; 0xa3a8 <twi_handleTimeout+0x22>
    a394:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a398:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    a39c:	9b df       	rcall	.-202    	; 0xa2d4 <twi_disable>
    a39e:	7c df       	rcall	.-264    	; 0xa298 <twi_init>
    a3a0:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    a3a4:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a3a8:	df 91       	pop	r29
    a3aa:	cf 91       	pop	r28
    a3ac:	08 95       	ret

0000a3ae <twi_readFrom>:
    a3ae:	4f 92       	push	r4
    a3b0:	5f 92       	push	r5
    a3b2:	6f 92       	push	r6
    a3b4:	7f 92       	push	r7
    a3b6:	8f 92       	push	r8
    a3b8:	9f 92       	push	r9
    a3ba:	af 92       	push	r10
    a3bc:	bf 92       	push	r11
    a3be:	cf 92       	push	r12
    a3c0:	df 92       	push	r13
    a3c2:	ef 92       	push	r14
    a3c4:	ff 92       	push	r15
    a3c6:	0f 93       	push	r16
    a3c8:	1f 93       	push	r17
    a3ca:	cf 93       	push	r28
    a3cc:	df 93       	push	r29
    a3ce:	f8 2e       	mov	r15, r24
    a3d0:	16 2f       	mov	r17, r22
    a3d2:	07 2f       	mov	r16, r23
    a3d4:	c4 2f       	mov	r28, r20
    a3d6:	e2 2e       	mov	r14, r18
    a3d8:	41 32       	cpi	r20, 0x21	; 33
    a3da:	08 f0       	brcs	.+2      	; 0xa3de <twi_readFrom+0x30>
    a3dc:	bc c0       	rjmp	.+376    	; 0xa556 <twi_readFrom+0x1a8>
    a3de:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a3e2:	4b 01       	movw	r8, r22
    a3e4:	5c 01       	movw	r10, r24
    a3e6:	d0 91 7a 05 	lds	r29, 0x057A	; 0x80057a <twi_state>
    a3ea:	dd 23       	and	r29, r29
    a3ec:	29 f1       	breq	.+74     	; 0xa438 <twi_readFrom+0x8a>
    a3ee:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a3f2:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a3f6:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a3fa:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a3fe:	89 2b       	or	r24, r25
    a400:	8a 2b       	or	r24, r26
    a402:	8b 2b       	or	r24, r27
    a404:	81 f3       	breq	.-32     	; 0xa3e6 <twi_readFrom+0x38>
    a406:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a40a:	40 90 73 05 	lds	r4, 0x0573	; 0x800573 <twi_timeout_us>
    a40e:	50 90 74 05 	lds	r5, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a412:	60 90 75 05 	lds	r6, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a416:	70 90 76 05 	lds	r7, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a41a:	dc 01       	movw	r26, r24
    a41c:	cb 01       	movw	r24, r22
    a41e:	88 19       	sub	r24, r8
    a420:	99 09       	sbc	r25, r9
    a422:	aa 09       	sbc	r26, r10
    a424:	bb 09       	sbc	r27, r11
    a426:	48 16       	cp	r4, r24
    a428:	59 06       	cpc	r5, r25
    a42a:	6a 06       	cpc	r6, r26
    a42c:	7b 06       	cpc	r7, r27
    a42e:	d8 f6       	brcc	.-74     	; 0xa3e6 <twi_readFrom+0x38>
    a430:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_do_reset_on_timeout>
    a434:	a8 df       	rcall	.-176    	; 0xa386 <twi_handleTimeout>
    a436:	8f c0       	rjmp	.+286    	; 0xa556 <twi_readFrom+0x1a8>
    a438:	81 e0       	ldi	r24, 0x01	; 1
    a43a:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_state>
    a43e:	e0 92 78 05 	sts	0x0578, r14	; 0x800578 <twi_sendStop>
    a442:	9f ef       	ldi	r25, 0xFF	; 255
    a444:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <twi_error>
    a448:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <twi_masterBufferIndex>
    a44c:	9c 0f       	add	r25, r28
    a44e:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <twi_masterBufferLength>
    a452:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <twi_slarw>
    a456:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <twi_slarw>
    a45a:	8f 2d       	mov	r24, r15
    a45c:	88 0f       	add	r24, r24
    a45e:	89 2b       	or	r24, r25
    a460:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <twi_slarw>
    a464:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_inRepStart>
    a468:	81 30       	cpi	r24, 0x01	; 1
    a46a:	89 f5       	brne	.+98     	; 0xa4ce <twi_readFrom+0x120>
    a46c:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <twi_inRepStart>
    a470:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a474:	6b 01       	movw	r12, r22
    a476:	7c 01       	movw	r14, r24
    a478:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <twi_slarw>
    a47c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a480:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a484:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a488:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a48c:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a490:	89 2b       	or	r24, r25
    a492:	8a 2b       	or	r24, r26
    a494:	8b 2b       	or	r24, r27
    a496:	a9 f0       	breq	.+42     	; 0xa4c2 <twi_readFrom+0x114>
    a498:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a49c:	80 90 73 05 	lds	r8, 0x0573	; 0x800573 <twi_timeout_us>
    a4a0:	90 90 74 05 	lds	r9, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a4a4:	a0 90 75 05 	lds	r10, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a4a8:	b0 90 76 05 	lds	r11, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a4ac:	dc 01       	movw	r26, r24
    a4ae:	cb 01       	movw	r24, r22
    a4b0:	8c 19       	sub	r24, r12
    a4b2:	9d 09       	sbc	r25, r13
    a4b4:	ae 09       	sbc	r26, r14
    a4b6:	bf 09       	sbc	r27, r15
    a4b8:	88 16       	cp	r8, r24
    a4ba:	99 06       	cpc	r9, r25
    a4bc:	aa 06       	cpc	r10, r26
    a4be:	bb 06       	cpc	r11, r27
    a4c0:	90 f1       	brcs	.+100    	; 0xa526 <twi_readFrom+0x178>
    a4c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a4c6:	83 fd       	sbrc	r24, 3
    a4c8:	d7 cf       	rjmp	.-82     	; 0xa478 <twi_readFrom+0xca>
    a4ca:	85 ec       	ldi	r24, 0xC5	; 197
    a4cc:	01 c0       	rjmp	.+2      	; 0xa4d0 <twi_readFrom+0x122>
    a4ce:	85 ee       	ldi	r24, 0xE5	; 229
    a4d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a4d4:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a4d8:	6b 01       	movw	r12, r22
    a4da:	7c 01       	movw	r14, r24
    a4dc:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <twi_state>
    a4e0:	81 30       	cpi	r24, 0x01	; 1
    a4e2:	29 f5       	brne	.+74     	; 0xa52e <twi_readFrom+0x180>
    a4e4:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a4e8:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a4ec:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a4f0:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a4f4:	89 2b       	or	r24, r25
    a4f6:	8a 2b       	or	r24, r26
    a4f8:	8b 2b       	or	r24, r27
    a4fa:	81 f3       	breq	.-32     	; 0xa4dc <twi_readFrom+0x12e>
    a4fc:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a500:	80 90 73 05 	lds	r8, 0x0573	; 0x800573 <twi_timeout_us>
    a504:	90 90 74 05 	lds	r9, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a508:	a0 90 75 05 	lds	r10, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a50c:	b0 90 76 05 	lds	r11, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a510:	dc 01       	movw	r26, r24
    a512:	cb 01       	movw	r24, r22
    a514:	8c 19       	sub	r24, r12
    a516:	9d 09       	sbc	r25, r13
    a518:	ae 09       	sbc	r26, r14
    a51a:	bf 09       	sbc	r27, r15
    a51c:	88 16       	cp	r8, r24
    a51e:	99 06       	cpc	r9, r25
    a520:	aa 06       	cpc	r10, r26
    a522:	bb 06       	cpc	r11, r27
    a524:	d8 f6       	brcc	.-74     	; 0xa4dc <twi_readFrom+0x12e>
    a526:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_do_reset_on_timeout>
    a52a:	2d df       	rcall	.-422    	; 0xa386 <twi_handleTimeout>
    a52c:	15 c0       	rjmp	.+42     	; 0xa558 <twi_readFrom+0x1aa>
    a52e:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a532:	8c 17       	cp	r24, r28
    a534:	10 f4       	brcc	.+4      	; 0xa53a <twi_readFrom+0x18c>
    a536:	c0 91 4c 05 	lds	r28, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a53a:	ad e4       	ldi	r26, 0x4D	; 77
    a53c:	b5 e0       	ldi	r27, 0x05	; 5
    a53e:	91 2f       	mov	r25, r17
    a540:	e1 2f       	mov	r30, r17
    a542:	f0 2f       	mov	r31, r16
    a544:	8e 2f       	mov	r24, r30
    a546:	89 1b       	sub	r24, r25
    a548:	8c 17       	cp	r24, r28
    a54a:	18 f4       	brcc	.+6      	; 0xa552 <twi_readFrom+0x1a4>
    a54c:	8d 91       	ld	r24, X+
    a54e:	81 93       	st	Z+, r24
    a550:	f9 cf       	rjmp	.-14     	; 0xa544 <twi_readFrom+0x196>
    a552:	dc 2f       	mov	r29, r28
    a554:	01 c0       	rjmp	.+2      	; 0xa558 <twi_readFrom+0x1aa>
    a556:	d0 e0       	ldi	r29, 0x00	; 0
    a558:	8d 2f       	mov	r24, r29
    a55a:	df 91       	pop	r29
    a55c:	cf 91       	pop	r28
    a55e:	1f 91       	pop	r17
    a560:	0f 91       	pop	r16
    a562:	ff 90       	pop	r15
    a564:	ef 90       	pop	r14
    a566:	df 90       	pop	r13
    a568:	cf 90       	pop	r12
    a56a:	bf 90       	pop	r11
    a56c:	af 90       	pop	r10
    a56e:	9f 90       	pop	r9
    a570:	8f 90       	pop	r8
    a572:	7f 90       	pop	r7
    a574:	6f 90       	pop	r6
    a576:	5f 90       	pop	r5
    a578:	4f 90       	pop	r4
    a57a:	08 95       	ret

0000a57c <twi_writeTo>:
    a57c:	4f 92       	push	r4
    a57e:	5f 92       	push	r5
    a580:	6f 92       	push	r6
    a582:	7f 92       	push	r7
    a584:	8f 92       	push	r8
    a586:	9f 92       	push	r9
    a588:	af 92       	push	r10
    a58a:	bf 92       	push	r11
    a58c:	cf 92       	push	r12
    a58e:	df 92       	push	r13
    a590:	ef 92       	push	r14
    a592:	ff 92       	push	r15
    a594:	0f 93       	push	r16
    a596:	1f 93       	push	r17
    a598:	cf 93       	push	r28
    a59a:	df 93       	push	r29
    a59c:	41 32       	cpi	r20, 0x21	; 33
    a59e:	08 f0       	brcs	.+2      	; 0xa5a2 <twi_writeTo+0x26>
    a5a0:	c5 c0       	rjmp	.+394    	; 0xa72c <twi_writeTo+0x1b0>
    a5a2:	12 2f       	mov	r17, r18
    a5a4:	f4 2e       	mov	r15, r20
    a5a6:	d7 2e       	mov	r13, r23
    a5a8:	e6 2e       	mov	r14, r22
    a5aa:	d8 2f       	mov	r29, r24
    a5ac:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a5b0:	4b 01       	movw	r8, r22
    a5b2:	5c 01       	movw	r10, r24
    a5b4:	c0 91 7a 05 	lds	r28, 0x057A	; 0x80057a <twi_state>
    a5b8:	cc 23       	and	r28, r28
    a5ba:	11 f1       	breq	.+68     	; 0xa600 <twi_writeTo+0x84>
    a5bc:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a5c0:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a5c4:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a5c8:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a5cc:	89 2b       	or	r24, r25
    a5ce:	8a 2b       	or	r24, r26
    a5d0:	8b 2b       	or	r24, r27
    a5d2:	81 f3       	breq	.-32     	; 0xa5b4 <twi_writeTo+0x38>
    a5d4:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a5d8:	40 90 73 05 	lds	r4, 0x0573	; 0x800573 <twi_timeout_us>
    a5dc:	50 90 74 05 	lds	r5, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a5e0:	60 90 75 05 	lds	r6, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a5e4:	70 90 76 05 	lds	r7, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a5e8:	dc 01       	movw	r26, r24
    a5ea:	cb 01       	movw	r24, r22
    a5ec:	88 19       	sub	r24, r8
    a5ee:	99 09       	sbc	r25, r9
    a5f0:	aa 09       	sbc	r26, r10
    a5f2:	bb 09       	sbc	r27, r11
    a5f4:	48 16       	cp	r4, r24
    a5f6:	59 06       	cpc	r5, r25
    a5f8:	6a 06       	cpc	r6, r26
    a5fa:	7b 06       	cpc	r7, r27
    a5fc:	d8 f6       	brcc	.-74     	; 0xa5b4 <twi_writeTo+0x38>
    a5fe:	83 c0       	rjmp	.+262    	; 0xa706 <twi_writeTo+0x18a>
    a600:	82 e0       	ldi	r24, 0x02	; 2
    a602:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_state>
    a606:	00 93 78 05 	sts	0x0578, r16	; 0x800578 <twi_sendStop>
    a60a:	8f ef       	ldi	r24, 0xFF	; 255
    a60c:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_error>
    a610:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <twi_masterBufferIndex>
    a614:	f0 92 4b 05 	sts	0x054B, r15	; 0x80054b <twi_masterBufferLength>
    a618:	9e 2d       	mov	r25, r14
    a61a:	ad e4       	ldi	r26, 0x4D	; 77
    a61c:	b5 e0       	ldi	r27, 0x05	; 5
    a61e:	ee 2d       	mov	r30, r14
    a620:	fd 2d       	mov	r31, r13
    a622:	8e 2f       	mov	r24, r30
    a624:	89 1b       	sub	r24, r25
    a626:	8f 15       	cp	r24, r15
    a628:	18 f4       	brcc	.+6      	; 0xa630 <twi_writeTo+0xb4>
    a62a:	81 91       	ld	r24, Z+
    a62c:	8d 93       	st	X+, r24
    a62e:	f9 cf       	rjmp	.-14     	; 0xa622 <twi_writeTo+0xa6>
    a630:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <twi_slarw>
    a634:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <twi_slarw>
    a638:	dd 0f       	add	r29, r29
    a63a:	d9 2b       	or	r29, r25
    a63c:	d0 93 79 05 	sts	0x0579, r29	; 0x800579 <twi_slarw>
    a640:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_inRepStart>
    a644:	81 30       	cpi	r24, 0x01	; 1
    a646:	89 f5       	brne	.+98     	; 0xa6aa <twi_writeTo+0x12e>
    a648:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <twi_inRepStart>
    a64c:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a650:	6b 01       	movw	r12, r22
    a652:	7c 01       	movw	r14, r24
    a654:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <twi_slarw>
    a658:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a65c:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a660:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a664:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a668:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a66c:	89 2b       	or	r24, r25
    a66e:	8a 2b       	or	r24, r26
    a670:	8b 2b       	or	r24, r27
    a672:	a9 f0       	breq	.+42     	; 0xa69e <twi_writeTo+0x122>
    a674:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a678:	80 90 73 05 	lds	r8, 0x0573	; 0x800573 <twi_timeout_us>
    a67c:	90 90 74 05 	lds	r9, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a680:	a0 90 75 05 	lds	r10, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a684:	b0 90 76 05 	lds	r11, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a688:	dc 01       	movw	r26, r24
    a68a:	cb 01       	movw	r24, r22
    a68c:	8c 19       	sub	r24, r12
    a68e:	9d 09       	sbc	r25, r13
    a690:	ae 09       	sbc	r26, r14
    a692:	bf 09       	sbc	r27, r15
    a694:	88 16       	cp	r8, r24
    a696:	99 06       	cpc	r9, r25
    a698:	aa 06       	cpc	r10, r26
    a69a:	bb 06       	cpc	r11, r27
    a69c:	a0 f1       	brcs	.+104    	; 0xa706 <twi_writeTo+0x18a>
    a69e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a6a2:	83 fd       	sbrc	r24, 3
    a6a4:	d7 cf       	rjmp	.-82     	; 0xa654 <twi_writeTo+0xd8>
    a6a6:	85 ec       	ldi	r24, 0xC5	; 197
    a6a8:	01 c0       	rjmp	.+2      	; 0xa6ac <twi_writeTo+0x130>
    a6aa:	85 ee       	ldi	r24, 0xE5	; 229
    a6ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a6b0:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a6b4:	6b 01       	movw	r12, r22
    a6b6:	7c 01       	movw	r14, r24
    a6b8:	11 23       	and	r17, r17
    a6ba:	51 f1       	breq	.+84     	; 0xa710 <twi_writeTo+0x194>
    a6bc:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <twi_state>
    a6c0:	82 30       	cpi	r24, 0x02	; 2
    a6c2:	31 f5       	brne	.+76     	; 0xa710 <twi_writeTo+0x194>
    a6c4:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a6c8:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a6cc:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a6d0:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a6d4:	89 2b       	or	r24, r25
    a6d6:	8a 2b       	or	r24, r26
    a6d8:	8b 2b       	or	r24, r27
    a6da:	71 f3       	breq	.-36     	; 0xa6b8 <twi_writeTo+0x13c>
    a6dc:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <micros>
    a6e0:	80 90 73 05 	lds	r8, 0x0573	; 0x800573 <twi_timeout_us>
    a6e4:	90 90 74 05 	lds	r9, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a6e8:	a0 90 75 05 	lds	r10, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a6ec:	b0 90 76 05 	lds	r11, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a6f0:	dc 01       	movw	r26, r24
    a6f2:	cb 01       	movw	r24, r22
    a6f4:	8c 19       	sub	r24, r12
    a6f6:	9d 09       	sbc	r25, r13
    a6f8:	ae 09       	sbc	r26, r14
    a6fa:	bf 09       	sbc	r27, r15
    a6fc:	88 16       	cp	r8, r24
    a6fe:	99 06       	cpc	r9, r25
    a700:	aa 06       	cpc	r10, r26
    a702:	bb 06       	cpc	r11, r27
    a704:	c8 f6       	brcc	.-78     	; 0xa6b8 <twi_writeTo+0x13c>
    a706:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_do_reset_on_timeout>
    a70a:	3d de       	rcall	.-902    	; 0xa386 <twi_handleTimeout>
    a70c:	c5 e0       	ldi	r28, 0x05	; 5
    a70e:	13 c0       	rjmp	.+38     	; 0xa736 <twi_writeTo+0x1ba>
    a710:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <twi_error>
    a714:	8f 3f       	cpi	r24, 0xFF	; 255
    a716:	79 f0       	breq	.+30     	; 0xa736 <twi_writeTo+0x1ba>
    a718:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <twi_error>
    a71c:	80 32       	cpi	r24, 0x20	; 32
    a71e:	41 f0       	breq	.+16     	; 0xa730 <twi_writeTo+0x1b4>
    a720:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <twi_error>
    a724:	80 33       	cpi	r24, 0x30	; 48
    a726:	31 f0       	breq	.+12     	; 0xa734 <twi_writeTo+0x1b8>
    a728:	c4 e0       	ldi	r28, 0x04	; 4
    a72a:	05 c0       	rjmp	.+10     	; 0xa736 <twi_writeTo+0x1ba>
    a72c:	c1 e0       	ldi	r28, 0x01	; 1
    a72e:	03 c0       	rjmp	.+6      	; 0xa736 <twi_writeTo+0x1ba>
    a730:	c2 e0       	ldi	r28, 0x02	; 2
    a732:	01 c0       	rjmp	.+2      	; 0xa736 <twi_writeTo+0x1ba>
    a734:	c3 e0       	ldi	r28, 0x03	; 3
    a736:	8c 2f       	mov	r24, r28
    a738:	df 91       	pop	r29
    a73a:	cf 91       	pop	r28
    a73c:	1f 91       	pop	r17
    a73e:	0f 91       	pop	r16
    a740:	ff 90       	pop	r15
    a742:	ef 90       	pop	r14
    a744:	df 90       	pop	r13
    a746:	cf 90       	pop	r12
    a748:	bf 90       	pop	r11
    a74a:	af 90       	pop	r10
    a74c:	9f 90       	pop	r9
    a74e:	8f 90       	pop	r8
    a750:	7f 90       	pop	r7
    a752:	6f 90       	pop	r6
    a754:	5f 90       	pop	r5
    a756:	4f 90       	pop	r4
    a758:	08 95       	ret

0000a75a <twi_stop>:
    a75a:	85 ed       	ldi	r24, 0xD5	; 213
    a75c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a760:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a764:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a768:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a76c:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a770:	07 96       	adiw	r24, 0x07	; 7
    a772:	a1 1d       	adc	r26, r1
    a774:	b1 1d       	adc	r27, r1
    a776:	23 e0       	ldi	r18, 0x03	; 3
    a778:	b6 95       	lsr	r27
    a77a:	a7 95       	ror	r26
    a77c:	97 95       	ror	r25
    a77e:	87 95       	ror	r24
    a780:	2a 95       	dec	r18
    a782:	d1 f7       	brne	.-12     	; 0xa778 <twi_stop+0x1e>
    a784:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a788:	24 ff       	sbrs	r18, 4
    a78a:	1b c0       	rjmp	.+54     	; 0xa7c2 <twi_stop+0x68>
    a78c:	40 91 73 05 	lds	r20, 0x0573	; 0x800573 <twi_timeout_us>
    a790:	50 91 74 05 	lds	r21, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a794:	60 91 75 05 	lds	r22, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a798:	70 91 76 05 	lds	r23, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a79c:	45 2b       	or	r20, r21
    a79e:	46 2b       	or	r20, r22
    a7a0:	47 2b       	or	r20, r23
    a7a2:	81 f3       	breq	.-32     	; 0xa784 <twi_stop+0x2a>
    a7a4:	00 97       	sbiw	r24, 0x00	; 0
    a7a6:	a1 05       	cpc	r26, r1
    a7a8:	b1 05       	cpc	r27, r1
    a7aa:	41 f0       	breq	.+16     	; 0xa7bc <twi_stop+0x62>
    a7ac:	25 e3       	ldi	r18, 0x35	; 53
    a7ae:	2a 95       	dec	r18
    a7b0:	f1 f7       	brne	.-4      	; 0xa7ae <twi_stop+0x54>
    a7b2:	00 00       	nop
    a7b4:	01 97       	sbiw	r24, 0x01	; 1
    a7b6:	a1 09       	sbc	r26, r1
    a7b8:	b1 09       	sbc	r27, r1
    a7ba:	e4 cf       	rjmp	.-56     	; 0xa784 <twi_stop+0x2a>
    a7bc:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_do_reset_on_timeout>
    a7c0:	e2 cd       	rjmp	.-1084   	; 0xa386 <twi_handleTimeout>
    a7c2:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <twi_state>
    a7c6:	08 95       	ret

0000a7c8 <__vector_39>:

ISR(TWI_vect)
{
    a7c8:	1f 92       	push	r1
    a7ca:	0f 92       	push	r0
    a7cc:	0f b6       	in	r0, 0x3f	; 63
    a7ce:	0f 92       	push	r0
    a7d0:	11 24       	eor	r1, r1
    a7d2:	0b b6       	in	r0, 0x3b	; 59
    a7d4:	0f 92       	push	r0
    a7d6:	2f 93       	push	r18
    a7d8:	3f 93       	push	r19
    a7da:	4f 93       	push	r20
    a7dc:	5f 93       	push	r21
    a7de:	6f 93       	push	r22
    a7e0:	7f 93       	push	r23
    a7e2:	8f 93       	push	r24
    a7e4:	9f 93       	push	r25
    a7e6:	af 93       	push	r26
    a7e8:	bf 93       	push	r27
    a7ea:	ef 93       	push	r30
    a7ec:	ff 93       	push	r31
  switch(TW_STATUS){
    a7ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    a7f2:	88 7f       	andi	r24, 0xF8	; 248
    a7f4:	80 36       	cpi	r24, 0x60	; 96
    a7f6:	09 f4       	brne	.+2      	; 0xa7fa <__vector_39+0x32>
    a7f8:	9d c0       	rjmp	.+314    	; 0xa934 <__vector_39+0x16c>
    a7fa:	70 f5       	brcc	.+92     	; 0xa858 <__vector_39+0x90>
    a7fc:	88 32       	cpi	r24, 0x28	; 40
    a7fe:	09 f4       	brne	.+2      	; 0xa802 <__vector_39+0x3a>
    a800:	5c c0       	rjmp	.+184    	; 0xa8ba <__vector_39+0xf2>
    a802:	90 f4       	brcc	.+36     	; 0xa828 <__vector_39+0x60>
    a804:	80 31       	cpi	r24, 0x10	; 16
    a806:	09 f4       	brne	.+2      	; 0xa80a <__vector_39+0x42>
    a808:	55 c0       	rjmp	.+170    	; 0xa8b4 <__vector_39+0xec>
    a80a:	38 f4       	brcc	.+14     	; 0xa81a <__vector_39+0x52>
    a80c:	88 23       	and	r24, r24
    a80e:	09 f4       	brne	.+2      	; 0xa812 <__vector_39+0x4a>
    a810:	f3 c0       	rjmp	.+486    	; 0xa9f8 <__vector_39+0x230>
    a812:	88 30       	cpi	r24, 0x08	; 8
    a814:	09 f4       	brne	.+2      	; 0xa818 <__vector_39+0x50>
    a816:	4e c0       	rjmp	.+156    	; 0xa8b4 <__vector_39+0xec>
    a818:	f2 c0       	rjmp	.+484    	; 0xa9fe <__vector_39+0x236>
    a81a:	88 31       	cpi	r24, 0x18	; 24
    a81c:	09 f4       	brne	.+2      	; 0xa820 <__vector_39+0x58>
    a81e:	4d c0       	rjmp	.+154    	; 0xa8ba <__vector_39+0xf2>
    a820:	80 32       	cpi	r24, 0x20	; 32
    a822:	09 f4       	brne	.+2      	; 0xa826 <__vector_39+0x5e>
    a824:	5e c0       	rjmp	.+188    	; 0xa8e2 <__vector_39+0x11a>
    a826:	eb c0       	rjmp	.+470    	; 0xa9fe <__vector_39+0x236>
    a828:	80 34       	cpi	r24, 0x40	; 64
    a82a:	09 f4       	brne	.+2      	; 0xa82e <__vector_39+0x66>
    a82c:	69 c0       	rjmp	.+210    	; 0xa900 <__vector_39+0x138>
    a82e:	50 f4       	brcc	.+20     	; 0xa844 <__vector_39+0x7c>
    a830:	80 33       	cpi	r24, 0x30	; 48
    a832:	09 f4       	brne	.+2      	; 0xa836 <__vector_39+0x6e>
    a834:	56 c0       	rjmp	.+172    	; 0xa8e2 <__vector_39+0x11a>
    a836:	88 33       	cpi	r24, 0x38	; 56
    a838:	09 f0       	breq	.+2      	; 0xa83c <__vector_39+0x74>
    a83a:	e1 c0       	rjmp	.+450    	; 0xa9fe <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    a83c:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_error>
      twi_releaseBus();
    a840:	9c dd       	rcall	.-1224   	; 0xa37a <twi_releaseBus>
      break;
    a842:	dd c0       	rjmp	.+442    	; 0xa9fe <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    a844:	80 35       	cpi	r24, 0x50	; 80
    a846:	09 f4       	brne	.+2      	; 0xa84a <__vector_39+0x82>
    a848:	4f c0       	rjmp	.+158    	; 0xa8e8 <__vector_39+0x120>
    a84a:	88 35       	cpi	r24, 0x58	; 88
    a84c:	09 f4       	brne	.+2      	; 0xa850 <__vector_39+0x88>
    a84e:	5d c0       	rjmp	.+186    	; 0xa90a <__vector_39+0x142>
    a850:	88 34       	cpi	r24, 0x48	; 72
    a852:	09 f0       	breq	.+2      	; 0xa856 <__vector_39+0x8e>
    a854:	d4 c0       	rjmp	.+424    	; 0xa9fe <__vector_39+0x236>
    a856:	d2 c0       	rjmp	.+420    	; 0xa9fc <__vector_39+0x234>
    a858:	88 39       	cpi	r24, 0x98	; 152
    a85a:	09 f4       	brne	.+2      	; 0xa85e <__vector_39+0x96>
    a85c:	c3 c0       	rjmp	.+390    	; 0xa9e4 <__vector_39+0x21c>
    a85e:	a8 f4       	brcc	.+42     	; 0xa88a <__vector_39+0xc2>
    a860:	88 37       	cpi	r24, 0x78	; 120
    a862:	09 f4       	brne	.+2      	; 0xa866 <__vector_39+0x9e>
    a864:	67 c0       	rjmp	.+206    	; 0xa934 <__vector_39+0x16c>
    a866:	38 f4       	brcc	.+14     	; 0xa876 <__vector_39+0xae>
    a868:	88 36       	cpi	r24, 0x68	; 104
    a86a:	09 f4       	brne	.+2      	; 0xa86e <__vector_39+0xa6>
    a86c:	63 c0       	rjmp	.+198    	; 0xa934 <__vector_39+0x16c>
    a86e:	80 37       	cpi	r24, 0x70	; 112
    a870:	09 f4       	brne	.+2      	; 0xa874 <__vector_39+0xac>
    a872:	60 c0       	rjmp	.+192    	; 0xa934 <__vector_39+0x16c>
    a874:	c4 c0       	rjmp	.+392    	; 0xa9fe <__vector_39+0x236>
    a876:	88 38       	cpi	r24, 0x88	; 136
    a878:	09 f4       	brne	.+2      	; 0xa87c <__vector_39+0xb4>
    a87a:	b4 c0       	rjmp	.+360    	; 0xa9e4 <__vector_39+0x21c>
    a87c:	80 39       	cpi	r24, 0x90	; 144
    a87e:	09 f4       	brne	.+2      	; 0xa882 <__vector_39+0xba>
    a880:	5f c0       	rjmp	.+190    	; 0xa940 <__vector_39+0x178>
    a882:	80 38       	cpi	r24, 0x80	; 128
    a884:	09 f0       	breq	.+2      	; 0xa888 <__vector_39+0xc0>
    a886:	bb c0       	rjmp	.+374    	; 0xa9fe <__vector_39+0x236>
    a888:	5b c0       	rjmp	.+182    	; 0xa940 <__vector_39+0x178>
    a88a:	80 3b       	cpi	r24, 0xB0	; 176
    a88c:	09 f4       	brne	.+2      	; 0xa890 <__vector_39+0xc8>
    a88e:	82 c0       	rjmp	.+260    	; 0xa994 <__vector_39+0x1cc>
    a890:	38 f4       	brcc	.+14     	; 0xa8a0 <__vector_39+0xd8>
    a892:	80 3a       	cpi	r24, 0xA0	; 160
    a894:	09 f4       	brne	.+2      	; 0xa898 <__vector_39+0xd0>
    a896:	66 c0       	rjmp	.+204    	; 0xa964 <__vector_39+0x19c>
    a898:	88 3a       	cpi	r24, 0xA8	; 168
    a89a:	09 f4       	brne	.+2      	; 0xa89e <__vector_39+0xd6>
    a89c:	7b c0       	rjmp	.+246    	; 0xa994 <__vector_39+0x1cc>
    a89e:	af c0       	rjmp	.+350    	; 0xa9fe <__vector_39+0x236>
    a8a0:	80 3c       	cpi	r24, 0xC0	; 192
    a8a2:	09 f4       	brne	.+2      	; 0xa8a6 <__vector_39+0xde>
    a8a4:	a3 c0       	rjmp	.+326    	; 0xa9ec <__vector_39+0x224>
    a8a6:	88 3c       	cpi	r24, 0xC8	; 200
    a8a8:	09 f4       	brne	.+2      	; 0xa8ac <__vector_39+0xe4>
    a8aa:	a0 c0       	rjmp	.+320    	; 0xa9ec <__vector_39+0x224>
    a8ac:	88 3b       	cpi	r24, 0xB8	; 184
    a8ae:	09 f4       	brne	.+2      	; 0xa8b2 <__vector_39+0xea>
    a8b0:	86 c0       	rjmp	.+268    	; 0xa9be <__vector_39+0x1f6>
    a8b2:	a5 c0       	rjmp	.+330    	; 0xa9fe <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    a8b4:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <twi_slarw>
    a8b8:	10 c0       	rjmp	.+32     	; 0xa8da <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    a8ba:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a8be:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <twi_masterBufferLength>
    a8c2:	98 17       	cp	r25, r24
    a8c4:	70 f5       	brcc	.+92     	; 0xa922 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    a8c6:	e0 91 4c 05 	lds	r30, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a8ca:	81 e0       	ldi	r24, 0x01	; 1
    a8cc:	8e 0f       	add	r24, r30
    a8ce:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <twi_masterBufferIndex>
    a8d2:	f0 e0       	ldi	r31, 0x00	; 0
    a8d4:	e3 5b       	subi	r30, 0xB3	; 179
    a8d6:	fa 4f       	sbci	r31, 0xFA	; 250
    a8d8:	80 81       	ld	r24, Z
    a8da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    a8de:	85 ec       	ldi	r24, 0xC5	; 197
    a8e0:	82 c0       	rjmp	.+260    	; 0xa9e6 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    a8e2:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_error>
    a8e6:	8a c0       	rjmp	.+276    	; 0xa9fc <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    a8e8:	e0 91 4c 05 	lds	r30, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a8ec:	81 e0       	ldi	r24, 0x01	; 1
    a8ee:	8e 0f       	add	r24, r30
    a8f0:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <twi_masterBufferIndex>
    a8f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a8f8:	f0 e0       	ldi	r31, 0x00	; 0
    a8fa:	e3 5b       	subi	r30, 0xB3	; 179
    a8fc:	fa 4f       	sbci	r31, 0xFA	; 250
    a8fe:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    a900:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a904:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <twi_masterBufferLength>
    a908:	6a c0       	rjmp	.+212    	; 0xa9de <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    a90a:	e0 91 4c 05 	lds	r30, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a90e:	81 e0       	ldi	r24, 0x01	; 1
    a910:	8e 0f       	add	r24, r30
    a912:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <twi_masterBufferIndex>
    a916:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a91a:	f0 e0       	ldi	r31, 0x00	; 0
    a91c:	e3 5b       	subi	r30, 0xB3	; 179
    a91e:	fa 4f       	sbci	r31, 0xFA	; 250
    a920:	80 83       	st	Z, r24
      if (twi_sendStop){
    a922:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <twi_sendStop>
    a926:	81 11       	cpse	r24, r1
    a928:	69 c0       	rjmp	.+210    	; 0xa9fc <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    a92a:	81 e0       	ldi	r24, 0x01	; 1
    a92c:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    a930:	84 ea       	ldi	r24, 0xA4	; 164
    a932:	5d c0       	rjmp	.+186    	; 0xa9ee <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    a934:	83 e0       	ldi	r24, 0x03	; 3
    a936:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    a93a:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <twi_rxBufferIndex>
    a93e:	cf cf       	rjmp	.-98     	; 0xa8de <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    a940:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a944:	80 32       	cpi	r24, 0x20	; 32
    a946:	08 f0       	brcs	.+2      	; 0xa94a <__vector_39+0x182>
    a948:	4d c0       	rjmp	.+154    	; 0xa9e4 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    a94a:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a94e:	81 e0       	ldi	r24, 0x01	; 1
    a950:	8e 0f       	add	r24, r30
    a952:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <twi_rxBufferIndex>
    a956:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a95a:	f0 e0       	ldi	r31, 0x00	; 0
    a95c:	e7 5f       	subi	r30, 0xF7	; 247
    a95e:	fa 4f       	sbci	r31, 0xFA	; 250
    a960:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    a962:	bd cf       	rjmp	.-134    	; 0xa8de <__vector_39+0x116>
    a964:	0a dd       	rcall	.-1516   	; 0xa37a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    a966:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a96a:	80 32       	cpi	r24, 0x20	; 32
    a96c:	30 f4       	brcc	.+12     	; 0xa97a <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    a96e:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a972:	f0 e0       	ldi	r31, 0x00	; 0
    a974:	e7 5f       	subi	r30, 0xF7	; 247
    a976:	fa 4f       	sbci	r31, 0xFA	; 250
    a978:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    a97a:	60 91 08 05 	lds	r22, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a97e:	70 e0       	ldi	r23, 0x00	; 0
    a980:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <twi_onSlaveReceive>
    a984:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <twi_onSlaveReceive+0x1>
    a988:	89 e0       	ldi	r24, 0x09	; 9
    a98a:	95 e0       	ldi	r25, 0x05	; 5
    a98c:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    a98e:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <twi_rxBufferIndex>
      break;
    a992:	35 c0       	rjmp	.+106    	; 0xa9fe <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    a994:	84 e0       	ldi	r24, 0x04	; 4
    a996:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    a99a:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    a99e:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    a9a2:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <twi_onSlaveTransmit>
    a9a6:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <twi_onSlaveTransmit+0x1>
    a9aa:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    a9ac:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <twi_txBufferLength>
    a9b0:	81 11       	cpse	r24, r1
    a9b2:	05 c0       	rjmp	.+10     	; 0xa9be <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    a9b4:	81 e0       	ldi	r24, 0x01	; 1
    a9b6:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    a9ba:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    a9be:	e0 91 2a 05 	lds	r30, 0x052A	; 0x80052a <twi_txBufferIndex>
    a9c2:	81 e0       	ldi	r24, 0x01	; 1
    a9c4:	8e 0f       	add	r24, r30
    a9c6:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <twi_txBufferIndex>
    a9ca:	f0 e0       	ldi	r31, 0x00	; 0
    a9cc:	e5 5d       	subi	r30, 0xD5	; 213
    a9ce:	fa 4f       	sbci	r31, 0xFA	; 250
    a9d0:	80 81       	ld	r24, Z
    a9d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    a9d6:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <twi_txBufferIndex>
    a9da:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <twi_txBufferLength>
    a9de:	98 17       	cp	r25, r24
    a9e0:	08 f4       	brcc	.+2      	; 0xa9e4 <__vector_39+0x21c>
    a9e2:	7d cf       	rjmp	.-262    	; 0xa8de <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    a9e4:	85 e8       	ldi	r24, 0x85	; 133
    a9e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a9ea:	09 c0       	rjmp	.+18     	; 0xa9fe <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    a9ec:	85 ec       	ldi	r24, 0xC5	; 197
    a9ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    a9f2:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <twi_state>
      break;
    a9f6:	03 c0       	rjmp	.+6      	; 0xa9fe <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    a9f8:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <twi_error>
      twi_stop();
    a9fc:	ae de       	rcall	.-676    	; 0xa75a <twi_stop>
      break;
  }
}
    a9fe:	ff 91       	pop	r31
    aa00:	ef 91       	pop	r30
    aa02:	bf 91       	pop	r27
    aa04:	af 91       	pop	r26
    aa06:	9f 91       	pop	r25
    aa08:	8f 91       	pop	r24
    aa0a:	7f 91       	pop	r23
    aa0c:	6f 91       	pop	r22
    aa0e:	5f 91       	pop	r21
    aa10:	4f 91       	pop	r20
    aa12:	3f 91       	pop	r19
    aa14:	2f 91       	pop	r18
    aa16:	0f 90       	pop	r0
    aa18:	0b be       	out	0x3b, r0	; 59
    aa1a:	0f 90       	pop	r0
    aa1c:	0f be       	out	0x3f, r0	; 63
    aa1e:	0f 90       	pop	r0
    aa20:	1f 90       	pop	r1
    aa22:	18 95       	reti

0000aa24 <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    aa24:	cf 93       	push	r28
    aa26:	df 93       	push	r29
    aa28:	00 d0       	rcall	.+0      	; 0xaa2a <_ZN5Print13setWriteErrorEi+0x6>
    aa2a:	1f 92       	push	r1
    aa2c:	cd b7       	in	r28, 0x3d	; 61
    aa2e:	de b7       	in	r29, 0x3e	; 62
    aa30:	9a 83       	std	Y+2, r25	; 0x02
    aa32:	89 83       	std	Y+1, r24	; 0x01
    aa34:	7c 83       	std	Y+4, r23	; 0x04
    aa36:	6b 83       	std	Y+3, r22	; 0x03
    aa38:	89 81       	ldd	r24, Y+1	; 0x01
    aa3a:	9a 81       	ldd	r25, Y+2	; 0x02
    aa3c:	2b 81       	ldd	r18, Y+3	; 0x03
    aa3e:	3c 81       	ldd	r19, Y+4	; 0x04
    aa40:	fc 01       	movw	r30, r24
    aa42:	33 83       	std	Z+3, r19	; 0x03
    aa44:	22 83       	std	Z+2, r18	; 0x02
    aa46:	00 00       	nop
    aa48:	0f 90       	pop	r0
    aa4a:	0f 90       	pop	r0
    aa4c:	0f 90       	pop	r0
    aa4e:	0f 90       	pop	r0
    aa50:	df 91       	pop	r29
    aa52:	cf 91       	pop	r28
    aa54:	08 95       	ret

0000aa56 <_ZN6StreamC1Ev>:
    aa56:	cf 93       	push	r28
    aa58:	df 93       	push	r29
    aa5a:	1f 92       	push	r1
    aa5c:	1f 92       	push	r1
    aa5e:	cd b7       	in	r28, 0x3d	; 61
    aa60:	de b7       	in	r29, 0x3e	; 62
    aa62:	9a 83       	std	Y+2, r25	; 0x02
    aa64:	89 83       	std	Y+1, r24	; 0x01
    aa66:	89 81       	ldd	r24, Y+1	; 0x01
    aa68:	9a 81       	ldd	r25, Y+2	; 0x02
    aa6a:	0e 94 42 13 	call	0x2684	; 0x2684 <_ZN5PrintC1Ev>
    aa6e:	2b e2       	ldi	r18, 0x2B	; 43
    aa70:	33 e0       	ldi	r19, 0x03	; 3
    aa72:	89 81       	ldd	r24, Y+1	; 0x01
    aa74:	9a 81       	ldd	r25, Y+2	; 0x02
    aa76:	fc 01       	movw	r30, r24
    aa78:	31 83       	std	Z+1, r19	; 0x01
    aa7a:	20 83       	st	Z, r18
    aa7c:	29 81       	ldd	r18, Y+1	; 0x01
    aa7e:	3a 81       	ldd	r19, Y+2	; 0x02
    aa80:	88 ee       	ldi	r24, 0xE8	; 232
    aa82:	93 e0       	ldi	r25, 0x03	; 3
    aa84:	a0 e0       	ldi	r26, 0x00	; 0
    aa86:	b0 e0       	ldi	r27, 0x00	; 0
    aa88:	f9 01       	movw	r30, r18
    aa8a:	84 83       	std	Z+4, r24	; 0x04
    aa8c:	95 83       	std	Z+5, r25	; 0x05
    aa8e:	a6 83       	std	Z+6, r26	; 0x06
    aa90:	b7 83       	std	Z+7, r27	; 0x07
    aa92:	00 00       	nop
    aa94:	0f 90       	pop	r0
    aa96:	0f 90       	pop	r0
    aa98:	df 91       	pop	r29
    aa9a:	cf 91       	pop	r28
    aa9c:	08 95       	ret

0000aa9e <_ZN7TwoWireC1Ev>:
    aa9e:	cf 93       	push	r28
    aaa0:	df 93       	push	r29
    aaa2:	1f 92       	push	r1
    aaa4:	1f 92       	push	r1
    aaa6:	cd b7       	in	r28, 0x3d	; 61
    aaa8:	de b7       	in	r29, 0x3e	; 62
    aaaa:	9a 83       	std	Y+2, r25	; 0x02
    aaac:	89 83       	std	Y+1, r24	; 0x01
    aaae:	89 81       	ldd	r24, Y+1	; 0x01
    aab0:	9a 81       	ldd	r25, Y+2	; 0x02
    aab2:	d1 df       	rcall	.-94     	; 0xaa56 <_ZN6StreamC1Ev>
    aab4:	29 e1       	ldi	r18, 0x19	; 25
    aab6:	33 e0       	ldi	r19, 0x03	; 3
    aab8:	89 81       	ldd	r24, Y+1	; 0x01
    aaba:	9a 81       	ldd	r25, Y+2	; 0x02
    aabc:	fc 01       	movw	r30, r24
    aabe:	31 83       	std	Z+1, r19	; 0x01
    aac0:	20 83       	st	Z, r18
    aac2:	00 00       	nop
    aac4:	0f 90       	pop	r0
    aac6:	0f 90       	pop	r0
    aac8:	df 91       	pop	r29
    aaca:	cf 91       	pop	r28
    aacc:	08 95       	ret

0000aace <_ZN7TwoWire5beginEv>:
    aace:	cf 93       	push	r28
    aad0:	df 93       	push	r29
    aad2:	1f 92       	push	r1
    aad4:	1f 92       	push	r1
    aad6:	cd b7       	in	r28, 0x3d	; 61
    aad8:	de b7       	in	r29, 0x3e	; 62
    aada:	9a 83       	std	Y+2, r25	; 0x02
    aadc:	89 83       	std	Y+1, r24	; 0x01
    aade:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    aae2:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    aae6:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    aaea:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    aaee:	d4 db       	rcall	.-2136   	; 0xa298 <twi_init>
    aaf0:	83 e0       	ldi	r24, 0x03	; 3
    aaf2:	98 e5       	ldi	r25, 0x58	; 88
    aaf4:	3d dc       	rcall	.-1926   	; 0xa370 <twi_attachSlaveTxEvent>
    aaf6:	86 eb       	ldi	r24, 0xB6	; 182
    aaf8:	97 e5       	ldi	r25, 0x57	; 87
    aafa:	35 dc       	rcall	.-1942   	; 0xa366 <twi_attachSlaveRxEvent>
    aafc:	00 00       	nop
    aafe:	0f 90       	pop	r0
    ab00:	0f 90       	pop	r0
    ab02:	df 91       	pop	r29
    ab04:	cf 91       	pop	r28
    ab06:	08 95       	ret

0000ab08 <_ZN7TwoWire8setClockEm>:
    ab08:	cf 93       	push	r28
    ab0a:	df 93       	push	r29
    ab0c:	00 d0       	rcall	.+0      	; 0xab0e <_ZN7TwoWire8setClockEm+0x6>
    ab0e:	00 d0       	rcall	.+0      	; 0xab10 <_ZN7TwoWire8setClockEm+0x8>
    ab10:	cd b7       	in	r28, 0x3d	; 61
    ab12:	de b7       	in	r29, 0x3e	; 62
    ab14:	9a 83       	std	Y+2, r25	; 0x02
    ab16:	89 83       	std	Y+1, r24	; 0x01
    ab18:	4b 83       	std	Y+3, r20	; 0x03
    ab1a:	5c 83       	std	Y+4, r21	; 0x04
    ab1c:	6d 83       	std	Y+5, r22	; 0x05
    ab1e:	7e 83       	std	Y+6, r23	; 0x06
    ab20:	8b 81       	ldd	r24, Y+3	; 0x03
    ab22:	9c 81       	ldd	r25, Y+4	; 0x04
    ab24:	ad 81       	ldd	r26, Y+5	; 0x05
    ab26:	be 81       	ldd	r27, Y+6	; 0x06
    ab28:	bc 01       	movw	r22, r24
    ab2a:	cd 01       	movw	r24, r26
    ab2c:	e0 db       	rcall	.-2112   	; 0xa2ee <twi_setFrequency>
    ab2e:	00 00       	nop
    ab30:	26 96       	adiw	r28, 0x06	; 6
    ab32:	0f b6       	in	r0, 0x3f	; 63
    ab34:	f8 94       	cli
    ab36:	de bf       	out	0x3e, r29	; 62
    ab38:	0f be       	out	0x3f, r0	; 63
    ab3a:	cd bf       	out	0x3d, r28	; 61
    ab3c:	df 91       	pop	r29
    ab3e:	cf 91       	pop	r28
    ab40:	08 95       	ret

0000ab42 <_ZN7TwoWire11requestFromEhhmhh>:
    ab42:	cf 92       	push	r12
    ab44:	ef 92       	push	r14
    ab46:	0f 93       	push	r16
    ab48:	1f 93       	push	r17
    ab4a:	cf 93       	push	r28
    ab4c:	df 93       	push	r29
    ab4e:	cd b7       	in	r28, 0x3d	; 61
    ab50:	de b7       	in	r29, 0x3e	; 62
    ab52:	2b 97       	sbiw	r28, 0x0b	; 11
    ab54:	0f b6       	in	r0, 0x3f	; 63
    ab56:	f8 94       	cli
    ab58:	de bf       	out	0x3e, r29	; 62
    ab5a:	0f be       	out	0x3f, r0	; 63
    ab5c:	cd bf       	out	0x3d, r28	; 61
    ab5e:	9b 83       	std	Y+3, r25	; 0x03
    ab60:	8a 83       	std	Y+2, r24	; 0x02
    ab62:	6c 83       	std	Y+4, r22	; 0x04
    ab64:	4d 83       	std	Y+5, r20	; 0x05
    ab66:	0e 83       	std	Y+6, r16	; 0x06
    ab68:	1f 83       	std	Y+7, r17	; 0x07
    ab6a:	28 87       	std	Y+8, r18	; 0x08
    ab6c:	39 87       	std	Y+9, r19	; 0x09
    ab6e:	ea 86       	std	Y+10, r14	; 0x0a
    ab70:	cb 86       	std	Y+11, r12	; 0x0b
    ab72:	8a 85       	ldd	r24, Y+10	; 0x0a
    ab74:	88 23       	and	r24, r24
    ab76:	d9 f1       	breq	.+118    	; 0xabee <_ZN7TwoWire11requestFromEhhmhh+0xac>
    ab78:	8a 81       	ldd	r24, Y+2	; 0x02
    ab7a:	9b 81       	ldd	r25, Y+3	; 0x03
    ab7c:	6c 81       	ldd	r22, Y+4	; 0x04
    ab7e:	98 d0       	rcall	.+304    	; 0xacb0 <_ZN7TwoWire17beginTransmissionEh>
    ab80:	8a 85       	ldd	r24, Y+10	; 0x0a
    ab82:	84 30       	cpi	r24, 0x04	; 4
    ab84:	10 f0       	brcs	.+4      	; 0xab8a <_ZN7TwoWire11requestFromEhhmhh+0x48>
    ab86:	83 e0       	ldi	r24, 0x03	; 3
    ab88:	8a 87       	std	Y+10, r24	; 0x0a
    ab8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    ab8c:	9f ef       	ldi	r25, 0xFF	; 255
    ab8e:	98 0f       	add	r25, r24
    ab90:	9a 87       	std	Y+10, r25	; 0x0a
    ab92:	91 e0       	ldi	r25, 0x01	; 1
    ab94:	88 23       	and	r24, r24
    ab96:	09 f4       	brne	.+2      	; 0xab9a <_ZN7TwoWire11requestFromEhhmhh+0x58>
    ab98:	90 e0       	ldi	r25, 0x00	; 0
    ab9a:	99 23       	and	r25, r25
    ab9c:	21 f1       	breq	.+72     	; 0xabe6 <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    ab9e:	8a 81       	ldd	r24, Y+2	; 0x02
    aba0:	9b 81       	ldd	r25, Y+3	; 0x03
    aba2:	fc 01       	movw	r30, r24
    aba4:	80 81       	ld	r24, Z
    aba6:	91 81       	ldd	r25, Z+1	; 0x01
    aba8:	fc 01       	movw	r30, r24
    abaa:	20 81       	ld	r18, Z
    abac:	31 81       	ldd	r19, Z+1	; 0x01
    abae:	8a 85       	ldd	r24, Y+10	; 0x0a
    abb0:	88 2f       	mov	r24, r24
    abb2:	90 e0       	ldi	r25, 0x00	; 0
    abb4:	ac 01       	movw	r20, r24
    abb6:	44 0f       	add	r20, r20
    abb8:	55 1f       	adc	r21, r21
    abba:	44 0f       	add	r20, r20
    abbc:	55 1f       	adc	r21, r21
    abbe:	44 0f       	add	r20, r20
    abc0:	55 1f       	adc	r21, r21
    abc2:	8e 81       	ldd	r24, Y+6	; 0x06
    abc4:	9f 81       	ldd	r25, Y+7	; 0x07
    abc6:	a8 85       	ldd	r26, Y+8	; 0x08
    abc8:	b9 85       	ldd	r27, Y+9	; 0x09
    abca:	04 c0       	rjmp	.+8      	; 0xabd4 <_ZN7TwoWire11requestFromEhhmhh+0x92>
    abcc:	b6 95       	lsr	r27
    abce:	a7 95       	ror	r26
    abd0:	97 95       	ror	r25
    abd2:	87 95       	ror	r24
    abd4:	4a 95       	dec	r20
    abd6:	d2 f7       	brpl	.-12     	; 0xabcc <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    abd8:	48 2f       	mov	r20, r24
    abda:	8a 81       	ldd	r24, Y+2	; 0x02
    abdc:	9b 81       	ldd	r25, Y+3	; 0x03
    abde:	64 2f       	mov	r22, r20
    abe0:	f9 01       	movw	r30, r18
    abe2:	19 95       	eicall
    abe4:	d2 cf       	rjmp	.-92     	; 0xab8a <_ZN7TwoWire11requestFromEhhmhh+0x48>
    abe6:	8a 81       	ldd	r24, Y+2	; 0x02
    abe8:	9b 81       	ldd	r25, Y+3	; 0x03
    abea:	60 e0       	ldi	r22, 0x00	; 0
    abec:	91 d0       	rcall	.+290    	; 0xad10 <_ZN7TwoWire15endTransmissionEh>
    abee:	8d 81       	ldd	r24, Y+5	; 0x05
    abf0:	81 32       	cpi	r24, 0x21	; 33
    abf2:	10 f0       	brcs	.+4      	; 0xabf8 <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    abf4:	80 e2       	ldi	r24, 0x20	; 32
    abf6:	8d 83       	std	Y+5, r24	; 0x05
    abf8:	2b 85       	ldd	r18, Y+11	; 0x0b
    abfa:	4d 81       	ldd	r20, Y+5	; 0x05
    abfc:	6b e7       	ldi	r22, 0x7B	; 123
    abfe:	75 e0       	ldi	r23, 0x05	; 5
    ac00:	8c 81       	ldd	r24, Y+4	; 0x04
    ac02:	d5 db       	rcall	.-2134   	; 0xa3ae <twi_readFrom>
    ac04:	89 83       	std	Y+1, r24	; 0x01
    ac06:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    ac0a:	89 81       	ldd	r24, Y+1	; 0x01
    ac0c:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    ac10:	89 81       	ldd	r24, Y+1	; 0x01
    ac12:	2b 96       	adiw	r28, 0x0b	; 11
    ac14:	0f b6       	in	r0, 0x3f	; 63
    ac16:	f8 94       	cli
    ac18:	de bf       	out	0x3e, r29	; 62
    ac1a:	0f be       	out	0x3f, r0	; 63
    ac1c:	cd bf       	out	0x3d, r28	; 61
    ac1e:	df 91       	pop	r29
    ac20:	cf 91       	pop	r28
    ac22:	1f 91       	pop	r17
    ac24:	0f 91       	pop	r16
    ac26:	ef 90       	pop	r14
    ac28:	cf 90       	pop	r12
    ac2a:	08 95       	ret

0000ac2c <_ZN7TwoWire11requestFromEhhh>:
    ac2c:	cf 92       	push	r12
    ac2e:	ef 92       	push	r14
    ac30:	0f 93       	push	r16
    ac32:	1f 93       	push	r17
    ac34:	cf 93       	push	r28
    ac36:	df 93       	push	r29
    ac38:	00 d0       	rcall	.+0      	; 0xac3a <_ZN7TwoWire11requestFromEhhh+0xe>
    ac3a:	1f 92       	push	r1
    ac3c:	1f 92       	push	r1
    ac3e:	cd b7       	in	r28, 0x3d	; 61
    ac40:	de b7       	in	r29, 0x3e	; 62
    ac42:	9a 83       	std	Y+2, r25	; 0x02
    ac44:	89 83       	std	Y+1, r24	; 0x01
    ac46:	6b 83       	std	Y+3, r22	; 0x03
    ac48:	4c 83       	std	Y+4, r20	; 0x04
    ac4a:	2d 83       	std	Y+5, r18	; 0x05
    ac4c:	89 81       	ldd	r24, Y+1	; 0x01
    ac4e:	9a 81       	ldd	r25, Y+2	; 0x02
    ac50:	cd 80       	ldd	r12, Y+5	; 0x05
    ac52:	e1 2c       	mov	r14, r1
    ac54:	00 e0       	ldi	r16, 0x00	; 0
    ac56:	10 e0       	ldi	r17, 0x00	; 0
    ac58:	98 01       	movw	r18, r16
    ac5a:	4c 81       	ldd	r20, Y+4	; 0x04
    ac5c:	6b 81       	ldd	r22, Y+3	; 0x03
    ac5e:	71 df       	rcall	.-286    	; 0xab42 <_ZN7TwoWire11requestFromEhhmhh>
    ac60:	0f 90       	pop	r0
    ac62:	0f 90       	pop	r0
    ac64:	0f 90       	pop	r0
    ac66:	0f 90       	pop	r0
    ac68:	0f 90       	pop	r0
    ac6a:	df 91       	pop	r29
    ac6c:	cf 91       	pop	r28
    ac6e:	1f 91       	pop	r17
    ac70:	0f 91       	pop	r16
    ac72:	ef 90       	pop	r14
    ac74:	cf 90       	pop	r12
    ac76:	08 95       	ret

0000ac78 <_ZN7TwoWire11requestFromEii>:
    ac78:	cf 93       	push	r28
    ac7a:	df 93       	push	r29
    ac7c:	00 d0       	rcall	.+0      	; 0xac7e <_ZN7TwoWire11requestFromEii+0x6>
    ac7e:	00 d0       	rcall	.+0      	; 0xac80 <_ZN7TwoWire11requestFromEii+0x8>
    ac80:	cd b7       	in	r28, 0x3d	; 61
    ac82:	de b7       	in	r29, 0x3e	; 62
    ac84:	9a 83       	std	Y+2, r25	; 0x02
    ac86:	89 83       	std	Y+1, r24	; 0x01
    ac88:	7c 83       	std	Y+4, r23	; 0x04
    ac8a:	6b 83       	std	Y+3, r22	; 0x03
    ac8c:	5e 83       	std	Y+6, r21	; 0x06
    ac8e:	4d 83       	std	Y+5, r20	; 0x05
    ac90:	4d 81       	ldd	r20, Y+5	; 0x05
    ac92:	3b 81       	ldd	r19, Y+3	; 0x03
    ac94:	89 81       	ldd	r24, Y+1	; 0x01
    ac96:	9a 81       	ldd	r25, Y+2	; 0x02
    ac98:	21 e0       	ldi	r18, 0x01	; 1
    ac9a:	63 2f       	mov	r22, r19
    ac9c:	c7 df       	rcall	.-114    	; 0xac2c <_ZN7TwoWire11requestFromEhhh>
    ac9e:	26 96       	adiw	r28, 0x06	; 6
    aca0:	0f b6       	in	r0, 0x3f	; 63
    aca2:	f8 94       	cli
    aca4:	de bf       	out	0x3e, r29	; 62
    aca6:	0f be       	out	0x3f, r0	; 63
    aca8:	cd bf       	out	0x3d, r28	; 61
    acaa:	df 91       	pop	r29
    acac:	cf 91       	pop	r28
    acae:	08 95       	ret

0000acb0 <_ZN7TwoWire17beginTransmissionEh>:
    acb0:	cf 93       	push	r28
    acb2:	df 93       	push	r29
    acb4:	00 d0       	rcall	.+0      	; 0xacb6 <_ZN7TwoWire17beginTransmissionEh+0x6>
    acb6:	cd b7       	in	r28, 0x3d	; 61
    acb8:	de b7       	in	r29, 0x3e	; 62
    acba:	9a 83       	std	Y+2, r25	; 0x02
    acbc:	89 83       	std	Y+1, r24	; 0x01
    acbe:	6b 83       	std	Y+3, r22	; 0x03
    acc0:	81 e0       	ldi	r24, 0x01	; 1
    acc2:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <_ZN7TwoWire12transmittingE>
    acc6:	8b 81       	ldd	r24, Y+3	; 0x03
    acc8:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <_ZN7TwoWire9txAddressE>
    accc:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    acd0:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    acd4:	00 00       	nop
    acd6:	0f 90       	pop	r0
    acd8:	0f 90       	pop	r0
    acda:	0f 90       	pop	r0
    acdc:	df 91       	pop	r29
    acde:	cf 91       	pop	r28
    ace0:	08 95       	ret

0000ace2 <_ZN7TwoWire17beginTransmissionEi>:
    ace2:	cf 93       	push	r28
    ace4:	df 93       	push	r29
    ace6:	00 d0       	rcall	.+0      	; 0xace8 <_ZN7TwoWire17beginTransmissionEi+0x6>
    ace8:	1f 92       	push	r1
    acea:	cd b7       	in	r28, 0x3d	; 61
    acec:	de b7       	in	r29, 0x3e	; 62
    acee:	9a 83       	std	Y+2, r25	; 0x02
    acf0:	89 83       	std	Y+1, r24	; 0x01
    acf2:	7c 83       	std	Y+4, r23	; 0x04
    acf4:	6b 83       	std	Y+3, r22	; 0x03
    acf6:	2b 81       	ldd	r18, Y+3	; 0x03
    acf8:	89 81       	ldd	r24, Y+1	; 0x01
    acfa:	9a 81       	ldd	r25, Y+2	; 0x02
    acfc:	62 2f       	mov	r22, r18
    acfe:	d8 df       	rcall	.-80     	; 0xacb0 <_ZN7TwoWire17beginTransmissionEh>
    ad00:	00 00       	nop
    ad02:	0f 90       	pop	r0
    ad04:	0f 90       	pop	r0
    ad06:	0f 90       	pop	r0
    ad08:	0f 90       	pop	r0
    ad0a:	df 91       	pop	r29
    ad0c:	cf 91       	pop	r28
    ad0e:	08 95       	ret

0000ad10 <_ZN7TwoWire15endTransmissionEh>:
    ad10:	0f 93       	push	r16
    ad12:	cf 93       	push	r28
    ad14:	df 93       	push	r29
    ad16:	00 d0       	rcall	.+0      	; 0xad18 <_ZN7TwoWire15endTransmissionEh+0x8>
    ad18:	1f 92       	push	r1
    ad1a:	cd b7       	in	r28, 0x3d	; 61
    ad1c:	de b7       	in	r29, 0x3e	; 62
    ad1e:	9b 83       	std	Y+3, r25	; 0x03
    ad20:	8a 83       	std	Y+2, r24	; 0x02
    ad22:	6c 83       	std	Y+4, r22	; 0x04
    ad24:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    ad28:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <_ZN7TwoWire9txAddressE>
    ad2c:	0c 81       	ldd	r16, Y+4	; 0x04
    ad2e:	21 e0       	ldi	r18, 0x01	; 1
    ad30:	49 2f       	mov	r20, r25
    ad32:	6e e9       	ldi	r22, 0x9E	; 158
    ad34:	75 e0       	ldi	r23, 0x05	; 5
    ad36:	22 dc       	rcall	.-1980   	; 0xa57c <twi_writeTo>
    ad38:	89 83       	std	Y+1, r24	; 0x01
    ad3a:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    ad3e:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    ad42:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire12transmittingE>
    ad46:	89 81       	ldd	r24, Y+1	; 0x01
    ad48:	0f 90       	pop	r0
    ad4a:	0f 90       	pop	r0
    ad4c:	0f 90       	pop	r0
    ad4e:	0f 90       	pop	r0
    ad50:	df 91       	pop	r29
    ad52:	cf 91       	pop	r28
    ad54:	0f 91       	pop	r16
    ad56:	08 95       	ret

0000ad58 <_ZN7TwoWire15endTransmissionEv>:
    ad58:	cf 93       	push	r28
    ad5a:	df 93       	push	r29
    ad5c:	1f 92       	push	r1
    ad5e:	1f 92       	push	r1
    ad60:	cd b7       	in	r28, 0x3d	; 61
    ad62:	de b7       	in	r29, 0x3e	; 62
    ad64:	9a 83       	std	Y+2, r25	; 0x02
    ad66:	89 83       	std	Y+1, r24	; 0x01
    ad68:	89 81       	ldd	r24, Y+1	; 0x01
    ad6a:	9a 81       	ldd	r25, Y+2	; 0x02
    ad6c:	61 e0       	ldi	r22, 0x01	; 1
    ad6e:	d0 df       	rcall	.-96     	; 0xad10 <_ZN7TwoWire15endTransmissionEh>
    ad70:	0f 90       	pop	r0
    ad72:	0f 90       	pop	r0
    ad74:	df 91       	pop	r29
    ad76:	cf 91       	pop	r28
    ad78:	08 95       	ret

0000ad7a <_ZN7TwoWire5writeEh>:
    ad7a:	cf 93       	push	r28
    ad7c:	df 93       	push	r29
    ad7e:	00 d0       	rcall	.+0      	; 0xad80 <_ZN7TwoWire5writeEh+0x6>
    ad80:	cd b7       	in	r28, 0x3d	; 61
    ad82:	de b7       	in	r29, 0x3e	; 62
    ad84:	9a 83       	std	Y+2, r25	; 0x02
    ad86:	89 83       	std	Y+1, r24	; 0x01
    ad88:	6b 83       	std	Y+3, r22	; 0x03
    ad8a:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <_ZN7TwoWire12transmittingE>
    ad8e:	88 23       	and	r24, r24
    ad90:	f9 f0       	breq	.+62     	; 0xadd0 <_ZN7TwoWire5writeEh+0x56>
    ad92:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    ad96:	80 32       	cpi	r24, 0x20	; 32
    ad98:	40 f0       	brcs	.+16     	; 0xadaa <_ZN7TwoWire5writeEh+0x30>
    ad9a:	89 81       	ldd	r24, Y+1	; 0x01
    ad9c:	9a 81       	ldd	r25, Y+2	; 0x02
    ad9e:	61 e0       	ldi	r22, 0x01	; 1
    ada0:	70 e0       	ldi	r23, 0x00	; 0
    ada2:	40 de       	rcall	.-896    	; 0xaa24 <_ZN5Print13setWriteErrorEi>
    ada4:	80 e0       	ldi	r24, 0x00	; 0
    ada6:	90 e0       	ldi	r25, 0x00	; 0
    ada8:	19 c0       	rjmp	.+50     	; 0xaddc <_ZN7TwoWire5writeEh+0x62>
    adaa:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    adae:	88 2f       	mov	r24, r24
    adb0:	90 e0       	ldi	r25, 0x00	; 0
    adb2:	2b 81       	ldd	r18, Y+3	; 0x03
    adb4:	82 56       	subi	r24, 0x62	; 98
    adb6:	9a 4f       	sbci	r25, 0xFA	; 250
    adb8:	fc 01       	movw	r30, r24
    adba:	20 83       	st	Z, r18
    adbc:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    adc0:	8f 5f       	subi	r24, 0xFF	; 255
    adc2:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    adc6:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    adca:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    adce:	04 c0       	rjmp	.+8      	; 0xadd8 <_ZN7TwoWire5writeEh+0x5e>
    add0:	ce 01       	movw	r24, r28
    add2:	03 96       	adiw	r24, 0x03	; 3
    add4:	61 e0       	ldi	r22, 0x01	; 1
    add6:	9f da       	rcall	.-2754   	; 0xa316 <twi_transmit>
    add8:	81 e0       	ldi	r24, 0x01	; 1
    adda:	90 e0       	ldi	r25, 0x00	; 0
    addc:	0f 90       	pop	r0
    adde:	0f 90       	pop	r0
    ade0:	0f 90       	pop	r0
    ade2:	df 91       	pop	r29
    ade4:	cf 91       	pop	r28
    ade6:	08 95       	ret

0000ade8 <_ZN7TwoWire5writeEPKhj>:
    ade8:	cf 93       	push	r28
    adea:	df 93       	push	r29
    adec:	cd b7       	in	r28, 0x3d	; 61
    adee:	de b7       	in	r29, 0x3e	; 62
    adf0:	28 97       	sbiw	r28, 0x08	; 8
    adf2:	0f b6       	in	r0, 0x3f	; 63
    adf4:	f8 94       	cli
    adf6:	de bf       	out	0x3e, r29	; 62
    adf8:	0f be       	out	0x3f, r0	; 63
    adfa:	cd bf       	out	0x3d, r28	; 61
    adfc:	9c 83       	std	Y+4, r25	; 0x04
    adfe:	8b 83       	std	Y+3, r24	; 0x03
    ae00:	7e 83       	std	Y+6, r23	; 0x06
    ae02:	6d 83       	std	Y+5, r22	; 0x05
    ae04:	58 87       	std	Y+8, r21	; 0x08
    ae06:	4f 83       	std	Y+7, r20	; 0x07
    ae08:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <_ZN7TwoWire12transmittingE>
    ae0c:	88 23       	and	r24, r24
    ae0e:	21 f1       	breq	.+72     	; 0xae58 <_ZN7TwoWire5writeEPKhj+0x70>
    ae10:	1a 82       	std	Y+2, r1	; 0x02
    ae12:	19 82       	std	Y+1, r1	; 0x01
    ae14:	29 81       	ldd	r18, Y+1	; 0x01
    ae16:	3a 81       	ldd	r19, Y+2	; 0x02
    ae18:	8f 81       	ldd	r24, Y+7	; 0x07
    ae1a:	98 85       	ldd	r25, Y+8	; 0x08
    ae1c:	28 17       	cp	r18, r24
    ae1e:	39 07       	cpc	r19, r25
    ae20:	00 f5       	brcc	.+64     	; 0xae62 <_ZN7TwoWire5writeEPKhj+0x7a>
    ae22:	8b 81       	ldd	r24, Y+3	; 0x03
    ae24:	9c 81       	ldd	r25, Y+4	; 0x04
    ae26:	fc 01       	movw	r30, r24
    ae28:	80 81       	ld	r24, Z
    ae2a:	91 81       	ldd	r25, Z+1	; 0x01
    ae2c:	fc 01       	movw	r30, r24
    ae2e:	20 81       	ld	r18, Z
    ae30:	31 81       	ldd	r19, Z+1	; 0x01
    ae32:	4d 81       	ldd	r20, Y+5	; 0x05
    ae34:	5e 81       	ldd	r21, Y+6	; 0x06
    ae36:	89 81       	ldd	r24, Y+1	; 0x01
    ae38:	9a 81       	ldd	r25, Y+2	; 0x02
    ae3a:	84 0f       	add	r24, r20
    ae3c:	95 1f       	adc	r25, r21
    ae3e:	fc 01       	movw	r30, r24
    ae40:	40 81       	ld	r20, Z
    ae42:	8b 81       	ldd	r24, Y+3	; 0x03
    ae44:	9c 81       	ldd	r25, Y+4	; 0x04
    ae46:	64 2f       	mov	r22, r20
    ae48:	f9 01       	movw	r30, r18
    ae4a:	19 95       	eicall
    ae4c:	89 81       	ldd	r24, Y+1	; 0x01
    ae4e:	9a 81       	ldd	r25, Y+2	; 0x02
    ae50:	01 96       	adiw	r24, 0x01	; 1
    ae52:	9a 83       	std	Y+2, r25	; 0x02
    ae54:	89 83       	std	Y+1, r24	; 0x01
    ae56:	de cf       	rjmp	.-68     	; 0xae14 <_ZN7TwoWire5writeEPKhj+0x2c>
    ae58:	2f 81       	ldd	r18, Y+7	; 0x07
    ae5a:	8d 81       	ldd	r24, Y+5	; 0x05
    ae5c:	9e 81       	ldd	r25, Y+6	; 0x06
    ae5e:	62 2f       	mov	r22, r18
    ae60:	5a da       	rcall	.-2892   	; 0xa316 <twi_transmit>
    ae62:	8f 81       	ldd	r24, Y+7	; 0x07
    ae64:	98 85       	ldd	r25, Y+8	; 0x08
    ae66:	28 96       	adiw	r28, 0x08	; 8
    ae68:	0f b6       	in	r0, 0x3f	; 63
    ae6a:	f8 94       	cli
    ae6c:	de bf       	out	0x3e, r29	; 62
    ae6e:	0f be       	out	0x3f, r0	; 63
    ae70:	cd bf       	out	0x3d, r28	; 61
    ae72:	df 91       	pop	r29
    ae74:	cf 91       	pop	r28
    ae76:	08 95       	ret

0000ae78 <_ZN7TwoWire9availableEv>:
    ae78:	cf 93       	push	r28
    ae7a:	df 93       	push	r29
    ae7c:	1f 92       	push	r1
    ae7e:	1f 92       	push	r1
    ae80:	cd b7       	in	r28, 0x3d	; 61
    ae82:	de b7       	in	r29, 0x3e	; 62
    ae84:	9a 83       	std	Y+2, r25	; 0x02
    ae86:	89 83       	std	Y+1, r24	; 0x01
    ae88:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    ae8c:	28 2f       	mov	r18, r24
    ae8e:	30 e0       	ldi	r19, 0x00	; 0
    ae90:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    ae94:	88 2f       	mov	r24, r24
    ae96:	90 e0       	ldi	r25, 0x00	; 0
    ae98:	a9 01       	movw	r20, r18
    ae9a:	48 1b       	sub	r20, r24
    ae9c:	59 0b       	sbc	r21, r25
    ae9e:	ca 01       	movw	r24, r20
    aea0:	0f 90       	pop	r0
    aea2:	0f 90       	pop	r0
    aea4:	df 91       	pop	r29
    aea6:	cf 91       	pop	r28
    aea8:	08 95       	ret

0000aeaa <_ZN7TwoWire4readEv>:
    aeaa:	cf 93       	push	r28
    aeac:	df 93       	push	r29
    aeae:	00 d0       	rcall	.+0      	; 0xaeb0 <_ZN7TwoWire4readEv+0x6>
    aeb0:	1f 92       	push	r1
    aeb2:	cd b7       	in	r28, 0x3d	; 61
    aeb4:	de b7       	in	r29, 0x3e	; 62
    aeb6:	9c 83       	std	Y+4, r25	; 0x04
    aeb8:	8b 83       	std	Y+3, r24	; 0x03
    aeba:	8f ef       	ldi	r24, 0xFF	; 255
    aebc:	9f ef       	ldi	r25, 0xFF	; 255
    aebe:	9a 83       	std	Y+2, r25	; 0x02
    aec0:	89 83       	std	Y+1, r24	; 0x01
    aec2:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    aec6:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    aeca:	98 17       	cp	r25, r24
    aecc:	88 f4       	brcc	.+34     	; 0xaef0 <_ZN7TwoWire4readEv+0x46>
    aece:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    aed2:	88 2f       	mov	r24, r24
    aed4:	90 e0       	ldi	r25, 0x00	; 0
    aed6:	85 58       	subi	r24, 0x85	; 133
    aed8:	9a 4f       	sbci	r25, 0xFA	; 250
    aeda:	fc 01       	movw	r30, r24
    aedc:	80 81       	ld	r24, Z
    aede:	88 2f       	mov	r24, r24
    aee0:	90 e0       	ldi	r25, 0x00	; 0
    aee2:	9a 83       	std	Y+2, r25	; 0x02
    aee4:	89 83       	std	Y+1, r24	; 0x01
    aee6:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    aeea:	8f 5f       	subi	r24, 0xFF	; 255
    aeec:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    aef0:	89 81       	ldd	r24, Y+1	; 0x01
    aef2:	9a 81       	ldd	r25, Y+2	; 0x02
    aef4:	0f 90       	pop	r0
    aef6:	0f 90       	pop	r0
    aef8:	0f 90       	pop	r0
    aefa:	0f 90       	pop	r0
    aefc:	df 91       	pop	r29
    aefe:	cf 91       	pop	r28
    af00:	08 95       	ret

0000af02 <_ZN7TwoWire4peekEv>:
    af02:	cf 93       	push	r28
    af04:	df 93       	push	r29
    af06:	00 d0       	rcall	.+0      	; 0xaf08 <_ZN7TwoWire4peekEv+0x6>
    af08:	1f 92       	push	r1
    af0a:	cd b7       	in	r28, 0x3d	; 61
    af0c:	de b7       	in	r29, 0x3e	; 62
    af0e:	9c 83       	std	Y+4, r25	; 0x04
    af10:	8b 83       	std	Y+3, r24	; 0x03
    af12:	8f ef       	ldi	r24, 0xFF	; 255
    af14:	9f ef       	ldi	r25, 0xFF	; 255
    af16:	9a 83       	std	Y+2, r25	; 0x02
    af18:	89 83       	std	Y+1, r24	; 0x01
    af1a:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    af1e:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    af22:	98 17       	cp	r25, r24
    af24:	60 f4       	brcc	.+24     	; 0xaf3e <_ZN7TwoWire4peekEv+0x3c>
    af26:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    af2a:	88 2f       	mov	r24, r24
    af2c:	90 e0       	ldi	r25, 0x00	; 0
    af2e:	85 58       	subi	r24, 0x85	; 133
    af30:	9a 4f       	sbci	r25, 0xFA	; 250
    af32:	fc 01       	movw	r30, r24
    af34:	80 81       	ld	r24, Z
    af36:	88 2f       	mov	r24, r24
    af38:	90 e0       	ldi	r25, 0x00	; 0
    af3a:	9a 83       	std	Y+2, r25	; 0x02
    af3c:	89 83       	std	Y+1, r24	; 0x01
    af3e:	89 81       	ldd	r24, Y+1	; 0x01
    af40:	9a 81       	ldd	r25, Y+2	; 0x02
    af42:	0f 90       	pop	r0
    af44:	0f 90       	pop	r0
    af46:	0f 90       	pop	r0
    af48:	0f 90       	pop	r0
    af4a:	df 91       	pop	r29
    af4c:	cf 91       	pop	r28
    af4e:	08 95       	ret

0000af50 <_ZN7TwoWire5flushEv>:
    af50:	cf 93       	push	r28
    af52:	df 93       	push	r29
    af54:	1f 92       	push	r1
    af56:	1f 92       	push	r1
    af58:	cd b7       	in	r28, 0x3d	; 61
    af5a:	de b7       	in	r29, 0x3e	; 62
    af5c:	9a 83       	std	Y+2, r25	; 0x02
    af5e:	89 83       	std	Y+1, r24	; 0x01
    af60:	00 00       	nop
    af62:	0f 90       	pop	r0
    af64:	0f 90       	pop	r0
    af66:	df 91       	pop	r29
    af68:	cf 91       	pop	r28
    af6a:	08 95       	ret

0000af6c <_ZN7TwoWire16onReceiveServiceEPhi>:
    af6c:	cf 93       	push	r28
    af6e:	df 93       	push	r29
    af70:	00 d0       	rcall	.+0      	; 0xaf72 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    af72:	1f 92       	push	r1
    af74:	1f 92       	push	r1
    af76:	cd b7       	in	r28, 0x3d	; 61
    af78:	de b7       	in	r29, 0x3e	; 62
    af7a:	9b 83       	std	Y+3, r25	; 0x03
    af7c:	8a 83       	std	Y+2, r24	; 0x02
    af7e:	7d 83       	std	Y+5, r23	; 0x05
    af80:	6c 83       	std	Y+4, r22	; 0x04
    af82:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <_ZN7TwoWire14user_onReceiveE>
    af86:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <_ZN7TwoWire14user_onReceiveE+0x1>
    af8a:	89 2b       	or	r24, r25
    af8c:	89 f1       	breq	.+98     	; 0xaff0 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    af8e:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    af92:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    af96:	98 17       	cp	r25, r24
    af98:	68 f1       	brcs	.+90     	; 0xaff4 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    af9a:	19 82       	std	Y+1, r1	; 0x01
    af9c:	89 81       	ldd	r24, Y+1	; 0x01
    af9e:	28 2f       	mov	r18, r24
    afa0:	30 e0       	ldi	r19, 0x00	; 0
    afa2:	8c 81       	ldd	r24, Y+4	; 0x04
    afa4:	9d 81       	ldd	r25, Y+5	; 0x05
    afa6:	28 17       	cp	r18, r24
    afa8:	39 07       	cpc	r19, r25
    afaa:	a4 f4       	brge	.+40     	; 0xafd4 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    afac:	89 81       	ldd	r24, Y+1	; 0x01
    afae:	88 2f       	mov	r24, r24
    afb0:	90 e0       	ldi	r25, 0x00	; 0
    afb2:	29 81       	ldd	r18, Y+1	; 0x01
    afb4:	22 2f       	mov	r18, r18
    afb6:	30 e0       	ldi	r19, 0x00	; 0
    afb8:	4a 81       	ldd	r20, Y+2	; 0x02
    afba:	5b 81       	ldd	r21, Y+3	; 0x03
    afbc:	24 0f       	add	r18, r20
    afbe:	35 1f       	adc	r19, r21
    afc0:	f9 01       	movw	r30, r18
    afc2:	20 81       	ld	r18, Z
    afc4:	85 58       	subi	r24, 0x85	; 133
    afc6:	9a 4f       	sbci	r25, 0xFA	; 250
    afc8:	fc 01       	movw	r30, r24
    afca:	20 83       	st	Z, r18
    afcc:	89 81       	ldd	r24, Y+1	; 0x01
    afce:	8f 5f       	subi	r24, 0xFF	; 255
    afd0:	89 83       	std	Y+1, r24	; 0x01
    afd2:	e4 cf       	rjmp	.-56     	; 0xaf9c <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    afd4:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    afd8:	8c 81       	ldd	r24, Y+4	; 0x04
    afda:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    afde:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <_ZN7TwoWire14user_onReceiveE>
    afe2:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <_ZN7TwoWire14user_onReceiveE+0x1>
    afe6:	8c 81       	ldd	r24, Y+4	; 0x04
    afe8:	9d 81       	ldd	r25, Y+5	; 0x05
    afea:	f9 01       	movw	r30, r18
    afec:	19 95       	eicall
    afee:	03 c0       	rjmp	.+6      	; 0xaff6 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    aff0:	00 00       	nop
    aff2:	01 c0       	rjmp	.+2      	; 0xaff6 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    aff4:	00 00       	nop
    aff6:	0f 90       	pop	r0
    aff8:	0f 90       	pop	r0
    affa:	0f 90       	pop	r0
    affc:	0f 90       	pop	r0
    affe:	0f 90       	pop	r0
    b000:	df 91       	pop	r29
    b002:	cf 91       	pop	r28
    b004:	08 95       	ret

0000b006 <_ZN7TwoWire16onRequestServiceEv>:
    b006:	cf 93       	push	r28
    b008:	df 93       	push	r29
    b00a:	cd b7       	in	r28, 0x3d	; 61
    b00c:	de b7       	in	r29, 0x3e	; 62
    b00e:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <_ZN7TwoWire14user_onRequestE>
    b012:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <_ZN7TwoWire14user_onRequestE+0x1>
    b016:	89 2b       	or	r24, r25
    b018:	59 f0       	breq	.+22     	; 0xb030 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    b01a:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    b01e:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    b022:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <_ZN7TwoWire14user_onRequestE>
    b026:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <_ZN7TwoWire14user_onRequestE+0x1>
    b02a:	fc 01       	movw	r30, r24
    b02c:	19 95       	eicall
    b02e:	01 c0       	rjmp	.+2      	; 0xb032 <_ZN7TwoWire16onRequestServiceEv+0x2c>
    b030:	00 00       	nop
    b032:	df 91       	pop	r29
    b034:	cf 91       	pop	r28
    b036:	08 95       	ret

0000b038 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    b038:	cf 93       	push	r28
    b03a:	df 93       	push	r29
    b03c:	00 d0       	rcall	.+0      	; 0xb03e <_Z41__static_initialization_and_destruction_0ii+0x6>
    b03e:	1f 92       	push	r1
    b040:	cd b7       	in	r28, 0x3d	; 61
    b042:	de b7       	in	r29, 0x3e	; 62
    b044:	9a 83       	std	Y+2, r25	; 0x02
    b046:	89 83       	std	Y+1, r24	; 0x01
    b048:	7c 83       	std	Y+4, r23	; 0x04
    b04a:	6b 83       	std	Y+3, r22	; 0x03
    b04c:	89 81       	ldd	r24, Y+1	; 0x01
    b04e:	9a 81       	ldd	r25, Y+2	; 0x02
    b050:	01 97       	sbiw	r24, 0x01	; 1
    b052:	39 f4       	brne	.+14     	; 0xb062 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    b054:	8b 81       	ldd	r24, Y+3	; 0x03
    b056:	9c 81       	ldd	r25, Y+4	; 0x04
    b058:	01 96       	adiw	r24, 0x01	; 1
    b05a:	19 f4       	brne	.+6      	; 0xb062 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    b05c:	85 ec       	ldi	r24, 0xC5	; 197
    b05e:	95 e0       	ldi	r25, 0x05	; 5
    b060:	1e dd       	rcall	.-1476   	; 0xaa9e <_ZN7TwoWireC1Ev>
    b062:	00 00       	nop
    b064:	0f 90       	pop	r0
    b066:	0f 90       	pop	r0
    b068:	0f 90       	pop	r0
    b06a:	0f 90       	pop	r0
    b06c:	df 91       	pop	r29
    b06e:	cf 91       	pop	r28
    b070:	08 95       	ret

0000b072 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    b072:	cf 93       	push	r28
    b074:	df 93       	push	r29
    b076:	cd b7       	in	r28, 0x3d	; 61
    b078:	de b7       	in	r29, 0x3e	; 62
    b07a:	6f ef       	ldi	r22, 0xFF	; 255
    b07c:	7f ef       	ldi	r23, 0xFF	; 255
    b07e:	81 e0       	ldi	r24, 0x01	; 1
    b080:	90 e0       	ldi	r25, 0x00	; 0
    b082:	da df       	rcall	.-76     	; 0xb038 <_Z41__static_initialization_and_destruction_0ii>
    b084:	df 91       	pop	r29
    b086:	cf 91       	pop	r28
    b088:	08 95       	ret

0000b08a <_Z11GetDateTimev>:
#include "TimeAndDate.h"

RTCDateTime GetDateTime()
{
    b08a:	cf 93       	push	r28
    b08c:	df 93       	push	r29
    b08e:	1f 92       	push	r1
    b090:	1f 92       	push	r1
    b092:	cd b7       	in	r28, 0x3d	; 61
    b094:	de b7       	in	r29, 0x3e	; 62
    b096:	9a 83       	std	Y+2, r25	; 0x02
    b098:	89 83       	std	Y+1, r24	; 0x01
	return clock.getDateTime();
    b09a:	89 81       	ldd	r24, Y+1	; 0x01
    b09c:	9a 81       	ldd	r25, Y+2	; 0x02
    b09e:	63 ea       	ldi	r22, 0xA3	; 163
    b0a0:	73 e0       	ldi	r23, 0x03	; 3
    b0a2:	0e 94 43 36 	call	0x6c86	; 0x6c86 <_ZN6DS323111getDateTimeEv>
}
    b0a6:	89 81       	ldd	r24, Y+1	; 0x01
    b0a8:	9a 81       	ldd	r25, Y+2	; 0x02
    b0aa:	0f 90       	pop	r0
    b0ac:	0f 90       	pop	r0
    b0ae:	df 91       	pop	r29
    b0b0:	cf 91       	pop	r28
    b0b2:	08 95       	ret

0000b0b4 <_Z14AddLeadingZeroi>:

int AddLeadingZero(int num)
{
    b0b4:	cf 93       	push	r28
    b0b6:	df 93       	push	r29
    b0b8:	1f 92       	push	r1
    b0ba:	1f 92       	push	r1
    b0bc:	cd b7       	in	r28, 0x3d	; 61
    b0be:	de b7       	in	r29, 0x3e	; 62
    b0c0:	9a 83       	std	Y+2, r25	; 0x02
    b0c2:	89 83       	std	Y+1, r24	; 0x01
	if (num < 10)
    b0c4:	89 81       	ldd	r24, Y+1	; 0x01
    b0c6:	9a 81       	ldd	r25, Y+2	; 0x02
    b0c8:	0a 97       	sbiw	r24, 0x0a	; 10
    b0ca:	44 f4       	brge	.+16     	; 0xb0dc <_Z14AddLeadingZeroi+0x28>
	{
		lcd.print("0");
    b0cc:	6b e9       	ldi	r22, 0x9B	; 155
    b0ce:	72 e0       	ldi	r23, 0x02	; 2
    b0d0:	8f e7       	ldi	r24, 0x7F	; 127
    b0d2:	93 e0       	ldi	r25, 0x03	; 3
    b0d4:	94 d4       	rcall	.+2344   	; 0xb9fe <_ZN5Print5printEPKc>
		return num;
    b0d6:	89 81       	ldd	r24, Y+1	; 0x01
    b0d8:	9a 81       	ldd	r25, Y+2	; 0x02
    b0da:	02 c0       	rjmp	.+4      	; 0xb0e0 <_Z14AddLeadingZeroi+0x2c>
	}
	return num;
    b0dc:	89 81       	ldd	r24, Y+1	; 0x01
    b0de:	9a 81       	ldd	r25, Y+2	; 0x02
    b0e0:	0f 90       	pop	r0
    b0e2:	0f 90       	pop	r0
    b0e4:	df 91       	pop	r29
    b0e6:	cf 91       	pop	r28
    b0e8:	08 95       	ret

0000b0ea <__subsf3>:
    b0ea:	50 58       	subi	r21, 0x80	; 128

0000b0ec <__addsf3>:
    b0ec:	bb 27       	eor	r27, r27
    b0ee:	aa 27       	eor	r26, r26
    b0f0:	0e d0       	rcall	.+28     	; 0xb10e <__addsf3x>
    b0f2:	70 c1       	rjmp	.+736    	; 0xb3d4 <__fp_round>
    b0f4:	61 d1       	rcall	.+706    	; 0xb3b8 <__fp_pscA>
    b0f6:	30 f0       	brcs	.+12     	; 0xb104 <__addsf3+0x18>
    b0f8:	66 d1       	rcall	.+716    	; 0xb3c6 <__fp_pscB>
    b0fa:	20 f0       	brcs	.+8      	; 0xb104 <__addsf3+0x18>
    b0fc:	31 f4       	brne	.+12     	; 0xb10a <__addsf3+0x1e>
    b0fe:	9f 3f       	cpi	r25, 0xFF	; 255
    b100:	11 f4       	brne	.+4      	; 0xb106 <__addsf3+0x1a>
    b102:	1e f4       	brtc	.+6      	; 0xb10a <__addsf3+0x1e>
    b104:	56 c1       	rjmp	.+684    	; 0xb3b2 <__fp_nan>
    b106:	0e f4       	brtc	.+2      	; 0xb10a <__addsf3+0x1e>
    b108:	e0 95       	com	r30
    b10a:	e7 fb       	bst	r30, 7
    b10c:	4c c1       	rjmp	.+664    	; 0xb3a6 <__fp_inf>

0000b10e <__addsf3x>:
    b10e:	e9 2f       	mov	r30, r25
    b110:	72 d1       	rcall	.+740    	; 0xb3f6 <__fp_split3>
    b112:	80 f3       	brcs	.-32     	; 0xb0f4 <__addsf3+0x8>
    b114:	ba 17       	cp	r27, r26
    b116:	62 07       	cpc	r22, r18
    b118:	73 07       	cpc	r23, r19
    b11a:	84 07       	cpc	r24, r20
    b11c:	95 07       	cpc	r25, r21
    b11e:	18 f0       	brcs	.+6      	; 0xb126 <__addsf3x+0x18>
    b120:	71 f4       	brne	.+28     	; 0xb13e <__addsf3x+0x30>
    b122:	9e f5       	brtc	.+102    	; 0xb18a <__addsf3x+0x7c>
    b124:	8a c1       	rjmp	.+788    	; 0xb43a <__fp_zero>
    b126:	0e f4       	brtc	.+2      	; 0xb12a <__addsf3x+0x1c>
    b128:	e0 95       	com	r30
    b12a:	0b 2e       	mov	r0, r27
    b12c:	ba 2f       	mov	r27, r26
    b12e:	a0 2d       	mov	r26, r0
    b130:	0b 01       	movw	r0, r22
    b132:	b9 01       	movw	r22, r18
    b134:	90 01       	movw	r18, r0
    b136:	0c 01       	movw	r0, r24
    b138:	ca 01       	movw	r24, r20
    b13a:	a0 01       	movw	r20, r0
    b13c:	11 24       	eor	r1, r1
    b13e:	ff 27       	eor	r31, r31
    b140:	59 1b       	sub	r21, r25
    b142:	99 f0       	breq	.+38     	; 0xb16a <__addsf3x+0x5c>
    b144:	59 3f       	cpi	r21, 0xF9	; 249
    b146:	50 f4       	brcc	.+20     	; 0xb15c <__addsf3x+0x4e>
    b148:	50 3e       	cpi	r21, 0xE0	; 224
    b14a:	68 f1       	brcs	.+90     	; 0xb1a6 <__addsf3x+0x98>
    b14c:	1a 16       	cp	r1, r26
    b14e:	f0 40       	sbci	r31, 0x00	; 0
    b150:	a2 2f       	mov	r26, r18
    b152:	23 2f       	mov	r18, r19
    b154:	34 2f       	mov	r19, r20
    b156:	44 27       	eor	r20, r20
    b158:	58 5f       	subi	r21, 0xF8	; 248
    b15a:	f3 cf       	rjmp	.-26     	; 0xb142 <__addsf3x+0x34>
    b15c:	46 95       	lsr	r20
    b15e:	37 95       	ror	r19
    b160:	27 95       	ror	r18
    b162:	a7 95       	ror	r26
    b164:	f0 40       	sbci	r31, 0x00	; 0
    b166:	53 95       	inc	r21
    b168:	c9 f7       	brne	.-14     	; 0xb15c <__addsf3x+0x4e>
    b16a:	7e f4       	brtc	.+30     	; 0xb18a <__addsf3x+0x7c>
    b16c:	1f 16       	cp	r1, r31
    b16e:	ba 0b       	sbc	r27, r26
    b170:	62 0b       	sbc	r22, r18
    b172:	73 0b       	sbc	r23, r19
    b174:	84 0b       	sbc	r24, r20
    b176:	ba f0       	brmi	.+46     	; 0xb1a6 <__addsf3x+0x98>
    b178:	91 50       	subi	r25, 0x01	; 1
    b17a:	a1 f0       	breq	.+40     	; 0xb1a4 <__addsf3x+0x96>
    b17c:	ff 0f       	add	r31, r31
    b17e:	bb 1f       	adc	r27, r27
    b180:	66 1f       	adc	r22, r22
    b182:	77 1f       	adc	r23, r23
    b184:	88 1f       	adc	r24, r24
    b186:	c2 f7       	brpl	.-16     	; 0xb178 <__addsf3x+0x6a>
    b188:	0e c0       	rjmp	.+28     	; 0xb1a6 <__addsf3x+0x98>
    b18a:	ba 0f       	add	r27, r26
    b18c:	62 1f       	adc	r22, r18
    b18e:	73 1f       	adc	r23, r19
    b190:	84 1f       	adc	r24, r20
    b192:	48 f4       	brcc	.+18     	; 0xb1a6 <__addsf3x+0x98>
    b194:	87 95       	ror	r24
    b196:	77 95       	ror	r23
    b198:	67 95       	ror	r22
    b19a:	b7 95       	ror	r27
    b19c:	f7 95       	ror	r31
    b19e:	9e 3f       	cpi	r25, 0xFE	; 254
    b1a0:	08 f0       	brcs	.+2      	; 0xb1a4 <__addsf3x+0x96>
    b1a2:	b3 cf       	rjmp	.-154    	; 0xb10a <__addsf3+0x1e>
    b1a4:	93 95       	inc	r25
    b1a6:	88 0f       	add	r24, r24
    b1a8:	08 f0       	brcs	.+2      	; 0xb1ac <__addsf3x+0x9e>
    b1aa:	99 27       	eor	r25, r25
    b1ac:	ee 0f       	add	r30, r30
    b1ae:	97 95       	ror	r25
    b1b0:	87 95       	ror	r24
    b1b2:	08 95       	ret

0000b1b4 <__cmpsf2>:
    b1b4:	d4 d0       	rcall	.+424    	; 0xb35e <__fp_cmp>
    b1b6:	08 f4       	brcc	.+2      	; 0xb1ba <__cmpsf2+0x6>
    b1b8:	81 e0       	ldi	r24, 0x01	; 1
    b1ba:	08 95       	ret

0000b1bc <__divsf3>:
    b1bc:	0c d0       	rcall	.+24     	; 0xb1d6 <__divsf3x>
    b1be:	0a c1       	rjmp	.+532    	; 0xb3d4 <__fp_round>
    b1c0:	02 d1       	rcall	.+516    	; 0xb3c6 <__fp_pscB>
    b1c2:	40 f0       	brcs	.+16     	; 0xb1d4 <__divsf3+0x18>
    b1c4:	f9 d0       	rcall	.+498    	; 0xb3b8 <__fp_pscA>
    b1c6:	30 f0       	brcs	.+12     	; 0xb1d4 <__divsf3+0x18>
    b1c8:	21 f4       	brne	.+8      	; 0xb1d2 <__divsf3+0x16>
    b1ca:	5f 3f       	cpi	r21, 0xFF	; 255
    b1cc:	19 f0       	breq	.+6      	; 0xb1d4 <__divsf3+0x18>
    b1ce:	eb c0       	rjmp	.+470    	; 0xb3a6 <__fp_inf>
    b1d0:	51 11       	cpse	r21, r1
    b1d2:	34 c1       	rjmp	.+616    	; 0xb43c <__fp_szero>
    b1d4:	ee c0       	rjmp	.+476    	; 0xb3b2 <__fp_nan>

0000b1d6 <__divsf3x>:
    b1d6:	0f d1       	rcall	.+542    	; 0xb3f6 <__fp_split3>
    b1d8:	98 f3       	brcs	.-26     	; 0xb1c0 <__divsf3+0x4>

0000b1da <__divsf3_pse>:
    b1da:	99 23       	and	r25, r25
    b1dc:	c9 f3       	breq	.-14     	; 0xb1d0 <__divsf3+0x14>
    b1de:	55 23       	and	r21, r21
    b1e0:	b1 f3       	breq	.-20     	; 0xb1ce <__divsf3+0x12>
    b1e2:	95 1b       	sub	r25, r21
    b1e4:	55 0b       	sbc	r21, r21
    b1e6:	bb 27       	eor	r27, r27
    b1e8:	aa 27       	eor	r26, r26
    b1ea:	62 17       	cp	r22, r18
    b1ec:	73 07       	cpc	r23, r19
    b1ee:	84 07       	cpc	r24, r20
    b1f0:	38 f0       	brcs	.+14     	; 0xb200 <__divsf3_pse+0x26>
    b1f2:	9f 5f       	subi	r25, 0xFF	; 255
    b1f4:	5f 4f       	sbci	r21, 0xFF	; 255
    b1f6:	22 0f       	add	r18, r18
    b1f8:	33 1f       	adc	r19, r19
    b1fa:	44 1f       	adc	r20, r20
    b1fc:	aa 1f       	adc	r26, r26
    b1fe:	a9 f3       	breq	.-22     	; 0xb1ea <__divsf3_pse+0x10>
    b200:	33 d0       	rcall	.+102    	; 0xb268 <__divsf3_pse+0x8e>
    b202:	0e 2e       	mov	r0, r30
    b204:	3a f0       	brmi	.+14     	; 0xb214 <__divsf3_pse+0x3a>
    b206:	e0 e8       	ldi	r30, 0x80	; 128
    b208:	30 d0       	rcall	.+96     	; 0xb26a <__divsf3_pse+0x90>
    b20a:	91 50       	subi	r25, 0x01	; 1
    b20c:	50 40       	sbci	r21, 0x00	; 0
    b20e:	e6 95       	lsr	r30
    b210:	00 1c       	adc	r0, r0
    b212:	ca f7       	brpl	.-14     	; 0xb206 <__divsf3_pse+0x2c>
    b214:	29 d0       	rcall	.+82     	; 0xb268 <__divsf3_pse+0x8e>
    b216:	fe 2f       	mov	r31, r30
    b218:	27 d0       	rcall	.+78     	; 0xb268 <__divsf3_pse+0x8e>
    b21a:	66 0f       	add	r22, r22
    b21c:	77 1f       	adc	r23, r23
    b21e:	88 1f       	adc	r24, r24
    b220:	bb 1f       	adc	r27, r27
    b222:	26 17       	cp	r18, r22
    b224:	37 07       	cpc	r19, r23
    b226:	48 07       	cpc	r20, r24
    b228:	ab 07       	cpc	r26, r27
    b22a:	b0 e8       	ldi	r27, 0x80	; 128
    b22c:	09 f0       	breq	.+2      	; 0xb230 <__divsf3_pse+0x56>
    b22e:	bb 0b       	sbc	r27, r27
    b230:	80 2d       	mov	r24, r0
    b232:	bf 01       	movw	r22, r30
    b234:	ff 27       	eor	r31, r31
    b236:	93 58       	subi	r25, 0x83	; 131
    b238:	5f 4f       	sbci	r21, 0xFF	; 255
    b23a:	2a f0       	brmi	.+10     	; 0xb246 <__divsf3_pse+0x6c>
    b23c:	9e 3f       	cpi	r25, 0xFE	; 254
    b23e:	51 05       	cpc	r21, r1
    b240:	68 f0       	brcs	.+26     	; 0xb25c <__divsf3_pse+0x82>
    b242:	b1 c0       	rjmp	.+354    	; 0xb3a6 <__fp_inf>
    b244:	fb c0       	rjmp	.+502    	; 0xb43c <__fp_szero>
    b246:	5f 3f       	cpi	r21, 0xFF	; 255
    b248:	ec f3       	brlt	.-6      	; 0xb244 <__divsf3_pse+0x6a>
    b24a:	98 3e       	cpi	r25, 0xE8	; 232
    b24c:	dc f3       	brlt	.-10     	; 0xb244 <__divsf3_pse+0x6a>
    b24e:	86 95       	lsr	r24
    b250:	77 95       	ror	r23
    b252:	67 95       	ror	r22
    b254:	b7 95       	ror	r27
    b256:	f7 95       	ror	r31
    b258:	9f 5f       	subi	r25, 0xFF	; 255
    b25a:	c9 f7       	brne	.-14     	; 0xb24e <__divsf3_pse+0x74>
    b25c:	88 0f       	add	r24, r24
    b25e:	91 1d       	adc	r25, r1
    b260:	96 95       	lsr	r25
    b262:	87 95       	ror	r24
    b264:	97 f9       	bld	r25, 7
    b266:	08 95       	ret
    b268:	e1 e0       	ldi	r30, 0x01	; 1
    b26a:	66 0f       	add	r22, r22
    b26c:	77 1f       	adc	r23, r23
    b26e:	88 1f       	adc	r24, r24
    b270:	bb 1f       	adc	r27, r27
    b272:	62 17       	cp	r22, r18
    b274:	73 07       	cpc	r23, r19
    b276:	84 07       	cpc	r24, r20
    b278:	ba 07       	cpc	r27, r26
    b27a:	20 f0       	brcs	.+8      	; 0xb284 <__divsf3_pse+0xaa>
    b27c:	62 1b       	sub	r22, r18
    b27e:	73 0b       	sbc	r23, r19
    b280:	84 0b       	sbc	r24, r20
    b282:	ba 0b       	sbc	r27, r26
    b284:	ee 1f       	adc	r30, r30
    b286:	88 f7       	brcc	.-30     	; 0xb26a <__divsf3_pse+0x90>
    b288:	e0 95       	com	r30
    b28a:	08 95       	ret

0000b28c <__fixunssfsi>:
    b28c:	bc d0       	rcall	.+376    	; 0xb406 <__fp_splitA>
    b28e:	88 f0       	brcs	.+34     	; 0xb2b2 <__fixunssfsi+0x26>
    b290:	9f 57       	subi	r25, 0x7F	; 127
    b292:	90 f0       	brcs	.+36     	; 0xb2b8 <__fixunssfsi+0x2c>
    b294:	b9 2f       	mov	r27, r25
    b296:	99 27       	eor	r25, r25
    b298:	b7 51       	subi	r27, 0x17	; 23
    b29a:	a0 f0       	brcs	.+40     	; 0xb2c4 <__fixunssfsi+0x38>
    b29c:	d1 f0       	breq	.+52     	; 0xb2d2 <__fixunssfsi+0x46>
    b29e:	66 0f       	add	r22, r22
    b2a0:	77 1f       	adc	r23, r23
    b2a2:	88 1f       	adc	r24, r24
    b2a4:	99 1f       	adc	r25, r25
    b2a6:	1a f0       	brmi	.+6      	; 0xb2ae <__fixunssfsi+0x22>
    b2a8:	ba 95       	dec	r27
    b2aa:	c9 f7       	brne	.-14     	; 0xb29e <__fixunssfsi+0x12>
    b2ac:	12 c0       	rjmp	.+36     	; 0xb2d2 <__fixunssfsi+0x46>
    b2ae:	b1 30       	cpi	r27, 0x01	; 1
    b2b0:	81 f0       	breq	.+32     	; 0xb2d2 <__fixunssfsi+0x46>
    b2b2:	c3 d0       	rcall	.+390    	; 0xb43a <__fp_zero>
    b2b4:	b1 e0       	ldi	r27, 0x01	; 1
    b2b6:	08 95       	ret
    b2b8:	c0 c0       	rjmp	.+384    	; 0xb43a <__fp_zero>
    b2ba:	67 2f       	mov	r22, r23
    b2bc:	78 2f       	mov	r23, r24
    b2be:	88 27       	eor	r24, r24
    b2c0:	b8 5f       	subi	r27, 0xF8	; 248
    b2c2:	39 f0       	breq	.+14     	; 0xb2d2 <__fixunssfsi+0x46>
    b2c4:	b9 3f       	cpi	r27, 0xF9	; 249
    b2c6:	cc f3       	brlt	.-14     	; 0xb2ba <__fixunssfsi+0x2e>
    b2c8:	86 95       	lsr	r24
    b2ca:	77 95       	ror	r23
    b2cc:	67 95       	ror	r22
    b2ce:	b3 95       	inc	r27
    b2d0:	d9 f7       	brne	.-10     	; 0xb2c8 <__fixunssfsi+0x3c>
    b2d2:	3e f4       	brtc	.+14     	; 0xb2e2 <__fixunssfsi+0x56>
    b2d4:	90 95       	com	r25
    b2d6:	80 95       	com	r24
    b2d8:	70 95       	com	r23
    b2da:	61 95       	neg	r22
    b2dc:	7f 4f       	sbci	r23, 0xFF	; 255
    b2de:	8f 4f       	sbci	r24, 0xFF	; 255
    b2e0:	9f 4f       	sbci	r25, 0xFF	; 255
    b2e2:	08 95       	ret

0000b2e4 <__floatunsisf>:
    b2e4:	e8 94       	clt
    b2e6:	09 c0       	rjmp	.+18     	; 0xb2fa <__floatsisf+0x12>

0000b2e8 <__floatsisf>:
    b2e8:	97 fb       	bst	r25, 7
    b2ea:	3e f4       	brtc	.+14     	; 0xb2fa <__floatsisf+0x12>
    b2ec:	90 95       	com	r25
    b2ee:	80 95       	com	r24
    b2f0:	70 95       	com	r23
    b2f2:	61 95       	neg	r22
    b2f4:	7f 4f       	sbci	r23, 0xFF	; 255
    b2f6:	8f 4f       	sbci	r24, 0xFF	; 255
    b2f8:	9f 4f       	sbci	r25, 0xFF	; 255
    b2fa:	99 23       	and	r25, r25
    b2fc:	a9 f0       	breq	.+42     	; 0xb328 <__floatsisf+0x40>
    b2fe:	f9 2f       	mov	r31, r25
    b300:	96 e9       	ldi	r25, 0x96	; 150
    b302:	bb 27       	eor	r27, r27
    b304:	93 95       	inc	r25
    b306:	f6 95       	lsr	r31
    b308:	87 95       	ror	r24
    b30a:	77 95       	ror	r23
    b30c:	67 95       	ror	r22
    b30e:	b7 95       	ror	r27
    b310:	f1 11       	cpse	r31, r1
    b312:	f8 cf       	rjmp	.-16     	; 0xb304 <__floatsisf+0x1c>
    b314:	fa f4       	brpl	.+62     	; 0xb354 <__floatsisf+0x6c>
    b316:	bb 0f       	add	r27, r27
    b318:	11 f4       	brne	.+4      	; 0xb31e <__floatsisf+0x36>
    b31a:	60 ff       	sbrs	r22, 0
    b31c:	1b c0       	rjmp	.+54     	; 0xb354 <__floatsisf+0x6c>
    b31e:	6f 5f       	subi	r22, 0xFF	; 255
    b320:	7f 4f       	sbci	r23, 0xFF	; 255
    b322:	8f 4f       	sbci	r24, 0xFF	; 255
    b324:	9f 4f       	sbci	r25, 0xFF	; 255
    b326:	16 c0       	rjmp	.+44     	; 0xb354 <__floatsisf+0x6c>
    b328:	88 23       	and	r24, r24
    b32a:	11 f0       	breq	.+4      	; 0xb330 <__floatsisf+0x48>
    b32c:	96 e9       	ldi	r25, 0x96	; 150
    b32e:	11 c0       	rjmp	.+34     	; 0xb352 <__floatsisf+0x6a>
    b330:	77 23       	and	r23, r23
    b332:	21 f0       	breq	.+8      	; 0xb33c <__floatsisf+0x54>
    b334:	9e e8       	ldi	r25, 0x8E	; 142
    b336:	87 2f       	mov	r24, r23
    b338:	76 2f       	mov	r23, r22
    b33a:	05 c0       	rjmp	.+10     	; 0xb346 <__floatsisf+0x5e>
    b33c:	66 23       	and	r22, r22
    b33e:	71 f0       	breq	.+28     	; 0xb35c <__floatsisf+0x74>
    b340:	96 e8       	ldi	r25, 0x86	; 134
    b342:	86 2f       	mov	r24, r22
    b344:	70 e0       	ldi	r23, 0x00	; 0
    b346:	60 e0       	ldi	r22, 0x00	; 0
    b348:	2a f0       	brmi	.+10     	; 0xb354 <__floatsisf+0x6c>
    b34a:	9a 95       	dec	r25
    b34c:	66 0f       	add	r22, r22
    b34e:	77 1f       	adc	r23, r23
    b350:	88 1f       	adc	r24, r24
    b352:	da f7       	brpl	.-10     	; 0xb34a <__floatsisf+0x62>
    b354:	88 0f       	add	r24, r24
    b356:	96 95       	lsr	r25
    b358:	87 95       	ror	r24
    b35a:	97 f9       	bld	r25, 7
    b35c:	08 95       	ret

0000b35e <__fp_cmp>:
    b35e:	99 0f       	add	r25, r25
    b360:	00 08       	sbc	r0, r0
    b362:	55 0f       	add	r21, r21
    b364:	aa 0b       	sbc	r26, r26
    b366:	e0 e8       	ldi	r30, 0x80	; 128
    b368:	fe ef       	ldi	r31, 0xFE	; 254
    b36a:	16 16       	cp	r1, r22
    b36c:	17 06       	cpc	r1, r23
    b36e:	e8 07       	cpc	r30, r24
    b370:	f9 07       	cpc	r31, r25
    b372:	c0 f0       	brcs	.+48     	; 0xb3a4 <__fp_cmp+0x46>
    b374:	12 16       	cp	r1, r18
    b376:	13 06       	cpc	r1, r19
    b378:	e4 07       	cpc	r30, r20
    b37a:	f5 07       	cpc	r31, r21
    b37c:	98 f0       	brcs	.+38     	; 0xb3a4 <__fp_cmp+0x46>
    b37e:	62 1b       	sub	r22, r18
    b380:	73 0b       	sbc	r23, r19
    b382:	84 0b       	sbc	r24, r20
    b384:	95 0b       	sbc	r25, r21
    b386:	39 f4       	brne	.+14     	; 0xb396 <__fp_cmp+0x38>
    b388:	0a 26       	eor	r0, r26
    b38a:	61 f0       	breq	.+24     	; 0xb3a4 <__fp_cmp+0x46>
    b38c:	23 2b       	or	r18, r19
    b38e:	24 2b       	or	r18, r20
    b390:	25 2b       	or	r18, r21
    b392:	21 f4       	brne	.+8      	; 0xb39c <__fp_cmp+0x3e>
    b394:	08 95       	ret
    b396:	0a 26       	eor	r0, r26
    b398:	09 f4       	brne	.+2      	; 0xb39c <__fp_cmp+0x3e>
    b39a:	a1 40       	sbci	r26, 0x01	; 1
    b39c:	a6 95       	lsr	r26
    b39e:	8f ef       	ldi	r24, 0xFF	; 255
    b3a0:	81 1d       	adc	r24, r1
    b3a2:	81 1d       	adc	r24, r1
    b3a4:	08 95       	ret

0000b3a6 <__fp_inf>:
    b3a6:	97 f9       	bld	r25, 7
    b3a8:	9f 67       	ori	r25, 0x7F	; 127
    b3aa:	80 e8       	ldi	r24, 0x80	; 128
    b3ac:	70 e0       	ldi	r23, 0x00	; 0
    b3ae:	60 e0       	ldi	r22, 0x00	; 0
    b3b0:	08 95       	ret

0000b3b2 <__fp_nan>:
    b3b2:	9f ef       	ldi	r25, 0xFF	; 255
    b3b4:	80 ec       	ldi	r24, 0xC0	; 192
    b3b6:	08 95       	ret

0000b3b8 <__fp_pscA>:
    b3b8:	00 24       	eor	r0, r0
    b3ba:	0a 94       	dec	r0
    b3bc:	16 16       	cp	r1, r22
    b3be:	17 06       	cpc	r1, r23
    b3c0:	18 06       	cpc	r1, r24
    b3c2:	09 06       	cpc	r0, r25
    b3c4:	08 95       	ret

0000b3c6 <__fp_pscB>:
    b3c6:	00 24       	eor	r0, r0
    b3c8:	0a 94       	dec	r0
    b3ca:	12 16       	cp	r1, r18
    b3cc:	13 06       	cpc	r1, r19
    b3ce:	14 06       	cpc	r1, r20
    b3d0:	05 06       	cpc	r0, r21
    b3d2:	08 95       	ret

0000b3d4 <__fp_round>:
    b3d4:	09 2e       	mov	r0, r25
    b3d6:	03 94       	inc	r0
    b3d8:	00 0c       	add	r0, r0
    b3da:	11 f4       	brne	.+4      	; 0xb3e0 <__fp_round+0xc>
    b3dc:	88 23       	and	r24, r24
    b3de:	52 f0       	brmi	.+20     	; 0xb3f4 <__fp_round+0x20>
    b3e0:	bb 0f       	add	r27, r27
    b3e2:	40 f4       	brcc	.+16     	; 0xb3f4 <__fp_round+0x20>
    b3e4:	bf 2b       	or	r27, r31
    b3e6:	11 f4       	brne	.+4      	; 0xb3ec <__fp_round+0x18>
    b3e8:	60 ff       	sbrs	r22, 0
    b3ea:	04 c0       	rjmp	.+8      	; 0xb3f4 <__fp_round+0x20>
    b3ec:	6f 5f       	subi	r22, 0xFF	; 255
    b3ee:	7f 4f       	sbci	r23, 0xFF	; 255
    b3f0:	8f 4f       	sbci	r24, 0xFF	; 255
    b3f2:	9f 4f       	sbci	r25, 0xFF	; 255
    b3f4:	08 95       	ret

0000b3f6 <__fp_split3>:
    b3f6:	57 fd       	sbrc	r21, 7
    b3f8:	90 58       	subi	r25, 0x80	; 128
    b3fa:	44 0f       	add	r20, r20
    b3fc:	55 1f       	adc	r21, r21
    b3fe:	59 f0       	breq	.+22     	; 0xb416 <__fp_splitA+0x10>
    b400:	5f 3f       	cpi	r21, 0xFF	; 255
    b402:	71 f0       	breq	.+28     	; 0xb420 <__fp_splitA+0x1a>
    b404:	47 95       	ror	r20

0000b406 <__fp_splitA>:
    b406:	88 0f       	add	r24, r24
    b408:	97 fb       	bst	r25, 7
    b40a:	99 1f       	adc	r25, r25
    b40c:	61 f0       	breq	.+24     	; 0xb426 <__fp_splitA+0x20>
    b40e:	9f 3f       	cpi	r25, 0xFF	; 255
    b410:	79 f0       	breq	.+30     	; 0xb430 <__fp_splitA+0x2a>
    b412:	87 95       	ror	r24
    b414:	08 95       	ret
    b416:	12 16       	cp	r1, r18
    b418:	13 06       	cpc	r1, r19
    b41a:	14 06       	cpc	r1, r20
    b41c:	55 1f       	adc	r21, r21
    b41e:	f2 cf       	rjmp	.-28     	; 0xb404 <__fp_split3+0xe>
    b420:	46 95       	lsr	r20
    b422:	f1 df       	rcall	.-30     	; 0xb406 <__fp_splitA>
    b424:	08 c0       	rjmp	.+16     	; 0xb436 <__fp_splitA+0x30>
    b426:	16 16       	cp	r1, r22
    b428:	17 06       	cpc	r1, r23
    b42a:	18 06       	cpc	r1, r24
    b42c:	99 1f       	adc	r25, r25
    b42e:	f1 cf       	rjmp	.-30     	; 0xb412 <__fp_splitA+0xc>
    b430:	86 95       	lsr	r24
    b432:	71 05       	cpc	r23, r1
    b434:	61 05       	cpc	r22, r1
    b436:	08 94       	sec
    b438:	08 95       	ret

0000b43a <__fp_zero>:
    b43a:	e8 94       	clt

0000b43c <__fp_szero>:
    b43c:	bb 27       	eor	r27, r27
    b43e:	66 27       	eor	r22, r22
    b440:	77 27       	eor	r23, r23
    b442:	cb 01       	movw	r24, r22
    b444:	97 f9       	bld	r25, 7
    b446:	08 95       	ret

0000b448 <__gesf2>:
    b448:	8a df       	rcall	.-236    	; 0xb35e <__fp_cmp>
    b44a:	08 f4       	brcc	.+2      	; 0xb44e <__gesf2+0x6>
    b44c:	8f ef       	ldi	r24, 0xFF	; 255
    b44e:	08 95       	ret

0000b450 <__mulsf3>:
    b450:	0b d0       	rcall	.+22     	; 0xb468 <__mulsf3x>
    b452:	c0 cf       	rjmp	.-128    	; 0xb3d4 <__fp_round>
    b454:	b1 df       	rcall	.-158    	; 0xb3b8 <__fp_pscA>
    b456:	28 f0       	brcs	.+10     	; 0xb462 <__mulsf3+0x12>
    b458:	b6 df       	rcall	.-148    	; 0xb3c6 <__fp_pscB>
    b45a:	18 f0       	brcs	.+6      	; 0xb462 <__mulsf3+0x12>
    b45c:	95 23       	and	r25, r21
    b45e:	09 f0       	breq	.+2      	; 0xb462 <__mulsf3+0x12>
    b460:	a2 cf       	rjmp	.-188    	; 0xb3a6 <__fp_inf>
    b462:	a7 cf       	rjmp	.-178    	; 0xb3b2 <__fp_nan>
    b464:	11 24       	eor	r1, r1
    b466:	ea cf       	rjmp	.-44     	; 0xb43c <__fp_szero>

0000b468 <__mulsf3x>:
    b468:	c6 df       	rcall	.-116    	; 0xb3f6 <__fp_split3>
    b46a:	a0 f3       	brcs	.-24     	; 0xb454 <__mulsf3+0x4>

0000b46c <__mulsf3_pse>:
    b46c:	95 9f       	mul	r25, r21
    b46e:	d1 f3       	breq	.-12     	; 0xb464 <__mulsf3+0x14>
    b470:	95 0f       	add	r25, r21
    b472:	50 e0       	ldi	r21, 0x00	; 0
    b474:	55 1f       	adc	r21, r21
    b476:	62 9f       	mul	r22, r18
    b478:	f0 01       	movw	r30, r0
    b47a:	72 9f       	mul	r23, r18
    b47c:	bb 27       	eor	r27, r27
    b47e:	f0 0d       	add	r31, r0
    b480:	b1 1d       	adc	r27, r1
    b482:	63 9f       	mul	r22, r19
    b484:	aa 27       	eor	r26, r26
    b486:	f0 0d       	add	r31, r0
    b488:	b1 1d       	adc	r27, r1
    b48a:	aa 1f       	adc	r26, r26
    b48c:	64 9f       	mul	r22, r20
    b48e:	66 27       	eor	r22, r22
    b490:	b0 0d       	add	r27, r0
    b492:	a1 1d       	adc	r26, r1
    b494:	66 1f       	adc	r22, r22
    b496:	82 9f       	mul	r24, r18
    b498:	22 27       	eor	r18, r18
    b49a:	b0 0d       	add	r27, r0
    b49c:	a1 1d       	adc	r26, r1
    b49e:	62 1f       	adc	r22, r18
    b4a0:	73 9f       	mul	r23, r19
    b4a2:	b0 0d       	add	r27, r0
    b4a4:	a1 1d       	adc	r26, r1
    b4a6:	62 1f       	adc	r22, r18
    b4a8:	83 9f       	mul	r24, r19
    b4aa:	a0 0d       	add	r26, r0
    b4ac:	61 1d       	adc	r22, r1
    b4ae:	22 1f       	adc	r18, r18
    b4b0:	74 9f       	mul	r23, r20
    b4b2:	33 27       	eor	r19, r19
    b4b4:	a0 0d       	add	r26, r0
    b4b6:	61 1d       	adc	r22, r1
    b4b8:	23 1f       	adc	r18, r19
    b4ba:	84 9f       	mul	r24, r20
    b4bc:	60 0d       	add	r22, r0
    b4be:	21 1d       	adc	r18, r1
    b4c0:	82 2f       	mov	r24, r18
    b4c2:	76 2f       	mov	r23, r22
    b4c4:	6a 2f       	mov	r22, r26
    b4c6:	11 24       	eor	r1, r1
    b4c8:	9f 57       	subi	r25, 0x7F	; 127
    b4ca:	50 40       	sbci	r21, 0x00	; 0
    b4cc:	8a f0       	brmi	.+34     	; 0xb4f0 <__mulsf3_pse+0x84>
    b4ce:	e1 f0       	breq	.+56     	; 0xb508 <__mulsf3_pse+0x9c>
    b4d0:	88 23       	and	r24, r24
    b4d2:	4a f0       	brmi	.+18     	; 0xb4e6 <__mulsf3_pse+0x7a>
    b4d4:	ee 0f       	add	r30, r30
    b4d6:	ff 1f       	adc	r31, r31
    b4d8:	bb 1f       	adc	r27, r27
    b4da:	66 1f       	adc	r22, r22
    b4dc:	77 1f       	adc	r23, r23
    b4de:	88 1f       	adc	r24, r24
    b4e0:	91 50       	subi	r25, 0x01	; 1
    b4e2:	50 40       	sbci	r21, 0x00	; 0
    b4e4:	a9 f7       	brne	.-22     	; 0xb4d0 <__mulsf3_pse+0x64>
    b4e6:	9e 3f       	cpi	r25, 0xFE	; 254
    b4e8:	51 05       	cpc	r21, r1
    b4ea:	70 f0       	brcs	.+28     	; 0xb508 <__mulsf3_pse+0x9c>
    b4ec:	5c cf       	rjmp	.-328    	; 0xb3a6 <__fp_inf>
    b4ee:	a6 cf       	rjmp	.-180    	; 0xb43c <__fp_szero>
    b4f0:	5f 3f       	cpi	r21, 0xFF	; 255
    b4f2:	ec f3       	brlt	.-6      	; 0xb4ee <__mulsf3_pse+0x82>
    b4f4:	98 3e       	cpi	r25, 0xE8	; 232
    b4f6:	dc f3       	brlt	.-10     	; 0xb4ee <__mulsf3_pse+0x82>
    b4f8:	86 95       	lsr	r24
    b4fa:	77 95       	ror	r23
    b4fc:	67 95       	ror	r22
    b4fe:	b7 95       	ror	r27
    b500:	f7 95       	ror	r31
    b502:	e7 95       	ror	r30
    b504:	9f 5f       	subi	r25, 0xFF	; 255
    b506:	c1 f7       	brne	.-16     	; 0xb4f8 <__mulsf3_pse+0x8c>
    b508:	fe 2b       	or	r31, r30
    b50a:	88 0f       	add	r24, r24
    b50c:	91 1d       	adc	r25, r1
    b50e:	96 95       	lsr	r25
    b510:	87 95       	ror	r24
    b512:	97 f9       	bld	r25, 7
    b514:	08 95       	ret

0000b516 <__cxa_pure_virtual>:
    b516:	0e 94 f9 65 	call	0xcbf2	; 0xcbf2 <abort>

0000b51a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    b51a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    b51c:	91 8d       	ldd	r25, Z+25	; 0x19
    b51e:	22 8d       	ldd	r18, Z+26	; 0x1a
    b520:	89 2f       	mov	r24, r25
    b522:	90 e0       	ldi	r25, 0x00	; 0
    b524:	80 5c       	subi	r24, 0xC0	; 192
    b526:	9f 4f       	sbci	r25, 0xFF	; 255
    b528:	82 1b       	sub	r24, r18
    b52a:	91 09       	sbc	r25, r1
}
    b52c:	8f 73       	andi	r24, 0x3F	; 63
    b52e:	99 27       	eor	r25, r25
    b530:	08 95       	ret

0000b532 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    b532:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    b534:	91 8d       	ldd	r25, Z+25	; 0x19
    b536:	82 8d       	ldd	r24, Z+26	; 0x1a
    b538:	98 17       	cp	r25, r24
    b53a:	31 f0       	breq	.+12     	; 0xb548 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    b53c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b53e:	e8 0f       	add	r30, r24
    b540:	f1 1d       	adc	r31, r1
    b542:	85 8d       	ldd	r24, Z+29	; 0x1d
    b544:	90 e0       	ldi	r25, 0x00	; 0
    b546:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    b548:	8f ef       	ldi	r24, 0xFF	; 255
    b54a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    b54c:	08 95       	ret

0000b54e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    b54e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    b550:	91 8d       	ldd	r25, Z+25	; 0x19
    b552:	82 8d       	ldd	r24, Z+26	; 0x1a
    b554:	98 17       	cp	r25, r24
    b556:	61 f0       	breq	.+24     	; 0xb570 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    b558:	82 8d       	ldd	r24, Z+26	; 0x1a
    b55a:	df 01       	movw	r26, r30
    b55c:	a8 0f       	add	r26, r24
    b55e:	b1 1d       	adc	r27, r1
    b560:	5d 96       	adiw	r26, 0x1d	; 29
    b562:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    b564:	92 8d       	ldd	r25, Z+26	; 0x1a
    b566:	9f 5f       	subi	r25, 0xFF	; 255
    b568:	9f 73       	andi	r25, 0x3F	; 63
    b56a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    b56c:	90 e0       	ldi	r25, 0x00	; 0
    b56e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    b570:	8f ef       	ldi	r24, 0xFF	; 255
    b572:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    b574:	08 95       	ret

0000b576 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    b576:	fc 01       	movw	r30, r24
    b578:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    b57a:	44 8d       	ldd	r20, Z+28	; 0x1c
    b57c:	25 2f       	mov	r18, r21
    b57e:	30 e0       	ldi	r19, 0x00	; 0
    b580:	84 2f       	mov	r24, r20
    b582:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    b584:	82 1b       	sub	r24, r18
    b586:	93 0b       	sbc	r25, r19
    b588:	54 17       	cp	r21, r20
    b58a:	10 f0       	brcs	.+4      	; 0xb590 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    b58c:	cf 96       	adiw	r24, 0x3f	; 63
    b58e:	08 95       	ret
  return tail - head - 1;
    b590:	01 97       	sbiw	r24, 0x01	; 1
}
    b592:	08 95       	ret

0000b594 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    b594:	87 e5       	ldi	r24, 0x57	; 87
    b596:	9c e5       	ldi	r25, 0x5C	; 92
    b598:	89 2b       	or	r24, r25
    b59a:	39 f0       	breq	.+14     	; 0xb5aa <_Z14serialEventRunv+0x16>
    b59c:	80 e0       	ldi	r24, 0x00	; 0
    b59e:	90 e0       	ldi	r25, 0x00	; 0
    b5a0:	89 2b       	or	r24, r25
    b5a2:	19 f0       	breq	.+6      	; 0xb5aa <_Z14serialEventRunv+0x16>
    b5a4:	84 d1       	rcall	.+776    	; 0xb8ae <_Z17Serial0_availablev>
    b5a6:	81 11       	cpse	r24, r1
    b5a8:	25 c0       	rjmp	.+74     	; 0xb5f4 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    b5aa:	80 e0       	ldi	r24, 0x00	; 0
    b5ac:	90 e0       	ldi	r25, 0x00	; 0
    b5ae:	89 2b       	or	r24, r25
    b5b0:	41 f0       	breq	.+16     	; 0xb5c2 <_Z14serialEventRunv+0x2e>
    b5b2:	80 e0       	ldi	r24, 0x00	; 0
    b5b4:	90 e0       	ldi	r25, 0x00	; 0
    b5b6:	89 2b       	or	r24, r25
    b5b8:	21 f0       	breq	.+8      	; 0xb5c2 <_Z14serialEventRunv+0x2e>
    b5ba:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b5be:	81 11       	cpse	r24, r1
    b5c0:	1c c0       	rjmp	.+56     	; 0xb5fa <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    b5c2:	80 e0       	ldi	r24, 0x00	; 0
    b5c4:	90 e0       	ldi	r25, 0x00	; 0
    b5c6:	89 2b       	or	r24, r25
    b5c8:	41 f0       	breq	.+16     	; 0xb5da <_Z14serialEventRunv+0x46>
    b5ca:	80 e0       	ldi	r24, 0x00	; 0
    b5cc:	90 e0       	ldi	r25, 0x00	; 0
    b5ce:	89 2b       	or	r24, r25
    b5d0:	21 f0       	breq	.+8      	; 0xb5da <_Z14serialEventRunv+0x46>
    b5d2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b5d6:	81 11       	cpse	r24, r1
    b5d8:	13 c0       	rjmp	.+38     	; 0xb600 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    b5da:	80 e0       	ldi	r24, 0x00	; 0
    b5dc:	90 e0       	ldi	r25, 0x00	; 0
    b5de:	89 2b       	or	r24, r25
    b5e0:	a1 f0       	breq	.+40     	; 0xb60a <_Z14serialEventRunv+0x76>
    b5e2:	80 e0       	ldi	r24, 0x00	; 0
    b5e4:	90 e0       	ldi	r25, 0x00	; 0
    b5e6:	89 2b       	or	r24, r25
    b5e8:	81 f0       	breq	.+32     	; 0xb60a <_Z14serialEventRunv+0x76>
    b5ea:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b5ee:	81 11       	cpse	r24, r1
    b5f0:	0a c0       	rjmp	.+20     	; 0xb606 <_Z14serialEventRunv+0x72>
    b5f2:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    b5f4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b5f8:	d8 cf       	rjmp	.-80     	; 0xb5aa <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    b5fa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b5fe:	e1 cf       	rjmp	.-62     	; 0xb5c2 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    b600:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b604:	ea cf       	rjmp	.-44     	; 0xb5da <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    b606:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    b60a:	08 95       	ret

0000b60c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    b60c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    b60e:	84 8d       	ldd	r24, Z+28	; 0x1c
    b610:	df 01       	movw	r26, r30
    b612:	a8 0f       	add	r26, r24
    b614:	b1 1d       	adc	r27, r1
    b616:	a3 5a       	subi	r26, 0xA3	; 163
    b618:	bf 4f       	sbci	r27, 0xFF	; 255
    b61a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    b61c:	84 8d       	ldd	r24, Z+28	; 0x1c
    b61e:	90 e0       	ldi	r25, 0x00	; 0
    b620:	01 96       	adiw	r24, 0x01	; 1
    b622:	8f 73       	andi	r24, 0x3F	; 63
    b624:	99 27       	eor	r25, r25
    b626:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    b628:	a6 89       	ldd	r26, Z+22	; 0x16
    b62a:	b7 89       	ldd	r27, Z+23	; 0x17
    b62c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    b62e:	a0 89       	ldd	r26, Z+16	; 0x10
    b630:	b1 89       	ldd	r27, Z+17	; 0x11
    b632:	8c 91       	ld	r24, X
    b634:	83 70       	andi	r24, 0x03	; 3
    b636:	80 64       	ori	r24, 0x40	; 64
    b638:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    b63a:	93 8d       	ldd	r25, Z+27	; 0x1b
    b63c:	84 8d       	ldd	r24, Z+28	; 0x1c
    b63e:	98 13       	cpse	r25, r24
    b640:	06 c0       	rjmp	.+12     	; 0xb64e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    b642:	02 88       	ldd	r0, Z+18	; 0x12
    b644:	f3 89       	ldd	r31, Z+19	; 0x13
    b646:	e0 2d       	mov	r30, r0
    b648:	80 81       	ld	r24, Z
    b64a:	8f 7d       	andi	r24, 0xDF	; 223
    b64c:	80 83       	st	Z, r24
    b64e:	08 95       	ret

0000b650 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    b650:	ef 92       	push	r14
    b652:	ff 92       	push	r15
    b654:	0f 93       	push	r16
    b656:	1f 93       	push	r17
    b658:	cf 93       	push	r28
    b65a:	df 93       	push	r29
    b65c:	ec 01       	movw	r28, r24
  _written = true;
    b65e:	81 e0       	ldi	r24, 0x01	; 1
    b660:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    b662:	9b 8d       	ldd	r25, Y+27	; 0x1b
    b664:	8c 8d       	ldd	r24, Y+28	; 0x1c
    b666:	98 13       	cpse	r25, r24
    b668:	05 c0       	rjmp	.+10     	; 0xb674 <_ZN14HardwareSerial5writeEh+0x24>
    b66a:	e8 89       	ldd	r30, Y+16	; 0x10
    b66c:	f9 89       	ldd	r31, Y+17	; 0x11
    b66e:	80 81       	ld	r24, Z
    b670:	85 fd       	sbrc	r24, 5
    b672:	25 c0       	rjmp	.+74     	; 0xb6be <_ZN14HardwareSerial5writeEh+0x6e>
    b674:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    b676:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b678:	10 e0       	ldi	r17, 0x00	; 0
    b67a:	0f 5f       	subi	r16, 0xFF	; 255
    b67c:	1f 4f       	sbci	r17, 0xFF	; 255
    b67e:	0f 73       	andi	r16, 0x3F	; 63
    b680:	11 27       	eor	r17, r17
    b682:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    b684:	8c 8d       	ldd	r24, Y+28	; 0x1c
    b686:	e8 12       	cpse	r14, r24
    b688:	0b c0       	rjmp	.+22     	; 0xb6a0 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    b68a:	0f b6       	in	r0, 0x3f	; 63
    b68c:	07 fc       	sbrc	r0, 7
    b68e:	fa cf       	rjmp	.-12     	; 0xb684 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    b690:	e8 89       	ldd	r30, Y+16	; 0x10
    b692:	f9 89       	ldd	r31, Y+17	; 0x11
    b694:	80 81       	ld	r24, Z
    b696:	85 ff       	sbrs	r24, 5
    b698:	f5 cf       	rjmp	.-22     	; 0xb684 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    b69a:	ce 01       	movw	r24, r28
    b69c:	b7 df       	rcall	.-146    	; 0xb60c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    b69e:	f2 cf       	rjmp	.-28     	; 0xb684 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    b6a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b6a2:	fe 01       	movw	r30, r28
    b6a4:	e8 0f       	add	r30, r24
    b6a6:	f1 1d       	adc	r31, r1
    b6a8:	e3 5a       	subi	r30, 0xA3	; 163
    b6aa:	ff 4f       	sbci	r31, 0xFF	; 255
    b6ac:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    b6ae:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b6b0:	f8 94       	cli
    _tx_buffer_head = i;
    b6b2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    b6b4:	ea 89       	ldd	r30, Y+18	; 0x12
    b6b6:	fb 89       	ldd	r31, Y+19	; 0x13
    b6b8:	80 81       	ld	r24, Z
    b6ba:	80 62       	ori	r24, 0x20	; 32
    b6bc:	0a c0       	rjmp	.+20     	; 0xb6d2 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    b6be:	9f b7       	in	r25, 0x3f	; 63
    b6c0:	f8 94       	cli
      *_udr = c;
    b6c2:	ee 89       	ldd	r30, Y+22	; 0x16
    b6c4:	ff 89       	ldd	r31, Y+23	; 0x17
    b6c6:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    b6c8:	e8 89       	ldd	r30, Y+16	; 0x10
    b6ca:	f9 89       	ldd	r31, Y+17	; 0x11
    b6cc:	80 81       	ld	r24, Z
    b6ce:	83 70       	andi	r24, 0x03	; 3
    b6d0:	80 64       	ori	r24, 0x40	; 64
    b6d2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b6d4:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    b6d6:	81 e0       	ldi	r24, 0x01	; 1
    b6d8:	90 e0       	ldi	r25, 0x00	; 0
    b6da:	df 91       	pop	r29
    b6dc:	cf 91       	pop	r28
    b6de:	1f 91       	pop	r17
    b6e0:	0f 91       	pop	r16
    b6e2:	ff 90       	pop	r15
    b6e4:	ef 90       	pop	r14
    b6e6:	08 95       	ret

0000b6e8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    b6e8:	cf 93       	push	r28
    b6ea:	df 93       	push	r29
    b6ec:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    b6ee:	88 8d       	ldd	r24, Y+24	; 0x18
    b6f0:	88 23       	and	r24, r24
    b6f2:	c1 f0       	breq	.+48     	; 0xb724 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    b6f4:	ea 89       	ldd	r30, Y+18	; 0x12
    b6f6:	fb 89       	ldd	r31, Y+19	; 0x13
    b6f8:	80 81       	ld	r24, Z
    b6fa:	85 fd       	sbrc	r24, 5
    b6fc:	05 c0       	rjmp	.+10     	; 0xb708 <_ZN14HardwareSerial5flushEv+0x20>
    b6fe:	a8 89       	ldd	r26, Y+16	; 0x10
    b700:	b9 89       	ldd	r27, Y+17	; 0x11
    b702:	8c 91       	ld	r24, X
    b704:	86 fd       	sbrc	r24, 6
    b706:	0e c0       	rjmp	.+28     	; 0xb724 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    b708:	0f b6       	in	r0, 0x3f	; 63
    b70a:	07 fc       	sbrc	r0, 7
    b70c:	f5 cf       	rjmp	.-22     	; 0xb6f8 <_ZN14HardwareSerial5flushEv+0x10>
    b70e:	80 81       	ld	r24, Z
    b710:	85 ff       	sbrs	r24, 5
    b712:	f2 cf       	rjmp	.-28     	; 0xb6f8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    b714:	a8 89       	ldd	r26, Y+16	; 0x10
    b716:	b9 89       	ldd	r27, Y+17	; 0x11
    b718:	8c 91       	ld	r24, X
    b71a:	85 ff       	sbrs	r24, 5
    b71c:	ed cf       	rjmp	.-38     	; 0xb6f8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    b71e:	ce 01       	movw	r24, r28
    b720:	75 df       	rcall	.-278    	; 0xb60c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    b722:	e8 cf       	rjmp	.-48     	; 0xb6f4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    b724:	df 91       	pop	r29
    b726:	cf 91       	pop	r28
    b728:	08 95       	ret

0000b72a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    b72a:	cf 92       	push	r12
    b72c:	df 92       	push	r13
    b72e:	ef 92       	push	r14
    b730:	ff 92       	push	r15
    b732:	1f 93       	push	r17
    b734:	cf 93       	push	r28
    b736:	df 93       	push	r29
    b738:	ec 01       	movw	r28, r24
    b73a:	6a 01       	movw	r12, r20
    b73c:	7b 01       	movw	r14, r22
    b73e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    b740:	e8 89       	ldd	r30, Y+16	; 0x10
    b742:	f9 89       	ldd	r31, Y+17	; 0x11
    b744:	82 e0       	ldi	r24, 0x02	; 2
    b746:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    b748:	41 15       	cp	r20, r1
    b74a:	51 4e       	sbci	r21, 0xE1	; 225
    b74c:	61 05       	cpc	r22, r1
    b74e:	71 05       	cpc	r23, r1
    b750:	a9 f0       	breq	.+42     	; 0xb77c <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    b752:	60 e0       	ldi	r22, 0x00	; 0
    b754:	79 e0       	ldi	r23, 0x09	; 9
    b756:	8d e3       	ldi	r24, 0x3D	; 61
    b758:	90 e0       	ldi	r25, 0x00	; 0
    b75a:	a7 01       	movw	r20, r14
    b75c:	96 01       	movw	r18, r12
    b75e:	e9 d7       	rcall	.+4050   	; 0xc732 <__udivmodsi4>
    b760:	da 01       	movw	r26, r20
    b762:	c9 01       	movw	r24, r18
    b764:	01 97       	sbiw	r24, 0x01	; 1
    b766:	a1 09       	sbc	r26, r1
    b768:	b1 09       	sbc	r27, r1
    b76a:	b6 95       	lsr	r27
    b76c:	a7 95       	ror	r26
    b76e:	97 95       	ror	r25
    b770:	87 95       	ror	r24
    b772:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    b774:	21 15       	cp	r18, r1
    b776:	80 e1       	ldi	r24, 0x10	; 16
    b778:	38 07       	cpc	r19, r24
    b77a:	a0 f0       	brcs	.+40     	; 0xb7a4 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    b77c:	e8 89       	ldd	r30, Y+16	; 0x10
    b77e:	f9 89       	ldd	r31, Y+17	; 0x11
    b780:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    b782:	60 e8       	ldi	r22, 0x80	; 128
    b784:	74 e8       	ldi	r23, 0x84	; 132
    b786:	8e e1       	ldi	r24, 0x1E	; 30
    b788:	90 e0       	ldi	r25, 0x00	; 0
    b78a:	a7 01       	movw	r20, r14
    b78c:	96 01       	movw	r18, r12
    b78e:	d1 d7       	rcall	.+4002   	; 0xc732 <__udivmodsi4>
    b790:	da 01       	movw	r26, r20
    b792:	c9 01       	movw	r24, r18
    b794:	01 97       	sbiw	r24, 0x01	; 1
    b796:	a1 09       	sbc	r26, r1
    b798:	b1 09       	sbc	r27, r1
    b79a:	b6 95       	lsr	r27
    b79c:	a7 95       	ror	r26
    b79e:	97 95       	ror	r25
    b7a0:	87 95       	ror	r24
    b7a2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    b7a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    b7a6:	fd 85       	ldd	r31, Y+13	; 0x0d
    b7a8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    b7aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    b7ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    b7ae:	20 83       	st	Z, r18

  _written = false;
    b7b0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    b7b2:	ec 89       	ldd	r30, Y+20	; 0x14
    b7b4:	fd 89       	ldd	r31, Y+21	; 0x15
    b7b6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    b7b8:	ea 89       	ldd	r30, Y+18	; 0x12
    b7ba:	fb 89       	ldd	r31, Y+19	; 0x13
    b7bc:	80 81       	ld	r24, Z
    b7be:	80 61       	ori	r24, 0x10	; 16
    b7c0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    b7c2:	ea 89       	ldd	r30, Y+18	; 0x12
    b7c4:	fb 89       	ldd	r31, Y+19	; 0x13
    b7c6:	80 81       	ld	r24, Z
    b7c8:	88 60       	ori	r24, 0x08	; 8
    b7ca:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    b7cc:	ea 89       	ldd	r30, Y+18	; 0x12
    b7ce:	fb 89       	ldd	r31, Y+19	; 0x13
    b7d0:	80 81       	ld	r24, Z
    b7d2:	80 68       	ori	r24, 0x80	; 128
    b7d4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    b7d6:	ea 89       	ldd	r30, Y+18	; 0x12
    b7d8:	fb 89       	ldd	r31, Y+19	; 0x13
    b7da:	80 81       	ld	r24, Z
    b7dc:	8f 7d       	andi	r24, 0xDF	; 223
    b7de:	80 83       	st	Z, r24
}
    b7e0:	df 91       	pop	r29
    b7e2:	cf 91       	pop	r28
    b7e4:	1f 91       	pop	r17
    b7e6:	ff 90       	pop	r15
    b7e8:	ef 90       	pop	r14
    b7ea:	df 90       	pop	r13
    b7ec:	cf 90       	pop	r12
    b7ee:	08 95       	ret

0000b7f0 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    b7f0:	1f 92       	push	r1
    b7f2:	0f 92       	push	r0
    b7f4:	0f b6       	in	r0, 0x3f	; 63
    b7f6:	0f 92       	push	r0
    b7f8:	11 24       	eor	r1, r1
    b7fa:	0b b6       	in	r0, 0x3b	; 59
    b7fc:	0f 92       	push	r0
    b7fe:	2f 93       	push	r18
    b800:	8f 93       	push	r24
    b802:	9f 93       	push	r25
    b804:	ef 93       	push	r30
    b806:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    b808:	e0 91 e1 05 	lds	r30, 0x05E1	; 0x8005e1 <Serial+0x10>
    b80c:	f0 91 e2 05 	lds	r31, 0x05E2	; 0x8005e2 <Serial+0x11>
    b810:	80 81       	ld	r24, Z
    b812:	e0 91 e7 05 	lds	r30, 0x05E7	; 0x8005e7 <Serial+0x16>
    b816:	f0 91 e8 05 	lds	r31, 0x05E8	; 0x8005e8 <Serial+0x17>
    b81a:	82 fd       	sbrc	r24, 2
    b81c:	12 c0       	rjmp	.+36     	; 0xb842 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    b81e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    b820:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <Serial+0x19>
    b824:	8f 5f       	subi	r24, 0xFF	; 255
    b826:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    b828:	20 91 eb 05 	lds	r18, 0x05EB	; 0x8005eb <Serial+0x1a>
    b82c:	82 17       	cp	r24, r18
    b82e:	51 f0       	breq	.+20     	; 0xb844 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    b830:	e0 91 ea 05 	lds	r30, 0x05EA	; 0x8005ea <Serial+0x19>
    b834:	f0 e0       	ldi	r31, 0x00	; 0
    b836:	ef 52       	subi	r30, 0x2F	; 47
    b838:	fa 4f       	sbci	r31, 0xFA	; 250
    b83a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    b83c:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <Serial+0x19>
    b840:	01 c0       	rjmp	.+2      	; 0xb844 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    b842:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    b844:	ff 91       	pop	r31
    b846:	ef 91       	pop	r30
    b848:	9f 91       	pop	r25
    b84a:	8f 91       	pop	r24
    b84c:	2f 91       	pop	r18
    b84e:	0f 90       	pop	r0
    b850:	0b be       	out	0x3b, r0	; 59
    b852:	0f 90       	pop	r0
    b854:	0f be       	out	0x3f, r0	; 63
    b856:	0f 90       	pop	r0
    b858:	1f 90       	pop	r1
    b85a:	18 95       	reti

0000b85c <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    b85c:	1f 92       	push	r1
    b85e:	0f 92       	push	r0
    b860:	0f b6       	in	r0, 0x3f	; 63
    b862:	0f 92       	push	r0
    b864:	11 24       	eor	r1, r1
    b866:	0b b6       	in	r0, 0x3b	; 59
    b868:	0f 92       	push	r0
    b86a:	2f 93       	push	r18
    b86c:	3f 93       	push	r19
    b86e:	4f 93       	push	r20
    b870:	5f 93       	push	r21
    b872:	6f 93       	push	r22
    b874:	7f 93       	push	r23
    b876:	8f 93       	push	r24
    b878:	9f 93       	push	r25
    b87a:	af 93       	push	r26
    b87c:	bf 93       	push	r27
    b87e:	ef 93       	push	r30
    b880:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    b882:	81 ed       	ldi	r24, 0xD1	; 209
    b884:	95 e0       	ldi	r25, 0x05	; 5
    b886:	c2 de       	rcall	.-636    	; 0xb60c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    b888:	ff 91       	pop	r31
    b88a:	ef 91       	pop	r30
    b88c:	bf 91       	pop	r27
    b88e:	af 91       	pop	r26
    b890:	9f 91       	pop	r25
    b892:	8f 91       	pop	r24
    b894:	7f 91       	pop	r23
    b896:	6f 91       	pop	r22
    b898:	5f 91       	pop	r21
    b89a:	4f 91       	pop	r20
    b89c:	3f 91       	pop	r19
    b89e:	2f 91       	pop	r18
    b8a0:	0f 90       	pop	r0
    b8a2:	0b be       	out	0x3b, r0	; 59
    b8a4:	0f 90       	pop	r0
    b8a6:	0f be       	out	0x3f, r0	; 63
    b8a8:	0f 90       	pop	r0
    b8aa:	1f 90       	pop	r1
    b8ac:	18 95       	reti

0000b8ae <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    b8ae:	81 ed       	ldi	r24, 0xD1	; 209
    b8b0:	95 e0       	ldi	r25, 0x05	; 5
    b8b2:	33 de       	rcall	.-922    	; 0xb51a <_ZN14HardwareSerial9availableEv>
    b8b4:	21 e0       	ldi	r18, 0x01	; 1
    b8b6:	89 2b       	or	r24, r25
    b8b8:	09 f4       	brne	.+2      	; 0xb8bc <_Z17Serial0_availablev+0xe>
    b8ba:	20 e0       	ldi	r18, 0x00	; 0
}
    b8bc:	82 2f       	mov	r24, r18
    b8be:	08 95       	ret

0000b8c0 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    b8c0:	e1 ed       	ldi	r30, 0xD1	; 209
    b8c2:	f5 e0       	ldi	r31, 0x05	; 5
    b8c4:	13 82       	std	Z+3, r1	; 0x03
    b8c6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    b8c8:	88 ee       	ldi	r24, 0xE8	; 232
    b8ca:	93 e0       	ldi	r25, 0x03	; 3
    b8cc:	a0 e0       	ldi	r26, 0x00	; 0
    b8ce:	b0 e0       	ldi	r27, 0x00	; 0
    b8d0:	84 83       	std	Z+4, r24	; 0x04
    b8d2:	95 83       	std	Z+5, r25	; 0x05
    b8d4:	a6 83       	std	Z+6, r26	; 0x06
    b8d6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    b8d8:	8d e3       	ldi	r24, 0x3D	; 61
    b8da:	93 e0       	ldi	r25, 0x03	; 3
    b8dc:	91 83       	std	Z+1, r25	; 0x01
    b8de:	80 83       	st	Z, r24
    b8e0:	85 ec       	ldi	r24, 0xC5	; 197
    b8e2:	90 e0       	ldi	r25, 0x00	; 0
    b8e4:	95 87       	std	Z+13, r25	; 0x0d
    b8e6:	84 87       	std	Z+12, r24	; 0x0c
    b8e8:	84 ec       	ldi	r24, 0xC4	; 196
    b8ea:	90 e0       	ldi	r25, 0x00	; 0
    b8ec:	97 87       	std	Z+15, r25	; 0x0f
    b8ee:	86 87       	std	Z+14, r24	; 0x0e
    b8f0:	80 ec       	ldi	r24, 0xC0	; 192
    b8f2:	90 e0       	ldi	r25, 0x00	; 0
    b8f4:	91 8b       	std	Z+17, r25	; 0x11
    b8f6:	80 8b       	std	Z+16, r24	; 0x10
    b8f8:	81 ec       	ldi	r24, 0xC1	; 193
    b8fa:	90 e0       	ldi	r25, 0x00	; 0
    b8fc:	93 8b       	std	Z+19, r25	; 0x13
    b8fe:	82 8b       	std	Z+18, r24	; 0x12
    b900:	82 ec       	ldi	r24, 0xC2	; 194
    b902:	90 e0       	ldi	r25, 0x00	; 0
    b904:	95 8b       	std	Z+21, r25	; 0x15
    b906:	84 8b       	std	Z+20, r24	; 0x14
    b908:	86 ec       	ldi	r24, 0xC6	; 198
    b90a:	90 e0       	ldi	r25, 0x00	; 0
    b90c:	97 8b       	std	Z+23, r25	; 0x17
    b90e:	86 8b       	std	Z+22, r24	; 0x16
    b910:	11 8e       	std	Z+25, r1	; 0x19
    b912:	12 8e       	std	Z+26, r1	; 0x1a
    b914:	13 8e       	std	Z+27, r1	; 0x1b
    b916:	14 8e       	std	Z+28, r1	; 0x1c
    b918:	08 95       	ret

0000b91a <initVariant>:
    b91a:	08 95       	ret

0000b91c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    b91c:	e5 d2       	rcall	.+1482   	; 0xbee8 <init>

	initVariant();
    b91e:	fd df       	rcall	.-6      	; 0xb91a <initVariant>
    b920:	0e 94 90 0a 	call	0x1520	; 0x1520 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    b924:	ca ec       	ldi	r28, 0xCA	; 202
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    b926:	da e5       	ldi	r29, 0x5A	; 90
    b928:	0e 94 cf 0b 	call	0x179e	; 0x179e <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    b92c:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    b92e:	e1 f3       	breq	.-8      	; 0xb928 <main+0xc>
    b930:	31 de       	rcall	.-926    	; 0xb594 <_Z14serialEventRunv>
    b932:	fa cf       	rjmp	.-12     	; 0xb928 <main+0xc>

0000b934 <_Znaj>:
    b934:	5d c7       	rjmp	.+3770   	; 0xc7f0 <malloc>

0000b936 <_ZdaPv>:
void operator delete(void * ptr) {
  free(ptr);
}

void operator delete[](void * ptr) {
  free(ptr);
    b936:	f4 c7       	rjmp	.+4072   	; 0xc920 <free>

0000b938 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    b938:	cf 92       	push	r12
    b93a:	df 92       	push	r13
    b93c:	ef 92       	push	r14
    b93e:	ff 92       	push	r15
    b940:	0f 93       	push	r16
    b942:	1f 93       	push	r17
    b944:	cf 93       	push	r28
    b946:	df 93       	push	r29
    b948:	6c 01       	movw	r12, r24
    b94a:	7a 01       	movw	r14, r20
    b94c:	8b 01       	movw	r16, r22
    b94e:	c0 e0       	ldi	r28, 0x00	; 0
    b950:	d0 e0       	ldi	r29, 0x00	; 0
    b952:	ce 15       	cp	r28, r14
    b954:	df 05       	cpc	r29, r15
    b956:	81 f0       	breq	.+32     	; 0xb978 <_ZN5Print5writeEPKhj+0x40>
    b958:	d8 01       	movw	r26, r16
    b95a:	6d 91       	ld	r22, X+
    b95c:	8d 01       	movw	r16, r26
    b95e:	d6 01       	movw	r26, r12
    b960:	ed 91       	ld	r30, X+
    b962:	fc 91       	ld	r31, X
    b964:	01 90       	ld	r0, Z+
    b966:	f0 81       	ld	r31, Z
    b968:	e0 2d       	mov	r30, r0
    b96a:	c6 01       	movw	r24, r12
    b96c:	19 95       	eicall
    b96e:	89 2b       	or	r24, r25
    b970:	11 f0       	breq	.+4      	; 0xb976 <_ZN5Print5writeEPKhj+0x3e>
    b972:	21 96       	adiw	r28, 0x01	; 1
    b974:	ee cf       	rjmp	.-36     	; 0xb952 <_ZN5Print5writeEPKhj+0x1a>
    b976:	7e 01       	movw	r14, r28
    b978:	c7 01       	movw	r24, r14
    b97a:	df 91       	pop	r29
    b97c:	cf 91       	pop	r28
    b97e:	1f 91       	pop	r17
    b980:	0f 91       	pop	r16
    b982:	ff 90       	pop	r15
    b984:	ef 90       	pop	r14
    b986:	df 90       	pop	r13
    b988:	cf 90       	pop	r12
    b98a:	08 95       	ret

0000b98c <_ZN5Print5writeEPKc>:
    b98c:	61 15       	cp	r22, r1
    b98e:	71 05       	cpc	r23, r1
    b990:	79 f0       	breq	.+30     	; 0xb9b0 <_ZN5Print5writeEPKc+0x24>
    b992:	fb 01       	movw	r30, r22
    b994:	01 90       	ld	r0, Z+
    b996:	00 20       	and	r0, r0
    b998:	e9 f7       	brne	.-6      	; 0xb994 <_ZN5Print5writeEPKc+0x8>
    b99a:	31 97       	sbiw	r30, 0x01	; 1
    b99c:	af 01       	movw	r20, r30
    b99e:	46 1b       	sub	r20, r22
    b9a0:	57 0b       	sbc	r21, r23
    b9a2:	dc 01       	movw	r26, r24
    b9a4:	ed 91       	ld	r30, X+
    b9a6:	fc 91       	ld	r31, X
    b9a8:	02 80       	ldd	r0, Z+2	; 0x02
    b9aa:	f3 81       	ldd	r31, Z+3	; 0x03
    b9ac:	e0 2d       	mov	r30, r0
    b9ae:	19 94       	eijmp
    b9b0:	80 e0       	ldi	r24, 0x00	; 0
    b9b2:	90 e0       	ldi	r25, 0x00	; 0
    b9b4:	08 95       	ret

0000b9b6 <_ZN5Print5printEPK19__FlashStringHelper>:
    b9b6:	ef 92       	push	r14
    b9b8:	ff 92       	push	r15
    b9ba:	0f 93       	push	r16
    b9bc:	1f 93       	push	r17
    b9be:	cf 93       	push	r28
    b9c0:	df 93       	push	r29
    b9c2:	8c 01       	movw	r16, r24
    b9c4:	7b 01       	movw	r14, r22
    b9c6:	c0 e0       	ldi	r28, 0x00	; 0
    b9c8:	d0 e0       	ldi	r29, 0x00	; 0
    b9ca:	f7 01       	movw	r30, r14
    b9cc:	ec 0f       	add	r30, r28
    b9ce:	fd 1f       	adc	r31, r29
    b9d0:	64 91       	lpm	r22, Z
    b9d2:	66 23       	and	r22, r22
    b9d4:	61 f0       	breq	.+24     	; 0xb9ee <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    b9d6:	d8 01       	movw	r26, r16
    b9d8:	ed 91       	ld	r30, X+
    b9da:	fc 91       	ld	r31, X
    b9dc:	01 90       	ld	r0, Z+
    b9de:	f0 81       	ld	r31, Z
    b9e0:	e0 2d       	mov	r30, r0
    b9e2:	c8 01       	movw	r24, r16
    b9e4:	19 95       	eicall
    b9e6:	89 2b       	or	r24, r25
    b9e8:	11 f0       	breq	.+4      	; 0xb9ee <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    b9ea:	21 96       	adiw	r28, 0x01	; 1
    b9ec:	ee cf       	rjmp	.-36     	; 0xb9ca <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    b9ee:	ce 01       	movw	r24, r28
    b9f0:	df 91       	pop	r29
    b9f2:	cf 91       	pop	r28
    b9f4:	1f 91       	pop	r17
    b9f6:	0f 91       	pop	r16
    b9f8:	ff 90       	pop	r15
    b9fa:	ef 90       	pop	r14
    b9fc:	08 95       	ret

0000b9fe <_ZN5Print5printEPKc>:
    b9fe:	c6 cf       	rjmp	.-116    	; 0xb98c <_ZN5Print5writeEPKc>

0000ba00 <_ZN5Print5printEc>:
    ba00:	dc 01       	movw	r26, r24
    ba02:	ed 91       	ld	r30, X+
    ba04:	fc 91       	ld	r31, X
    ba06:	01 90       	ld	r0, Z+
    ba08:	f0 81       	ld	r31, Z
    ba0a:	e0 2d       	mov	r30, r0
    ba0c:	19 94       	eijmp

0000ba0e <_ZN5Print7printlnEv>:
    ba0e:	6b e4       	ldi	r22, 0x4B	; 75
    ba10:	73 e0       	ldi	r23, 0x03	; 3
    ba12:	bc cf       	rjmp	.-136    	; 0xb98c <_ZN5Print5writeEPKc>

0000ba14 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    ba14:	0f 93       	push	r16
    ba16:	1f 93       	push	r17
    ba18:	cf 93       	push	r28
    ba1a:	df 93       	push	r29
    ba1c:	ec 01       	movw	r28, r24
    ba1e:	cb df       	rcall	.-106    	; 0xb9b6 <_ZN5Print5printEPK19__FlashStringHelper>
    ba20:	8c 01       	movw	r16, r24
    ba22:	ce 01       	movw	r24, r28
    ba24:	f4 df       	rcall	.-24     	; 0xba0e <_ZN5Print7printlnEv>
    ba26:	80 0f       	add	r24, r16
    ba28:	91 1f       	adc	r25, r17
    ba2a:	df 91       	pop	r29
    ba2c:	cf 91       	pop	r28
    ba2e:	1f 91       	pop	r17
    ba30:	0f 91       	pop	r16
    ba32:	08 95       	ret

0000ba34 <_ZN5Print7printlnEPKc>:
    ba34:	0f 93       	push	r16
    ba36:	1f 93       	push	r17
    ba38:	cf 93       	push	r28
    ba3a:	df 93       	push	r29
    ba3c:	ec 01       	movw	r28, r24
    ba3e:	a6 df       	rcall	.-180    	; 0xb98c <_ZN5Print5writeEPKc>
    ba40:	8c 01       	movw	r16, r24
    ba42:	ce 01       	movw	r24, r28
    ba44:	e4 df       	rcall	.-56     	; 0xba0e <_ZN5Print7printlnEv>
    ba46:	80 0f       	add	r24, r16
    ba48:	91 1f       	adc	r25, r17
    ba4a:	df 91       	pop	r29
    ba4c:	cf 91       	pop	r28
    ba4e:	1f 91       	pop	r17
    ba50:	0f 91       	pop	r16
    ba52:	08 95       	ret

0000ba54 <_ZN5Print7printlnEc>:
    ba54:	0f 93       	push	r16
    ba56:	1f 93       	push	r17
    ba58:	cf 93       	push	r28
    ba5a:	df 93       	push	r29
    ba5c:	ec 01       	movw	r28, r24
    ba5e:	d0 df       	rcall	.-96     	; 0xba00 <_ZN5Print5printEc>
    ba60:	8c 01       	movw	r16, r24
    ba62:	ce 01       	movw	r24, r28
    ba64:	d4 df       	rcall	.-88     	; 0xba0e <_ZN5Print7printlnEv>
    ba66:	80 0f       	add	r24, r16
    ba68:	91 1f       	adc	r25, r17
    ba6a:	df 91       	pop	r29
    ba6c:	cf 91       	pop	r28
    ba6e:	1f 91       	pop	r17
    ba70:	0f 91       	pop	r16
    ba72:	08 95       	ret

0000ba74 <_ZN5Print11printNumberEmh>:
    ba74:	8f 92       	push	r8
    ba76:	9f 92       	push	r9
    ba78:	af 92       	push	r10
    ba7a:	bf 92       	push	r11
    ba7c:	ef 92       	push	r14
    ba7e:	ff 92       	push	r15
    ba80:	0f 93       	push	r16
    ba82:	1f 93       	push	r17
    ba84:	cf 93       	push	r28
    ba86:	df 93       	push	r29
    ba88:	cd b7       	in	r28, 0x3d	; 61
    ba8a:	de b7       	in	r29, 0x3e	; 62
    ba8c:	a1 97       	sbiw	r28, 0x21	; 33
    ba8e:	0f b6       	in	r0, 0x3f	; 63
    ba90:	f8 94       	cli
    ba92:	de bf       	out	0x3e, r29	; 62
    ba94:	0f be       	out	0x3f, r0	; 63
    ba96:	cd bf       	out	0x3d, r28	; 61
    ba98:	7c 01       	movw	r14, r24
    ba9a:	fa 01       	movw	r30, r20
    ba9c:	cb 01       	movw	r24, r22
    ba9e:	19 a2       	std	Y+33, r1	; 0x21
    baa0:	22 30       	cpi	r18, 0x02	; 2
    baa2:	08 f4       	brcc	.+2      	; 0xbaa6 <_ZN5Print11printNumberEmh+0x32>
    baa4:	2a e0       	ldi	r18, 0x0A	; 10
    baa6:	8e 01       	movw	r16, r28
    baa8:	0f 5d       	subi	r16, 0xDF	; 223
    baaa:	1f 4f       	sbci	r17, 0xFF	; 255
    baac:	82 2e       	mov	r8, r18
    baae:	91 2c       	mov	r9, r1
    bab0:	a1 2c       	mov	r10, r1
    bab2:	b1 2c       	mov	r11, r1
    bab4:	bf 01       	movw	r22, r30
    bab6:	a5 01       	movw	r20, r10
    bab8:	94 01       	movw	r18, r8
    baba:	3b d6       	rcall	.+3190   	; 0xc732 <__udivmodsi4>
    babc:	f9 01       	movw	r30, r18
    babe:	ca 01       	movw	r24, r20
    bac0:	01 50       	subi	r16, 0x01	; 1
    bac2:	11 09       	sbc	r17, r1
    bac4:	6a 30       	cpi	r22, 0x0A	; 10
    bac6:	10 f4       	brcc	.+4      	; 0xbacc <_ZN5Print11printNumberEmh+0x58>
    bac8:	60 5d       	subi	r22, 0xD0	; 208
    baca:	01 c0       	rjmp	.+2      	; 0xbace <_ZN5Print11printNumberEmh+0x5a>
    bacc:	69 5c       	subi	r22, 0xC9	; 201
    bace:	d8 01       	movw	r26, r16
    bad0:	6c 93       	st	X, r22
    bad2:	23 2b       	or	r18, r19
    bad4:	24 2b       	or	r18, r20
    bad6:	25 2b       	or	r18, r21
    bad8:	69 f7       	brne	.-38     	; 0xbab4 <_ZN5Print11printNumberEmh+0x40>
    bada:	b8 01       	movw	r22, r16
    badc:	c7 01       	movw	r24, r14
    bade:	56 df       	rcall	.-340    	; 0xb98c <_ZN5Print5writeEPKc>
    bae0:	a1 96       	adiw	r28, 0x21	; 33
    bae2:	0f b6       	in	r0, 0x3f	; 63
    bae4:	f8 94       	cli
    bae6:	de bf       	out	0x3e, r29	; 62
    bae8:	0f be       	out	0x3f, r0	; 63
    baea:	cd bf       	out	0x3d, r28	; 61
    baec:	df 91       	pop	r29
    baee:	cf 91       	pop	r28
    baf0:	1f 91       	pop	r17
    baf2:	0f 91       	pop	r16
    baf4:	ff 90       	pop	r15
    baf6:	ef 90       	pop	r14
    baf8:	bf 90       	pop	r11
    bafa:	af 90       	pop	r10
    bafc:	9f 90       	pop	r9
    bafe:	8f 90       	pop	r8
    bb00:	08 95       	ret

0000bb02 <_ZN5Print5printEmi>:
    bb02:	21 15       	cp	r18, r1
    bb04:	31 05       	cpc	r19, r1
    bb06:	41 f4       	brne	.+16     	; 0xbb18 <_ZN5Print5printEmi+0x16>
    bb08:	dc 01       	movw	r26, r24
    bb0a:	ed 91       	ld	r30, X+
    bb0c:	fc 91       	ld	r31, X
    bb0e:	01 90       	ld	r0, Z+
    bb10:	f0 81       	ld	r31, Z
    bb12:	e0 2d       	mov	r30, r0
    bb14:	64 2f       	mov	r22, r20
    bb16:	19 94       	eijmp
    bb18:	ad cf       	rjmp	.-166    	; 0xba74 <_ZN5Print11printNumberEmh>

0000bb1a <_ZN5Print5printEji>:
    bb1a:	9a 01       	movw	r18, r20
    bb1c:	ab 01       	movw	r20, r22
    bb1e:	60 e0       	ldi	r22, 0x00	; 0
    bb20:	70 e0       	ldi	r23, 0x00	; 0
    bb22:	ef cf       	rjmp	.-34     	; 0xbb02 <_ZN5Print5printEmi>

0000bb24 <_ZN5Print5printEli>:
    bb24:	cf 92       	push	r12
    bb26:	df 92       	push	r13
    bb28:	ef 92       	push	r14
    bb2a:	ff 92       	push	r15
    bb2c:	0f 93       	push	r16
    bb2e:	1f 93       	push	r17
    bb30:	cf 93       	push	r28
    bb32:	df 93       	push	r29
    bb34:	21 15       	cp	r18, r1
    bb36:	31 05       	cpc	r19, r1
    bb38:	81 f4       	brne	.+32     	; 0xbb5a <_ZN5Print5printEli+0x36>
    bb3a:	dc 01       	movw	r26, r24
    bb3c:	ed 91       	ld	r30, X+
    bb3e:	fc 91       	ld	r31, X
    bb40:	01 90       	ld	r0, Z+
    bb42:	f0 81       	ld	r31, Z
    bb44:	e0 2d       	mov	r30, r0
    bb46:	64 2f       	mov	r22, r20
    bb48:	df 91       	pop	r29
    bb4a:	cf 91       	pop	r28
    bb4c:	1f 91       	pop	r17
    bb4e:	0f 91       	pop	r16
    bb50:	ff 90       	pop	r15
    bb52:	ef 90       	pop	r14
    bb54:	df 90       	pop	r13
    bb56:	cf 90       	pop	r12
    bb58:	19 94       	eijmp
    bb5a:	2a 30       	cpi	r18, 0x0A	; 10
    bb5c:	31 05       	cpc	r19, r1
    bb5e:	f1 f4       	brne	.+60     	; 0xbb9c <_ZN5Print5printEli+0x78>
    bb60:	77 ff       	sbrs	r23, 7
    bb62:	1b c0       	rjmp	.+54     	; 0xbb9a <_ZN5Print5printEli+0x76>
    bb64:	6a 01       	movw	r12, r20
    bb66:	7b 01       	movw	r14, r22
    bb68:	ec 01       	movw	r28, r24
    bb6a:	6d e2       	ldi	r22, 0x2D	; 45
    bb6c:	49 df       	rcall	.-366    	; 0xba00 <_ZN5Print5printEc>
    bb6e:	8c 01       	movw	r16, r24
    bb70:	44 27       	eor	r20, r20
    bb72:	55 27       	eor	r21, r21
    bb74:	ba 01       	movw	r22, r20
    bb76:	4c 19       	sub	r20, r12
    bb78:	5d 09       	sbc	r21, r13
    bb7a:	6e 09       	sbc	r22, r14
    bb7c:	7f 09       	sbc	r23, r15
    bb7e:	2a e0       	ldi	r18, 0x0A	; 10
    bb80:	ce 01       	movw	r24, r28
    bb82:	78 df       	rcall	.-272    	; 0xba74 <_ZN5Print11printNumberEmh>
    bb84:	80 0f       	add	r24, r16
    bb86:	91 1f       	adc	r25, r17
    bb88:	df 91       	pop	r29
    bb8a:	cf 91       	pop	r28
    bb8c:	1f 91       	pop	r17
    bb8e:	0f 91       	pop	r16
    bb90:	ff 90       	pop	r15
    bb92:	ef 90       	pop	r14
    bb94:	df 90       	pop	r13
    bb96:	cf 90       	pop	r12
    bb98:	08 95       	ret
    bb9a:	2a e0       	ldi	r18, 0x0A	; 10
    bb9c:	df 91       	pop	r29
    bb9e:	cf 91       	pop	r28
    bba0:	1f 91       	pop	r17
    bba2:	0f 91       	pop	r16
    bba4:	ff 90       	pop	r15
    bba6:	ef 90       	pop	r14
    bba8:	df 90       	pop	r13
    bbaa:	cf 90       	pop	r12
    bbac:	63 cf       	rjmp	.-314    	; 0xba74 <_ZN5Print11printNumberEmh>

0000bbae <_ZN5Print5printEii>:
    bbae:	9a 01       	movw	r18, r20
    bbb0:	ab 01       	movw	r20, r22
    bbb2:	77 0f       	add	r23, r23
    bbb4:	66 0b       	sbc	r22, r22
    bbb6:	77 0b       	sbc	r23, r23
    bbb8:	b5 cf       	rjmp	.-150    	; 0xbb24 <_ZN5Print5printEli>

0000bbba <_ZN5Print7printlnEii>:
    bbba:	0f 93       	push	r16
    bbbc:	1f 93       	push	r17
    bbbe:	cf 93       	push	r28
    bbc0:	df 93       	push	r29
    bbc2:	ec 01       	movw	r28, r24
    bbc4:	f4 df       	rcall	.-24     	; 0xbbae <_ZN5Print5printEii>
    bbc6:	8c 01       	movw	r16, r24
    bbc8:	ce 01       	movw	r24, r28
    bbca:	21 df       	rcall	.-446    	; 0xba0e <_ZN5Print7printlnEv>
    bbcc:	80 0f       	add	r24, r16
    bbce:	91 1f       	adc	r25, r17
    bbd0:	df 91       	pop	r29
    bbd2:	cf 91       	pop	r28
    bbd4:	1f 91       	pop	r17
    bbd6:	0f 91       	pop	r16
    bbd8:	08 95       	ret

0000bbda <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    bbda:	7f 92       	push	r7
    bbdc:	8f 92       	push	r8
    bbde:	9f 92       	push	r9
    bbe0:	af 92       	push	r10
    bbe2:	bf 92       	push	r11
    bbe4:	cf 92       	push	r12
    bbe6:	df 92       	push	r13
    bbe8:	ef 92       	push	r14
    bbea:	ff 92       	push	r15
    bbec:	0f 93       	push	r16
    bbee:	1f 93       	push	r17
    bbf0:	cf 93       	push	r28
    bbf2:	df 93       	push	r29
    bbf4:	8c 01       	movw	r16, r24
    bbf6:	6a 01       	movw	r12, r20
    bbf8:	7b 01       	movw	r14, r22
    bbfa:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    bbfc:	9a 01       	movw	r18, r20
    bbfe:	ab 01       	movw	r20, r22
    bc00:	c7 01       	movw	r24, r14
    bc02:	b6 01       	movw	r22, r12
    bc04:	82 d5       	rcall	.+2820   	; 0xc70a <__unordsf2>
    bc06:	88 23       	and	r24, r24
    bc08:	19 f0       	breq	.+6      	; 0xbc10 <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bc0a:	6e e4       	ldi	r22, 0x4E	; 78
    bc0c:	73 e0       	ldi	r23, 0x03	; 3
    bc0e:	24 c0       	rjmp	.+72     	; 0xbc58 <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    bc10:	46 01       	movw	r8, r12
    bc12:	57 01       	movw	r10, r14
    bc14:	e8 94       	clt
    bc16:	b7 f8       	bld	r11, 7
    bc18:	2f ef       	ldi	r18, 0xFF	; 255
    bc1a:	3f ef       	ldi	r19, 0xFF	; 255
    bc1c:	4f e7       	ldi	r20, 0x7F	; 127
    bc1e:	5f e7       	ldi	r21, 0x7F	; 127
    bc20:	c5 01       	movw	r24, r10
    bc22:	b4 01       	movw	r22, r8
    bc24:	72 d5       	rcall	.+2788   	; 0xc70a <__unordsf2>
    bc26:	81 11       	cpse	r24, r1
    bc28:	0c c0       	rjmp	.+24     	; 0xbc42 <_ZN5Print10printFloatEdh+0x68>
    bc2a:	2f ef       	ldi	r18, 0xFF	; 255
    bc2c:	3f ef       	ldi	r19, 0xFF	; 255
    bc2e:	4f e7       	ldi	r20, 0x7F	; 127
    bc30:	5f e7       	ldi	r21, 0x7F	; 127
    bc32:	c5 01       	movw	r24, r10
    bc34:	b4 01       	movw	r22, r8
    bc36:	be da       	rcall	.-2692   	; 0xb1b4 <__cmpsf2>
    bc38:	18 16       	cp	r1, r24
    bc3a:	1c f4       	brge	.+6      	; 0xbc42 <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bc3c:	62 e5       	ldi	r22, 0x52	; 82
    bc3e:	73 e0       	ldi	r23, 0x03	; 3
    bc40:	0b c0       	rjmp	.+22     	; 0xbc58 <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    bc42:	2f ef       	ldi	r18, 0xFF	; 255
    bc44:	3f ef       	ldi	r19, 0xFF	; 255
    bc46:	4f e7       	ldi	r20, 0x7F	; 127
    bc48:	5f e4       	ldi	r21, 0x4F	; 79
    bc4a:	c7 01       	movw	r24, r14
    bc4c:	b6 01       	movw	r22, r12
    bc4e:	fc db       	rcall	.-2056   	; 0xb448 <__gesf2>
    bc50:	18 16       	cp	r1, r24
    bc52:	8c f4       	brge	.+34     	; 0xbc76 <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bc54:	66 e5       	ldi	r22, 0x56	; 86
    bc56:	73 e0       	ldi	r23, 0x03	; 3
    bc58:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    bc5a:	df 91       	pop	r29
    bc5c:	cf 91       	pop	r28
    bc5e:	1f 91       	pop	r17
    bc60:	0f 91       	pop	r16
    bc62:	ff 90       	pop	r15
    bc64:	ef 90       	pop	r14
    bc66:	df 90       	pop	r13
    bc68:	cf 90       	pop	r12
    bc6a:	bf 90       	pop	r11
    bc6c:	af 90       	pop	r10
    bc6e:	9f 90       	pop	r9
    bc70:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bc72:	7f 90       	pop	r7
    bc74:	8b ce       	rjmp	.-746    	; 0xb98c <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    bc76:	2f ef       	ldi	r18, 0xFF	; 255
    bc78:	3f ef       	ldi	r19, 0xFF	; 255
    bc7a:	4f e7       	ldi	r20, 0x7F	; 127
    bc7c:	5f ec       	ldi	r21, 0xCF	; 207
    bc7e:	c7 01       	movw	r24, r14
    bc80:	b6 01       	movw	r22, r12
    bc82:	98 da       	rcall	.-2768   	; 0xb1b4 <__cmpsf2>
    bc84:	87 fd       	sbrc	r24, 7
    bc86:	e6 cf       	rjmp	.-52     	; 0xbc54 <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    bc88:	20 e0       	ldi	r18, 0x00	; 0
    bc8a:	30 e0       	ldi	r19, 0x00	; 0
    bc8c:	a9 01       	movw	r20, r18
    bc8e:	c7 01       	movw	r24, r14
    bc90:	b6 01       	movw	r22, r12
    bc92:	90 da       	rcall	.-2784   	; 0xb1b4 <__cmpsf2>
    bc94:	87 ff       	sbrs	r24, 7
    bc96:	09 c0       	rjmp	.+18     	; 0xbcaa <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    bc98:	6d e2       	ldi	r22, 0x2D	; 45
    bc9a:	c8 01       	movw	r24, r16
    bc9c:	b1 de       	rcall	.-670    	; 0xba00 <_ZN5Print5printEc>
    bc9e:	ec 01       	movw	r28, r24
    bca0:	f7 fa       	bst	r15, 7
     number = -number;
    bca2:	f0 94       	com	r15
    bca4:	f7 f8       	bld	r15, 7
    bca6:	f0 94       	com	r15
    bca8:	02 c0       	rjmp	.+4      	; 0xbcae <_ZN5Print10printFloatEdh+0xd4>
    bcaa:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    bcac:	d0 e0       	ldi	r29, 0x00	; 0
    bcae:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    bcb0:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    bcb2:	70 e0       	ldi	r23, 0x00	; 0
    bcb4:	80 e0       	ldi	r24, 0x00	; 0
    bcb6:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    bcb8:	7b 14       	cp	r7, r11
    bcba:	39 f0       	breq	.+14     	; 0xbcca <_ZN5Print10printFloatEdh+0xf0>
    rounding /= 10.0;
    bcbc:	20 e0       	ldi	r18, 0x00	; 0
    bcbe:	30 e0       	ldi	r19, 0x00	; 0
    bcc0:	40 e2       	ldi	r20, 0x20	; 32
    bcc2:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    bcc4:	7b da       	rcall	.-2826   	; 0xb1bc <__divsf3>
    bcc6:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    bcc8:	f7 cf       	rjmp	.-18     	; 0xbcb8 <_ZN5Print10printFloatEdh+0xde>
    bcca:	a7 01       	movw	r20, r14
    bccc:	96 01       	movw	r18, r12
    bcce:	0e da       	rcall	.-3044   	; 0xb0ec <__addsf3>
    bcd0:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    bcd2:	7c 01       	movw	r14, r24
    bcd4:	db da       	rcall	.-2634   	; 0xb28c <__fixunssfsi>
    bcd6:	4b 01       	movw	r8, r22
    bcd8:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    bcda:	2a e0       	ldi	r18, 0x0A	; 10
    bcdc:	ab 01       	movw	r20, r22
    bcde:	bc 01       	movw	r22, r24
    bce0:	c8 01       	movw	r24, r16
    bce2:	c8 de       	rcall	.-624    	; 0xba74 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    bce4:	c8 0f       	add	r28, r24
    bce6:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    bce8:	77 20       	and	r7, r7
    bcea:	79 f1       	breq	.+94     	; 0xbd4a <_ZN5Print10printFloatEdh+0x170>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    bcec:	c5 01       	movw	r24, r10
    bcee:	b4 01       	movw	r22, r8
    bcf0:	f9 da       	rcall	.-2574   	; 0xb2e4 <__floatunsisf>
    bcf2:	9b 01       	movw	r18, r22
    bcf4:	ac 01       	movw	r20, r24
    bcf6:	c7 01       	movw	r24, r14
    bcf8:	b6 01       	movw	r22, r12
    bcfa:	f7 d9       	rcall	.-3090   	; 0xb0ea <__subsf3>
    bcfc:	6b 01       	movw	r12, r22
    bcfe:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    bd00:	6e e2       	ldi	r22, 0x2E	; 46
    bd02:	c8 01       	movw	r24, r16
    bd04:	7d de       	rcall	.-774    	; 0xba00 <_ZN5Print5printEc>
    bd06:	c8 0f       	add	r28, r24
    bd08:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    bd0a:	20 e0       	ldi	r18, 0x00	; 0
    bd0c:	30 e0       	ldi	r19, 0x00	; 0
    bd0e:	40 e2       	ldi	r20, 0x20	; 32
    bd10:	51 e4       	ldi	r21, 0x41	; 65
    bd12:	c7 01       	movw	r24, r14
    bd14:	b6 01       	movw	r22, r12
    bd16:	9c db       	rcall	.-2248   	; 0xb450 <__mulsf3>
    bd18:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    bd1a:	5c 01       	movw	r10, r24
    bd1c:	b7 da       	rcall	.-2706   	; 0xb28c <__fixunssfsi>
    bd1e:	6b 01       	movw	r12, r22
    n += print(toPrint);
    bd20:	7c 01       	movw	r14, r24
    bd22:	4a e0       	ldi	r20, 0x0A	; 10
    bd24:	50 e0       	ldi	r21, 0x00	; 0
    bd26:	c8 01       	movw	r24, r16
    bd28:	f8 de       	rcall	.-528    	; 0xbb1a <_ZN5Print5printEji>
    bd2a:	c8 0f       	add	r28, r24
    bd2c:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    bd2e:	b6 01       	movw	r22, r12
    bd30:	80 e0       	ldi	r24, 0x00	; 0
    bd32:	90 e0       	ldi	r25, 0x00	; 0
    bd34:	d7 da       	rcall	.-2642   	; 0xb2e4 <__floatunsisf>
    bd36:	9b 01       	movw	r18, r22
    bd38:	ac 01       	movw	r20, r24
    bd3a:	c5 01       	movw	r24, r10
    bd3c:	b4 01       	movw	r22, r8
    bd3e:	d5 d9       	rcall	.-3158   	; 0xb0ea <__subsf3>
    bd40:	6b 01       	movw	r12, r22
    bd42:	7c 01       	movw	r14, r24
    bd44:	7a 94       	dec	r7
    bd46:	71 10       	cpse	r7, r1
    bd48:	e0 cf       	rjmp	.-64     	; 0xbd0a <_ZN5Print10printFloatEdh+0x130>
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    bd4a:	ce 01       	movw	r24, r28
    bd4c:	df 91       	pop	r29
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    bd4e:	cf 91       	pop	r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    bd50:	1f 91       	pop	r17
    bd52:	0f 91       	pop	r16
    bd54:	ff 90       	pop	r15
    bd56:	ef 90       	pop	r14
    bd58:	df 90       	pop	r13
    bd5a:	cf 90       	pop	r12
    bd5c:	bf 90       	pop	r11
    bd5e:	af 90       	pop	r10
    bd60:	9f 90       	pop	r9
    bd62:	8f 90       	pop	r8
    bd64:	7f 90       	pop	r7
    bd66:	08 95       	ret

0000bd68 <_ZN5Print5printEdi>:
    bd68:	38 cf       	rjmp	.-400    	; 0xbbda <_ZN5Print10printFloatEdh>

0000bd6a <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    bd6a:	1f 92       	push	r1
    bd6c:	0f 92       	push	r0
    bd6e:	0f b6       	in	r0, 0x3f	; 63
    bd70:	0f 92       	push	r0
    bd72:	11 24       	eor	r1, r1
    bd74:	2f 93       	push	r18
    bd76:	3f 93       	push	r19
    bd78:	8f 93       	push	r24
    bd7a:	9f 93       	push	r25
    bd7c:	af 93       	push	r26
    bd7e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    bd80:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <timer0_millis>
    bd84:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <timer0_millis+0x1>
    bd88:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <timer0_millis+0x2>
    bd8c:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    bd90:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    bd94:	23 e0       	ldi	r18, 0x03	; 3
    bd96:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    bd98:	2d 37       	cpi	r18, 0x7D	; 125
    bd9a:	20 f4       	brcc	.+8      	; 0xbda4 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    bd9c:	01 96       	adiw	r24, 0x01	; 1
    bd9e:	a1 1d       	adc	r26, r1
    bda0:	b1 1d       	adc	r27, r1
    bda2:	05 c0       	rjmp	.+10     	; 0xbdae <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    bda4:	26 e8       	ldi	r18, 0x86	; 134
    bda6:	23 0f       	add	r18, r19
		m += 1;
    bda8:	02 96       	adiw	r24, 0x02	; 2
    bdaa:	a1 1d       	adc	r26, r1
    bdac:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    bdae:	20 93 6e 06 	sts	0x066E, r18	; 0x80066e <timer0_fract>
	timer0_millis = m;
    bdb2:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <timer0_millis>
    bdb6:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <timer0_millis+0x1>
    bdba:	a0 93 71 06 	sts	0x0671, r26	; 0x800671 <timer0_millis+0x2>
    bdbe:	b0 93 72 06 	sts	0x0672, r27	; 0x800672 <timer0_millis+0x3>
	timer0_overflow_count++;
    bdc2:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <timer0_overflow_count>
    bdc6:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <timer0_overflow_count+0x1>
    bdca:	a0 91 75 06 	lds	r26, 0x0675	; 0x800675 <timer0_overflow_count+0x2>
    bdce:	b0 91 76 06 	lds	r27, 0x0676	; 0x800676 <timer0_overflow_count+0x3>
    bdd2:	01 96       	adiw	r24, 0x01	; 1
    bdd4:	a1 1d       	adc	r26, r1
    bdd6:	b1 1d       	adc	r27, r1
    bdd8:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <timer0_overflow_count>
    bddc:	90 93 74 06 	sts	0x0674, r25	; 0x800674 <timer0_overflow_count+0x1>
    bde0:	a0 93 75 06 	sts	0x0675, r26	; 0x800675 <timer0_overflow_count+0x2>
    bde4:	b0 93 76 06 	sts	0x0676, r27	; 0x800676 <timer0_overflow_count+0x3>
}
    bde8:	bf 91       	pop	r27
    bdea:	af 91       	pop	r26
    bdec:	9f 91       	pop	r25
    bdee:	8f 91       	pop	r24
    bdf0:	3f 91       	pop	r19
    bdf2:	2f 91       	pop	r18
    bdf4:	0f 90       	pop	r0
    bdf6:	0f be       	out	0x3f, r0	; 63
    bdf8:	0f 90       	pop	r0
    bdfa:	1f 90       	pop	r1
    bdfc:	18 95       	reti

0000bdfe <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    bdfe:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    be00:	f8 94       	cli
	m = timer0_millis;
    be02:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <timer0_millis>
    be06:	70 91 70 06 	lds	r23, 0x0670	; 0x800670 <timer0_millis+0x1>
    be0a:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <timer0_millis+0x2>
    be0e:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <timer0_millis+0x3>
	SREG = oldSREG;
    be12:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    be14:	08 95       	ret

0000be16 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    be16:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    be18:	f8 94       	cli
	m = timer0_overflow_count;
    be1a:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <timer0_overflow_count>
    be1e:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <timer0_overflow_count+0x1>
    be22:	a0 91 75 06 	lds	r26, 0x0675	; 0x800675 <timer0_overflow_count+0x2>
    be26:	b0 91 76 06 	lds	r27, 0x0676	; 0x800676 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    be2a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    be2c:	a8 9b       	sbis	0x15, 0	; 21
    be2e:	05 c0       	rjmp	.+10     	; 0xbe3a <micros+0x24>
    be30:	2f 3f       	cpi	r18, 0xFF	; 255
    be32:	19 f0       	breq	.+6      	; 0xbe3a <micros+0x24>
		m++;
    be34:	01 96       	adiw	r24, 0x01	; 1
    be36:	a1 1d       	adc	r26, r1
    be38:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    be3a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    be3c:	ba 2f       	mov	r27, r26
    be3e:	a9 2f       	mov	r26, r25
    be40:	98 2f       	mov	r25, r24
    be42:	88 27       	eor	r24, r24
    be44:	82 0f       	add	r24, r18
    be46:	91 1d       	adc	r25, r1
    be48:	a1 1d       	adc	r26, r1
    be4a:	b1 1d       	adc	r27, r1
    be4c:	bc 01       	movw	r22, r24
    be4e:	cd 01       	movw	r24, r26
    be50:	42 e0       	ldi	r20, 0x02	; 2
    be52:	66 0f       	add	r22, r22
    be54:	77 1f       	adc	r23, r23
    be56:	88 1f       	adc	r24, r24
    be58:	99 1f       	adc	r25, r25
    be5a:	4a 95       	dec	r20
    be5c:	d1 f7       	brne	.-12     	; 0xbe52 <micros+0x3c>
}
    be5e:	08 95       	ret

0000be60 <delay>:

void delay(unsigned long ms)
{
    be60:	8f 92       	push	r8
    be62:	9f 92       	push	r9
    be64:	af 92       	push	r10
    be66:	bf 92       	push	r11
    be68:	cf 92       	push	r12
    be6a:	df 92       	push	r13
    be6c:	ef 92       	push	r14
    be6e:	ff 92       	push	r15
    be70:	6b 01       	movw	r12, r22
    be72:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    be74:	d0 df       	rcall	.-96     	; 0xbe16 <micros>
    be76:	4b 01       	movw	r8, r22
    be78:	5c 01       	movw	r10, r24

	while (ms > 0) {
    be7a:	c1 14       	cp	r12, r1
    be7c:	d1 04       	cpc	r13, r1
    be7e:	e1 04       	cpc	r14, r1
    be80:	f1 04       	cpc	r15, r1
		yield();
    be82:	f1 f0       	breq	.+60     	; 0xbec0 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    be84:	41 d4       	rcall	.+2178   	; 0xc708 <yield>
    be86:	c7 df       	rcall	.-114    	; 0xbe16 <micros>
    be88:	dc 01       	movw	r26, r24
    be8a:	cb 01       	movw	r24, r22
    be8c:	88 19       	sub	r24, r8
    be8e:	99 09       	sbc	r25, r9
    be90:	aa 09       	sbc	r26, r10
    be92:	bb 09       	sbc	r27, r11
    be94:	88 3e       	cpi	r24, 0xE8	; 232
    be96:	93 40       	sbci	r25, 0x03	; 3
    be98:	a1 05       	cpc	r26, r1
    be9a:	b1 05       	cpc	r27, r1
    be9c:	70 f3       	brcs	.-36     	; 0xbe7a <delay+0x1a>
			ms--;
    be9e:	21 e0       	ldi	r18, 0x01	; 1
    bea0:	c2 1a       	sub	r12, r18
    bea2:	d1 08       	sbc	r13, r1
    bea4:	e1 08       	sbc	r14, r1
    bea6:	f1 08       	sbc	r15, r1
			start += 1000;
    bea8:	88 ee       	ldi	r24, 0xE8	; 232
    beaa:	88 0e       	add	r8, r24
    beac:	83 e0       	ldi	r24, 0x03	; 3
    beae:	98 1e       	adc	r9, r24
    beb0:	a1 1c       	adc	r10, r1
    beb2:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    beb4:	c1 14       	cp	r12, r1
    beb6:	d1 04       	cpc	r13, r1
    beb8:	e1 04       	cpc	r14, r1
    beba:	f1 04       	cpc	r15, r1
    bebc:	21 f7       	brne	.-56     	; 0xbe86 <delay+0x26>
    bebe:	dd cf       	rjmp	.-70     	; 0xbe7a <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    bec0:	ff 90       	pop	r15
    bec2:	ef 90       	pop	r14
    bec4:	df 90       	pop	r13
    bec6:	cf 90       	pop	r12
    bec8:	bf 90       	pop	r11
    beca:	af 90       	pop	r10
    becc:	9f 90       	pop	r9
    bece:	8f 90       	pop	r8
    bed0:	08 95       	ret

0000bed2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    bed2:	82 30       	cpi	r24, 0x02	; 2
    bed4:	91 05       	cpc	r25, r1
    bed6:	38 f0       	brcs	.+14     	; 0xbee6 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    bed8:	88 0f       	add	r24, r24
    beda:	99 1f       	adc	r25, r25
    bedc:	88 0f       	add	r24, r24
    bede:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    bee0:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    bee2:	01 97       	sbiw	r24, 0x01	; 1
    bee4:	f1 f7       	brne	.-4      	; 0xbee2 <delayMicroseconds+0x10>
    bee6:	08 95       	ret

0000bee8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    bee8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    beea:	84 b5       	in	r24, 0x24	; 36
    beec:	82 60       	ori	r24, 0x02	; 2
    beee:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    bef0:	84 b5       	in	r24, 0x24	; 36
    bef2:	81 60       	ori	r24, 0x01	; 1
    bef4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    bef6:	85 b5       	in	r24, 0x25	; 37
    bef8:	82 60       	ori	r24, 0x02	; 2
    befa:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    befc:	85 b5       	in	r24, 0x25	; 37
    befe:	81 60       	ori	r24, 0x01	; 1
    bf00:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    bf02:	ee e6       	ldi	r30, 0x6E	; 110
    bf04:	f0 e0       	ldi	r31, 0x00	; 0
    bf06:	80 81       	ld	r24, Z
    bf08:	81 60       	ori	r24, 0x01	; 1
    bf0a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    bf0c:	e1 e8       	ldi	r30, 0x81	; 129
    bf0e:	f0 e0       	ldi	r31, 0x00	; 0
    bf10:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    bf12:	80 81       	ld	r24, Z
    bf14:	82 60       	ori	r24, 0x02	; 2
    bf16:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    bf18:	80 81       	ld	r24, Z
    bf1a:	81 60       	ori	r24, 0x01	; 1
    bf1c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    bf1e:	e0 e8       	ldi	r30, 0x80	; 128
    bf20:	f0 e0       	ldi	r31, 0x00	; 0
    bf22:	80 81       	ld	r24, Z
    bf24:	81 60       	ori	r24, 0x01	; 1
    bf26:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    bf28:	e1 eb       	ldi	r30, 0xB1	; 177
    bf2a:	f0 e0       	ldi	r31, 0x00	; 0
    bf2c:	80 81       	ld	r24, Z
    bf2e:	84 60       	ori	r24, 0x04	; 4
    bf30:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    bf32:	e0 eb       	ldi	r30, 0xB0	; 176
    bf34:	f0 e0       	ldi	r31, 0x00	; 0
    bf36:	80 81       	ld	r24, Z
    bf38:	81 60       	ori	r24, 0x01	; 1
    bf3a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    bf3c:	e1 e9       	ldi	r30, 0x91	; 145
    bf3e:	f0 e0       	ldi	r31, 0x00	; 0
    bf40:	80 81       	ld	r24, Z
    bf42:	82 60       	ori	r24, 0x02	; 2
    bf44:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    bf46:	80 81       	ld	r24, Z
    bf48:	81 60       	ori	r24, 0x01	; 1
    bf4a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    bf4c:	e0 e9       	ldi	r30, 0x90	; 144
    bf4e:	f0 e0       	ldi	r31, 0x00	; 0
    bf50:	80 81       	ld	r24, Z
    bf52:	81 60       	ori	r24, 0x01	; 1
    bf54:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    bf56:	e1 ea       	ldi	r30, 0xA1	; 161
    bf58:	f0 e0       	ldi	r31, 0x00	; 0
    bf5a:	80 81       	ld	r24, Z
    bf5c:	82 60       	ori	r24, 0x02	; 2
    bf5e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    bf60:	80 81       	ld	r24, Z
    bf62:	81 60       	ori	r24, 0x01	; 1
    bf64:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    bf66:	e0 ea       	ldi	r30, 0xA0	; 160
    bf68:	f0 e0       	ldi	r31, 0x00	; 0
    bf6a:	80 81       	ld	r24, Z
    bf6c:	81 60       	ori	r24, 0x01	; 1
    bf6e:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    bf70:	e1 e2       	ldi	r30, 0x21	; 33
    bf72:	f1 e0       	ldi	r31, 0x01	; 1
    bf74:	80 81       	ld	r24, Z
    bf76:	82 60       	ori	r24, 0x02	; 2
    bf78:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    bf7a:	80 81       	ld	r24, Z
    bf7c:	81 60       	ori	r24, 0x01	; 1
    bf7e:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    bf80:	e0 e2       	ldi	r30, 0x20	; 32
    bf82:	f1 e0       	ldi	r31, 0x01	; 1
    bf84:	80 81       	ld	r24, Z
    bf86:	81 60       	ori	r24, 0x01	; 1
    bf88:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    bf8a:	ea e7       	ldi	r30, 0x7A	; 122
    bf8c:	f0 e0       	ldi	r31, 0x00	; 0
    bf8e:	80 81       	ld	r24, Z
    bf90:	84 60       	ori	r24, 0x04	; 4
    bf92:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    bf94:	80 81       	ld	r24, Z
    bf96:	82 60       	ori	r24, 0x02	; 2
    bf98:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    bf9a:	80 81       	ld	r24, Z
    bf9c:	81 60       	ori	r24, 0x01	; 1
    bf9e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    bfa0:	80 81       	ld	r24, Z
    bfa2:	80 68       	ori	r24, 0x80	; 128
    bfa4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    bfa6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    bfaa:	08 95       	ret

0000bfac <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    bfac:	86 33       	cpi	r24, 0x36	; 54
    bfae:	08 f0       	brcs	.+2      	; 0xbfb2 <analogRead+0x6>
    bfb0:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    bfb2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    bfb6:	28 2f       	mov	r18, r24
    bfb8:	28 70       	andi	r18, 0x08	; 8
    bfba:	97 7f       	andi	r25, 0xF7	; 247
    bfbc:	92 2b       	or	r25, r18
    bfbe:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    bfc2:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <analog_reference>
    bfc6:	90 e4       	ldi	r25, 0x40	; 64
    bfc8:	29 9f       	mul	r18, r25
    bfca:	90 01       	movw	r18, r0
    bfcc:	11 24       	eor	r1, r1
    bfce:	87 70       	andi	r24, 0x07	; 7
    bfd0:	82 2b       	or	r24, r18
    bfd2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    bfd6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    bfda:	80 64       	ori	r24, 0x40	; 64
    bfdc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    bfe0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    bfe4:	86 fd       	sbrc	r24, 6
    bfe6:	fc cf       	rjmp	.-8      	; 0xbfe0 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    bfe8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    bfec:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    bff0:	90 e0       	ldi	r25, 0x00	; 0
}
    bff2:	92 2b       	or	r25, r18
    bff4:	08 95       	ret

0000bff6 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    bff6:	1f 93       	push	r17
    bff8:	cf 93       	push	r28
    bffa:	df 93       	push	r29
    bffc:	18 2f       	mov	r17, r24
    bffe:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    c000:	61 e0       	ldi	r22, 0x01	; 1
    c002:	14 d1       	rcall	.+552    	; 0xc22c <pinMode>
	if (val == 0)
    c004:	20 97       	sbiw	r28, 0x00	; 0
    c006:	11 f4       	brne	.+4      	; 0xc00c <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    c008:	60 e0       	ldi	r22, 0x00	; 0
    c00a:	04 c0       	rjmp	.+8      	; 0xc014 <analogWrite+0x1e>
	}
	else if (val == 255)
    c00c:	cf 3f       	cpi	r28, 0xFF	; 255
    c00e:	d1 05       	cpc	r29, r1
    c010:	31 f4       	brne	.+12     	; 0xc01e <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    c012:	61 e0       	ldi	r22, 0x01	; 1
    c014:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    c016:	df 91       	pop	r29
    c018:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    c01a:	1f 91       	pop	r17
    c01c:	43 c1       	rjmp	.+646    	; 0xc2a4 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    c01e:	e1 2f       	mov	r30, r17
    c020:	f0 e0       	ldi	r31, 0x00	; 0
    c022:	e0 59       	subi	r30, 0x90	; 144
    c024:	f4 4f       	sbci	r31, 0xF4	; 244
    c026:	e4 91       	lpm	r30, Z
    c028:	8e 2f       	mov	r24, r30
    c02a:	90 e0       	ldi	r25, 0x00	; 0
    c02c:	fc 01       	movw	r30, r24
    c02e:	31 97       	sbiw	r30, 0x01	; 1
    c030:	e2 31       	cpi	r30, 0x12	; 18
    c032:	f1 05       	cpc	r31, r1
    c034:	08 f0       	brcs	.+2      	; 0xc038 <analogWrite+0x42>
    c036:	9c c0       	rjmp	.+312    	; 0xc170 <analogWrite+0x17a>
    c038:	88 27       	eor	r24, r24
    c03a:	ee 58       	subi	r30, 0x8E	; 142
    c03c:	ff 4f       	sbci	r31, 0xFF	; 255
    c03e:	8f 4f       	sbci	r24, 0xFF	; 255
    c040:	b6 c3       	rjmp	.+1900   	; 0xc7ae <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    c042:	84 b5       	in	r24, 0x24	; 36
    c044:	80 68       	ori	r24, 0x80	; 128
    c046:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    c048:	c7 bd       	out	0x27, r28	; 39
				break;
    c04a:	97 c0       	rjmp	.+302    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    c04c:	84 b5       	in	r24, 0x24	; 36
    c04e:	80 62       	ori	r24, 0x20	; 32
    c050:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    c052:	c8 bd       	out	0x28, r28	; 40
				break;
    c054:	92 c0       	rjmp	.+292    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    c056:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c05a:	80 68       	ori	r24, 0x80	; 128
    c05c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1A = val; // set pwm duty
    c060:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    c064:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				break;
    c068:	88 c0       	rjmp	.+272    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    c06a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c06e:	80 62       	ori	r24, 0x20	; 32
    c070:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1B = val; // set pwm duty
    c074:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    c078:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				break;
    c07c:	7e c0       	rjmp	.+252    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				sbi(TCCR1A, COM1C1);
    c07e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c082:	88 60       	ori	r24, 0x08	; 8
    c084:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1C = val; // set pwm duty
    c088:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    c08c:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
				break;
    c090:	74 c0       	rjmp	.+232    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    c092:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c096:	80 68       	ori	r24, 0x80	; 128
    c098:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2A = val; // set pwm duty
    c09c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
				break;
    c0a0:	6c c0       	rjmp	.+216    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    c0a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c0a6:	80 62       	ori	r24, 0x20	; 32
    c0a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2B = val; // set pwm duty
    c0ac:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
				break;
    c0b0:	64 c0       	rjmp	.+200    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    c0b2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0b6:	80 68       	ori	r24, 0x80	; 128
    c0b8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3A = val; // set pwm duty
    c0bc:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    c0c0:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
				break;
    c0c4:	5a c0       	rjmp	.+180    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    c0c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0ca:	80 62       	ori	r24, 0x20	; 32
    c0cc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3B = val; // set pwm duty
    c0d0:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    c0d4:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
				break;
    c0d8:	50 c0       	rjmp	.+160    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    c0da:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0de:	88 60       	ori	r24, 0x08	; 8
    c0e0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3C = val; // set pwm duty
    c0e4:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
    c0e8:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
				break;
    c0ec:	46 c0       	rjmp	.+140    	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    c0ee:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c0f2:	80 68       	ori	r24, 0x80	; 128
    c0f4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    c0f8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c0fc:	8f 7b       	andi	r24, 0xBF	; 191
    c0fe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#endif
				OCR4A = val;	// set pwm duty
    c102:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    c106:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
				break;
    c10a:	37 c0       	rjmp	.+110    	; 0xc17a <analogWrite+0x184>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    c10c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c110:	80 62       	ori	r24, 0x20	; 32
    c112:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4B = val; // set pwm duty
    c116:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    c11a:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
				break;
    c11e:	2d c0       	rjmp	.+90     	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    c120:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c124:	88 60       	ori	r24, 0x08	; 8
    c126:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4C = val; // set pwm duty
    c12a:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
    c12e:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
				break;
    c132:	23 c0       	rjmp	.+70     	; 0xc17a <analogWrite+0x184>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    c134:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c138:	80 68       	ori	r24, 0x80	; 128
    c13a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5A = val; // set pwm duty
    c13e:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    c142:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
				break;
    c146:	19 c0       	rjmp	.+50     	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    c148:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c14c:	80 62       	ori	r24, 0x20	; 32
    c14e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5B = val; // set pwm duty
    c152:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    c156:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
				break;
    c15a:	0f c0       	rjmp	.+30     	; 0xc17a <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    c15c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c160:	88 60       	ori	r24, 0x08	; 8
    c162:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5C = val; // set pwm duty
    c166:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
    c16a:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
				break;
    c16e:	05 c0       	rjmp	.+10     	; 0xc17a <analogWrite+0x184>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    c170:	c0 38       	cpi	r28, 0x80	; 128
    c172:	d1 05       	cpc	r29, r1
    c174:	0c f0       	brlt	.+2      	; 0xc178 <analogWrite+0x182>
    c176:	4d cf       	rjmp	.-358    	; 0xc012 <analogWrite+0x1c>
    c178:	47 cf       	rjmp	.-370    	; 0xc008 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    c17a:	df 91       	pop	r29
    c17c:	cf 91       	pop	r28
    c17e:	1f 91       	pop	r17
    c180:	08 95       	ret

0000c182 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    c182:	90 e0       	ldi	r25, 0x00	; 0
    c184:	fc 01       	movw	r30, r24
    c186:	31 97       	sbiw	r30, 0x01	; 1
    c188:	e2 31       	cpi	r30, 0x12	; 18
    c18a:	f1 05       	cpc	r31, r1
    c18c:	08 f0       	brcs	.+2      	; 0xc190 <turnOffPWM+0xe>
    c18e:	4d c0       	rjmp	.+154    	; 0xc22a <turnOffPWM+0xa8>
    c190:	88 27       	eor	r24, r24
    c192:	ec 57       	subi	r30, 0x7C	; 124
    c194:	ff 4f       	sbci	r31, 0xFF	; 255
    c196:	8f 4f       	sbci	r24, 0xFF	; 255
    c198:	0a c3       	rjmp	.+1556   	; 0xc7ae <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    c19a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c19e:	8f 77       	andi	r24, 0x7F	; 127
    c1a0:	03 c0       	rjmp	.+6      	; 0xc1a8 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    c1a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c1a6:	8f 7d       	andi	r24, 0xDF	; 223
    c1a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c1ac:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    c1ae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c1b2:	87 7f       	andi	r24, 0xF7	; 247
    c1b4:	f9 cf       	rjmp	.-14     	; 0xc1a8 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    c1b6:	84 b5       	in	r24, 0x24	; 36
    c1b8:	8f 77       	andi	r24, 0x7F	; 127
    c1ba:	02 c0       	rjmp	.+4      	; 0xc1c0 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    c1bc:	84 b5       	in	r24, 0x24	; 36
    c1be:	8f 7d       	andi	r24, 0xDF	; 223
    c1c0:	84 bd       	out	0x24, r24	; 36
    c1c2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    c1c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c1c8:	8f 77       	andi	r24, 0x7F	; 127
    c1ca:	03 c0       	rjmp	.+6      	; 0xc1d2 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    c1cc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c1d0:	8f 7d       	andi	r24, 0xDF	; 223
    c1d2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c1d6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    c1d8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c1dc:	8f 77       	andi	r24, 0x7F	; 127
    c1de:	07 c0       	rjmp	.+14     	; 0xc1ee <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    c1e0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c1e4:	8f 7d       	andi	r24, 0xDF	; 223
    c1e6:	03 c0       	rjmp	.+6      	; 0xc1ee <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    c1e8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c1ec:	87 7f       	andi	r24, 0xF7	; 247
    c1ee:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c1f2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    c1f4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c1f8:	8f 77       	andi	r24, 0x7F	; 127
    c1fa:	07 c0       	rjmp	.+14     	; 0xc20a <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    c1fc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c200:	8f 7d       	andi	r24, 0xDF	; 223
    c202:	03 c0       	rjmp	.+6      	; 0xc20a <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    c204:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c208:	87 7f       	andi	r24, 0xF7	; 247
    c20a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c20e:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    c210:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c214:	8f 77       	andi	r24, 0x7F	; 127
    c216:	07 c0       	rjmp	.+14     	; 0xc226 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    c218:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c21c:	8f 7d       	andi	r24, 0xDF	; 223
    c21e:	03 c0       	rjmp	.+6      	; 0xc226 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    c220:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c224:	87 7f       	andi	r24, 0xF7	; 247
    c226:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c22a:	08 95       	ret

0000c22c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    c22c:	cf 93       	push	r28
    c22e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    c230:	90 e0       	ldi	r25, 0x00	; 0
    c232:	fc 01       	movw	r30, r24
    c234:	ea 54       	subi	r30, 0x4A	; 74
    c236:	f4 4f       	sbci	r31, 0xF4	; 244
    c238:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    c23a:	fc 01       	movw	r30, r24
    c23c:	e4 50       	subi	r30, 0x04	; 4
    c23e:	f4 4f       	sbci	r31, 0xF4	; 244
    c240:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    c242:	88 23       	and	r24, r24
    c244:	61 f1       	breq	.+88     	; 0xc29e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    c246:	90 e0       	ldi	r25, 0x00	; 0
    c248:	88 0f       	add	r24, r24
    c24a:	99 1f       	adc	r25, r25
    c24c:	fc 01       	movw	r30, r24
    c24e:	ea 58       	subi	r30, 0x8A	; 138
    c250:	f3 4f       	sbci	r31, 0xF3	; 243
    c252:	c5 91       	lpm	r28, Z+
    c254:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    c256:	fc 01       	movw	r30, r24
    c258:	e4 5a       	subi	r30, 0xA4	; 164
    c25a:	f3 4f       	sbci	r31, 0xF3	; 243
    c25c:	a5 91       	lpm	r26, Z+
    c25e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    c260:	61 11       	cpse	r22, r1
    c262:	09 c0       	rjmp	.+18     	; 0xc276 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    c264:	9f b7       	in	r25, 0x3f	; 63
                cli();
    c266:	f8 94       	cli
		*reg &= ~bit;
    c268:	88 81       	ld	r24, Y
    c26a:	20 95       	com	r18
    c26c:	82 23       	and	r24, r18
    c26e:	88 83       	st	Y, r24
		*out &= ~bit;
    c270:	ec 91       	ld	r30, X
    c272:	2e 23       	and	r18, r30
    c274:	0b c0       	rjmp	.+22     	; 0xc28c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    c276:	62 30       	cpi	r22, 0x02	; 2
    c278:	61 f4       	brne	.+24     	; 0xc292 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    c27a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    c27c:	f8 94       	cli
		*reg &= ~bit;
    c27e:	88 81       	ld	r24, Y
    c280:	32 2f       	mov	r19, r18
    c282:	30 95       	com	r19
    c284:	83 23       	and	r24, r19
    c286:	88 83       	st	Y, r24
		*out |= bit;
    c288:	ec 91       	ld	r30, X
    c28a:	2e 2b       	or	r18, r30
    c28c:	2c 93       	st	X, r18
		SREG = oldSREG;
    c28e:	9f bf       	out	0x3f, r25	; 63
    c290:	06 c0       	rjmp	.+12     	; 0xc29e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    c292:	8f b7       	in	r24, 0x3f	; 63
                cli();
    c294:	f8 94       	cli
		*reg |= bit;
    c296:	e8 81       	ld	r30, Y
    c298:	2e 2b       	or	r18, r30
    c29a:	28 83       	st	Y, r18
		SREG = oldSREG;
    c29c:	8f bf       	out	0x3f, r24	; 63
	}
}
    c29e:	df 91       	pop	r29
    c2a0:	cf 91       	pop	r28
    c2a2:	08 95       	ret

0000c2a4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    c2a4:	1f 93       	push	r17
    c2a6:	cf 93       	push	r28
    c2a8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    c2aa:	28 2f       	mov	r18, r24
    c2ac:	30 e0       	ldi	r19, 0x00	; 0
    c2ae:	f9 01       	movw	r30, r18
    c2b0:	e0 59       	subi	r30, 0x90	; 144
    c2b2:	f4 4f       	sbci	r31, 0xF4	; 244
    c2b4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    c2b6:	f9 01       	movw	r30, r18
    c2b8:	ea 54       	subi	r30, 0x4A	; 74
    c2ba:	f4 4f       	sbci	r31, 0xF4	; 244
    c2bc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    c2be:	f9 01       	movw	r30, r18
    c2c0:	e4 50       	subi	r30, 0x04	; 4
    c2c2:	f4 4f       	sbci	r31, 0xF4	; 244
    c2c4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    c2c6:	cc 23       	and	r28, r28
    c2c8:	b9 f0       	breq	.+46     	; 0xc2f8 <digitalWrite+0x54>
    c2ca:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    c2cc:	81 11       	cpse	r24, r1
    c2ce:	59 df       	rcall	.-334    	; 0xc182 <turnOffPWM>

	out = portOutputRegister(port);
    c2d0:	ec 2f       	mov	r30, r28
    c2d2:	f0 e0       	ldi	r31, 0x00	; 0
    c2d4:	ee 0f       	add	r30, r30
    c2d6:	ff 1f       	adc	r31, r31
    c2d8:	e4 5a       	subi	r30, 0xA4	; 164
    c2da:	f3 4f       	sbci	r31, 0xF3	; 243
    c2dc:	a5 91       	lpm	r26, Z+
    c2de:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    c2e0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    c2e2:	f8 94       	cli

	if (val == LOW) {
    c2e4:	11 11       	cpse	r17, r1
    c2e6:	04 c0       	rjmp	.+8      	; 0xc2f0 <digitalWrite+0x4c>
		*out &= ~bit;
    c2e8:	8c 91       	ld	r24, X
    c2ea:	d0 95       	com	r29
    c2ec:	d8 23       	and	r29, r24
    c2ee:	02 c0       	rjmp	.+4      	; 0xc2f4 <digitalWrite+0x50>
	} else {
		*out |= bit;
    c2f0:	ec 91       	ld	r30, X
    c2f2:	de 2b       	or	r29, r30
    c2f4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    c2f6:	9f bf       	out	0x3f, r25	; 63
}
    c2f8:	df 91       	pop	r29
    c2fa:	cf 91       	pop	r28
    c2fc:	1f 91       	pop	r17
    c2fe:	08 95       	ret

0000c300 <digitalRead>:

int digitalRead(uint8_t pin)
{
    c300:	cf 93       	push	r28
    c302:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    c304:	28 2f       	mov	r18, r24
    c306:	30 e0       	ldi	r19, 0x00	; 0
    c308:	f9 01       	movw	r30, r18
    c30a:	e0 59       	subi	r30, 0x90	; 144
    c30c:	f4 4f       	sbci	r31, 0xF4	; 244
    c30e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    c310:	f9 01       	movw	r30, r18
    c312:	ea 54       	subi	r30, 0x4A	; 74
    c314:	f4 4f       	sbci	r31, 0xF4	; 244
    c316:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    c318:	f9 01       	movw	r30, r18
    c31a:	e4 50       	subi	r30, 0x04	; 4
    c31c:	f4 4f       	sbci	r31, 0xF4	; 244
    c31e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    c320:	cc 23       	and	r28, r28
    c322:	89 f0       	breq	.+34     	; 0xc346 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    c324:	81 11       	cpse	r24, r1
    c326:	2d df       	rcall	.-422    	; 0xc182 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    c328:	ec 2f       	mov	r30, r28
    c32a:	f0 e0       	ldi	r31, 0x00	; 0
    c32c:	ee 0f       	add	r30, r30
    c32e:	ff 1f       	adc	r31, r31
    c330:	ee 5b       	subi	r30, 0xBE	; 190
    c332:	f3 4f       	sbci	r31, 0xF3	; 243
    c334:	a5 91       	lpm	r26, Z+
    c336:	b4 91       	lpm	r27, Z
    c338:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    c33a:	ed 23       	and	r30, r29
    c33c:	81 e0       	ldi	r24, 0x01	; 1
    c33e:	90 e0       	ldi	r25, 0x00	; 0
    c340:	21 f4       	brne	.+8      	; 0xc34a <digitalRead+0x4a>
    c342:	80 e0       	ldi	r24, 0x00	; 0
    c344:	02 c0       	rjmp	.+4      	; 0xc34a <digitalRead+0x4a>
    c346:	80 e0       	ldi	r24, 0x00	; 0
    c348:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    c34a:	df 91       	pop	r29
    c34c:	cf 91       	pop	r28
    c34e:	08 95       	ret

0000c350 <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    c350:	0f 93       	push	r16
    c352:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    c354:	90 e0       	ldi	r25, 0x00	; 0
    c356:	fc 01       	movw	r30, r24
    c358:	ea 54       	subi	r30, 0x4A	; 74
    c35a:	f4 4f       	sbci	r31, 0xF4	; 244
    c35c:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    c35e:	fc 01       	movw	r30, r24
    c360:	e4 50       	subi	r30, 0x04	; 4
    c362:	f4 4f       	sbci	r31, 0xF4	; 244
    c364:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    c366:	66 23       	and	r22, r22
    c368:	11 f0       	breq	.+4      	; 0xc36e <pulseIn+0x1e>
    c36a:	67 2f       	mov	r22, r23
    c36c:	01 c0       	rjmp	.+2      	; 0xc370 <pulseIn+0x20>
    c36e:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    c370:	f0 e0       	ldi	r31, 0x00	; 0
    c372:	ee 0f       	add	r30, r30
    c374:	ff 1f       	adc	r31, r31
    c376:	ee 5b       	subi	r30, 0xBE	; 190
    c378:	f3 4f       	sbci	r31, 0xF3	; 243
    c37a:	85 91       	lpm	r24, Z+
    c37c:	94 91       	lpm	r25, Z
    c37e:	89 01       	movw	r16, r18
    c380:	9a 01       	movw	r18, r20
    c382:	3f 70       	andi	r19, 0x0F	; 15
    c384:	46 2f       	mov	r20, r22
    c386:	67 2f       	mov	r22, r23
    c388:	0e 94 84 06 	call	0xd08	; 0xd08 <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    c38c:	61 15       	cp	r22, r1
    c38e:	71 05       	cpc	r23, r1
    c390:	81 05       	cpc	r24, r1
    c392:	91 05       	cpc	r25, r1
    c394:	49 f0       	breq	.+18     	; 0xc3a8 <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    c396:	dc 01       	movw	r26, r24
    c398:	cb 01       	movw	r24, r22
    c39a:	01 96       	adiw	r24, 0x01	; 1
    c39c:	a1 1d       	adc	r26, r1
    c39e:	b1 1d       	adc	r27, r1
    c3a0:	bc 01       	movw	r22, r24
    c3a2:	cd 01       	movw	r24, r26
    c3a4:	9f 70       	andi	r25, 0x0F	; 15
    c3a6:	03 c0       	rjmp	.+6      	; 0xc3ae <pulseIn+0x5e>
	else
		return 0;
    c3a8:	60 e0       	ldi	r22, 0x00	; 0
    c3aa:	70 e0       	ldi	r23, 0x00	; 0
    c3ac:	cb 01       	movw	r24, r22
}
    c3ae:	1f 91       	pop	r17
    c3b0:	0f 91       	pop	r16
    c3b2:	08 95       	ret

0000c3b4 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    c3b4:	4f 92       	push	r4
    c3b6:	5f 92       	push	r5
    c3b8:	6f 92       	push	r6
    c3ba:	7f 92       	push	r7
    c3bc:	af 92       	push	r10
    c3be:	bf 92       	push	r11
    c3c0:	cf 92       	push	r12
    c3c2:	df 92       	push	r13
    c3c4:	ef 92       	push	r14
    c3c6:	ff 92       	push	r15
    c3c8:	0f 93       	push	r16
    c3ca:	1f 93       	push	r17
    c3cc:	cf 93       	push	r28
    c3ce:	df 93       	push	r29
    c3d0:	cd b7       	in	r28, 0x3d	; 61
    c3d2:	de b7       	in	r29, 0x3e	; 62
    c3d4:	29 01       	movw	r4, r18
    c3d6:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    c3d8:	9b 01       	movw	r18, r22
    c3da:	ac 01       	movw	r20, r24
    c3dc:	24 19       	sub	r18, r4
    c3de:	35 09       	sbc	r19, r5
    c3e0:	46 09       	sbc	r20, r6
    c3e2:	57 09       	sbc	r21, r7
    c3e4:	8a 89       	ldd	r24, Y+18	; 0x12
    c3e6:	9b 89       	ldd	r25, Y+19	; 0x13
    c3e8:	ac 89       	ldd	r26, Y+20	; 0x14
    c3ea:	bd 89       	ldd	r27, Y+21	; 0x15
    c3ec:	bc 01       	movw	r22, r24
    c3ee:	cd 01       	movw	r24, r26
    c3f0:	6a 19       	sub	r22, r10
    c3f2:	7b 09       	sbc	r23, r11
    c3f4:	8c 09       	sbc	r24, r12
    c3f6:	9d 09       	sbc	r25, r13
    c3f8:	8d d1       	rcall	.+794    	; 0xc714 <__mulsi3>
    c3fa:	a8 01       	movw	r20, r16
    c3fc:	97 01       	movw	r18, r14
    c3fe:	24 19       	sub	r18, r4
    c400:	35 09       	sbc	r19, r5
    c402:	46 09       	sbc	r20, r6
    c404:	57 09       	sbc	r21, r7
    c406:	b7 d1       	rcall	.+878    	; 0xc776 <__divmodsi4>
    c408:	ca 01       	movw	r24, r20
    c40a:	b9 01       	movw	r22, r18
    c40c:	6a 0d       	add	r22, r10
    c40e:	7b 1d       	adc	r23, r11
    c410:	8c 1d       	adc	r24, r12
    c412:	9d 1d       	adc	r25, r13
}
    c414:	df 91       	pop	r29
    c416:	cf 91       	pop	r28
    c418:	1f 91       	pop	r17
    c41a:	0f 91       	pop	r16
    c41c:	ff 90       	pop	r15
    c41e:	ef 90       	pop	r14
    c420:	df 90       	pop	r13
    c422:	cf 90       	pop	r12
    c424:	bf 90       	pop	r11
    c426:	af 90       	pop	r10
    c428:	7f 90       	pop	r7
    c42a:	6f 90       	pop	r6
    c42c:	5f 90       	pop	r5
    c42e:	4f 90       	pop	r4
    c430:	08 95       	ret

0000c432 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    c432:	fc 01       	movw	r30, r24
    c434:	80 81       	ld	r24, Z
    c436:	91 81       	ldd	r25, Z+1	; 0x01
    c438:	00 97       	sbiw	r24, 0x00	; 0
    c43a:	09 f0       	breq	.+2      	; 0xc43e <_ZN6StringD1Ev+0xc>
    c43c:	71 c2       	rjmp	.+1250   	; 0xc920 <free>
    c43e:	08 95       	ret

0000c440 <_ZN6String10invalidateEv>:
    c440:	cf 93       	push	r28
    c442:	df 93       	push	r29
    c444:	ec 01       	movw	r28, r24
    c446:	88 81       	ld	r24, Y
    c448:	99 81       	ldd	r25, Y+1	; 0x01
    c44a:	00 97       	sbiw	r24, 0x00	; 0
    c44c:	09 f0       	breq	.+2      	; 0xc450 <_ZN6String10invalidateEv+0x10>
    c44e:	68 d2       	rcall	.+1232   	; 0xc920 <free>
    c450:	19 82       	std	Y+1, r1	; 0x01
    c452:	18 82       	st	Y, r1
    c454:	1d 82       	std	Y+5, r1	; 0x05
    c456:	1c 82       	std	Y+4, r1	; 0x04
    c458:	1b 82       	std	Y+3, r1	; 0x03
    c45a:	1a 82       	std	Y+2, r1	; 0x02
    c45c:	df 91       	pop	r29
    c45e:	cf 91       	pop	r28
    c460:	08 95       	ret

0000c462 <_ZN6String12changeBufferEj>:
    c462:	0f 93       	push	r16
    c464:	1f 93       	push	r17
    c466:	cf 93       	push	r28
    c468:	df 93       	push	r29
    c46a:	ec 01       	movw	r28, r24
    c46c:	8b 01       	movw	r16, r22
    c46e:	6f 5f       	subi	r22, 0xFF	; 255
    c470:	7f 4f       	sbci	r23, 0xFF	; 255
    c472:	88 81       	ld	r24, Y
    c474:	99 81       	ldd	r25, Y+1	; 0x01
    c476:	dd d2       	rcall	.+1466   	; 0xca32 <realloc>
    c478:	00 97       	sbiw	r24, 0x00	; 0
    c47a:	31 f0       	breq	.+12     	; 0xc488 <_ZN6String12changeBufferEj+0x26>
    c47c:	99 83       	std	Y+1, r25	; 0x01
    c47e:	88 83       	st	Y, r24
    c480:	1b 83       	std	Y+3, r17	; 0x03
    c482:	0a 83       	std	Y+2, r16	; 0x02
    c484:	81 e0       	ldi	r24, 0x01	; 1
    c486:	01 c0       	rjmp	.+2      	; 0xc48a <_ZN6String12changeBufferEj+0x28>
    c488:	80 e0       	ldi	r24, 0x00	; 0
    c48a:	df 91       	pop	r29
    c48c:	cf 91       	pop	r28
    c48e:	1f 91       	pop	r17
    c490:	0f 91       	pop	r16
    c492:	08 95       	ret

0000c494 <_ZN6String7reserveEj>:
    c494:	cf 93       	push	r28
    c496:	df 93       	push	r29
    c498:	ec 01       	movw	r28, r24
    c49a:	88 81       	ld	r24, Y
    c49c:	99 81       	ldd	r25, Y+1	; 0x01
    c49e:	89 2b       	or	r24, r25
    c4a0:	29 f0       	breq	.+10     	; 0xc4ac <_ZN6String7reserveEj+0x18>
    c4a2:	8a 81       	ldd	r24, Y+2	; 0x02
    c4a4:	9b 81       	ldd	r25, Y+3	; 0x03
    c4a6:	86 17       	cp	r24, r22
    c4a8:	97 07       	cpc	r25, r23
    c4aa:	58 f4       	brcc	.+22     	; 0xc4c2 <_ZN6String7reserveEj+0x2e>
    c4ac:	ce 01       	movw	r24, r28
    c4ae:	d9 df       	rcall	.-78     	; 0xc462 <_ZN6String12changeBufferEj>
    c4b0:	88 23       	and	r24, r24
    c4b2:	41 f0       	breq	.+16     	; 0xc4c4 <_ZN6String7reserveEj+0x30>
    c4b4:	8c 81       	ldd	r24, Y+4	; 0x04
    c4b6:	9d 81       	ldd	r25, Y+5	; 0x05
    c4b8:	89 2b       	or	r24, r25
    c4ba:	19 f4       	brne	.+6      	; 0xc4c2 <_ZN6String7reserveEj+0x2e>
    c4bc:	e8 81       	ld	r30, Y
    c4be:	f9 81       	ldd	r31, Y+1	; 0x01
    c4c0:	10 82       	st	Z, r1
    c4c2:	81 e0       	ldi	r24, 0x01	; 1
    c4c4:	df 91       	pop	r29
    c4c6:	cf 91       	pop	r28
    c4c8:	08 95       	ret

0000c4ca <_ZN6String4copyEPKcj>:
    c4ca:	ef 92       	push	r14
    c4cc:	ff 92       	push	r15
    c4ce:	0f 93       	push	r16
    c4d0:	1f 93       	push	r17
    c4d2:	cf 93       	push	r28
    c4d4:	df 93       	push	r29
    c4d6:	ec 01       	movw	r28, r24
    c4d8:	7b 01       	movw	r14, r22
    c4da:	8a 01       	movw	r16, r20
    c4dc:	ba 01       	movw	r22, r20
    c4de:	da df       	rcall	.-76     	; 0xc494 <_ZN6String7reserveEj>
    c4e0:	81 11       	cpse	r24, r1
    c4e2:	03 c0       	rjmp	.+6      	; 0xc4ea <_ZN6String4copyEPKcj+0x20>
    c4e4:	ce 01       	movw	r24, r28
    c4e6:	ac df       	rcall	.-168    	; 0xc440 <_ZN6String10invalidateEv>
    c4e8:	06 c0       	rjmp	.+12     	; 0xc4f6 <_ZN6String4copyEPKcj+0x2c>
    c4ea:	1d 83       	std	Y+5, r17	; 0x05
    c4ec:	0c 83       	std	Y+4, r16	; 0x04
    c4ee:	b7 01       	movw	r22, r14
    c4f0:	88 81       	ld	r24, Y
    c4f2:	99 81       	ldd	r25, Y+1	; 0x01
    c4f4:	a3 d3       	rcall	.+1862   	; 0xcc3c <strcpy>
    c4f6:	ce 01       	movw	r24, r28
    c4f8:	df 91       	pop	r29
    c4fa:	cf 91       	pop	r28
    c4fc:	1f 91       	pop	r17
    c4fe:	0f 91       	pop	r16
    c500:	ff 90       	pop	r15
    c502:	ef 90       	pop	r14
    c504:	08 95       	ret

0000c506 <_ZN6StringC1EPKc>:
    c506:	fc 01       	movw	r30, r24
    c508:	11 82       	std	Z+1, r1	; 0x01
    c50a:	10 82       	st	Z, r1
    c50c:	13 82       	std	Z+3, r1	; 0x03
    c50e:	12 82       	std	Z+2, r1	; 0x02
    c510:	15 82       	std	Z+5, r1	; 0x05
    c512:	14 82       	std	Z+4, r1	; 0x04
    c514:	61 15       	cp	r22, r1
    c516:	71 05       	cpc	r23, r1
    c518:	49 f0       	breq	.+18     	; 0xc52c <_ZN6StringC1EPKc+0x26>
    c51a:	fb 01       	movw	r30, r22
    c51c:	01 90       	ld	r0, Z+
    c51e:	00 20       	and	r0, r0
    c520:	e9 f7       	brne	.-6      	; 0xc51c <_ZN6StringC1EPKc+0x16>
    c522:	31 97       	sbiw	r30, 0x01	; 1
    c524:	af 01       	movw	r20, r30
    c526:	46 1b       	sub	r20, r22
    c528:	57 0b       	sbc	r21, r23
    c52a:	cf cf       	rjmp	.-98     	; 0xc4ca <_ZN6String4copyEPKcj>
    c52c:	08 95       	ret

0000c52e <_ZN6StringaSERKS_>:
    c52e:	cf 93       	push	r28
    c530:	df 93       	push	r29
    c532:	ec 01       	movw	r28, r24
    c534:	fb 01       	movw	r30, r22
    c536:	86 17       	cp	r24, r22
    c538:	97 07       	cpc	r25, r23
    c53a:	51 f0       	breq	.+20     	; 0xc550 <_ZN6StringaSERKS_+0x22>
    c53c:	60 81       	ld	r22, Z
    c53e:	71 81       	ldd	r23, Z+1	; 0x01
    c540:	61 15       	cp	r22, r1
    c542:	71 05       	cpc	r23, r1
    c544:	21 f0       	breq	.+8      	; 0xc54e <_ZN6StringaSERKS_+0x20>
    c546:	44 81       	ldd	r20, Z+4	; 0x04
    c548:	55 81       	ldd	r21, Z+5	; 0x05
    c54a:	bf df       	rcall	.-130    	; 0xc4ca <_ZN6String4copyEPKcj>
    c54c:	01 c0       	rjmp	.+2      	; 0xc550 <_ZN6StringaSERKS_+0x22>
    c54e:	78 df       	rcall	.-272    	; 0xc440 <_ZN6String10invalidateEv>
    c550:	ce 01       	movw	r24, r28
    c552:	df 91       	pop	r29
    c554:	cf 91       	pop	r28
    c556:	08 95       	ret

0000c558 <_ZN6StringC1ERKS_>:
    c558:	fc 01       	movw	r30, r24
    c55a:	11 82       	std	Z+1, r1	; 0x01
    c55c:	10 82       	st	Z, r1
    c55e:	13 82       	std	Z+3, r1	; 0x03
    c560:	12 82       	std	Z+2, r1	; 0x02
    c562:	15 82       	std	Z+5, r1	; 0x05
    c564:	14 82       	std	Z+4, r1	; 0x04
    c566:	e3 cf       	rjmp	.-58     	; 0xc52e <_ZN6StringaSERKS_>

0000c568 <_ZN6StringaSEPKc>:
    c568:	cf 93       	push	r28
    c56a:	df 93       	push	r29
    c56c:	ec 01       	movw	r28, r24
    c56e:	61 15       	cp	r22, r1
    c570:	71 05       	cpc	r23, r1
    c572:	51 f0       	breq	.+20     	; 0xc588 <_ZN6StringaSEPKc+0x20>
    c574:	fb 01       	movw	r30, r22
    c576:	01 90       	ld	r0, Z+
    c578:	00 20       	and	r0, r0
    c57a:	e9 f7       	brne	.-6      	; 0xc576 <_ZN6StringaSEPKc+0xe>
    c57c:	31 97       	sbiw	r30, 0x01	; 1
    c57e:	af 01       	movw	r20, r30
    c580:	46 1b       	sub	r20, r22
    c582:	57 0b       	sbc	r21, r23
    c584:	a2 df       	rcall	.-188    	; 0xc4ca <_ZN6String4copyEPKcj>
    c586:	01 c0       	rjmp	.+2      	; 0xc58a <_ZN6StringaSEPKc+0x22>
    c588:	5b df       	rcall	.-330    	; 0xc440 <_ZN6String10invalidateEv>
    c58a:	ce 01       	movw	r24, r28
    c58c:	df 91       	pop	r29
    c58e:	cf 91       	pop	r28
    c590:	08 95       	ret

0000c592 <_ZN6StringC1Ehh>:
    c592:	0f 93       	push	r16
    c594:	1f 93       	push	r17
    c596:	cf 93       	push	r28
    c598:	df 93       	push	r29
    c59a:	cd b7       	in	r28, 0x3d	; 61
    c59c:	de b7       	in	r29, 0x3e	; 62
    c59e:	29 97       	sbiw	r28, 0x09	; 9
    c5a0:	0f b6       	in	r0, 0x3f	; 63
    c5a2:	f8 94       	cli
    c5a4:	de bf       	out	0x3e, r29	; 62
    c5a6:	0f be       	out	0x3f, r0	; 63
    c5a8:	cd bf       	out	0x3d, r28	; 61
    c5aa:	8c 01       	movw	r16, r24
    c5ac:	86 2f       	mov	r24, r22
    c5ae:	f8 01       	movw	r30, r16
    c5b0:	11 82       	std	Z+1, r1	; 0x01
    c5b2:	10 82       	st	Z, r1
    c5b4:	13 82       	std	Z+3, r1	; 0x03
    c5b6:	12 82       	std	Z+2, r1	; 0x02
    c5b8:	15 82       	std	Z+5, r1	; 0x05
    c5ba:	14 82       	std	Z+4, r1	; 0x04
    c5bc:	50 e0       	ldi	r21, 0x00	; 0
    c5be:	be 01       	movw	r22, r28
    c5c0:	6f 5f       	subi	r22, 0xFF	; 255
    c5c2:	7f 4f       	sbci	r23, 0xFF	; 255
    c5c4:	90 e0       	ldi	r25, 0x00	; 0
    c5c6:	41 d3       	rcall	.+1666   	; 0xcc4a <utoa>
    c5c8:	be 01       	movw	r22, r28
    c5ca:	6f 5f       	subi	r22, 0xFF	; 255
    c5cc:	7f 4f       	sbci	r23, 0xFF	; 255
    c5ce:	c8 01       	movw	r24, r16
    c5d0:	cb df       	rcall	.-106    	; 0xc568 <_ZN6StringaSEPKc>
    c5d2:	29 96       	adiw	r28, 0x09	; 9
    c5d4:	0f b6       	in	r0, 0x3f	; 63
    c5d6:	f8 94       	cli
    c5d8:	de bf       	out	0x3e, r29	; 62
    c5da:	0f be       	out	0x3f, r0	; 63
    c5dc:	cd bf       	out	0x3d, r28	; 61
    c5de:	df 91       	pop	r29
    c5e0:	cf 91       	pop	r28
    c5e2:	1f 91       	pop	r17
    c5e4:	0f 91       	pop	r16
    c5e6:	08 95       	ret

0000c5e8 <_ZN6String6concatEPKcj>:
    c5e8:	ef 92       	push	r14
    c5ea:	ff 92       	push	r15
    c5ec:	0f 93       	push	r16
    c5ee:	1f 93       	push	r17
    c5f0:	cf 93       	push	r28
    c5f2:	df 93       	push	r29
    c5f4:	61 15       	cp	r22, r1
    c5f6:	71 05       	cpc	r23, r1
    c5f8:	11 f4       	brne	.+4      	; 0xc5fe <_ZN6String6concatEPKcj+0x16>
    c5fa:	80 e0       	ldi	r24, 0x00	; 0
    c5fc:	1a c0       	rjmp	.+52     	; 0xc632 <_ZN6String6concatEPKcj+0x4a>
    c5fe:	41 15       	cp	r20, r1
    c600:	51 05       	cpc	r21, r1
    c602:	b1 f0       	breq	.+44     	; 0xc630 <_ZN6String6concatEPKcj+0x48>
    c604:	7b 01       	movw	r14, r22
    c606:	ec 01       	movw	r28, r24
    c608:	8c 81       	ldd	r24, Y+4	; 0x04
    c60a:	9d 81       	ldd	r25, Y+5	; 0x05
    c60c:	8a 01       	movw	r16, r20
    c60e:	08 0f       	add	r16, r24
    c610:	19 1f       	adc	r17, r25
    c612:	b8 01       	movw	r22, r16
    c614:	ce 01       	movw	r24, r28
    c616:	3e df       	rcall	.-388    	; 0xc494 <_ZN6String7reserveEj>
    c618:	88 23       	and	r24, r24
    c61a:	79 f3       	breq	.-34     	; 0xc5fa <_ZN6String6concatEPKcj+0x12>
    c61c:	28 81       	ld	r18, Y
    c61e:	39 81       	ldd	r19, Y+1	; 0x01
    c620:	8c 81       	ldd	r24, Y+4	; 0x04
    c622:	9d 81       	ldd	r25, Y+5	; 0x05
    c624:	b7 01       	movw	r22, r14
    c626:	82 0f       	add	r24, r18
    c628:	93 1f       	adc	r25, r19
    c62a:	08 d3       	rcall	.+1552   	; 0xcc3c <strcpy>
    c62c:	1d 83       	std	Y+5, r17	; 0x05
    c62e:	0c 83       	std	Y+4, r16	; 0x04
    c630:	81 e0       	ldi	r24, 0x01	; 1
    c632:	df 91       	pop	r29
    c634:	cf 91       	pop	r28
    c636:	1f 91       	pop	r17
    c638:	0f 91       	pop	r16
    c63a:	ff 90       	pop	r15
    c63c:	ef 90       	pop	r14
    c63e:	08 95       	ret

0000c640 <_ZN6String6concatERKS_>:
    c640:	fb 01       	movw	r30, r22
    c642:	44 81       	ldd	r20, Z+4	; 0x04
    c644:	55 81       	ldd	r21, Z+5	; 0x05
    c646:	60 81       	ld	r22, Z
    c648:	71 81       	ldd	r23, Z+1	; 0x01
    c64a:	ce cf       	rjmp	.-100    	; 0xc5e8 <_ZN6String6concatEPKcj>

0000c64c <_ZN6String6concatEPKc>:
    c64c:	61 15       	cp	r22, r1
    c64e:	71 05       	cpc	r23, r1
    c650:	49 f0       	breq	.+18     	; 0xc664 <_ZN6String6concatEPKc+0x18>
    c652:	fb 01       	movw	r30, r22
    c654:	01 90       	ld	r0, Z+
    c656:	00 20       	and	r0, r0
    c658:	e9 f7       	brne	.-6      	; 0xc654 <_ZN6String6concatEPKc+0x8>
    c65a:	31 97       	sbiw	r30, 0x01	; 1
    c65c:	af 01       	movw	r20, r30
    c65e:	46 1b       	sub	r20, r22
    c660:	57 0b       	sbc	r21, r23
    c662:	c2 cf       	rjmp	.-124    	; 0xc5e8 <_ZN6String6concatEPKcj>
    c664:	80 e0       	ldi	r24, 0x00	; 0
    c666:	08 95       	ret

0000c668 <_ZNK6String9compareToERKS_>:
    c668:	cf 93       	push	r28
    c66a:	df 93       	push	r29
    c66c:	dc 01       	movw	r26, r24
    c66e:	ed 91       	ld	r30, X+
    c670:	fc 91       	ld	r31, X
    c672:	eb 01       	movw	r28, r22
    c674:	a8 81       	ld	r26, Y
    c676:	b9 81       	ldd	r27, Y+1	; 0x01
    c678:	30 97       	sbiw	r30, 0x00	; 0
    c67a:	11 f0       	breq	.+4      	; 0xc680 <_ZNK6String9compareToERKS_+0x18>
    c67c:	10 97       	sbiw	r26, 0x00	; 0
    c67e:	c9 f4       	brne	.+50     	; 0xc6b2 <_ZNK6String9compareToERKS_+0x4a>
    c680:	10 97       	sbiw	r26, 0x00	; 0
    c682:	59 f0       	breq	.+22     	; 0xc69a <_ZNK6String9compareToERKS_+0x32>
    c684:	eb 01       	movw	r28, r22
    c686:	2c 81       	ldd	r18, Y+4	; 0x04
    c688:	3d 81       	ldd	r19, Y+5	; 0x05
    c68a:	23 2b       	or	r18, r19
    c68c:	31 f0       	breq	.+12     	; 0xc69a <_ZNK6String9compareToERKS_+0x32>
    c68e:	8c 91       	ld	r24, X
    c690:	90 e0       	ldi	r25, 0x00	; 0
    c692:	91 95       	neg	r25
    c694:	81 95       	neg	r24
    c696:	91 09       	sbc	r25, r1
    c698:	13 c0       	rjmp	.+38     	; 0xc6c0 <_ZNK6String9compareToERKS_+0x58>
    c69a:	30 97       	sbiw	r30, 0x00	; 0
    c69c:	79 f0       	breq	.+30     	; 0xc6bc <_ZNK6String9compareToERKS_+0x54>
    c69e:	dc 01       	movw	r26, r24
    c6a0:	14 96       	adiw	r26, 0x04	; 4
    c6a2:	8d 91       	ld	r24, X+
    c6a4:	9c 91       	ld	r25, X
    c6a6:	15 97       	sbiw	r26, 0x05	; 5
    c6a8:	89 2b       	or	r24, r25
    c6aa:	41 f0       	breq	.+16     	; 0xc6bc <_ZNK6String9compareToERKS_+0x54>
    c6ac:	80 81       	ld	r24, Z
    c6ae:	90 e0       	ldi	r25, 0x00	; 0
    c6b0:	07 c0       	rjmp	.+14     	; 0xc6c0 <_ZNK6String9compareToERKS_+0x58>
    c6b2:	bd 01       	movw	r22, r26
    c6b4:	cf 01       	movw	r24, r30
    c6b6:	df 91       	pop	r29
    c6b8:	cf 91       	pop	r28
    c6ba:	b7 c2       	rjmp	.+1390   	; 0xcc2a <strcmp>
    c6bc:	80 e0       	ldi	r24, 0x00	; 0
    c6be:	90 e0       	ldi	r25, 0x00	; 0
    c6c0:	df 91       	pop	r29
    c6c2:	cf 91       	pop	r28
    c6c4:	08 95       	ret

0000c6c6 <_ZNK6String6equalsERKS_>:
    c6c6:	fc 01       	movw	r30, r24
    c6c8:	44 81       	ldd	r20, Z+4	; 0x04
    c6ca:	55 81       	ldd	r21, Z+5	; 0x05
    c6cc:	fb 01       	movw	r30, r22
    c6ce:	24 81       	ldd	r18, Z+4	; 0x04
    c6d0:	35 81       	ldd	r19, Z+5	; 0x05
    c6d2:	42 17       	cp	r20, r18
    c6d4:	53 07       	cpc	r21, r19
    c6d6:	21 f4       	brne	.+8      	; 0xc6e0 <_ZNK6String6equalsERKS_+0x1a>
    c6d8:	c7 df       	rcall	.-114    	; 0xc668 <_ZNK6String9compareToERKS_>
    c6da:	21 e0       	ldi	r18, 0x01	; 1
    c6dc:	89 2b       	or	r24, r25
    c6de:	09 f0       	breq	.+2      	; 0xc6e2 <_ZNK6String6equalsERKS_+0x1c>
    c6e0:	20 e0       	ldi	r18, 0x00	; 0
    c6e2:	82 2f       	mov	r24, r18
    c6e4:	08 95       	ret

0000c6e6 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    c6e6:	cf 93       	push	r28
    c6e8:	df 93       	push	r29
	if (!buffer) return;
    c6ea:	fc 01       	movw	r30, r24
    c6ec:	c0 81       	ld	r28, Z
    c6ee:	d1 81       	ldd	r29, Z+1	; 0x01
    c6f0:	20 97       	sbiw	r28, 0x00	; 0
    c6f2:	39 f0       	breq	.+14     	; 0xc702 <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    c6f4:	88 81       	ld	r24, Y
    c6f6:	88 23       	and	r24, r24
    c6f8:	21 f0       	breq	.+8      	; 0xc702 <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    c6fa:	90 e0       	ldi	r25, 0x00	; 0
    c6fc:	7e d2       	rcall	.+1276   	; 0xcbfa <toupper>
    c6fe:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    c700:	f9 cf       	rjmp	.-14     	; 0xc6f4 <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    c702:	df 91       	pop	r29
    c704:	cf 91       	pop	r28
    c706:	08 95       	ret

0000c708 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    c708:	08 95       	ret

0000c70a <__unordsf2>:
    c70a:	0e 94 af 59 	call	0xb35e	; 0xb35e <__fp_cmp>
    c70e:	88 0b       	sbc	r24, r24
    c710:	99 0b       	sbc	r25, r25
    c712:	08 95       	ret

0000c714 <__mulsi3>:
    c714:	db 01       	movw	r26, r22
    c716:	8f 93       	push	r24
    c718:	9f 93       	push	r25
    c71a:	60 d0       	rcall	.+192    	; 0xc7dc <__muluhisi3>
    c71c:	bf 91       	pop	r27
    c71e:	af 91       	pop	r26
    c720:	a2 9f       	mul	r26, r18
    c722:	80 0d       	add	r24, r0
    c724:	91 1d       	adc	r25, r1
    c726:	a3 9f       	mul	r26, r19
    c728:	90 0d       	add	r25, r0
    c72a:	b2 9f       	mul	r27, r18
    c72c:	90 0d       	add	r25, r0
    c72e:	11 24       	eor	r1, r1
    c730:	08 95       	ret

0000c732 <__udivmodsi4>:
    c732:	a1 e2       	ldi	r26, 0x21	; 33
    c734:	1a 2e       	mov	r1, r26
    c736:	aa 1b       	sub	r26, r26
    c738:	bb 1b       	sub	r27, r27
    c73a:	fd 01       	movw	r30, r26
    c73c:	0d c0       	rjmp	.+26     	; 0xc758 <__udivmodsi4_ep>

0000c73e <__udivmodsi4_loop>:
    c73e:	aa 1f       	adc	r26, r26
    c740:	bb 1f       	adc	r27, r27
    c742:	ee 1f       	adc	r30, r30
    c744:	ff 1f       	adc	r31, r31
    c746:	a2 17       	cp	r26, r18
    c748:	b3 07       	cpc	r27, r19
    c74a:	e4 07       	cpc	r30, r20
    c74c:	f5 07       	cpc	r31, r21
    c74e:	20 f0       	brcs	.+8      	; 0xc758 <__udivmodsi4_ep>
    c750:	a2 1b       	sub	r26, r18
    c752:	b3 0b       	sbc	r27, r19
    c754:	e4 0b       	sbc	r30, r20
    c756:	f5 0b       	sbc	r31, r21

0000c758 <__udivmodsi4_ep>:
    c758:	66 1f       	adc	r22, r22
    c75a:	77 1f       	adc	r23, r23
    c75c:	88 1f       	adc	r24, r24
    c75e:	99 1f       	adc	r25, r25
    c760:	1a 94       	dec	r1
    c762:	69 f7       	brne	.-38     	; 0xc73e <__udivmodsi4_loop>
    c764:	60 95       	com	r22
    c766:	70 95       	com	r23
    c768:	80 95       	com	r24
    c76a:	90 95       	com	r25
    c76c:	9b 01       	movw	r18, r22
    c76e:	ac 01       	movw	r20, r24
    c770:	bd 01       	movw	r22, r26
    c772:	cf 01       	movw	r24, r30
    c774:	08 95       	ret

0000c776 <__divmodsi4>:
    c776:	05 2e       	mov	r0, r21
    c778:	97 fb       	bst	r25, 7
    c77a:	16 f4       	brtc	.+4      	; 0xc780 <__divmodsi4+0xa>
    c77c:	00 94       	com	r0
    c77e:	0f d0       	rcall	.+30     	; 0xc79e <__negsi2>
    c780:	57 fd       	sbrc	r21, 7
    c782:	05 d0       	rcall	.+10     	; 0xc78e <__divmodsi4_neg2>
    c784:	d6 df       	rcall	.-84     	; 0xc732 <__udivmodsi4>
    c786:	07 fc       	sbrc	r0, 7
    c788:	02 d0       	rcall	.+4      	; 0xc78e <__divmodsi4_neg2>
    c78a:	46 f4       	brtc	.+16     	; 0xc79c <__divmodsi4_exit>
    c78c:	08 c0       	rjmp	.+16     	; 0xc79e <__negsi2>

0000c78e <__divmodsi4_neg2>:
    c78e:	50 95       	com	r21
    c790:	40 95       	com	r20
    c792:	30 95       	com	r19
    c794:	21 95       	neg	r18
    c796:	3f 4f       	sbci	r19, 0xFF	; 255
    c798:	4f 4f       	sbci	r20, 0xFF	; 255
    c79a:	5f 4f       	sbci	r21, 0xFF	; 255

0000c79c <__divmodsi4_exit>:
    c79c:	08 95       	ret

0000c79e <__negsi2>:
    c79e:	90 95       	com	r25
    c7a0:	80 95       	com	r24
    c7a2:	70 95       	com	r23
    c7a4:	61 95       	neg	r22
    c7a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c7a8:	8f 4f       	sbci	r24, 0xFF	; 255
    c7aa:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ac:	08 95       	ret

0000c7ae <__tablejump2__>:
    c7ae:	ee 0f       	add	r30, r30
    c7b0:	ff 1f       	adc	r31, r31
    c7b2:	88 1f       	adc	r24, r24
    c7b4:	8b bf       	out	0x3b, r24	; 59
    c7b6:	07 90       	elpm	r0, Z+
    c7b8:	f6 91       	elpm	r31, Z
    c7ba:	e0 2d       	mov	r30, r0
    c7bc:	19 94       	eijmp

0000c7be <__umulhisi3>:
    c7be:	a2 9f       	mul	r26, r18
    c7c0:	b0 01       	movw	r22, r0
    c7c2:	b3 9f       	mul	r27, r19
    c7c4:	c0 01       	movw	r24, r0
    c7c6:	a3 9f       	mul	r26, r19
    c7c8:	70 0d       	add	r23, r0
    c7ca:	81 1d       	adc	r24, r1
    c7cc:	11 24       	eor	r1, r1
    c7ce:	91 1d       	adc	r25, r1
    c7d0:	b2 9f       	mul	r27, r18
    c7d2:	70 0d       	add	r23, r0
    c7d4:	81 1d       	adc	r24, r1
    c7d6:	11 24       	eor	r1, r1
    c7d8:	91 1d       	adc	r25, r1
    c7da:	08 95       	ret

0000c7dc <__muluhisi3>:
    c7dc:	f0 df       	rcall	.-32     	; 0xc7be <__umulhisi3>
    c7de:	a5 9f       	mul	r26, r21
    c7e0:	90 0d       	add	r25, r0
    c7e2:	b4 9f       	mul	r27, r20
    c7e4:	90 0d       	add	r25, r0
    c7e6:	a4 9f       	mul	r26, r20
    c7e8:	80 0d       	add	r24, r0
    c7ea:	91 1d       	adc	r25, r1
    c7ec:	11 24       	eor	r1, r1
    c7ee:	08 95       	ret

0000c7f0 <malloc>:
    c7f0:	0f 93       	push	r16
    c7f2:	1f 93       	push	r17
    c7f4:	cf 93       	push	r28
    c7f6:	df 93       	push	r29
    c7f8:	82 30       	cpi	r24, 0x02	; 2
    c7fa:	91 05       	cpc	r25, r1
    c7fc:	10 f4       	brcc	.+4      	; 0xc802 <malloc+0x12>
    c7fe:	82 e0       	ldi	r24, 0x02	; 2
    c800:	90 e0       	ldi	r25, 0x00	; 0
    c802:	e0 91 79 06 	lds	r30, 0x0679	; 0x800679 <__flp>
    c806:	f0 91 7a 06 	lds	r31, 0x067A	; 0x80067a <__flp+0x1>
    c80a:	20 e0       	ldi	r18, 0x00	; 0
    c80c:	30 e0       	ldi	r19, 0x00	; 0
    c80e:	a0 e0       	ldi	r26, 0x00	; 0
    c810:	b0 e0       	ldi	r27, 0x00	; 0
    c812:	30 97       	sbiw	r30, 0x00	; 0
    c814:	19 f1       	breq	.+70     	; 0xc85c <malloc+0x6c>
    c816:	40 81       	ld	r20, Z
    c818:	51 81       	ldd	r21, Z+1	; 0x01
    c81a:	02 81       	ldd	r16, Z+2	; 0x02
    c81c:	13 81       	ldd	r17, Z+3	; 0x03
    c81e:	48 17       	cp	r20, r24
    c820:	59 07       	cpc	r21, r25
    c822:	c8 f0       	brcs	.+50     	; 0xc856 <malloc+0x66>
    c824:	84 17       	cp	r24, r20
    c826:	95 07       	cpc	r25, r21
    c828:	69 f4       	brne	.+26     	; 0xc844 <malloc+0x54>
    c82a:	10 97       	sbiw	r26, 0x00	; 0
    c82c:	31 f0       	breq	.+12     	; 0xc83a <malloc+0x4a>
    c82e:	12 96       	adiw	r26, 0x02	; 2
    c830:	0c 93       	st	X, r16
    c832:	12 97       	sbiw	r26, 0x02	; 2
    c834:	13 96       	adiw	r26, 0x03	; 3
    c836:	1c 93       	st	X, r17
    c838:	27 c0       	rjmp	.+78     	; 0xc888 <malloc+0x98>
    c83a:	00 93 79 06 	sts	0x0679, r16	; 0x800679 <__flp>
    c83e:	10 93 7a 06 	sts	0x067A, r17	; 0x80067a <__flp+0x1>
    c842:	22 c0       	rjmp	.+68     	; 0xc888 <malloc+0x98>
    c844:	21 15       	cp	r18, r1
    c846:	31 05       	cpc	r19, r1
    c848:	19 f0       	breq	.+6      	; 0xc850 <malloc+0x60>
    c84a:	42 17       	cp	r20, r18
    c84c:	53 07       	cpc	r21, r19
    c84e:	18 f4       	brcc	.+6      	; 0xc856 <malloc+0x66>
    c850:	9a 01       	movw	r18, r20
    c852:	bd 01       	movw	r22, r26
    c854:	ef 01       	movw	r28, r30
    c856:	df 01       	movw	r26, r30
    c858:	f8 01       	movw	r30, r16
    c85a:	db cf       	rjmp	.-74     	; 0xc812 <malloc+0x22>
    c85c:	21 15       	cp	r18, r1
    c85e:	31 05       	cpc	r19, r1
    c860:	f9 f0       	breq	.+62     	; 0xc8a0 <malloc+0xb0>
    c862:	28 1b       	sub	r18, r24
    c864:	39 0b       	sbc	r19, r25
    c866:	24 30       	cpi	r18, 0x04	; 4
    c868:	31 05       	cpc	r19, r1
    c86a:	80 f4       	brcc	.+32     	; 0xc88c <malloc+0x9c>
    c86c:	8a 81       	ldd	r24, Y+2	; 0x02
    c86e:	9b 81       	ldd	r25, Y+3	; 0x03
    c870:	61 15       	cp	r22, r1
    c872:	71 05       	cpc	r23, r1
    c874:	21 f0       	breq	.+8      	; 0xc87e <malloc+0x8e>
    c876:	fb 01       	movw	r30, r22
    c878:	93 83       	std	Z+3, r25	; 0x03
    c87a:	82 83       	std	Z+2, r24	; 0x02
    c87c:	04 c0       	rjmp	.+8      	; 0xc886 <malloc+0x96>
    c87e:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <__flp+0x1>
    c882:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <__flp>
    c886:	fe 01       	movw	r30, r28
    c888:	32 96       	adiw	r30, 0x02	; 2
    c88a:	44 c0       	rjmp	.+136    	; 0xc914 <malloc+0x124>
    c88c:	fe 01       	movw	r30, r28
    c88e:	e2 0f       	add	r30, r18
    c890:	f3 1f       	adc	r31, r19
    c892:	81 93       	st	Z+, r24
    c894:	91 93       	st	Z+, r25
    c896:	22 50       	subi	r18, 0x02	; 2
    c898:	31 09       	sbc	r19, r1
    c89a:	39 83       	std	Y+1, r19	; 0x01
    c89c:	28 83       	st	Y, r18
    c89e:	3a c0       	rjmp	.+116    	; 0xc914 <malloc+0x124>
    c8a0:	20 91 77 06 	lds	r18, 0x0677	; 0x800677 <__brkval>
    c8a4:	30 91 78 06 	lds	r19, 0x0678	; 0x800678 <__brkval+0x1>
    c8a8:	23 2b       	or	r18, r19
    c8aa:	41 f4       	brne	.+16     	; 0xc8bc <malloc+0xcc>
    c8ac:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    c8b0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    c8b4:	30 93 78 06 	sts	0x0678, r19	; 0x800678 <__brkval+0x1>
    c8b8:	20 93 77 06 	sts	0x0677, r18	; 0x800677 <__brkval>
    c8bc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    c8c0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    c8c4:	21 15       	cp	r18, r1
    c8c6:	31 05       	cpc	r19, r1
    c8c8:	41 f4       	brne	.+16     	; 0xc8da <malloc+0xea>
    c8ca:	2d b7       	in	r18, 0x3d	; 61
    c8cc:	3e b7       	in	r19, 0x3e	; 62
    c8ce:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    c8d2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    c8d6:	24 1b       	sub	r18, r20
    c8d8:	35 0b       	sbc	r19, r21
    c8da:	e0 91 77 06 	lds	r30, 0x0677	; 0x800677 <__brkval>
    c8de:	f0 91 78 06 	lds	r31, 0x0678	; 0x800678 <__brkval+0x1>
    c8e2:	e2 17       	cp	r30, r18
    c8e4:	f3 07       	cpc	r31, r19
    c8e6:	a0 f4       	brcc	.+40     	; 0xc910 <malloc+0x120>
    c8e8:	2e 1b       	sub	r18, r30
    c8ea:	3f 0b       	sbc	r19, r31
    c8ec:	28 17       	cp	r18, r24
    c8ee:	39 07       	cpc	r19, r25
    c8f0:	78 f0       	brcs	.+30     	; 0xc910 <malloc+0x120>
    c8f2:	ac 01       	movw	r20, r24
    c8f4:	4e 5f       	subi	r20, 0xFE	; 254
    c8f6:	5f 4f       	sbci	r21, 0xFF	; 255
    c8f8:	24 17       	cp	r18, r20
    c8fa:	35 07       	cpc	r19, r21
    c8fc:	48 f0       	brcs	.+18     	; 0xc910 <malloc+0x120>
    c8fe:	4e 0f       	add	r20, r30
    c900:	5f 1f       	adc	r21, r31
    c902:	50 93 78 06 	sts	0x0678, r21	; 0x800678 <__brkval+0x1>
    c906:	40 93 77 06 	sts	0x0677, r20	; 0x800677 <__brkval>
    c90a:	81 93       	st	Z+, r24
    c90c:	91 93       	st	Z+, r25
    c90e:	02 c0       	rjmp	.+4      	; 0xc914 <malloc+0x124>
    c910:	e0 e0       	ldi	r30, 0x00	; 0
    c912:	f0 e0       	ldi	r31, 0x00	; 0
    c914:	cf 01       	movw	r24, r30
    c916:	df 91       	pop	r29
    c918:	cf 91       	pop	r28
    c91a:	1f 91       	pop	r17
    c91c:	0f 91       	pop	r16
    c91e:	08 95       	ret

0000c920 <free>:
    c920:	cf 93       	push	r28
    c922:	df 93       	push	r29
    c924:	00 97       	sbiw	r24, 0x00	; 0
    c926:	09 f4       	brne	.+2      	; 0xc92a <free+0xa>
    c928:	81 c0       	rjmp	.+258    	; 0xca2c <free+0x10c>
    c92a:	fc 01       	movw	r30, r24
    c92c:	32 97       	sbiw	r30, 0x02	; 2
    c92e:	13 82       	std	Z+3, r1	; 0x03
    c930:	12 82       	std	Z+2, r1	; 0x02
    c932:	a0 91 79 06 	lds	r26, 0x0679	; 0x800679 <__flp>
    c936:	b0 91 7a 06 	lds	r27, 0x067A	; 0x80067a <__flp+0x1>
    c93a:	10 97       	sbiw	r26, 0x00	; 0
    c93c:	81 f4       	brne	.+32     	; 0xc95e <free+0x3e>
    c93e:	20 81       	ld	r18, Z
    c940:	31 81       	ldd	r19, Z+1	; 0x01
    c942:	82 0f       	add	r24, r18
    c944:	93 1f       	adc	r25, r19
    c946:	20 91 77 06 	lds	r18, 0x0677	; 0x800677 <__brkval>
    c94a:	30 91 78 06 	lds	r19, 0x0678	; 0x800678 <__brkval+0x1>
    c94e:	28 17       	cp	r18, r24
    c950:	39 07       	cpc	r19, r25
    c952:	51 f5       	brne	.+84     	; 0xc9a8 <free+0x88>
    c954:	f0 93 78 06 	sts	0x0678, r31	; 0x800678 <__brkval+0x1>
    c958:	e0 93 77 06 	sts	0x0677, r30	; 0x800677 <__brkval>
    c95c:	67 c0       	rjmp	.+206    	; 0xca2c <free+0x10c>
    c95e:	ed 01       	movw	r28, r26
    c960:	20 e0       	ldi	r18, 0x00	; 0
    c962:	30 e0       	ldi	r19, 0x00	; 0
    c964:	ce 17       	cp	r28, r30
    c966:	df 07       	cpc	r29, r31
    c968:	40 f4       	brcc	.+16     	; 0xc97a <free+0x5a>
    c96a:	4a 81       	ldd	r20, Y+2	; 0x02
    c96c:	5b 81       	ldd	r21, Y+3	; 0x03
    c96e:	9e 01       	movw	r18, r28
    c970:	41 15       	cp	r20, r1
    c972:	51 05       	cpc	r21, r1
    c974:	f1 f0       	breq	.+60     	; 0xc9b2 <free+0x92>
    c976:	ea 01       	movw	r28, r20
    c978:	f5 cf       	rjmp	.-22     	; 0xc964 <free+0x44>
    c97a:	d3 83       	std	Z+3, r29	; 0x03
    c97c:	c2 83       	std	Z+2, r28	; 0x02
    c97e:	40 81       	ld	r20, Z
    c980:	51 81       	ldd	r21, Z+1	; 0x01
    c982:	84 0f       	add	r24, r20
    c984:	95 1f       	adc	r25, r21
    c986:	c8 17       	cp	r28, r24
    c988:	d9 07       	cpc	r29, r25
    c98a:	59 f4       	brne	.+22     	; 0xc9a2 <free+0x82>
    c98c:	88 81       	ld	r24, Y
    c98e:	99 81       	ldd	r25, Y+1	; 0x01
    c990:	84 0f       	add	r24, r20
    c992:	95 1f       	adc	r25, r21
    c994:	02 96       	adiw	r24, 0x02	; 2
    c996:	91 83       	std	Z+1, r25	; 0x01
    c998:	80 83       	st	Z, r24
    c99a:	8a 81       	ldd	r24, Y+2	; 0x02
    c99c:	9b 81       	ldd	r25, Y+3	; 0x03
    c99e:	93 83       	std	Z+3, r25	; 0x03
    c9a0:	82 83       	std	Z+2, r24	; 0x02
    c9a2:	21 15       	cp	r18, r1
    c9a4:	31 05       	cpc	r19, r1
    c9a6:	29 f4       	brne	.+10     	; 0xc9b2 <free+0x92>
    c9a8:	f0 93 7a 06 	sts	0x067A, r31	; 0x80067a <__flp+0x1>
    c9ac:	e0 93 79 06 	sts	0x0679, r30	; 0x800679 <__flp>
    c9b0:	3d c0       	rjmp	.+122    	; 0xca2c <free+0x10c>
    c9b2:	e9 01       	movw	r28, r18
    c9b4:	fb 83       	std	Y+3, r31	; 0x03
    c9b6:	ea 83       	std	Y+2, r30	; 0x02
    c9b8:	49 91       	ld	r20, Y+
    c9ba:	59 91       	ld	r21, Y+
    c9bc:	c4 0f       	add	r28, r20
    c9be:	d5 1f       	adc	r29, r21
    c9c0:	ec 17       	cp	r30, r28
    c9c2:	fd 07       	cpc	r31, r29
    c9c4:	61 f4       	brne	.+24     	; 0xc9de <free+0xbe>
    c9c6:	80 81       	ld	r24, Z
    c9c8:	91 81       	ldd	r25, Z+1	; 0x01
    c9ca:	84 0f       	add	r24, r20
    c9cc:	95 1f       	adc	r25, r21
    c9ce:	02 96       	adiw	r24, 0x02	; 2
    c9d0:	e9 01       	movw	r28, r18
    c9d2:	99 83       	std	Y+1, r25	; 0x01
    c9d4:	88 83       	st	Y, r24
    c9d6:	82 81       	ldd	r24, Z+2	; 0x02
    c9d8:	93 81       	ldd	r25, Z+3	; 0x03
    c9da:	9b 83       	std	Y+3, r25	; 0x03
    c9dc:	8a 83       	std	Y+2, r24	; 0x02
    c9de:	e0 e0       	ldi	r30, 0x00	; 0
    c9e0:	f0 e0       	ldi	r31, 0x00	; 0
    c9e2:	12 96       	adiw	r26, 0x02	; 2
    c9e4:	8d 91       	ld	r24, X+
    c9e6:	9c 91       	ld	r25, X
    c9e8:	13 97       	sbiw	r26, 0x03	; 3
    c9ea:	00 97       	sbiw	r24, 0x00	; 0
    c9ec:	19 f0       	breq	.+6      	; 0xc9f4 <free+0xd4>
    c9ee:	fd 01       	movw	r30, r26
    c9f0:	dc 01       	movw	r26, r24
    c9f2:	f7 cf       	rjmp	.-18     	; 0xc9e2 <free+0xc2>
    c9f4:	8d 91       	ld	r24, X+
    c9f6:	9c 91       	ld	r25, X
    c9f8:	11 97       	sbiw	r26, 0x01	; 1
    c9fa:	9d 01       	movw	r18, r26
    c9fc:	2e 5f       	subi	r18, 0xFE	; 254
    c9fe:	3f 4f       	sbci	r19, 0xFF	; 255
    ca00:	82 0f       	add	r24, r18
    ca02:	93 1f       	adc	r25, r19
    ca04:	20 91 77 06 	lds	r18, 0x0677	; 0x800677 <__brkval>
    ca08:	30 91 78 06 	lds	r19, 0x0678	; 0x800678 <__brkval+0x1>
    ca0c:	28 17       	cp	r18, r24
    ca0e:	39 07       	cpc	r19, r25
    ca10:	69 f4       	brne	.+26     	; 0xca2c <free+0x10c>
    ca12:	30 97       	sbiw	r30, 0x00	; 0
    ca14:	29 f4       	brne	.+10     	; 0xca20 <free+0x100>
    ca16:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <__flp+0x1>
    ca1a:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <__flp>
    ca1e:	02 c0       	rjmp	.+4      	; 0xca24 <free+0x104>
    ca20:	13 82       	std	Z+3, r1	; 0x03
    ca22:	12 82       	std	Z+2, r1	; 0x02
    ca24:	b0 93 78 06 	sts	0x0678, r27	; 0x800678 <__brkval+0x1>
    ca28:	a0 93 77 06 	sts	0x0677, r26	; 0x800677 <__brkval>
    ca2c:	df 91       	pop	r29
    ca2e:	cf 91       	pop	r28
    ca30:	08 95       	ret

0000ca32 <realloc>:
    ca32:	6f 92       	push	r6
    ca34:	7f 92       	push	r7
    ca36:	8f 92       	push	r8
    ca38:	9f 92       	push	r9
    ca3a:	af 92       	push	r10
    ca3c:	bf 92       	push	r11
    ca3e:	cf 92       	push	r12
    ca40:	df 92       	push	r13
    ca42:	ef 92       	push	r14
    ca44:	ff 92       	push	r15
    ca46:	0f 93       	push	r16
    ca48:	1f 93       	push	r17
    ca4a:	cf 93       	push	r28
    ca4c:	df 93       	push	r29
    ca4e:	00 97       	sbiw	r24, 0x00	; 0
    ca50:	81 f4       	brne	.+32     	; 0xca72 <realloc+0x40>
    ca52:	cb 01       	movw	r24, r22
    ca54:	df 91       	pop	r29
    ca56:	cf 91       	pop	r28
    ca58:	1f 91       	pop	r17
    ca5a:	0f 91       	pop	r16
    ca5c:	ff 90       	pop	r15
    ca5e:	ef 90       	pop	r14
    ca60:	df 90       	pop	r13
    ca62:	cf 90       	pop	r12
    ca64:	bf 90       	pop	r11
    ca66:	af 90       	pop	r10
    ca68:	9f 90       	pop	r9
    ca6a:	8f 90       	pop	r8
    ca6c:	7f 90       	pop	r7
    ca6e:	6f 90       	pop	r6
    ca70:	bf ce       	rjmp	.-642    	; 0xc7f0 <malloc>
    ca72:	fc 01       	movw	r30, r24
    ca74:	e6 0f       	add	r30, r22
    ca76:	f7 1f       	adc	r31, r23
    ca78:	9c 01       	movw	r18, r24
    ca7a:	22 50       	subi	r18, 0x02	; 2
    ca7c:	31 09       	sbc	r19, r1
    ca7e:	e2 17       	cp	r30, r18
    ca80:	f3 07       	cpc	r31, r19
    ca82:	08 f4       	brcc	.+2      	; 0xca86 <realloc+0x54>
    ca84:	a5 c0       	rjmp	.+330    	; 0xcbd0 <realloc+0x19e>
    ca86:	ec 01       	movw	r28, r24
    ca88:	d9 01       	movw	r26, r18
    ca8a:	0d 91       	ld	r16, X+
    ca8c:	1c 91       	ld	r17, X
    ca8e:	11 97       	sbiw	r26, 0x01	; 1
    ca90:	06 17       	cp	r16, r22
    ca92:	17 07       	cpc	r17, r23
    ca94:	a8 f0       	brcs	.+42     	; 0xcac0 <realloc+0x8e>
    ca96:	05 30       	cpi	r16, 0x05	; 5
    ca98:	11 05       	cpc	r17, r1
    ca9a:	08 f4       	brcc	.+2      	; 0xca9e <realloc+0x6c>
    ca9c:	97 c0       	rjmp	.+302    	; 0xcbcc <realloc+0x19a>
    ca9e:	c8 01       	movw	r24, r16
    caa0:	04 97       	sbiw	r24, 0x04	; 4
    caa2:	86 17       	cp	r24, r22
    caa4:	97 07       	cpc	r25, r23
    caa6:	08 f4       	brcc	.+2      	; 0xcaaa <realloc+0x78>
    caa8:	91 c0       	rjmp	.+290    	; 0xcbcc <realloc+0x19a>
    caaa:	02 50       	subi	r16, 0x02	; 2
    caac:	11 09       	sbc	r17, r1
    caae:	06 1b       	sub	r16, r22
    cab0:	17 0b       	sbc	r17, r23
    cab2:	01 93       	st	Z+, r16
    cab4:	11 93       	st	Z+, r17
    cab6:	6d 93       	st	X+, r22
    cab8:	7c 93       	st	X, r23
    caba:	cf 01       	movw	r24, r30
    cabc:	31 df       	rcall	.-414    	; 0xc920 <free>
    cabe:	86 c0       	rjmp	.+268    	; 0xcbcc <realloc+0x19a>
    cac0:	5b 01       	movw	r10, r22
    cac2:	a0 1a       	sub	r10, r16
    cac4:	b1 0a       	sbc	r11, r17
    cac6:	4c 01       	movw	r8, r24
    cac8:	80 0e       	add	r8, r16
    caca:	91 1e       	adc	r9, r17
    cacc:	a0 91 79 06 	lds	r26, 0x0679	; 0x800679 <__flp>
    cad0:	b0 91 7a 06 	lds	r27, 0x067A	; 0x80067a <__flp+0x1>
    cad4:	61 2c       	mov	r6, r1
    cad6:	71 2c       	mov	r7, r1
    cad8:	e1 2c       	mov	r14, r1
    cada:	f1 2c       	mov	r15, r1
    cadc:	10 97       	sbiw	r26, 0x00	; 0
    cade:	09 f4       	brne	.+2      	; 0xcae2 <realloc+0xb0>
    cae0:	46 c0       	rjmp	.+140    	; 0xcb6e <realloc+0x13c>
    cae2:	8d 91       	ld	r24, X+
    cae4:	9c 91       	ld	r25, X
    cae6:	11 97       	sbiw	r26, 0x01	; 1
    cae8:	a8 15       	cp	r26, r8
    caea:	b9 05       	cpc	r27, r9
    caec:	b1 f5       	brne	.+108    	; 0xcb5a <realloc+0x128>
    caee:	6c 01       	movw	r12, r24
    caf0:	42 e0       	ldi	r20, 0x02	; 2
    caf2:	c4 0e       	add	r12, r20
    caf4:	d1 1c       	adc	r13, r1
    caf6:	ca 14       	cp	r12, r10
    caf8:	db 04       	cpc	r13, r11
    cafa:	78 f1       	brcs	.+94     	; 0xcb5a <realloc+0x128>
    cafc:	4c 01       	movw	r8, r24
    cafe:	8a 18       	sub	r8, r10
    cb00:	9b 08       	sbc	r9, r11
    cb02:	64 01       	movw	r12, r8
    cb04:	42 e0       	ldi	r20, 0x02	; 2
    cb06:	c4 0e       	add	r12, r20
    cb08:	d1 1c       	adc	r13, r1
    cb0a:	12 96       	adiw	r26, 0x02	; 2
    cb0c:	bc 90       	ld	r11, X
    cb0e:	12 97       	sbiw	r26, 0x02	; 2
    cb10:	13 96       	adiw	r26, 0x03	; 3
    cb12:	ac 91       	ld	r26, X
    cb14:	b5 e0       	ldi	r27, 0x05	; 5
    cb16:	cb 16       	cp	r12, r27
    cb18:	d1 04       	cpc	r13, r1
    cb1a:	40 f0       	brcs	.+16     	; 0xcb2c <realloc+0xfa>
    cb1c:	b2 82       	std	Z+2, r11	; 0x02
    cb1e:	a3 83       	std	Z+3, r26	; 0x03
    cb20:	91 82       	std	Z+1, r9	; 0x01
    cb22:	80 82       	st	Z, r8
    cb24:	d9 01       	movw	r26, r18
    cb26:	6d 93       	st	X+, r22
    cb28:	7c 93       	st	X, r23
    cb2a:	09 c0       	rjmp	.+18     	; 0xcb3e <realloc+0x10c>
    cb2c:	0e 5f       	subi	r16, 0xFE	; 254
    cb2e:	1f 4f       	sbci	r17, 0xFF	; 255
    cb30:	80 0f       	add	r24, r16
    cb32:	91 1f       	adc	r25, r17
    cb34:	f9 01       	movw	r30, r18
    cb36:	91 83       	std	Z+1, r25	; 0x01
    cb38:	80 83       	st	Z, r24
    cb3a:	eb 2d       	mov	r30, r11
    cb3c:	fa 2f       	mov	r31, r26
    cb3e:	e1 14       	cp	r14, r1
    cb40:	f1 04       	cpc	r15, r1
    cb42:	31 f0       	breq	.+12     	; 0xcb50 <realloc+0x11e>
    cb44:	d7 01       	movw	r26, r14
    cb46:	13 96       	adiw	r26, 0x03	; 3
    cb48:	fc 93       	st	X, r31
    cb4a:	ee 93       	st	-X, r30
    cb4c:	12 97       	sbiw	r26, 0x02	; 2
    cb4e:	3e c0       	rjmp	.+124    	; 0xcbcc <realloc+0x19a>
    cb50:	f0 93 7a 06 	sts	0x067A, r31	; 0x80067a <__flp+0x1>
    cb54:	e0 93 79 06 	sts	0x0679, r30	; 0x800679 <__flp>
    cb58:	39 c0       	rjmp	.+114    	; 0xcbcc <realloc+0x19a>
    cb5a:	68 16       	cp	r6, r24
    cb5c:	79 06       	cpc	r7, r25
    cb5e:	08 f4       	brcc	.+2      	; 0xcb62 <realloc+0x130>
    cb60:	3c 01       	movw	r6, r24
    cb62:	7d 01       	movw	r14, r26
    cb64:	12 96       	adiw	r26, 0x02	; 2
    cb66:	0d 90       	ld	r0, X+
    cb68:	bc 91       	ld	r27, X
    cb6a:	a0 2d       	mov	r26, r0
    cb6c:	b7 cf       	rjmp	.-146    	; 0xcadc <realloc+0xaa>
    cb6e:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <__brkval>
    cb72:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <__brkval+0x1>
    cb76:	88 16       	cp	r8, r24
    cb78:	99 06       	cpc	r9, r25
    cb7a:	e1 f4       	brne	.+56     	; 0xcbb4 <realloc+0x182>
    cb7c:	66 16       	cp	r6, r22
    cb7e:	77 06       	cpc	r7, r23
    cb80:	c8 f4       	brcc	.+50     	; 0xcbb4 <realloc+0x182>
    cb82:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    cb86:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    cb8a:	00 97       	sbiw	r24, 0x00	; 0
    cb8c:	41 f4       	brne	.+16     	; 0xcb9e <realloc+0x16c>
    cb8e:	8d b7       	in	r24, 0x3d	; 61
    cb90:	9e b7       	in	r25, 0x3e	; 62
    cb92:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    cb96:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    cb9a:	84 1b       	sub	r24, r20
    cb9c:	95 0b       	sbc	r25, r21
    cb9e:	e8 17       	cp	r30, r24
    cba0:	f9 07       	cpc	r31, r25
    cba2:	b0 f4       	brcc	.+44     	; 0xcbd0 <realloc+0x19e>
    cba4:	f0 93 78 06 	sts	0x0678, r31	; 0x800678 <__brkval+0x1>
    cba8:	e0 93 77 06 	sts	0x0677, r30	; 0x800677 <__brkval>
    cbac:	f9 01       	movw	r30, r18
    cbae:	71 83       	std	Z+1, r23	; 0x01
    cbb0:	60 83       	st	Z, r22
    cbb2:	0c c0       	rjmp	.+24     	; 0xcbcc <realloc+0x19a>
    cbb4:	cb 01       	movw	r24, r22
    cbb6:	1c de       	rcall	.-968    	; 0xc7f0 <malloc>
    cbb8:	7c 01       	movw	r14, r24
    cbba:	00 97       	sbiw	r24, 0x00	; 0
    cbbc:	49 f0       	breq	.+18     	; 0xcbd0 <realloc+0x19e>
    cbbe:	a8 01       	movw	r20, r16
    cbc0:	be 01       	movw	r22, r28
    cbc2:	23 d0       	rcall	.+70     	; 0xcc0a <memcpy>
    cbc4:	ce 01       	movw	r24, r28
    cbc6:	ac de       	rcall	.-680    	; 0xc920 <free>
    cbc8:	c7 01       	movw	r24, r14
    cbca:	04 c0       	rjmp	.+8      	; 0xcbd4 <realloc+0x1a2>
    cbcc:	ce 01       	movw	r24, r28
    cbce:	02 c0       	rjmp	.+4      	; 0xcbd4 <realloc+0x1a2>
    cbd0:	80 e0       	ldi	r24, 0x00	; 0
    cbd2:	90 e0       	ldi	r25, 0x00	; 0
    cbd4:	df 91       	pop	r29
    cbd6:	cf 91       	pop	r28
    cbd8:	1f 91       	pop	r17
    cbda:	0f 91       	pop	r16
    cbdc:	ff 90       	pop	r15
    cbde:	ef 90       	pop	r14
    cbe0:	df 90       	pop	r13
    cbe2:	cf 90       	pop	r12
    cbe4:	bf 90       	pop	r11
    cbe6:	af 90       	pop	r10
    cbe8:	9f 90       	pop	r9
    cbea:	8f 90       	pop	r8
    cbec:	7f 90       	pop	r7
    cbee:	6f 90       	pop	r6
    cbf0:	08 95       	ret

0000cbf2 <abort>:
    cbf2:	81 e0       	ldi	r24, 0x01	; 1
    cbf4:	90 e0       	ldi	r25, 0x00	; 0
    cbf6:	f8 94       	cli
    cbf8:	5b c0       	rjmp	.+182    	; 0xccb0 <__do_global_dtors>

0000cbfa <toupper>:
    cbfa:	91 11       	cpse	r25, r1
    cbfc:	08 95       	ret
    cbfe:	81 56       	subi	r24, 0x61	; 97
    cc00:	8a 51       	subi	r24, 0x1A	; 26
    cc02:	08 f4       	brcc	.+2      	; 0xcc06 <toupper+0xc>
    cc04:	80 52       	subi	r24, 0x20	; 32
    cc06:	85 58       	subi	r24, 0x85	; 133
    cc08:	08 95       	ret

0000cc0a <memcpy>:
    cc0a:	fb 01       	movw	r30, r22
    cc0c:	dc 01       	movw	r26, r24
    cc0e:	02 c0       	rjmp	.+4      	; 0xcc14 <memcpy+0xa>
    cc10:	01 90       	ld	r0, Z+
    cc12:	0d 92       	st	X+, r0
    cc14:	41 50       	subi	r20, 0x01	; 1
    cc16:	50 40       	sbci	r21, 0x00	; 0
    cc18:	d8 f7       	brcc	.-10     	; 0xcc10 <memcpy+0x6>
    cc1a:	08 95       	ret

0000cc1c <memset>:
    cc1c:	dc 01       	movw	r26, r24
    cc1e:	01 c0       	rjmp	.+2      	; 0xcc22 <memset+0x6>
    cc20:	6d 93       	st	X+, r22
    cc22:	41 50       	subi	r20, 0x01	; 1
    cc24:	50 40       	sbci	r21, 0x00	; 0
    cc26:	e0 f7       	brcc	.-8      	; 0xcc20 <memset+0x4>
    cc28:	08 95       	ret

0000cc2a <strcmp>:
    cc2a:	fb 01       	movw	r30, r22
    cc2c:	dc 01       	movw	r26, r24
    cc2e:	8d 91       	ld	r24, X+
    cc30:	01 90       	ld	r0, Z+
    cc32:	80 19       	sub	r24, r0
    cc34:	01 10       	cpse	r0, r1
    cc36:	d9 f3       	breq	.-10     	; 0xcc2e <strcmp+0x4>
    cc38:	99 0b       	sbc	r25, r25
    cc3a:	08 95       	ret

0000cc3c <strcpy>:
    cc3c:	fb 01       	movw	r30, r22
    cc3e:	dc 01       	movw	r26, r24
    cc40:	01 90       	ld	r0, Z+
    cc42:	0d 92       	st	X+, r0
    cc44:	00 20       	and	r0, r0
    cc46:	e1 f7       	brne	.-8      	; 0xcc40 <strcpy+0x4>
    cc48:	08 95       	ret

0000cc4a <utoa>:
    cc4a:	45 32       	cpi	r20, 0x25	; 37
    cc4c:	51 05       	cpc	r21, r1
    cc4e:	18 f4       	brcc	.+6      	; 0xcc56 <utoa+0xc>
    cc50:	42 30       	cpi	r20, 0x02	; 2
    cc52:	08 f0       	brcs	.+2      	; 0xcc56 <utoa+0xc>
    cc54:	04 c0       	rjmp	.+8      	; 0xcc5e <__utoa_ncheck>
    cc56:	fb 01       	movw	r30, r22
    cc58:	10 82       	st	Z, r1
    cc5a:	cb 01       	movw	r24, r22
    cc5c:	08 95       	ret

0000cc5e <__utoa_ncheck>:
    cc5e:	bb 27       	eor	r27, r27

0000cc60 <__utoa_common>:
    cc60:	fb 01       	movw	r30, r22
    cc62:	55 27       	eor	r21, r21
    cc64:	aa 27       	eor	r26, r26
    cc66:	88 0f       	add	r24, r24
    cc68:	99 1f       	adc	r25, r25
    cc6a:	aa 1f       	adc	r26, r26
    cc6c:	a4 17       	cp	r26, r20
    cc6e:	10 f0       	brcs	.+4      	; 0xcc74 <__utoa_common+0x14>
    cc70:	a4 1b       	sub	r26, r20
    cc72:	83 95       	inc	r24
    cc74:	50 51       	subi	r21, 0x10	; 16
    cc76:	b9 f7       	brne	.-18     	; 0xcc66 <__utoa_common+0x6>
    cc78:	a0 5d       	subi	r26, 0xD0	; 208
    cc7a:	aa 33       	cpi	r26, 0x3A	; 58
    cc7c:	08 f0       	brcs	.+2      	; 0xcc80 <__utoa_common+0x20>
    cc7e:	a9 5d       	subi	r26, 0xD9	; 217
    cc80:	a1 93       	st	Z+, r26
    cc82:	00 97       	sbiw	r24, 0x00	; 0
    cc84:	79 f7       	brne	.-34     	; 0xcc64 <__utoa_common+0x4>
    cc86:	b1 11       	cpse	r27, r1
    cc88:	b1 93       	st	Z+, r27
    cc8a:	11 92       	st	Z+, r1
    cc8c:	cb 01       	movw	r24, r22
    cc8e:	00 c0       	rjmp	.+0      	; 0xcc90 <strrev>

0000cc90 <strrev>:
    cc90:	dc 01       	movw	r26, r24
    cc92:	fc 01       	movw	r30, r24
    cc94:	67 2f       	mov	r22, r23
    cc96:	71 91       	ld	r23, Z+
    cc98:	77 23       	and	r23, r23
    cc9a:	e1 f7       	brne	.-8      	; 0xcc94 <strrev+0x4>
    cc9c:	32 97       	sbiw	r30, 0x02	; 2
    cc9e:	04 c0       	rjmp	.+8      	; 0xcca8 <strrev+0x18>
    cca0:	7c 91       	ld	r23, X
    cca2:	6d 93       	st	X+, r22
    cca4:	70 83       	st	Z, r23
    cca6:	62 91       	ld	r22, -Z
    cca8:	ae 17       	cp	r26, r30
    ccaa:	bf 07       	cpc	r27, r31
    ccac:	c8 f3       	brcs	.-14     	; 0xcca0 <strrev+0x10>
    ccae:	08 95       	ret

0000ccb0 <__do_global_dtors>:
    ccb0:	16 e0       	ldi	r17, 0x06	; 6
    ccb2:	c0 e5       	ldi	r28, 0x50	; 80
    ccb4:	d6 e0       	ldi	r29, 0x06	; 6
    ccb6:	00 e0       	ldi	r16, 0x00	; 0
    ccb8:	05 c0       	rjmp	.+10     	; 0xccc4 <__do_global_dtors+0x14>
    ccba:	80 2f       	mov	r24, r16
    ccbc:	fe 01       	movw	r30, r28
    ccbe:	77 dd       	rcall	.-1298   	; 0xc7ae <__tablejump2__>
    ccc0:	21 96       	adiw	r28, 0x01	; 1
    ccc2:	01 1d       	adc	r16, r1
    ccc4:	c2 35       	cpi	r28, 0x52	; 82
    ccc6:	d1 07       	cpc	r29, r17
    ccc8:	80 e0       	ldi	r24, 0x00	; 0
    ccca:	08 07       	cpc	r16, r24
    cccc:	b1 f7       	brne	.-20     	; 0xccba <__do_global_dtors+0xa>
    ccce:	f8 94       	cli

0000ccd0 <__stop_program>:
    ccd0:	ff cf       	rjmp	.-2      	; 0xccd0 <__stop_program>
