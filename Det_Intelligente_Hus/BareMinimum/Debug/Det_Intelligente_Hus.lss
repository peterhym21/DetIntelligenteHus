
Det_Intelligente_Hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800200  0000cbcc  0000cc60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000cbcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000315  00800366  00800366  0000cdc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000cdc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000cdf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001920  00000000  00000000  0000ce38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002d71e  00000000  00000000  0000e758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007021  00000000  00000000  0003be76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00011674  00000000  00000000  00042e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000066bc  00000000  00000000  0005450c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009d5b  00000000  00000000  0005abc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00013128  00000000  00000000  00064923  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001898  00000000  00000000  00077a4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c6       	rjmp	.+3222   	; 0xc98 <__dtors_end>
       2:	00 00       	nop
       4:	7a c6       	rjmp	.+3316   	; 0xcfa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c6       	rjmp	.+3312   	; 0xcfa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c6       	rjmp	.+3308   	; 0xcfa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c6       	rjmp	.+3304   	; 0xcfa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c6       	rjmp	.+3300   	; 0xcfa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c6       	rjmp	.+3296   	; 0xcfa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c6       	rjmp	.+3292   	; 0xcfa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c6       	rjmp	.+3288   	; 0xcfa <__bad_interrupt>
      22:	00 00       	nop
      24:	6a c6       	rjmp	.+3284   	; 0xcfa <__bad_interrupt>
      26:	00 00       	nop
      28:	68 c6       	rjmp	.+3280   	; 0xcfa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c6       	rjmp	.+3276   	; 0xcfa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c6       	rjmp	.+3272   	; 0xcfa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c6       	rjmp	.+3268   	; 0xcfa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c6       	rjmp	.+3264   	; 0xcfa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c6       	rjmp	.+3260   	; 0xcfa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c6       	rjmp	.+3256   	; 0xcfa <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 1e 4c 	jmp	0x983c	; 0x983c <__vector_17>
      48:	58 c6       	rjmp	.+3248   	; 0xcfa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c6       	rjmp	.+3244   	; 0xcfa <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 5b 50 	jmp	0xa0b6	; 0xa0b6 <__vector_20>
      54:	52 c6       	rjmp	.+3236   	; 0xcfa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c6       	rjmp	.+3232   	; 0xcfa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 32 5e 	jmp	0xbc64	; 0xbc64 <__vector_23>
      60:	4c c6       	rjmp	.+3224   	; 0xcfa <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 75 5b 	jmp	0xb6ea	; 0xb6ea <__vector_25>
      68:	0c 94 ab 5b 	jmp	0xb756	; 0xb756 <__vector_26>
      6c:	46 c6       	rjmp	.+3212   	; 0xcfa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c6       	rjmp	.+3208   	; 0xcfa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c6       	rjmp	.+3204   	; 0xcfa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c6       	rjmp	.+3200   	; 0xcfa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c6       	rjmp	.+3196   	; 0xcfa <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 55 4c 	jmp	0x98aa	; 0x98aa <__vector_32>
      84:	3a c6       	rjmp	.+3188   	; 0xcfa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c6       	rjmp	.+3184   	; 0xcfa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 92 50 	jmp	0xa124	; 0xa124 <__vector_35>
      90:	34 c6       	rjmp	.+3176   	; 0xcfa <__bad_interrupt>
      92:	00 00       	nop
      94:	32 c6       	rjmp	.+3172   	; 0xcfa <__bad_interrupt>
      96:	00 00       	nop
      98:	30 c6       	rjmp	.+3168   	; 0xcfa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 61 53 	jmp	0xa6c2	; 0xa6c2 <__vector_39>
      a0:	2c c6       	rjmp	.+3160   	; 0xcfa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c6       	rjmp	.+3156   	; 0xcfa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 8c 4c 	jmp	0x9918	; 0x9918 <__vector_42>
      ac:	26 c6       	rjmp	.+3148   	; 0xcfa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c6       	rjmp	.+3144   	; 0xcfa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c6       	rjmp	.+3140   	; 0xcfa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c6       	rjmp	.+3136   	; 0xcfa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 c3 4c 	jmp	0x9986	; 0x9986 <__vector_47>
      c0:	1c c6       	rjmp	.+3128   	; 0xcfa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c6       	rjmp	.+3124   	; 0xcfa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c6       	rjmp	.+3120   	; 0xcfa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c6       	rjmp	.+3116   	; 0xcfa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c6       	rjmp	.+3112   	; 0xcfa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c6       	rjmp	.+3108   	; 0xcfa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c6       	rjmp	.+3104   	; 0xcfa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c6       	rjmp	.+3100   	; 0xcfa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c6       	rjmp	.+3096   	; 0xcfa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9e 5f       	subi	r25, 0xFE	; 254
      e6:	a3 5f       	subi	r26, 0xF3	; 243
      e8:	a8 5f       	subi	r26, 0xF8	; 248
      ea:	b2 5f       	subi	r27, 0xF2	; 242
      ec:	bc 5f       	subi	r27, 0xFC	; 252
      ee:	35 60       	ori	r19, 0x05	; 5
      f0:	c6 5f       	subi	r28, 0xF6	; 246
      f2:	ce 5f       	subi	r28, 0xFE	; 254
      f4:	d6 5f       	subi	r29, 0xF6	; 246
      f6:	e0 5f       	subi	r30, 0xF0	; 240
      f8:	ea 5f       	subi	r30, 0xFA	; 250
      fa:	f4 5f       	subi	r31, 0xF4	; 244
      fc:	03 60       	ori	r16, 0x03	; 3
      fe:	0d 60       	ori	r16, 0x0D	; 13
     100:	35 60       	ori	r19, 0x05	; 5
     102:	17 60       	ori	r17, 0x07	; 7
     104:	21 60       	ori	r18, 0x01	; 1
     106:	2b 60       	ori	r18, 0x0B	; 11
     108:	58 60       	ori	r21, 0x08	; 8
     10a:	5b 60       	ori	r21, 0x0B	; 11
     10c:	4a 60       	ori	r20, 0x0A	; 10
     10e:	4e 60       	ori	r20, 0x0E	; 14
     110:	54 60       	ori	r21, 0x04	; 4
     112:	92 60       	ori	r25, 0x02	; 2
     114:	5f 60       	ori	r21, 0x0F	; 15
     116:	63 60       	ori	r22, 0x03	; 3
     118:	69 60       	ori	r22, 0x09	; 9
     11a:	6d 60       	ori	r22, 0x0D	; 13
     11c:	71 60       	ori	r23, 0x01	; 1
     11e:	77 60       	ori	r23, 0x07	; 7
     120:	7b 60       	ori	r23, 0x0B	; 11
     122:	7f 60       	ori	r23, 0x0F	; 15
     124:	92 60       	ori	r25, 0x02	; 2
     126:	85 60       	ori	r24, 0x05	; 5
     128:	89 60       	ori	r24, 0x09	; 9
     12a:	8d 60       	ori	r24, 0x0D	; 13

0000012c <__trampolines_end>:
     12c:	54 65       	ori	r21, 0x54	; 84
     12e:	6d 70       	andi	r22, 0x0D	; 13
     130:	65 72       	andi	r22, 0x25	; 37
     132:	61 74       	andi	r22, 0x41	; 65
     134:	75 72       	andi	r23, 0x25	; 37
     136:	3a 20       	and	r3, r10
	...

00000139 <_ZZ16LCDPrintHumidityfE3__c>:
     139:	48 75 6d 69 64 69 74 79 3a 20 00                    Humidity: .

00000144 <_ZZ16LCDPrintHumidityfE3__c_0>:
     144:	25 00                                               %.

00000146 <_ZZ5setupE3__c>:
     146:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
     156:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

00000160 <_ZZ11DisplayMenuvE3__c>:
     160:	4d 65 6e 75 00                                      Menu.

00000165 <_ZZ11DisplayMenuvE3__c_0>:
     165:	41 3a 20 54 69 6d 65 20 61 6e 64 20 44 61 74 65     A: Time and Date
	...

00000176 <_ZZ11DisplayMenuvE3__c_1>:
     176:	42 3a 20 54 65 6d 70 72 65 74 75 72 65 00           B: Tempreture.

00000184 <_ZZ11DisplayMenuvE3__c_2>:
     184:	43 3a 20 48 75 6d 69 64 69 74 79 00                 C: Humidity.

00000190 <_ZL4font>:
     190:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     1a0:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     1b0:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     1c0:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     1d0:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     1e0:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     1f0:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     200:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     210:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     220:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     230:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     240:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     250:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     260:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     270:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     280:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     290:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     2a0:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     2b0:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     2c0:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     2d0:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     2e0:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     2f0:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     300:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     310:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     320:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     330:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     340:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     350:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     360:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     370:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     380:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     390:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     3a0:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     3b0:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     3c0:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     3d0:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     3e0:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     3f0:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     400:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     410:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     420:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     430:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     440:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     450:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     460:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     470:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     480:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     490:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     4a0:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     4b0:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     4c0:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     4d0:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     4e0:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     4f0:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     500:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     510:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     520:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     530:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     540:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     550:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     560:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     570:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     580:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     590:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     5a0:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     5b0:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     5c0:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     5d0:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     5e0:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     5f0:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     600:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     610:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     620:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     630:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     640:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     650:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     660:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     670:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     680:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000690 <_ZL12splash1_data>:
     690:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     6a0:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     6b0:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     6c0:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     6d0:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     6e0:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     6f8:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     708:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     718:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     728:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     738:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     748:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     758:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     768:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     778:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     788:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     798:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     7a8:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     7b8:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     7c8:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     7d8:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     7e8:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     7f8:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     808:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     820:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     838:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     848:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     858:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     868:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     878:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     888:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     898:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     8a8:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     8b8:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     8c8:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     8d8:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     8e8:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     8f8:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     908:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     918:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     928:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     938:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     948:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000950 <_ZL12splash2_data>:
     950:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     960:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     970:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     98c:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     99c:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     9ac:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     9bc:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     9cc:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     9dc:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     9ec:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     9fc:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     a0c:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     a1c:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     a2c:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     a3c:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     a4c:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     a5c:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     a6c:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     a7c:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     a8c:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     a9c:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     aac:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     abc:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     acc:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     ae4:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     af4:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     b04:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     b14:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     b24:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00000b30 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     b30:	ae d5 80 a8                                         ....

00000b34 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     b34:	d3 00 40 8d                                         ..@.

00000b38 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     b38:	20 00 a1 c8                                          ...

00000b3c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     b3c:	db 40 a4 a6 2e af                                   .@....

00000b42 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     b42:	00 80 c0 e0 f0 f8 fc fe                             ........

00000b4a <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     b4a:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000b52 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     b52:	22 00 ff 21 00                                      "..!.

00000b57 <_ZL9daysArray>:
     b57:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00000b63 <digital_pin_to_timer_PGM>:
     b63:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     b8f:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000ba9 <digital_pin_to_bit_mask_PGM>:
     ba9:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     bb9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     bc9:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     bd9:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     be9:	04 08 10 20 40 80                                   ... @.

00000bef <digital_pin_to_port_PGM>:
     bef:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     bff:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     c0f:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     c1f:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     c2f:	0b 0b 0b 0b 0b 0b                                   ......

00000c35 <port_to_input_PGM>:
     c35:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     c45:	00 01 00 00 03 01 06 01 09 01                       ..........

00000c4f <port_to_output_PGM>:
     c4f:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     c5f:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000c69 <port_to_mode_PGM>:
     c69:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     c79:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000c84 <__ctors_start>:
     c84:	c3 07       	cpc	r28, r19
     c86:	1e 08       	sbc	r1, r14
     c88:	77 09       	sbc	r23, r7
     c8a:	fa 0d       	add	r31, r10
     c8c:	51 11       	cpse	r21, r1
     c8e:	a0 11       	cpse	r26, r0
     c90:	b6 57       	subi	r27, 0x76	; 118
     c92:	dd 5b       	subi	r29, 0xBD	; 189

00000c94 <__ctors_end>:
     c94:	2a 08       	sbc	r2, r10
     c96:	06 0e       	add	r0, r22

00000c98 <__dtors_end>:
     c98:	11 24       	eor	r1, r1
     c9a:	1f be       	out	0x3f, r1	; 63
     c9c:	cf ef       	ldi	r28, 0xFF	; 255
     c9e:	d1 e2       	ldi	r29, 0x21	; 33
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	00 e0       	ldi	r16, 0x00	; 0
     ca6:	0c bf       	out	0x3c, r16	; 60

00000ca8 <__do_copy_data>:
     ca8:	13 e0       	ldi	r17, 0x03	; 3
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b2 e0       	ldi	r27, 0x02	; 2
     cae:	ec ec       	ldi	r30, 0xCC	; 204
     cb0:	fb ec       	ldi	r31, 0xCB	; 203
     cb2:	00 e0       	ldi	r16, 0x00	; 0
     cb4:	0b bf       	out	0x3b, r16	; 59
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <__do_copy_data+0x14>
     cb8:	07 90       	elpm	r0, Z+
     cba:	0d 92       	st	X+, r0
     cbc:	a6 36       	cpi	r26, 0x66	; 102
     cbe:	b1 07       	cpc	r27, r17
     cc0:	d9 f7       	brne	.-10     	; 0xcb8 <__do_copy_data+0x10>

00000cc2 <__do_clear_bss>:
     cc2:	26 e0       	ldi	r18, 0x06	; 6
     cc4:	a6 e6       	ldi	r26, 0x66	; 102
     cc6:	b3 e0       	ldi	r27, 0x03	; 3
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <.do_clear_bss_start>

00000cca <.do_clear_bss_loop>:
     cca:	1d 92       	st	X+, r1

00000ccc <.do_clear_bss_start>:
     ccc:	ab 37       	cpi	r26, 0x7B	; 123
     cce:	b2 07       	cpc	r27, r18
     cd0:	e1 f7       	brne	.-8      	; 0xcca <.do_clear_bss_loop>

00000cd2 <__do_global_ctors>:
     cd2:	16 e0       	ldi	r17, 0x06	; 6
     cd4:	ca e4       	ldi	r28, 0x4A	; 74
     cd6:	d6 e0       	ldi	r29, 0x06	; 6
     cd8:	00 e0       	ldi	r16, 0x00	; 0
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <__do_global_ctors+0x16>
     cdc:	21 97       	sbiw	r28, 0x01	; 1
     cde:	01 09       	sbc	r16, r1
     ce0:	80 2f       	mov	r24, r16
     ce2:	fe 01       	movw	r30, r28
     ce4:	0e 94 54 63 	call	0xc6a8	; 0xc6a8 <__tablejump2__>
     ce8:	c2 34       	cpi	r28, 0x42	; 66
     cea:	d1 07       	cpc	r29, r17
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	08 07       	cpc	r16, r24
     cf0:	a9 f7       	brne	.-22     	; 0xcdc <__do_global_ctors+0xa>
     cf2:	0e 94 0b 5c 	call	0xb816	; 0xb816 <main>
     cf6:	0c 94 d5 65 	jmp	0xcbaa	; 0xcbaa <__do_global_dtors>

00000cfa <__bad_interrupt>:
     cfa:	82 c9       	rjmp	.-3324   	; 0x0 <__vectors>

00000cfc <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     cfc:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     cfe:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     d00:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     d02:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     d04:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     d06:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     d08:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     d0a:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     d0e:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     d10:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     d12:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     d14:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     d16:	61 f1       	breq	.+88     	; 0xd70 <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     d18:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     d1a:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     d1c:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     d1e:	b9 f3       	breq	.-18     	; 0xd0e <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     d22:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     d24:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     d26:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     d28:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     d2a:	11 f1       	breq	.+68     	; 0xd70 <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     d2c:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     d2e:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     d30:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     d32:	f7 cf       	rjmp	.-18     	; 0xd22 <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     d34:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     d36:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     d38:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     d3a:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     d3c:	0a c0       	rjmp	.+20     	; 0xd52 <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     d40:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     d42:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     d44:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     d46:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     d48:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     d4a:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     d4c:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     d4e:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     d50:	79 f0       	breq	.+30     	; 0xd70 <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     d52:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     d54:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     d56:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     d58:	91 f3       	breq	.-28     	; 0xd3e <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     d5a:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     d5c:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     d5e:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     d60:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     d62:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     d64:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     d66:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     d68:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     d6a:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     d6c:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     d6e:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     d70:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     d72:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     d74:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     d76:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     d78:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     d7a:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     d7c:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     d7e:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     d80:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     d82:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     d84:	08 95       	ret

00000d86 <_Z8GetHumidv>:

DHT dht(DHTPIN, DHTTYPE);


float GetHumid()
{
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	return dht.readHumidity();
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	86 e6       	ldi	r24, 0x66	; 102
     d92:	93 e0       	ldi	r25, 0x03	; 3
     d94:	0e 94 81 31 	call	0x6302	; 0x6302 <_ZN3DHT12readHumidityEb>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
}
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <_Z7GetTempv>:

float GetTemp()
{
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
	return dht.readTemperature();
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	86 e6       	ldi	r24, 0x66	; 102
     db4:	93 e0       	ldi	r25, 0x03	; 3
     db6:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <_ZN3DHT15readTemperatureEbb>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
}
     dbe:	bc 01       	movw	r22, r24
     dc0:	cd 01       	movw	r24, r26
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <_Z14TjekTempInHousv>:


void TjekTempInHous()
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 d0       	rcall	.+0      	; 0xdce <_Z14TjekTempInHousv+0x6>
     dce:	1f 92       	push	r1
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
	float tempC = GetTemp();
     dd4:	e8 df       	rcall	.-48     	; 0xda6 <_Z7GetTempv>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	ab 83       	std	Y+3, r26	; 0x03
     de0:	bc 83       	std	Y+4, r27	; 0x04
	if (tempC < (SetNumber - Hysterese ))
     de2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     de6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     dea:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     dee:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     df2:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     df6:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     dfa:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     dfe:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 f2 57 	call	0xafe4	; 0xafe4 <__subsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	29 81       	ldd	r18, Y+1	; 0x01
     e10:	3a 81       	ldd	r19, Y+2	; 0x02
     e12:	4b 81       	ldd	r20, Y+3	; 0x03
     e14:	5c 81       	ldd	r21, Y+4	; 0x04
     e16:	bc 01       	movw	r22, r24
     e18:	cd 01       	movw	r24, r26
     e1a:	0e 94 a1 59 	call	0xb342	; 0xb342 <__gesf2>
     e1e:	18 16       	cp	r1, r24
	{
		TooCold();
     e20:	0c f4       	brge	.+2      	; 0xe24 <_Z14TjekTempInHousv+0x5c>
     e22:	6c d0       	rcall	.+216    	; 0xefc <_Z7TooColdv>
	}
	if (tempC > (SetNumber + Hysterese ))
     e24:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     e28:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     e2c:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     e30:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     e34:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     e38:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     e3c:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     e40:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	0e 94 f3 57 	call	0xafe6	; 0xafe6 <__addsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	29 81       	ldd	r18, Y+1	; 0x01
     e52:	3a 81       	ldd	r19, Y+2	; 0x02
     e54:	4b 81       	ldd	r20, Y+3	; 0x03
     e56:	5c 81       	ldd	r21, Y+4	; 0x04
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <__cmpsf2>
     e60:	88 23       	and	r24, r24
	{
		TooHot();
     e62:	0c f4       	brge	.+2      	; 0xe66 <_Z14TjekTempInHousv+0x9e>
     e64:	57 d0       	rcall	.+174    	; 0xf14 <_Z6TooHotv>
	}
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
     e66:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     e6a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     e6e:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     e72:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     e76:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     e7a:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     e7e:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     e82:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 f2 57 	call	0xafe4	; 0xafe4 <__subsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	29 81       	ldd	r18, Y+1	; 0x01
     e94:	3a 81       	ldd	r19, Y+2	; 0x02
     e96:	4b 81       	ldd	r20, Y+3	; 0x03
     e98:	5c 81       	ldd	r21, Y+4	; 0x04
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <__cmpsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	0c f0       	brlt	.+2      	; 0xea8 <_Z14TjekTempInHousv+0xe0>
	{
		PerfektTemp();
	}
}
     ea6:	22 c0       	rjmp	.+68     	; 0xeec <_Z14TjekTempInHousv+0x124>
	}
	if (tempC > (SetNumber + Hysterese ))
	{
		TooHot();
	}
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
     ea8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <SetNumber>
     eac:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <SetNumber+0x1>
     eb0:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <SetNumber+0x2>
     eb4:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <SetNumber+0x3>
     eb8:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Hysterese>
     ebc:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Hysterese+0x1>
     ec0:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Hysterese+0x2>
     ec4:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <Hysterese+0x3>
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 f3 57 	call	0xafe6	; 0xafe6 <__addsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	29 81       	ldd	r18, Y+1	; 0x01
     ed6:	3a 81       	ldd	r19, Y+2	; 0x02
     ed8:	4b 81       	ldd	r20, Y+3	; 0x03
     eda:	5c 81       	ldd	r21, Y+4	; 0x04
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 a1 59 	call	0xb342	; 0xb342 <__gesf2>
     ee4:	18 16       	cp	r1, r24
	{
		PerfektTemp();
	}
}
     ee6:	0c f0       	brlt	.+2      	; 0xeea <_Z14TjekTempInHousv+0x122>
	{
		TooHot();
	}
	if ( tempC > (SetNumber - Hysterese )  &&  tempC < (SetNumber + Hysterese ))
	{
		PerfektTemp();
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <_Z14TjekTempInHousv+0x124>
     eea:	20 d0       	rcall	.+64     	; 0xf2c <_Z11PerfektTempv>
	}
}
     eec:	00 00       	nop
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <_Z7TooColdv>:

void TooCold()
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	TempTooCold();
     f04:	8f d6       	rcall	.+3358   	; 0x1c24 <_Z11TempTooColdv>
	TurnOnRedLED();
     f06:	a1 d2       	rcall	.+1346   	; 0x144a <_Z12TurnOnRedLEDv>
	TurnOFFGreenLED();
     f08:	d0 d2       	rcall	.+1440   	; 0x14aa <_Z15TurnOFFGreenLEDv>
     f0a:	db d2       	rcall	.+1462   	; 0x14c2 <_Z14TurnOFFBlueLEDv>
	TurnOFFBlueLED();
     f0c:	00 00       	nop
     f0e:	df 91       	pop	r29
}
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <_Z6TooHotv>:
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29

void TooHot()
{
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	TempTooHot();
     f1c:	30 d7       	rcall	.+3680   	; 0x1d7e <_Z10TempTooHotv>
	TurnOnBlueLED();
     f1e:	ad d2       	rcall	.+1370   	; 0x147a <_Z13TurnOnBlueLEDv>
	TurnOFFGreenLED();
     f20:	c4 d2       	rcall	.+1416   	; 0x14aa <_Z15TurnOFFGreenLEDv>
     f22:	b7 d2       	rcall	.+1390   	; 0x1492 <_Z13TurnOFFRedLEDv>
	TurnOFFRedLED();
     f24:	00 00       	nop
     f26:	df 91       	pop	r29
}
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <_Z11PerfektTempv>:
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29

void PerfektTemp()
{
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
	TempPerfekt();
     f34:	d3 d7       	rcall	.+4006   	; 0x1edc <_Z11TempPerfektv>
	TurnOnGreenLED();
     f36:	95 d2       	rcall	.+1322   	; 0x1462 <_Z14TurnOnGreenLEDv>
	TurnOFFRedLED();
     f38:	ac d2       	rcall	.+1368   	; 0x1492 <_Z13TurnOFFRedLEDv>
     f3a:	c3 d2       	rcall	.+1414   	; 0x14c2 <_Z14TurnOFFBlueLEDv>
	TurnOFFBlueLED();
     f3c:	00 00       	nop
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <_Z41__static_initialization_and_destruction_0ii>:
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	00 d0       	rcall	.+0      	; 0xf4a <_Z41__static_initialization_and_destruction_0ii+0x6>
     f4a:	1f 92       	push	r1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	7c 83       	std	Y+4, r23	; 0x04
     f56:	6b 83       	std	Y+3, r22	; 0x03
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	59 f4       	brne	.+22     	; 0xf76 <_Z41__static_initialization_and_destruction_0ii+0x32>
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	39 f4       	brne	.+14     	; 0xf76 <_Z41__static_initialization_and_destruction_0ii+0x32>
#define DHTPIN 2
#define DHTTYPE DHT11
float SetNumber = 24;
float Hysterese = 1;

DHT dht(DHTPIN, DHTTYPE);
     f68:	26 e0       	ldi	r18, 0x06	; 6
     f6a:	4b e0       	ldi	r20, 0x0B	; 11
     f6c:	62 e0       	ldi	r22, 0x02	; 2
     f6e:	86 e6       	ldi	r24, 0x66	; 102
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <_ZN3DHTC1Ehhh>
{
	TempPerfekt();
	TurnOnGreenLED();
	TurnOFFRedLED();
	TurnOFFBlueLED();
     f76:	00 00       	nop
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <_GLOBAL__sub_I_SetNumber>:
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	6f ef       	ldi	r22, 0xFF	; 255
     f90:	7f ef       	ldi	r23, 0xFF	; 255
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	d6 df       	rcall	.-84     	; 0xf44 <_Z41__static_initialization_and_destruction_0ii>
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <_Z11GetDistancev>:
int trigPin = 3;    // Trigger
int echoPin = 4;    // Echo
HCSR04 hc(trigPin,echoPin);

int GetDistance()
{
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	1f 92       	push	r1
     fa4:	1f 92       	push	r1
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	unsigned int distance = hc.dist();
     faa:	89 e7       	ldi	r24, 0x79	; 121
     fac:	93 e0       	ldi	r25, 0x03	; 3
     fae:	0e 94 64 39 	call	0x72c8	; 0x72c8 <_ZNK6HCSR044distEv>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	bc 01       	movw	r22, r24
     fb8:	cd 01       	movw	r24, r26
     fba:	0e 94 c3 58 	call	0xb186	; 0xb186 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
	return distance;
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <_Z41__static_initialization_and_destruction_0ii>:
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	00 d0       	rcall	.+0      	; 0xfda <_Z41__static_initialization_and_destruction_0ii+0x6>
     fda:	1f 92       	push	r1
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	7c 83       	std	Y+4, r23	; 0x04
     fe6:	6b 83       	std	Y+3, r22	; 0x03
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	91 f4       	brne	.+36     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	71 f4       	brne	.+28     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
#include "HC-SR04.h"

int trigPin = 3;    // Trigger
int echoPin = 4;    // Echo
HCSR04 hc(trigPin,echoPin);
     ff8:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <echoPin>
     ffc:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <echoPin+0x1>
    1000:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <trigPin>
    1004:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <trigPin+0x1>
    1008:	a9 01       	movw	r20, r18
    100a:	bc 01       	movw	r22, r24
    100c:	89 e7       	ldi	r24, 0x79	; 121
    100e:	93 e0       	ldi	r25, 0x03	; 3
    1010:	0e 94 b8 38 	call	0x7170	; 0x7170 <_ZN6HCSR04C1Eii>
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	89 2b       	or	r24, r25
    101a:	41 f4       	brne	.+16     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	21 f4       	brne	.+8      	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    1024:	89 e7       	ldi	r24, 0x79	; 121
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	0e 94 e0 38 	call	0x71c0	; 0x71c0 <_ZN6HCSR04D1Ev>

int GetDistance()
{
	unsigned int distance = hc.dist();
	return distance;
    102c:	00 00       	nop
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <_GLOBAL__sub_I_trigPin>:
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	6f ef       	ldi	r22, 0xFF	; 255
    1046:	7f ef       	ldi	r23, 0xFF	; 255
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	c3 df       	rcall	.-122    	; 0xfd4 <_Z41__static_initialization_and_destruction_0ii>
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <_GLOBAL__sub_D_trigPin>:
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	6f ef       	ldi	r22, 0xFF	; 255
    105e:	7f ef       	ldi	r23, 0xFF	; 255
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	b7 df       	rcall	.-146    	; 0xfd4 <_Z41__static_initialization_and_destruction_0ii>
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <_Z12LCDPrintTempf>:

int rs = 22, en = 23, d4 = 24, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

void LCDPrintTemp(float temp)
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	00 d0       	rcall	.+0      	; 0x1072 <_Z12LCDPrintTempf+0x6>
    1072:	1f 92       	push	r1
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	69 83       	std	Y+1, r22	; 0x01
    107a:	7a 83       	std	Y+2, r23	; 0x02
    107c:	8b 83       	std	Y+3, r24	; 0x03
    107e:	9c 83       	std	Y+4, r25	; 0x04
	lcd.clear();
    1080:	8f e7       	ldi	r24, 0x7F	; 127
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	0e 94 55 41 	call	0x82aa	; 0x82aa <_ZN13LiquidCrystal5clearEv>
	lcd.print(F("Temperatur: "));
    1088:	8c e2       	ldi	r24, 0x2C	; 44
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	bc 01       	movw	r22, r24
    108e:	8f e7       	ldi	r24, 0x7F	; 127
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.print(temp, 0);
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	ab 81       	ldd	r26, Y+3	; 0x03
    109c:	bc 81       	ldd	r27, Y+4	; 0x04
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	ac 01       	movw	r20, r24
    10a4:	bd 01       	movw	r22, r26
    10a6:	8f e7       	ldi	r24, 0x7F	; 127
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 31 5e 	call	0xbc62	; 0xbc62 <_ZN5Print5printEdi>
	lcd.print((char)223);
    10ae:	6f ed       	ldi	r22, 0xDF	; 223
    10b0:	8f e7       	ldi	r24, 0x7F	; 127
    10b2:	93 e0       	ldi	r25, 0x03	; 3
    10b4:	0e 94 7d 5c 	call	0xb8fa	; 0xb8fa <_ZN5Print5printEc>
}
    10b8:	00 00       	nop
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <_Z16LCDPrintHumidityf>:

void LCDPrintHumidity(float humid)
{
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <_Z16LCDPrintHumidityf+0x6>
    10ce:	1f 92       	push	r1
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	69 83       	std	Y+1, r22	; 0x01
    10d6:	7a 83       	std	Y+2, r23	; 0x02
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	9c 83       	std	Y+4, r25	; 0x04
	lcd.clear();
    10dc:	8f e7       	ldi	r24, 0x7F	; 127
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	0e 94 55 41 	call	0x82aa	; 0x82aa <_ZN13LiquidCrystal5clearEv>
	lcd.print(F("Humidity: "));
    10e4:	89 e3       	ldi	r24, 0x39	; 57
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	bc 01       	movw	r22, r24
    10ea:	8f e7       	ldi	r24, 0x7F	; 127
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <_ZN5Print5printEPK19__FlashStringHelper>
	lcd.print(humid, 0);
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	ab 81       	ldd	r26, Y+3	; 0x03
    10f8:	bc 81       	ldd	r27, Y+4	; 0x04
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	ac 01       	movw	r20, r24
    1100:	bd 01       	movw	r22, r26
    1102:	8f e7       	ldi	r24, 0x7F	; 127
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	0e 94 31 5e 	call	0xbc62	; 0xbc62 <_ZN5Print5printEdi>
	lcd.print(F("%"));
    110a:	84 e4       	ldi	r24, 0x44	; 68
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	bc 01       	movw	r22, r24
    1110:	8f e7       	ldi	r24, 0x7F	; 127
    1112:	93 e0       	ldi	r25, 0x03	; 3
    1114:	0e 94 58 5c 	call	0xb8b0	; 0xb8b0 <_ZN5Print5printEPK19__FlashStringHelper>
}
    1118:	00 00       	nop
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret

00001128 <_Z19LCDPrintTimeAndDate11RTCDateTime>:


void LCDPrintTimeAndDate(RTCDateTime dt)
{
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	2c 97       	sbiw	r28, 0x0c	; 12
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	e9 82       	std	Y+1, r14	; 0x01
    1146:	fa 82       	std	Y+2, r15	; 0x02
    1148:	0b 83       	std	Y+3, r16	; 0x03
    114a:	1c 83       	std	Y+4, r17	; 0x04
    114c:	2d 83       	std	Y+5, r18	; 0x05
    114e:	3e 83       	std	Y+6, r19	; 0x06
    1150:	4f 83       	std	Y+7, r20	; 0x07
    1152:	58 87       	std	Y+8, r21	; 0x08
    1154:	69 87       	std	Y+9, r22	; 0x09
    1156:	7a 87       	std	Y+10, r23	; 0x0a
    1158:	8b 87       	std	Y+11, r24	; 0x0b
    115a:	9c 87       	std	Y+12, r25	; 0x0c
	lcd.clear();
    115c:	8f e7       	ldi	r24, 0x7F	; 127
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	0e 94 55 41 	call	0x82aa	; 0x82aa <_ZN13LiquidCrystal5clearEv>
	lcd.print(AddLeadingZero(dt.year));   lcd.print("-");
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	0e 94 d7 57 	call	0xafae	; 0xafae <_Z14AddLeadingZeroi>
    116c:	4a e0       	ldi	r20, 0x0A	; 10
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	bc 01       	movw	r22, r24
    1172:	8f e7       	ldi	r24, 0x7F	; 127
    1174:	93 e0       	ldi	r25, 0x03	; 3
    1176:	0e 94 54 5d 	call	0xbaa8	; 0xbaa8 <_ZN5Print5printEii>
    117a:	6f e3       	ldi	r22, 0x3F	; 63
    117c:	72 e0       	ldi	r23, 0x02	; 2
    117e:	8f e7       	ldi	r24, 0x7F	; 127
    1180:	93 e0       	ldi	r25, 0x03	; 3
    1182:	0e 94 7c 5c 	call	0xb8f8	; 0xb8f8 <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.month));  lcd.print("-");
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 d7 57 	call	0xafae	; 0xafae <_Z14AddLeadingZeroi>
    1190:	4a e0       	ldi	r20, 0x0A	; 10
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	bc 01       	movw	r22, r24
    1196:	8f e7       	ldi	r24, 0x7F	; 127
    1198:	93 e0       	ldi	r25, 0x03	; 3
    119a:	0e 94 54 5d 	call	0xbaa8	; 0xbaa8 <_ZN5Print5printEii>
    119e:	6f e3       	ldi	r22, 0x3F	; 63
    11a0:	72 e0       	ldi	r23, 0x02	; 2
    11a2:	8f e7       	ldi	r24, 0x7F	; 127
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	0e 94 7c 5c 	call	0xb8f8	; 0xb8f8 <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.day));    lcd.print(" ");
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 d7 57 	call	0xafae	; 0xafae <_Z14AddLeadingZeroi>
    11b4:	4a e0       	ldi	r20, 0x0A	; 10
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	bc 01       	movw	r22, r24
    11ba:	8f e7       	ldi	r24, 0x7F	; 127
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	0e 94 54 5d 	call	0xbaa8	; 0xbaa8 <_ZN5Print5printEii>
    11c2:	61 e4       	ldi	r22, 0x41	; 65
    11c4:	72 e0       	ldi	r23, 0x02	; 2
    11c6:	8f e7       	ldi	r24, 0x7F	; 127
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	0e 94 7c 5c 	call	0xb8f8	; 0xb8f8 <_ZN5Print5printEPKc>
	lcd.setCursor(0, 1);
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	8f e7       	ldi	r24, 0x7F	; 127
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	0e 94 6b 41 	call	0x82d6	; 0x82d6 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(AddLeadingZero(dt.hour));   lcd.print(":");
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 d7 57 	call	0xafae	; 0xafae <_Z14AddLeadingZeroi>
    11e4:	4a e0       	ldi	r20, 0x0A	; 10
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	bc 01       	movw	r22, r24
    11ea:	8f e7       	ldi	r24, 0x7F	; 127
    11ec:	93 e0       	ldi	r25, 0x03	; 3
    11ee:	0e 94 54 5d 	call	0xbaa8	; 0xbaa8 <_ZN5Print5printEii>
    11f2:	63 e4       	ldi	r22, 0x43	; 67
    11f4:	72 e0       	ldi	r23, 0x02	; 2
    11f6:	8f e7       	ldi	r24, 0x7F	; 127
    11f8:	93 e0       	ldi	r25, 0x03	; 3
    11fa:	0e 94 7c 5c 	call	0xb8f8	; 0xb8f8 <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.minute)); lcd.print(":");
    11fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 d7 57 	call	0xafae	; 0xafae <_Z14AddLeadingZeroi>
    1208:	4a e0       	ldi	r20, 0x0A	; 10
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	bc 01       	movw	r22, r24
    120e:	8f e7       	ldi	r24, 0x7F	; 127
    1210:	93 e0       	ldi	r25, 0x03	; 3
    1212:	0e 94 54 5d 	call	0xbaa8	; 0xbaa8 <_ZN5Print5printEii>
    1216:	63 e4       	ldi	r22, 0x43	; 67
    1218:	72 e0       	ldi	r23, 0x02	; 2
    121a:	8f e7       	ldi	r24, 0x7F	; 127
    121c:	93 e0       	ldi	r25, 0x03	; 3
    121e:	0e 94 7c 5c 	call	0xb8f8	; 0xb8f8 <_ZN5Print5printEPKc>
	lcd.print(AddLeadingZero(dt.second)); lcd.print("");
    1222:	8f 81       	ldd	r24, Y+7	; 0x07
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 d7 57 	call	0xafae	; 0xafae <_Z14AddLeadingZeroi>
    122c:	4a e0       	ldi	r20, 0x0A	; 10
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	bc 01       	movw	r22, r24
    1232:	8f e7       	ldi	r24, 0x7F	; 127
    1234:	93 e0       	ldi	r25, 0x03	; 3
    1236:	0e 94 54 5d 	call	0xbaa8	; 0xbaa8 <_ZN5Print5printEii>
    123a:	65 e4       	ldi	r22, 0x45	; 69
    123c:	72 e0       	ldi	r23, 0x02	; 2
    123e:	8f e7       	ldi	r24, 0x7F	; 127
    1240:	93 e0       	ldi	r25, 0x03	; 3
    1242:	0e 94 7c 5c 	call	0xb8f8	; 0xb8f8 <_ZN5Print5printEPKc>
}
    1246:	00 00       	nop
    1248:	2c 96       	adiw	r28, 0x0c	; 12
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	08 95       	ret

00001262 <_Z41__static_initialization_and_destruction_0ii>:
    1262:	cf 92       	push	r12
    1264:	ef 92       	push	r14
    1266:	0f 93       	push	r16
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	00 d0       	rcall	.+0      	; 0x126e <_Z41__static_initialization_and_destruction_0ii+0xc>
    126e:	1f 92       	push	r1
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	7c 83       	std	Y+4, r23	; 0x04
    127a:	6b 83       	std	Y+3, r22	; 0x03
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	51 f5       	brne	.+84     	; 0x12d8 <_Z41__static_initialization_and_destruction_0ii+0x76>
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	31 f5       	brne	.+76     	; 0x12d8 <_Z41__static_initialization_and_destruction_0ii+0x76>
#include "LCD.h"

int rs = 22, en = 23, d4 = 24, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
    128c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <d7>
    1290:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <d7+0x1>
    1294:	68 2f       	mov	r22, r24
    1296:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <d6>
    129a:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <d6+0x1>
    129e:	58 2f       	mov	r21, r24
    12a0:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <d5>
    12a4:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <d5+0x1>
    12a8:	48 2f       	mov	r20, r24
    12aa:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <d4>
    12ae:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <d4+0x1>
    12b2:	28 2f       	mov	r18, r24
    12b4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <en>
    12b8:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <en+0x1>
    12bc:	38 2f       	mov	r19, r24
    12be:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <rs>
    12c2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <rs+0x1>
    12c6:	c6 2e       	mov	r12, r22
    12c8:	e5 2e       	mov	r14, r21
    12ca:	04 2f       	mov	r16, r20
    12cc:	43 2f       	mov	r20, r19
    12ce:	68 2f       	mov	r22, r24
    12d0:	8f e7       	ldi	r24, 0x7F	; 127
    12d2:	93 e0       	ldi	r25, 0x03	; 3
    12d4:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <_ZN13LiquidCrystalC1Ehhhhhh>
	lcd.print(AddLeadingZero(dt.day));    lcd.print(" ");
	lcd.setCursor(0, 1);
	lcd.print(AddLeadingZero(dt.hour));   lcd.print(":");
	lcd.print(AddLeadingZero(dt.minute)); lcd.print(":");
	lcd.print(AddLeadingZero(dt.second)); lcd.print("");
}
    12d8:	00 00       	nop
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	0f 91       	pop	r16
    12e8:	ef 90       	pop	r14
    12ea:	cf 90       	pop	r12
    12ec:	08 95       	ret

000012ee <_GLOBAL__sub_I_rs>:
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	6f ef       	ldi	r22, 0xFF	; 255
    12f8:	7f ef       	ldi	r23, 0xFF	; 255
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	b1 df       	rcall	.-158    	; 0x1262 <_Z41__static_initialization_and_destruction_0ii>
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <_Z15ChangeRGBAnalogv>:
int R_brightness = 0;
int G_brightness = 0;
int B_brightness = 0;

void ChangeRGBAnalog()
{
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	R_brightness = map(analogRead(A0), 0, 1023, 0, 255);
    131e:	86 e3       	ldi	r24, 0x36	; 54
    1320:	0e 94 53 5f 	call	0xbea6	; 0xbea6 <analogRead>
    1324:	09 2e       	mov	r0, r25
    1326:	00 0c       	add	r0, r0
    1328:	aa 0b       	sbc	r26, r26
    132a:	bb 0b       	sbc	r27, r27
    132c:	1f 92       	push	r1
    132e:	1f 92       	push	r1
    1330:	1f 92       	push	r1
    1332:	2f ef       	ldi	r18, 0xFF	; 255
    1334:	2f 93       	push	r18
    1336:	a1 2c       	mov	r10, r1
    1338:	b1 2c       	mov	r11, r1
    133a:	65 01       	movw	r12, r10
    133c:	ee 24       	eor	r14, r14
    133e:	ea 94       	dec	r14
    1340:	13 e0       	ldi	r17, 0x03	; 3
    1342:	f1 2e       	mov	r15, r17
    1344:	00 e0       	ldi	r16, 0x00	; 0
    1346:	10 e0       	ldi	r17, 0x00	; 0
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 57 61 	call	0xc2ae	; 0xc2ae <_Z3maplllll>
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <R_brightness+0x1>
    1366:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <R_brightness>
	G_brightness = map(analogRead(A1), 0, 1023, 0, 255);
    136a:	87 e3       	ldi	r24, 0x37	; 55
    136c:	0e 94 53 5f 	call	0xbea6	; 0xbea6 <analogRead>
    1370:	09 2e       	mov	r0, r25
    1372:	00 0c       	add	r0, r0
    1374:	aa 0b       	sbc	r26, r26
    1376:	bb 0b       	sbc	r27, r27
    1378:	1f 92       	push	r1
    137a:	1f 92       	push	r1
    137c:	1f 92       	push	r1
    137e:	2f ef       	ldi	r18, 0xFF	; 255
    1380:	2f 93       	push	r18
    1382:	a1 2c       	mov	r10, r1
    1384:	b1 2c       	mov	r11, r1
    1386:	65 01       	movw	r12, r10
    1388:	ee 24       	eor	r14, r14
    138a:	ea 94       	dec	r14
    138c:	13 e0       	ldi	r17, 0x03	; 3
    138e:	f1 2e       	mov	r15, r17
    1390:	00 e0       	ldi	r16, 0x00	; 0
    1392:	10 e0       	ldi	r17, 0x00	; 0
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 57 61 	call	0xc2ae	; 0xc2ae <_Z3maplllll>
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <G_brightness+0x1>
    13b2:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <G_brightness>
	B_brightness = map(analogRead(A2), 0, 1023, 0, 255);
    13b6:	88 e3       	ldi	r24, 0x38	; 56
    13b8:	0e 94 53 5f 	call	0xbea6	; 0xbea6 <analogRead>
    13bc:	09 2e       	mov	r0, r25
    13be:	00 0c       	add	r0, r0
    13c0:	aa 0b       	sbc	r26, r26
    13c2:	bb 0b       	sbc	r27, r27
    13c4:	1f 92       	push	r1
    13c6:	1f 92       	push	r1
    13c8:	1f 92       	push	r1
    13ca:	2f ef       	ldi	r18, 0xFF	; 255
    13cc:	2f 93       	push	r18
    13ce:	a1 2c       	mov	r10, r1
    13d0:	b1 2c       	mov	r11, r1
    13d2:	65 01       	movw	r12, r10
    13d4:	ee 24       	eor	r14, r14
    13d6:	ea 94       	dec	r14
    13d8:	13 e0       	ldi	r17, 0x03	; 3
    13da:	f1 2e       	mov	r15, r17
    13dc:	00 e0       	ldi	r16, 0x00	; 0
    13de:	10 e0       	ldi	r17, 0x00	; 0
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	bc 01       	movw	r22, r24
    13e8:	cd 01       	movw	r24, r26
    13ea:	0e 94 57 61 	call	0xc2ae	; 0xc2ae <_Z3maplllll>
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <B_brightness+0x1>
    13fe:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <B_brightness>
	
	analogWrite(RedRGB, R_brightness);
    1402:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <R_brightness>
    1406:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <R_brightness+0x1>
    140a:	bc 01       	movw	r22, r24
    140c:	8a e2       	ldi	r24, 0x2A	; 42
    140e:	0e 94 78 5f 	call	0xbef0	; 0xbef0 <analogWrite>
	analogWrite(GreenRGB, G_brightness);
    1412:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <G_brightness>
    1416:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <G_brightness+0x1>
    141a:	bc 01       	movw	r22, r24
    141c:	8b e2       	ldi	r24, 0x2B	; 43
    141e:	0e 94 78 5f 	call	0xbef0	; 0xbef0 <analogWrite>
	analogWrite(BlueRGB, B_brightness);
    1422:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <B_brightness>
    1426:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <B_brightness+0x1>
    142a:	bc 01       	movw	r22, r24
    142c:	8c e2       	ldi	r24, 0x2C	; 44
    142e:	0e 94 78 5f 	call	0xbef0	; 0xbef0 <analogWrite>
	
}
    1432:	00 00       	nop
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	bf 90       	pop	r11
    1446:	af 90       	pop	r10
    1448:	08 95       	ret

0000144a <_Z12TurnOnRedLEDv>:


void TurnOnRedLED()
{
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(RedLED, HIGH);
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	89 e0       	ldi	r24, 0x09	; 9
    1456:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
}
    145a:	00 00       	nop
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	08 95       	ret

00001462 <_Z14TurnOnGreenLEDv>:

void TurnOnGreenLED()
{
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(GreenLED, HIGH);
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	87 e0       	ldi	r24, 0x07	; 7
    146e:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
}
    1472:	00 00       	nop
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <_Z13TurnOnBlueLEDv>:

void TurnOnBlueLED()
{
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(BlueLED, HIGH);
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	88 e0       	ldi	r24, 0x08	; 8
    1486:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
}
    148a:	00 00       	nop
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	08 95       	ret

00001492 <_Z13TurnOFFRedLEDv>:

void TurnOFFRedLED()
{
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(RedLED, LOW);
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	89 e0       	ldi	r24, 0x09	; 9
    149e:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
}
    14a2:	00 00       	nop
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <_Z15TurnOFFGreenLEDv>:

void TurnOFFGreenLED()
{
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(GreenLED, LOW);
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	87 e0       	ldi	r24, 0x07	; 7
    14b6:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
}
    14ba:	00 00       	nop
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <_Z14TurnOFFBlueLEDv>:

void TurnOFFBlueLED()
{
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(BlueLED, LOW);
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	88 e0       	ldi	r24, 0x08	; 8
    14ce:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    14d2:	00 00       	nop
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <_ZN14HardwareSerial5beginEm+0x6>
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <_ZN14HardwareSerial5beginEm+0x8>
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	4b 83       	std	Y+3, r20	; 0x03
    14ec:	5c 83       	std	Y+4, r21	; 0x04
    14ee:	6d 83       	std	Y+5, r22	; 0x05
    14f0:	7e 83       	std	Y+6, r23	; 0x06
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	ad 81       	ldd	r26, Y+5	; 0x05
    14f8:	be 81       	ldd	r27, Y+6	; 0x06
    14fa:	e9 81       	ldd	r30, Y+1	; 0x01
    14fc:	fa 81       	ldd	r31, Y+2	; 0x02
    14fe:	26 e0       	ldi	r18, 0x06	; 6
    1500:	ac 01       	movw	r20, r24
    1502:	bd 01       	movw	r22, r26
    1504:	cf 01       	movw	r24, r30
    1506:	0e 94 12 5b 	call	0xb624	; 0xb624 <_ZN14HardwareSerial5beginEmh>
    150a:	00 00       	nop
    150c:	26 96       	adiw	r28, 0x06	; 6
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <setup>:
long previousMillis = 0;
long intervalDate = 1000;
DS3231 clock;

void setup()
{
    151e:	0f 93       	push	r16
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	2e 97       	sbiw	r28, 0x0e	; 14
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
	#pragma region Begins
	Serial.begin(9600);
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	55 e2       	ldi	r21, 0x25	; 37
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	81 ed       	ldi	r24, 0xD1	; 209
    153e:	95 e0       	ldi	r25, 0x05	; 5
    1540:	cc df       	rcall	.-104    	; 0x14da <_ZN14HardwareSerial5beginEm>
	SPI.begin();
    1542:	0e 94 d7 4f 	call	0x9fae	; 0x9fae <_ZN8SPIClass5beginEv>
	mfrc522.PCD_Init();
    1546:	83 e5       	ldi	r24, 0x53	; 83
    1548:	94 e0       	ldi	r25, 0x04	; 4
    154a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <_ZN7MFRC5228PCD_InitEv>
	dht.begin();
    154e:	67 e3       	ldi	r22, 0x37	; 55
    1550:	86 e6       	ldi	r24, 0x66	; 102
    1552:	93 e0       	ldi	r25, 0x03	; 3
    1554:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <_ZN3DHT5beginEh>
	lcd.begin(16, 2);
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	42 e0       	ldi	r20, 0x02	; 2
    155c:	60 e1       	ldi	r22, 0x10	; 16
    155e:	8f e7       	ldi	r24, 0x7F	; 127
    1560:	93 e0       	ldi	r25, 0x03	; 3
    1562:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <_ZN13LiquidCrystal5beginEhhh>
	clock.begin();
    1566:	83 ea       	ldi	r24, 0xA3	; 163
    1568:	93 e0       	ldi	r25, 0x03	; 3
    156a:	0e 94 7c 35 	call	0x6af8	; 0x6af8 <_ZN6DS32315beginEv>
    156e:	8a e0       	ldi	r24, 0x0A	; 10
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	ab 83       	std	Y+3, r26	; 0x03
    157c:	bc 83       	std	Y+4, r27	; 0x04
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
    157e:	81 e8       	ldi	r24, 0x81	; 129
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	20 e1       	ldi	r18, 0x10	; 16
    1584:	fc 01       	movw	r30, r24
    1586:	20 83       	st	Z, r18
	TCCR1A = 0;                 // clear control register A 
    1588:	80 e8       	ldi	r24, 0x80	; 128
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	fc 01       	movw	r30, r24
    158e:	10 82       	st	Z, r1
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	94 e0       	ldi	r25, 0x04	; 4
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	ab 81       	ldd	r26, Y+3	; 0x03
    159e:	bc 81       	ldd	r27, Y+4	; 0x04
    15a0:	8f 83       	std	Y+7, r24	; 0x07
    15a2:	98 87       	std	Y+8, r25	; 0x08
    15a4:	a9 87       	std	Y+9, r26	; 0x09
    15a6:	ba 87       	std	Y+10, r27	; 0x0a
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
    15a8:	8f 81       	ldd	r24, Y+7	; 0x07
    15aa:	98 85       	ldd	r25, Y+8	; 0x08
    15ac:	a9 85       	ldd	r26, Y+9	; 0x09
    15ae:	ba 85       	ldd	r27, Y+10	; 0x0a
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	aa 1f       	adc	r26, r26
    15b6:	bb 1f       	adc	r27, r27
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	aa 1f       	adc	r26, r26
    15be:	bb 1f       	adc	r27, r27
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	aa 1f       	adc	r26, r26
    15c6:	bb 1f       	adc	r27, r27
    15c8:	8b 87       	std	Y+11, r24	; 0x0b
    15ca:	9c 87       	std	Y+12, r25	; 0x0c
    15cc:	ad 87       	std	Y+13, r26	; 0x0d
    15ce:	be 87       	std	Y+14, r27	; 0x0e
	if (cycles < TIMER1_RESOLUTION) {
    15d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15d4:	ad 85       	ldd	r26, Y+13	; 0x0d
    15d6:	be 85       	ldd	r27, Y+14	; 0x0e
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	a1 40       	sbci	r26, 0x01	; 1
    15dc:	b1 05       	cpc	r27, r1
    15de:	50 f4       	brcc	.+20     	; 0x15f4 <setup+0xd6>
		clockSelectBits = _BV(CS10);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles;
    15e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ea:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    15ee:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    15f2:	76 c0       	rjmp	.+236    	; 0x16e0 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 8) {
    15f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f8:	ad 85       	ldd	r26, Y+13	; 0x0d
    15fa:	be 85       	ldd	r27, Y+14	; 0x0e
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	a8 40       	sbci	r26, 0x08	; 8
    1600:	b1 05       	cpc	r27, r1
    1602:	a0 f4       	brcc	.+40     	; 0x162c <setup+0x10e>
		clockSelectBits = _BV(CS11);
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 8;
    160a:	8b 85       	ldd	r24, Y+11	; 0x0b
    160c:	9c 85       	ldd	r25, Y+12	; 0x0c
    160e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1610:	be 85       	ldd	r27, Y+14	; 0x0e
    1612:	68 94       	set
    1614:	12 f8       	bld	r1, 2
    1616:	b6 95       	lsr	r27
    1618:	a7 95       	ror	r26
    161a:	97 95       	ror	r25
    161c:	87 95       	ror	r24
    161e:	16 94       	lsr	r1
    1620:	d1 f7       	brne	.-12     	; 0x1616 <setup+0xf8>
    1622:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    1626:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    162a:	5a c0       	rjmp	.+180    	; 0x16e0 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
    162c:	8b 85       	ldd	r24, Y+11	; 0x0b
    162e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1630:	ad 85       	ldd	r26, Y+13	; 0x0d
    1632:	be 85       	ldd	r27, Y+14	; 0x0e
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	a0 44       	sbci	r26, 0x40	; 64
    1638:	b1 05       	cpc	r27, r1
    163a:	a0 f4       	brcc	.+40     	; 0x1664 <setup+0x146>
		clockSelectBits = _BV(CS11) | _BV(CS10);
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 64;
    1642:	8b 85       	ldd	r24, Y+11	; 0x0b
    1644:	9c 85       	ldd	r25, Y+12	; 0x0c
    1646:	ad 85       	ldd	r26, Y+13	; 0x0d
    1648:	be 85       	ldd	r27, Y+14	; 0x0e
    164a:	68 94       	set
    164c:	15 f8       	bld	r1, 5
    164e:	b6 95       	lsr	r27
    1650:	a7 95       	ror	r26
    1652:	97 95       	ror	r25
    1654:	87 95       	ror	r24
    1656:	16 94       	lsr	r1
    1658:	d1 f7       	brne	.-12     	; 0x164e <setup+0x130>
    165a:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    165e:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    1662:	3e c0       	rjmp	.+124    	; 0x16e0 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 256) {
    1664:	8b 85       	ldd	r24, Y+11	; 0x0b
    1666:	9c 85       	ldd	r25, Y+12	; 0x0c
    1668:	ad 85       	ldd	r26, Y+13	; 0x0d
    166a:	be 85       	ldd	r27, Y+14	; 0x0e
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	a1 05       	cpc	r26, r1
    1670:	b1 40       	sbci	r27, 0x01	; 1
    1672:	80 f4       	brcc	.+32     	; 0x1694 <setup+0x176>
		clockSelectBits = _BV(CS12);
    1674:	84 e0       	ldi	r24, 0x04	; 4
    1676:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 256;
    167a:	8b 85       	ldd	r24, Y+11	; 0x0b
    167c:	9c 85       	ldd	r25, Y+12	; 0x0c
    167e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1680:	be 85       	ldd	r27, Y+14	; 0x0e
    1682:	89 2f       	mov	r24, r25
    1684:	9a 2f       	mov	r25, r26
    1686:	ab 2f       	mov	r26, r27
    1688:	bb 27       	eor	r27, r27
    168a:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    168e:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    1692:	26 c0       	rjmp	.+76     	; 0x16e0 <setup+0x1c2>
	} else
	if (cycles < TIMER1_RESOLUTION * 1024) {
    1694:	8b 85       	ldd	r24, Y+11	; 0x0b
    1696:	9c 85       	ldd	r25, Y+12	; 0x0c
    1698:	ad 85       	ldd	r26, Y+13	; 0x0d
    169a:	be 85       	ldd	r27, Y+14	; 0x0e
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	a1 05       	cpc	r26, r1
    16a0:	b4 40       	sbci	r27, 0x04	; 4
    16a2:	a8 f4       	brcc	.+42     	; 0x16ce <setup+0x1b0>
		clockSelectBits = _BV(CS12) | _BV(CS10);
    16a4:	85 e0       	ldi	r24, 0x05	; 5
    16a6:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = cycles / 1024;
    16aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ae:	ad 85       	ldd	r26, Y+13	; 0x0d
    16b0:	be 85       	ldd	r27, Y+14	; 0x0e
    16b2:	07 2e       	mov	r0, r23
    16b4:	7a e0       	ldi	r23, 0x0A	; 10
    16b6:	b6 95       	lsr	r27
    16b8:	a7 95       	ror	r26
    16ba:	97 95       	ror	r25
    16bc:	87 95       	ror	r24
    16be:	7a 95       	dec	r23
    16c0:	d1 f7       	brne	.-12     	; 0x16b6 <setup+0x198>
    16c2:	70 2d       	mov	r23, r0
    16c4:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    16c8:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <setup+0x1c2>
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
    16ce:	85 e0       	ldi	r24, 0x05	; 5
    16d0:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
		pwmPeriod = TIMER1_RESOLUTION - 1;
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	9f ef       	ldi	r25, 0xFF	; 255
    16d8:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    16dc:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
	}
	ICR1 = pwmPeriod;
    16e0:	86 e8       	ldi	r24, 0x86	; 134
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    16e8:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    16ec:	fc 01       	movw	r30, r24
    16ee:	31 83       	std	Z+1, r19	; 0x01
    16f0:	20 83       	st	Z, r18
	TCCR1B = _BV(WGM13) | clockSelectBits;
    16f2:	81 e8       	ldi	r24, 0x81	; 129
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
    16fa:	20 61       	ori	r18, 0x10	; 16
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18
	Timer1.initialize(10);
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
    1700:	01 e0       	ldi	r16, 0x01	; 1
    1702:	21 e0       	ldi	r18, 0x01	; 1
    1704:	4c e3       	ldi	r20, 0x3C	; 60
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	8f ea       	ldi	r24, 0xAF	; 175
    170a:	93 e0       	ldi	r25, 0x03	; 3
    170c:	0e 94 30 23 	call	0x4660	; 0x4660 <_ZN16Adafruit_SSD13065beginEhhbb>
    1710:	98 2f       	mov	r25, r24
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	89 27       	eor	r24, r25
    1716:	88 23       	and	r24, r24
    1718:	41 f0       	breq	.+16     	; 0x172a <setup+0x20c>
	{ // Address for 128x64
		Serial.println(F("SSD1306 allocation failed"));
    171a:	86 e4       	ldi	r24, 0x46	; 70
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	bc 01       	movw	r22, r24
    1720:	81 ed       	ldi	r24, 0xD1	; 209
    1722:	95 e0       	ldi	r25, 0x05	; 5
    1724:	0e 94 87 5c 	call	0xb90e	; 0xb90e <_ZN5Print7printlnEPK19__FlashStringHelper>
		for(;;); // Don't proceed, loop forever
    1728:	ff cf       	rjmp	.-2      	; 0x1728 <setup+0x20a>
	}
	#pragma endregion Begins
	
	#pragma region PinMode
	pinMode(RedRGB, OUTPUT);
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	8a e2       	ldi	r24, 0x2A	; 42
    172e:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
	pinMode(GreenRGB, OUTPUT);
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	8b e2       	ldi	r24, 0x2B	; 43
    1736:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
	pinMode(BlueRGB, OUTPUT);
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	8c e2       	ldi	r24, 0x2C	; 44
    173e:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
	pinMode(RedLED, OUTPUT);
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	89 e0       	ldi	r24, 0x09	; 9
    1746:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
	pinMode(GreenLED, OUTPUT);
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	87 e0       	ldi	r24, 0x07	; 7
    174e:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
	pinMode(BlueLED, OUTPUT);
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	88 e0       	ldi	r24, 0x08	; 8
    1756:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
	pinMode(trigPin, OUTPUT);
    175a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <trigPin>
    175e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <trigPin+0x1>
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
	pinMode(echoPin, INPUT);
    1768:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <echoPin>
    176c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <echoPin+0x1>
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
	myservo.attach(servopin);
    1776:	6a e0       	ldi	r22, 0x0A	; 10
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	83 e6       	ldi	r24, 0x63	; 99
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	0e 94 e4 4d 	call	0x9bc8	; 0x9bc8 <_ZN5Servo6attachEi>
	#pragma endregion PinMode
	
	display.clearDisplay();
    1782:	8f ea       	ldi	r24, 0xAF	; 175
    1784:	93 e0       	ldi	r25, 0x03	; 3
    1786:	0e 94 80 28 	call	0x5100	; 0x5100 <_ZN16Adafruit_SSD130612clearDisplayEv>
	lcd.clear();
    178a:	8f e7       	ldi	r24, 0x7F	; 127
    178c:	93 e0       	ldi	r25, 0x03	; 3
    178e:	0e 94 55 41 	call	0x82aa	; 0x82aa <_ZN13LiquidCrystal5clearEv>
	
}
    1792:	00 00       	nop
    1794:	2e 96       	adiw	r28, 0x0e	; 14
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	0f 91       	pop	r16
    17a6:	08 95       	ret

000017a8 <loop>:

void loop()
{
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	6f 97       	sbiw	r28, 0x1f	; 31
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
	if (Keycard)
    17c4:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <Keycard>
    17c8:	88 23       	and	r24, r24
    17ca:	09 f4       	brne	.+2      	; 0x17ce <loop+0x26>
    17cc:	62 c0       	rjmp	.+196    	; 0x1892 <loop+0xea>
	{
		unsigned long currentMillis = millis();
    17ce:	0e 94 7c 5e 	call	0xbcf8	; 0xbcf8 <millis>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	ab 83       	std	Y+3, r26	; 0x03
    17dc:	bc 83       	std	Y+4, r27	; 0x04

		DisplayMenu();
    17de:	e8 d0       	rcall	.+464    	; 0x19b0 <_Z11DisplayMenuv>
		char key = keypad.getKey();
    17e0:	8f ee       	ldi	r24, 0xEF	; 239
    17e2:	93 e0       	ldi	r25, 0x03	; 3
    17e4:	0e 94 76 3a 	call	0x74ec	; 0x74ec <_ZN6Keypad6getKeyEv>
    17e8:	8d 83       	std	Y+5, r24	; 0x05
		if (key != NO_KEY){
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	88 23       	and	r24, r24
    17ee:	49 f0       	breq	.+18     	; 0x1802 <loop+0x5a>
			Serial.println(key);
    17f0:	6d 81       	ldd	r22, Y+5	; 0x05
    17f2:	81 ed       	ldi	r24, 0xD1	; 209
    17f4:	95 e0       	ldi	r25, 0x05	; 5
    17f6:	0e 94 a7 5c 	call	0xb94e	; 0xb94e <_ZN5Print7printlnEc>
			Menu(key, &TimeAndDate);
    17fa:	6e e9       	ldi	r22, 0x9E	; 158
    17fc:	73 e0       	ldi	r23, 0x03	; 3
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	29 d1       	rcall	.+594    	; 0x1a54 <_Z4MenucPb>
		}
		
		if (currentMillis - previousMillis >= intervalDate && TimeAndDate )
    1802:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <previousMillis>
    1806:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <previousMillis+0x1>
    180a:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <previousMillis+0x2>
    180e:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <previousMillis+0x3>
    1812:	9c 01       	movw	r18, r24
    1814:	ad 01       	movw	r20, r26
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	ab 81       	ldd	r26, Y+3	; 0x03
    181c:	bc 81       	ldd	r27, Y+4	; 0x04
    181e:	82 1b       	sub	r24, r18
    1820:	93 0b       	sbc	r25, r19
    1822:	a4 0b       	sbc	r26, r20
    1824:	b5 0b       	sbc	r27, r21
    1826:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <intervalDate>
    182a:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <intervalDate+0x1>
    182e:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <intervalDate+0x2>
    1832:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <intervalDate+0x3>
    1836:	82 17       	cp	r24, r18
    1838:	93 07       	cpc	r25, r19
    183a:	a4 07       	cpc	r26, r20
    183c:	b5 07       	cpc	r27, r21
    183e:	08 f1       	brcs	.+66     	; 0x1882 <loop+0xda>
    1840:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <TimeAndDate>
    1844:	88 23       	and	r24, r24
    1846:	e9 f0       	breq	.+58     	; 0x1882 <loop+0xda>
		{
			RTCDateTime dt = GetDateTime();
    1848:	ce 01       	movw	r24, r28
    184a:	0e 96       	adiw	r24, 0x0e	; 14
    184c:	0e 94 c2 57 	call	0xaf84	; 0xaf84 <_Z11GetDateTimev>
			LCDPrintTimeAndDate(dt);
    1850:	ee 84       	ldd	r14, Y+14	; 0x0e
    1852:	ff 84       	ldd	r15, Y+15	; 0x0f
    1854:	08 89       	ldd	r16, Y+16	; 0x10
    1856:	19 89       	ldd	r17, Y+17	; 0x11
    1858:	2a 89       	ldd	r18, Y+18	; 0x12
    185a:	3b 89       	ldd	r19, Y+19	; 0x13
    185c:	4c 89       	ldd	r20, Y+20	; 0x14
    185e:	5d 89       	ldd	r21, Y+21	; 0x15
    1860:	6e 89       	ldd	r22, Y+22	; 0x16
    1862:	7f 89       	ldd	r23, Y+23	; 0x17
    1864:	88 8d       	ldd	r24, Y+24	; 0x18
    1866:	99 8d       	ldd	r25, Y+25	; 0x19
    1868:	5f dc       	rcall	.-1858   	; 0x1128 <_Z19LCDPrintTimeAndDate11RTCDateTime>
			previousMillis = currentMillis;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	9a 81       	ldd	r25, Y+2	; 0x02
    186e:	ab 81       	ldd	r26, Y+3	; 0x03
    1870:	bc 81       	ldd	r27, Y+4	; 0x04
    1872:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <previousMillis>
    1876:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <previousMillis+0x1>
    187a:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <previousMillis+0x2>
		}
		ChangeRGBAnalog();
    187e:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <previousMillis+0x3>
		TjekTempInHous();
    1882:	41 dd       	rcall	.-1406   	; 0x1306 <_Z15ChangeRGBAnalogv>
    1884:	a1 da       	rcall	.-2750   	; 0xdc8 <_Z14TjekTempInHousv>
		unsigned int distance = GetDistance();
    1886:	8b db       	rcall	.-2282   	; 0xf9e <_Z11GetDistancev>
    1888:	9f 83       	std	Y+7, r25	; 0x07
    188a:	8e 83       	std	Y+6, r24	; 0x06
		SetServo(distance);
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	9f 81       	ldd	r25, Y+7	; 0x07
    1890:	14 d5       	rcall	.+2600   	; 0x22ba <_Z8SetServoi>
    1892:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <Keycard>
	}
	if (!Keycard)
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	89 27       	eor	r24, r25
    189a:	88 23       	and	r24, r24
    189c:	a9 f1       	breq	.+106    	; 0x1908 <loop+0x160>
    189e:	83 e5       	ldi	r24, 0x53	; 83
	{
		if ( !mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() )
    18a0:	94 e0       	ldi	r25, 0x04	; 4
    18a2:	0e 94 45 4a 	call	0x948a	; 0x948a <_ZN7MFRC52221PICC_IsNewCardPresentEv>
    18a6:	98 2f       	mov	r25, r24
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	89 27       	eor	r24, r25
    18ac:	88 23       	and	r24, r24
    18ae:	49 f4       	brne	.+18     	; 0x18c2 <loop+0x11a>
    18b0:	83 e5       	ldi	r24, 0x53	; 83
    18b2:	94 e0       	ldi	r25, 0x04	; 4
    18b4:	0e 94 7b 4a 	call	0x94f6	; 0x94f6 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    18b8:	98 2f       	mov	r25, r24
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	89 27       	eor	r24, r25
    18be:	88 23       	and	r24, r24
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <loop+0x11e>
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <loop+0x120>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	88 23       	and	r24, r24
    18ca:	e9 f4       	brne	.+58     	; 0x1906 <loop+0x15e>
		{
			return;
		}
		String UID = ReadUID();
    18cc:	ce 01       	movw	r24, r28
    18ce:	4a 96       	adiw	r24, 0x1a	; 26
    18d0:	1d d4       	rcall	.+2106   	; 0x210c <_Z7ReadUIDv>
    18d2:	9e 01       	movw	r18, r28
		CheckKeyCard(UID, &Keycard);
    18d4:	26 5e       	subi	r18, 0xE6	; 230
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	ce 01       	movw	r24, r28
    18da:	08 96       	adiw	r24, 0x08	; 8
    18dc:	b9 01       	movw	r22, r18
    18de:	0e 94 29 62 	call	0xc452	; 0xc452 <_ZN6StringC1ERKS_>
    18e2:	ce 01       	movw	r24, r28
    18e4:	08 96       	adiw	r24, 0x08	; 8
    18e6:	6d e9       	ldi	r22, 0x9D	; 157
    18e8:	73 e0       	ldi	r23, 0x03	; 3
    18ea:	67 d4       	rcall	.+2254   	; 0x21ba <_Z12CheckKeyCard6StringPb>
    18ec:	ce 01       	movw	r24, r28
    18ee:	08 96       	adiw	r24, 0x08	; 8
    18f0:	0e 94 96 61 	call	0xc32c	; 0xc32c <_ZN6StringD1Ev>
    18f4:	8f ea       	ldi	r24, 0xAF	; 175
		display.clearDisplay();
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0e 94 80 28 	call	0x5100	; 0x5100 <_ZN16Adafruit_SSD130612clearDisplayEv>
    18fc:	ce 01       	movw	r24, r28
	{
		if ( !mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() )
		{
			return;
		}
		String UID = ReadUID();
    18fe:	4a 96       	adiw	r24, 0x1a	; 26
    1900:	0e 94 96 61 	call	0xc32c	; 0xc32c <_ZN6StringD1Ev>
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <loop+0x160>
    1906:	00 00       	nop
	}
	if (!Keycard)
	{
		if ( !mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial() )
		{
			return;
    1908:	6f 96       	adiw	r28, 0x1f	; 31
		}
		String UID = ReadUID();
		CheckKeyCard(UID, &Keycard);
		display.clearDisplay();
	}
}
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	08 95       	ret

00001922 <_ZN12Adafruit_GFX9setCursorEii>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	00 d0       	rcall	.+0      	; 0x1928 <_ZN12Adafruit_GFX9setCursorEii+0x6>
    1928:	00 d0       	rcall	.+0      	; 0x192a <_ZN12Adafruit_GFX9setCursorEii+0x8>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	7c 83       	std	Y+4, r23	; 0x04
    1934:	6b 83       	std	Y+3, r22	; 0x03
    1936:	5e 83       	std	Y+6, r21	; 0x06
    1938:	4d 83       	std	Y+5, r20	; 0x05
    cursor_x = x;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	2b 81       	ldd	r18, Y+3	; 0x03
    1940:	3c 81       	ldd	r19, Y+4	; 0x04
    1942:	fc 01       	movw	r30, r24
    1944:	35 87       	std	Z+13, r19	; 0x0d
    1946:	24 87       	std	Z+12, r18	; 0x0c
    cursor_y = y;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	2d 81       	ldd	r18, Y+5	; 0x05
    194e:	3e 81       	ldd	r19, Y+6	; 0x06
    1950:	fc 01       	movw	r30, r24
    1952:	37 87       	std	Z+15, r19	; 0x0f
    1954:	26 87       	std	Z+14, r18	; 0x0e
  }
    1956:	00 00       	nop
    1958:	26 96       	adiw	r28, 0x06	; 6
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	08 95       	ret

0000196a <_ZN12Adafruit_GFX12setTextColorEj>:
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	00 d0       	rcall	.+0      	; 0x1970 <_ZN12Adafruit_GFX12setTextColorEj+0x6>
    1970:	1f 92       	push	r1
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	7c 83       	std	Y+4, r23	; 0x04
    197c:	6b 83       	std	Y+3, r22	; 0x03
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	fc 01       	movw	r30, r24
    1988:	33 8b       	std	Z+19, r19	; 0x13
    198a:	22 8b       	std	Z+18, r18	; 0x12
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	fc 01       	movw	r30, r24
    1992:	22 89       	ldd	r18, Z+18	; 0x12
    1994:	33 89       	ldd	r19, Z+19	; 0x13
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	fc 01       	movw	r30, r24
    199c:	31 8b       	std	Z+17, r19	; 0x11
    199e:	20 8b       	std	Z+16, r18	; 0x10
    19a0:	00 00       	nop
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <_Z11DisplayMenuv>:
byte colPins[cols] = {36, 37, 38, 39}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );


void DisplayMenu()
{
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	display.clearDisplay();
    19b8:	8f ea       	ldi	r24, 0xAF	; 175
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	0e 94 80 28 	call	0x5100	; 0x5100 <_ZN16Adafruit_SSD130612clearDisplayEv>

	display.setTextSize(1); // Normal 1:1 pixel scale
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	8f ea       	ldi	r24, 0xAF	; 175
    19c4:	93 e0       	ldi	r25, 0x03	; 3
    19c6:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <_ZN12Adafruit_GFX11setTextSizeEh>
	display.setTextColor(WHITE); // Draw white text
    19ca:	61 e0       	ldi	r22, 0x01	; 1
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	8f ea       	ldi	r24, 0xAF	; 175
    19d0:	93 e0       	ldi	r25, 0x03	; 3
    19d2:	cb df       	rcall	.-106    	; 0x196a <_ZN12Adafruit_GFX12setTextColorEj>
	display.setCursor(0,0);
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	8f ea       	ldi	r24, 0xAF	; 175
    19de:	93 e0       	ldi	r25, 0x03	; 3
    19e0:	a0 df       	rcall	.-192    	; 0x1922 <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("Menu"));
    19e2:	80 e6       	ldi	r24, 0x60	; 96
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	bc 01       	movw	r22, r24
    19e8:	8f ea       	ldi	r24, 0xAF	; 175
    19ea:	93 e0       	ldi	r25, 0x03	; 3
    19ec:	0e 94 87 5c 	call	0xb90e	; 0xb90e <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,10);
    19f0:	4a e0       	ldi	r20, 0x0A	; 10
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	8f ea       	ldi	r24, 0xAF	; 175
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	92 df       	rcall	.-220    	; 0x1922 <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("A: Time and Date"));
    19fe:	85 e6       	ldi	r24, 0x65	; 101
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	bc 01       	movw	r22, r24
    1a04:	8f ea       	ldi	r24, 0xAF	; 175
    1a06:	93 e0       	ldi	r25, 0x03	; 3
    1a08:	0e 94 87 5c 	call	0xb90e	; 0xb90e <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,20);
    1a0c:	44 e1       	ldi	r20, 0x14	; 20
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	8f ea       	ldi	r24, 0xAF	; 175
    1a16:	93 e0       	ldi	r25, 0x03	; 3
    1a18:	84 df       	rcall	.-248    	; 0x1922 <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("B: Tempreture"));
    1a1a:	86 e7       	ldi	r24, 0x76	; 118
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	bc 01       	movw	r22, r24
    1a20:	8f ea       	ldi	r24, 0xAF	; 175
    1a22:	93 e0       	ldi	r25, 0x03	; 3
    1a24:	0e 94 87 5c 	call	0xb90e	; 0xb90e <_ZN5Print7printlnEPK19__FlashStringHelper>
	display.setCursor(0,30);
    1a28:	4e e1       	ldi	r20, 0x1E	; 30
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	8f ea       	ldi	r24, 0xAF	; 175
    1a32:	93 e0       	ldi	r25, 0x03	; 3
    1a34:	76 df       	rcall	.-276    	; 0x1922 <_ZN12Adafruit_GFX9setCursorEii>
	display.println(F("C: Humidity"));
    1a36:	84 e8       	ldi	r24, 0x84	; 132
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	8f ea       	ldi	r24, 0xAF	; 175
    1a3e:	93 e0       	ldi	r25, 0x03	; 3
    1a40:	0e 94 87 5c 	call	0xb90e	; 0xb90e <_ZN5Print7printlnEPK19__FlashStringHelper>

	display.display();
    1a44:	8f ea       	ldi	r24, 0xAF	; 175
    1a46:	93 e0       	ldi	r25, 0x03	; 3
    1a48:	0e 94 de 2c 	call	0x59bc	; 0x59bc <_ZN16Adafruit_SSD13067displayEv>
}
    1a4c:	00 00       	nop
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	08 95       	ret

00001a54 <_Z4MenucPb>:

void Menu(char key, bool *TimeAndDate)
{
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	2b 97       	sbiw	r28, 0x0b	; 11
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	89 87       	std	Y+9, r24	; 0x09
    1a6a:	7b 87       	std	Y+11, r23	; 0x0b
    1a6c:	6a 87       	std	Y+10, r22	; 0x0a
	
	switch (key)
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	82 34       	cpi	r24, 0x42	; 66
    1a76:	91 05       	cpc	r25, r1
    1a78:	01 f1       	breq	.+64     	; 0x1aba <_Z4MenucPb+0x66>
    1a7a:	83 34       	cpi	r24, 0x43	; 67
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	b1 f1       	breq	.+108    	; 0x1aec <_Z4MenucPb+0x98>
    1a80:	81 34       	cpi	r24, 0x41	; 65
    1a82:	91 05       	cpc	r25, r1
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <_Z4MenucPb+0x34>
			LCDPrintHumidity(humid);
			*TimeAndDate = false;
		}
		break;
		default:
		break;
    1a86:	4b c0       	rjmp	.+150    	; 0x1b1e <_Z4MenucPb+0xca>
{
	
	switch (key)
	{
		case 'A':
		Serial.println("Du valgte: A");
    1a88:	66 e4       	ldi	r22, 0x46	; 70
    1a8a:	72 e0       	ldi	r23, 0x02	; 2
    1a8c:	81 ed       	ldi	r24, 0xD1	; 209
    1a8e:	95 e0       	ldi	r25, 0x05	; 5
    1a90:	0e 94 97 5c 	call	0xb92e	; 0xb92e <_ZN5Print7printlnEPKc>
		{
			*TimeAndDate = true;
    1a94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a98:	21 e0       	ldi	r18, 0x01	; 1
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	20 83       	st	Z, r18
			Serial.println(*TimeAndDate);
    1a9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aa0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	80 81       	ld	r24, Z
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	4a e0       	ldi	r20, 0x0A	; 10
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	bc 01       	movw	r22, r24
    1ab0:	81 ed       	ldi	r24, 0xD1	; 209
    1ab2:	95 e0       	ldi	r25, 0x05	; 5
    1ab4:	0e 94 5a 5d 	call	0xbab4	; 0xbab4 <_ZN5Print7printlnEii>
		}
		break;
    1ab8:	32 c0       	rjmp	.+100    	; 0x1b1e <_Z4MenucPb+0xca>
		case 'B':
		{
			Serial.println("Du valgte: C");
    1aba:	63 e5       	ldi	r22, 0x53	; 83
    1abc:	72 e0       	ldi	r23, 0x02	; 2
    1abe:	81 ed       	ldi	r24, 0xD1	; 209
    1ac0:	95 e0       	ldi	r25, 0x05	; 5
    1ac2:	0e 94 97 5c 	call	0xb92e	; 0xb92e <_ZN5Print7printlnEPKc>
			float temp = GetTemp();
    1ac6:	6f d9       	rcall	.-3362   	; 0xda6 <_Z7GetTempv>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	ab 83       	std	Y+3, r26	; 0x03
    1ad2:	bc 83       	std	Y+4, r27	; 0x04
			LCDPrintTemp(temp);
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	ab 81       	ldd	r26, Y+3	; 0x03
    1ada:	bc 81       	ldd	r27, Y+4	; 0x04
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	c5 da       	rcall	.-2678   	; 0x106c <_Z12LCDPrintTempf>
			*TimeAndDate = false;
    1ae2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	10 82       	st	Z, r1
		}
		break;
    1aea:	19 c0       	rjmp	.+50     	; 0x1b1e <_Z4MenucPb+0xca>
		case 'C':
		{
			Serial.println("Du valgte: D");
    1aec:	60 e6       	ldi	r22, 0x60	; 96
    1aee:	72 e0       	ldi	r23, 0x02	; 2
    1af0:	81 ed       	ldi	r24, 0xD1	; 209
    1af2:	95 e0       	ldi	r25, 0x05	; 5
    1af4:	0e 94 97 5c 	call	0xb92e	; 0xb92e <_ZN5Print7printlnEPKc>
			float humid = GetHumid();
    1af8:	46 d9       	rcall	.-3444   	; 0xd86 <_Z8GetHumidv>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	af 83       	std	Y+7, r26	; 0x07
    1b04:	b8 87       	std	Y+8, r27	; 0x08
			LCDPrintHumidity(humid);
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	af 81       	ldd	r26, Y+7	; 0x07
    1b0c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	da da       	rcall	.-2636   	; 0x10c8 <_Z16LCDPrintHumidityf>
			*TimeAndDate = false;
    1b14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b18:	fc 01       	movw	r30, r24
    1b1a:	10 82       	st	Z, r1
		}
		break;
    1b1c:	00 00       	nop
		default:
		break;
	}
}
    1b1e:	00 00       	nop
    1b20:	2b 96       	adiw	r28, 0x0b	; 11
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	08 95       	ret

00001b32 <_Z41__static_initialization_and_destruction_0ii>:
    1b32:	8f 92       	push	r8
    1b34:	9f 92       	push	r9
    1b36:	af 92       	push	r10
    1b38:	bf 92       	push	r11
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	0f 93       	push	r16
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <_Z41__static_initialization_and_destruction_0ii+0x18>
    1b4a:	1f 92       	push	r1
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	7c 83       	std	Y+4, r23	; 0x04
    1b56:	6b 83       	std	Y+3, r22	; 0x03
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	69 f5       	brne	.+90     	; 0x1bba <_Z41__static_initialization_and_destruction_0ii+0x88>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	49 f5       	brne	.+82     	; 0x1bba <_Z41__static_initialization_and_destruction_0ii+0x88>
#include "Menu.h"

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1b68:	0f 2e       	mov	r0, r31
    1b6a:	f0 ea       	ldi	r31, 0xA0	; 160
    1b6c:	8f 2e       	mov	r8, r31
    1b6e:	f6 e8       	ldi	r31, 0x86	; 134
    1b70:	9f 2e       	mov	r9, r31
    1b72:	aa 24       	eor	r10, r10
    1b74:	a3 94       	inc	r10
    1b76:	b1 2c       	mov	r11, r1
    1b78:	f0 2d       	mov	r31, r0
    1b7a:	0f 2e       	mov	r0, r31
    1b7c:	f0 e8       	ldi	r31, 0x80	; 128
    1b7e:	cf 2e       	mov	r12, r31
    1b80:	fa e1       	ldi	r31, 0x1A	; 26
    1b82:	df 2e       	mov	r13, r31
    1b84:	f6 e0       	ldi	r31, 0x06	; 6
    1b86:	ef 2e       	mov	r14, r31
    1b88:	f1 2c       	mov	r15, r1
    1b8a:	f0 2d       	mov	r31, r0
    1b8c:	04 e0       	ldi	r16, 0x04	; 4
    1b8e:	25 ec       	ldi	r18, 0xC5	; 197
    1b90:	35 e0       	ldi	r19, 0x05	; 5
    1b92:	40 e4       	ldi	r20, 0x40	; 64
    1b94:	60 e8       	ldi	r22, 0x80	; 128
    1b96:	8f ea       	ldi	r24, 0xAF	; 175
    1b98:	93 e0       	ldi	r25, 0x03	; 3
    1b9a:	0e 94 40 20 	call	0x4080	; 0x4080 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
	{'7','8','9','C'},
	{'*','0','#','D'}
};
byte rowPins[rows] = {32, 33, 34, 35}; //connect to the row pinouts of the keypad
byte colPins[cols] = {36, 37, 38, 39}; //connect to the column pinouts of the keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, rows, cols );
    1b9e:	68 94       	set
    1ba0:	ee 24       	eor	r14, r14
    1ba2:	e2 f8       	bld	r14, 2
    1ba4:	04 e0       	ldi	r16, 0x04	; 4
    1ba6:	26 e3       	ldi	r18, 0x36	; 54
    1ba8:	32 e0       	ldi	r19, 0x02	; 2
    1baa:	42 e3       	ldi	r20, 0x32	; 50
    1bac:	52 e0       	ldi	r21, 0x02	; 2
    1bae:	62 e2       	ldi	r22, 0x22	; 34
    1bb0:	72 e0       	ldi	r23, 0x02	; 2
    1bb2:	8f ee       	ldi	r24, 0xEF	; 239
    1bb4:	93 e0       	ldi	r25, 0x03	; 3
    1bb6:	0e 94 d2 39 	call	0x73a4	; 0x73a4 <_ZN6KeypadC1EPcPhS1_hh>
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	89 2b       	or	r24, r25
    1bc0:	41 f4       	brne	.+16     	; 0x1bd2 <_Z41__static_initialization_and_destruction_0ii+0xa0>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	21 f4       	brne	.+8      	; 0x1bd2 <_Z41__static_initialization_and_destruction_0ii+0xa0>
#include "Menu.h"

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1bca:	8f ea       	ldi	r24, 0xAF	; 175
    1bcc:	93 e0       	ldi	r25, 0x03	; 3
    1bce:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <_ZN16Adafruit_SSD1306D1Ev>
		}
		break;
		default:
		break;
	}
}
    1bd2:	00 00       	nop
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	0f 91       	pop	r16
    1be2:	ff 90       	pop	r15
    1be4:	ef 90       	pop	r14
    1be6:	df 90       	pop	r13
    1be8:	cf 90       	pop	r12
    1bea:	bf 90       	pop	r11
    1bec:	af 90       	pop	r10
    1bee:	9f 90       	pop	r9
    1bf0:	8f 90       	pop	r8
    1bf2:	08 95       	ret

00001bf4 <_GLOBAL__sub_I_display>:
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	6f ef       	ldi	r22, 0xFF	; 255
    1bfe:	7f ef       	ldi	r23, 0xFF	; 255
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	96 df       	rcall	.-212    	; 0x1b32 <_Z41__static_initialization_and_destruction_0ii>
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	08 95       	ret

00001c0c <_GLOBAL__sub_D_display>:
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	6f ef       	ldi	r22, 0xFF	; 255
    1c16:	7f ef       	ldi	r23, 0xFF	; 255
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	8a df       	rcall	.-236    	; 0x1b32 <_Z41__static_initialization_and_destruction_0ii>
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret

00001c24 <_Z11TempTooColdv>:

int moter = 12;


void TempTooCold()
{
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	2c 97       	sbiw	r28, 0x0c	; 12
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
	Timer1.pwm(moter, (1023 / 100) * 0);
    1c38:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <moter>
    1c3c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <moter+0x1>
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	1b 82       	std	Y+3, r1	; 0x03
    1c44:	1a 82       	std	Y+2, r1	; 0x02
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	8b 30       	cpi	r24, 0x0B	; 11
    1c4a:	71 f4       	brne	.+28     	; 0x1c68 <_Z11TempTooColdv+0x44>
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	8b e0       	ldi	r24, 0x0B	; 11
    1c50:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    1c54:	80 e8       	ldi	r24, 0x80	; 128
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	20 e8       	ldi	r18, 0x80	; 128
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	f9 01       	movw	r30, r18
    1c5e:	20 81       	ld	r18, Z
    1c60:	20 68       	ori	r18, 0x80	; 128
    1c62:	fc 01       	movw	r30, r24
    1c64:	20 83       	st	Z, r18
    1c66:	21 c0       	rjmp	.+66     	; 0x1caa <_Z11TempTooColdv+0x86>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	8c 30       	cpi	r24, 0x0C	; 12
    1c6c:	71 f4       	brne	.+28     	; 0x1c8a <_Z11TempTooColdv+0x66>
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	8c e0       	ldi	r24, 0x0C	; 12
    1c72:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    1c76:	80 e8       	ldi	r24, 0x80	; 128
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	20 e8       	ldi	r18, 0x80	; 128
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	f9 01       	movw	r30, r18
    1c80:	20 81       	ld	r18, Z
    1c82:	20 62       	ori	r18, 0x20	; 32
    1c84:	fc 01       	movw	r30, r24
    1c86:	20 83       	st	Z, r18
    1c88:	10 c0       	rjmp	.+32     	; 0x1caa <_Z11TempTooColdv+0x86>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	8d 30       	cpi	r24, 0x0D	; 13
    1c8e:	69 f4       	brne	.+26     	; 0x1caa <_Z11TempTooColdv+0x86>
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	8d e0       	ldi	r24, 0x0D	; 13
    1c94:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    1c98:	80 e8       	ldi	r24, 0x80	; 128
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	20 e8       	ldi	r18, 0x80	; 128
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	f9 01       	movw	r30, r18
    1ca2:	20 81       	ld	r18, Z
    1ca4:	28 60       	ori	r18, 0x08	; 8
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	20 83       	st	Z, r18
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	94 e0       	ldi	r25, 0x04	; 4
    1cae:	9d 83       	std	Y+5, r25	; 0x05
    1cb0:	8c 83       	std	Y+4, r24	; 0x04
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	8e 83       	std	Y+6, r24	; 0x06
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cba:	98 87       	std	Y+8, r25	; 0x08
    1cbc:	8f 83       	std	Y+7, r24	; 0x07

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    1cbe:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    1cc2:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    1cc6:	cc 01       	movw	r24, r24
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	89 87       	std	Y+9, r24	; 0x09
    1cce:	9a 87       	std	Y+10, r25	; 0x0a
    1cd0:	ab 87       	std	Y+11, r26	; 0x0b
    1cd2:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle *= duty;
    1cd4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd6:	98 85       	ldd	r25, Y+8	; 0x08
    1cd8:	cc 01       	movw	r24, r24
    1cda:	a0 e0       	ldi	r26, 0x00	; 0
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	29 85       	ldd	r18, Y+9	; 0x09
    1ce0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ce2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ce4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 07 63 	call	0xc60e	; 0xc60e <__mulsi3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	89 87       	std	Y+9, r24	; 0x09
    1cf4:	9a 87       	std	Y+10, r25	; 0x0a
    1cf6:	ab 87       	std	Y+11, r26	; 0x0b
    1cf8:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle >>= 10;
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d00:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d02:	07 2e       	mov	r0, r23
    1d04:	7a e0       	ldi	r23, 0x0A	; 10
    1d06:	b6 95       	lsr	r27
    1d08:	a7 95       	ror	r26
    1d0a:	97 95       	ror	r25
    1d0c:	87 95       	ror	r24
    1d0e:	7a 95       	dec	r23
    1d10:	d1 f7       	brne	.-12     	; 0x1d06 <_Z11TempTooColdv+0xe2>
    1d12:	70 2d       	mov	r23, r0
    1d14:	89 87       	std	Y+9, r24	; 0x09
    1d16:	9a 87       	std	Y+10, r25	; 0x0a
    1d18:	ab 87       	std	Y+11, r26	; 0x0b
    1d1a:	bc 87       	std	Y+12, r27	; 0x0c
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    1d1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1e:	8b 30       	cpi	r24, 0x0B	; 11
    1d20:	41 f4       	brne	.+16     	; 0x1d32 <_Z11TempTooColdv+0x10e>
    1d22:	88 e8       	ldi	r24, 0x88	; 136
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	29 85       	ldd	r18, Y+9	; 0x09
    1d28:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	31 83       	std	Z+1, r19	; 0x01
    1d2e:	20 83       	st	Z, r18
    1d30:	15 c0       	rjmp	.+42     	; 0x1d5c <_Z11TempTooColdv+0x138>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    1d32:	8e 81       	ldd	r24, Y+6	; 0x06
    1d34:	8c 30       	cpi	r24, 0x0C	; 12
    1d36:	41 f4       	brne	.+16     	; 0x1d48 <_Z11TempTooColdv+0x124>
    1d38:	8a e8       	ldi	r24, 0x8A	; 138
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	29 85       	ldd	r18, Y+9	; 0x09
    1d3e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d40:	fc 01       	movw	r30, r24
    1d42:	31 83       	std	Z+1, r19	; 0x01
    1d44:	20 83       	st	Z, r18
    1d46:	0a c0       	rjmp	.+20     	; 0x1d5c <_Z11TempTooColdv+0x138>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    1d48:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4a:	8d 30       	cpi	r24, 0x0D	; 13
    1d4c:	39 f4       	brne	.+14     	; 0x1d5c <_Z11TempTooColdv+0x138>
    1d4e:	8c e8       	ldi	r24, 0x8C	; 140
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	29 85       	ldd	r18, Y+9	; 0x09
    1d54:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d56:	fc 01       	movw	r30, r24
    1d58:	31 83       	std	Z+1, r19	; 0x01
    1d5a:	20 83       	st	Z, r18
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1d5c:	81 e8       	ldi	r24, 0x81	; 129
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
    1d64:	20 61       	ori	r18, 0x10	; 16
    1d66:	fc 01       	movw	r30, r24
    1d68:	20 83       	st	Z, r18
	return;
    1d6a:	00 00       	nop
}
    1d6c:	2c 96       	adiw	r28, 0x0c	; 12
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	08 95       	ret

00001d7e <_Z10TempTooHotv>:

void TempTooHot()
{
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	2c 97       	sbiw	r28, 0x0c	; 12
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
	Timer1.pwm(moter, (1023 / 100) * 100);
    1d92:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <moter>
    1d96:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <moter+0x1>
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	88 ee       	ldi	r24, 0xE8	; 232
    1d9e:	93 e0       	ldi	r25, 0x03	; 3
    1da0:	9b 83       	std	Y+3, r25	; 0x03
    1da2:	8a 83       	std	Y+2, r24	; 0x02
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	8b 30       	cpi	r24, 0x0B	; 11
    1da8:	71 f4       	brne	.+28     	; 0x1dc6 <_Z10TempTooHotv+0x48>
    1daa:	61 e0       	ldi	r22, 0x01	; 1
    1dac:	8b e0       	ldi	r24, 0x0B	; 11
    1dae:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    1db2:	80 e8       	ldi	r24, 0x80	; 128
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	20 e8       	ldi	r18, 0x80	; 128
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	f9 01       	movw	r30, r18
    1dbc:	20 81       	ld	r18, Z
    1dbe:	20 68       	ori	r18, 0x80	; 128
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	20 83       	st	Z, r18
    1dc4:	21 c0       	rjmp	.+66     	; 0x1e08 <_Z10TempTooHotv+0x8a>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	8c 30       	cpi	r24, 0x0C	; 12
    1dca:	71 f4       	brne	.+28     	; 0x1de8 <_Z10TempTooHotv+0x6a>
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	8c e0       	ldi	r24, 0x0C	; 12
    1dd0:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    1dd4:	80 e8       	ldi	r24, 0x80	; 128
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	20 e8       	ldi	r18, 0x80	; 128
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	f9 01       	movw	r30, r18
    1dde:	20 81       	ld	r18, Z
    1de0:	20 62       	ori	r18, 0x20	; 32
    1de2:	fc 01       	movw	r30, r24
    1de4:	20 83       	st	Z, r18
    1de6:	10 c0       	rjmp	.+32     	; 0x1e08 <_Z10TempTooHotv+0x8a>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	8d 30       	cpi	r24, 0x0D	; 13
    1dec:	69 f4       	brne	.+26     	; 0x1e08 <_Z10TempTooHotv+0x8a>
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	8d e0       	ldi	r24, 0x0D	; 13
    1df2:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    1df6:	80 e8       	ldi	r24, 0x80	; 128
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	20 e8       	ldi	r18, 0x80	; 128
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	f9 01       	movw	r30, r18
    1e00:	20 81       	ld	r18, Z
    1e02:	28 60       	ori	r18, 0x08	; 8
    1e04:	fc 01       	movw	r30, r24
    1e06:	20 83       	st	Z, r18
    1e08:	8f ef       	ldi	r24, 0xFF	; 255
    1e0a:	94 e0       	ldi	r25, 0x04	; 4
    1e0c:	9d 83       	std	Y+5, r25	; 0x05
    1e0e:	8c 83       	std	Y+4, r24	; 0x04
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	8e 83       	std	Y+6, r24	; 0x06
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	9b 81       	ldd	r25, Y+3	; 0x03
    1e18:	98 87       	std	Y+8, r25	; 0x08
    1e1a:	8f 83       	std	Y+7, r24	; 0x07

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    1e1c:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    1e20:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    1e24:	cc 01       	movw	r24, r24
    1e26:	a0 e0       	ldi	r26, 0x00	; 0
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	89 87       	std	Y+9, r24	; 0x09
    1e2c:	9a 87       	std	Y+10, r25	; 0x0a
    1e2e:	ab 87       	std	Y+11, r26	; 0x0b
    1e30:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle *= duty;
    1e32:	8f 81       	ldd	r24, Y+7	; 0x07
    1e34:	98 85       	ldd	r25, Y+8	; 0x08
    1e36:	cc 01       	movw	r24, r24
    1e38:	a0 e0       	ldi	r26, 0x00	; 0
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	29 85       	ldd	r18, Y+9	; 0x09
    1e3e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e40:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e42:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 07 63 	call	0xc60e	; 0xc60e <__mulsi3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	89 87       	std	Y+9, r24	; 0x09
    1e52:	9a 87       	std	Y+10, r25	; 0x0a
    1e54:	ab 87       	std	Y+11, r26	; 0x0b
    1e56:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle >>= 10;
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1e5e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1e60:	07 2e       	mov	r0, r23
    1e62:	7a e0       	ldi	r23, 0x0A	; 10
    1e64:	b6 95       	lsr	r27
    1e66:	a7 95       	ror	r26
    1e68:	97 95       	ror	r25
    1e6a:	87 95       	ror	r24
    1e6c:	7a 95       	dec	r23
    1e6e:	d1 f7       	brne	.-12     	; 0x1e64 <_Z10TempTooHotv+0xe6>
    1e70:	70 2d       	mov	r23, r0
    1e72:	89 87       	std	Y+9, r24	; 0x09
    1e74:	9a 87       	std	Y+10, r25	; 0x0a
    1e76:	ab 87       	std	Y+11, r26	; 0x0b
    1e78:	bc 87       	std	Y+12, r27	; 0x0c
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    1e7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7c:	8b 30       	cpi	r24, 0x0B	; 11
    1e7e:	41 f4       	brne	.+16     	; 0x1e90 <_Z10TempTooHotv+0x112>
    1e80:	88 e8       	ldi	r24, 0x88	; 136
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	29 85       	ldd	r18, Y+9	; 0x09
    1e86:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e88:	fc 01       	movw	r30, r24
    1e8a:	31 83       	std	Z+1, r19	; 0x01
    1e8c:	20 83       	st	Z, r18
    1e8e:	15 c0       	rjmp	.+42     	; 0x1eba <_Z10TempTooHotv+0x13c>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    1e90:	8e 81       	ldd	r24, Y+6	; 0x06
    1e92:	8c 30       	cpi	r24, 0x0C	; 12
    1e94:	41 f4       	brne	.+16     	; 0x1ea6 <_Z10TempTooHotv+0x128>
    1e96:	8a e8       	ldi	r24, 0x8A	; 138
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	29 85       	ldd	r18, Y+9	; 0x09
    1e9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	31 83       	std	Z+1, r19	; 0x01
    1ea2:	20 83       	st	Z, r18
    1ea4:	0a c0       	rjmp	.+20     	; 0x1eba <_Z10TempTooHotv+0x13c>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    1ea6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea8:	8d 30       	cpi	r24, 0x0D	; 13
    1eaa:	39 f4       	brne	.+14     	; 0x1eba <_Z10TempTooHotv+0x13c>
    1eac:	8c e8       	ldi	r24, 0x8C	; 140
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	29 85       	ldd	r18, Y+9	; 0x09
    1eb2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	31 83       	std	Z+1, r19	; 0x01
    1eb8:	20 83       	st	Z, r18
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    1eba:	81 e8       	ldi	r24, 0x81	; 129
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
    1ec2:	20 61       	ori	r18, 0x10	; 16
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	20 83       	st	Z, r18
	return;
    1ec8:	00 00       	nop
}
    1eca:	2c 96       	adiw	r28, 0x0c	; 12
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	08 95       	ret

00001edc <_Z11TempPerfektv>:

void TempPerfekt()
{
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	2c 97       	sbiw	r28, 0x0c	; 12
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
	Timer1.pwm(moter, (1023 / 100) * 50);
    1ef0:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <moter>
    1ef4:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <moter+0x1>
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	84 ef       	ldi	r24, 0xF4	; 244
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	9b 83       	std	Y+3, r25	; 0x03
    1f00:	8a 83       	std	Y+2, r24	; 0x02
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	8b 30       	cpi	r24, 0x0B	; 11
    1f06:	71 f4       	brne	.+28     	; 0x1f24 <_Z11TempPerfektv+0x48>
    1f08:	61 e0       	ldi	r22, 0x01	; 1
    1f0a:	8b e0       	ldi	r24, 0x0B	; 11
    1f0c:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    1f10:	80 e8       	ldi	r24, 0x80	; 128
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	20 e8       	ldi	r18, 0x80	; 128
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	f9 01       	movw	r30, r18
    1f1a:	20 81       	ld	r18, Z
    1f1c:	20 68       	ori	r18, 0x80	; 128
    1f1e:	fc 01       	movw	r30, r24
    1f20:	20 83       	st	Z, r18
    1f22:	21 c0       	rjmp	.+66     	; 0x1f66 <_Z11TempPerfektv+0x8a>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) { pinMode(TIMER1_B_PIN, OUTPUT); TCCR1A |= _BV(COM1B1); }
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	8c 30       	cpi	r24, 0x0C	; 12
    1f28:	71 f4       	brne	.+28     	; 0x1f46 <_Z11TempPerfektv+0x6a>
    1f2a:	61 e0       	ldi	r22, 0x01	; 1
    1f2c:	8c e0       	ldi	r24, 0x0C	; 12
    1f2e:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    1f32:	80 e8       	ldi	r24, 0x80	; 128
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	20 e8       	ldi	r18, 0x80	; 128
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	20 81       	ld	r18, Z
    1f3e:	20 62       	ori	r18, 0x20	; 32
    1f40:	fc 01       	movw	r30, r24
    1f42:	20 83       	st	Z, r18
    1f44:	10 c0       	rjmp	.+32     	; 0x1f66 <_Z11TempPerfektv+0x8a>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	8d 30       	cpi	r24, 0x0D	; 13
    1f4a:	69 f4       	brne	.+26     	; 0x1f66 <_Z11TempPerfektv+0x8a>
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	8d e0       	ldi	r24, 0x0D	; 13
    1f50:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    1f54:	80 e8       	ldi	r24, 0x80	; 128
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	20 e8       	ldi	r18, 0x80	; 128
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	f9 01       	movw	r30, r18
    1f5e:	20 81       	ld	r18, Z
    1f60:	28 60       	ori	r18, 0x08	; 8
    1f62:	fc 01       	movw	r30, r24
    1f64:	20 83       	st	Z, r18
    1f66:	8f ef       	ldi	r24, 0xFF	; 255
    1f68:	94 e0       	ldi	r25, 0x04	; 4
    1f6a:	9d 83       	std	Y+5, r25	; 0x05
    1f6c:	8c 83       	std	Y+4, r24	; 0x04
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	8e 83       	std	Y+6, r24	; 0x06
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	8f 83       	std	Y+7, r24	; 0x07

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
    1f7a:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZN8TimerOne9pwmPeriodE>
    1f7e:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <_ZN8TimerOne9pwmPeriodE+0x1>
    1f82:	cc 01       	movw	r24, r24
    1f84:	a0 e0       	ldi	r26, 0x00	; 0
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	89 87       	std	Y+9, r24	; 0x09
    1f8a:	9a 87       	std	Y+10, r25	; 0x0a
    1f8c:	ab 87       	std	Y+11, r26	; 0x0b
    1f8e:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle *= duty;
    1f90:	8f 81       	ldd	r24, Y+7	; 0x07
    1f92:	98 85       	ldd	r25, Y+8	; 0x08
    1f94:	cc 01       	movw	r24, r24
    1f96:	a0 e0       	ldi	r26, 0x00	; 0
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	29 85       	ldd	r18, Y+9	; 0x09
    1f9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f9e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fa0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 07 63 	call	0xc60e	; 0xc60e <__mulsi3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	89 87       	std	Y+9, r24	; 0x09
    1fb0:	9a 87       	std	Y+10, r25	; 0x0a
    1fb2:	ab 87       	std	Y+11, r26	; 0x0b
    1fb4:	bc 87       	std	Y+12, r27	; 0x0c
	dutyCycle >>= 10;
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fbc:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fbe:	07 2e       	mov	r0, r23
    1fc0:	7a e0       	ldi	r23, 0x0A	; 10
    1fc2:	b6 95       	lsr	r27
    1fc4:	a7 95       	ror	r26
    1fc6:	97 95       	ror	r25
    1fc8:	87 95       	ror	r24
    1fca:	7a 95       	dec	r23
    1fcc:	d1 f7       	brne	.-12     	; 0x1fc2 <_Z11TempPerfektv+0xe6>
    1fce:	70 2d       	mov	r23, r0
    1fd0:	89 87       	std	Y+9, r24	; 0x09
    1fd2:	9a 87       	std	Y+10, r25	; 0x0a
    1fd4:	ab 87       	std	Y+11, r26	; 0x0b
    1fd6:	bc 87       	std	Y+12, r27	; 0x0c
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
    1fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fda:	8b 30       	cpi	r24, 0x0B	; 11
    1fdc:	41 f4       	brne	.+16     	; 0x1fee <_Z11TempPerfektv+0x112>
    1fde:	88 e8       	ldi	r24, 0x88	; 136
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	29 85       	ldd	r18, Y+9	; 0x09
    1fe4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	31 83       	std	Z+1, r19	; 0x01
    1fea:	20 83       	st	Z, r18
    1fec:	15 c0       	rjmp	.+42     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
	#ifdef TIMER1_B_PIN
	else if (pin == TIMER1_B_PIN) OCR1B = dutyCycle;
    1fee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff0:	8c 30       	cpi	r24, 0x0C	; 12
    1ff2:	41 f4       	brne	.+16     	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    1ff4:	8a e8       	ldi	r24, 0x8A	; 138
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	29 85       	ldd	r18, Y+9	; 0x09
    1ffa:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	31 83       	std	Z+1, r19	; 0x01
    2000:	20 83       	st	Z, r18
    2002:	0a c0       	rjmp	.+20     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
    2004:	8e 81       	ldd	r24, Y+6	; 0x06
    2006:	8d 30       	cpi	r24, 0x0D	; 13
    2008:	39 f4       	brne	.+14     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    200a:	8c e8       	ldi	r24, 0x8C	; 140
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	29 85       	ldd	r18, Y+9	; 0x09
    2010:	3a 85       	ldd	r19, Y+10	; 0x0a
    2012:	fc 01       	movw	r30, r24
    2014:	31 83       	std	Z+1, r19	; 0x01
    2016:	20 83       	st	Z, r18
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
    2018:	81 e8       	ldi	r24, 0x81	; 129
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <_ZN8TimerOne15clockSelectBitsE>
    2020:	20 61       	ori	r18, 0x10	; 16
    2022:	fc 01       	movw	r30, r24
    2024:	20 83       	st	Z, r18
	return;
    2026:	00 00       	nop
    2028:	2c 96       	adiw	r28, 0x0c	; 12
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <_ZN6StringpLERKS_>:
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	00 d0       	rcall	.+0      	; 0x2040 <_ZN6StringpLERKS_+0x6>
    2040:	1f 92       	push	r1
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	7c 83       	std	Y+4, r23	; 0x04
    204c:	6b 83       	std	Y+3, r22	; 0x03
    204e:	2b 81       	ldd	r18, Y+3	; 0x03
    2050:	3c 81       	ldd	r19, Y+4	; 0x04
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	b9 01       	movw	r22, r18
    2058:	0e 94 9d 62 	call	0xc53a	; 0xc53a <_ZN6String6concatERKS_>
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <_ZN6StringpLEPKc>:
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	00 d0       	rcall	.+0      	; 0x2074 <_ZN6StringpLEPKc+0x6>
    2074:	1f 92       	push	r1
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	7c 83       	std	Y+4, r23	; 0x04
    2080:	6b 83       	std	Y+3, r22	; 0x03
    2082:	2b 81       	ldd	r18, Y+3	; 0x03
    2084:	3c 81       	ldd	r19, Y+4	; 0x04
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	9a 81       	ldd	r25, Y+2	; 0x02
    208a:	b9 01       	movw	r22, r18
    208c:	0e 94 a3 62 	call	0xc546	; 0xc546 <_ZN6String6concatEPKc>
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	08 95       	ret

000020a2 <_ZNK6StringeqERKS_>:
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <_ZNK6StringeqERKS_+0x6>
    20a8:	1f 92       	push	r1
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	7c 83       	std	Y+4, r23	; 0x04
    20b4:	6b 83       	std	Y+3, r22	; 0x03
    20b6:	2b 81       	ldd	r18, Y+3	; 0x03
    20b8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	b9 01       	movw	r22, r18
    20c0:	0e 94 e0 62 	call	0xc5c0	; 0xc5c0 <_ZNK6String6equalsERKS_>
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	08 95       	ret

000020d2 <_ZNK6StringneERKS_>:
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <_ZNK6StringneERKS_+0x6>
    20d8:	1f 92       	push	r1
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	7c 83       	std	Y+4, r23	; 0x04
    20e4:	6b 83       	std	Y+3, r22	; 0x03
    20e6:	2b 81       	ldd	r18, Y+3	; 0x03
    20e8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	b9 01       	movw	r22, r18
    20f0:	0e 94 e0 62 	call	0xc5c0	; 0xc5c0 <_ZNK6String6equalsERKS_>
    20f4:	98 2f       	mov	r25, r24
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	99 23       	and	r25, r25
    20fa:	09 f0       	breq	.+2      	; 0x20fe <_ZNK6StringneERKS_+0x2c>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <_Z7ReadUIDv>:

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;

String ReadUID()
{
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	29 97       	sbiw	r28, 0x09	; 9
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	99 87       	std	Y+9, r25	; 0x09
    2122:	88 87       	std	Y+8, r24	; 0x08
	String UID;
    2124:	88 85       	ldd	r24, Y+8	; 0x08
    2126:	99 85       	ldd	r25, Y+9	; 0x09
    2128:	6d e6       	ldi	r22, 0x6D	; 109
    212a:	72 e0       	ldi	r23, 0x02	; 2
    212c:	0e 94 00 62 	call	0xc400	; 0xc400 <_ZN6StringC1EPKc>
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    2130:	19 82       	std	Y+1, r1	; 0x01
    2132:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <mfrc522+0x2>
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	89 17       	cp	r24, r25
    213a:	78 f5       	brcc	.+94     	; 0x219a <_Z7ReadUIDv+0x8e>
		UID += mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ";
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	8a 5a       	subi	r24, 0xAA	; 170
    2144:	9b 4f       	sbci	r25, 0xFB	; 251
    2146:	fc 01       	movw	r30, r24
    2148:	80 81       	ld	r24, Z
    214a:	80 31       	cpi	r24, 0x10	; 16
    214c:	18 f4       	brcc	.+6      	; 0x2154 <_Z7ReadUIDv+0x48>
    214e:	8e e6       	ldi	r24, 0x6E	; 110
    2150:	92 e0       	ldi	r25, 0x02	; 2
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <_Z7ReadUIDv+0x4c>
    2154:	81 e7       	ldi	r24, 0x71	; 113
    2156:	92 e0       	ldi	r25, 0x02	; 2
    2158:	28 85       	ldd	r18, Y+8	; 0x08
    215a:	39 85       	ldd	r19, Y+9	; 0x09
    215c:	bc 01       	movw	r22, r24
    215e:	c9 01       	movw	r24, r18
    2160:	86 df       	rcall	.-244    	; 0x206e <_ZN6StringpLEPKc>
		UID += String (mfrc522.uid.uidByte[i], HEX);
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	88 2f       	mov	r24, r24
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	8a 5a       	subi	r24, 0xAA	; 170
    216a:	9b 4f       	sbci	r25, 0xFB	; 251
    216c:	fc 01       	movw	r30, r24
    216e:	20 81       	ld	r18, Z
    2170:	ce 01       	movw	r24, r28
    2172:	02 96       	adiw	r24, 0x02	; 2
    2174:	40 e1       	ldi	r20, 0x10	; 16
    2176:	62 2f       	mov	r22, r18
    2178:	0e 94 46 62 	call	0xc48c	; 0xc48c <_ZN6StringC1Ehh>
    217c:	9e 01       	movw	r18, r28
    217e:	2e 5f       	subi	r18, 0xFE	; 254
    2180:	3f 4f       	sbci	r19, 0xFF	; 255
    2182:	88 85       	ldd	r24, Y+8	; 0x08
    2184:	99 85       	ldd	r25, Y+9	; 0x09
    2186:	b9 01       	movw	r22, r18
    2188:	58 df       	rcall	.-336    	; 0x203a <_ZN6StringpLERKS_>
    218a:	ce 01       	movw	r24, r28
    218c:	02 96       	adiw	r24, 0x02	; 2
    218e:	0e 94 96 61 	call	0xc32c	; 0xc32c <_ZN6StringD1Ev>
MFRC522::MIFARE_Key key;

String ReadUID()
{
	String UID;
	for (byte i = 0; i < mfrc522.uid.size; i++) {
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	cc cf       	rjmp	.-104    	; 0x2132 <_Z7ReadUIDv+0x26>
		UID += mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ";
		UID += String (mfrc522.uid.uidByte[i], HEX);
	}
	UID.toUpperCase();
    219a:	88 85       	ldd	r24, Y+8	; 0x08
    219c:	99 85       	ldd	r25, Y+9	; 0x09
    219e:	0e 94 f0 62 	call	0xc5e0	; 0xc5e0 <_ZN6String11toUpperCaseEv>
	return UID ;
    21a2:	00 00       	nop

}
    21a4:	88 85       	ldd	r24, Y+8	; 0x08
    21a6:	99 85       	ldd	r25, Y+9	; 0x09
    21a8:	29 96       	adiw	r28, 0x09	; 9
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

000021ba <_Z12CheckKeyCard6StringPb>:

void CheckKeyCard(String UID, bool *Keycard)
{
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	2a 97       	sbiw	r28, 0x0a	; 10
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	98 87       	std	Y+8, r25	; 0x08
    21d0:	8f 83       	std	Y+7, r24	; 0x07
    21d2:	7a 87       	std	Y+10, r23	; 0x0a
    21d4:	69 87       	std	Y+9, r22	; 0x09
	String UnlogKey = " 30 45 66 A7";
    21d6:	63 e7       	ldi	r22, 0x73	; 115
    21d8:	72 e0       	ldi	r23, 0x02	; 2
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	0e 94 00 62 	call	0xc400	; 0xc400 <_ZN6StringC1EPKc>
	if (UID	== UnlogKey)
    21e2:	8f 81       	ldd	r24, Y+7	; 0x07
    21e4:	98 85       	ldd	r25, Y+8	; 0x08
    21e6:	9e 01       	movw	r18, r28
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	b9 01       	movw	r22, r18
    21ee:	59 df       	rcall	.-334    	; 0x20a2 <_ZNK6StringeqERKS_>
    21f0:	98 2f       	mov	r25, r24
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	99 23       	and	r25, r25
    21f6:	09 f4       	brne	.+2      	; 0x21fa <_Z12CheckKeyCard6StringPb+0x40>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	88 23       	and	r24, r24
    21fc:	61 f0       	breq	.+24     	; 0x2216 <__stack+0x17>
	{
		*Keycard = true;
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	fc 01       	movw	r30, r24
    2206:	20 83       	st	Z, r18
		Serial.println("Welcome Home");
    2208:	60 e8       	ldi	r22, 0x80	; 128
    220a:	72 e0       	ldi	r23, 0x02	; 2
    220c:	81 ed       	ldi	r24, 0xD1	; 209
    220e:	95 e0       	ldi	r25, 0x05	; 5
    2210:	0e 94 97 5c 	call	0xb92e	; 0xb92e <_ZN5Print7printlnEPKc>
    2214:	18 c0       	rjmp	.+48     	; 0x2246 <__stack+0x47>
	}
	else if (UID != UnlogKey)
    2216:	8f 81       	ldd	r24, Y+7	; 0x07
    2218:	98 85       	ldd	r25, Y+8	; 0x08
    221a:	9e 01       	movw	r18, r28
    221c:	2f 5f       	subi	r18, 0xFF	; 255
    221e:	3f 4f       	sbci	r19, 0xFF	; 255
    2220:	b9 01       	movw	r22, r18
    2222:	57 df       	rcall	.-338    	; 0x20d2 <_ZNK6StringneERKS_>
    2224:	98 2f       	mov	r25, r24
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	99 23       	and	r25, r25
    222a:	09 f4       	brne	.+2      	; 0x222e <__stack+0x2f>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	88 23       	and	r24, r24
    2230:	51 f0       	breq	.+20     	; 0x2246 <__stack+0x47>
	{
		*Keycard = false;
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	fc 01       	movw	r30, r24
    2238:	10 82       	st	Z, r1
		Serial.println("Access denied");
    223a:	6d e8       	ldi	r22, 0x8D	; 141
    223c:	72 e0       	ldi	r23, 0x02	; 2
    223e:	81 ed       	ldi	r24, 0xD1	; 209
    2240:	95 e0       	ldi	r25, 0x05	; 5
    2242:	0e 94 97 5c 	call	0xb92e	; 0xb92e <_ZN5Print7printlnEPKc>

}

void CheckKeyCard(String UID, bool *Keycard)
{
	String UnlogKey = " 30 45 66 A7";
    2246:	ce 01       	movw	r24, r28
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	0e 94 96 61 	call	0xc32c	; 0xc32c <_ZN6StringD1Ev>
		*Keycard = false;
		Serial.println("Access denied");
		
	}

}
    224e:	00 00       	nop
    2250:	2a 96       	adiw	r28, 0x0a	; 10
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	08 95       	ret

00002262 <_Z41__static_initialization_and_destruction_0ii>:
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	00 d0       	rcall	.+0      	; 0x2268 <_Z41__static_initialization_and_destruction_0ii+0x6>
    2268:	1f 92       	push	r1
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	7c 83       	std	Y+4, r23	; 0x04
    2274:	6b 83       	std	Y+3, r22	; 0x03
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	51 f4       	brne	.+20     	; 0x2292 <_Z41__static_initialization_and_destruction_0ii+0x30>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	31 f4       	brne	.+12     	; 0x2292 <_Z41__static_initialization_and_destruction_0ii+0x30>
#include "KeyCardAccess.h"

MFRC522 mfrc522(SS_PIN, RST_PIN);
    2286:	45 e0       	ldi	r20, 0x05	; 5
    2288:	65 e3       	ldi	r22, 0x35	; 53
    228a:	83 e5       	ldi	r24, 0x53	; 83
    228c:	94 e0       	ldi	r25, 0x04	; 4
    228e:	0e 94 dc 42 	call	0x85b8	; 0x85b8 <_ZN7MFRC522C1Ehh>
		*Keycard = false;
		Serial.println("Access denied");
		
	}

}
    2292:	00 00       	nop
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	08 95       	ret

000022a2 <_GLOBAL__sub_I_mfrc522>:
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	6f ef       	ldi	r22, 0xFF	; 255
    22ac:	7f ef       	ldi	r23, 0xFF	; 255
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	d7 df       	rcall	.-82     	; 0x2262 <_Z41__static_initialization_and_destruction_0ii>
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	08 95       	ret

000022ba <_Z8SetServoi>:
Servo myservo; // create servo object to control a servo
int val = 30;


void SetServo(int cm)
{
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	1f 92       	push	r1
    22c0:	1f 92       	push	r1
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
	if (cm < val)
    22ca:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <val>
    22ce:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <val+0x1>
    22d2:	29 81       	ldd	r18, Y+1	; 0x01
    22d4:	3a 81       	ldd	r19, Y+2	; 0x02
    22d6:	28 17       	cp	r18, r24
    22d8:	39 07       	cpc	r19, r25
    22da:	44 f4       	brge	.+16     	; 0x22ec <_Z8SetServoi+0x32>
	{
		myservo.write(cm); // cm bliver brugt til graderne af servoen
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	9a 81       	ldd	r25, Y+2	; 0x02
    22e0:	bc 01       	movw	r22, r24
    22e2:	83 e6       	ldi	r24, 0x63	; 99
    22e4:	94 e0       	ldi	r25, 0x04	; 4
    22e6:	0e 94 8f 4e 	call	0x9d1e	; 0x9d1e <_ZN5Servo5writeEi>
	}
	else
	{
		myservo.write(90);
	}
}
    22ea:	06 c0       	rjmp	.+12     	; 0x22f8 <_Z8SetServoi+0x3e>
	{
		myservo.write(cm); // cm bliver brugt til graderne af servoen
	}
	else
	{
		myservo.write(90);
    22ec:	6a e5       	ldi	r22, 0x5A	; 90
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	83 e6       	ldi	r24, 0x63	; 99
    22f2:	94 e0       	ldi	r25, 0x04	; 4
    22f4:	0e 94 8f 4e 	call	0x9d1e	; 0x9d1e <_ZN5Servo5writeEi>
	}
}
    22f8:	00 00       	nop
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	08 95       	ret

00002304 <_Z41__static_initialization_and_destruction_0ii>:
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	00 d0       	rcall	.+0      	; 0x230a <_Z41__static_initialization_and_destruction_0ii+0x6>
    230a:	1f 92       	push	r1
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	7c 83       	std	Y+4, r23	; 0x04
    2316:	6b 83       	std	Y+3, r22	; 0x03
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	41 f4       	brne	.+16     	; 0x2330 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	21 f4       	brne	.+8      	; 0x2330 <_Z41__static_initialization_and_destruction_0ii+0x2c>
#include "Servos.h"

Servo myservo; // create servo object to control a servo
    2328:	83 e6       	ldi	r24, 0x63	; 99
    232a:	94 e0       	ldi	r25, 0x04	; 4
    232c:	0e 94 b0 4d 	call	0x9b60	; 0x9b60 <_ZN5ServoC1Ev>
	}
	else
	{
		myservo.write(90);
	}
}
    2330:	00 00       	nop
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	08 95       	ret

00002340 <_GLOBAL__sub_I_myservo>:
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	6f ef       	ldi	r22, 0xFF	; 255
    234a:	7f ef       	ldi	r23, 0xFF	; 255
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	d9 df       	rcall	.-78     	; 0x2304 <_Z41__static_initialization_and_destruction_0ii>
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	08 95       	ret

00002358 <_ZN11SPISettingsC1Emhh>:
      SPDR = out;
      *p++ = in;
    }
    while (!(SPSR & _BV(SPIF))) ;
    *p = SPDR;
  }
    2358:	0f 93       	push	r16
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	28 97       	sbiw	r28, 0x08	; 8
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	4b 83       	std	Y+3, r20	; 0x03
    2374:	5c 83       	std	Y+4, r21	; 0x04
    2376:	6d 83       	std	Y+5, r22	; 0x05
    2378:	7e 83       	std	Y+6, r23	; 0x06
    237a:	2f 83       	std	Y+7, r18	; 0x07
    237c:	08 87       	std	Y+8, r16	; 0x08
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	ad 81       	ldd	r26, Y+5	; 0x05
    2384:	be 81       	ldd	r27, Y+6	; 0x06
    2386:	e9 81       	ldd	r30, Y+1	; 0x01
    2388:	fa 81       	ldd	r31, Y+2	; 0x02
    238a:	08 85       	ldd	r16, Y+8	; 0x08
    238c:	2f 81       	ldd	r18, Y+7	; 0x07
    238e:	ac 01       	movw	r20, r24
    2390:	bd 01       	movw	r22, r26
    2392:	cf 01       	movw	r24, r30
    2394:	0b d0       	rcall	.+22     	; 0x23ac <_ZN11SPISettings16init_MightInlineEmhh>
    2396:	00 00       	nop
    2398:	28 96       	adiw	r28, 0x08	; 8
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	0f 91       	pop	r16
    23aa:	08 95       	ret

000023ac <_ZN11SPISettings16init_MightInlineEmhh>:
  }
  SPISettings() {
    init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0);
  }
private:
  void init_MightInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    23ac:	0f 93       	push	r16
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	65 97       	sbiw	r28, 0x15	; 21
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	9f 87       	std	Y+15, r25	; 0x0f
    23c4:	8e 87       	std	Y+14, r24	; 0x0e
    23c6:	48 8b       	std	Y+16, r20	; 0x10
    23c8:	59 8b       	std	Y+17, r21	; 0x11
    23ca:	6a 8b       	std	Y+18, r22	; 0x12
    23cc:	7b 8b       	std	Y+19, r23	; 0x13
    23ce:	2c 8b       	std	Y+20, r18	; 0x14
    23d0:	0d 8b       	std	Y+21, r16	; 0x15
    23d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	88 89       	ldd	r24, Y+16	; 0x10
    23dc:	99 89       	ldd	r25, Y+17	; 0x11
    23de:	aa 89       	ldd	r26, Y+18	; 0x12
    23e0:	bb 89       	ldd	r27, Y+19	; 0x13
    23e2:	8b 83       	std	Y+3, r24	; 0x03
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	ad 83       	std	Y+5, r26	; 0x05
    23e8:	be 83       	std	Y+6, r27	; 0x06
    23ea:	8c 89       	ldd	r24, Y+20	; 0x14
    23ec:	8f 83       	std	Y+7, r24	; 0x07
    23ee:	8d 89       	ldd	r24, Y+21	; 0x15
    23f0:	88 87       	std	Y+8, r24	; 0x08
        clockDiv = 5;
      } else {
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	92 e1       	ldi	r25, 0x12	; 18
    23f6:	aa e7       	ldi	r26, 0x7A	; 122
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	89 87       	std	Y+9, r24	; 0x09
    23fc:	9a 87       	std	Y+10, r25	; 0x0a
    23fe:	ab 87       	std	Y+11, r26	; 0x0b
    2400:	bc 87       	std	Y+12, r27	; 0x0c
      clockDiv = 0;
    2402:	1d 86       	std	Y+13, r1	; 0x0d
      while (clockDiv < 6 && clock < clockSetting) {
    2404:	8d 85       	ldd	r24, Y+13	; 0x0d
    2406:	86 30       	cpi	r24, 0x06	; 6
    2408:	e8 f4       	brcc	.+58     	; 0x2444 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
    240a:	2b 81       	ldd	r18, Y+3	; 0x03
    240c:	3c 81       	ldd	r19, Y+4	; 0x04
    240e:	4d 81       	ldd	r20, Y+5	; 0x05
    2410:	5e 81       	ldd	r21, Y+6	; 0x06
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	ab 85       	ldd	r26, Y+11	; 0x0b
    2418:	bc 85       	ldd	r27, Y+12	; 0x0c
    241a:	28 17       	cp	r18, r24
    241c:	39 07       	cpc	r19, r25
    241e:	4a 07       	cpc	r20, r26
    2420:	5b 07       	cpc	r21, r27
    2422:	80 f4       	brcc	.+32     	; 0x2444 <_ZN11SPISettings16init_MightInlineEmhh+0x98>
        clockSetting /= 2;
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	ab 85       	ldd	r26, Y+11	; 0x0b
    242a:	bc 85       	ldd	r27, Y+12	; 0x0c
    242c:	b6 95       	lsr	r27
    242e:	a7 95       	ror	r26
    2430:	97 95       	ror	r25
    2432:	87 95       	ror	r24
    2434:	89 87       	std	Y+9, r24	; 0x09
    2436:	9a 87       	std	Y+10, r25	; 0x0a
    2438:	ab 87       	std	Y+11, r26	; 0x0b
    243a:	bc 87       	std	Y+12, r27	; 0x0c
        clockDiv++;
    243c:	8d 85       	ldd	r24, Y+13	; 0x0d
    243e:	8f 5f       	subi	r24, 0xFF	; 255
    2440:	8d 87       	std	Y+13, r24	; 0x0d
    2442:	e0 cf       	rjmp	.-64     	; 0x2404 <_ZN11SPISettings16init_MightInlineEmhh+0x58>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    2444:	8d 85       	ldd	r24, Y+13	; 0x0d
    2446:	86 30       	cpi	r24, 0x06	; 6
    2448:	11 f4       	brne	.+4      	; 0x244e <_ZN11SPISettings16init_MightInlineEmhh+0xa2>
    clockDiv = 7;
    244a:	87 e0       	ldi	r24, 0x07	; 7
    244c:	8d 87       	std	Y+13, r24	; 0x0d

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    244e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	89 27       	eor	r24, r25
    2454:	8d 87       	std	Y+13, r24	; 0x0d

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    2456:	8f 81       	ldd	r24, Y+7	; 0x07
    2458:	88 23       	and	r24, r24
    245a:	11 f4       	brne	.+4      	; 0x2460 <_ZN11SPISettings16init_MightInlineEmhh+0xb4>
    245c:	80 e7       	ldi	r24, 0x70	; 112
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <_ZN11SPISettings16init_MightInlineEmhh+0xb6>
    2460:	80 e5       	ldi	r24, 0x50	; 80
    2462:	98 85       	ldd	r25, Y+8	; 0x08
    2464:	9c 70       	andi	r25, 0x0C	; 12
    2466:	29 2f       	mov	r18, r25
    2468:	28 2b       	or	r18, r24
    246a:	8d 85       	ldd	r24, Y+13	; 0x0d
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	95 95       	asr	r25
    2472:	87 95       	ror	r24
    2474:	83 70       	andi	r24, 0x03	; 3
    2476:	82 2b       	or	r24, r18
    2478:	28 2f       	mov	r18, r24
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	fc 01       	movw	r30, r24
    2480:	20 83       	st	Z, r18
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    2482:	8d 85       	ldd	r24, Y+13	; 0x0d
    2484:	28 2f       	mov	r18, r24
    2486:	21 70       	andi	r18, 0x01	; 1
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	fc 01       	movw	r30, r24
    248e:	21 83       	std	Z+1, r18	; 0x01
    init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0);
  }
private:
  void init_MightInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }
    2490:	00 00       	nop
    2492:	65 96       	adiw	r28, 0x15	; 21
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	0f 91       	pop	r16
    24a4:	08 95       	ret

000024a6 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  // https://github.com/arduino/Arduino/pull/2449

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <_ZN8SPIClass16beginTransactionE11SPISettings+0x6>
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	9b 83       	std	Y+3, r25	; 0x03
    24b2:	8a 83       	std	Y+2, r24	; 0x02
    if (interruptMode > 0) {
    24b4:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8SPIClass13interruptModeE>
    24b8:	88 23       	and	r24, r24
    24ba:	31 f1       	breq	.+76     	; 0x2508 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
      uint8_t sreg = SREG;
    24bc:	8f e5       	ldi	r24, 0x5F	; 95
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	fc 01       	movw	r30, r24
    24c2:	80 81       	ld	r24, Z
    24c4:	89 83       	std	Y+1, r24	; 0x01
      noInterrupts();
    24c6:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    24c8:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8SPIClass13interruptModeE>
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	c9 f4       	brne	.+50     	; 0x2502 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>
        interruptSave = SPI_AVR_EIMSK;
    24d0:	8d e3       	ldi	r24, 0x3D	; 61
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	fc 01       	movw	r30, r24
    24d6:	80 81       	ld	r24, Z
    24d8:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    24dc:	8d e3       	ldi	r24, 0x3D	; 61
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	2d e3       	ldi	r18, 0x3D	; 61
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	f9 01       	movw	r30, r18
    24e6:	20 81       	ld	r18, Z
    24e8:	32 2f       	mov	r19, r18
    24ea:	20 91 fd 04 	lds	r18, 0x04FD	; 0x8004fd <_ZN8SPIClass13interruptMaskE>
    24ee:	20 95       	com	r18
    24f0:	23 23       	and	r18, r19
    24f2:	fc 01       	movw	r30, r24
    24f4:	20 83       	st	Z, r18
        SREG = sreg;
    24f6:	8f e5       	ldi	r24, 0x5F	; 95
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	29 81       	ldd	r18, Y+1	; 0x01
    24fc:	fc 01       	movw	r30, r24
    24fe:	20 83       	st	Z, r18
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <_ZN8SPIClass16beginTransactionE11SPISettings+0x62>
      } else
      #endif
      {
        interruptSave = sreg;
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    2508:	8c e4       	ldi	r24, 0x4C	; 76
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	2a 81       	ldd	r18, Y+2	; 0x02
    250e:	fc 01       	movw	r30, r24
    2510:	20 83       	st	Z, r18
    SPSR = settings.spsr;
    2512:	8d e4       	ldi	r24, 0x4D	; 77
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	2b 81       	ldd	r18, Y+3	; 0x03
    2518:	fc 01       	movw	r30, r24
    251a:	20 83       	st	Z, r18
  }
    251c:	00 00       	nop
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	df 91       	pop	r29
    2526:	cf 91       	pop	r28
    2528:	08 95       	ret

0000252a <_ZN8SPIClass14endTransactionEv>:
    while (!(SPSR & _BV(SPIF))) ;
    *p = SPDR;
  }
  // After performing a group of transfers and releasing the chip select
  // signal, this function allows others to access the SPI bus
  inline static void endTransaction(void) {
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	1f 92       	push	r1
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    2534:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8SPIClass13interruptModeE>
    2538:	88 23       	and	r24, r24
    253a:	e1 f0       	breq	.+56     	; 0x2574 <_ZN8SPIClass14endTransactionEv+0x4a>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    253c:	8f e5       	ldi	r24, 0x5F	; 95
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	fc 01       	movw	r30, r24
    2542:	80 81       	ld	r24, Z
    2544:	89 83       	std	Y+1, r24	; 0x01
      #endif
      noInterrupts();
    2546:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    2548:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZN8SPIClass13interruptModeE>
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	61 f4       	brne	.+24     	; 0x2568 <_ZN8SPIClass14endTransactionEv+0x3e>
        SPI_AVR_EIMSK = interruptSave;
    2550:	8d e3       	ldi	r24, 0x3D	; 61
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <_ZN8SPIClass13interruptSaveE>
    2558:	fc 01       	movw	r30, r24
    255a:	20 83       	st	Z, r18
        SREG = sreg;
    255c:	8f e5       	ldi	r24, 0x5F	; 95
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	29 81       	ldd	r18, Y+1	; 0x01
    2562:	fc 01       	movw	r30, r24
    2564:	20 83       	st	Z, r18
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    2566:	06 c0       	rjmp	.+12     	; 0x2574 <_ZN8SPIClass14endTransactionEv+0x4a>
        SPI_AVR_EIMSK = interruptSave;
        SREG = sreg;
      } else
      #endif
      {
        SREG = interruptSave;
    2568:	8f e5       	ldi	r24, 0x5F	; 95
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <_ZN8SPIClass13interruptSaveE>
    2570:	fc 01       	movw	r30, r24
    2572:	20 83       	st	Z, r18
      }
    }
  }
    2574:	00 00       	nop
    2576:	0f 90       	pop	r0
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	08 95       	ret

0000257e <_ZN5PrintC1Ev>:
  }
  if (maxy >= miny) {
    *y1 = miny;
    *h = maxy - miny + 1;
  }
}
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	1f 92       	push	r1
    2584:	1f 92       	push	r1
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	2e e5       	ldi	r18, 0x5E	; 94
    2590:	33 e0       	ldi	r19, 0x03	; 3
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	fc 01       	movw	r30, r24
    2598:	31 83       	std	Z+1, r19	; 0x01
    259a:	20 83       	st	Z, r18
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	fc 01       	movw	r30, r24
    25a2:	13 82       	std	Z+3, r1	; 0x03
    25a4:	12 82       	std	Z+2, r1	; 0x02
    25a6:	00 00       	nop
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	1f 92       	push	r1
    25b8:	1f 92       	push	r1
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	08 95       	ret

000025d0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	1f 92       	push	r1
    25d6:	1f 92       	push	r1
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	00 00       	nop
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	08 95       	ret

000025ec <_ZNK12Adafruit_GFX5widthEv>:
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	1f 92       	push	r1
    25f2:	1f 92       	push	r1
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	fc 01       	movw	r30, r24
    2602:	80 85       	ldd	r24, Z+8	; 0x08
    2604:	91 85       	ldd	r25, Z+9	; 0x09
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	08 95       	ret

00002610 <_ZNK12Adafruit_GFX6heightEv>:
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	1f 92       	push	r1
    2616:	1f 92       	push	r1
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	fc 01       	movw	r30, r24
    2626:	82 85       	ldd	r24, Z+10	; 0x0a
    2628:	93 85       	ldd	r25, Z+11	; 0x0b
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	08 95       	ret

00002634 <_ZNK12Adafruit_GFX11getRotationEv>:
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	1f 92       	push	r1
    263a:	1f 92       	push	r1
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	fc 01       	movw	r30, r24
    264a:	86 89       	ldd	r24, Z+22	; 0x16
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	08 95       	ret

00002656 <_Z18pgm_read_glyph_ptrPK7GFXfonth>:
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	27 97       	sbiw	r28, 0x07	; 7
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	6f 83       	std	Y+7, r22	; 0x07
    2670:	8f 81       	ldd	r24, Y+7	; 0x07
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	c9 01       	movw	r24, r18
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	ac 01       	movw	r20, r24
    2686:	42 1b       	sub	r20, r18
    2688:	53 0b       	sbc	r21, r19
    268a:	9a 01       	movw	r18, r20
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	02 96       	adiw	r24, 0x02	; 2
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	fc 01       	movw	r30, r24
    269c:	45 91       	lpm	r20, Z+
    269e:	54 91       	lpm	r21, Z
    26a0:	cf 01       	movw	r24, r30
    26a2:	5c 83       	std	Y+4, r21	; 0x04
    26a4:	4b 83       	std	Y+3, r20	; 0x03
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	82 0f       	add	r24, r18
    26b0:	93 1f       	adc	r25, r19
    26b2:	27 96       	adiw	r28, 0x07	; 7
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	08 95       	ret

000026c4 <_Z19pgm_read_bitmap_ptrPK7GFXfont>:
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <_Z19pgm_read_bitmap_ptrPK7GFXfont+0x6>
    26ca:	00 d0       	rcall	.+0      	; 0x26cc <_Z19pgm_read_bitmap_ptrPK7GFXfont+0x8>
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	9e 83       	std	Y+6, r25	; 0x06
    26d2:	8d 83       	std	Y+5, r24	; 0x05
    26d4:	8d 81       	ldd	r24, Y+5	; 0x05
    26d6:	9e 81       	ldd	r25, Y+6	; 0x06
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	fc 01       	movw	r30, r24
    26e2:	25 91       	lpm	r18, Z+
    26e4:	34 91       	lpm	r19, Z
    26e6:	cf 01       	movw	r24, r30
    26e8:	3c 83       	std	Y+4, r19	; 0x04
    26ea:	2b 83       	std	Y+3, r18	; 0x03
    26ec:	9a 83       	std	Y+2, r25	; 0x02
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	9c 81       	ldd	r25, Y+4	; 0x04
    26f4:	26 96       	adiw	r28, 0x06	; 6
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	08 95       	ret

00002706 <_ZN12Adafruit_GFXC1Eii>:
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	00 d0       	rcall	.+0      	; 0x270c <_ZN12Adafruit_GFXC1Eii+0x6>
    270c:	00 d0       	rcall	.+0      	; 0x270e <_ZN12Adafruit_GFXC1Eii+0x8>
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	9a 83       	std	Y+2, r25	; 0x02
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	7c 83       	std	Y+4, r23	; 0x04
    2718:	6b 83       	std	Y+3, r22	; 0x03
    271a:	5e 83       	std	Y+6, r21	; 0x06
    271c:	4d 83       	std	Y+5, r20	; 0x05
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	2d df       	rcall	.-422    	; 0x257e <_ZN5PrintC1Ev>
    2724:	21 ea       	ldi	r18, 0xA1	; 161
    2726:	32 e0       	ldi	r19, 0x02	; 2
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	fc 01       	movw	r30, r24
    272e:	31 83       	std	Z+1, r19	; 0x01
    2730:	20 83       	st	Z, r18
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	9a 81       	ldd	r25, Y+2	; 0x02
    2736:	2b 81       	ldd	r18, Y+3	; 0x03
    2738:	3c 81       	ldd	r19, Y+4	; 0x04
    273a:	fc 01       	movw	r30, r24
    273c:	35 83       	std	Z+5, r19	; 0x05
    273e:	24 83       	std	Z+4, r18	; 0x04
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	2d 81       	ldd	r18, Y+5	; 0x05
    2746:	3e 81       	ldd	r19, Y+6	; 0x06
    2748:	fc 01       	movw	r30, r24
    274a:	37 83       	std	Z+7, r19	; 0x07
    274c:	26 83       	std	Z+6, r18	; 0x06
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	fc 01       	movw	r30, r24
    2754:	24 81       	ldd	r18, Z+4	; 0x04
    2756:	35 81       	ldd	r19, Z+5	; 0x05
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	fc 01       	movw	r30, r24
    275e:	31 87       	std	Z+9, r19	; 0x09
    2760:	20 87       	std	Z+8, r18	; 0x08
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	9a 81       	ldd	r25, Y+2	; 0x02
    2766:	fc 01       	movw	r30, r24
    2768:	26 81       	ldd	r18, Z+6	; 0x06
    276a:	37 81       	ldd	r19, Z+7	; 0x07
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	fc 01       	movw	r30, r24
    2772:	33 87       	std	Z+11, r19	; 0x0b
    2774:	22 87       	std	Z+10, r18	; 0x0a
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	fc 01       	movw	r30, r24
    277c:	16 8a       	std	Z+22, r1	; 0x16
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	fc 01       	movw	r30, r24
    2784:	15 86       	std	Z+13, r1	; 0x0d
    2786:	14 86       	std	Z+12, r1	; 0x0c
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	fc 01       	movw	r30, r24
    278e:	24 85       	ldd	r18, Z+12	; 0x0c
    2790:	35 85       	ldd	r19, Z+13	; 0x0d
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	fc 01       	movw	r30, r24
    2798:	37 87       	std	Z+15, r19	; 0x0f
    279a:	26 87       	std	Z+14, r18	; 0x0e
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	21 e0       	ldi	r18, 0x01	; 1
    27a2:	fc 01       	movw	r30, r24
    27a4:	25 8b       	std	Z+21, r18	; 0x15
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	fc 01       	movw	r30, r24
    27ac:	25 89       	ldd	r18, Z+21	; 0x15
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
    27b2:	fc 01       	movw	r30, r24
    27b4:	24 8b       	std	Z+20, r18	; 0x14
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	2f ef       	ldi	r18, 0xFF	; 255
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	fc 01       	movw	r30, r24
    27c0:	33 8b       	std	Z+19, r19	; 0x13
    27c2:	22 8b       	std	Z+18, r18	; 0x12
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	fc 01       	movw	r30, r24
    27ca:	22 89       	ldd	r18, Z+18	; 0x12
    27cc:	33 89       	ldd	r19, Z+19	; 0x13
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	9a 81       	ldd	r25, Y+2	; 0x02
    27d2:	fc 01       	movw	r30, r24
    27d4:	31 8b       	std	Z+17, r19	; 0x11
    27d6:	20 8b       	std	Z+16, r18	; 0x10
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	21 e0       	ldi	r18, 0x01	; 1
    27de:	fc 01       	movw	r30, r24
    27e0:	27 8b       	std	Z+23, r18	; 0x17
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
    27e6:	fc 01       	movw	r30, r24
    27e8:	10 8e       	std	Z+24, r1	; 0x18
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	fc 01       	movw	r30, r24
    27f0:	12 8e       	std	Z+26, r1	; 0x1a
    27f2:	11 8e       	std	Z+25, r1	; 0x19
    27f4:	00 00       	nop
    27f6:	26 96       	adiw	r28, 0x06	; 6
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	08 95       	ret

00002808 <_ZN12Adafruit_GFX9writeLineEiiiij>:
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	6e 97       	sbiw	r28, 0x1e	; 30
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	9c 8b       	std	Y+20, r25	; 0x14
    2826:	8b 8b       	std	Y+19, r24	; 0x13
    2828:	7e 8b       	std	Y+22, r23	; 0x16
    282a:	6d 8b       	std	Y+21, r22	; 0x15
    282c:	58 8f       	std	Y+24, r21	; 0x18
    282e:	4f 8b       	std	Y+23, r20	; 0x17
    2830:	3a 8f       	std	Y+26, r19	; 0x1a
    2832:	29 8f       	std	Y+25, r18	; 0x19
    2834:	1c 8f       	std	Y+28, r17	; 0x1c
    2836:	0b 8f       	std	Y+27, r16	; 0x1b
    2838:	fe 8e       	std	Y+30, r15	; 0x1e
    283a:	ed 8e       	std	Y+29, r14	; 0x1d
    283c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    283e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2840:	8f 89       	ldd	r24, Y+23	; 0x17
    2842:	98 8d       	ldd	r25, Y+24	; 0x18
    2844:	a9 01       	movw	r20, r18
    2846:	48 1b       	sub	r20, r24
    2848:	59 0b       	sbc	r21, r25
    284a:	ca 01       	movw	r24, r20
    284c:	99 23       	and	r25, r25
    284e:	1c f4       	brge	.+6      	; 0x2856 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    2850:	91 95       	neg	r25
    2852:	81 95       	neg	r24
    2854:	91 09       	sbc	r25, r1
    2856:	ac 01       	movw	r20, r24
    2858:	29 8d       	ldd	r18, Y+25	; 0x19
    285a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    285c:	8d 89       	ldd	r24, Y+21	; 0x15
    285e:	9e 89       	ldd	r25, Y+22	; 0x16
    2860:	b9 01       	movw	r22, r18
    2862:	68 1b       	sub	r22, r24
    2864:	79 0b       	sbc	r23, r25
    2866:	cb 01       	movw	r24, r22
    2868:	99 23       	and	r25, r25
    286a:	1c f4       	brge	.+6      	; 0x2872 <_ZN12Adafruit_GFX9writeLineEiiiij+0x6a>
    286c:	91 95       	neg	r25
    286e:	81 95       	neg	r24
    2870:	91 09       	sbc	r25, r1
    2872:	21 e0       	ldi	r18, 0x01	; 1
    2874:	84 17       	cp	r24, r20
    2876:	95 07       	cpc	r25, r21
    2878:	0c f0       	brlt	.+2      	; 0x287c <_ZN12Adafruit_GFX9writeLineEiiiij+0x74>
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	82 2f       	mov	r24, r18
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	89 2b       	or	r24, r25
    288a:	c1 f0       	breq	.+48     	; 0x28bc <_ZN12Adafruit_GFX9writeLineEiiiij+0xb4>
    288c:	8d 89       	ldd	r24, Y+21	; 0x15
    288e:	9e 89       	ldd	r25, Y+22	; 0x16
    2890:	98 87       	std	Y+8, r25	; 0x08
    2892:	8f 83       	std	Y+7, r24	; 0x07
    2894:	8f 89       	ldd	r24, Y+23	; 0x17
    2896:	98 8d       	ldd	r25, Y+24	; 0x18
    2898:	9e 8b       	std	Y+22, r25	; 0x16
    289a:	8d 8b       	std	Y+21, r24	; 0x15
    289c:	8f 81       	ldd	r24, Y+7	; 0x07
    289e:	98 85       	ldd	r25, Y+8	; 0x08
    28a0:	98 8f       	std	Y+24, r25	; 0x18
    28a2:	8f 8b       	std	Y+23, r24	; 0x17
    28a4:	89 8d       	ldd	r24, Y+25	; 0x19
    28a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28a8:	9a 87       	std	Y+10, r25	; 0x0a
    28aa:	89 87       	std	Y+9, r24	; 0x09
    28ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b0:	9a 8f       	std	Y+26, r25	; 0x1a
    28b2:	89 8f       	std	Y+25, r24	; 0x19
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	9c 8f       	std	Y+28, r25	; 0x1c
    28ba:	8b 8f       	std	Y+27, r24	; 0x1b
    28bc:	2d 89       	ldd	r18, Y+21	; 0x15
    28be:	3e 89       	ldd	r19, Y+22	; 0x16
    28c0:	89 8d       	ldd	r24, Y+25	; 0x19
    28c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28c4:	82 17       	cp	r24, r18
    28c6:	93 07       	cpc	r25, r19
    28c8:	c4 f4       	brge	.+48     	; 0x28fa <_ZN12Adafruit_GFX9writeLineEiiiij+0xf2>
    28ca:	8d 89       	ldd	r24, Y+21	; 0x15
    28cc:	9e 89       	ldd	r25, Y+22	; 0x16
    28ce:	9c 87       	std	Y+12, r25	; 0x0c
    28d0:	8b 87       	std	Y+11, r24	; 0x0b
    28d2:	89 8d       	ldd	r24, Y+25	; 0x19
    28d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28d6:	9e 8b       	std	Y+22, r25	; 0x16
    28d8:	8d 8b       	std	Y+21, r24	; 0x15
    28da:	8b 85       	ldd	r24, Y+11	; 0x0b
    28dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    28de:	9a 8f       	std	Y+26, r25	; 0x1a
    28e0:	89 8f       	std	Y+25, r24	; 0x19
    28e2:	8f 89       	ldd	r24, Y+23	; 0x17
    28e4:	98 8d       	ldd	r25, Y+24	; 0x18
    28e6:	9e 87       	std	Y+14, r25	; 0x0e
    28e8:	8d 87       	std	Y+13, r24	; 0x0d
    28ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ee:	98 8f       	std	Y+24, r25	; 0x18
    28f0:	8f 8b       	std	Y+23, r24	; 0x17
    28f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f6:	9c 8f       	std	Y+28, r25	; 0x1c
    28f8:	8b 8f       	std	Y+27, r24	; 0x1b
    28fa:	29 8d       	ldd	r18, Y+25	; 0x19
    28fc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    28fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2900:	9e 89       	ldd	r25, Y+22	; 0x16
    2902:	d9 01       	movw	r26, r18
    2904:	a8 1b       	sub	r26, r24
    2906:	b9 0b       	sbc	r27, r25
    2908:	cd 01       	movw	r24, r26
    290a:	98 8b       	std	Y+16, r25	; 0x10
    290c:	8f 87       	std	Y+15, r24	; 0x0f
    290e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2910:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2912:	8f 89       	ldd	r24, Y+23	; 0x17
    2914:	98 8d       	ldd	r25, Y+24	; 0x18
    2916:	f9 01       	movw	r30, r18
    2918:	e8 1b       	sub	r30, r24
    291a:	f9 0b       	sbc	r31, r25
    291c:	cf 01       	movw	r24, r30
    291e:	99 23       	and	r25, r25
    2920:	1c f4       	brge	.+6      	; 0x2928 <_ZN12Adafruit_GFX9writeLineEiiiij+0x120>
    2922:	91 95       	neg	r25
    2924:	81 95       	neg	r24
    2926:	91 09       	sbc	r25, r1
    2928:	9a 8b       	std	Y+18, r25	; 0x12
    292a:	89 8b       	std	Y+17, r24	; 0x11
    292c:	8f 85       	ldd	r24, Y+15	; 0x0f
    292e:	98 89       	ldd	r25, Y+16	; 0x10
    2930:	99 23       	and	r25, r25
    2932:	0c f4       	brge	.+2      	; 0x2936 <_ZN12Adafruit_GFX9writeLineEiiiij+0x12e>
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	95 95       	asr	r25
    2938:	87 95       	ror	r24
    293a:	9a 83       	std	Y+2, r25	; 0x02
    293c:	89 83       	std	Y+1, r24	; 0x01
    293e:	2f 89       	ldd	r18, Y+23	; 0x17
    2940:	38 8d       	ldd	r19, Y+24	; 0x18
    2942:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2944:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2946:	28 17       	cp	r18, r24
    2948:	39 07       	cpc	r19, r25
    294a:	2c f4       	brge	.+10     	; 0x2956 <_ZN12Adafruit_GFX9writeLineEiiiij+0x14e>
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9c 83       	std	Y+4, r25	; 0x04
    2952:	8b 83       	std	Y+3, r24	; 0x03
    2954:	04 c0       	rjmp	.+8      	; 0x295e <_ZN12Adafruit_GFX9writeLineEiiiij+0x156>
    2956:	8f ef       	ldi	r24, 0xFF	; 255
    2958:	9f ef       	ldi	r25, 0xFF	; 255
    295a:	9c 83       	std	Y+4, r25	; 0x04
    295c:	8b 83       	std	Y+3, r24	; 0x03
    295e:	2d 89       	ldd	r18, Y+21	; 0x15
    2960:	3e 89       	ldd	r19, Y+22	; 0x16
    2962:	89 8d       	ldd	r24, Y+25	; 0x19
    2964:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2966:	82 17       	cp	r24, r18
    2968:	93 07       	cpc	r25, r19
    296a:	0c f4       	brge	.+2      	; 0x296e <_ZN12Adafruit_GFX9writeLineEiiiij+0x166>
    296c:	4d c0       	rjmp	.+154    	; 0x2a08 <_ZN12Adafruit_GFX9writeLineEiiiij+0x200>
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	89 2b       	or	r24, r25
    2974:	99 f0       	breq	.+38     	; 0x299c <_ZN12Adafruit_GFX9writeLineEiiiij+0x194>
    2976:	8b 89       	ldd	r24, Y+19	; 0x13
    2978:	9c 89       	ldd	r25, Y+20	; 0x14
    297a:	dc 01       	movw	r26, r24
    297c:	8d 91       	ld	r24, X+
    297e:	9c 91       	ld	r25, X
    2980:	0c 96       	adiw	r24, 0x0c	; 12
    2982:	dc 01       	movw	r26, r24
    2984:	ed 91       	ld	r30, X+
    2986:	fc 91       	ld	r31, X
    2988:	2d 8d       	ldd	r18, Y+29	; 0x1d
    298a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    298c:	4d 89       	ldd	r20, Y+21	; 0x15
    298e:	5e 89       	ldd	r21, Y+22	; 0x16
    2990:	6f 89       	ldd	r22, Y+23	; 0x17
    2992:	78 8d       	ldd	r23, Y+24	; 0x18
    2994:	8b 89       	ldd	r24, Y+19	; 0x13
    2996:	9c 89       	ldd	r25, Y+20	; 0x14
    2998:	19 95       	eicall
    299a:	12 c0       	rjmp	.+36     	; 0x29c0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x1b8>
    299c:	8b 89       	ldd	r24, Y+19	; 0x13
    299e:	9c 89       	ldd	r25, Y+20	; 0x14
    29a0:	fc 01       	movw	r30, r24
    29a2:	80 81       	ld	r24, Z
    29a4:	91 81       	ldd	r25, Z+1	; 0x01
    29a6:	0c 96       	adiw	r24, 0x0c	; 12
    29a8:	dc 01       	movw	r26, r24
    29aa:	ed 91       	ld	r30, X+
    29ac:	fc 91       	ld	r31, X
    29ae:	2d 8d       	ldd	r18, Y+29	; 0x1d
    29b0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    29b2:	4f 89       	ldd	r20, Y+23	; 0x17
    29b4:	58 8d       	ldd	r21, Y+24	; 0x18
    29b6:	6d 89       	ldd	r22, Y+21	; 0x15
    29b8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ba:	8b 89       	ldd	r24, Y+19	; 0x13
    29bc:	9c 89       	ldd	r25, Y+20	; 0x14
    29be:	19 95       	eicall
    29c0:	29 81       	ldd	r18, Y+1	; 0x01
    29c2:	3a 81       	ldd	r19, Y+2	; 0x02
    29c4:	89 89       	ldd	r24, Y+17	; 0x11
    29c6:	9a 89       	ldd	r25, Y+18	; 0x12
    29c8:	f9 01       	movw	r30, r18
    29ca:	e8 1b       	sub	r30, r24
    29cc:	f9 0b       	sbc	r31, r25
    29ce:	cf 01       	movw	r24, r30
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	99 23       	and	r25, r25
    29da:	84 f4       	brge	.+32     	; 0x29fc <_ZN12Adafruit_GFX9writeLineEiiiij+0x1f4>
    29dc:	2f 89       	ldd	r18, Y+23	; 0x17
    29de:	38 8d       	ldd	r19, Y+24	; 0x18
    29e0:	8b 81       	ldd	r24, Y+3	; 0x03
    29e2:	9c 81       	ldd	r25, Y+4	; 0x04
    29e4:	82 0f       	add	r24, r18
    29e6:	93 1f       	adc	r25, r19
    29e8:	98 8f       	std	Y+24, r25	; 0x18
    29ea:	8f 8b       	std	Y+23, r24	; 0x17
    29ec:	29 81       	ldd	r18, Y+1	; 0x01
    29ee:	3a 81       	ldd	r19, Y+2	; 0x02
    29f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f2:	98 89       	ldd	r25, Y+16	; 0x10
    29f4:	82 0f       	add	r24, r18
    29f6:	93 1f       	adc	r25, r19
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	8d 89       	ldd	r24, Y+21	; 0x15
    29fe:	9e 89       	ldd	r25, Y+22	; 0x16
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	9e 8b       	std	Y+22, r25	; 0x16
    2a04:	8d 8b       	std	Y+21, r24	; 0x15
    2a06:	ab cf       	rjmp	.-170    	; 0x295e <_ZN12Adafruit_GFX9writeLineEiiiij+0x156>
    2a08:	00 00       	nop
    2a0a:	6e 96       	adiw	r28, 0x1e	; 30
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	ff 90       	pop	r15
    2a20:	ef 90       	pop	r14
    2a22:	08 95       	ret

00002a24 <_ZN12Adafruit_GFX10startWriteEv>:
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	1f 92       	push	r1
    2a2a:	1f 92       	push	r1
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	00 00       	nop
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	08 95       	ret

00002a40 <_ZN12Adafruit_GFX10writePixelEiij>:
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	28 97       	sbiw	r28, 0x08	; 8
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	7c 83       	std	Y+4, r23	; 0x04
    2a5a:	6b 83       	std	Y+3, r22	; 0x03
    2a5c:	5e 83       	std	Y+6, r21	; 0x06
    2a5e:	4d 83       	std	Y+5, r20	; 0x05
    2a60:	38 87       	std	Y+8, r19	; 0x08
    2a62:	2f 83       	std	Y+7, r18	; 0x07
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
    2a68:	dc 01       	movw	r26, r24
    2a6a:	8d 91       	ld	r24, X+
    2a6c:	9c 91       	ld	r25, X
    2a6e:	08 96       	adiw	r24, 0x08	; 8
    2a70:	dc 01       	movw	r26, r24
    2a72:	ed 91       	ld	r30, X+
    2a74:	fc 91       	ld	r31, X
    2a76:	2f 81       	ldd	r18, Y+7	; 0x07
    2a78:	38 85       	ldd	r19, Y+8	; 0x08
    2a7a:	4d 81       	ldd	r20, Y+5	; 0x05
    2a7c:	5e 81       	ldd	r21, Y+6	; 0x06
    2a7e:	6b 81       	ldd	r22, Y+3	; 0x03
    2a80:	7c 81       	ldd	r23, Y+4	; 0x04
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	19 95       	eicall
    2a88:	00 00       	nop
    2a8a:	28 96       	adiw	r28, 0x08	; 8
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	08 95       	ret

00002a9c <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	2a 97       	sbiw	r28, 0x0a	; 10
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	7c 83       	std	Y+4, r23	; 0x04
    2aba:	6b 83       	std	Y+3, r22	; 0x03
    2abc:	5e 83       	std	Y+6, r21	; 0x06
    2abe:	4d 83       	std	Y+5, r20	; 0x05
    2ac0:	38 87       	std	Y+8, r19	; 0x08
    2ac2:	2f 83       	std	Y+7, r18	; 0x07
    2ac4:	1a 87       	std	Y+10, r17	; 0x0a
    2ac6:	09 87       	std	Y+9, r16	; 0x09
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	dc 01       	movw	r26, r24
    2ace:	8d 91       	ld	r24, X+
    2ad0:	9c 91       	ld	r25, X
    2ad2:	4c 96       	adiw	r24, 0x1c	; 28
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	ed 91       	ld	r30, X+
    2ad8:	fc 91       	ld	r31, X
    2ada:	a9 85       	ldd	r26, Y+9	; 0x09
    2adc:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ade:	2f 81       	ldd	r18, Y+7	; 0x07
    2ae0:	38 85       	ldd	r19, Y+8	; 0x08
    2ae2:	4d 81       	ldd	r20, Y+5	; 0x05
    2ae4:	5e 81       	ldd	r21, Y+6	; 0x06
    2ae6:	6b 81       	ldd	r22, Y+3	; 0x03
    2ae8:	7c 81       	ldd	r23, Y+4	; 0x04
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	9a 81       	ldd	r25, Y+2	; 0x02
    2aee:	8d 01       	movw	r16, r26
    2af0:	19 95       	eicall
    2af2:	00 00       	nop
    2af4:	2a 96       	adiw	r28, 0x0a	; 10
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	08 95       	ret

00002b0a <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	2a 97       	sbiw	r28, 0x0a	; 10
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	9a 83       	std	Y+2, r25	; 0x02
    2b24:	89 83       	std	Y+1, r24	; 0x01
    2b26:	7c 83       	std	Y+4, r23	; 0x04
    2b28:	6b 83       	std	Y+3, r22	; 0x03
    2b2a:	5e 83       	std	Y+6, r21	; 0x06
    2b2c:	4d 83       	std	Y+5, r20	; 0x05
    2b2e:	38 87       	std	Y+8, r19	; 0x08
    2b30:	2f 83       	std	Y+7, r18	; 0x07
    2b32:	1a 87       	std	Y+10, r17	; 0x0a
    2b34:	09 87       	std	Y+9, r16	; 0x09
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	8d 91       	ld	r24, X+
    2b3e:	9c 91       	ld	r25, X
    2b40:	4e 96       	adiw	r24, 0x1e	; 30
    2b42:	dc 01       	movw	r26, r24
    2b44:	ed 91       	ld	r30, X+
    2b46:	fc 91       	ld	r31, X
    2b48:	a9 85       	ldd	r26, Y+9	; 0x09
    2b4a:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b4c:	2f 81       	ldd	r18, Y+7	; 0x07
    2b4e:	38 85       	ldd	r19, Y+8	; 0x08
    2b50:	4d 81       	ldd	r20, Y+5	; 0x05
    2b52:	5e 81       	ldd	r21, Y+6	; 0x06
    2b54:	6b 81       	ldd	r22, Y+3	; 0x03
    2b56:	7c 81       	ldd	r23, Y+4	; 0x04
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5c:	8d 01       	movw	r16, r26
    2b5e:	19 95       	eicall
    2b60:	00 00       	nop
    2b62:	2a 96       	adiw	r28, 0x0a	; 10
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	08 95       	ret

00002b78 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    2b78:	ef 92       	push	r14
    2b7a:	ff 92       	push	r15
    2b7c:	0f 93       	push	r16
    2b7e:	1f 93       	push	r17
    2b80:	cf 93       	push	r28
    2b82:	df 93       	push	r29
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	2c 97       	sbiw	r28, 0x0c	; 12
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	9a 83       	std	Y+2, r25	; 0x02
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	7c 83       	std	Y+4, r23	; 0x04
    2b9a:	6b 83       	std	Y+3, r22	; 0x03
    2b9c:	5e 83       	std	Y+6, r21	; 0x06
    2b9e:	4d 83       	std	Y+5, r20	; 0x05
    2ba0:	38 87       	std	Y+8, r19	; 0x08
    2ba2:	2f 83       	std	Y+7, r18	; 0x07
    2ba4:	1a 87       	std	Y+10, r17	; 0x0a
    2ba6:	09 87       	std	Y+9, r16	; 0x09
    2ba8:	fc 86       	std	Y+12, r15	; 0x0c
    2baa:	eb 86       	std	Y+11, r14	; 0x0b
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	8d 91       	ld	r24, X+
    2bb4:	9c 91       	ld	r25, X
    2bb6:	80 96       	adiw	r24, 0x20	; 32
    2bb8:	dc 01       	movw	r26, r24
    2bba:	ed 91       	ld	r30, X+
    2bbc:	fc 91       	ld	r31, X
    2bbe:	0b 85       	ldd	r16, Y+11	; 0x0b
    2bc0:	1c 85       	ldd	r17, Y+12	; 0x0c
    2bc2:	a9 85       	ldd	r26, Y+9	; 0x09
    2bc4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2bc6:	2f 81       	ldd	r18, Y+7	; 0x07
    2bc8:	38 85       	ldd	r19, Y+8	; 0x08
    2bca:	4d 81       	ldd	r20, Y+5	; 0x05
    2bcc:	5e 81       	ldd	r21, Y+6	; 0x06
    2bce:	6b 81       	ldd	r22, Y+3	; 0x03
    2bd0:	7c 81       	ldd	r23, Y+4	; 0x04
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	78 01       	movw	r14, r16
    2bd8:	8d 01       	movw	r16, r26
    2bda:	19 95       	eicall
    2bdc:	00 00       	nop
    2bde:	2c 96       	adiw	r28, 0x0c	; 12
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	1f 91       	pop	r17
    2bf0:	0f 91       	pop	r16
    2bf2:	ff 90       	pop	r15
    2bf4:	ef 90       	pop	r14
    2bf6:	08 95       	ret

00002bf8 <_ZN12Adafruit_GFX8endWriteEv>:
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	1f 92       	push	r1
    2bfe:	1f 92       	push	r1
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
    2c08:	00 00       	nop
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	08 95       	ret

00002c14 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    2c14:	ef 92       	push	r14
    2c16:	ff 92       	push	r15
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	cd b7       	in	r28, 0x3d	; 61
    2c22:	de b7       	in	r29, 0x3e	; 62
    2c24:	2a 97       	sbiw	r28, 0x0a	; 10
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	89 83       	std	Y+1, r24	; 0x01
    2c34:	7c 83       	std	Y+4, r23	; 0x04
    2c36:	6b 83       	std	Y+3, r22	; 0x03
    2c38:	5e 83       	std	Y+6, r21	; 0x06
    2c3a:	4d 83       	std	Y+5, r20	; 0x05
    2c3c:	38 87       	std	Y+8, r19	; 0x08
    2c3e:	2f 83       	std	Y+7, r18	; 0x07
    2c40:	1a 87       	std	Y+10, r17	; 0x0a
    2c42:	09 87       	std	Y+9, r16	; 0x09
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	dc 01       	movw	r26, r24
    2c4a:	8d 91       	ld	r24, X+
    2c4c:	9c 91       	ld	r25, X
    2c4e:	0a 96       	adiw	r24, 0x0a	; 10
    2c50:	fc 01       	movw	r30, r24
    2c52:	20 81       	ld	r18, Z
    2c54:	31 81       	ldd	r19, Z+1	; 0x01
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	f9 01       	movw	r30, r18
    2c5c:	19 95       	eicall
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	dc 01       	movw	r26, r24
    2c64:	8d 91       	ld	r24, X+
    2c66:	9c 91       	ld	r25, X
    2c68:	44 96       	adiw	r24, 0x14	; 20
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	ed 91       	ld	r30, X+
    2c6e:	fc 91       	ld	r31, X
    2c70:	2d 81       	ldd	r18, Y+5	; 0x05
    2c72:	3e 81       	ldd	r19, Y+6	; 0x06
    2c74:	8f 81       	ldd	r24, Y+7	; 0x07
    2c76:	98 85       	ldd	r25, Y+8	; 0x08
    2c78:	82 0f       	add	r24, r18
    2c7a:	93 1f       	adc	r25, r19
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	11 97       	sbiw	r26, 0x01	; 1
    2c80:	09 85       	ldd	r16, Y+9	; 0x09
    2c82:	1a 85       	ldd	r17, Y+10	; 0x0a
    2c84:	2b 81       	ldd	r18, Y+3	; 0x03
    2c86:	3c 81       	ldd	r19, Y+4	; 0x04
    2c88:	4d 81       	ldd	r20, Y+5	; 0x05
    2c8a:	5e 81       	ldd	r21, Y+6	; 0x06
    2c8c:	6b 81       	ldd	r22, Y+3	; 0x03
    2c8e:	7c 81       	ldd	r23, Y+4	; 0x04
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	78 01       	movw	r14, r16
    2c96:	8d 01       	movw	r16, r26
    2c98:	19 95       	eicall
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	46 96       	adiw	r24, 0x16	; 22
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	2d 91       	ld	r18, X+
    2caa:	3c 91       	ld	r19, X
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb0:	f9 01       	movw	r30, r18
    2cb2:	19 95       	eicall
    2cb4:	00 00       	nop
    2cb6:	2a 96       	adiw	r28, 0x0a	; 10
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	1f 91       	pop	r17
    2cc8:	0f 91       	pop	r16
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	08 95       	ret

00002cd0 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    2cd0:	ef 92       	push	r14
    2cd2:	ff 92       	push	r15
    2cd4:	0f 93       	push	r16
    2cd6:	1f 93       	push	r17
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	2a 97       	sbiw	r28, 0x0a	; 10
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	7c 83       	std	Y+4, r23	; 0x04
    2cf2:	6b 83       	std	Y+3, r22	; 0x03
    2cf4:	5e 83       	std	Y+6, r21	; 0x06
    2cf6:	4d 83       	std	Y+5, r20	; 0x05
    2cf8:	38 87       	std	Y+8, r19	; 0x08
    2cfa:	2f 83       	std	Y+7, r18	; 0x07
    2cfc:	1a 87       	std	Y+10, r17	; 0x0a
    2cfe:	09 87       	std	Y+9, r16	; 0x09
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	dc 01       	movw	r26, r24
    2d06:	8d 91       	ld	r24, X+
    2d08:	9c 91       	ld	r25, X
    2d0a:	0a 96       	adiw	r24, 0x0a	; 10
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	20 81       	ld	r18, Z
    2d10:	31 81       	ldd	r19, Z+1	; 0x01
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	f9 01       	movw	r30, r18
    2d18:	19 95       	eicall
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	dc 01       	movw	r26, r24
    2d20:	8d 91       	ld	r24, X+
    2d22:	9c 91       	ld	r25, X
    2d24:	44 96       	adiw	r24, 0x14	; 20
    2d26:	dc 01       	movw	r26, r24
    2d28:	ed 91       	ld	r30, X+
    2d2a:	fc 91       	ld	r31, X
    2d2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d30:	8f 81       	ldd	r24, Y+7	; 0x07
    2d32:	98 85       	ldd	r25, Y+8	; 0x08
    2d34:	82 0f       	add	r24, r18
    2d36:	93 1f       	adc	r25, r19
    2d38:	9c 01       	movw	r18, r24
    2d3a:	21 50       	subi	r18, 0x01	; 1
    2d3c:	31 09       	sbc	r19, r1
    2d3e:	09 85       	ldd	r16, Y+9	; 0x09
    2d40:	1a 85       	ldd	r17, Y+10	; 0x0a
    2d42:	ad 81       	ldd	r26, Y+5	; 0x05
    2d44:	be 81       	ldd	r27, Y+6	; 0x06
    2d46:	4d 81       	ldd	r20, Y+5	; 0x05
    2d48:	5e 81       	ldd	r21, Y+6	; 0x06
    2d4a:	6b 81       	ldd	r22, Y+3	; 0x03
    2d4c:	7c 81       	ldd	r23, Y+4	; 0x04
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	78 01       	movw	r14, r16
    2d54:	8d 01       	movw	r16, r26
    2d56:	19 95       	eicall
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	46 96       	adiw	r24, 0x16	; 22
    2d64:	dc 01       	movw	r26, r24
    2d66:	2d 91       	ld	r18, X+
    2d68:	3c 91       	ld	r19, X
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	f9 01       	movw	r30, r18
    2d70:	19 95       	eicall
    2d72:	00 00       	nop
    2d74:	2a 96       	adiw	r28, 0x0a	; 10
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	1f 91       	pop	r17
    2d86:	0f 91       	pop	r16
    2d88:	ff 90       	pop	r15
    2d8a:	ef 90       	pop	r14
    2d8c:	08 95       	ret

00002d8e <_ZN12Adafruit_GFX8fillRectEiiiij>:
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	2e 97       	sbiw	r28, 0x0e	; 14
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	9c 83       	std	Y+4, r25	; 0x04
    2dac:	8b 83       	std	Y+3, r24	; 0x03
    2dae:	7e 83       	std	Y+6, r23	; 0x06
    2db0:	6d 83       	std	Y+5, r22	; 0x05
    2db2:	58 87       	std	Y+8, r21	; 0x08
    2db4:	4f 83       	std	Y+7, r20	; 0x07
    2db6:	3a 87       	std	Y+10, r19	; 0x0a
    2db8:	29 87       	std	Y+9, r18	; 0x09
    2dba:	1c 87       	std	Y+12, r17	; 0x0c
    2dbc:	0b 87       	std	Y+11, r16	; 0x0b
    2dbe:	fe 86       	std	Y+14, r15	; 0x0e
    2dc0:	ed 86       	std	Y+13, r14	; 0x0d
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	8d 91       	ld	r24, X+
    2dca:	9c 91       	ld	r25, X
    2dcc:	0a 96       	adiw	r24, 0x0a	; 10
    2dce:	fc 01       	movw	r30, r24
    2dd0:	20 81       	ld	r18, Z
    2dd2:	31 81       	ldd	r19, Z+1	; 0x01
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	f9 01       	movw	r30, r18
    2dda:	19 95       	eicall
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	9e 81       	ldd	r25, Y+6	; 0x06
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	2d 81       	ldd	r18, Y+5	; 0x05
    2de6:	3e 81       	ldd	r19, Y+6	; 0x06
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	28 0f       	add	r18, r24
    2dee:	39 1f       	adc	r19, r25
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	82 17       	cp	r24, r18
    2df6:	93 07       	cpc	r25, r19
    2df8:	dc f4       	brge	.+54     	; 0x2e30 <_ZN12Adafruit_GFX8fillRectEiiiij+0xa2>
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfe:	dc 01       	movw	r26, r24
    2e00:	8d 91       	ld	r24, X+
    2e02:	9c 91       	ld	r25, X
    2e04:	40 96       	adiw	r24, 0x10	; 16
    2e06:	dc 01       	movw	r26, r24
    2e08:	ed 91       	ld	r30, X+
    2e0a:	fc 91       	ld	r31, X
    2e0c:	ad 85       	ldd	r26, Y+13	; 0x0d
    2e0e:	be 85       	ldd	r27, Y+14	; 0x0e
    2e10:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e12:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e14:	4f 81       	ldd	r20, Y+7	; 0x07
    2e16:	58 85       	ldd	r21, Y+8	; 0x08
    2e18:	69 81       	ldd	r22, Y+1	; 0x01
    2e1a:	7a 81       	ldd	r23, Y+2	; 0x02
    2e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e20:	8d 01       	movw	r16, r26
    2e22:	19 95       	eicall
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	9a 81       	ldd	r25, Y+2	; 0x02
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	da cf       	rjmp	.-76     	; 0x2de4 <_ZN12Adafruit_GFX8fillRectEiiiij+0x56>
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	fc 01       	movw	r30, r24
    2e36:	80 81       	ld	r24, Z
    2e38:	91 81       	ldd	r25, Z+1	; 0x01
    2e3a:	46 96       	adiw	r24, 0x16	; 22
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	2d 91       	ld	r18, X+
    2e40:	3c 91       	ld	r19, X
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	9c 81       	ldd	r25, Y+4	; 0x04
    2e46:	f9 01       	movw	r30, r18
    2e48:	19 95       	eicall
    2e4a:	00 00       	nop
    2e4c:	2e 96       	adiw	r28, 0x0e	; 14
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	08 95       	ret

00002e66 <_ZN12Adafruit_GFX10fillScreenEj>:
    2e66:	ef 92       	push	r14
    2e68:	ff 92       	push	r15
    2e6a:	0f 93       	push	r16
    2e6c:	1f 93       	push	r17
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	00 d0       	rcall	.+0      	; 0x2e74 <_ZN12Adafruit_GFX10fillScreenEj+0xe>
    2e74:	1f 92       	push	r1
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	9a 83       	std	Y+2, r25	; 0x02
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	7c 83       	std	Y+4, r23	; 0x04
    2e80:	6b 83       	std	Y+3, r22	; 0x03
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	dc 01       	movw	r26, r24
    2e88:	8d 91       	ld	r24, X+
    2e8a:	9c 91       	ld	r25, X
    2e8c:	80 96       	adiw	r24, 0x20	; 32
    2e8e:	dc 01       	movw	r26, r24
    2e90:	ed 91       	ld	r30, X+
    2e92:	fc 91       	ld	r31, X
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	9a 81       	ldd	r25, Y+2	; 0x02
    2e98:	dc 01       	movw	r26, r24
    2e9a:	1a 96       	adiw	r26, 0x0a	; 10
    2e9c:	4d 91       	ld	r20, X+
    2e9e:	5c 91       	ld	r21, X
    2ea0:	1b 97       	sbiw	r26, 0x0b	; 11
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	18 96       	adiw	r26, 0x08	; 8
    2eaa:	2d 91       	ld	r18, X+
    2eac:	3c 91       	ld	r19, X
    2eae:	19 97       	sbiw	r26, 0x09	; 9
    2eb0:	6b 81       	ldd	r22, Y+3	; 0x03
    2eb2:	7c 81       	ldd	r23, Y+4	; 0x04
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb8:	7b 01       	movw	r14, r22
    2eba:	8a 01       	movw	r16, r20
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	50 e0       	ldi	r21, 0x00	; 0
    2ec0:	60 e0       	ldi	r22, 0x00	; 0
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	19 95       	eicall
    2ec6:	00 00       	nop
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	08 95       	ret

00002ede <_ZN12Adafruit_GFX8drawLineEiiiij>:
    2ede:	ef 92       	push	r14
    2ee0:	ff 92       	push	r15
    2ee2:	0f 93       	push	r16
    2ee4:	1f 93       	push	r17
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	60 97       	sbiw	r28, 0x10	; 16
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	9e 83       	std	Y+6, r25	; 0x06
    2efc:	8d 83       	std	Y+5, r24	; 0x05
    2efe:	78 87       	std	Y+8, r23	; 0x08
    2f00:	6f 83       	std	Y+7, r22	; 0x07
    2f02:	5a 87       	std	Y+10, r21	; 0x0a
    2f04:	49 87       	std	Y+9, r20	; 0x09
    2f06:	3c 87       	std	Y+12, r19	; 0x0c
    2f08:	2b 87       	std	Y+11, r18	; 0x0b
    2f0a:	1e 87       	std	Y+14, r17	; 0x0e
    2f0c:	0d 87       	std	Y+13, r16	; 0x0d
    2f0e:	f8 8a       	std	Y+16, r15	; 0x10
    2f10:	ef 86       	std	Y+15, r14	; 0x0f
    2f12:	2f 81       	ldd	r18, Y+7	; 0x07
    2f14:	38 85       	ldd	r19, Y+8	; 0x08
    2f16:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f18:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f1a:	28 17       	cp	r18, r24
    2f1c:	39 07       	cpc	r19, r25
    2f1e:	91 f5       	brne	.+100    	; 0x2f84 <_ZN12Adafruit_GFX8drawLineEiiiij+0xa6>
    2f20:	29 85       	ldd	r18, Y+9	; 0x09
    2f22:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f28:	82 17       	cp	r24, r18
    2f2a:	93 07       	cpc	r25, r19
    2f2c:	64 f4       	brge	.+24     	; 0x2f46 <_ZN12Adafruit_GFX8drawLineEiiiij+0x68>
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	9a 83       	std	Y+2, r25	; 0x02
    2f34:	89 83       	std	Y+1, r24	; 0x01
    2f36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3a:	9a 87       	std	Y+10, r25	; 0x0a
    2f3c:	89 87       	std	Y+9, r24	; 0x09
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	9e 87       	std	Y+14, r25	; 0x0e
    2f44:	8d 87       	std	Y+13, r24	; 0x0d
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	8d 91       	ld	r24, X+
    2f4e:	9c 91       	ld	r25, X
    2f50:	4c 96       	adiw	r24, 0x1c	; 28
    2f52:	dc 01       	movw	r26, r24
    2f54:	ed 91       	ld	r30, X+
    2f56:	fc 91       	ld	r31, X
    2f58:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f5a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f5c:	89 85       	ldd	r24, Y+9	; 0x09
    2f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f60:	a9 01       	movw	r20, r18
    2f62:	48 1b       	sub	r20, r24
    2f64:	59 0b       	sbc	r21, r25
    2f66:	ca 01       	movw	r24, r20
    2f68:	9c 01       	movw	r18, r24
    2f6a:	2f 5f       	subi	r18, 0xFF	; 255
    2f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f6e:	af 85       	ldd	r26, Y+15	; 0x0f
    2f70:	b8 89       	ldd	r27, Y+16	; 0x10
    2f72:	49 85       	ldd	r20, Y+9	; 0x09
    2f74:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7e:	8d 01       	movw	r16, r26
    2f80:	19 95       	eicall
    2f82:	6b c0       	rjmp	.+214    	; 0x305a <_ZN12Adafruit_GFX8drawLineEiiiij+0x17c>
    2f84:	29 85       	ldd	r18, Y+9	; 0x09
    2f86:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8c:	28 17       	cp	r18, r24
    2f8e:	39 07       	cpc	r19, r25
    2f90:	91 f5       	brne	.+100    	; 0x2ff6 <_ZN12Adafruit_GFX8drawLineEiiiij+0x118>
    2f92:	2f 81       	ldd	r18, Y+7	; 0x07
    2f94:	38 85       	ldd	r19, Y+8	; 0x08
    2f96:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f98:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f9a:	82 17       	cp	r24, r18
    2f9c:	93 07       	cpc	r25, r19
    2f9e:	64 f4       	brge	.+24     	; 0x2fb8 <_ZN12Adafruit_GFX8drawLineEiiiij+0xda>
    2fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fa2:	98 85       	ldd	r25, Y+8	; 0x08
    2fa4:	9c 83       	std	Y+4, r25	; 0x04
    2fa6:	8b 83       	std	Y+3, r24	; 0x03
    2fa8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2faa:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fac:	98 87       	std	Y+8, r25	; 0x08
    2fae:	8f 83       	std	Y+7, r24	; 0x07
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb4:	9c 87       	std	Y+12, r25	; 0x0c
    2fb6:	8b 87       	std	Y+11, r24	; 0x0b
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	8d 91       	ld	r24, X+
    2fc0:	9c 91       	ld	r25, X
    2fc2:	4e 96       	adiw	r24, 0x1e	; 30
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	ed 91       	ld	r30, X+
    2fc8:	fc 91       	ld	r31, X
    2fca:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fcc:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fce:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd0:	98 85       	ldd	r25, Y+8	; 0x08
    2fd2:	a9 01       	movw	r20, r18
    2fd4:	48 1b       	sub	r20, r24
    2fd6:	59 0b       	sbc	r21, r25
    2fd8:	ca 01       	movw	r24, r20
    2fda:	9c 01       	movw	r18, r24
    2fdc:	2f 5f       	subi	r18, 0xFF	; 255
    2fde:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe0:	af 85       	ldd	r26, Y+15	; 0x0f
    2fe2:	b8 89       	ldd	r27, Y+16	; 0x10
    2fe4:	49 85       	ldd	r20, Y+9	; 0x09
    2fe6:	5a 85       	ldd	r21, Y+10	; 0x0a
    2fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fea:	78 85       	ldd	r23, Y+8	; 0x08
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff0:	8d 01       	movw	r16, r26
    2ff2:	19 95       	eicall
    2ff4:	32 c0       	rjmp	.+100    	; 0x305a <_ZN12Adafruit_GFX8drawLineEiiiij+0x17c>
    2ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	8d 91       	ld	r24, X+
    2ffe:	9c 91       	ld	r25, X
    3000:	0a 96       	adiw	r24, 0x0a	; 10
    3002:	fc 01       	movw	r30, r24
    3004:	20 81       	ld	r18, Z
    3006:	31 81       	ldd	r19, Z+1	; 0x01
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	f9 01       	movw	r30, r18
    300e:	19 95       	eicall
    3010:	8d 81       	ldd	r24, Y+5	; 0x05
    3012:	9e 81       	ldd	r25, Y+6	; 0x06
    3014:	dc 01       	movw	r26, r24
    3016:	8d 91       	ld	r24, X+
    3018:	9c 91       	ld	r25, X
    301a:	44 96       	adiw	r24, 0x14	; 20
    301c:	dc 01       	movw	r26, r24
    301e:	ed 91       	ld	r30, X+
    3020:	fc 91       	ld	r31, X
    3022:	0f 85       	ldd	r16, Y+15	; 0x0f
    3024:	18 89       	ldd	r17, Y+16	; 0x10
    3026:	ad 85       	ldd	r26, Y+13	; 0x0d
    3028:	be 85       	ldd	r27, Y+14	; 0x0e
    302a:	2b 85       	ldd	r18, Y+11	; 0x0b
    302c:	3c 85       	ldd	r19, Y+12	; 0x0c
    302e:	49 85       	ldd	r20, Y+9	; 0x09
    3030:	5a 85       	ldd	r21, Y+10	; 0x0a
    3032:	6f 81       	ldd	r22, Y+7	; 0x07
    3034:	78 85       	ldd	r23, Y+8	; 0x08
    3036:	8d 81       	ldd	r24, Y+5	; 0x05
    3038:	9e 81       	ldd	r25, Y+6	; 0x06
    303a:	78 01       	movw	r14, r16
    303c:	8d 01       	movw	r16, r26
    303e:	19 95       	eicall
    3040:	8d 81       	ldd	r24, Y+5	; 0x05
    3042:	9e 81       	ldd	r25, Y+6	; 0x06
    3044:	fc 01       	movw	r30, r24
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	46 96       	adiw	r24, 0x16	; 22
    304c:	dc 01       	movw	r26, r24
    304e:	2d 91       	ld	r18, X+
    3050:	3c 91       	ld	r19, X
    3052:	8d 81       	ldd	r24, Y+5	; 0x05
    3054:	9e 81       	ldd	r25, Y+6	; 0x06
    3056:	f9 01       	movw	r30, r18
    3058:	19 95       	eicall
    305a:	00 00       	nop
    305c:	60 96       	adiw	r28, 0x10	; 16
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	1f 91       	pop	r17
    306e:	0f 91       	pop	r16
    3070:	ff 90       	pop	r15
    3072:	ef 90       	pop	r14
    3074:	08 95       	ret

00003076 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	2c 97       	sbiw	r28, 0x0c	; 12
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
    3092:	9a 83       	std	Y+2, r25	; 0x02
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	7c 83       	std	Y+4, r23	; 0x04
    3098:	6b 83       	std	Y+3, r22	; 0x03
    309a:	5e 83       	std	Y+6, r21	; 0x06
    309c:	4d 83       	std	Y+5, r20	; 0x05
    309e:	38 87       	std	Y+8, r19	; 0x08
    30a0:	2f 83       	std	Y+7, r18	; 0x07
    30a2:	1a 87       	std	Y+10, r17	; 0x0a
    30a4:	09 87       	std	Y+9, r16	; 0x09
    30a6:	fc 86       	std	Y+12, r15	; 0x0c
    30a8:	eb 86       	std	Y+11, r14	; 0x0b
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	9a 81       	ldd	r25, Y+2	; 0x02
    30ae:	dc 01       	movw	r26, r24
    30b0:	8d 91       	ld	r24, X+
    30b2:	9c 91       	ld	r25, X
    30b4:	0a 96       	adiw	r24, 0x0a	; 10
    30b6:	fc 01       	movw	r30, r24
    30b8:	20 81       	ld	r18, Z
    30ba:	31 81       	ldd	r19, Z+1	; 0x01
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	f9 01       	movw	r30, r18
    30c2:	19 95       	eicall
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	9a 81       	ldd	r25, Y+2	; 0x02
    30c8:	dc 01       	movw	r26, r24
    30ca:	8d 91       	ld	r24, X+
    30cc:	9c 91       	ld	r25, X
    30ce:	42 96       	adiw	r24, 0x12	; 18
    30d0:	dc 01       	movw	r26, r24
    30d2:	ed 91       	ld	r30, X+
    30d4:	fc 91       	ld	r31, X
    30d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    30d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    30da:	2f 81       	ldd	r18, Y+7	; 0x07
    30dc:	38 85       	ldd	r19, Y+8	; 0x08
    30de:	4d 81       	ldd	r20, Y+5	; 0x05
    30e0:	5e 81       	ldd	r21, Y+6	; 0x06
    30e2:	6b 81       	ldd	r22, Y+3	; 0x03
    30e4:	7c 81       	ldd	r23, Y+4	; 0x04
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	8d 01       	movw	r16, r26
    30ec:	19 95       	eicall
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	9a 81       	ldd	r25, Y+2	; 0x02
    30f2:	fc 01       	movw	r30, r24
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	42 96       	adiw	r24, 0x12	; 18
    30fa:	dc 01       	movw	r26, r24
    30fc:	ed 91       	ld	r30, X+
    30fe:	fc 91       	ld	r31, X
    3100:	2d 81       	ldd	r18, Y+5	; 0x05
    3102:	3e 81       	ldd	r19, Y+6	; 0x06
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	82 0f       	add	r24, r18
    310a:	93 1f       	adc	r25, r19
    310c:	ac 01       	movw	r20, r24
    310e:	41 50       	subi	r20, 0x01	; 1
    3110:	51 09       	sbc	r21, r1
    3112:	ab 85       	ldd	r26, Y+11	; 0x0b
    3114:	bc 85       	ldd	r27, Y+12	; 0x0c
    3116:	2f 81       	ldd	r18, Y+7	; 0x07
    3118:	38 85       	ldd	r19, Y+8	; 0x08
    311a:	6b 81       	ldd	r22, Y+3	; 0x03
    311c:	7c 81       	ldd	r23, Y+4	; 0x04
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	8d 01       	movw	r16, r26
    3124:	19 95       	eicall
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	9a 81       	ldd	r25, Y+2	; 0x02
    312a:	fc 01       	movw	r30, r24
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	40 96       	adiw	r24, 0x10	; 16
    3132:	dc 01       	movw	r26, r24
    3134:	ed 91       	ld	r30, X+
    3136:	fc 91       	ld	r31, X
    3138:	ab 85       	ldd	r26, Y+11	; 0x0b
    313a:	bc 85       	ldd	r27, Y+12	; 0x0c
    313c:	29 85       	ldd	r18, Y+9	; 0x09
    313e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3140:	4d 81       	ldd	r20, Y+5	; 0x05
    3142:	5e 81       	ldd	r21, Y+6	; 0x06
    3144:	6b 81       	ldd	r22, Y+3	; 0x03
    3146:	7c 81       	ldd	r23, Y+4	; 0x04
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	8d 01       	movw	r16, r26
    314e:	19 95       	eicall
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	9a 81       	ldd	r25, Y+2	; 0x02
    3154:	fc 01       	movw	r30, r24
    3156:	80 81       	ld	r24, Z
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	40 96       	adiw	r24, 0x10	; 16
    315c:	dc 01       	movw	r26, r24
    315e:	ed 91       	ld	r30, X+
    3160:	fc 91       	ld	r31, X
    3162:	2b 81       	ldd	r18, Y+3	; 0x03
    3164:	3c 81       	ldd	r19, Y+4	; 0x04
    3166:	8f 81       	ldd	r24, Y+7	; 0x07
    3168:	98 85       	ldd	r25, Y+8	; 0x08
    316a:	82 0f       	add	r24, r18
    316c:	93 1f       	adc	r25, r19
    316e:	bc 01       	movw	r22, r24
    3170:	61 50       	subi	r22, 0x01	; 1
    3172:	71 09       	sbc	r23, r1
    3174:	ab 85       	ldd	r26, Y+11	; 0x0b
    3176:	bc 85       	ldd	r27, Y+12	; 0x0c
    3178:	29 85       	ldd	r18, Y+9	; 0x09
    317a:	3a 85       	ldd	r19, Y+10	; 0x0a
    317c:	4d 81       	ldd	r20, Y+5	; 0x05
    317e:	5e 81       	ldd	r21, Y+6	; 0x06
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	9a 81       	ldd	r25, Y+2	; 0x02
    3184:	8d 01       	movw	r16, r26
    3186:	19 95       	eicall
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	9a 81       	ldd	r25, Y+2	; 0x02
    318c:	fc 01       	movw	r30, r24
    318e:	80 81       	ld	r24, Z
    3190:	91 81       	ldd	r25, Z+1	; 0x01
    3192:	46 96       	adiw	r24, 0x16	; 22
    3194:	dc 01       	movw	r26, r24
    3196:	2d 91       	ld	r18, X+
    3198:	3c 91       	ld	r19, X
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	f9 01       	movw	r30, r18
    31a0:	19 95       	eicall
    31a2:	00 00       	nop
    31a4:	2c 96       	adiw	r28, 0x0c	; 12
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	ff 90       	pop	r15
    31ba:	ef 90       	pop	r14
    31bc:	08 95       	ret

000031be <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    31be:	cf 92       	push	r12
    31c0:	df 92       	push	r13
    31c2:	ef 92       	push	r14
    31c4:	ff 92       	push	r15
    31c6:	0f 93       	push	r16
    31c8:	1f 93       	push	r17
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	68 97       	sbiw	r28, 0x18	; 24
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	9c 87       	std	Y+12, r25	; 0x0c
    31e0:	8b 87       	std	Y+11, r24	; 0x0b
    31e2:	7e 87       	std	Y+14, r23	; 0x0e
    31e4:	6d 87       	std	Y+13, r22	; 0x0d
    31e6:	58 8b       	std	Y+16, r21	; 0x10
    31e8:	4f 87       	std	Y+15, r20	; 0x0f
    31ea:	3a 8b       	std	Y+18, r19	; 0x12
    31ec:	29 8b       	std	Y+17, r18	; 0x11
    31ee:	1c 8b       	std	Y+20, r17	; 0x14
    31f0:	0b 8b       	std	Y+19, r16	; 0x13
    31f2:	fe 8a       	std	Y+22, r15	; 0x16
    31f4:	ed 8a       	std	Y+21, r14	; 0x15
    31f6:	d8 8e       	std	Y+24, r13	; 0x18
    31f8:	cf 8a       	std	Y+23, r12	; 0x17
    31fa:	8b 89       	ldd	r24, Y+19	; 0x13
    31fc:	9c 89       	ldd	r25, Y+20	; 0x14
    31fe:	07 96       	adiw	r24, 0x07	; 7
    3200:	99 23       	and	r25, r25
    3202:	0c f4       	brge	.+2      	; 0x3206 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x48>
    3204:	07 96       	adiw	r24, 0x07	; 7
    3206:	95 95       	asr	r25
    3208:	87 95       	ror	r24
    320a:	95 95       	asr	r25
    320c:	87 95       	ror	r24
    320e:	95 95       	asr	r25
    3210:	87 95       	ror	r24
    3212:	9f 83       	std	Y+7, r25	; 0x07
    3214:	8e 83       	std	Y+6, r24	; 0x06
    3216:	19 82       	std	Y+1, r1	; 0x01
    3218:	8b 85       	ldd	r24, Y+11	; 0x0b
    321a:	9c 85       	ldd	r25, Y+12	; 0x0c
    321c:	dc 01       	movw	r26, r24
    321e:	8d 91       	ld	r24, X+
    3220:	9c 91       	ld	r25, X
    3222:	0a 96       	adiw	r24, 0x0a	; 10
    3224:	fc 01       	movw	r30, r24
    3226:	20 81       	ld	r18, Z
    3228:	31 81       	ldd	r19, Z+1	; 0x01
    322a:	8b 85       	ldd	r24, Y+11	; 0x0b
    322c:	9c 85       	ldd	r25, Y+12	; 0x0c
    322e:	f9 01       	movw	r30, r18
    3230:	19 95       	eicall
    3232:	1b 82       	std	Y+3, r1	; 0x03
    3234:	1a 82       	std	Y+2, r1	; 0x02
    3236:	2a 81       	ldd	r18, Y+2	; 0x02
    3238:	3b 81       	ldd	r19, Y+3	; 0x03
    323a:	8d 89       	ldd	r24, Y+21	; 0x15
    323c:	9e 89       	ldd	r25, Y+22	; 0x16
    323e:	28 17       	cp	r18, r24
    3240:	39 07       	cpc	r19, r25
    3242:	0c f0       	brlt	.+2      	; 0x3246 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    3244:	65 c0       	rjmp	.+202    	; 0x3310 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x152>
    3246:	1d 82       	std	Y+5, r1	; 0x05
    3248:	1c 82       	std	Y+4, r1	; 0x04
    324a:	2c 81       	ldd	r18, Y+4	; 0x04
    324c:	3d 81       	ldd	r19, Y+5	; 0x05
    324e:	8b 89       	ldd	r24, Y+19	; 0x13
    3250:	9c 89       	ldd	r25, Y+20	; 0x14
    3252:	28 17       	cp	r18, r24
    3254:	39 07       	cpc	r19, r25
    3256:	0c f0       	brlt	.+2      	; 0x325a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x9c>
    3258:	50 c0       	rjmp	.+160    	; 0x32fa <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x13c>
    325a:	8c 81       	ldd	r24, Y+4	; 0x04
    325c:	9d 81       	ldd	r25, Y+5	; 0x05
    325e:	87 70       	andi	r24, 0x07	; 7
    3260:	99 27       	eor	r25, r25
    3262:	89 2b       	or	r24, r25
    3264:	21 f0       	breq	.+8      	; 0x326e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xb0>
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	88 0f       	add	r24, r24
    326a:	89 83       	std	Y+1, r24	; 0x01
    326c:	26 c0       	rjmp	.+76     	; 0x32ba <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfc>
    326e:	4a 81       	ldd	r20, Y+2	; 0x02
    3270:	5b 81       	ldd	r21, Y+3	; 0x03
    3272:	8e 81       	ldd	r24, Y+6	; 0x06
    3274:	9f 81       	ldd	r25, Y+7	; 0x07
    3276:	48 9f       	mul	r20, r24
    3278:	90 01       	movw	r18, r0
    327a:	49 9f       	mul	r20, r25
    327c:	30 0d       	add	r19, r0
    327e:	58 9f       	mul	r21, r24
    3280:	30 0d       	add	r19, r0
    3282:	11 24       	eor	r1, r1
    3284:	8c 81       	ldd	r24, Y+4	; 0x04
    3286:	9d 81       	ldd	r25, Y+5	; 0x05
    3288:	99 23       	and	r25, r25
    328a:	0c f4       	brge	.+2      	; 0x328e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xd0>
    328c:	07 96       	adiw	r24, 0x07	; 7
    328e:	95 95       	asr	r25
    3290:	87 95       	ror	r24
    3292:	95 95       	asr	r25
    3294:	87 95       	ror	r24
    3296:	95 95       	asr	r25
    3298:	87 95       	ror	r24
    329a:	82 0f       	add	r24, r18
    329c:	93 1f       	adc	r25, r19
    329e:	9c 01       	movw	r18, r24
    32a0:	89 89       	ldd	r24, Y+17	; 0x11
    32a2:	9a 89       	ldd	r25, Y+18	; 0x12
    32a4:	82 0f       	add	r24, r18
    32a6:	93 1f       	adc	r25, r19
    32a8:	99 87       	std	Y+9, r25	; 0x09
    32aa:	88 87       	std	Y+8, r24	; 0x08
    32ac:	88 85       	ldd	r24, Y+8	; 0x08
    32ae:	99 85       	ldd	r25, Y+9	; 0x09
    32b0:	fc 01       	movw	r30, r24
    32b2:	84 91       	lpm	r24, Z
    32b4:	8a 87       	std	Y+10, r24	; 0x0a
    32b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	88 23       	and	r24, r24
    32be:	bc f4       	brge	.+46     	; 0x32ee <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x130>
    32c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    32c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    32c4:	dc 01       	movw	r26, r24
    32c6:	8d 91       	ld	r24, X+
    32c8:	9c 91       	ld	r25, X
    32ca:	0c 96       	adiw	r24, 0x0c	; 12
    32cc:	dc 01       	movw	r26, r24
    32ce:	ed 91       	ld	r30, X+
    32d0:	fc 91       	ld	r31, X
    32d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    32d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    32d6:	8c 81       	ldd	r24, Y+4	; 0x04
    32d8:	9d 81       	ldd	r25, Y+5	; 0x05
    32da:	b9 01       	movw	r22, r18
    32dc:	68 0f       	add	r22, r24
    32de:	79 1f       	adc	r23, r25
    32e0:	2f 89       	ldd	r18, Y+23	; 0x17
    32e2:	38 8d       	ldd	r19, Y+24	; 0x18
    32e4:	4f 85       	ldd	r20, Y+15	; 0x0f
    32e6:	58 89       	ldd	r21, Y+16	; 0x10
    32e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    32ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    32ec:	19 95       	eicall
    32ee:	8c 81       	ldd	r24, Y+4	; 0x04
    32f0:	9d 81       	ldd	r25, Y+5	; 0x05
    32f2:	01 96       	adiw	r24, 0x01	; 1
    32f4:	9d 83       	std	Y+5, r25	; 0x05
    32f6:	8c 83       	std	Y+4, r24	; 0x04
    32f8:	a8 cf       	rjmp	.-176    	; 0x324a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x8c>
    32fa:	8a 81       	ldd	r24, Y+2	; 0x02
    32fc:	9b 81       	ldd	r25, Y+3	; 0x03
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	9b 83       	std	Y+3, r25	; 0x03
    3302:	8a 83       	std	Y+2, r24	; 0x02
    3304:	8f 85       	ldd	r24, Y+15	; 0x0f
    3306:	98 89       	ldd	r25, Y+16	; 0x10
    3308:	01 96       	adiw	r24, 0x01	; 1
    330a:	98 8b       	std	Y+16, r25	; 0x10
    330c:	8f 87       	std	Y+15, r24	; 0x0f
    330e:	93 cf       	rjmp	.-218    	; 0x3236 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x78>
    3310:	8b 85       	ldd	r24, Y+11	; 0x0b
    3312:	9c 85       	ldd	r25, Y+12	; 0x0c
    3314:	fc 01       	movw	r30, r24
    3316:	80 81       	ld	r24, Z
    3318:	91 81       	ldd	r25, Z+1	; 0x01
    331a:	46 96       	adiw	r24, 0x16	; 22
    331c:	dc 01       	movw	r26, r24
    331e:	2d 91       	ld	r18, X+
    3320:	3c 91       	ld	r19, X
    3322:	8b 85       	ldd	r24, Y+11	; 0x0b
    3324:	9c 85       	ldd	r25, Y+12	; 0x0c
    3326:	f9 01       	movw	r30, r18
    3328:	19 95       	eicall
    332a:	00 00       	nop
    332c:	68 96       	adiw	r28, 0x18	; 24
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	cd bf       	out	0x3d, r28	; 61
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	1f 91       	pop	r17
    333e:	0f 91       	pop	r16
    3340:	ff 90       	pop	r15
    3342:	ef 90       	pop	r14
    3344:	df 90       	pop	r13
    3346:	cf 90       	pop	r12
    3348:	08 95       	ret

0000334a <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    334a:	af 92       	push	r10
    334c:	cf 92       	push	r12
    334e:	df 92       	push	r13
    3350:	ef 92       	push	r14
    3352:	ff 92       	push	r15
    3354:	0f 93       	push	r16
    3356:	1f 93       	push	r17
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	eb 97       	sbiw	r28, 0x3b	; 59
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	98 ab       	std	Y+48, r25	; 0x30
    336e:	8f a7       	std	Y+47, r24	; 0x2f
    3370:	7a ab       	std	Y+50, r23	; 0x32
    3372:	69 ab       	std	Y+49, r22	; 0x31
    3374:	5c ab       	std	Y+52, r21	; 0x34
    3376:	4b ab       	std	Y+51, r20	; 0x33
    3378:	2d ab       	std	Y+53, r18	; 0x35
    337a:	1f ab       	std	Y+55, r17	; 0x37
    337c:	0e ab       	std	Y+54, r16	; 0x36
    337e:	f9 ae       	std	Y+57, r15	; 0x39
    3380:	e8 ae       	std	Y+56, r14	; 0x38
    3382:	ca ae       	std	Y+58, r12	; 0x3a
    3384:	ab ae       	std	Y+59, r10	; 0x3b
    3386:	8f a5       	ldd	r24, Y+47	; 0x2f
    3388:	98 a9       	ldd	r25, Y+48	; 0x30
    338a:	dc 01       	movw	r26, r24
    338c:	59 96       	adiw	r26, 0x19	; 25
    338e:	8d 91       	ld	r24, X+
    3390:	9c 91       	ld	r25, X
    3392:	5a 97       	sbiw	r26, 0x1a	; 26
    3394:	89 2b       	or	r24, r25
    3396:	09 f0       	breq	.+2      	; 0x339a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x50>
    3398:	c7 c1       	rjmp	.+910    	; 0x3728 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3de>
    339a:	8f a5       	ldd	r24, Y+47	; 0x2f
    339c:	98 a9       	ldd	r25, Y+48	; 0x30
    339e:	fc 01       	movw	r30, r24
    33a0:	20 85       	ldd	r18, Z+8	; 0x08
    33a2:	31 85       	ldd	r19, Z+9	; 0x09
    33a4:	89 a9       	ldd	r24, Y+49	; 0x31
    33a6:	9a a9       	ldd	r25, Y+50	; 0x32
    33a8:	82 17       	cp	r24, r18
    33aa:	93 07       	cpc	r25, r19
    33ac:	0c f0       	brlt	.+2      	; 0x33b0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x66>
    33ae:	0e c3       	rjmp	.+1564   	; 0x39cc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    33b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b2:	98 a9       	ldd	r25, Y+48	; 0x30
    33b4:	dc 01       	movw	r26, r24
    33b6:	1a 96       	adiw	r26, 0x0a	; 10
    33b8:	2d 91       	ld	r18, X+
    33ba:	3c 91       	ld	r19, X
    33bc:	1b 97       	sbiw	r26, 0x0b	; 11
    33be:	8b a9       	ldd	r24, Y+51	; 0x33
    33c0:	9c a9       	ldd	r25, Y+52	; 0x34
    33c2:	82 17       	cp	r24, r18
    33c4:	93 07       	cpc	r25, r19
    33c6:	0c f0       	brlt	.+2      	; 0x33ca <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x80>
    33c8:	01 c3       	rjmp	.+1538   	; 0x39cc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    33ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	c9 01       	movw	r24, r18
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	82 0f       	add	r24, r18
    33d8:	93 1f       	adc	r25, r19
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	9c 01       	movw	r18, r24
    33e0:	89 a9       	ldd	r24, Y+49	; 0x31
    33e2:	9a a9       	ldd	r25, Y+50	; 0x32
    33e4:	82 0f       	add	r24, r18
    33e6:	93 1f       	adc	r25, r19
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	99 23       	and	r25, r25
    33ec:	0c f4       	brge	.+2      	; 0x33f0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa6>
    33ee:	ee c2       	rjmp	.+1500   	; 0x39cc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    33f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    33f2:	88 2f       	mov	r24, r24
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	9c 01       	movw	r18, r24
    33f8:	22 0f       	add	r18, r18
    33fa:	33 1f       	adc	r19, r19
    33fc:	22 0f       	add	r18, r18
    33fe:	33 1f       	adc	r19, r19
    3400:	22 0f       	add	r18, r18
    3402:	33 1f       	adc	r19, r19
    3404:	8b a9       	ldd	r24, Y+51	; 0x33
    3406:	9c a9       	ldd	r25, Y+52	; 0x34
    3408:	82 0f       	add	r24, r18
    340a:	93 1f       	adc	r25, r19
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	99 23       	and	r25, r25
    3410:	0c f4       	brge	.+2      	; 0x3414 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xca>
    3412:	dc c2       	rjmp	.+1464   	; 0x39cc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x682>
    3414:	8f a5       	ldd	r24, Y+47	; 0x2f
    3416:	98 a9       	ldd	r25, Y+48	; 0x30
    3418:	fc 01       	movw	r30, r24
    341a:	90 8d       	ldd	r25, Z+24	; 0x18
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	89 27       	eor	r24, r25
    3420:	88 23       	and	r24, r24
    3422:	31 f0       	breq	.+12     	; 0x3430 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xe6>
    3424:	8d a9       	ldd	r24, Y+53	; 0x35
    3426:	80 3b       	cpi	r24, 0xB0	; 176
    3428:	18 f0       	brcs	.+6      	; 0x3430 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xe6>
    342a:	8d a9       	ldd	r24, Y+53	; 0x35
    342c:	8f 5f       	subi	r24, 0xFF	; 255
    342e:	8d ab       	std	Y+53, r24	; 0x35
    3430:	8f a5       	ldd	r24, Y+47	; 0x2f
    3432:	98 a9       	ldd	r25, Y+48	; 0x30
    3434:	dc 01       	movw	r26, r24
    3436:	8d 91       	ld	r24, X+
    3438:	9c 91       	ld	r25, X
    343a:	0a 96       	adiw	r24, 0x0a	; 10
    343c:	fc 01       	movw	r30, r24
    343e:	20 81       	ld	r18, Z
    3440:	31 81       	ldd	r19, Z+1	; 0x01
    3442:	8f a5       	ldd	r24, Y+47	; 0x2f
    3444:	98 a9       	ldd	r25, Y+48	; 0x30
    3446:	f9 01       	movw	r30, r18
    3448:	19 95       	eicall
    344a:	19 82       	std	Y+1, r1	; 0x01
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	85 30       	cpi	r24, 0x05	; 5
    3450:	0c f0       	brlt	.+2      	; 0x3454 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x10a>
    3452:	07 c1       	rjmp	.+526    	; 0x3662 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x318>
    3454:	8d a9       	ldd	r24, Y+53	; 0x35
    3456:	28 2f       	mov	r18, r24
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	c9 01       	movw	r24, r18
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	88 0f       	add	r24, r24
    3462:	99 1f       	adc	r25, r25
    3464:	28 0f       	add	r18, r24
    3466:	39 1f       	adc	r19, r25
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	08 2e       	mov	r0, r24
    346c:	00 0c       	add	r0, r0
    346e:	99 0b       	sbc	r25, r25
    3470:	82 0f       	add	r24, r18
    3472:	93 1f       	adc	r25, r19
    3474:	80 57       	subi	r24, 0x70	; 112
    3476:	9e 4f       	sbci	r25, 0xFE	; 254
    3478:	9f 87       	std	Y+15, r25	; 0x0f
    347a:	8e 87       	std	Y+14, r24	; 0x0e
    347c:	8e 85       	ldd	r24, Y+14	; 0x0e
    347e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3480:	fc 01       	movw	r30, r24
    3482:	84 91       	lpm	r24, Z
    3484:	88 8b       	std	Y+16, r24	; 0x10
    3486:	88 89       	ldd	r24, Y+16	; 0x10
    3488:	8a 83       	std	Y+2, r24	; 0x02
    348a:	1b 82       	std	Y+3, r1	; 0x03
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	88 30       	cpi	r24, 0x08	; 8
    3490:	0c f0       	brlt	.+2      	; 0x3494 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x14a>
    3492:	e3 c0       	rjmp	.+454    	; 0x365a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x310>
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	88 2f       	mov	r24, r24
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	81 70       	andi	r24, 0x01	; 1
    349c:	99 27       	eor	r25, r25
    349e:	89 2b       	or	r24, r25
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    34a2:	65 c0       	rjmp	.+202    	; 0x356e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x224>
    34a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    34a6:	81 30       	cpi	r24, 0x01	; 1
    34a8:	21 f5       	brne	.+72     	; 0x34f2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a8>
    34aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    34ac:	81 30       	cpi	r24, 0x01	; 1
    34ae:	09 f5       	brne	.+66     	; 0x34f2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a8>
    34b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b2:	98 a9       	ldd	r25, Y+48	; 0x30
    34b4:	dc 01       	movw	r26, r24
    34b6:	8d 91       	ld	r24, X+
    34b8:	9c 91       	ld	r25, X
    34ba:	0c 96       	adiw	r24, 0x0c	; 12
    34bc:	dc 01       	movw	r26, r24
    34be:	ed 91       	ld	r30, X+
    34c0:	fc 91       	ld	r31, X
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	28 2f       	mov	r18, r24
    34c6:	88 0f       	add	r24, r24
    34c8:	33 0b       	sbc	r19, r19
    34ca:	8b a9       	ldd	r24, Y+51	; 0x33
    34cc:	9c a9       	ldd	r25, Y+52	; 0x34
    34ce:	a9 01       	movw	r20, r18
    34d0:	48 0f       	add	r20, r24
    34d2:	59 1f       	adc	r21, r25
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	28 2f       	mov	r18, r24
    34d8:	88 0f       	add	r24, r24
    34da:	33 0b       	sbc	r19, r19
    34dc:	89 a9       	ldd	r24, Y+49	; 0x31
    34de:	9a a9       	ldd	r25, Y+50	; 0x32
    34e0:	b9 01       	movw	r22, r18
    34e2:	68 0f       	add	r22, r24
    34e4:	79 1f       	adc	r23, r25
    34e6:	2e a9       	ldd	r18, Y+54	; 0x36
    34e8:	3f a9       	ldd	r19, Y+55	; 0x37
    34ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    34ec:	98 a9       	ldd	r25, Y+48	; 0x30
    34ee:	19 95       	eicall
    34f0:	aa c0       	rjmp	.+340    	; 0x3646 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    34f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34f4:	98 a9       	ldd	r25, Y+48	; 0x30
    34f6:	fc 01       	movw	r30, r24
    34f8:	80 81       	ld	r24, Z
    34fa:	91 81       	ldd	r25, Z+1	; 0x01
    34fc:	0e 96       	adiw	r24, 0x0e	; 14
    34fe:	dc 01       	movw	r26, r24
    3500:	ed 91       	ld	r30, X+
    3502:	fc 91       	ld	r31, X
    3504:	8b ad       	ldd	r24, Y+59	; 0x3b
    3506:	08 2f       	mov	r16, r24
    3508:	10 e0       	ldi	r17, 0x00	; 0
    350a:	8a ad       	ldd	r24, Y+58	; 0x3a
    350c:	c8 2e       	mov	r12, r24
    350e:	d1 2c       	mov	r13, r1
    3510:	8b 81       	ldd	r24, Y+3	; 0x03
    3512:	48 2f       	mov	r20, r24
    3514:	88 0f       	add	r24, r24
    3516:	55 0b       	sbc	r21, r21
    3518:	8b ad       	ldd	r24, Y+59	; 0x3b
    351a:	88 2f       	mov	r24, r24
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	48 9f       	mul	r20, r24
    3520:	90 01       	movw	r18, r0
    3522:	49 9f       	mul	r20, r25
    3524:	30 0d       	add	r19, r0
    3526:	58 9f       	mul	r21, r24
    3528:	30 0d       	add	r19, r0
    352a:	11 24       	eor	r1, r1
    352c:	8b a9       	ldd	r24, Y+51	; 0x33
    352e:	9c a9       	ldd	r25, Y+52	; 0x34
    3530:	d9 01       	movw	r26, r18
    3532:	a8 0f       	add	r26, r24
    3534:	b9 1f       	adc	r27, r25
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	48 2f       	mov	r20, r24
    353a:	88 0f       	add	r24, r24
    353c:	55 0b       	sbc	r21, r21
    353e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3540:	88 2f       	mov	r24, r24
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	48 9f       	mul	r20, r24
    3546:	90 01       	movw	r18, r0
    3548:	49 9f       	mul	r20, r25
    354a:	30 0d       	add	r19, r0
    354c:	58 9f       	mul	r21, r24
    354e:	30 0d       	add	r19, r0
    3550:	11 24       	eor	r1, r1
    3552:	89 a9       	ldd	r24, Y+49	; 0x31
    3554:	9a a9       	ldd	r25, Y+50	; 0x32
    3556:	b9 01       	movw	r22, r18
    3558:	68 0f       	add	r22, r24
    355a:	79 1f       	adc	r23, r25
    355c:	2e a9       	ldd	r18, Y+54	; 0x36
    355e:	3f a9       	ldd	r19, Y+55	; 0x37
    3560:	8f a5       	ldd	r24, Y+47	; 0x2f
    3562:	98 a9       	ldd	r25, Y+48	; 0x30
    3564:	79 01       	movw	r14, r18
    3566:	96 01       	movw	r18, r12
    3568:	ad 01       	movw	r20, r26
    356a:	19 95       	eicall
    356c:	6c c0       	rjmp	.+216    	; 0x3646 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    356e:	28 ad       	ldd	r18, Y+56	; 0x38
    3570:	39 ad       	ldd	r19, Y+57	; 0x39
    3572:	8e a9       	ldd	r24, Y+54	; 0x36
    3574:	9f a9       	ldd	r25, Y+55	; 0x37
    3576:	28 17       	cp	r18, r24
    3578:	39 07       	cpc	r19, r25
    357a:	09 f4       	brne	.+2      	; 0x357e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x234>
    357c:	64 c0       	rjmp	.+200    	; 0x3646 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    357e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3580:	81 30       	cpi	r24, 0x01	; 1
    3582:	21 f5       	brne	.+72     	; 0x35cc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x282>
    3584:	8b ad       	ldd	r24, Y+59	; 0x3b
    3586:	81 30       	cpi	r24, 0x01	; 1
    3588:	09 f5       	brne	.+66     	; 0x35cc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x282>
    358a:	8f a5       	ldd	r24, Y+47	; 0x2f
    358c:	98 a9       	ldd	r25, Y+48	; 0x30
    358e:	fc 01       	movw	r30, r24
    3590:	80 81       	ld	r24, Z
    3592:	91 81       	ldd	r25, Z+1	; 0x01
    3594:	0c 96       	adiw	r24, 0x0c	; 12
    3596:	dc 01       	movw	r26, r24
    3598:	ed 91       	ld	r30, X+
    359a:	fc 91       	ld	r31, X
    359c:	8b 81       	ldd	r24, Y+3	; 0x03
    359e:	28 2f       	mov	r18, r24
    35a0:	88 0f       	add	r24, r24
    35a2:	33 0b       	sbc	r19, r19
    35a4:	8b a9       	ldd	r24, Y+51	; 0x33
    35a6:	9c a9       	ldd	r25, Y+52	; 0x34
    35a8:	a9 01       	movw	r20, r18
    35aa:	48 0f       	add	r20, r24
    35ac:	59 1f       	adc	r21, r25
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	28 2f       	mov	r18, r24
    35b2:	88 0f       	add	r24, r24
    35b4:	33 0b       	sbc	r19, r19
    35b6:	89 a9       	ldd	r24, Y+49	; 0x31
    35b8:	9a a9       	ldd	r25, Y+50	; 0x32
    35ba:	b9 01       	movw	r22, r18
    35bc:	68 0f       	add	r22, r24
    35be:	79 1f       	adc	r23, r25
    35c0:	28 ad       	ldd	r18, Y+56	; 0x38
    35c2:	39 ad       	ldd	r19, Y+57	; 0x39
    35c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    35c6:	98 a9       	ldd	r25, Y+48	; 0x30
    35c8:	19 95       	eicall
    35ca:	3d c0       	rjmp	.+122    	; 0x3646 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2fc>
    35cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35ce:	98 a9       	ldd	r25, Y+48	; 0x30
    35d0:	fc 01       	movw	r30, r24
    35d2:	80 81       	ld	r24, Z
    35d4:	91 81       	ldd	r25, Z+1	; 0x01
    35d6:	0e 96       	adiw	r24, 0x0e	; 14
    35d8:	dc 01       	movw	r26, r24
    35da:	ed 91       	ld	r30, X+
    35dc:	fc 91       	ld	r31, X
    35de:	8b ad       	ldd	r24, Y+59	; 0x3b
    35e0:	08 2f       	mov	r16, r24
    35e2:	10 e0       	ldi	r17, 0x00	; 0
    35e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    35e6:	c8 2e       	mov	r12, r24
    35e8:	d1 2c       	mov	r13, r1
    35ea:	8b 81       	ldd	r24, Y+3	; 0x03
    35ec:	48 2f       	mov	r20, r24
    35ee:	88 0f       	add	r24, r24
    35f0:	55 0b       	sbc	r21, r21
    35f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    35f4:	88 2f       	mov	r24, r24
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	48 9f       	mul	r20, r24
    35fa:	90 01       	movw	r18, r0
    35fc:	49 9f       	mul	r20, r25
    35fe:	30 0d       	add	r19, r0
    3600:	58 9f       	mul	r21, r24
    3602:	30 0d       	add	r19, r0
    3604:	11 24       	eor	r1, r1
    3606:	8b a9       	ldd	r24, Y+51	; 0x33
    3608:	9c a9       	ldd	r25, Y+52	; 0x34
    360a:	d9 01       	movw	r26, r18
    360c:	a8 0f       	add	r26, r24
    360e:	b9 1f       	adc	r27, r25
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	48 2f       	mov	r20, r24
    3614:	88 0f       	add	r24, r24
    3616:	55 0b       	sbc	r21, r21
    3618:	8a ad       	ldd	r24, Y+58	; 0x3a
    361a:	88 2f       	mov	r24, r24
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	48 9f       	mul	r20, r24
    3620:	90 01       	movw	r18, r0
    3622:	49 9f       	mul	r20, r25
    3624:	30 0d       	add	r19, r0
    3626:	58 9f       	mul	r21, r24
    3628:	30 0d       	add	r19, r0
    362a:	11 24       	eor	r1, r1
    362c:	89 a9       	ldd	r24, Y+49	; 0x31
    362e:	9a a9       	ldd	r25, Y+50	; 0x32
    3630:	b9 01       	movw	r22, r18
    3632:	68 0f       	add	r22, r24
    3634:	79 1f       	adc	r23, r25
    3636:	28 ad       	ldd	r18, Y+56	; 0x38
    3638:	39 ad       	ldd	r19, Y+57	; 0x39
    363a:	8f a5       	ldd	r24, Y+47	; 0x2f
    363c:	98 a9       	ldd	r25, Y+48	; 0x30
    363e:	79 01       	movw	r14, r18
    3640:	96 01       	movw	r18, r12
    3642:	ad 01       	movw	r20, r26
    3644:	19 95       	eicall
    3646:	8b 81       	ldd	r24, Y+3	; 0x03
    3648:	8f 5f       	subi	r24, 0xFF	; 255
    364a:	8b 83       	std	Y+3, r24	; 0x03
    364c:	8a 81       	ldd	r24, Y+2	; 0x02
    364e:	88 2f       	mov	r24, r24
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	95 95       	asr	r25
    3654:	87 95       	ror	r24
    3656:	8a 83       	std	Y+2, r24	; 0x02
    3658:	19 cf       	rjmp	.-462    	; 0x348c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x142>
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	8f 5f       	subi	r24, 0xFF	; 255
    365e:	89 83       	std	Y+1, r24	; 0x01
    3660:	f5 ce       	rjmp	.-534    	; 0x344c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x102>
    3662:	28 ad       	ldd	r18, Y+56	; 0x38
    3664:	39 ad       	ldd	r19, Y+57	; 0x39
    3666:	8e a9       	ldd	r24, Y+54	; 0x36
    3668:	9f a9       	ldd	r25, Y+55	; 0x37
    366a:	28 17       	cp	r18, r24
    366c:	39 07       	cpc	r19, r25
    366e:	09 f4       	brne	.+2      	; 0x3672 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x328>
    3670:	4d c0       	rjmp	.+154    	; 0x370c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3c2>
    3672:	8a ad       	ldd	r24, Y+58	; 0x3a
    3674:	81 30       	cpi	r24, 0x01	; 1
    3676:	e1 f4       	brne	.+56     	; 0x36b0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x366>
    3678:	8b ad       	ldd	r24, Y+59	; 0x3b
    367a:	81 30       	cpi	r24, 0x01	; 1
    367c:	c9 f4       	brne	.+50     	; 0x36b0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x366>
    367e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3680:	98 a9       	ldd	r25, Y+48	; 0x30
    3682:	fc 01       	movw	r30, r24
    3684:	80 81       	ld	r24, Z
    3686:	91 81       	ldd	r25, Z+1	; 0x01
    3688:	40 96       	adiw	r24, 0x10	; 16
    368a:	dc 01       	movw	r26, r24
    368c:	ed 91       	ld	r30, X+
    368e:	fc 91       	ld	r31, X
    3690:	89 a9       	ldd	r24, Y+49	; 0x31
    3692:	9a a9       	ldd	r25, Y+50	; 0x32
    3694:	bc 01       	movw	r22, r24
    3696:	6b 5f       	subi	r22, 0xFB	; 251
    3698:	7f 4f       	sbci	r23, 0xFF	; 255
    369a:	28 ad       	ldd	r18, Y+56	; 0x38
    369c:	39 ad       	ldd	r19, Y+57	; 0x39
    369e:	4b a9       	ldd	r20, Y+51	; 0x33
    36a0:	5c a9       	ldd	r21, Y+52	; 0x34
    36a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36a4:	98 a9       	ldd	r25, Y+48	; 0x30
    36a6:	89 01       	movw	r16, r18
    36a8:	28 e0       	ldi	r18, 0x08	; 8
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	19 95       	eicall
    36ae:	2e c0       	rjmp	.+92     	; 0x370c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3c2>
    36b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    36b2:	98 a9       	ldd	r25, Y+48	; 0x30
    36b4:	fc 01       	movw	r30, r24
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	0e 96       	adiw	r24, 0x0e	; 14
    36bc:	dc 01       	movw	r26, r24
    36be:	ed 91       	ld	r30, X+
    36c0:	fc 91       	ld	r31, X
    36c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    36c4:	88 2f       	mov	r24, r24
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	8c 01       	movw	r16, r24
    36ca:	00 0f       	add	r16, r16
    36cc:	11 1f       	adc	r17, r17
    36ce:	00 0f       	add	r16, r16
    36d0:	11 1f       	adc	r17, r17
    36d2:	00 0f       	add	r16, r16
    36d4:	11 1f       	adc	r17, r17
    36d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    36d8:	a8 2f       	mov	r26, r24
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    36de:	28 2f       	mov	r18, r24
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	c9 01       	movw	r24, r18
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	88 0f       	add	r24, r24
    36ea:	99 1f       	adc	r25, r25
    36ec:	28 0f       	add	r18, r24
    36ee:	39 1f       	adc	r19, r25
    36f0:	89 a9       	ldd	r24, Y+49	; 0x31
    36f2:	9a a9       	ldd	r25, Y+50	; 0x32
    36f4:	b9 01       	movw	r22, r18
    36f6:	68 0f       	add	r22, r24
    36f8:	79 1f       	adc	r23, r25
    36fa:	28 ad       	ldd	r18, Y+56	; 0x38
    36fc:	39 ad       	ldd	r19, Y+57	; 0x39
    36fe:	4b a9       	ldd	r20, Y+51	; 0x33
    3700:	5c a9       	ldd	r21, Y+52	; 0x34
    3702:	8f a5       	ldd	r24, Y+47	; 0x2f
    3704:	98 a9       	ldd	r25, Y+48	; 0x30
    3706:	79 01       	movw	r14, r18
    3708:	9d 01       	movw	r18, r26
    370a:	19 95       	eicall
    370c:	8f a5       	ldd	r24, Y+47	; 0x2f
    370e:	98 a9       	ldd	r25, Y+48	; 0x30
    3710:	fc 01       	movw	r30, r24
    3712:	80 81       	ld	r24, Z
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	46 96       	adiw	r24, 0x16	; 22
    3718:	dc 01       	movw	r26, r24
    371a:	2d 91       	ld	r18, X+
    371c:	3c 91       	ld	r19, X
    371e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3720:	98 a9       	ldd	r25, Y+48	; 0x30
    3722:	f9 01       	movw	r30, r18
    3724:	19 95       	eicall
    3726:	53 c1       	rjmp	.+678    	; 0x39ce <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x684>
    3728:	8f a5       	ldd	r24, Y+47	; 0x2f
    372a:	98 a9       	ldd	r25, Y+48	; 0x30
    372c:	dc 01       	movw	r26, r24
    372e:	59 96       	adiw	r26, 0x19	; 25
    3730:	8d 91       	ld	r24, X+
    3732:	9c 91       	ld	r25, X
    3734:	5a 97       	sbiw	r26, 0x1a	; 26
    3736:	04 96       	adiw	r24, 0x04	; 4
    3738:	9a 8b       	std	Y+18, r25	; 0x12
    373a:	89 8b       	std	Y+17, r24	; 0x11
    373c:	89 89       	ldd	r24, Y+17	; 0x11
    373e:	9a 89       	ldd	r25, Y+18	; 0x12
    3740:	fc 01       	movw	r30, r24
    3742:	84 91       	lpm	r24, Z
    3744:	8b 8b       	std	Y+19, r24	; 0x13
    3746:	8b 89       	ldd	r24, Y+19	; 0x13
    3748:	9d a9       	ldd	r25, Y+53	; 0x35
    374a:	f9 2f       	mov	r31, r25
    374c:	f8 1b       	sub	r31, r24
    374e:	8f 2f       	mov	r24, r31
    3750:	8d ab       	std	Y+53, r24	; 0x35
    3752:	8f a5       	ldd	r24, Y+47	; 0x2f
    3754:	98 a9       	ldd	r25, Y+48	; 0x30
    3756:	dc 01       	movw	r26, r24
    3758:	59 96       	adiw	r26, 0x19	; 25
    375a:	8d 91       	ld	r24, X+
    375c:	9c 91       	ld	r25, X
    375e:	5a 97       	sbiw	r26, 0x1a	; 26
    3760:	6d a9       	ldd	r22, Y+53	; 0x35
    3762:	0e 94 2b 13 	call	0x2656	; 0x2656 <_Z18pgm_read_glyph_ptrPK7GFXfonth>
    3766:	9d 8b       	std	Y+21, r25	; 0x15
    3768:	8c 8b       	std	Y+20, r24	; 0x14
    376a:	8f a5       	ldd	r24, Y+47	; 0x2f
    376c:	98 a9       	ldd	r25, Y+48	; 0x30
    376e:	fc 01       	movw	r30, r24
    3770:	81 8d       	ldd	r24, Z+25	; 0x19
    3772:	92 8d       	ldd	r25, Z+26	; 0x1a
    3774:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_Z19pgm_read_bitmap_ptrPK7GFXfont>
    3778:	9f 8b       	std	Y+23, r25	; 0x17
    377a:	8e 8b       	std	Y+22, r24	; 0x16
    377c:	8c 89       	ldd	r24, Y+20	; 0x14
    377e:	9d 89       	ldd	r25, Y+21	; 0x15
    3780:	99 8f       	std	Y+25, r25	; 0x19
    3782:	88 8f       	std	Y+24, r24	; 0x18
    3784:	88 8d       	ldd	r24, Y+24	; 0x18
    3786:	99 8d       	ldd	r25, Y+25	; 0x19
    3788:	fc 01       	movw	r30, r24
    378a:	25 91       	lpm	r18, Z+
    378c:	34 91       	lpm	r19, Z
    378e:	cf 01       	movw	r24, r30
    3790:	3b 8f       	std	Y+27, r19	; 0x1b
    3792:	2a 8f       	std	Y+26, r18	; 0x1a
    3794:	99 8f       	std	Y+25, r25	; 0x19
    3796:	88 8f       	std	Y+24, r24	; 0x18
    3798:	8a 8d       	ldd	r24, Y+26	; 0x1a
    379a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    379c:	9d 83       	std	Y+5, r25	; 0x05
    379e:	8c 83       	std	Y+4, r24	; 0x04
    37a0:	8c 89       	ldd	r24, Y+20	; 0x14
    37a2:	9d 89       	ldd	r25, Y+21	; 0x15
    37a4:	02 96       	adiw	r24, 0x02	; 2
    37a6:	9d 8f       	std	Y+29, r25	; 0x1d
    37a8:	8c 8f       	std	Y+28, r24	; 0x1c
    37aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37ae:	fc 01       	movw	r30, r24
    37b0:	84 91       	lpm	r24, Z
    37b2:	8e 8f       	std	Y+30, r24	; 0x1e
    37b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37b6:	8f 8f       	std	Y+31, r24	; 0x1f
    37b8:	8c 89       	ldd	r24, Y+20	; 0x14
    37ba:	9d 89       	ldd	r25, Y+21	; 0x15
    37bc:	03 96       	adiw	r24, 0x03	; 3
    37be:	99 a3       	std	Y+33, r25	; 0x21
    37c0:	88 a3       	std	Y+32, r24	; 0x20
    37c2:	88 a1       	ldd	r24, Y+32	; 0x20
    37c4:	99 a1       	ldd	r25, Y+33	; 0x21
    37c6:	fc 01       	movw	r30, r24
    37c8:	84 91       	lpm	r24, Z
    37ca:	8a a3       	std	Y+34, r24	; 0x22
    37cc:	8a a1       	ldd	r24, Y+34	; 0x22
    37ce:	8b a3       	std	Y+35, r24	; 0x23
    37d0:	8c 89       	ldd	r24, Y+20	; 0x14
    37d2:	9d 89       	ldd	r25, Y+21	; 0x15
    37d4:	05 96       	adiw	r24, 0x05	; 5
    37d6:	9d a3       	std	Y+37, r25	; 0x25
    37d8:	8c a3       	std	Y+36, r24	; 0x24
    37da:	8c a1       	ldd	r24, Y+36	; 0x24
    37dc:	9d a1       	ldd	r25, Y+37	; 0x25
    37de:	fc 01       	movw	r30, r24
    37e0:	84 91       	lpm	r24, Z
    37e2:	8e a3       	std	Y+38, r24	; 0x26
    37e4:	8e a1       	ldd	r24, Y+38	; 0x26
    37e6:	8f a3       	std	Y+39, r24	; 0x27
    37e8:	8c 89       	ldd	r24, Y+20	; 0x14
    37ea:	9d 89       	ldd	r25, Y+21	; 0x15
    37ec:	06 96       	adiw	r24, 0x06	; 6
    37ee:	99 a7       	std	Y+41, r25	; 0x29
    37f0:	88 a7       	std	Y+40, r24	; 0x28
    37f2:	88 a5       	ldd	r24, Y+40	; 0x28
    37f4:	99 a5       	ldd	r25, Y+41	; 0x29
    37f6:	fc 01       	movw	r30, r24
    37f8:	84 91       	lpm	r24, Z
    37fa:	8a a7       	std	Y+42, r24	; 0x2a
    37fc:	8a a5       	ldd	r24, Y+42	; 0x2a
    37fe:	8b a7       	std	Y+43, r24	; 0x2b
    3800:	18 86       	std	Y+8, r1	; 0x08
    3802:	19 86       	std	Y+9, r1	; 0x09
    3804:	1b 86       	std	Y+11, r1	; 0x0b
    3806:	1a 86       	std	Y+10, r1	; 0x0a
    3808:	1d 86       	std	Y+13, r1	; 0x0d
    380a:	1c 86       	std	Y+12, r1	; 0x0c
    380c:	8a ad       	ldd	r24, Y+58	; 0x3a
    380e:	82 30       	cpi	r24, 0x02	; 2
    3810:	18 f4       	brcc	.+6      	; 0x3818 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x4ce>
    3812:	8b ad       	ldd	r24, Y+59	; 0x3b
    3814:	82 30       	cpi	r24, 0x02	; 2
    3816:	60 f0       	brcs	.+24     	; 0x3830 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x4e6>
    3818:	8f a1       	ldd	r24, Y+39	; 0x27
    381a:	08 2e       	mov	r0, r24
    381c:	00 0c       	add	r0, r0
    381e:	99 0b       	sbc	r25, r25
    3820:	9b 87       	std	Y+11, r25	; 0x0b
    3822:	8a 87       	std	Y+10, r24	; 0x0a
    3824:	8b a5       	ldd	r24, Y+43	; 0x2b
    3826:	08 2e       	mov	r0, r24
    3828:	00 0c       	add	r0, r0
    382a:	99 0b       	sbc	r25, r25
    382c:	9d 87       	std	Y+13, r25	; 0x0d
    382e:	8c 87       	std	Y+12, r24	; 0x0c
    3830:	8f a5       	ldd	r24, Y+47	; 0x2f
    3832:	98 a9       	ldd	r25, Y+48	; 0x30
    3834:	dc 01       	movw	r26, r24
    3836:	8d 91       	ld	r24, X+
    3838:	9c 91       	ld	r25, X
    383a:	0a 96       	adiw	r24, 0x0a	; 10
    383c:	fc 01       	movw	r30, r24
    383e:	20 81       	ld	r18, Z
    3840:	31 81       	ldd	r19, Z+1	; 0x01
    3842:	8f a5       	ldd	r24, Y+47	; 0x2f
    3844:	98 a9       	ldd	r25, Y+48	; 0x30
    3846:	f9 01       	movw	r30, r18
    3848:	19 95       	eicall
    384a:	1f 82       	std	Y+7, r1	; 0x07
    384c:	9f 81       	ldd	r25, Y+7	; 0x07
    384e:	8b a1       	ldd	r24, Y+35	; 0x23
    3850:	98 17       	cp	r25, r24
    3852:	08 f0       	brcs	.+2      	; 0x3856 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x50c>
    3854:	ad c0       	rjmp	.+346    	; 0x39b0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x666>
    3856:	1e 82       	std	Y+6, r1	; 0x06
    3858:	9e 81       	ldd	r25, Y+6	; 0x06
    385a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    385c:	98 17       	cp	r25, r24
    385e:	08 f0       	brcs	.+2      	; 0x3862 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x518>
    3860:	a3 c0       	rjmp	.+326    	; 0x39a8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x65e>
    3862:	89 85       	ldd	r24, Y+9	; 0x09
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	98 0f       	add	r25, r24
    3868:	99 87       	std	Y+9, r25	; 0x09
    386a:	88 2f       	mov	r24, r24
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	87 70       	andi	r24, 0x07	; 7
    3870:	99 27       	eor	r25, r25
    3872:	21 e0       	ldi	r18, 0x01	; 1
    3874:	89 2b       	or	r24, r25
    3876:	09 f0       	breq	.+2      	; 0x387a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x530>
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	22 23       	and	r18, r18
    387c:	a1 f0       	breq	.+40     	; 0x38a6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x55c>
    387e:	8c 81       	ldd	r24, Y+4	; 0x04
    3880:	9d 81       	ldd	r25, Y+5	; 0x05
    3882:	9c 01       	movw	r18, r24
    3884:	2f 5f       	subi	r18, 0xFF	; 255
    3886:	3f 4f       	sbci	r19, 0xFF	; 255
    3888:	3d 83       	std	Y+5, r19	; 0x05
    388a:	2c 83       	std	Y+4, r18	; 0x04
    388c:	2e 89       	ldd	r18, Y+22	; 0x16
    388e:	3f 89       	ldd	r19, Y+23	; 0x17
    3890:	82 0f       	add	r24, r18
    3892:	93 1f       	adc	r25, r19
    3894:	9d a7       	std	Y+45, r25	; 0x2d
    3896:	8c a7       	std	Y+44, r24	; 0x2c
    3898:	8c a5       	ldd	r24, Y+44	; 0x2c
    389a:	9d a5       	ldd	r25, Y+45	; 0x2d
    389c:	fc 01       	movw	r30, r24
    389e:	84 91       	lpm	r24, Z
    38a0:	8e a7       	std	Y+46, r24	; 0x2e
    38a2:	8e a5       	ldd	r24, Y+46	; 0x2e
    38a4:	88 87       	std	Y+8, r24	; 0x08
    38a6:	88 85       	ldd	r24, Y+8	; 0x08
    38a8:	88 23       	and	r24, r24
    38aa:	0c f0       	brlt	.+2      	; 0x38ae <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x564>
    38ac:	76 c0       	rjmp	.+236    	; 0x399a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x650>
    38ae:	8a ad       	ldd	r24, Y+58	; 0x3a
    38b0:	81 30       	cpi	r24, 0x01	; 1
    38b2:	71 f5       	brne	.+92     	; 0x3910 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5c6>
    38b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    38b6:	81 30       	cpi	r24, 0x01	; 1
    38b8:	59 f5       	brne	.+86     	; 0x3910 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5c6>
    38ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    38bc:	98 a9       	ldd	r25, Y+48	; 0x30
    38be:	dc 01       	movw	r26, r24
    38c0:	8d 91       	ld	r24, X+
    38c2:	9c 91       	ld	r25, X
    38c4:	0c 96       	adiw	r24, 0x0c	; 12
    38c6:	dc 01       	movw	r26, r24
    38c8:	ed 91       	ld	r30, X+
    38ca:	fc 91       	ld	r31, X
    38cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    38ce:	28 2f       	mov	r18, r24
    38d0:	88 0f       	add	r24, r24
    38d2:	33 0b       	sbc	r19, r19
    38d4:	8b a9       	ldd	r24, Y+51	; 0x33
    38d6:	9c a9       	ldd	r25, Y+52	; 0x34
    38d8:	28 0f       	add	r18, r24
    38da:	39 1f       	adc	r19, r25
    38dc:	8f 81       	ldd	r24, Y+7	; 0x07
    38de:	88 2f       	mov	r24, r24
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	a9 01       	movw	r20, r18
    38e4:	48 0f       	add	r20, r24
    38e6:	59 1f       	adc	r21, r25
    38e8:	8f a1       	ldd	r24, Y+39	; 0x27
    38ea:	28 2f       	mov	r18, r24
    38ec:	88 0f       	add	r24, r24
    38ee:	33 0b       	sbc	r19, r19
    38f0:	89 a9       	ldd	r24, Y+49	; 0x31
    38f2:	9a a9       	ldd	r25, Y+50	; 0x32
    38f4:	28 0f       	add	r18, r24
    38f6:	39 1f       	adc	r19, r25
    38f8:	8e 81       	ldd	r24, Y+6	; 0x06
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	b9 01       	movw	r22, r18
    3900:	68 0f       	add	r22, r24
    3902:	79 1f       	adc	r23, r25
    3904:	2e a9       	ldd	r18, Y+54	; 0x36
    3906:	3f a9       	ldd	r19, Y+55	; 0x37
    3908:	8f a5       	ldd	r24, Y+47	; 0x2f
    390a:	98 a9       	ldd	r25, Y+48	; 0x30
    390c:	19 95       	eicall
    390e:	45 c0       	rjmp	.+138    	; 0x399a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x650>
    3910:	8f a5       	ldd	r24, Y+47	; 0x2f
    3912:	98 a9       	ldd	r25, Y+48	; 0x30
    3914:	fc 01       	movw	r30, r24
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01
    391a:	0e 96       	adiw	r24, 0x0e	; 14
    391c:	dc 01       	movw	r26, r24
    391e:	ed 91       	ld	r30, X+
    3920:	fc 91       	ld	r31, X
    3922:	8b ad       	ldd	r24, Y+59	; 0x3b
    3924:	08 2f       	mov	r16, r24
    3926:	10 e0       	ldi	r17, 0x00	; 0
    3928:	8a ad       	ldd	r24, Y+58	; 0x3a
    392a:	c8 2e       	mov	r12, r24
    392c:	d1 2c       	mov	r13, r1
    392e:	8f 81       	ldd	r24, Y+7	; 0x07
    3930:	28 2f       	mov	r18, r24
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	8c 85       	ldd	r24, Y+12	; 0x0c
    3936:	9d 85       	ldd	r25, Y+13	; 0x0d
    3938:	a9 01       	movw	r20, r18
    393a:	48 0f       	add	r20, r24
    393c:	59 1f       	adc	r21, r25
    393e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3940:	88 2f       	mov	r24, r24
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	48 9f       	mul	r20, r24
    3946:	90 01       	movw	r18, r0
    3948:	49 9f       	mul	r20, r25
    394a:	30 0d       	add	r19, r0
    394c:	58 9f       	mul	r21, r24
    394e:	30 0d       	add	r19, r0
    3950:	11 24       	eor	r1, r1
    3952:	8b a9       	ldd	r24, Y+51	; 0x33
    3954:	9c a9       	ldd	r25, Y+52	; 0x34
    3956:	d9 01       	movw	r26, r18
    3958:	a8 0f       	add	r26, r24
    395a:	b9 1f       	adc	r27, r25
    395c:	8e 81       	ldd	r24, Y+6	; 0x06
    395e:	28 2f       	mov	r18, r24
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	8a 85       	ldd	r24, Y+10	; 0x0a
    3964:	9b 85       	ldd	r25, Y+11	; 0x0b
    3966:	a9 01       	movw	r20, r18
    3968:	48 0f       	add	r20, r24
    396a:	59 1f       	adc	r21, r25
    396c:	8a ad       	ldd	r24, Y+58	; 0x3a
    396e:	88 2f       	mov	r24, r24
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	48 9f       	mul	r20, r24
    3974:	90 01       	movw	r18, r0
    3976:	49 9f       	mul	r20, r25
    3978:	30 0d       	add	r19, r0
    397a:	58 9f       	mul	r21, r24
    397c:	30 0d       	add	r19, r0
    397e:	11 24       	eor	r1, r1
    3980:	89 a9       	ldd	r24, Y+49	; 0x31
    3982:	9a a9       	ldd	r25, Y+50	; 0x32
    3984:	b9 01       	movw	r22, r18
    3986:	68 0f       	add	r22, r24
    3988:	79 1f       	adc	r23, r25
    398a:	2e a9       	ldd	r18, Y+54	; 0x36
    398c:	3f a9       	ldd	r19, Y+55	; 0x37
    398e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3990:	98 a9       	ldd	r25, Y+48	; 0x30
    3992:	79 01       	movw	r14, r18
    3994:	96 01       	movw	r18, r12
    3996:	ad 01       	movw	r20, r26
    3998:	19 95       	eicall
    399a:	88 85       	ldd	r24, Y+8	; 0x08
    399c:	88 0f       	add	r24, r24
    399e:	88 87       	std	Y+8, r24	; 0x08
    39a0:	8e 81       	ldd	r24, Y+6	; 0x06
    39a2:	8f 5f       	subi	r24, 0xFF	; 255
    39a4:	8e 83       	std	Y+6, r24	; 0x06
    39a6:	58 cf       	rjmp	.-336    	; 0x3858 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x50e>
    39a8:	8f 81       	ldd	r24, Y+7	; 0x07
    39aa:	8f 5f       	subi	r24, 0xFF	; 255
    39ac:	8f 83       	std	Y+7, r24	; 0x07
    39ae:	4e cf       	rjmp	.-356    	; 0x384c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x502>
    39b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39b2:	98 a9       	ldd	r25, Y+48	; 0x30
    39b4:	fc 01       	movw	r30, r24
    39b6:	80 81       	ld	r24, Z
    39b8:	91 81       	ldd	r25, Z+1	; 0x01
    39ba:	46 96       	adiw	r24, 0x16	; 22
    39bc:	dc 01       	movw	r26, r24
    39be:	2d 91       	ld	r18, X+
    39c0:	3c 91       	ld	r19, X
    39c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    39c4:	98 a9       	ldd	r25, Y+48	; 0x30
    39c6:	f9 01       	movw	r30, r18
    39c8:	19 95       	eicall
    39ca:	01 c0       	rjmp	.+2      	; 0x39ce <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x684>
    39cc:	00 00       	nop
    39ce:	eb 96       	adiw	r28, 0x3b	; 59
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	ff 90       	pop	r15
    39e4:	ef 90       	pop	r14
    39e6:	df 90       	pop	r13
    39e8:	cf 90       	pop	r12
    39ea:	af 90       	pop	r10
    39ec:	08 95       	ret

000039ee <_ZN12Adafruit_GFX5writeEh>:
    39ee:	af 92       	push	r10
    39f0:	cf 92       	push	r12
    39f2:	ef 92       	push	r14
    39f4:	ff 92       	push	r15
    39f6:	0f 93       	push	r16
    39f8:	1f 93       	push	r17
    39fa:	cf 93       	push	r28
    39fc:	df 93       	push	r29
    39fe:	cd b7       	in	r28, 0x3d	; 61
    3a00:	de b7       	in	r29, 0x3e	; 62
    3a02:	a4 97       	sbiw	r28, 0x24	; 36
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	cd bf       	out	0x3d, r28	; 61
    3a0e:	99 a3       	std	Y+33, r25	; 0x21
    3a10:	88 a3       	std	Y+32, r24	; 0x20
    3a12:	6a a3       	std	Y+34, r22	; 0x22
    3a14:	88 a1       	ldd	r24, Y+32	; 0x20
    3a16:	99 a1       	ldd	r25, Y+33	; 0x21
    3a18:	fc 01       	movw	r30, r24
    3a1a:	81 8d       	ldd	r24, Z+25	; 0x19
    3a1c:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a1e:	89 2b       	or	r24, r25
    3a20:	09 f0       	breq	.+2      	; 0x3a24 <_ZN12Adafruit_GFX5writeEh+0x36>
    3a22:	a8 c0       	rjmp	.+336    	; 0x3b74 <_ZN12Adafruit_GFX5writeEh+0x186>
    3a24:	8a a1       	ldd	r24, Y+34	; 0x22
    3a26:	8a 30       	cpi	r24, 0x0A	; 10
    3a28:	f1 f4       	brne	.+60     	; 0x3a66 <_ZN12Adafruit_GFX5writeEh+0x78>
    3a2a:	88 a1       	ldd	r24, Y+32	; 0x20
    3a2c:	99 a1       	ldd	r25, Y+33	; 0x21
    3a2e:	fc 01       	movw	r30, r24
    3a30:	15 86       	std	Z+13, r1	; 0x0d
    3a32:	14 86       	std	Z+12, r1	; 0x0c
    3a34:	88 a1       	ldd	r24, Y+32	; 0x20
    3a36:	99 a1       	ldd	r25, Y+33	; 0x21
    3a38:	fc 01       	movw	r30, r24
    3a3a:	26 85       	ldd	r18, Z+14	; 0x0e
    3a3c:	37 85       	ldd	r19, Z+15	; 0x0f
    3a3e:	88 a1       	ldd	r24, Y+32	; 0x20
    3a40:	99 a1       	ldd	r25, Y+33	; 0x21
    3a42:	fc 01       	movw	r30, r24
    3a44:	85 89       	ldd	r24, Z+21	; 0x15
    3a46:	88 2f       	mov	r24, r24
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	88 0f       	add	r24, r24
    3a4c:	99 1f       	adc	r25, r25
    3a4e:	88 0f       	add	r24, r24
    3a50:	99 1f       	adc	r25, r25
    3a52:	88 0f       	add	r24, r24
    3a54:	99 1f       	adc	r25, r25
    3a56:	28 0f       	add	r18, r24
    3a58:	39 1f       	adc	r19, r25
    3a5a:	88 a1       	ldd	r24, Y+32	; 0x20
    3a5c:	99 a1       	ldd	r25, Y+33	; 0x21
    3a5e:	fc 01       	movw	r30, r24
    3a60:	37 87       	std	Z+15, r19	; 0x0f
    3a62:	26 87       	std	Z+14, r18	; 0x0e
    3a64:	cb c1       	rjmp	.+918    	; 0x3dfc <_ZN12Adafruit_GFX5writeEh+0x40e>
    3a66:	8a a1       	ldd	r24, Y+34	; 0x22
    3a68:	8d 30       	cpi	r24, 0x0D	; 13
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <_ZN12Adafruit_GFX5writeEh+0x80>
    3a6c:	c7 c1       	rjmp	.+910    	; 0x3dfc <_ZN12Adafruit_GFX5writeEh+0x40e>
    3a6e:	88 a1       	ldd	r24, Y+32	; 0x20
    3a70:	99 a1       	ldd	r25, Y+33	; 0x21
    3a72:	fc 01       	movw	r30, r24
    3a74:	87 89       	ldd	r24, Z+23	; 0x17
    3a76:	88 23       	and	r24, r24
    3a78:	d1 f1       	breq	.+116    	; 0x3aee <_ZN12Adafruit_GFX5writeEh+0x100>
    3a7a:	88 a1       	ldd	r24, Y+32	; 0x20
    3a7c:	99 a1       	ldd	r25, Y+33	; 0x21
    3a7e:	fc 01       	movw	r30, r24
    3a80:	44 85       	ldd	r20, Z+12	; 0x0c
    3a82:	55 85       	ldd	r21, Z+13	; 0x0d
    3a84:	88 a1       	ldd	r24, Y+32	; 0x20
    3a86:	99 a1       	ldd	r25, Y+33	; 0x21
    3a88:	fc 01       	movw	r30, r24
    3a8a:	84 89       	ldd	r24, Z+20	; 0x14
    3a8c:	28 2f       	mov	r18, r24
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	c9 01       	movw	r24, r18
    3a92:	88 0f       	add	r24, r24
    3a94:	99 1f       	adc	r25, r25
    3a96:	82 0f       	add	r24, r18
    3a98:	93 1f       	adc	r25, r19
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	9a 01       	movw	r18, r20
    3aa0:	28 0f       	add	r18, r24
    3aa2:	39 1f       	adc	r19, r25
    3aa4:	88 a1       	ldd	r24, Y+32	; 0x20
    3aa6:	99 a1       	ldd	r25, Y+33	; 0x21
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	80 85       	ldd	r24, Z+8	; 0x08
    3aac:	91 85       	ldd	r25, Z+9	; 0x09
    3aae:	82 17       	cp	r24, r18
    3ab0:	93 07       	cpc	r25, r19
    3ab2:	ec f4       	brge	.+58     	; 0x3aee <_ZN12Adafruit_GFX5writeEh+0x100>
    3ab4:	88 a1       	ldd	r24, Y+32	; 0x20
    3ab6:	99 a1       	ldd	r25, Y+33	; 0x21
    3ab8:	fc 01       	movw	r30, r24
    3aba:	15 86       	std	Z+13, r1	; 0x0d
    3abc:	14 86       	std	Z+12, r1	; 0x0c
    3abe:	88 a1       	ldd	r24, Y+32	; 0x20
    3ac0:	99 a1       	ldd	r25, Y+33	; 0x21
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	26 85       	ldd	r18, Z+14	; 0x0e
    3ac6:	37 85       	ldd	r19, Z+15	; 0x0f
    3ac8:	88 a1       	ldd	r24, Y+32	; 0x20
    3aca:	99 a1       	ldd	r25, Y+33	; 0x21
    3acc:	fc 01       	movw	r30, r24
    3ace:	85 89       	ldd	r24, Z+21	; 0x15
    3ad0:	88 2f       	mov	r24, r24
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	88 0f       	add	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	88 0f       	add	r24, r24
    3ada:	99 1f       	adc	r25, r25
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	28 0f       	add	r18, r24
    3ae2:	39 1f       	adc	r19, r25
    3ae4:	88 a1       	ldd	r24, Y+32	; 0x20
    3ae6:	99 a1       	ldd	r25, Y+33	; 0x21
    3ae8:	fc 01       	movw	r30, r24
    3aea:	37 87       	std	Z+15, r19	; 0x0f
    3aec:	26 87       	std	Z+14, r18	; 0x0e
    3aee:	88 a1       	ldd	r24, Y+32	; 0x20
    3af0:	99 a1       	ldd	r25, Y+33	; 0x21
    3af2:	fc 01       	movw	r30, r24
    3af4:	b5 89       	ldd	r27, Z+21	; 0x15
    3af6:	88 a1       	ldd	r24, Y+32	; 0x20
    3af8:	99 a1       	ldd	r25, Y+33	; 0x21
    3afa:	fc 01       	movw	r30, r24
    3afc:	a4 89       	ldd	r26, Z+20	; 0x14
    3afe:	88 a1       	ldd	r24, Y+32	; 0x20
    3b00:	99 a1       	ldd	r25, Y+33	; 0x21
    3b02:	fc 01       	movw	r30, r24
    3b04:	02 88       	ldd	r0, Z+18	; 0x12
    3b06:	f3 89       	ldd	r31, Z+19	; 0x13
    3b08:	e0 2d       	mov	r30, r0
    3b0a:	fc a3       	std	Y+36, r31	; 0x24
    3b0c:	eb a3       	std	Y+35, r30	; 0x23
    3b0e:	88 a1       	ldd	r24, Y+32	; 0x20
    3b10:	99 a1       	ldd	r25, Y+33	; 0x21
    3b12:	fc 01       	movw	r30, r24
    3b14:	20 89       	ldd	r18, Z+16	; 0x10
    3b16:	31 89       	ldd	r19, Z+17	; 0x11
    3b18:	88 a1       	ldd	r24, Y+32	; 0x20
    3b1a:	99 a1       	ldd	r25, Y+33	; 0x21
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	46 85       	ldd	r20, Z+14	; 0x0e
    3b20:	57 85       	ldd	r21, Z+15	; 0x0f
    3b22:	88 a1       	ldd	r24, Y+32	; 0x20
    3b24:	99 a1       	ldd	r25, Y+33	; 0x21
    3b26:	fc 01       	movw	r30, r24
    3b28:	64 85       	ldd	r22, Z+12	; 0x0c
    3b2a:	75 85       	ldd	r23, Z+13	; 0x0d
    3b2c:	88 a1       	ldd	r24, Y+32	; 0x20
    3b2e:	99 a1       	ldd	r25, Y+33	; 0x21
    3b30:	ab 2e       	mov	r10, r27
    3b32:	ca 2e       	mov	r12, r26
    3b34:	eb a0       	ldd	r14, Y+35	; 0x23
    3b36:	fc a0       	ldd	r15, Y+36	; 0x24
    3b38:	89 01       	movw	r16, r18
    3b3a:	2a a1       	ldd	r18, Y+34	; 0x22
    3b3c:	06 dc       	rcall	.-2036   	; 0x334a <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    3b3e:	88 a1       	ldd	r24, Y+32	; 0x20
    3b40:	99 a1       	ldd	r25, Y+33	; 0x21
    3b42:	fc 01       	movw	r30, r24
    3b44:	44 85       	ldd	r20, Z+12	; 0x0c
    3b46:	55 85       	ldd	r21, Z+13	; 0x0d
    3b48:	88 a1       	ldd	r24, Y+32	; 0x20
    3b4a:	99 a1       	ldd	r25, Y+33	; 0x21
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	84 89       	ldd	r24, Z+20	; 0x14
    3b50:	28 2f       	mov	r18, r24
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	c9 01       	movw	r24, r18
    3b56:	88 0f       	add	r24, r24
    3b58:	99 1f       	adc	r25, r25
    3b5a:	82 0f       	add	r24, r18
    3b5c:	93 1f       	adc	r25, r19
    3b5e:	88 0f       	add	r24, r24
    3b60:	99 1f       	adc	r25, r25
    3b62:	9a 01       	movw	r18, r20
    3b64:	28 0f       	add	r18, r24
    3b66:	39 1f       	adc	r19, r25
    3b68:	88 a1       	ldd	r24, Y+32	; 0x20
    3b6a:	99 a1       	ldd	r25, Y+33	; 0x21
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	35 87       	std	Z+13, r19	; 0x0d
    3b70:	24 87       	std	Z+12, r18	; 0x0c
    3b72:	44 c1       	rjmp	.+648    	; 0x3dfc <_ZN12Adafruit_GFX5writeEh+0x40e>
    3b74:	8a a1       	ldd	r24, Y+34	; 0x22
    3b76:	8a 30       	cpi	r24, 0x0A	; 10
    3b78:	79 f5       	brne	.+94     	; 0x3bd8 <_ZN12Adafruit_GFX5writeEh+0x1ea>
    3b7a:	88 a1       	ldd	r24, Y+32	; 0x20
    3b7c:	99 a1       	ldd	r25, Y+33	; 0x21
    3b7e:	fc 01       	movw	r30, r24
    3b80:	15 86       	std	Z+13, r1	; 0x0d
    3b82:	14 86       	std	Z+12, r1	; 0x0c
    3b84:	88 a1       	ldd	r24, Y+32	; 0x20
    3b86:	99 a1       	ldd	r25, Y+33	; 0x21
    3b88:	fc 01       	movw	r30, r24
    3b8a:	85 89       	ldd	r24, Z+21	; 0x15
    3b8c:	48 2f       	mov	r20, r24
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	88 a1       	ldd	r24, Y+32	; 0x20
    3b92:	99 a1       	ldd	r25, Y+33	; 0x21
    3b94:	fc 01       	movw	r30, r24
    3b96:	81 8d       	ldd	r24, Z+25	; 0x19
    3b98:	92 8d       	ldd	r25, Z+26	; 0x1a
    3b9a:	08 96       	adiw	r24, 0x08	; 8
    3b9c:	9a 83       	std	Y+2, r25	; 0x02
    3b9e:	89 83       	std	Y+1, r24	; 0x01
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	84 91       	lpm	r24, Z
    3ba8:	8b 83       	std	Y+3, r24	; 0x03
    3baa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bac:	28 2f       	mov	r18, r24
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	42 9f       	mul	r20, r18
    3bb2:	c0 01       	movw	r24, r0
    3bb4:	43 9f       	mul	r20, r19
    3bb6:	90 0d       	add	r25, r0
    3bb8:	52 9f       	mul	r21, r18
    3bba:	90 0d       	add	r25, r0
    3bbc:	11 24       	eor	r1, r1
    3bbe:	28 a1       	ldd	r18, Y+32	; 0x20
    3bc0:	39 a1       	ldd	r19, Y+33	; 0x21
    3bc2:	f9 01       	movw	r30, r18
    3bc4:	26 85       	ldd	r18, Z+14	; 0x0e
    3bc6:	37 85       	ldd	r19, Z+15	; 0x0f
    3bc8:	28 0f       	add	r18, r24
    3bca:	39 1f       	adc	r19, r25
    3bcc:	88 a1       	ldd	r24, Y+32	; 0x20
    3bce:	99 a1       	ldd	r25, Y+33	; 0x21
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	37 87       	std	Z+15, r19	; 0x0f
    3bd4:	26 87       	std	Z+14, r18	; 0x0e
    3bd6:	12 c1       	rjmp	.+548    	; 0x3dfc <_ZN12Adafruit_GFX5writeEh+0x40e>
    3bd8:	8a a1       	ldd	r24, Y+34	; 0x22
    3bda:	8d 30       	cpi	r24, 0x0D	; 13
    3bdc:	09 f4       	brne	.+2      	; 0x3be0 <_ZN12Adafruit_GFX5writeEh+0x1f2>
    3bde:	0e c1       	rjmp	.+540    	; 0x3dfc <_ZN12Adafruit_GFX5writeEh+0x40e>
    3be0:	88 a1       	ldd	r24, Y+32	; 0x20
    3be2:	99 a1       	ldd	r25, Y+33	; 0x21
    3be4:	fc 01       	movw	r30, r24
    3be6:	81 8d       	ldd	r24, Z+25	; 0x19
    3be8:	92 8d       	ldd	r25, Z+26	; 0x1a
    3bea:	04 96       	adiw	r24, 0x04	; 4
    3bec:	9d 83       	std	Y+5, r25	; 0x05
    3bee:	8c 83       	std	Y+4, r24	; 0x04
    3bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	84 91       	lpm	r24, Z
    3bf8:	8e 83       	std	Y+6, r24	; 0x06
    3bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    3bfc:	8f 83       	std	Y+7, r24	; 0x07
    3bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    3c00:	8f 81       	ldd	r24, Y+7	; 0x07
    3c02:	98 17       	cp	r25, r24
    3c04:	98 f0       	brcs	.+38     	; 0x3c2c <_ZN12Adafruit_GFX5writeEh+0x23e>
    3c06:	88 a1       	ldd	r24, Y+32	; 0x20
    3c08:	99 a1       	ldd	r25, Y+33	; 0x21
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	81 8d       	ldd	r24, Z+25	; 0x19
    3c0e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3c10:	06 96       	adiw	r24, 0x06	; 6
    3c12:	99 87       	std	Y+9, r25	; 0x09
    3c14:	88 87       	std	Y+8, r24	; 0x08
    3c16:	88 85       	ldd	r24, Y+8	; 0x08
    3c18:	99 85       	ldd	r25, Y+9	; 0x09
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	84 91       	lpm	r24, Z
    3c1e:	8a 87       	std	Y+10, r24	; 0x0a
    3c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c22:	8a a1       	ldd	r24, Y+34	; 0x22
    3c24:	98 17       	cp	r25, r24
    3c26:	10 f0       	brcs	.+4      	; 0x3c2c <_ZN12Adafruit_GFX5writeEh+0x23e>
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	01 c0       	rjmp	.+2      	; 0x3c2e <_ZN12Adafruit_GFX5writeEh+0x240>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	88 23       	and	r24, r24
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <_ZN12Adafruit_GFX5writeEh+0x246>
    3c32:	e4 c0       	rjmp	.+456    	; 0x3dfc <_ZN12Adafruit_GFX5writeEh+0x40e>
    3c34:	9a a1       	ldd	r25, Y+34	; 0x22
    3c36:	8f 81       	ldd	r24, Y+7	; 0x07
    3c38:	29 2f       	mov	r18, r25
    3c3a:	28 1b       	sub	r18, r24
    3c3c:	88 a1       	ldd	r24, Y+32	; 0x20
    3c3e:	99 a1       	ldd	r25, Y+33	; 0x21
    3c40:	fc 01       	movw	r30, r24
    3c42:	81 8d       	ldd	r24, Z+25	; 0x19
    3c44:	92 8d       	ldd	r25, Z+26	; 0x1a
    3c46:	62 2f       	mov	r22, r18
    3c48:	0e 94 2b 13 	call	0x2656	; 0x2656 <_Z18pgm_read_glyph_ptrPK7GFXfonth>
    3c4c:	9c 87       	std	Y+12, r25	; 0x0c
    3c4e:	8b 87       	std	Y+11, r24	; 0x0b
    3c50:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c52:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c54:	02 96       	adiw	r24, 0x02	; 2
    3c56:	9e 87       	std	Y+14, r25	; 0x0e
    3c58:	8d 87       	std	Y+13, r24	; 0x0d
    3c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c5e:	fc 01       	movw	r30, r24
    3c60:	84 91       	lpm	r24, Z
    3c62:	8f 87       	std	Y+15, r24	; 0x0f
    3c64:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c66:	88 8b       	std	Y+16, r24	; 0x10
    3c68:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c6c:	03 96       	adiw	r24, 0x03	; 3
    3c6e:	9a 8b       	std	Y+18, r25	; 0x12
    3c70:	89 8b       	std	Y+17, r24	; 0x11
    3c72:	89 89       	ldd	r24, Y+17	; 0x11
    3c74:	9a 89       	ldd	r25, Y+18	; 0x12
    3c76:	fc 01       	movw	r30, r24
    3c78:	84 91       	lpm	r24, Z
    3c7a:	8b 8b       	std	Y+19, r24	; 0x13
    3c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c7e:	8c 8b       	std	Y+20, r24	; 0x14
    3c80:	88 89       	ldd	r24, Y+16	; 0x10
    3c82:	88 23       	and	r24, r24
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <_ZN12Adafruit_GFX5writeEh+0x29a>
    3c86:	94 c0       	rjmp	.+296    	; 0x3db0 <_ZN12Adafruit_GFX5writeEh+0x3c2>
    3c88:	8c 89       	ldd	r24, Y+20	; 0x14
    3c8a:	88 23       	and	r24, r24
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <_ZN12Adafruit_GFX5writeEh+0x2a2>
    3c8e:	90 c0       	rjmp	.+288    	; 0x3db0 <_ZN12Adafruit_GFX5writeEh+0x3c2>
    3c90:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c92:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c94:	05 96       	adiw	r24, 0x05	; 5
    3c96:	9e 8b       	std	Y+22, r25	; 0x16
    3c98:	8d 8b       	std	Y+21, r24	; 0x15
    3c9a:	8d 89       	ldd	r24, Y+21	; 0x15
    3c9c:	9e 89       	ldd	r25, Y+22	; 0x16
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	84 91       	lpm	r24, Z
    3ca2:	8f 8b       	std	Y+23, r24	; 0x17
    3ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ca6:	08 2e       	mov	r0, r24
    3ca8:	00 0c       	add	r0, r0
    3caa:	99 0b       	sbc	r25, r25
    3cac:	99 8f       	std	Y+25, r25	; 0x19
    3cae:	88 8f       	std	Y+24, r24	; 0x18
    3cb0:	88 a1       	ldd	r24, Y+32	; 0x20
    3cb2:	99 a1       	ldd	r25, Y+33	; 0x21
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	87 89       	ldd	r24, Z+23	; 0x17
    3cb8:	88 23       	and	r24, r24
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <_ZN12Adafruit_GFX5writeEh+0x2d0>
    3cbc:	51 c0       	rjmp	.+162    	; 0x3d60 <_ZN12Adafruit_GFX5writeEh+0x372>
    3cbe:	88 a1       	ldd	r24, Y+32	; 0x20
    3cc0:	99 a1       	ldd	r25, Y+33	; 0x21
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	24 85       	ldd	r18, Z+12	; 0x0c
    3cc6:	35 85       	ldd	r19, Z+13	; 0x0d
    3cc8:	88 a1       	ldd	r24, Y+32	; 0x20
    3cca:	99 a1       	ldd	r25, Y+33	; 0x21
    3ccc:	fc 01       	movw	r30, r24
    3cce:	84 89       	ldd	r24, Z+20	; 0x14
    3cd0:	68 2f       	mov	r22, r24
    3cd2:	70 e0       	ldi	r23, 0x00	; 0
    3cd4:	88 89       	ldd	r24, Y+16	; 0x10
    3cd6:	48 2f       	mov	r20, r24
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
    3cda:	88 8d       	ldd	r24, Y+24	; 0x18
    3cdc:	99 8d       	ldd	r25, Y+25	; 0x19
    3cde:	48 0f       	add	r20, r24
    3ce0:	59 1f       	adc	r21, r25
    3ce2:	64 9f       	mul	r22, r20
    3ce4:	c0 01       	movw	r24, r0
    3ce6:	65 9f       	mul	r22, r21
    3ce8:	90 0d       	add	r25, r0
    3cea:	74 9f       	mul	r23, r20
    3cec:	90 0d       	add	r25, r0
    3cee:	11 24       	eor	r1, r1
    3cf0:	28 0f       	add	r18, r24
    3cf2:	39 1f       	adc	r19, r25
    3cf4:	88 a1       	ldd	r24, Y+32	; 0x20
    3cf6:	99 a1       	ldd	r25, Y+33	; 0x21
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	80 85       	ldd	r24, Z+8	; 0x08
    3cfc:	91 85       	ldd	r25, Z+9	; 0x09
    3cfe:	82 17       	cp	r24, r18
    3d00:	93 07       	cpc	r25, r19
    3d02:	74 f5       	brge	.+92     	; 0x3d60 <_ZN12Adafruit_GFX5writeEh+0x372>
    3d04:	88 a1       	ldd	r24, Y+32	; 0x20
    3d06:	99 a1       	ldd	r25, Y+33	; 0x21
    3d08:	fc 01       	movw	r30, r24
    3d0a:	15 86       	std	Z+13, r1	; 0x0d
    3d0c:	14 86       	std	Z+12, r1	; 0x0c
    3d0e:	88 a1       	ldd	r24, Y+32	; 0x20
    3d10:	99 a1       	ldd	r25, Y+33	; 0x21
    3d12:	fc 01       	movw	r30, r24
    3d14:	85 89       	ldd	r24, Z+21	; 0x15
    3d16:	48 2f       	mov	r20, r24
    3d18:	50 e0       	ldi	r21, 0x00	; 0
    3d1a:	88 a1       	ldd	r24, Y+32	; 0x20
    3d1c:	99 a1       	ldd	r25, Y+33	; 0x21
    3d1e:	fc 01       	movw	r30, r24
    3d20:	81 8d       	ldd	r24, Z+25	; 0x19
    3d22:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d24:	08 96       	adiw	r24, 0x08	; 8
    3d26:	9b 8f       	std	Y+27, r25	; 0x1b
    3d28:	8a 8f       	std	Y+26, r24	; 0x1a
    3d2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d2e:	fc 01       	movw	r30, r24
    3d30:	84 91       	lpm	r24, Z
    3d32:	8c 8f       	std	Y+28, r24	; 0x1c
    3d34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d36:	28 2f       	mov	r18, r24
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	42 9f       	mul	r20, r18
    3d3c:	c0 01       	movw	r24, r0
    3d3e:	43 9f       	mul	r20, r19
    3d40:	90 0d       	add	r25, r0
    3d42:	52 9f       	mul	r21, r18
    3d44:	90 0d       	add	r25, r0
    3d46:	11 24       	eor	r1, r1
    3d48:	28 a1       	ldd	r18, Y+32	; 0x20
    3d4a:	39 a1       	ldd	r19, Y+33	; 0x21
    3d4c:	f9 01       	movw	r30, r18
    3d4e:	26 85       	ldd	r18, Z+14	; 0x0e
    3d50:	37 85       	ldd	r19, Z+15	; 0x0f
    3d52:	28 0f       	add	r18, r24
    3d54:	39 1f       	adc	r19, r25
    3d56:	88 a1       	ldd	r24, Y+32	; 0x20
    3d58:	99 a1       	ldd	r25, Y+33	; 0x21
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	37 87       	std	Z+15, r19	; 0x0f
    3d5e:	26 87       	std	Z+14, r18	; 0x0e
    3d60:	88 a1       	ldd	r24, Y+32	; 0x20
    3d62:	99 a1       	ldd	r25, Y+33	; 0x21
    3d64:	fc 01       	movw	r30, r24
    3d66:	b5 89       	ldd	r27, Z+21	; 0x15
    3d68:	88 a1       	ldd	r24, Y+32	; 0x20
    3d6a:	99 a1       	ldd	r25, Y+33	; 0x21
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	a4 89       	ldd	r26, Z+20	; 0x14
    3d70:	88 a1       	ldd	r24, Y+32	; 0x20
    3d72:	99 a1       	ldd	r25, Y+33	; 0x21
    3d74:	fc 01       	movw	r30, r24
    3d76:	02 88       	ldd	r0, Z+18	; 0x12
    3d78:	f3 89       	ldd	r31, Z+19	; 0x13
    3d7a:	e0 2d       	mov	r30, r0
    3d7c:	fc a3       	std	Y+36, r31	; 0x24
    3d7e:	eb a3       	std	Y+35, r30	; 0x23
    3d80:	88 a1       	ldd	r24, Y+32	; 0x20
    3d82:	99 a1       	ldd	r25, Y+33	; 0x21
    3d84:	fc 01       	movw	r30, r24
    3d86:	20 89       	ldd	r18, Z+16	; 0x10
    3d88:	31 89       	ldd	r19, Z+17	; 0x11
    3d8a:	88 a1       	ldd	r24, Y+32	; 0x20
    3d8c:	99 a1       	ldd	r25, Y+33	; 0x21
    3d8e:	fc 01       	movw	r30, r24
    3d90:	46 85       	ldd	r20, Z+14	; 0x0e
    3d92:	57 85       	ldd	r21, Z+15	; 0x0f
    3d94:	88 a1       	ldd	r24, Y+32	; 0x20
    3d96:	99 a1       	ldd	r25, Y+33	; 0x21
    3d98:	fc 01       	movw	r30, r24
    3d9a:	64 85       	ldd	r22, Z+12	; 0x0c
    3d9c:	75 85       	ldd	r23, Z+13	; 0x0d
    3d9e:	88 a1       	ldd	r24, Y+32	; 0x20
    3da0:	99 a1       	ldd	r25, Y+33	; 0x21
    3da2:	ab 2e       	mov	r10, r27
    3da4:	ca 2e       	mov	r12, r26
    3da6:	eb a0       	ldd	r14, Y+35	; 0x23
    3da8:	fc a0       	ldd	r15, Y+36	; 0x24
    3daa:	89 01       	movw	r16, r18
    3dac:	2a a1       	ldd	r18, Y+34	; 0x22
    3dae:	cd da       	rcall	.-2662   	; 0x334a <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    3db0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3db2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3db4:	04 96       	adiw	r24, 0x04	; 4
    3db6:	9e 8f       	std	Y+30, r25	; 0x1e
    3db8:	8d 8f       	std	Y+29, r24	; 0x1d
    3dba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	84 91       	lpm	r24, Z
    3dc2:	8f 8f       	std	Y+31, r24	; 0x1f
    3dc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dc6:	48 2f       	mov	r20, r24
    3dc8:	50 e0       	ldi	r21, 0x00	; 0
    3dca:	88 a1       	ldd	r24, Y+32	; 0x20
    3dcc:	99 a1       	ldd	r25, Y+33	; 0x21
    3dce:	fc 01       	movw	r30, r24
    3dd0:	84 89       	ldd	r24, Z+20	; 0x14
    3dd2:	28 2f       	mov	r18, r24
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	42 9f       	mul	r20, r18
    3dd8:	c0 01       	movw	r24, r0
    3dda:	43 9f       	mul	r20, r19
    3ddc:	90 0d       	add	r25, r0
    3dde:	52 9f       	mul	r21, r18
    3de0:	90 0d       	add	r25, r0
    3de2:	11 24       	eor	r1, r1
    3de4:	28 a1       	ldd	r18, Y+32	; 0x20
    3de6:	39 a1       	ldd	r19, Y+33	; 0x21
    3de8:	f9 01       	movw	r30, r18
    3dea:	24 85       	ldd	r18, Z+12	; 0x0c
    3dec:	35 85       	ldd	r19, Z+13	; 0x0d
    3dee:	28 0f       	add	r18, r24
    3df0:	39 1f       	adc	r19, r25
    3df2:	88 a1       	ldd	r24, Y+32	; 0x20
    3df4:	99 a1       	ldd	r25, Y+33	; 0x21
    3df6:	fc 01       	movw	r30, r24
    3df8:	35 87       	std	Z+13, r19	; 0x0d
    3dfa:	24 87       	std	Z+12, r18	; 0x0c
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	a4 96       	adiw	r28, 0x24	; 36
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	f8 94       	cli
    3e06:	de bf       	out	0x3e, r29	; 62
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	df 91       	pop	r29
    3e0e:	cf 91       	pop	r28
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	ff 90       	pop	r15
    3e16:	ef 90       	pop	r14
    3e18:	cf 90       	pop	r12
    3e1a:	af 90       	pop	r10
    3e1c:	08 95       	ret

00003e1e <_ZN12Adafruit_GFX11setTextSizeEh>:
    3e1e:	cf 93       	push	r28
    3e20:	df 93       	push	r29
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	9a 83       	std	Y+2, r25	; 0x02
    3e2a:	89 83       	std	Y+1, r24	; 0x01
    3e2c:	6b 83       	std	Y+3, r22	; 0x03
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	9a 81       	ldd	r25, Y+2	; 0x02
    3e32:	4b 81       	ldd	r20, Y+3	; 0x03
    3e34:	6b 81       	ldd	r22, Y+3	; 0x03
    3e36:	07 d0       	rcall	.+14     	; 0x3e46 <_ZN12Adafruit_GFX11setTextSizeEhh>
    3e38:	00 00       	nop
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	08 95       	ret

00003e46 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    3e4c:	1f 92       	push	r1
    3e4e:	cd b7       	in	r28, 0x3d	; 61
    3e50:	de b7       	in	r29, 0x3e	; 62
    3e52:	9a 83       	std	Y+2, r25	; 0x02
    3e54:	89 83       	std	Y+1, r24	; 0x01
    3e56:	6b 83       	std	Y+3, r22	; 0x03
    3e58:	4c 83       	std	Y+4, r20	; 0x04
    3e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5c:	88 23       	and	r24, r24
    3e5e:	11 f0       	breq	.+4      	; 0x3e64 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1e>
    3e60:	2b 81       	ldd	r18, Y+3	; 0x03
    3e62:	01 c0       	rjmp	.+2      	; 0x3e66 <_ZN12Adafruit_GFX11setTextSizeEhh+0x20>
    3e64:	21 e0       	ldi	r18, 0x01	; 1
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	24 8b       	std	Z+20, r18	; 0x14
    3e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e70:	88 23       	and	r24, r24
    3e72:	11 f0       	breq	.+4      	; 0x3e78 <_ZN12Adafruit_GFX11setTextSizeEhh+0x32>
    3e74:	2c 81       	ldd	r18, Y+4	; 0x04
    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <_ZN12Adafruit_GFX11setTextSizeEhh+0x34>
    3e78:	21 e0       	ldi	r18, 0x01	; 1
    3e7a:	89 81       	ldd	r24, Y+1	; 0x01
    3e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7e:	fc 01       	movw	r30, r24
    3e80:	25 8b       	std	Z+21, r18	; 0x15
    3e82:	00 00       	nop
    3e84:	0f 90       	pop	r0
    3e86:	0f 90       	pop	r0
    3e88:	0f 90       	pop	r0
    3e8a:	0f 90       	pop	r0
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	08 95       	ret

00003e92 <_ZN12Adafruit_GFX11setRotationEh>:
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	00 d0       	rcall	.+0      	; 0x3e98 <_ZN12Adafruit_GFX11setRotationEh+0x6>
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62
    3e9c:	9a 83       	std	Y+2, r25	; 0x02
    3e9e:	89 83       	std	Y+1, r24	; 0x01
    3ea0:	6b 83       	std	Y+3, r22	; 0x03
    3ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea4:	28 2f       	mov	r18, r24
    3ea6:	23 70       	andi	r18, 0x03	; 3
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3eac:	fc 01       	movw	r30, r24
    3eae:	26 8b       	std	Z+22, r18	; 0x16
    3eb0:	89 81       	ldd	r24, Y+1	; 0x01
    3eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	86 89       	ldd	r24, Z+22	; 0x16
    3eb8:	88 2f       	mov	r24, r24
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	81 30       	cpi	r24, 0x01	; 1
    3ebe:	91 05       	cpc	r25, r1
    3ec0:	09 f1       	breq	.+66     	; 0x3f04 <_ZN12Adafruit_GFX11setRotationEh+0x72>
    3ec2:	82 30       	cpi	r24, 0x02	; 2
    3ec4:	91 05       	cpc	r25, r1
    3ec6:	1c f4       	brge	.+6      	; 0x3ece <_ZN12Adafruit_GFX11setRotationEh+0x3c>
    3ec8:	89 2b       	or	r24, r25
    3eca:	39 f0       	breq	.+14     	; 0x3eda <_ZN12Adafruit_GFX11setRotationEh+0x48>
    3ecc:	30 c0       	rjmp	.+96     	; 0x3f2e <_ZN12Adafruit_GFX11setRotationEh+0x9c>
    3ece:	82 30       	cpi	r24, 0x02	; 2
    3ed0:	91 05       	cpc	r25, r1
    3ed2:	19 f0       	breq	.+6      	; 0x3eda <_ZN12Adafruit_GFX11setRotationEh+0x48>
    3ed4:	03 97       	sbiw	r24, 0x03	; 3
    3ed6:	b1 f0       	breq	.+44     	; 0x3f04 <_ZN12Adafruit_GFX11setRotationEh+0x72>
    3ed8:	2a c0       	rjmp	.+84     	; 0x3f2e <_ZN12Adafruit_GFX11setRotationEh+0x9c>
    3eda:	89 81       	ldd	r24, Y+1	; 0x01
    3edc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ede:	fc 01       	movw	r30, r24
    3ee0:	24 81       	ldd	r18, Z+4	; 0x04
    3ee2:	35 81       	ldd	r19, Z+5	; 0x05
    3ee4:	89 81       	ldd	r24, Y+1	; 0x01
    3ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee8:	fc 01       	movw	r30, r24
    3eea:	31 87       	std	Z+9, r19	; 0x09
    3eec:	20 87       	std	Z+8, r18	; 0x08
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	26 81       	ldd	r18, Z+6	; 0x06
    3ef6:	37 81       	ldd	r19, Z+7	; 0x07
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	9a 81       	ldd	r25, Y+2	; 0x02
    3efc:	fc 01       	movw	r30, r24
    3efe:	33 87       	std	Z+11, r19	; 0x0b
    3f00:	22 87       	std	Z+10, r18	; 0x0a
    3f02:	15 c0       	rjmp	.+42     	; 0x3f2e <_ZN12Adafruit_GFX11setRotationEh+0x9c>
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	9a 81       	ldd	r25, Y+2	; 0x02
    3f08:	fc 01       	movw	r30, r24
    3f0a:	26 81       	ldd	r18, Z+6	; 0x06
    3f0c:	37 81       	ldd	r19, Z+7	; 0x07
    3f0e:	89 81       	ldd	r24, Y+1	; 0x01
    3f10:	9a 81       	ldd	r25, Y+2	; 0x02
    3f12:	fc 01       	movw	r30, r24
    3f14:	31 87       	std	Z+9, r19	; 0x09
    3f16:	20 87       	std	Z+8, r18	; 0x08
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	24 81       	ldd	r18, Z+4	; 0x04
    3f20:	35 81       	ldd	r19, Z+5	; 0x05
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	9a 81       	ldd	r25, Y+2	; 0x02
    3f26:	fc 01       	movw	r30, r24
    3f28:	33 87       	std	Z+11, r19	; 0x0b
    3f2a:	22 87       	std	Z+10, r18	; 0x0a
    3f2c:	00 00       	nop
    3f2e:	00 00       	nop
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	0f 90       	pop	r0
    3f36:	df 91       	pop	r29
    3f38:	cf 91       	pop	r28
    3f3a:	08 95       	ret

00003f3c <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
    3f3c:	cf 93       	push	r28
    3f3e:	df 93       	push	r29
    3f40:	00 d0       	rcall	.+0      	; 0x3f42 <_ZN12Adafruit_GFX13invertDisplayEb+0x6>
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	9a 83       	std	Y+2, r25	; 0x02
    3f48:	89 83       	std	Y+1, r24	; 0x01
    3f4a:	6b 83       	std	Y+3, r22	; 0x03
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    3f4c:	00 00       	nop
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	df 91       	pop	r29
    3f56:	cf 91       	pop	r28
    3f58:	08 95       	ret

00003f5a <_ZN8SPIClass8transferEh>:
    SPCR = settings.spcr;
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    3f5a:	cf 93       	push	r28
    3f5c:	df 93       	push	r29
    3f5e:	1f 92       	push	r1
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
    3f64:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    3f66:	8e e4       	ldi	r24, 0x4E	; 78
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	29 81       	ldd	r18, Y+1	; 0x01
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	20 83       	st	Z, r18
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    3f70:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    3f72:	8d e4       	ldi	r24, 0x4D	; 77
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	fc 01       	movw	r30, r24
    3f78:	80 81       	ld	r24, Z
    3f7a:	80 95       	com	r24
    3f7c:	88 1f       	adc	r24, r24
    3f7e:	88 27       	eor	r24, r24
    3f80:	88 1f       	adc	r24, r24
    3f82:	88 23       	and	r24, r24
    3f84:	09 f0       	breq	.+2      	; 0x3f88 <_ZN8SPIClass8transferEh+0x2e>
    3f86:	f5 cf       	rjmp	.-22     	; 0x3f72 <_ZN8SPIClass8transferEh+0x18>
    return SPDR;
    3f88:	8e e4       	ldi	r24, 0x4E	; 78
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	80 81       	ld	r24, Z
  }
    3f90:	0f 90       	pop	r0
    3f92:	df 91       	pop	r29
    3f94:	cf 91       	pop	r28
    3f96:	08 95       	ret

00003f98 <_ZN11SPISettingsC1Ev>:
*/
void Adafruit_SSD1306::stopscroll(void) {
  TRANSACTION_START
  ssd1306_command1(SSD1306_DEACTIVATE_SCROLL);
  TRANSACTION_END
}
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
    3fa0:	2f 97       	sbiw	r28, 0x0f	; 15
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	9f 87       	std	Y+15, r25	; 0x0f
    3fae:	8e 87       	std	Y+14, r24	; 0x0e
    3fb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fb4:	9a 83       	std	Y+2, r25	; 0x02
    3fb6:	89 83       	std	Y+1, r24	; 0x01
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	99 e0       	ldi	r25, 0x09	; 9
    3fbc:	ad e3       	ldi	r26, 0x3D	; 61
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	8b 83       	std	Y+3, r24	; 0x03
    3fc2:	9c 83       	std	Y+4, r25	; 0x04
    3fc4:	ad 83       	std	Y+5, r26	; 0x05
    3fc6:	be 83       	std	Y+6, r27	; 0x06
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	8f 83       	std	Y+7, r24	; 0x07
    3fcc:	18 86       	std	Y+8, r1	; 0x08
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	92 e1       	ldi	r25, 0x12	; 18
    3fd2:	aa e7       	ldi	r26, 0x7A	; 122
    3fd4:	b0 e0       	ldi	r27, 0x00	; 0
    3fd6:	89 87       	std	Y+9, r24	; 0x09
    3fd8:	9a 87       	std	Y+10, r25	; 0x0a
    3fda:	ab 87       	std	Y+11, r26	; 0x0b
    3fdc:	bc 87       	std	Y+12, r27	; 0x0c
    3fde:	1d 86       	std	Y+13, r1	; 0x0d
    3fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe2:	86 30       	cpi	r24, 0x06	; 6
    3fe4:	e8 f4       	brcc	.+58     	; 0x4020 <_ZN11SPISettingsC1Ev+0x88>
    3fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    3fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    3fea:	4d 81       	ldd	r20, Y+5	; 0x05
    3fec:	5e 81       	ldd	r21, Y+6	; 0x06
    3fee:	89 85       	ldd	r24, Y+9	; 0x09
    3ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff2:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ff4:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ff6:	28 17       	cp	r18, r24
    3ff8:	39 07       	cpc	r19, r25
    3ffa:	4a 07       	cpc	r20, r26
    3ffc:	5b 07       	cpc	r21, r27
    3ffe:	80 f4       	brcc	.+32     	; 0x4020 <_ZN11SPISettingsC1Ev+0x88>
    4000:	89 85       	ldd	r24, Y+9	; 0x09
    4002:	9a 85       	ldd	r25, Y+10	; 0x0a
    4004:	ab 85       	ldd	r26, Y+11	; 0x0b
    4006:	bc 85       	ldd	r27, Y+12	; 0x0c
    4008:	b6 95       	lsr	r27
    400a:	a7 95       	ror	r26
    400c:	97 95       	ror	r25
    400e:	87 95       	ror	r24
    4010:	89 87       	std	Y+9, r24	; 0x09
    4012:	9a 87       	std	Y+10, r25	; 0x0a
    4014:	ab 87       	std	Y+11, r26	; 0x0b
    4016:	bc 87       	std	Y+12, r27	; 0x0c
    4018:	8d 85       	ldd	r24, Y+13	; 0x0d
    401a:	8f 5f       	subi	r24, 0xFF	; 255
    401c:	8d 87       	std	Y+13, r24	; 0x0d
    401e:	e0 cf       	rjmp	.-64     	; 0x3fe0 <_ZN11SPISettingsC1Ev+0x48>
    4020:	8d 85       	ldd	r24, Y+13	; 0x0d
    4022:	86 30       	cpi	r24, 0x06	; 6
    4024:	11 f4       	brne	.+4      	; 0x402a <_ZN11SPISettingsC1Ev+0x92>
    4026:	87 e0       	ldi	r24, 0x07	; 7
    4028:	8d 87       	std	Y+13, r24	; 0x0d
    402a:	9d 85       	ldd	r25, Y+13	; 0x0d
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	89 27       	eor	r24, r25
    4030:	8d 87       	std	Y+13, r24	; 0x0d
    4032:	8f 81       	ldd	r24, Y+7	; 0x07
    4034:	88 23       	and	r24, r24
    4036:	11 f4       	brne	.+4      	; 0x403c <_ZN11SPISettingsC1Ev+0xa4>
    4038:	80 e7       	ldi	r24, 0x70	; 112
    403a:	01 c0       	rjmp	.+2      	; 0x403e <_ZN11SPISettingsC1Ev+0xa6>
    403c:	80 e5       	ldi	r24, 0x50	; 80
    403e:	98 85       	ldd	r25, Y+8	; 0x08
    4040:	9c 70       	andi	r25, 0x0C	; 12
    4042:	29 2f       	mov	r18, r25
    4044:	28 2b       	or	r18, r24
    4046:	8d 85       	ldd	r24, Y+13	; 0x0d
    4048:	88 2f       	mov	r24, r24
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	95 95       	asr	r25
    404e:	87 95       	ror	r24
    4050:	83 70       	andi	r24, 0x03	; 3
    4052:	82 2b       	or	r24, r18
    4054:	28 2f       	mov	r18, r24
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	9a 81       	ldd	r25, Y+2	; 0x02
    405a:	fc 01       	movw	r30, r24
    405c:	20 83       	st	Z, r18
    405e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4060:	28 2f       	mov	r18, r24
    4062:	21 70       	andi	r18, 0x01	; 1
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	9a 81       	ldd	r25, Y+2	; 0x02
    4068:	fc 01       	movw	r30, r24
    406a:	21 83       	std	Z+1, r18	; 0x01
    406c:	00 00       	nop
    406e:	2f 96       	adiw	r28, 0x0f	; 15
    4070:	0f b6       	in	r0, 0x3f	; 63
    4072:	f8 94       	cli
    4074:	de bf       	out	0x3e, r29	; 62
    4076:	0f be       	out	0x3f, r0	; 63
    4078:	cd bf       	out	0x3d, r28	; 61
    407a:	df 91       	pop	r29
    407c:	cf 91       	pop	r28
    407e:	08 95       	ret

00004080 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    4080:	8f 92       	push	r8
    4082:	9f 92       	push	r9
    4084:	af 92       	push	r10
    4086:	bf 92       	push	r11
    4088:	cf 92       	push	r12
    408a:	df 92       	push	r13
    408c:	ef 92       	push	r14
    408e:	ff 92       	push	r15
    4090:	0f 93       	push	r16
    4092:	cf 93       	push	r28
    4094:	df 93       	push	r29
    4096:	cd b7       	in	r28, 0x3d	; 61
    4098:	de b7       	in	r29, 0x3e	; 62
    409a:	2f 97       	sbiw	r28, 0x0f	; 15
    409c:	0f b6       	in	r0, 0x3f	; 63
    409e:	f8 94       	cli
    40a0:	de bf       	out	0x3e, r29	; 62
    40a2:	0f be       	out	0x3f, r0	; 63
    40a4:	cd bf       	out	0x3d, r28	; 61
    40a6:	9a 83       	std	Y+2, r25	; 0x02
    40a8:	89 83       	std	Y+1, r24	; 0x01
    40aa:	6b 83       	std	Y+3, r22	; 0x03
    40ac:	4c 83       	std	Y+4, r20	; 0x04
    40ae:	3e 83       	std	Y+6, r19	; 0x06
    40b0:	2d 83       	std	Y+5, r18	; 0x05
    40b2:	0f 83       	std	Y+7, r16	; 0x07
    40b4:	c8 86       	std	Y+8, r12	; 0x08
    40b6:	d9 86       	std	Y+9, r13	; 0x09
    40b8:	ea 86       	std	Y+10, r14	; 0x0a
    40ba:	fb 86       	std	Y+11, r15	; 0x0b
    40bc:	8c 86       	std	Y+12, r8	; 0x0c
    40be:	9d 86       	std	Y+13, r9	; 0x0d
    40c0:	ae 86       	std	Y+14, r10	; 0x0e
    40c2:	bf 86       	std	Y+15, r11	; 0x0f
    40c4:	8c 81       	ldd	r24, Y+4	; 0x04
    40c6:	48 2f       	mov	r20, r24
    40c8:	50 e0       	ldi	r21, 0x00	; 0
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	28 2f       	mov	r18, r24
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	89 81       	ldd	r24, Y+1	; 0x01
    40d2:	9a 81       	ldd	r25, Y+2	; 0x02
    40d4:	b9 01       	movw	r22, r18
    40d6:	0e 94 83 13 	call	0x2706	; 0x2706 <_ZN12Adafruit_GFXC1Eii>
    40da:	2d ec       	ldi	r18, 0xCD	; 205
    40dc:	32 e0       	ldi	r19, 0x02	; 2
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	9a 81       	ldd	r25, Y+2	; 0x02
    40e2:	fc 01       	movw	r30, r24
    40e4:	31 83       	std	Z+1, r19	; 0x01
    40e6:	20 83       	st	Z, r18
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	9a 81       	ldd	r25, Y+2	; 0x02
    40ec:	fc 01       	movw	r30, r24
    40ee:	14 8e       	std	Z+28, r1	; 0x1c
    40f0:	13 8e       	std	Z+27, r1	; 0x1b
    40f2:	8d 81       	ldd	r24, Y+5	; 0x05
    40f4:	9e 81       	ldd	r25, Y+6	; 0x06
    40f6:	89 2b       	or	r24, r25
    40f8:	19 f0       	breq	.+6      	; 0x4100 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x80>
    40fa:	8d 81       	ldd	r24, Y+5	; 0x05
    40fc:	9e 81       	ldd	r25, Y+6	; 0x06
    40fe:	02 c0       	rjmp	.+4      	; 0x4104 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x84>
    4100:	85 ec       	ldi	r24, 0xC5	; 197
    4102:	95 e0       	ldi	r25, 0x05	; 5
    4104:	29 81       	ldd	r18, Y+1	; 0x01
    4106:	3a 81       	ldd	r19, Y+2	; 0x02
    4108:	f9 01       	movw	r30, r18
    410a:	96 8f       	std	Z+30, r25	; 0x1e
    410c:	85 8f       	std	Z+29, r24	; 0x1d
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	9a 81       	ldd	r25, Y+2	; 0x02
    4112:	fc 01       	movw	r30, r24
    4114:	10 a2       	std	Z+32, r1	; 0x20
    4116:	17 8e       	std	Z+31, r1	; 0x1f
    4118:	89 81       	ldd	r24, Y+1	; 0x01
    411a:	9a 81       	ldd	r25, Y+2	; 0x02
    411c:	2f ef       	ldi	r18, 0xFF	; 255
    411e:	fc 01       	movw	r30, r24
    4120:	24 a3       	std	Z+36, r18	; 0x24
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	9a 81       	ldd	r25, Y+2	; 0x02
    4126:	2f ef       	ldi	r18, 0xFF	; 255
    4128:	fc 01       	movw	r30, r24
    412a:	25 a3       	std	Z+37, r18	; 0x25
    412c:	89 81       	ldd	r24, Y+1	; 0x01
    412e:	9a 81       	ldd	r25, Y+2	; 0x02
    4130:	2f ef       	ldi	r18, 0xFF	; 255
    4132:	fc 01       	movw	r30, r24
    4134:	26 a3       	std	Z+38, r18	; 0x26
    4136:	89 81       	ldd	r24, Y+1	; 0x01
    4138:	9a 81       	ldd	r25, Y+2	; 0x02
    413a:	2f ef       	ldi	r18, 0xFF	; 255
    413c:	fc 01       	movw	r30, r24
    413e:	27 a3       	std	Z+39, r18	; 0x27
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	9a 81       	ldd	r25, Y+2	; 0x02
    4144:	2f 81       	ldd	r18, Y+7	; 0x07
    4146:	fc 01       	movw	r30, r24
    4148:	20 a7       	std	Z+40, r18	; 0x28
    414a:	29 81       	ldd	r18, Y+1	; 0x01
    414c:	3a 81       	ldd	r19, Y+2	; 0x02
    414e:	88 85       	ldd	r24, Y+8	; 0x08
    4150:	99 85       	ldd	r25, Y+9	; 0x09
    4152:	aa 85       	ldd	r26, Y+10	; 0x0a
    4154:	bb 85       	ldd	r27, Y+11	; 0x0b
    4156:	f9 01       	movw	r30, r18
    4158:	85 ab       	std	Z+53, r24	; 0x35
    415a:	96 ab       	std	Z+54, r25	; 0x36
    415c:	a7 ab       	std	Z+55, r26	; 0x37
    415e:	b0 af       	std	Z+56, r27	; 0x38
    4160:	29 81       	ldd	r18, Y+1	; 0x01
    4162:	3a 81       	ldd	r19, Y+2	; 0x02
    4164:	8c 85       	ldd	r24, Y+12	; 0x0c
    4166:	9d 85       	ldd	r25, Y+13	; 0x0d
    4168:	ae 85       	ldd	r26, Y+14	; 0x0e
    416a:	bf 85       	ldd	r27, Y+15	; 0x0f
    416c:	f9 01       	movw	r30, r18
    416e:	81 af       	std	Z+57, r24	; 0x39
    4170:	92 af       	std	Z+58, r25	; 0x3a
    4172:	a3 af       	std	Z+59, r26	; 0x3b
    4174:	b4 af       	std	Z+60, r27	; 0x3c
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	9a 81       	ldd	r25, Y+2	; 0x02
    417a:	ce 96       	adiw	r24, 0x3e	; 62
    417c:	0d df       	rcall	.-486    	; 0x3f98 <_ZN11SPISettingsC1Ev>
    417e:	00 00       	nop
    4180:	2f 96       	adiw	r28, 0x0f	; 15
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	f8 94       	cli
    4186:	de bf       	out	0x3e, r29	; 62
    4188:	0f be       	out	0x3f, r0	; 63
    418a:	cd bf       	out	0x3d, r28	; 61
    418c:	df 91       	pop	r29
    418e:	cf 91       	pop	r28
    4190:	0f 91       	pop	r16
    4192:	ff 90       	pop	r15
    4194:	ef 90       	pop	r14
    4196:	df 90       	pop	r13
    4198:	cf 90       	pop	r12
    419a:	bf 90       	pop	r11
    419c:	af 90       	pop	r10
    419e:	9f 90       	pop	r9
    41a0:	8f 90       	pop	r8
    41a2:	08 95       	ret

000041a4 <_ZN16Adafruit_SSD1306D1Ev>:
    41a4:	cf 93       	push	r28
    41a6:	df 93       	push	r29
    41a8:	1f 92       	push	r1
    41aa:	1f 92       	push	r1
    41ac:	cd b7       	in	r28, 0x3d	; 61
    41ae:	de b7       	in	r29, 0x3e	; 62
    41b0:	9a 83       	std	Y+2, r25	; 0x02
    41b2:	89 83       	std	Y+1, r24	; 0x01
    41b4:	2d ec       	ldi	r18, 0xCD	; 205
    41b6:	32 e0       	ldi	r19, 0x02	; 2
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
    41ba:	9a 81       	ldd	r25, Y+2	; 0x02
    41bc:	fc 01       	movw	r30, r24
    41be:	31 83       	std	Z+1, r19	; 0x01
    41c0:	20 83       	st	Z, r18
    41c2:	89 81       	ldd	r24, Y+1	; 0x01
    41c4:	9a 81       	ldd	r25, Y+2	; 0x02
    41c6:	fc 01       	movw	r30, r24
    41c8:	87 8d       	ldd	r24, Z+31	; 0x1f
    41ca:	90 a1       	ldd	r25, Z+32	; 0x20
    41cc:	89 2b       	or	r24, r25
    41ce:	61 f0       	breq	.+24     	; 0x41e8 <_ZN16Adafruit_SSD1306D1Ev+0x44>
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	9a 81       	ldd	r25, Y+2	; 0x02
    41d4:	fc 01       	movw	r30, r24
    41d6:	87 8d       	ldd	r24, Z+31	; 0x1f
    41d8:	90 a1       	ldd	r25, Z+32	; 0x20
    41da:	0e 94 0d 64 	call	0xc81a	; 0xc81a <free>
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	9a 81       	ldd	r25, Y+2	; 0x02
    41e2:	fc 01       	movw	r30, r24
    41e4:	10 a2       	std	Z+32, r1	; 0x20
    41e6:	17 8e       	std	Z+31, r1	; 0x1f
    41e8:	00 00       	nop
    41ea:	0f 90       	pop	r0
    41ec:	0f 90       	pop	r0
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	08 95       	ret

000041f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    41f4:	cf 93       	push	r28
    41f6:	df 93       	push	r29
    41f8:	cd b7       	in	r28, 0x3d	; 61
    41fa:	de b7       	in	r29, 0x3e	; 62
    41fc:	27 97       	sbiw	r28, 0x07	; 7
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	9e 83       	std	Y+6, r25	; 0x06
    420a:	8d 83       	std	Y+5, r24	; 0x05
    420c:	6f 83       	std	Y+7, r22	; 0x07
    420e:	8d 81       	ldd	r24, Y+5	; 0x05
    4210:	9e 81       	ldd	r25, Y+6	; 0x06
    4212:	fc 01       	movw	r30, r24
    4214:	85 8d       	ldd	r24, Z+29	; 0x1d
    4216:	96 8d       	ldd	r25, Z+30	; 0x1e
    4218:	89 2b       	or	r24, r25
    421a:	e9 f1       	breq	.+122    	; 0x4296 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xa2>
    421c:	8d 81       	ldd	r24, Y+5	; 0x05
    421e:	9e 81       	ldd	r25, Y+6	; 0x06
    4220:	fc 01       	movw	r30, r24
    4222:	81 a1       	ldd	r24, Z+33	; 0x21
    4224:	28 2f       	mov	r18, r24
    4226:	88 0f       	add	r24, r24
    4228:	33 0b       	sbc	r19, r19
    422a:	8d 81       	ldd	r24, Y+5	; 0x05
    422c:	9e 81       	ldd	r25, Y+6	; 0x06
    422e:	fc 01       	movw	r30, r24
    4230:	85 8d       	ldd	r24, Z+29	; 0x1d
    4232:	96 8d       	ldd	r25, Z+30	; 0x1e
    4234:	b9 01       	movw	r22, r18
    4236:	0e 94 ee 55 	call	0xabdc	; 0xabdc <_ZN7TwoWire17beginTransmissionEi>
    423a:	8d 81       	ldd	r24, Y+5	; 0x05
    423c:	9e 81       	ldd	r25, Y+6	; 0x06
    423e:	fc 01       	movw	r30, r24
    4240:	85 8d       	ldd	r24, Z+29	; 0x1d
    4242:	96 8d       	ldd	r25, Z+30	; 0x1e
    4244:	fc 01       	movw	r30, r24
    4246:	80 81       	ld	r24, Z
    4248:	91 81       	ldd	r25, Z+1	; 0x01
    424a:	fc 01       	movw	r30, r24
    424c:	20 81       	ld	r18, Z
    424e:	31 81       	ldd	r19, Z+1	; 0x01
    4250:	8d 81       	ldd	r24, Y+5	; 0x05
    4252:	9e 81       	ldd	r25, Y+6	; 0x06
    4254:	fc 01       	movw	r30, r24
    4256:	85 8d       	ldd	r24, Z+29	; 0x1d
    4258:	96 8d       	ldd	r25, Z+30	; 0x1e
    425a:	60 e0       	ldi	r22, 0x00	; 0
    425c:	f9 01       	movw	r30, r18
    425e:	19 95       	eicall
    4260:	8d 81       	ldd	r24, Y+5	; 0x05
    4262:	9e 81       	ldd	r25, Y+6	; 0x06
    4264:	fc 01       	movw	r30, r24
    4266:	85 8d       	ldd	r24, Z+29	; 0x1d
    4268:	96 8d       	ldd	r25, Z+30	; 0x1e
    426a:	fc 01       	movw	r30, r24
    426c:	80 81       	ld	r24, Z
    426e:	91 81       	ldd	r25, Z+1	; 0x01
    4270:	fc 01       	movw	r30, r24
    4272:	20 81       	ld	r18, Z
    4274:	31 81       	ldd	r19, Z+1	; 0x01
    4276:	8d 81       	ldd	r24, Y+5	; 0x05
    4278:	9e 81       	ldd	r25, Y+6	; 0x06
    427a:	fc 01       	movw	r30, r24
    427c:	85 8d       	ldd	r24, Z+29	; 0x1d
    427e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4280:	6f 81       	ldd	r22, Y+7	; 0x07
    4282:	f9 01       	movw	r30, r18
    4284:	19 95       	eicall
    4286:	8d 81       	ldd	r24, Y+5	; 0x05
    4288:	9e 81       	ldd	r25, Y+6	; 0x06
    428a:	fc 01       	movw	r30, r24
    428c:	85 8d       	ldd	r24, Z+29	; 0x1d
    428e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4290:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>
    4294:	88 c0       	rjmp	.+272    	; 0x43a6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x1b2>
    4296:	8d 81       	ldd	r24, Y+5	; 0x05
    4298:	9e 81       	ldd	r25, Y+6	; 0x06
    429a:	fc 01       	movw	r30, r24
    429c:	85 a5       	ldd	r24, Z+45	; 0x2d
    429e:	96 a5       	ldd	r25, Z+46	; 0x2e
    42a0:	2d 81       	ldd	r18, Y+5	; 0x05
    42a2:	3e 81       	ldd	r19, Y+6	; 0x06
    42a4:	f9 01       	movw	r30, r18
    42a6:	25 a5       	ldd	r18, Z+45	; 0x2d
    42a8:	36 a5       	ldd	r19, Z+46	; 0x2e
    42aa:	f9 01       	movw	r30, r18
    42ac:	20 81       	ld	r18, Z
    42ae:	42 2f       	mov	r20, r18
    42b0:	2d 81       	ldd	r18, Y+5	; 0x05
    42b2:	3e 81       	ldd	r19, Y+6	; 0x06
    42b4:	f9 01       	movw	r30, r18
    42b6:	23 a9       	ldd	r18, Z+51	; 0x33
    42b8:	20 95       	com	r18
    42ba:	24 23       	and	r18, r20
    42bc:	fc 01       	movw	r30, r24
    42be:	20 83       	st	Z, r18
    42c0:	8d 81       	ldd	r24, Y+5	; 0x05
    42c2:	9e 81       	ldd	r25, Y+6	; 0x06
    42c4:	9a 83       	std	Y+2, r25	; 0x02
    42c6:	89 83       	std	Y+1, r24	; 0x01
    42c8:	8f 81       	ldd	r24, Y+7	; 0x07
    42ca:	8b 83       	std	Y+3, r24	; 0x03
    42cc:	89 81       	ldd	r24, Y+1	; 0x01
    42ce:	9a 81       	ldd	r25, Y+2	; 0x02
    42d0:	fc 01       	movw	r30, r24
    42d2:	83 8d       	ldd	r24, Z+27	; 0x1b
    42d4:	94 8d       	ldd	r25, Z+28	; 0x1c
    42d6:	89 2b       	or	r24, r25
    42d8:	19 f0       	breq	.+6      	; 0x42e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xec>
    42da:	8b 81       	ldd	r24, Y+3	; 0x03
    42dc:	3e de       	rcall	.-900    	; 0x3f5a <_ZN8SPIClass8transferEh>
    42de:	63 c0       	rjmp	.+198    	; 0x43a6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x1b2>
    42e0:	80 e8       	ldi	r24, 0x80	; 128
    42e2:	8c 83       	std	Y+4, r24	; 0x04
    42e4:	8c 81       	ldd	r24, Y+4	; 0x04
    42e6:	88 23       	and	r24, r24
    42e8:	09 f4       	brne	.+2      	; 0x42ec <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xf8>
    42ea:	5d c0       	rjmp	.+186    	; 0x43a6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x1b2>
    42ec:	9b 81       	ldd	r25, Y+3	; 0x03
    42ee:	8c 81       	ldd	r24, Y+4	; 0x04
    42f0:	89 23       	and	r24, r25
    42f2:	88 23       	and	r24, r24
    42f4:	a1 f0       	breq	.+40     	; 0x431e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x12a>
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	9a 81       	ldd	r25, Y+2	; 0x02
    42fa:	fc 01       	movw	r30, r24
    42fc:	81 a5       	ldd	r24, Z+41	; 0x29
    42fe:	92 a5       	ldd	r25, Z+42	; 0x2a
    4300:	29 81       	ldd	r18, Y+1	; 0x01
    4302:	3a 81       	ldd	r19, Y+2	; 0x02
    4304:	f9 01       	movw	r30, r18
    4306:	21 a5       	ldd	r18, Z+41	; 0x29
    4308:	32 a5       	ldd	r19, Z+42	; 0x2a
    430a:	f9 01       	movw	r30, r18
    430c:	40 81       	ld	r20, Z
    430e:	29 81       	ldd	r18, Y+1	; 0x01
    4310:	3a 81       	ldd	r19, Y+2	; 0x02
    4312:	f9 01       	movw	r30, r18
    4314:	21 a9       	ldd	r18, Z+49	; 0x31
    4316:	24 2b       	or	r18, r20
    4318:	fc 01       	movw	r30, r24
    431a:	20 83       	st	Z, r18
    431c:	15 c0       	rjmp	.+42     	; 0x4348 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x154>
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	9a 81       	ldd	r25, Y+2	; 0x02
    4322:	fc 01       	movw	r30, r24
    4324:	81 a5       	ldd	r24, Z+41	; 0x29
    4326:	92 a5       	ldd	r25, Z+42	; 0x2a
    4328:	29 81       	ldd	r18, Y+1	; 0x01
    432a:	3a 81       	ldd	r19, Y+2	; 0x02
    432c:	f9 01       	movw	r30, r18
    432e:	21 a5       	ldd	r18, Z+41	; 0x29
    4330:	32 a5       	ldd	r19, Z+42	; 0x2a
    4332:	f9 01       	movw	r30, r18
    4334:	20 81       	ld	r18, Z
    4336:	42 2f       	mov	r20, r18
    4338:	29 81       	ldd	r18, Y+1	; 0x01
    433a:	3a 81       	ldd	r19, Y+2	; 0x02
    433c:	f9 01       	movw	r30, r18
    433e:	21 a9       	ldd	r18, Z+49	; 0x31
    4340:	20 95       	com	r18
    4342:	24 23       	and	r18, r20
    4344:	fc 01       	movw	r30, r24
    4346:	20 83       	st	Z, r18
    4348:	89 81       	ldd	r24, Y+1	; 0x01
    434a:	9a 81       	ldd	r25, Y+2	; 0x02
    434c:	fc 01       	movw	r30, r24
    434e:	83 a5       	ldd	r24, Z+43	; 0x2b
    4350:	94 a5       	ldd	r25, Z+44	; 0x2c
    4352:	29 81       	ldd	r18, Y+1	; 0x01
    4354:	3a 81       	ldd	r19, Y+2	; 0x02
    4356:	f9 01       	movw	r30, r18
    4358:	23 a5       	ldd	r18, Z+43	; 0x2b
    435a:	34 a5       	ldd	r19, Z+44	; 0x2c
    435c:	f9 01       	movw	r30, r18
    435e:	40 81       	ld	r20, Z
    4360:	29 81       	ldd	r18, Y+1	; 0x01
    4362:	3a 81       	ldd	r19, Y+2	; 0x02
    4364:	f9 01       	movw	r30, r18
    4366:	22 a9       	ldd	r18, Z+50	; 0x32
    4368:	24 2b       	or	r18, r20
    436a:	fc 01       	movw	r30, r24
    436c:	20 83       	st	Z, r18
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	9a 81       	ldd	r25, Y+2	; 0x02
    4372:	fc 01       	movw	r30, r24
    4374:	83 a5       	ldd	r24, Z+43	; 0x2b
    4376:	94 a5       	ldd	r25, Z+44	; 0x2c
    4378:	29 81       	ldd	r18, Y+1	; 0x01
    437a:	3a 81       	ldd	r19, Y+2	; 0x02
    437c:	f9 01       	movw	r30, r18
    437e:	23 a5       	ldd	r18, Z+43	; 0x2b
    4380:	34 a5       	ldd	r19, Z+44	; 0x2c
    4382:	f9 01       	movw	r30, r18
    4384:	20 81       	ld	r18, Z
    4386:	42 2f       	mov	r20, r18
    4388:	29 81       	ldd	r18, Y+1	; 0x01
    438a:	3a 81       	ldd	r19, Y+2	; 0x02
    438c:	f9 01       	movw	r30, r18
    438e:	22 a9       	ldd	r18, Z+50	; 0x32
    4390:	20 95       	com	r18
    4392:	24 23       	and	r18, r20
    4394:	fc 01       	movw	r30, r24
    4396:	20 83       	st	Z, r18
    4398:	8c 81       	ldd	r24, Y+4	; 0x04
    439a:	88 2f       	mov	r24, r24
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	95 95       	asr	r25
    43a0:	87 95       	ror	r24
    43a2:	8c 83       	std	Y+4, r24	; 0x04
    43a4:	9f cf       	rjmp	.-194    	; 0x42e4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0xf0>
    43a6:	00 00       	nop
    43a8:	27 96       	adiw	r28, 0x07	; 7
    43aa:	0f b6       	in	r0, 0x3f	; 63
    43ac:	f8 94       	cli
    43ae:	de bf       	out	0x3e, r29	; 62
    43b0:	0f be       	out	0x3f, r0	; 63
    43b2:	cd bf       	out	0x3d, r28	; 61
    43b4:	df 91       	pop	r29
    43b6:	cf 91       	pop	r28
    43b8:	08 95       	ret

000043ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    43ba:	cf 93       	push	r28
    43bc:	df 93       	push	r29
    43be:	cd b7       	in	r28, 0x3d	; 61
    43c0:	de b7       	in	r29, 0x3e	; 62
    43c2:	61 97       	sbiw	r28, 0x11	; 17
    43c4:	0f b6       	in	r0, 0x3f	; 63
    43c6:	f8 94       	cli
    43c8:	de bf       	out	0x3e, r29	; 62
    43ca:	0f be       	out	0x3f, r0	; 63
    43cc:	cd bf       	out	0x3d, r28	; 61
    43ce:	9e 87       	std	Y+14, r25	; 0x0e
    43d0:	8d 87       	std	Y+13, r24	; 0x0d
    43d2:	78 8b       	std	Y+16, r23	; 0x10
    43d4:	6f 87       	std	Y+15, r22	; 0x0f
    43d6:	49 8b       	std	Y+17, r20	; 0x11
    43d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43da:	9e 85       	ldd	r25, Y+14	; 0x0e
    43dc:	fc 01       	movw	r30, r24
    43de:	85 8d       	ldd	r24, Z+29	; 0x1d
    43e0:	96 8d       	ldd	r25, Z+30	; 0x1e
    43e2:	89 2b       	or	r24, r25
    43e4:	09 f4       	brne	.+2      	; 0x43e8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x2e>
    43e6:	92 c0       	rjmp	.+292    	; 0x450c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x152>
    43e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ec:	fc 01       	movw	r30, r24
    43ee:	81 a1       	ldd	r24, Z+33	; 0x21
    43f0:	28 2f       	mov	r18, r24
    43f2:	88 0f       	add	r24, r24
    43f4:	33 0b       	sbc	r19, r19
    43f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43fa:	fc 01       	movw	r30, r24
    43fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    43fe:	96 8d       	ldd	r25, Z+30	; 0x1e
    4400:	b9 01       	movw	r22, r18
    4402:	0e 94 ee 55 	call	0xabdc	; 0xabdc <_ZN7TwoWire17beginTransmissionEi>
    4406:	8d 85       	ldd	r24, Y+13	; 0x0d
    4408:	9e 85       	ldd	r25, Y+14	; 0x0e
    440a:	fc 01       	movw	r30, r24
    440c:	85 8d       	ldd	r24, Z+29	; 0x1d
    440e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4410:	fc 01       	movw	r30, r24
    4412:	80 81       	ld	r24, Z
    4414:	91 81       	ldd	r25, Z+1	; 0x01
    4416:	fc 01       	movw	r30, r24
    4418:	20 81       	ld	r18, Z
    441a:	31 81       	ldd	r19, Z+1	; 0x01
    441c:	8d 85       	ldd	r24, Y+13	; 0x0d
    441e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4420:	fc 01       	movw	r30, r24
    4422:	85 8d       	ldd	r24, Z+29	; 0x1d
    4424:	96 8d       	ldd	r25, Z+30	; 0x1e
    4426:	60 e0       	ldi	r22, 0x00	; 0
    4428:	f9 01       	movw	r30, r18
    442a:	19 95       	eicall
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	9a 83       	std	Y+2, r25	; 0x02
    4432:	89 83       	std	Y+1, r24	; 0x01
    4434:	89 89       	ldd	r24, Y+17	; 0x11
    4436:	9f ef       	ldi	r25, 0xFF	; 255
    4438:	98 0f       	add	r25, r24
    443a:	99 8b       	std	Y+17, r25	; 0x11
    443c:	91 e0       	ldi	r25, 0x01	; 1
    443e:	88 23       	and	r24, r24
    4440:	09 f4       	brne	.+2      	; 0x4444 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8a>
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	99 23       	and	r25, r25
    4446:	09 f4       	brne	.+2      	; 0x444a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x90>
    4448:	59 c0       	rjmp	.+178    	; 0x44fc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x142>
    444a:	89 81       	ldd	r24, Y+1	; 0x01
    444c:	9a 81       	ldd	r25, Y+2	; 0x02
    444e:	80 97       	sbiw	r24, 0x20	; 32
    4450:	68 f1       	brcs	.+90     	; 0x44ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf2>
    4452:	8d 85       	ldd	r24, Y+13	; 0x0d
    4454:	9e 85       	ldd	r25, Y+14	; 0x0e
    4456:	fc 01       	movw	r30, r24
    4458:	85 8d       	ldd	r24, Z+29	; 0x1d
    445a:	96 8d       	ldd	r25, Z+30	; 0x1e
    445c:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>
    4460:	8d 85       	ldd	r24, Y+13	; 0x0d
    4462:	9e 85       	ldd	r25, Y+14	; 0x0e
    4464:	fc 01       	movw	r30, r24
    4466:	81 a1       	ldd	r24, Z+33	; 0x21
    4468:	28 2f       	mov	r18, r24
    446a:	88 0f       	add	r24, r24
    446c:	33 0b       	sbc	r19, r19
    446e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4470:	9e 85       	ldd	r25, Y+14	; 0x0e
    4472:	fc 01       	movw	r30, r24
    4474:	85 8d       	ldd	r24, Z+29	; 0x1d
    4476:	96 8d       	ldd	r25, Z+30	; 0x1e
    4478:	b9 01       	movw	r22, r18
    447a:	0e 94 ee 55 	call	0xabdc	; 0xabdc <_ZN7TwoWire17beginTransmissionEi>
    447e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4480:	9e 85       	ldd	r25, Y+14	; 0x0e
    4482:	fc 01       	movw	r30, r24
    4484:	85 8d       	ldd	r24, Z+29	; 0x1d
    4486:	96 8d       	ldd	r25, Z+30	; 0x1e
    4488:	fc 01       	movw	r30, r24
    448a:	80 81       	ld	r24, Z
    448c:	91 81       	ldd	r25, Z+1	; 0x01
    448e:	fc 01       	movw	r30, r24
    4490:	20 81       	ld	r18, Z
    4492:	31 81       	ldd	r19, Z+1	; 0x01
    4494:	8d 85       	ldd	r24, Y+13	; 0x0d
    4496:	9e 85       	ldd	r25, Y+14	; 0x0e
    4498:	fc 01       	movw	r30, r24
    449a:	85 8d       	ldd	r24, Z+29	; 0x1d
    449c:	96 8d       	ldd	r25, Z+30	; 0x1e
    449e:	60 e0       	ldi	r22, 0x00	; 0
    44a0:	f9 01       	movw	r30, r18
    44a2:	19 95       	eicall
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	9a 83       	std	Y+2, r25	; 0x02
    44aa:	89 83       	std	Y+1, r24	; 0x01
    44ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    44ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    44b0:	fc 01       	movw	r30, r24
    44b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    44b4:	96 8d       	ldd	r25, Z+30	; 0x1e
    44b6:	fc 01       	movw	r30, r24
    44b8:	80 81       	ld	r24, Z
    44ba:	91 81       	ldd	r25, Z+1	; 0x01
    44bc:	fc 01       	movw	r30, r24
    44be:	20 81       	ld	r18, Z
    44c0:	31 81       	ldd	r19, Z+1	; 0x01
    44c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    44c4:	98 89       	ldd	r25, Y+16	; 0x10
    44c6:	ac 01       	movw	r20, r24
    44c8:	4f 5f       	subi	r20, 0xFF	; 255
    44ca:	5f 4f       	sbci	r21, 0xFF	; 255
    44cc:	58 8b       	std	Y+16, r21	; 0x10
    44ce:	4f 87       	std	Y+15, r20	; 0x0f
    44d0:	9c 83       	std	Y+4, r25	; 0x04
    44d2:	8b 83       	std	Y+3, r24	; 0x03
    44d4:	8b 81       	ldd	r24, Y+3	; 0x03
    44d6:	9c 81       	ldd	r25, Y+4	; 0x04
    44d8:	fc 01       	movw	r30, r24
    44da:	84 91       	lpm	r24, Z
    44dc:	8d 83       	std	Y+5, r24	; 0x05
    44de:	4d 81       	ldd	r20, Y+5	; 0x05
    44e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e4:	fc 01       	movw	r30, r24
    44e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    44e8:	96 8d       	ldd	r25, Z+30	; 0x1e
    44ea:	64 2f       	mov	r22, r20
    44ec:	f9 01       	movw	r30, r18
    44ee:	19 95       	eicall
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	9a 81       	ldd	r25, Y+2	; 0x02
    44f4:	01 96       	adiw	r24, 0x01	; 1
    44f6:	9a 83       	std	Y+2, r25	; 0x02
    44f8:	89 83       	std	Y+1, r24	; 0x01
    44fa:	9c cf       	rjmp	.-200    	; 0x4434 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7a>
    44fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4500:	fc 01       	movw	r30, r24
    4502:	85 8d       	ldd	r24, Z+29	; 0x1d
    4504:	96 8d       	ldd	r25, Z+30	; 0x1e
    4506:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>
    450a:	a0 c0       	rjmp	.+320    	; 0x464c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x292>
    450c:	8d 85       	ldd	r24, Y+13	; 0x0d
    450e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4510:	fc 01       	movw	r30, r24
    4512:	85 a5       	ldd	r24, Z+45	; 0x2d
    4514:	96 a5       	ldd	r25, Z+46	; 0x2e
    4516:	2d 85       	ldd	r18, Y+13	; 0x0d
    4518:	3e 85       	ldd	r19, Y+14	; 0x0e
    451a:	f9 01       	movw	r30, r18
    451c:	25 a5       	ldd	r18, Z+45	; 0x2d
    451e:	36 a5       	ldd	r19, Z+46	; 0x2e
    4520:	f9 01       	movw	r30, r18
    4522:	20 81       	ld	r18, Z
    4524:	42 2f       	mov	r20, r18
    4526:	2d 85       	ldd	r18, Y+13	; 0x0d
    4528:	3e 85       	ldd	r19, Y+14	; 0x0e
    452a:	f9 01       	movw	r30, r18
    452c:	23 a9       	ldd	r18, Z+51	; 0x33
    452e:	20 95       	com	r18
    4530:	24 23       	and	r18, r20
    4532:	fc 01       	movw	r30, r24
    4534:	20 83       	st	Z, r18
    4536:	89 89       	ldd	r24, Y+17	; 0x11
    4538:	9f ef       	ldi	r25, 0xFF	; 255
    453a:	98 0f       	add	r25, r24
    453c:	99 8b       	std	Y+17, r25	; 0x11
    453e:	91 e0       	ldi	r25, 0x01	; 1
    4540:	88 23       	and	r24, r24
    4542:	09 f4       	brne	.+2      	; 0x4546 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x18c>
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	99 23       	and	r25, r25
    4548:	09 f4       	brne	.+2      	; 0x454c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x192>
    454a:	80 c0       	rjmp	.+256    	; 0x464c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x292>
    454c:	8f 85       	ldd	r24, Y+15	; 0x0f
    454e:	98 89       	ldd	r25, Y+16	; 0x10
    4550:	9c 01       	movw	r18, r24
    4552:	2f 5f       	subi	r18, 0xFF	; 255
    4554:	3f 4f       	sbci	r19, 0xFF	; 255
    4556:	38 8b       	std	Y+16, r19	; 0x10
    4558:	2f 87       	std	Y+15, r18	; 0x0f
    455a:	9f 83       	std	Y+7, r25	; 0x07
    455c:	8e 83       	std	Y+6, r24	; 0x06
    455e:	8e 81       	ldd	r24, Y+6	; 0x06
    4560:	9f 81       	ldd	r25, Y+7	; 0x07
    4562:	fc 01       	movw	r30, r24
    4564:	84 91       	lpm	r24, Z
    4566:	88 87       	std	Y+8, r24	; 0x08
    4568:	28 85       	ldd	r18, Y+8	; 0x08
    456a:	8d 85       	ldd	r24, Y+13	; 0x0d
    456c:	9e 85       	ldd	r25, Y+14	; 0x0e
    456e:	9a 87       	std	Y+10, r25	; 0x0a
    4570:	89 87       	std	Y+9, r24	; 0x09
    4572:	2b 87       	std	Y+11, r18	; 0x0b
    4574:	89 85       	ldd	r24, Y+9	; 0x09
    4576:	9a 85       	ldd	r25, Y+10	; 0x0a
    4578:	fc 01       	movw	r30, r24
    457a:	83 8d       	ldd	r24, Z+27	; 0x1b
    457c:	94 8d       	ldd	r25, Z+28	; 0x1c
    457e:	89 2b       	or	r24, r25
    4580:	19 f0       	breq	.+6      	; 0x4588 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x1ce>
    4582:	8b 85       	ldd	r24, Y+11	; 0x0b
    4584:	ea dc       	rcall	.-1580   	; 0x3f5a <_ZN8SPIClass8transferEh>
    4586:	d7 cf       	rjmp	.-82     	; 0x4536 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x17c>
    4588:	80 e8       	ldi	r24, 0x80	; 128
    458a:	8c 87       	std	Y+12, r24	; 0x0c
    458c:	8c 85       	ldd	r24, Y+12	; 0x0c
    458e:	88 23       	and	r24, r24
    4590:	91 f2       	breq	.-92     	; 0x4536 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x17c>
    4592:	9b 85       	ldd	r25, Y+11	; 0x0b
    4594:	8c 85       	ldd	r24, Y+12	; 0x0c
    4596:	89 23       	and	r24, r25
    4598:	88 23       	and	r24, r24
    459a:	a1 f0       	breq	.+40     	; 0x45c4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20a>
    459c:	89 85       	ldd	r24, Y+9	; 0x09
    459e:	9a 85       	ldd	r25, Y+10	; 0x0a
    45a0:	fc 01       	movw	r30, r24
    45a2:	81 a5       	ldd	r24, Z+41	; 0x29
    45a4:	92 a5       	ldd	r25, Z+42	; 0x2a
    45a6:	29 85       	ldd	r18, Y+9	; 0x09
    45a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    45aa:	f9 01       	movw	r30, r18
    45ac:	21 a5       	ldd	r18, Z+41	; 0x29
    45ae:	32 a5       	ldd	r19, Z+42	; 0x2a
    45b0:	f9 01       	movw	r30, r18
    45b2:	40 81       	ld	r20, Z
    45b4:	29 85       	ldd	r18, Y+9	; 0x09
    45b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    45b8:	f9 01       	movw	r30, r18
    45ba:	21 a9       	ldd	r18, Z+49	; 0x31
    45bc:	24 2b       	or	r18, r20
    45be:	fc 01       	movw	r30, r24
    45c0:	20 83       	st	Z, r18
    45c2:	15 c0       	rjmp	.+42     	; 0x45ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x234>
    45c4:	89 85       	ldd	r24, Y+9	; 0x09
    45c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c8:	fc 01       	movw	r30, r24
    45ca:	81 a5       	ldd	r24, Z+41	; 0x29
    45cc:	92 a5       	ldd	r25, Z+42	; 0x2a
    45ce:	29 85       	ldd	r18, Y+9	; 0x09
    45d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    45d2:	f9 01       	movw	r30, r18
    45d4:	21 a5       	ldd	r18, Z+41	; 0x29
    45d6:	32 a5       	ldd	r19, Z+42	; 0x2a
    45d8:	f9 01       	movw	r30, r18
    45da:	20 81       	ld	r18, Z
    45dc:	42 2f       	mov	r20, r18
    45de:	29 85       	ldd	r18, Y+9	; 0x09
    45e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    45e2:	f9 01       	movw	r30, r18
    45e4:	21 a9       	ldd	r18, Z+49	; 0x31
    45e6:	20 95       	com	r18
    45e8:	24 23       	and	r18, r20
    45ea:	fc 01       	movw	r30, r24
    45ec:	20 83       	st	Z, r18
    45ee:	89 85       	ldd	r24, Y+9	; 0x09
    45f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f2:	fc 01       	movw	r30, r24
    45f4:	83 a5       	ldd	r24, Z+43	; 0x2b
    45f6:	94 a5       	ldd	r25, Z+44	; 0x2c
    45f8:	29 85       	ldd	r18, Y+9	; 0x09
    45fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    45fc:	f9 01       	movw	r30, r18
    45fe:	23 a5       	ldd	r18, Z+43	; 0x2b
    4600:	34 a5       	ldd	r19, Z+44	; 0x2c
    4602:	f9 01       	movw	r30, r18
    4604:	40 81       	ld	r20, Z
    4606:	29 85       	ldd	r18, Y+9	; 0x09
    4608:	3a 85       	ldd	r19, Y+10	; 0x0a
    460a:	f9 01       	movw	r30, r18
    460c:	22 a9       	ldd	r18, Z+50	; 0x32
    460e:	24 2b       	or	r18, r20
    4610:	fc 01       	movw	r30, r24
    4612:	20 83       	st	Z, r18
    4614:	89 85       	ldd	r24, Y+9	; 0x09
    4616:	9a 85       	ldd	r25, Y+10	; 0x0a
    4618:	fc 01       	movw	r30, r24
    461a:	83 a5       	ldd	r24, Z+43	; 0x2b
    461c:	94 a5       	ldd	r25, Z+44	; 0x2c
    461e:	29 85       	ldd	r18, Y+9	; 0x09
    4620:	3a 85       	ldd	r19, Y+10	; 0x0a
    4622:	f9 01       	movw	r30, r18
    4624:	23 a5       	ldd	r18, Z+43	; 0x2b
    4626:	34 a5       	ldd	r19, Z+44	; 0x2c
    4628:	f9 01       	movw	r30, r18
    462a:	20 81       	ld	r18, Z
    462c:	42 2f       	mov	r20, r18
    462e:	29 85       	ldd	r18, Y+9	; 0x09
    4630:	3a 85       	ldd	r19, Y+10	; 0x0a
    4632:	f9 01       	movw	r30, r18
    4634:	22 a9       	ldd	r18, Z+50	; 0x32
    4636:	20 95       	com	r18
    4638:	24 23       	and	r18, r20
    463a:	fc 01       	movw	r30, r24
    463c:	20 83       	st	Z, r18
    463e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4640:	88 2f       	mov	r24, r24
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	95 95       	asr	r25
    4646:	87 95       	ror	r24
    4648:	8c 87       	std	Y+12, r24	; 0x0c
    464a:	a0 cf       	rjmp	.-192    	; 0x458c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x1d2>
    464c:	00 00       	nop
    464e:	61 96       	adiw	r28, 0x11	; 17
    4650:	0f b6       	in	r0, 0x3f	; 63
    4652:	f8 94       	cli
    4654:	de bf       	out	0x3e, r29	; 62
    4656:	0f be       	out	0x3f, r0	; 63
    4658:	cd bf       	out	0x3d, r28	; 61
    465a:	df 91       	pop	r29
    465c:	cf 91       	pop	r28
    465e:	08 95       	ret

00004660 <_ZN16Adafruit_SSD13065beginEhhbb>:
    4660:	cf 92       	push	r12
    4662:	df 92       	push	r13
    4664:	ef 92       	push	r14
    4666:	ff 92       	push	r15
    4668:	0f 93       	push	r16
    466a:	1f 93       	push	r17
    466c:	cf 93       	push	r28
    466e:	df 93       	push	r29
    4670:	cd b7       	in	r28, 0x3d	; 61
    4672:	de b7       	in	r29, 0x3e	; 62
    4674:	af 97       	sbiw	r28, 0x2f	; 47
    4676:	0f b6       	in	r0, 0x3f	; 63
    4678:	f8 94       	cli
    467a:	de bf       	out	0x3e, r29	; 62
    467c:	0f be       	out	0x3f, r0	; 63
    467e:	cd bf       	out	0x3d, r28	; 61
    4680:	9b a7       	std	Y+43, r25	; 0x2b
    4682:	8a a7       	std	Y+42, r24	; 0x2a
    4684:	6c a7       	std	Y+44, r22	; 0x2c
    4686:	4d a7       	std	Y+45, r20	; 0x2d
    4688:	2e a7       	std	Y+46, r18	; 0x2e
    468a:	0f a7       	std	Y+47, r16	; 0x2f
    468c:	8a a5       	ldd	r24, Y+42	; 0x2a
    468e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4690:	fc 01       	movw	r30, r24
    4692:	87 8d       	ldd	r24, Z+31	; 0x1f
    4694:	90 a1       	ldd	r25, Z+32	; 0x20
    4696:	89 2b       	or	r24, r25
    4698:	69 f5       	brne	.+90     	; 0x46f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    469a:	8a a5       	ldd	r24, Y+42	; 0x2a
    469c:	9b a5       	ldd	r25, Y+43	; 0x2b
    469e:	fc 01       	movw	r30, r24
    46a0:	24 81       	ldd	r18, Z+4	; 0x04
    46a2:	35 81       	ldd	r19, Z+5	; 0x05
    46a4:	8a a5       	ldd	r24, Y+42	; 0x2a
    46a6:	9b a5       	ldd	r25, Y+43	; 0x2b
    46a8:	fc 01       	movw	r30, r24
    46aa:	86 81       	ldd	r24, Z+6	; 0x06
    46ac:	97 81       	ldd	r25, Z+7	; 0x07
    46ae:	07 96       	adiw	r24, 0x07	; 7
    46b0:	99 23       	and	r25, r25
    46b2:	0c f4       	brge	.+2      	; 0x46b6 <_ZN16Adafruit_SSD13065beginEhhbb+0x56>
    46b4:	07 96       	adiw	r24, 0x07	; 7
    46b6:	95 95       	asr	r25
    46b8:	87 95       	ror	r24
    46ba:	95 95       	asr	r25
    46bc:	87 95       	ror	r24
    46be:	95 95       	asr	r25
    46c0:	87 95       	ror	r24
    46c2:	ac 01       	movw	r20, r24
    46c4:	24 9f       	mul	r18, r20
    46c6:	c0 01       	movw	r24, r0
    46c8:	25 9f       	mul	r18, r21
    46ca:	90 0d       	add	r25, r0
    46cc:	34 9f       	mul	r19, r20
    46ce:	90 0d       	add	r25, r0
    46d0:	11 24       	eor	r1, r1
    46d2:	0e 94 75 63 	call	0xc6ea	; 0xc6ea <malloc>
    46d6:	9c 01       	movw	r18, r24
    46d8:	8a a5       	ldd	r24, Y+42	; 0x2a
    46da:	9b a5       	ldd	r25, Y+43	; 0x2b
    46dc:	fc 01       	movw	r30, r24
    46de:	30 a3       	std	Z+32, r19	; 0x20
    46e0:	27 8f       	std	Z+31, r18	; 0x1f
    46e2:	8a a5       	ldd	r24, Y+42	; 0x2a
    46e4:	9b a5       	ldd	r25, Y+43	; 0x2b
    46e6:	fc 01       	movw	r30, r24
    46e8:	87 8d       	ldd	r24, Z+31	; 0x1f
    46ea:	90 a1       	ldd	r25, Z+32	; 0x20
    46ec:	89 2b       	or	r24, r25
    46ee:	11 f4       	brne	.+4      	; 0x46f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	01 c0       	rjmp	.+2      	; 0x46f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	88 23       	and	r24, r24
    46f8:	11 f0       	breq	.+4      	; 0x46fe <_ZN16Adafruit_SSD13065beginEhhbb+0x9e>
    46fa:	80 e0       	ldi	r24, 0x00	; 0
    46fc:	31 c3       	rjmp	.+1634   	; 0x4d60 <_ZN16Adafruit_SSD13065beginEhhbb+0x700>
    46fe:	8a a5       	ldd	r24, Y+42	; 0x2a
    4700:	9b a5       	ldd	r25, Y+43	; 0x2b
    4702:	fe d4       	rcall	.+2556   	; 0x5100 <_ZN16Adafruit_SSD130612clearDisplayEv>
    4704:	8a a5       	ldd	r24, Y+42	; 0x2a
    4706:	9b a5       	ldd	r25, Y+43	; 0x2b
    4708:	fc 01       	movw	r30, r24
    470a:	86 81       	ldd	r24, Z+6	; 0x06
    470c:	97 81       	ldd	r25, Z+7	; 0x07
    470e:	81 97       	sbiw	r24, 0x21	; 33
    4710:	54 f1       	brlt	.+84     	; 0x4766 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
    4712:	8a a5       	ldd	r24, Y+42	; 0x2a
    4714:	9b a5       	ldd	r25, Y+43	; 0x2b
    4716:	fc 01       	movw	r30, r24
    4718:	86 81       	ldd	r24, Z+6	; 0x06
    471a:	97 81       	ldd	r25, Z+7	; 0x07
    471c:	80 54       	subi	r24, 0x40	; 64
    471e:	91 09       	sbc	r25, r1
    4720:	99 23       	and	r25, r25
    4722:	0c f4       	brge	.+2      	; 0x4726 <_ZN16Adafruit_SSD13065beginEhhbb+0xc6>
    4724:	01 96       	adiw	r24, 0x01	; 1
    4726:	95 95       	asr	r25
    4728:	87 95       	ror	r24
    472a:	ac 01       	movw	r20, r24
    472c:	8a a5       	ldd	r24, Y+42	; 0x2a
    472e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4730:	fc 01       	movw	r30, r24
    4732:	84 81       	ldd	r24, Z+4	; 0x04
    4734:	95 81       	ldd	r25, Z+5	; 0x05
    4736:	82 55       	subi	r24, 0x52	; 82
    4738:	91 09       	sbc	r25, r1
    473a:	99 23       	and	r25, r25
    473c:	0c f4       	brge	.+2      	; 0x4740 <_ZN16Adafruit_SSD13065beginEhhbb+0xe0>
    473e:	01 96       	adiw	r24, 0x01	; 1
    4740:	95 95       	asr	r25
    4742:	87 95       	ror	r24
    4744:	bc 01       	movw	r22, r24
    4746:	8a a5       	ldd	r24, Y+42	; 0x2a
    4748:	9b a5       	ldd	r25, Y+43	; 0x2b
    474a:	cc 24       	eor	r12, r12
    474c:	c3 94       	inc	r12
    474e:	d1 2c       	mov	r13, r1
    4750:	68 94       	set
    4752:	ee 24       	eor	r14, r14
    4754:	e6 f8       	bld	r14, 6
    4756:	f1 2c       	mov	r15, r1
    4758:	02 e5       	ldi	r16, 0x52	; 82
    475a:	10 e0       	ldi	r17, 0x00	; 0
    475c:	20 e9       	ldi	r18, 0x90	; 144
    475e:	36 e0       	ldi	r19, 0x06	; 6
    4760:	0e 94 df 18 	call	0x31be	; 0x31be <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    4764:	28 c0       	rjmp	.+80     	; 0x47b6 <_ZN16Adafruit_SSD13065beginEhhbb+0x156>
    4766:	8a a5       	ldd	r24, Y+42	; 0x2a
    4768:	9b a5       	ldd	r25, Y+43	; 0x2b
    476a:	fc 01       	movw	r30, r24
    476c:	86 81       	ldd	r24, Z+6	; 0x06
    476e:	97 81       	ldd	r25, Z+7	; 0x07
    4770:	80 97       	sbiw	r24, 0x20	; 32
    4772:	99 23       	and	r25, r25
    4774:	0c f4       	brge	.+2      	; 0x4778 <_ZN16Adafruit_SSD13065beginEhhbb+0x118>
    4776:	01 96       	adiw	r24, 0x01	; 1
    4778:	95 95       	asr	r25
    477a:	87 95       	ror	r24
    477c:	ac 01       	movw	r20, r24
    477e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4780:	9b a5       	ldd	r25, Y+43	; 0x2b
    4782:	fc 01       	movw	r30, r24
    4784:	84 81       	ldd	r24, Z+4	; 0x04
    4786:	95 81       	ldd	r25, Z+5	; 0x05
    4788:	83 57       	subi	r24, 0x73	; 115
    478a:	91 09       	sbc	r25, r1
    478c:	99 23       	and	r25, r25
    478e:	0c f4       	brge	.+2      	; 0x4792 <_ZN16Adafruit_SSD13065beginEhhbb+0x132>
    4790:	01 96       	adiw	r24, 0x01	; 1
    4792:	95 95       	asr	r25
    4794:	87 95       	ror	r24
    4796:	bc 01       	movw	r22, r24
    4798:	8a a5       	ldd	r24, Y+42	; 0x2a
    479a:	9b a5       	ldd	r25, Y+43	; 0x2b
    479c:	cc 24       	eor	r12, r12
    479e:	c3 94       	inc	r12
    47a0:	d1 2c       	mov	r13, r1
    47a2:	68 94       	set
    47a4:	ee 24       	eor	r14, r14
    47a6:	e5 f8       	bld	r14, 5
    47a8:	f1 2c       	mov	r15, r1
    47aa:	03 e7       	ldi	r16, 0x73	; 115
    47ac:	10 e0       	ldi	r17, 0x00	; 0
    47ae:	20 e5       	ldi	r18, 0x50	; 80
    47b0:	39 e0       	ldi	r19, 0x09	; 9
    47b2:	0e 94 df 18 	call	0x31be	; 0x31be <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    47b6:	2c a5       	ldd	r18, Y+44	; 0x2c
    47b8:	8a a5       	ldd	r24, Y+42	; 0x2a
    47ba:	9b a5       	ldd	r25, Y+43	; 0x2b
    47bc:	fc 01       	movw	r30, r24
    47be:	22 a3       	std	Z+34, r18	; 0x22
    47c0:	8a a5       	ldd	r24, Y+42	; 0x2a
    47c2:	9b a5       	ldd	r25, Y+43	; 0x2b
    47c4:	fc 01       	movw	r30, r24
    47c6:	85 8d       	ldd	r24, Z+29	; 0x1d
    47c8:	96 8d       	ldd	r25, Z+30	; 0x1e
    47ca:	89 2b       	or	r24, r25
    47cc:	f9 f0       	breq	.+62     	; 0x480c <_ZN16Adafruit_SSD13065beginEhhbb+0x1ac>
    47ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    47d0:	88 23       	and	r24, r24
    47d2:	59 f4       	brne	.+22     	; 0x47ea <_ZN16Adafruit_SSD13065beginEhhbb+0x18a>
    47d4:	8a a5       	ldd	r24, Y+42	; 0x2a
    47d6:	9b a5       	ldd	r25, Y+43	; 0x2b
    47d8:	fc 01       	movw	r30, r24
    47da:	86 81       	ldd	r24, Z+6	; 0x06
    47dc:	97 81       	ldd	r25, Z+7	; 0x07
    47de:	80 97       	sbiw	r24, 0x20	; 32
    47e0:	11 f4       	brne	.+4      	; 0x47e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x186>
    47e2:	2c e3       	ldi	r18, 0x3C	; 60
    47e4:	03 c0       	rjmp	.+6      	; 0x47ec <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    47e6:	2d e3       	ldi	r18, 0x3D	; 61
    47e8:	01 c0       	rjmp	.+2      	; 0x47ec <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    47ea:	2d a5       	ldd	r18, Y+45	; 0x2d
    47ec:	8a a5       	ldd	r24, Y+42	; 0x2a
    47ee:	9b a5       	ldd	r25, Y+43	; 0x2b
    47f0:	fc 01       	movw	r30, r24
    47f2:	21 a3       	std	Z+33, r18	; 0x21
    47f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    47f6:	88 23       	and	r24, r24
    47f8:	09 f4       	brne	.+2      	; 0x47fc <_ZN16Adafruit_SSD13065beginEhhbb+0x19c>
    47fa:	5a c1       	rjmp	.+692    	; 0x4ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    47fc:	8a a5       	ldd	r24, Y+42	; 0x2a
    47fe:	9b a5       	ldd	r25, Y+43	; 0x2b
    4800:	fc 01       	movw	r30, r24
    4802:	85 8d       	ldd	r24, Z+29	; 0x1d
    4804:	96 8d       	ldd	r25, Z+30	; 0x1e
    4806:	0e 94 e4 54 	call	0xa9c8	; 0xa9c8 <_ZN7TwoWire5beginEv>
    480a:	52 c1       	rjmp	.+676    	; 0x4ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    480c:	8a a5       	ldd	r24, Y+42	; 0x2a
    480e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4810:	fc 01       	movw	r30, r24
    4812:	86 a1       	ldd	r24, Z+38	; 0x26
    4814:	61 e0       	ldi	r22, 0x01	; 1
    4816:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    481a:	8a a5       	ldd	r24, Y+42	; 0x2a
    481c:	9b a5       	ldd	r25, Y+43	; 0x2b
    481e:	fc 01       	movw	r30, r24
    4820:	87 a1       	ldd	r24, Z+39	; 0x27
    4822:	61 e0       	ldi	r22, 0x01	; 1
    4824:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    4828:	8a a5       	ldd	r24, Y+42	; 0x2a
    482a:	9b a5       	ldd	r25, Y+43	; 0x2b
    482c:	fc 01       	movw	r30, r24
    482e:	86 a1       	ldd	r24, Z+38	; 0x26
    4830:	08 2e       	mov	r0, r24
    4832:	00 0c       	add	r0, r0
    4834:	99 0b       	sbc	r25, r25
    4836:	81 51       	subi	r24, 0x11	; 17
    4838:	94 4f       	sbci	r25, 0xF4	; 244
    483a:	9b 83       	std	Y+3, r25	; 0x03
    483c:	8a 83       	std	Y+2, r24	; 0x02
    483e:	8a 81       	ldd	r24, Y+2	; 0x02
    4840:	9b 81       	ldd	r25, Y+3	; 0x03
    4842:	fc 01       	movw	r30, r24
    4844:	84 91       	lpm	r24, Z
    4846:	8c 83       	std	Y+4, r24	; 0x04
    4848:	8c 81       	ldd	r24, Y+4	; 0x04
    484a:	88 2f       	mov	r24, r24
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	88 0f       	add	r24, r24
    4850:	99 1f       	adc	r25, r25
    4852:	81 5b       	subi	r24, 0xB1	; 177
    4854:	93 4f       	sbci	r25, 0xF3	; 243
    4856:	9e 83       	std	Y+6, r25	; 0x06
    4858:	8d 83       	std	Y+5, r24	; 0x05
    485a:	8d 81       	ldd	r24, Y+5	; 0x05
    485c:	9e 81       	ldd	r25, Y+6	; 0x06
    485e:	fc 01       	movw	r30, r24
    4860:	25 91       	lpm	r18, Z+
    4862:	34 91       	lpm	r19, Z
    4864:	cf 01       	movw	r24, r30
    4866:	38 87       	std	Y+8, r19	; 0x08
    4868:	2f 83       	std	Y+7, r18	; 0x07
    486a:	9e 83       	std	Y+6, r25	; 0x06
    486c:	8d 83       	std	Y+5, r24	; 0x05
    486e:	8f 81       	ldd	r24, Y+7	; 0x07
    4870:	98 85       	ldd	r25, Y+8	; 0x08
    4872:	9c 01       	movw	r18, r24
    4874:	8a a5       	ldd	r24, Y+42	; 0x2a
    4876:	9b a5       	ldd	r25, Y+43	; 0x2b
    4878:	fc 01       	movw	r30, r24
    487a:	36 a7       	std	Z+46, r19	; 0x2e
    487c:	25 a7       	std	Z+45, r18	; 0x2d
    487e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4880:	9b a5       	ldd	r25, Y+43	; 0x2b
    4882:	fc 01       	movw	r30, r24
    4884:	86 a1       	ldd	r24, Z+38	; 0x26
    4886:	08 2e       	mov	r0, r24
    4888:	00 0c       	add	r0, r0
    488a:	99 0b       	sbc	r25, r25
    488c:	87 55       	subi	r24, 0x57	; 87
    488e:	94 4f       	sbci	r25, 0xF4	; 244
    4890:	9a 87       	std	Y+10, r25	; 0x0a
    4892:	89 87       	std	Y+9, r24	; 0x09
    4894:	89 85       	ldd	r24, Y+9	; 0x09
    4896:	9a 85       	ldd	r25, Y+10	; 0x0a
    4898:	fc 01       	movw	r30, r24
    489a:	84 91       	lpm	r24, Z
    489c:	8b 87       	std	Y+11, r24	; 0x0b
    489e:	8a a5       	ldd	r24, Y+42	; 0x2a
    48a0:	9b a5       	ldd	r25, Y+43	; 0x2b
    48a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    48a4:	fc 01       	movw	r30, r24
    48a6:	23 ab       	std	Z+51, r18	; 0x33
    48a8:	8a a5       	ldd	r24, Y+42	; 0x2a
    48aa:	9b a5       	ldd	r25, Y+43	; 0x2b
    48ac:	fc 01       	movw	r30, r24
    48ae:	87 a1       	ldd	r24, Z+39	; 0x27
    48b0:	08 2e       	mov	r0, r24
    48b2:	00 0c       	add	r0, r0
    48b4:	99 0b       	sbc	r25, r25
    48b6:	81 51       	subi	r24, 0x11	; 17
    48b8:	94 4f       	sbci	r25, 0xF4	; 244
    48ba:	9d 87       	std	Y+13, r25	; 0x0d
    48bc:	8c 87       	std	Y+12, r24	; 0x0c
    48be:	8c 85       	ldd	r24, Y+12	; 0x0c
    48c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    48c2:	fc 01       	movw	r30, r24
    48c4:	84 91       	lpm	r24, Z
    48c6:	8e 87       	std	Y+14, r24	; 0x0e
    48c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    48ca:	88 2f       	mov	r24, r24
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	88 0f       	add	r24, r24
    48d0:	99 1f       	adc	r25, r25
    48d2:	81 5b       	subi	r24, 0xB1	; 177
    48d4:	93 4f       	sbci	r25, 0xF3	; 243
    48d6:	98 8b       	std	Y+16, r25	; 0x10
    48d8:	8f 87       	std	Y+15, r24	; 0x0f
    48da:	8f 85       	ldd	r24, Y+15	; 0x0f
    48dc:	98 89       	ldd	r25, Y+16	; 0x10
    48de:	fc 01       	movw	r30, r24
    48e0:	25 91       	lpm	r18, Z+
    48e2:	34 91       	lpm	r19, Z
    48e4:	cf 01       	movw	r24, r30
    48e6:	3a 8b       	std	Y+18, r19	; 0x12
    48e8:	29 8b       	std	Y+17, r18	; 0x11
    48ea:	98 8b       	std	Y+16, r25	; 0x10
    48ec:	8f 87       	std	Y+15, r24	; 0x0f
    48ee:	89 89       	ldd	r24, Y+17	; 0x11
    48f0:	9a 89       	ldd	r25, Y+18	; 0x12
    48f2:	9c 01       	movw	r18, r24
    48f4:	8a a5       	ldd	r24, Y+42	; 0x2a
    48f6:	9b a5       	ldd	r25, Y+43	; 0x2b
    48f8:	fc 01       	movw	r30, r24
    48fa:	30 ab       	std	Z+48, r19	; 0x30
    48fc:	27 a7       	std	Z+47, r18	; 0x2f
    48fe:	8a a5       	ldd	r24, Y+42	; 0x2a
    4900:	9b a5       	ldd	r25, Y+43	; 0x2b
    4902:	fc 01       	movw	r30, r24
    4904:	87 a1       	ldd	r24, Z+39	; 0x27
    4906:	08 2e       	mov	r0, r24
    4908:	00 0c       	add	r0, r0
    490a:	99 0b       	sbc	r25, r25
    490c:	87 55       	subi	r24, 0x57	; 87
    490e:	94 4f       	sbci	r25, 0xF4	; 244
    4910:	9c 8b       	std	Y+20, r25	; 0x14
    4912:	8b 8b       	std	Y+19, r24	; 0x13
    4914:	8b 89       	ldd	r24, Y+19	; 0x13
    4916:	9c 89       	ldd	r25, Y+20	; 0x14
    4918:	fc 01       	movw	r30, r24
    491a:	84 91       	lpm	r24, Z
    491c:	8d 8b       	std	Y+21, r24	; 0x15
    491e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4920:	9b a5       	ldd	r25, Y+43	; 0x2b
    4922:	2d 89       	ldd	r18, Y+21	; 0x15
    4924:	fc 01       	movw	r30, r24
    4926:	24 ab       	std	Z+52, r18	; 0x34
    4928:	8a a5       	ldd	r24, Y+42	; 0x2a
    492a:	9b a5       	ldd	r25, Y+43	; 0x2b
    492c:	fc 01       	movw	r30, r24
    492e:	87 a5       	ldd	r24, Z+47	; 0x2f
    4930:	90 a9       	ldd	r25, Z+48	; 0x30
    4932:	2a a5       	ldd	r18, Y+42	; 0x2a
    4934:	3b a5       	ldd	r19, Y+43	; 0x2b
    4936:	f9 01       	movw	r30, r18
    4938:	27 a5       	ldd	r18, Z+47	; 0x2f
    493a:	30 a9       	ldd	r19, Z+48	; 0x30
    493c:	f9 01       	movw	r30, r18
    493e:	40 81       	ld	r20, Z
    4940:	2a a5       	ldd	r18, Y+42	; 0x2a
    4942:	3b a5       	ldd	r19, Y+43	; 0x2b
    4944:	f9 01       	movw	r30, r18
    4946:	24 a9       	ldd	r18, Z+52	; 0x34
    4948:	24 2b       	or	r18, r20
    494a:	fc 01       	movw	r30, r24
    494c:	20 83       	st	Z, r18
    494e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4950:	9b a5       	ldd	r25, Y+43	; 0x2b
    4952:	fc 01       	movw	r30, r24
    4954:	83 8d       	ldd	r24, Z+27	; 0x1b
    4956:	94 8d       	ldd	r25, Z+28	; 0x1c
    4958:	89 2b       	or	r24, r25
    495a:	39 f0       	breq	.+14     	; 0x496a <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    495c:	8f a5       	ldd	r24, Y+47	; 0x2f
    495e:	88 23       	and	r24, r24
    4960:	09 f4       	brne	.+2      	; 0x4964 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    4962:	a6 c0       	rjmp	.+332    	; 0x4ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    4964:	0e 94 d7 4f 	call	0x9fae	; 0x9fae <_ZN8SPIClass5beginEv>
    4968:	a3 c0       	rjmp	.+326    	; 0x4ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0x450>
    496a:	8a a5       	ldd	r24, Y+42	; 0x2a
    496c:	9b a5       	ldd	r25, Y+43	; 0x2b
    496e:	fc 01       	movw	r30, r24
    4970:	84 a1       	ldd	r24, Z+36	; 0x24
    4972:	61 e0       	ldi	r22, 0x01	; 1
    4974:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    4978:	8a a5       	ldd	r24, Y+42	; 0x2a
    497a:	9b a5       	ldd	r25, Y+43	; 0x2b
    497c:	fc 01       	movw	r30, r24
    497e:	85 a1       	ldd	r24, Z+37	; 0x25
    4980:	61 e0       	ldi	r22, 0x01	; 1
    4982:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    4986:	8a a5       	ldd	r24, Y+42	; 0x2a
    4988:	9b a5       	ldd	r25, Y+43	; 0x2b
    498a:	fc 01       	movw	r30, r24
    498c:	84 a1       	ldd	r24, Z+36	; 0x24
    498e:	08 2e       	mov	r0, r24
    4990:	00 0c       	add	r0, r0
    4992:	99 0b       	sbc	r25, r25
    4994:	81 51       	subi	r24, 0x11	; 17
    4996:	94 4f       	sbci	r25, 0xF4	; 244
    4998:	9f 8b       	std	Y+23, r25	; 0x17
    499a:	8e 8b       	std	Y+22, r24	; 0x16
    499c:	8e 89       	ldd	r24, Y+22	; 0x16
    499e:	9f 89       	ldd	r25, Y+23	; 0x17
    49a0:	fc 01       	movw	r30, r24
    49a2:	84 91       	lpm	r24, Z
    49a4:	88 8f       	std	Y+24, r24	; 0x18
    49a6:	88 8d       	ldd	r24, Y+24	; 0x18
    49a8:	88 2f       	mov	r24, r24
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	88 0f       	add	r24, r24
    49ae:	99 1f       	adc	r25, r25
    49b0:	81 5b       	subi	r24, 0xB1	; 177
    49b2:	93 4f       	sbci	r25, 0xF3	; 243
    49b4:	9a 8f       	std	Y+26, r25	; 0x1a
    49b6:	89 8f       	std	Y+25, r24	; 0x19
    49b8:	89 8d       	ldd	r24, Y+25	; 0x19
    49ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    49bc:	fc 01       	movw	r30, r24
    49be:	25 91       	lpm	r18, Z+
    49c0:	34 91       	lpm	r19, Z
    49c2:	cf 01       	movw	r24, r30
    49c4:	3c 8f       	std	Y+28, r19	; 0x1c
    49c6:	2b 8f       	std	Y+27, r18	; 0x1b
    49c8:	9a 8f       	std	Y+26, r25	; 0x1a
    49ca:	89 8f       	std	Y+25, r24	; 0x19
    49cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49d0:	9c 01       	movw	r18, r24
    49d2:	8a a5       	ldd	r24, Y+42	; 0x2a
    49d4:	9b a5       	ldd	r25, Y+43	; 0x2b
    49d6:	fc 01       	movw	r30, r24
    49d8:	32 a7       	std	Z+42, r19	; 0x2a
    49da:	21 a7       	std	Z+41, r18	; 0x29
    49dc:	8a a5       	ldd	r24, Y+42	; 0x2a
    49de:	9b a5       	ldd	r25, Y+43	; 0x2b
    49e0:	fc 01       	movw	r30, r24
    49e2:	84 a1       	ldd	r24, Z+36	; 0x24
    49e4:	08 2e       	mov	r0, r24
    49e6:	00 0c       	add	r0, r0
    49e8:	99 0b       	sbc	r25, r25
    49ea:	87 55       	subi	r24, 0x57	; 87
    49ec:	94 4f       	sbci	r25, 0xF4	; 244
    49ee:	9e 8f       	std	Y+30, r25	; 0x1e
    49f0:	8d 8f       	std	Y+29, r24	; 0x1d
    49f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49f6:	fc 01       	movw	r30, r24
    49f8:	84 91       	lpm	r24, Z
    49fa:	8f 8f       	std	Y+31, r24	; 0x1f
    49fc:	8a a5       	ldd	r24, Y+42	; 0x2a
    49fe:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a00:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4a02:	fc 01       	movw	r30, r24
    4a04:	21 ab       	std	Z+49, r18	; 0x31
    4a06:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a08:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	85 a1       	ldd	r24, Z+37	; 0x25
    4a0e:	08 2e       	mov	r0, r24
    4a10:	00 0c       	add	r0, r0
    4a12:	99 0b       	sbc	r25, r25
    4a14:	81 51       	subi	r24, 0x11	; 17
    4a16:	94 4f       	sbci	r25, 0xF4	; 244
    4a18:	99 a3       	std	Y+33, r25	; 0x21
    4a1a:	88 a3       	std	Y+32, r24	; 0x20
    4a1c:	88 a1       	ldd	r24, Y+32	; 0x20
    4a1e:	99 a1       	ldd	r25, Y+33	; 0x21
    4a20:	fc 01       	movw	r30, r24
    4a22:	84 91       	lpm	r24, Z
    4a24:	8a a3       	std	Y+34, r24	; 0x22
    4a26:	8a a1       	ldd	r24, Y+34	; 0x22
    4a28:	88 2f       	mov	r24, r24
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	88 0f       	add	r24, r24
    4a2e:	99 1f       	adc	r25, r25
    4a30:	81 5b       	subi	r24, 0xB1	; 177
    4a32:	93 4f       	sbci	r25, 0xF3	; 243
    4a34:	9c a3       	std	Y+36, r25	; 0x24
    4a36:	8b a3       	std	Y+35, r24	; 0x23
    4a38:	8b a1       	ldd	r24, Y+35	; 0x23
    4a3a:	9c a1       	ldd	r25, Y+36	; 0x24
    4a3c:	fc 01       	movw	r30, r24
    4a3e:	25 91       	lpm	r18, Z+
    4a40:	34 91       	lpm	r19, Z
    4a42:	cf 01       	movw	r24, r30
    4a44:	3e a3       	std	Y+38, r19	; 0x26
    4a46:	2d a3       	std	Y+37, r18	; 0x25
    4a48:	9c a3       	std	Y+36, r25	; 0x24
    4a4a:	8b a3       	std	Y+35, r24	; 0x23
    4a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    4a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    4a50:	9c 01       	movw	r18, r24
    4a52:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a54:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a56:	fc 01       	movw	r30, r24
    4a58:	34 a7       	std	Z+44, r19	; 0x2c
    4a5a:	23 a7       	std	Z+43, r18	; 0x2b
    4a5c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a5e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a60:	fc 01       	movw	r30, r24
    4a62:	85 a1       	ldd	r24, Z+37	; 0x25
    4a64:	08 2e       	mov	r0, r24
    4a66:	00 0c       	add	r0, r0
    4a68:	99 0b       	sbc	r25, r25
    4a6a:	87 55       	subi	r24, 0x57	; 87
    4a6c:	94 4f       	sbci	r25, 0xF4	; 244
    4a6e:	98 a7       	std	Y+40, r25	; 0x28
    4a70:	8f a3       	std	Y+39, r24	; 0x27
    4a72:	8f a1       	ldd	r24, Y+39	; 0x27
    4a74:	98 a5       	ldd	r25, Y+40	; 0x28
    4a76:	fc 01       	movw	r30, r24
    4a78:	84 91       	lpm	r24, Z
    4a7a:	89 a7       	std	Y+41, r24	; 0x29
    4a7c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a7e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a80:	29 a5       	ldd	r18, Y+41	; 0x29
    4a82:	fc 01       	movw	r30, r24
    4a84:	22 ab       	std	Z+50, r18	; 0x32
    4a86:	8a a5       	ldd	r24, Y+42	; 0x2a
    4a88:	9b a5       	ldd	r25, Y+43	; 0x2b
    4a8a:	fc 01       	movw	r30, r24
    4a8c:	83 a5       	ldd	r24, Z+43	; 0x2b
    4a8e:	94 a5       	ldd	r25, Z+44	; 0x2c
    4a90:	2a a5       	ldd	r18, Y+42	; 0x2a
    4a92:	3b a5       	ldd	r19, Y+43	; 0x2b
    4a94:	f9 01       	movw	r30, r18
    4a96:	23 a5       	ldd	r18, Z+43	; 0x2b
    4a98:	34 a5       	ldd	r19, Z+44	; 0x2c
    4a9a:	f9 01       	movw	r30, r18
    4a9c:	20 81       	ld	r18, Z
    4a9e:	42 2f       	mov	r20, r18
    4aa0:	2a a5       	ldd	r18, Y+42	; 0x2a
    4aa2:	3b a5       	ldd	r19, Y+43	; 0x2b
    4aa4:	f9 01       	movw	r30, r18
    4aa6:	22 a9       	ldd	r18, Z+50	; 0x32
    4aa8:	20 95       	com	r18
    4aaa:	24 23       	and	r18, r20
    4aac:	fc 01       	movw	r30, r24
    4aae:	20 83       	st	Z, r18
    4ab0:	8e a5       	ldd	r24, Y+46	; 0x2e
    4ab2:	88 23       	and	r24, r24
    4ab4:	71 f1       	breq	.+92     	; 0x4b12 <_ZN16Adafruit_SSD13065beginEhhbb+0x4b2>
    4ab6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ab8:	9b a5       	ldd	r25, Y+43	; 0x2b
    4aba:	fc 01       	movw	r30, r24
    4abc:	80 a5       	ldd	r24, Z+40	; 0x28
    4abe:	88 23       	and	r24, r24
    4ac0:	44 f1       	brlt	.+80     	; 0x4b12 <_ZN16Adafruit_SSD13065beginEhhbb+0x4b2>
    4ac2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ac4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ac6:	fc 01       	movw	r30, r24
    4ac8:	80 a5       	ldd	r24, Z+40	; 0x28
    4aca:	61 e0       	ldi	r22, 0x01	; 1
    4acc:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    4ad0:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ad2:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ad4:	fc 01       	movw	r30, r24
    4ad6:	80 a5       	ldd	r24, Z+40	; 0x28
    4ad8:	61 e0       	ldi	r22, 0x01	; 1
    4ada:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    4ade:	61 e0       	ldi	r22, 0x01	; 1
    4ae0:	70 e0       	ldi	r23, 0x00	; 0
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <delay>
    4aea:	8a a5       	ldd	r24, Y+42	; 0x2a
    4aec:	9b a5       	ldd	r25, Y+43	; 0x2b
    4aee:	fc 01       	movw	r30, r24
    4af0:	80 a5       	ldd	r24, Z+40	; 0x28
    4af2:	60 e0       	ldi	r22, 0x00	; 0
    4af4:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    4af8:	6a e0       	ldi	r22, 0x0A	; 10
    4afa:	70 e0       	ldi	r23, 0x00	; 0
    4afc:	80 e0       	ldi	r24, 0x00	; 0
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <delay>
    4b04:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b06:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b08:	fc 01       	movw	r30, r24
    4b0a:	80 a5       	ldd	r24, Z+40	; 0x28
    4b0c:	61 e0       	ldi	r22, 0x01	; 1
    4b0e:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    4b12:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b14:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b16:	fc 01       	movw	r30, r24
    4b18:	85 8d       	ldd	r24, Z+29	; 0x1d
    4b1a:	96 8d       	ldd	r25, Z+30	; 0x1e
    4b1c:	89 2b       	or	r24, r25
    4b1e:	91 f0       	breq	.+36     	; 0x4b44 <_ZN16Adafruit_SSD13065beginEhhbb+0x4e4>
    4b20:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b22:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b24:	fc 01       	movw	r30, r24
    4b26:	85 a9       	ldd	r24, Z+53	; 0x35
    4b28:	96 a9       	ldd	r25, Z+54	; 0x36
    4b2a:	a7 a9       	ldd	r26, Z+55	; 0x37
    4b2c:	b0 ad       	ldd	r27, Z+56	; 0x38
    4b2e:	2a a5       	ldd	r18, Y+42	; 0x2a
    4b30:	3b a5       	ldd	r19, Y+43	; 0x2b
    4b32:	f9 01       	movw	r30, r18
    4b34:	25 8d       	ldd	r18, Z+29	; 0x1d
    4b36:	36 8d       	ldd	r19, Z+30	; 0x1e
    4b38:	ac 01       	movw	r20, r24
    4b3a:	bd 01       	movw	r22, r26
    4b3c:	c9 01       	movw	r24, r18
    4b3e:	0e 94 01 55 	call	0xaa02	; 0xaa02 <_ZN7TwoWire8setClockEm>
    4b42:	23 c0       	rjmp	.+70     	; 0x4b8a <_ZN16Adafruit_SSD13065beginEhhbb+0x52a>
    4b44:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b46:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b48:	fc 01       	movw	r30, r24
    4b4a:	83 8d       	ldd	r24, Z+27	; 0x1b
    4b4c:	94 8d       	ldd	r25, Z+28	; 0x1c
    4b4e:	89 2b       	or	r24, r25
    4b50:	39 f0       	breq	.+14     	; 0x4b60 <_ZN16Adafruit_SSD13065beginEhhbb+0x500>
    4b52:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b54:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b56:	fc 01       	movw	r30, r24
    4b58:	86 ad       	ldd	r24, Z+62	; 0x3e
    4b5a:	97 ad       	ldd	r25, Z+63	; 0x3f
    4b5c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4b60:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b62:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b64:	fc 01       	movw	r30, r24
    4b66:	87 a5       	ldd	r24, Z+47	; 0x2f
    4b68:	90 a9       	ldd	r25, Z+48	; 0x30
    4b6a:	2a a5       	ldd	r18, Y+42	; 0x2a
    4b6c:	3b a5       	ldd	r19, Y+43	; 0x2b
    4b6e:	f9 01       	movw	r30, r18
    4b70:	27 a5       	ldd	r18, Z+47	; 0x2f
    4b72:	30 a9       	ldd	r19, Z+48	; 0x30
    4b74:	f9 01       	movw	r30, r18
    4b76:	20 81       	ld	r18, Z
    4b78:	42 2f       	mov	r20, r18
    4b7a:	2a a5       	ldd	r18, Y+42	; 0x2a
    4b7c:	3b a5       	ldd	r19, Y+43	; 0x2b
    4b7e:	f9 01       	movw	r30, r18
    4b80:	24 a9       	ldd	r18, Z+52	; 0x34
    4b82:	20 95       	com	r18
    4b84:	24 23       	and	r18, r20
    4b86:	fc 01       	movw	r30, r24
    4b88:	20 83       	st	Z, r18
    4b8a:	24 e0       	ldi	r18, 0x04	; 4
    4b8c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b8e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b90:	42 2f       	mov	r20, r18
    4b92:	60 e3       	ldi	r22, 0x30	; 48
    4b94:	7b e0       	ldi	r23, 0x0B	; 11
    4b96:	11 dc       	rcall	.-2014   	; 0x43ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4b98:	8a a5       	ldd	r24, Y+42	; 0x2a
    4b9a:	9b a5       	ldd	r25, Y+43	; 0x2b
    4b9c:	fc 01       	movw	r30, r24
    4b9e:	86 81       	ldd	r24, Z+6	; 0x06
    4ba0:	97 81       	ldd	r25, Z+7	; 0x07
    4ba2:	2f ef       	ldi	r18, 0xFF	; 255
    4ba4:	28 0f       	add	r18, r24
    4ba6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ba8:	9b a5       	ldd	r25, Y+43	; 0x2b
    4baa:	62 2f       	mov	r22, r18
    4bac:	23 db       	rcall	.-2490   	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4bae:	24 e0       	ldi	r18, 0x04	; 4
    4bb0:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bb2:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bb4:	42 2f       	mov	r20, r18
    4bb6:	64 e3       	ldi	r22, 0x34	; 52
    4bb8:	7b e0       	ldi	r23, 0x0B	; 11
    4bba:	ff db       	rcall	.-2050   	; 0x43ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4bbc:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bbe:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	82 a1       	ldd	r24, Z+34	; 0x22
    4bc4:	81 30       	cpi	r24, 0x01	; 1
    4bc6:	11 f4       	brne	.+4      	; 0x4bcc <_ZN16Adafruit_SSD13065beginEhhbb+0x56c>
    4bc8:	20 e1       	ldi	r18, 0x10	; 16
    4bca:	01 c0       	rjmp	.+2      	; 0x4bce <_ZN16Adafruit_SSD13065beginEhhbb+0x56e>
    4bcc:	24 e1       	ldi	r18, 0x14	; 20
    4bce:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bd0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bd2:	62 2f       	mov	r22, r18
    4bd4:	0f db       	rcall	.-2530   	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4bd6:	24 e0       	ldi	r18, 0x04	; 4
    4bd8:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bda:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bdc:	42 2f       	mov	r20, r18
    4bde:	68 e3       	ldi	r22, 0x38	; 56
    4be0:	7b e0       	ldi	r23, 0x0B	; 11
    4be2:	eb db       	rcall	.-2090   	; 0x43ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4be4:	82 e0       	ldi	r24, 0x02	; 2
    4be6:	89 83       	std	Y+1, r24	; 0x01
    4be8:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bea:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bec:	2f e8       	ldi	r18, 0x8F	; 143
    4bee:	fc 01       	movw	r30, r24
    4bf0:	25 af       	std	Z+61, r18	; 0x3d
    4bf2:	8a a5       	ldd	r24, Y+42	; 0x2a
    4bf4:	9b a5       	ldd	r25, Y+43	; 0x2b
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	84 81       	ldd	r24, Z+4	; 0x04
    4bfa:	95 81       	ldd	r25, Z+5	; 0x05
    4bfc:	80 38       	cpi	r24, 0x80	; 128
    4bfe:	91 05       	cpc	r25, r1
    4c00:	79 f4       	brne	.+30     	; 0x4c20 <_ZN16Adafruit_SSD13065beginEhhbb+0x5c0>
    4c02:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c04:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c06:	fc 01       	movw	r30, r24
    4c08:	86 81       	ldd	r24, Z+6	; 0x06
    4c0a:	97 81       	ldd	r25, Z+7	; 0x07
    4c0c:	80 97       	sbiw	r24, 0x20	; 32
    4c0e:	41 f4       	brne	.+16     	; 0x4c20 <_ZN16Adafruit_SSD13065beginEhhbb+0x5c0>
    4c10:	82 e0       	ldi	r24, 0x02	; 2
    4c12:	89 83       	std	Y+1, r24	; 0x01
    4c14:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c16:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c18:	2f e8       	ldi	r18, 0x8F	; 143
    4c1a:	fc 01       	movw	r30, r24
    4c1c:	25 af       	std	Z+61, r18	; 0x3d
    4c1e:	3e c0       	rjmp	.+124    	; 0x4c9c <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4c20:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c22:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c24:	fc 01       	movw	r30, r24
    4c26:	84 81       	ldd	r24, Z+4	; 0x04
    4c28:	95 81       	ldd	r25, Z+5	; 0x05
    4c2a:	80 38       	cpi	r24, 0x80	; 128
    4c2c:	91 05       	cpc	r25, r1
    4c2e:	c1 f4       	brne	.+48     	; 0x4c60 <_ZN16Adafruit_SSD13065beginEhhbb+0x600>
    4c30:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c32:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c34:	fc 01       	movw	r30, r24
    4c36:	86 81       	ldd	r24, Z+6	; 0x06
    4c38:	97 81       	ldd	r25, Z+7	; 0x07
    4c3a:	80 34       	cpi	r24, 0x40	; 64
    4c3c:	91 05       	cpc	r25, r1
    4c3e:	81 f4       	brne	.+32     	; 0x4c60 <_ZN16Adafruit_SSD13065beginEhhbb+0x600>
    4c40:	82 e1       	ldi	r24, 0x12	; 18
    4c42:	89 83       	std	Y+1, r24	; 0x01
    4c44:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c46:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c48:	fc 01       	movw	r30, r24
    4c4a:	82 a1       	ldd	r24, Z+34	; 0x22
    4c4c:	81 30       	cpi	r24, 0x01	; 1
    4c4e:	11 f4       	brne	.+4      	; 0x4c54 <_ZN16Adafruit_SSD13065beginEhhbb+0x5f4>
    4c50:	2f e9       	ldi	r18, 0x9F	; 159
    4c52:	01 c0       	rjmp	.+2      	; 0x4c56 <_ZN16Adafruit_SSD13065beginEhhbb+0x5f6>
    4c54:	2f ec       	ldi	r18, 0xCF	; 207
    4c56:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c58:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c5a:	fc 01       	movw	r30, r24
    4c5c:	25 af       	std	Z+61, r18	; 0x3d
    4c5e:	1e c0       	rjmp	.+60     	; 0x4c9c <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4c60:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c62:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c64:	fc 01       	movw	r30, r24
    4c66:	84 81       	ldd	r24, Z+4	; 0x04
    4c68:	95 81       	ldd	r25, Z+5	; 0x05
    4c6a:	80 36       	cpi	r24, 0x60	; 96
    4c6c:	91 05       	cpc	r25, r1
    4c6e:	b1 f4       	brne	.+44     	; 0x4c9c <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4c70:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c72:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c74:	fc 01       	movw	r30, r24
    4c76:	86 81       	ldd	r24, Z+6	; 0x06
    4c78:	97 81       	ldd	r25, Z+7	; 0x07
    4c7a:	40 97       	sbiw	r24, 0x10	; 16
    4c7c:	79 f4       	brne	.+30     	; 0x4c9c <_ZN16Adafruit_SSD13065beginEhhbb+0x63c>
    4c7e:	82 e0       	ldi	r24, 0x02	; 2
    4c80:	89 83       	std	Y+1, r24	; 0x01
    4c82:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c84:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c86:	fc 01       	movw	r30, r24
    4c88:	82 a1       	ldd	r24, Z+34	; 0x22
    4c8a:	81 30       	cpi	r24, 0x01	; 1
    4c8c:	11 f4       	brne	.+4      	; 0x4c92 <_ZN16Adafruit_SSD13065beginEhhbb+0x632>
    4c8e:	20 e1       	ldi	r18, 0x10	; 16
    4c90:	01 c0       	rjmp	.+2      	; 0x4c94 <_ZN16Adafruit_SSD13065beginEhhbb+0x634>
    4c92:	2f ea       	ldi	r18, 0xAF	; 175
    4c94:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c96:	9b a5       	ldd	r25, Y+43	; 0x2b
    4c98:	fc 01       	movw	r30, r24
    4c9a:	25 af       	std	Z+61, r18	; 0x3d
    4c9c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4c9e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ca0:	6a ed       	ldi	r22, 0xDA	; 218
    4ca2:	a8 da       	rcall	.-2736   	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4ca4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ca6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ca8:	69 81       	ldd	r22, Y+1	; 0x01
    4caa:	a4 da       	rcall	.-2744   	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4cac:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cae:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cb0:	61 e8       	ldi	r22, 0x81	; 129
    4cb2:	a0 da       	rcall	.-2752   	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4cb4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cb6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cb8:	fc 01       	movw	r30, r24
    4cba:	25 ad       	ldd	r18, Z+61	; 0x3d
    4cbc:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cbe:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cc0:	62 2f       	mov	r22, r18
    4cc2:	98 da       	rcall	.-2768   	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4cc4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cc6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cc8:	69 ed       	ldi	r22, 0xD9	; 217
    4cca:	94 da       	rcall	.-2776   	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4ccc:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cce:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	82 a1       	ldd	r24, Z+34	; 0x22
    4cd4:	81 30       	cpi	r24, 0x01	; 1
    4cd6:	11 f4       	brne	.+4      	; 0x4cdc <_ZN16Adafruit_SSD13065beginEhhbb+0x67c>
    4cd8:	22 e2       	ldi	r18, 0x22	; 34
    4cda:	01 c0       	rjmp	.+2      	; 0x4cde <_ZN16Adafruit_SSD13065beginEhhbb+0x67e>
    4cdc:	21 ef       	ldi	r18, 0xF1	; 241
    4cde:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ce0:	9b a5       	ldd	r25, Y+43	; 0x2b
    4ce2:	62 2f       	mov	r22, r18
    4ce4:	87 da       	rcall	.-2802   	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4ce6:	26 e0       	ldi	r18, 0x06	; 6
    4ce8:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cea:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cec:	42 2f       	mov	r20, r18
    4cee:	6c e3       	ldi	r22, 0x3C	; 60
    4cf0:	7b e0       	ldi	r23, 0x0B	; 11
    4cf2:	63 db       	rcall	.-2362   	; 0x43ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    4cf4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cf6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	85 8d       	ldd	r24, Z+29	; 0x1d
    4cfc:	96 8d       	ldd	r25, Z+30	; 0x1e
    4cfe:	89 2b       	or	r24, r25
    4d00:	91 f0       	breq	.+36     	; 0x4d26 <_ZN16Adafruit_SSD13065beginEhhbb+0x6c6>
    4d02:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d04:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d06:	fc 01       	movw	r30, r24
    4d08:	81 ad       	ldd	r24, Z+57	; 0x39
    4d0a:	92 ad       	ldd	r25, Z+58	; 0x3a
    4d0c:	a3 ad       	ldd	r26, Z+59	; 0x3b
    4d0e:	b4 ad       	ldd	r27, Z+60	; 0x3c
    4d10:	2a a5       	ldd	r18, Y+42	; 0x2a
    4d12:	3b a5       	ldd	r19, Y+43	; 0x2b
    4d14:	f9 01       	movw	r30, r18
    4d16:	25 8d       	ldd	r18, Z+29	; 0x1d
    4d18:	36 8d       	ldd	r19, Z+30	; 0x1e
    4d1a:	ac 01       	movw	r20, r24
    4d1c:	bd 01       	movw	r22, r26
    4d1e:	c9 01       	movw	r24, r18
    4d20:	0e 94 01 55 	call	0xaa02	; 0xaa02 <_ZN7TwoWire8setClockEm>
    4d24:	1c c0       	rjmp	.+56     	; 0x4d5e <_ZN16Adafruit_SSD13065beginEhhbb+0x6fe>
    4d26:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d28:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	87 a5       	ldd	r24, Z+47	; 0x2f
    4d2e:	90 a9       	ldd	r25, Z+48	; 0x30
    4d30:	2a a5       	ldd	r18, Y+42	; 0x2a
    4d32:	3b a5       	ldd	r19, Y+43	; 0x2b
    4d34:	f9 01       	movw	r30, r18
    4d36:	27 a5       	ldd	r18, Z+47	; 0x2f
    4d38:	30 a9       	ldd	r19, Z+48	; 0x30
    4d3a:	f9 01       	movw	r30, r18
    4d3c:	40 81       	ld	r20, Z
    4d3e:	2a a5       	ldd	r18, Y+42	; 0x2a
    4d40:	3b a5       	ldd	r19, Y+43	; 0x2b
    4d42:	f9 01       	movw	r30, r18
    4d44:	24 a9       	ldd	r18, Z+52	; 0x34
    4d46:	24 2b       	or	r18, r20
    4d48:	fc 01       	movw	r30, r24
    4d4a:	20 83       	st	Z, r18
    4d4c:	8a a5       	ldd	r24, Y+42	; 0x2a
    4d4e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4d50:	fc 01       	movw	r30, r24
    4d52:	83 8d       	ldd	r24, Z+27	; 0x1b
    4d54:	94 8d       	ldd	r25, Z+28	; 0x1c
    4d56:	89 2b       	or	r24, r25
    4d58:	11 f0       	breq	.+4      	; 0x4d5e <_ZN16Adafruit_SSD13065beginEhhbb+0x6fe>
    4d5a:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN8SPIClass14endTransactionEv>
    4d5e:	81 e0       	ldi	r24, 0x01	; 1
    4d60:	af 96       	adiw	r28, 0x2f	; 47
    4d62:	0f b6       	in	r0, 0x3f	; 63
    4d64:	f8 94       	cli
    4d66:	de bf       	out	0x3e, r29	; 62
    4d68:	0f be       	out	0x3f, r0	; 63
    4d6a:	cd bf       	out	0x3d, r28	; 61
    4d6c:	df 91       	pop	r29
    4d6e:	cf 91       	pop	r28
    4d70:	1f 91       	pop	r17
    4d72:	0f 91       	pop	r16
    4d74:	ff 90       	pop	r15
    4d76:	ef 90       	pop	r14
    4d78:	df 90       	pop	r13
    4d7a:	cf 90       	pop	r12
    4d7c:	08 95       	ret

00004d7e <_ZN16Adafruit_SSD13069drawPixelEiij>:
    4d7e:	cf 93       	push	r28
    4d80:	df 93       	push	r29
    4d82:	cd b7       	in	r28, 0x3d	; 61
    4d84:	de b7       	in	r29, 0x3e	; 62
    4d86:	28 97       	sbiw	r28, 0x08	; 8
    4d88:	0f b6       	in	r0, 0x3f	; 63
    4d8a:	f8 94       	cli
    4d8c:	de bf       	out	0x3e, r29	; 62
    4d8e:	0f be       	out	0x3f, r0	; 63
    4d90:	cd bf       	out	0x3d, r28	; 61
    4d92:	9a 83       	std	Y+2, r25	; 0x02
    4d94:	89 83       	std	Y+1, r24	; 0x01
    4d96:	7c 83       	std	Y+4, r23	; 0x04
    4d98:	6b 83       	std	Y+3, r22	; 0x03
    4d9a:	5e 83       	std	Y+6, r21	; 0x06
    4d9c:	4d 83       	std	Y+5, r20	; 0x05
    4d9e:	38 87       	std	Y+8, r19	; 0x08
    4da0:	2f 83       	std	Y+7, r18	; 0x07
    4da2:	8b 81       	ldd	r24, Y+3	; 0x03
    4da4:	9c 81       	ldd	r25, Y+4	; 0x04
    4da6:	99 23       	and	r25, r25
    4da8:	d4 f0       	brlt	.+52     	; 0x4dde <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4daa:	89 81       	ldd	r24, Y+1	; 0x01
    4dac:	9a 81       	ldd	r25, Y+2	; 0x02
    4dae:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZNK12Adafruit_GFX5widthEv>
    4db2:	9c 01       	movw	r18, r24
    4db4:	8b 81       	ldd	r24, Y+3	; 0x03
    4db6:	9c 81       	ldd	r25, Y+4	; 0x04
    4db8:	82 17       	cp	r24, r18
    4dba:	93 07       	cpc	r25, r19
    4dbc:	84 f4       	brge	.+32     	; 0x4dde <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4dc2:	99 23       	and	r25, r25
    4dc4:	64 f0       	brlt	.+24     	; 0x4dde <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4dc6:	89 81       	ldd	r24, Y+1	; 0x01
    4dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dca:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZNK12Adafruit_GFX6heightEv>
    4dce:	9c 01       	movw	r18, r24
    4dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd4:	82 17       	cp	r24, r18
    4dd6:	93 07       	cpc	r25, r19
    4dd8:	14 f4       	brge	.+4      	; 0x4dde <_ZN16Adafruit_SSD13069drawPixelEiij+0x60>
    4dda:	81 e0       	ldi	r24, 0x01	; 1
    4ddc:	01 c0       	rjmp	.+2      	; 0x4de0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	88 23       	and	r24, r24
    4de2:	09 f4       	brne	.+2      	; 0x4de6 <_ZN16Adafruit_SSD13069drawPixelEiij+0x68>
    4de4:	83 c1       	rjmp	.+774    	; 0x50ec <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    4de6:	89 81       	ldd	r24, Y+1	; 0x01
    4de8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dea:	0e 94 1a 13 	call	0x2634	; 0x2634 <_ZNK12Adafruit_GFX11getRotationEv>
    4dee:	88 2f       	mov	r24, r24
    4df0:	90 e0       	ldi	r25, 0x00	; 0
    4df2:	82 30       	cpi	r24, 0x02	; 2
    4df4:	91 05       	cpc	r25, r1
    4df6:	81 f1       	breq	.+96     	; 0x4e58 <_ZN16Adafruit_SSD13069drawPixelEiij+0xda>
    4df8:	83 30       	cpi	r24, 0x03	; 3
    4dfa:	91 05       	cpc	r25, r1
    4dfc:	09 f4       	brne	.+2      	; 0x4e00 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    4dfe:	4d c0       	rjmp	.+154    	; 0x4e9a <_ZN16Adafruit_SSD13069drawPixelEiij+0x11c>
    4e00:	01 97       	sbiw	r24, 0x01	; 1
    4e02:	09 f0       	breq	.+2      	; 0x4e06 <_ZN16Adafruit_SSD13069drawPixelEiij+0x88>
    4e04:	73 c0       	rjmp	.+230    	; 0x4eec <_ZN16Adafruit_SSD13069drawPixelEiij+0x16e>
    4e06:	2b 81       	ldd	r18, Y+3	; 0x03
    4e08:	3c 81       	ldd	r19, Y+4	; 0x04
    4e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e0e:	82 27       	eor	r24, r18
    4e10:	93 27       	eor	r25, r19
    4e12:	9c 83       	std	Y+4, r25	; 0x04
    4e14:	8b 83       	std	Y+3, r24	; 0x03
    4e16:	2d 81       	ldd	r18, Y+5	; 0x05
    4e18:	3e 81       	ldd	r19, Y+6	; 0x06
    4e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e1e:	82 27       	eor	r24, r18
    4e20:	93 27       	eor	r25, r19
    4e22:	9e 83       	std	Y+6, r25	; 0x06
    4e24:	8d 83       	std	Y+5, r24	; 0x05
    4e26:	2b 81       	ldd	r18, Y+3	; 0x03
    4e28:	3c 81       	ldd	r19, Y+4	; 0x04
    4e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e2e:	82 27       	eor	r24, r18
    4e30:	93 27       	eor	r25, r19
    4e32:	9c 83       	std	Y+4, r25	; 0x04
    4e34:	8b 83       	std	Y+3, r24	; 0x03
    4e36:	89 81       	ldd	r24, Y+1	; 0x01
    4e38:	9a 81       	ldd	r25, Y+2	; 0x02
    4e3a:	dc 01       	movw	r26, r24
    4e3c:	14 96       	adiw	r26, 0x04	; 4
    4e3e:	2d 91       	ld	r18, X+
    4e40:	3c 91       	ld	r19, X
    4e42:	15 97       	sbiw	r26, 0x05	; 5
    4e44:	8b 81       	ldd	r24, Y+3	; 0x03
    4e46:	9c 81       	ldd	r25, Y+4	; 0x04
    4e48:	f9 01       	movw	r30, r18
    4e4a:	e8 1b       	sub	r30, r24
    4e4c:	f9 0b       	sbc	r31, r25
    4e4e:	cf 01       	movw	r24, r30
    4e50:	01 97       	sbiw	r24, 0x01	; 1
    4e52:	9c 83       	std	Y+4, r25	; 0x04
    4e54:	8b 83       	std	Y+3, r24	; 0x03
    4e56:	4a c0       	rjmp	.+148    	; 0x4eec <_ZN16Adafruit_SSD13069drawPixelEiij+0x16e>
    4e58:	89 81       	ldd	r24, Y+1	; 0x01
    4e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	14 96       	adiw	r26, 0x04	; 4
    4e60:	2d 91       	ld	r18, X+
    4e62:	3c 91       	ld	r19, X
    4e64:	15 97       	sbiw	r26, 0x05	; 5
    4e66:	8b 81       	ldd	r24, Y+3	; 0x03
    4e68:	9c 81       	ldd	r25, Y+4	; 0x04
    4e6a:	f9 01       	movw	r30, r18
    4e6c:	e8 1b       	sub	r30, r24
    4e6e:	f9 0b       	sbc	r31, r25
    4e70:	cf 01       	movw	r24, r30
    4e72:	01 97       	sbiw	r24, 0x01	; 1
    4e74:	9c 83       	std	Y+4, r25	; 0x04
    4e76:	8b 83       	std	Y+3, r24	; 0x03
    4e78:	89 81       	ldd	r24, Y+1	; 0x01
    4e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e7c:	dc 01       	movw	r26, r24
    4e7e:	16 96       	adiw	r26, 0x06	; 6
    4e80:	2d 91       	ld	r18, X+
    4e82:	3c 91       	ld	r19, X
    4e84:	17 97       	sbiw	r26, 0x07	; 7
    4e86:	8d 81       	ldd	r24, Y+5	; 0x05
    4e88:	9e 81       	ldd	r25, Y+6	; 0x06
    4e8a:	f9 01       	movw	r30, r18
    4e8c:	e8 1b       	sub	r30, r24
    4e8e:	f9 0b       	sbc	r31, r25
    4e90:	cf 01       	movw	r24, r30
    4e92:	01 97       	sbiw	r24, 0x01	; 1
    4e94:	9e 83       	std	Y+6, r25	; 0x06
    4e96:	8d 83       	std	Y+5, r24	; 0x05
    4e98:	29 c0       	rjmp	.+82     	; 0x4eec <_ZN16Adafruit_SSD13069drawPixelEiij+0x16e>
    4e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    4e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    4e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea2:	82 27       	eor	r24, r18
    4ea4:	93 27       	eor	r25, r19
    4ea6:	9c 83       	std	Y+4, r25	; 0x04
    4ea8:	8b 83       	std	Y+3, r24	; 0x03
    4eaa:	2d 81       	ldd	r18, Y+5	; 0x05
    4eac:	3e 81       	ldd	r19, Y+6	; 0x06
    4eae:	8b 81       	ldd	r24, Y+3	; 0x03
    4eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    4eb2:	82 27       	eor	r24, r18
    4eb4:	93 27       	eor	r25, r19
    4eb6:	9e 83       	std	Y+6, r25	; 0x06
    4eb8:	8d 83       	std	Y+5, r24	; 0x05
    4eba:	2b 81       	ldd	r18, Y+3	; 0x03
    4ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    4ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ec2:	82 27       	eor	r24, r18
    4ec4:	93 27       	eor	r25, r19
    4ec6:	9c 83       	std	Y+4, r25	; 0x04
    4ec8:	8b 83       	std	Y+3, r24	; 0x03
    4eca:	89 81       	ldd	r24, Y+1	; 0x01
    4ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ece:	dc 01       	movw	r26, r24
    4ed0:	16 96       	adiw	r26, 0x06	; 6
    4ed2:	2d 91       	ld	r18, X+
    4ed4:	3c 91       	ld	r19, X
    4ed6:	17 97       	sbiw	r26, 0x07	; 7
    4ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eda:	9e 81       	ldd	r25, Y+6	; 0x06
    4edc:	f9 01       	movw	r30, r18
    4ede:	e8 1b       	sub	r30, r24
    4ee0:	f9 0b       	sbc	r31, r25
    4ee2:	cf 01       	movw	r24, r30
    4ee4:	01 97       	sbiw	r24, 0x01	; 1
    4ee6:	9e 83       	std	Y+6, r25	; 0x06
    4ee8:	8d 83       	std	Y+5, r24	; 0x05
    4eea:	00 00       	nop
    4eec:	8f 81       	ldd	r24, Y+7	; 0x07
    4eee:	98 85       	ldd	r25, Y+8	; 0x08
    4ef0:	81 30       	cpi	r24, 0x01	; 1
    4ef2:	91 05       	cpc	r25, r1
    4ef4:	41 f0       	breq	.+16     	; 0x4f06 <_ZN16Adafruit_SSD13069drawPixelEiij+0x188>
    4ef6:	81 30       	cpi	r24, 0x01	; 1
    4ef8:	91 05       	cpc	r25, r1
    4efa:	08 f4       	brcc	.+2      	; 0x4efe <_ZN16Adafruit_SSD13069drawPixelEiij+0x180>
    4efc:	56 c0       	rjmp	.+172    	; 0x4faa <_ZN16Adafruit_SSD13069drawPixelEiij+0x22c>
    4efe:	02 97       	sbiw	r24, 0x02	; 2
    4f00:	09 f4       	brne	.+2      	; 0x4f04 <_ZN16Adafruit_SSD13069drawPixelEiij+0x186>
    4f02:	a4 c0       	rjmp	.+328    	; 0x504c <_ZN16Adafruit_SSD13069drawPixelEiij+0x2ce>
    4f04:	f3 c0       	rjmp	.+486    	; 0x50ec <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    4f06:	89 81       	ldd	r24, Y+1	; 0x01
    4f08:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	5f 96       	adiw	r26, 0x1f	; 31
    4f0e:	2d 91       	ld	r18, X+
    4f10:	3c 91       	ld	r19, X
    4f12:	90 97       	sbiw	r26, 0x20	; 32
    4f14:	8d 81       	ldd	r24, Y+5	; 0x05
    4f16:	9e 81       	ldd	r25, Y+6	; 0x06
    4f18:	99 23       	and	r25, r25
    4f1a:	0c f4       	brge	.+2      	; 0x4f1e <_ZN16Adafruit_SSD13069drawPixelEiij+0x1a0>
    4f1c:	07 96       	adiw	r24, 0x07	; 7
    4f1e:	95 95       	asr	r25
    4f20:	87 95       	ror	r24
    4f22:	95 95       	asr	r25
    4f24:	87 95       	ror	r24
    4f26:	95 95       	asr	r25
    4f28:	87 95       	ror	r24
    4f2a:	49 81       	ldd	r20, Y+1	; 0x01
    4f2c:	5a 81       	ldd	r21, Y+2	; 0x02
    4f2e:	fa 01       	movw	r30, r20
    4f30:	44 81       	ldd	r20, Z+4	; 0x04
    4f32:	55 81       	ldd	r21, Z+5	; 0x05
    4f34:	84 9f       	mul	r24, r20
    4f36:	b0 01       	movw	r22, r0
    4f38:	85 9f       	mul	r24, r21
    4f3a:	70 0d       	add	r23, r0
    4f3c:	94 9f       	mul	r25, r20
    4f3e:	70 0d       	add	r23, r0
    4f40:	11 24       	eor	r1, r1
    4f42:	4b 81       	ldd	r20, Y+3	; 0x03
    4f44:	5c 81       	ldd	r21, Y+4	; 0x04
    4f46:	46 0f       	add	r20, r22
    4f48:	57 1f       	adc	r21, r23
    4f4a:	24 0f       	add	r18, r20
    4f4c:	35 1f       	adc	r19, r21
    4f4e:	49 81       	ldd	r20, Y+1	; 0x01
    4f50:	5a 81       	ldd	r21, Y+2	; 0x02
    4f52:	da 01       	movw	r26, r20
    4f54:	5f 96       	adiw	r26, 0x1f	; 31
    4f56:	4d 91       	ld	r20, X+
    4f58:	5c 91       	ld	r21, X
    4f5a:	90 97       	sbiw	r26, 0x20	; 32
    4f5c:	69 81       	ldd	r22, Y+1	; 0x01
    4f5e:	7a 81       	ldd	r23, Y+2	; 0x02
    4f60:	db 01       	movw	r26, r22
    4f62:	14 96       	adiw	r26, 0x04	; 4
    4f64:	ed 91       	ld	r30, X+
    4f66:	fc 91       	ld	r31, X
    4f68:	15 97       	sbiw	r26, 0x05	; 5
    4f6a:	8e 9f       	mul	r24, r30
    4f6c:	b0 01       	movw	r22, r0
    4f6e:	8f 9f       	mul	r24, r31
    4f70:	70 0d       	add	r23, r0
    4f72:	9e 9f       	mul	r25, r30
    4f74:	70 0d       	add	r23, r0
    4f76:	11 24       	eor	r1, r1
    4f78:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7c:	86 0f       	add	r24, r22
    4f7e:	97 1f       	adc	r25, r23
    4f80:	84 0f       	add	r24, r20
    4f82:	95 1f       	adc	r25, r21
    4f84:	fc 01       	movw	r30, r24
    4f86:	80 81       	ld	r24, Z
    4f88:	68 2f       	mov	r22, r24
    4f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f8e:	ac 01       	movw	r20, r24
    4f90:	47 70       	andi	r20, 0x07	; 7
    4f92:	55 27       	eor	r21, r21
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	02 c0       	rjmp	.+4      	; 0x4f9e <_ZN16Adafruit_SSD13069drawPixelEiij+0x220>
    4f9a:	88 0f       	add	r24, r24
    4f9c:	99 1f       	adc	r25, r25
    4f9e:	4a 95       	dec	r20
    4fa0:	e2 f7       	brpl	.-8      	; 0x4f9a <_ZN16Adafruit_SSD13069drawPixelEiij+0x21c>
    4fa2:	86 2b       	or	r24, r22
    4fa4:	d9 01       	movw	r26, r18
    4fa6:	8c 93       	st	X, r24
    4fa8:	a1 c0       	rjmp	.+322    	; 0x50ec <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    4faa:	89 81       	ldd	r24, Y+1	; 0x01
    4fac:	9a 81       	ldd	r25, Y+2	; 0x02
    4fae:	fc 01       	movw	r30, r24
    4fb0:	27 8d       	ldd	r18, Z+31	; 0x1f
    4fb2:	30 a1       	ldd	r19, Z+32	; 0x20
    4fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fb8:	99 23       	and	r25, r25
    4fba:	0c f4       	brge	.+2      	; 0x4fbe <_ZN16Adafruit_SSD13069drawPixelEiij+0x240>
    4fbc:	07 96       	adiw	r24, 0x07	; 7
    4fbe:	95 95       	asr	r25
    4fc0:	87 95       	ror	r24
    4fc2:	95 95       	asr	r25
    4fc4:	87 95       	ror	r24
    4fc6:	95 95       	asr	r25
    4fc8:	87 95       	ror	r24
    4fca:	49 81       	ldd	r20, Y+1	; 0x01
    4fcc:	5a 81       	ldd	r21, Y+2	; 0x02
    4fce:	da 01       	movw	r26, r20
    4fd0:	14 96       	adiw	r26, 0x04	; 4
    4fd2:	4d 91       	ld	r20, X+
    4fd4:	5c 91       	ld	r21, X
    4fd6:	15 97       	sbiw	r26, 0x05	; 5
    4fd8:	84 9f       	mul	r24, r20
    4fda:	b0 01       	movw	r22, r0
    4fdc:	85 9f       	mul	r24, r21
    4fde:	70 0d       	add	r23, r0
    4fe0:	94 9f       	mul	r25, r20
    4fe2:	70 0d       	add	r23, r0
    4fe4:	11 24       	eor	r1, r1
    4fe6:	4b 81       	ldd	r20, Y+3	; 0x03
    4fe8:	5c 81       	ldd	r21, Y+4	; 0x04
    4fea:	46 0f       	add	r20, r22
    4fec:	57 1f       	adc	r21, r23
    4fee:	24 0f       	add	r18, r20
    4ff0:	35 1f       	adc	r19, r21
    4ff2:	49 81       	ldd	r20, Y+1	; 0x01
    4ff4:	5a 81       	ldd	r21, Y+2	; 0x02
    4ff6:	fa 01       	movw	r30, r20
    4ff8:	47 8d       	ldd	r20, Z+31	; 0x1f
    4ffa:	50 a1       	ldd	r21, Z+32	; 0x20
    4ffc:	69 81       	ldd	r22, Y+1	; 0x01
    4ffe:	7a 81       	ldd	r23, Y+2	; 0x02
    5000:	db 01       	movw	r26, r22
    5002:	14 96       	adiw	r26, 0x04	; 4
    5004:	ed 91       	ld	r30, X+
    5006:	fc 91       	ld	r31, X
    5008:	15 97       	sbiw	r26, 0x05	; 5
    500a:	8e 9f       	mul	r24, r30
    500c:	b0 01       	movw	r22, r0
    500e:	8f 9f       	mul	r24, r31
    5010:	70 0d       	add	r23, r0
    5012:	9e 9f       	mul	r25, r30
    5014:	70 0d       	add	r23, r0
    5016:	11 24       	eor	r1, r1
    5018:	8b 81       	ldd	r24, Y+3	; 0x03
    501a:	9c 81       	ldd	r25, Y+4	; 0x04
    501c:	86 0f       	add	r24, r22
    501e:	97 1f       	adc	r25, r23
    5020:	84 0f       	add	r24, r20
    5022:	95 1f       	adc	r25, r21
    5024:	fc 01       	movw	r30, r24
    5026:	80 81       	ld	r24, Z
    5028:	68 2f       	mov	r22, r24
    502a:	8d 81       	ldd	r24, Y+5	; 0x05
    502c:	9e 81       	ldd	r25, Y+6	; 0x06
    502e:	ac 01       	movw	r20, r24
    5030:	47 70       	andi	r20, 0x07	; 7
    5032:	55 27       	eor	r21, r21
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	02 c0       	rjmp	.+4      	; 0x503e <_ZN16Adafruit_SSD13069drawPixelEiij+0x2c0>
    503a:	88 0f       	add	r24, r24
    503c:	99 1f       	adc	r25, r25
    503e:	4a 95       	dec	r20
    5040:	e2 f7       	brpl	.-8      	; 0x503a <_ZN16Adafruit_SSD13069drawPixelEiij+0x2bc>
    5042:	80 95       	com	r24
    5044:	86 23       	and	r24, r22
    5046:	d9 01       	movw	r26, r18
    5048:	8c 93       	st	X, r24
    504a:	50 c0       	rjmp	.+160    	; 0x50ec <_ZN16Adafruit_SSD13069drawPixelEiij+0x36e>
    504c:	89 81       	ldd	r24, Y+1	; 0x01
    504e:	9a 81       	ldd	r25, Y+2	; 0x02
    5050:	fc 01       	movw	r30, r24
    5052:	27 8d       	ldd	r18, Z+31	; 0x1f
    5054:	30 a1       	ldd	r19, Z+32	; 0x20
    5056:	8d 81       	ldd	r24, Y+5	; 0x05
    5058:	9e 81       	ldd	r25, Y+6	; 0x06
    505a:	99 23       	and	r25, r25
    505c:	0c f4       	brge	.+2      	; 0x5060 <_ZN16Adafruit_SSD13069drawPixelEiij+0x2e2>
    505e:	07 96       	adiw	r24, 0x07	; 7
    5060:	95 95       	asr	r25
    5062:	87 95       	ror	r24
    5064:	95 95       	asr	r25
    5066:	87 95       	ror	r24
    5068:	95 95       	asr	r25
    506a:	87 95       	ror	r24
    506c:	49 81       	ldd	r20, Y+1	; 0x01
    506e:	5a 81       	ldd	r21, Y+2	; 0x02
    5070:	da 01       	movw	r26, r20
    5072:	14 96       	adiw	r26, 0x04	; 4
    5074:	4d 91       	ld	r20, X+
    5076:	5c 91       	ld	r21, X
    5078:	15 97       	sbiw	r26, 0x05	; 5
    507a:	84 9f       	mul	r24, r20
    507c:	b0 01       	movw	r22, r0
    507e:	85 9f       	mul	r24, r21
    5080:	70 0d       	add	r23, r0
    5082:	94 9f       	mul	r25, r20
    5084:	70 0d       	add	r23, r0
    5086:	11 24       	eor	r1, r1
    5088:	4b 81       	ldd	r20, Y+3	; 0x03
    508a:	5c 81       	ldd	r21, Y+4	; 0x04
    508c:	46 0f       	add	r20, r22
    508e:	57 1f       	adc	r21, r23
    5090:	24 0f       	add	r18, r20
    5092:	35 1f       	adc	r19, r21
    5094:	49 81       	ldd	r20, Y+1	; 0x01
    5096:	5a 81       	ldd	r21, Y+2	; 0x02
    5098:	fa 01       	movw	r30, r20
    509a:	47 8d       	ldd	r20, Z+31	; 0x1f
    509c:	50 a1       	ldd	r21, Z+32	; 0x20
    509e:	69 81       	ldd	r22, Y+1	; 0x01
    50a0:	7a 81       	ldd	r23, Y+2	; 0x02
    50a2:	db 01       	movw	r26, r22
    50a4:	14 96       	adiw	r26, 0x04	; 4
    50a6:	ed 91       	ld	r30, X+
    50a8:	fc 91       	ld	r31, X
    50aa:	15 97       	sbiw	r26, 0x05	; 5
    50ac:	8e 9f       	mul	r24, r30
    50ae:	b0 01       	movw	r22, r0
    50b0:	8f 9f       	mul	r24, r31
    50b2:	70 0d       	add	r23, r0
    50b4:	9e 9f       	mul	r25, r30
    50b6:	70 0d       	add	r23, r0
    50b8:	11 24       	eor	r1, r1
    50ba:	8b 81       	ldd	r24, Y+3	; 0x03
    50bc:	9c 81       	ldd	r25, Y+4	; 0x04
    50be:	86 0f       	add	r24, r22
    50c0:	97 1f       	adc	r25, r23
    50c2:	84 0f       	add	r24, r20
    50c4:	95 1f       	adc	r25, r21
    50c6:	fc 01       	movw	r30, r24
    50c8:	80 81       	ld	r24, Z
    50ca:	68 2f       	mov	r22, r24
    50cc:	8d 81       	ldd	r24, Y+5	; 0x05
    50ce:	9e 81       	ldd	r25, Y+6	; 0x06
    50d0:	ac 01       	movw	r20, r24
    50d2:	47 70       	andi	r20, 0x07	; 7
    50d4:	55 27       	eor	r21, r21
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	02 c0       	rjmp	.+4      	; 0x50e0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x362>
    50dc:	88 0f       	add	r24, r24
    50de:	99 1f       	adc	r25, r25
    50e0:	4a 95       	dec	r20
    50e2:	e2 f7       	brpl	.-8      	; 0x50dc <_ZN16Adafruit_SSD13069drawPixelEiij+0x35e>
    50e4:	86 27       	eor	r24, r22
    50e6:	d9 01       	movw	r26, r18
    50e8:	8c 93       	st	X, r24
    50ea:	00 00       	nop
    50ec:	00 00       	nop
    50ee:	28 96       	adiw	r28, 0x08	; 8
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	f8 94       	cli
    50f4:	de bf       	out	0x3e, r29	; 62
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	cd bf       	out	0x3d, r28	; 61
    50fa:	df 91       	pop	r29
    50fc:	cf 91       	pop	r28
    50fe:	08 95       	ret

00005100 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    5100:	cf 93       	push	r28
    5102:	df 93       	push	r29
    5104:	1f 92       	push	r1
    5106:	1f 92       	push	r1
    5108:	cd b7       	in	r28, 0x3d	; 61
    510a:	de b7       	in	r29, 0x3e	; 62
    510c:	9a 83       	std	Y+2, r25	; 0x02
    510e:	89 83       	std	Y+1, r24	; 0x01
    5110:	89 81       	ldd	r24, Y+1	; 0x01
    5112:	9a 81       	ldd	r25, Y+2	; 0x02
    5114:	fc 01       	movw	r30, r24
    5116:	24 81       	ldd	r18, Z+4	; 0x04
    5118:	35 81       	ldd	r19, Z+5	; 0x05
    511a:	89 81       	ldd	r24, Y+1	; 0x01
    511c:	9a 81       	ldd	r25, Y+2	; 0x02
    511e:	fc 01       	movw	r30, r24
    5120:	86 81       	ldd	r24, Z+6	; 0x06
    5122:	97 81       	ldd	r25, Z+7	; 0x07
    5124:	07 96       	adiw	r24, 0x07	; 7
    5126:	99 23       	and	r25, r25
    5128:	0c f4       	brge	.+2      	; 0x512c <_ZN16Adafruit_SSD130612clearDisplayEv+0x2c>
    512a:	07 96       	adiw	r24, 0x07	; 7
    512c:	95 95       	asr	r25
    512e:	87 95       	ror	r24
    5130:	95 95       	asr	r25
    5132:	87 95       	ror	r24
    5134:	95 95       	asr	r25
    5136:	87 95       	ror	r24
    5138:	ac 01       	movw	r20, r24
    513a:	24 9f       	mul	r18, r20
    513c:	c0 01       	movw	r24, r0
    513e:	25 9f       	mul	r18, r21
    5140:	90 0d       	add	r25, r0
    5142:	34 9f       	mul	r19, r20
    5144:	90 0d       	add	r25, r0
    5146:	11 24       	eor	r1, r1
    5148:	9c 01       	movw	r18, r24
    514a:	89 81       	ldd	r24, Y+1	; 0x01
    514c:	9a 81       	ldd	r25, Y+2	; 0x02
    514e:	fc 01       	movw	r30, r24
    5150:	87 8d       	ldd	r24, Z+31	; 0x1f
    5152:	90 a1       	ldd	r25, Z+32	; 0x20
    5154:	a9 01       	movw	r20, r18
    5156:	60 e0       	ldi	r22, 0x00	; 0
    5158:	70 e0       	ldi	r23, 0x00	; 0
    515a:	0e 94 8b 65 	call	0xcb16	; 0xcb16 <memset>
    515e:	00 00       	nop
    5160:	0f 90       	pop	r0
    5162:	0f 90       	pop	r0
    5164:	df 91       	pop	r29
    5166:	cf 91       	pop	r28
    5168:	08 95       	ret

0000516a <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    516a:	0f 93       	push	r16
    516c:	1f 93       	push	r17
    516e:	cf 93       	push	r28
    5170:	df 93       	push	r29
    5172:	cd b7       	in	r28, 0x3d	; 61
    5174:	de b7       	in	r29, 0x3e	; 62
    5176:	2b 97       	sbiw	r28, 0x0b	; 11
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	f8 94       	cli
    517c:	de bf       	out	0x3e, r29	; 62
    517e:	0f be       	out	0x3f, r0	; 63
    5180:	cd bf       	out	0x3d, r28	; 61
    5182:	9b 83       	std	Y+3, r25	; 0x03
    5184:	8a 83       	std	Y+2, r24	; 0x02
    5186:	7d 83       	std	Y+5, r23	; 0x05
    5188:	6c 83       	std	Y+4, r22	; 0x04
    518a:	5f 83       	std	Y+7, r21	; 0x07
    518c:	4e 83       	std	Y+6, r20	; 0x06
    518e:	39 87       	std	Y+9, r19	; 0x09
    5190:	28 87       	std	Y+8, r18	; 0x08
    5192:	1b 87       	std	Y+11, r17	; 0x0b
    5194:	0a 87       	std	Y+10, r16	; 0x0a
    5196:	19 82       	std	Y+1, r1	; 0x01
    5198:	8a 81       	ldd	r24, Y+2	; 0x02
    519a:	9b 81       	ldd	r25, Y+3	; 0x03
    519c:	fc 01       	movw	r30, r24
    519e:	86 89       	ldd	r24, Z+22	; 0x16
    51a0:	88 2f       	mov	r24, r24
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	82 30       	cpi	r24, 0x02	; 2
    51a6:	91 05       	cpc	r25, r1
    51a8:	81 f1       	breq	.+96     	; 0x520a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xa0>
    51aa:	83 30       	cpi	r24, 0x03	; 3
    51ac:	91 05       	cpc	r25, r1
    51ae:	09 f4       	brne	.+2      	; 0x51b2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x48>
    51b0:	54 c0       	rjmp	.+168    	; 0x525a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xf0>
    51b2:	01 97       	sbiw	r24, 0x01	; 1
    51b4:	09 f0       	breq	.+2      	; 0x51b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4e>
    51b6:	85 c0       	rjmp	.+266    	; 0x52c2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x158>
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	89 83       	std	Y+1, r24	; 0x01
    51bc:	2c 81       	ldd	r18, Y+4	; 0x04
    51be:	3d 81       	ldd	r19, Y+5	; 0x05
    51c0:	8e 81       	ldd	r24, Y+6	; 0x06
    51c2:	9f 81       	ldd	r25, Y+7	; 0x07
    51c4:	82 27       	eor	r24, r18
    51c6:	93 27       	eor	r25, r19
    51c8:	9d 83       	std	Y+5, r25	; 0x05
    51ca:	8c 83       	std	Y+4, r24	; 0x04
    51cc:	2e 81       	ldd	r18, Y+6	; 0x06
    51ce:	3f 81       	ldd	r19, Y+7	; 0x07
    51d0:	8c 81       	ldd	r24, Y+4	; 0x04
    51d2:	9d 81       	ldd	r25, Y+5	; 0x05
    51d4:	82 27       	eor	r24, r18
    51d6:	93 27       	eor	r25, r19
    51d8:	9f 83       	std	Y+7, r25	; 0x07
    51da:	8e 83       	std	Y+6, r24	; 0x06
    51dc:	2c 81       	ldd	r18, Y+4	; 0x04
    51de:	3d 81       	ldd	r19, Y+5	; 0x05
    51e0:	8e 81       	ldd	r24, Y+6	; 0x06
    51e2:	9f 81       	ldd	r25, Y+7	; 0x07
    51e4:	82 27       	eor	r24, r18
    51e6:	93 27       	eor	r25, r19
    51e8:	9d 83       	std	Y+5, r25	; 0x05
    51ea:	8c 83       	std	Y+4, r24	; 0x04
    51ec:	8a 81       	ldd	r24, Y+2	; 0x02
    51ee:	9b 81       	ldd	r25, Y+3	; 0x03
    51f0:	fc 01       	movw	r30, r24
    51f2:	24 81       	ldd	r18, Z+4	; 0x04
    51f4:	35 81       	ldd	r19, Z+5	; 0x05
    51f6:	8c 81       	ldd	r24, Y+4	; 0x04
    51f8:	9d 81       	ldd	r25, Y+5	; 0x05
    51fa:	a9 01       	movw	r20, r18
    51fc:	48 1b       	sub	r20, r24
    51fe:	59 0b       	sbc	r21, r25
    5200:	ca 01       	movw	r24, r20
    5202:	01 97       	sbiw	r24, 0x01	; 1
    5204:	9d 83       	std	Y+5, r25	; 0x05
    5206:	8c 83       	std	Y+4, r24	; 0x04
    5208:	5c c0       	rjmp	.+184    	; 0x52c2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x158>
    520a:	8a 81       	ldd	r24, Y+2	; 0x02
    520c:	9b 81       	ldd	r25, Y+3	; 0x03
    520e:	fc 01       	movw	r30, r24
    5210:	24 81       	ldd	r18, Z+4	; 0x04
    5212:	35 81       	ldd	r19, Z+5	; 0x05
    5214:	8c 81       	ldd	r24, Y+4	; 0x04
    5216:	9d 81       	ldd	r25, Y+5	; 0x05
    5218:	a9 01       	movw	r20, r18
    521a:	48 1b       	sub	r20, r24
    521c:	59 0b       	sbc	r21, r25
    521e:	ca 01       	movw	r24, r20
    5220:	01 97       	sbiw	r24, 0x01	; 1
    5222:	9d 83       	std	Y+5, r25	; 0x05
    5224:	8c 83       	std	Y+4, r24	; 0x04
    5226:	8a 81       	ldd	r24, Y+2	; 0x02
    5228:	9b 81       	ldd	r25, Y+3	; 0x03
    522a:	fc 01       	movw	r30, r24
    522c:	26 81       	ldd	r18, Z+6	; 0x06
    522e:	37 81       	ldd	r19, Z+7	; 0x07
    5230:	8e 81       	ldd	r24, Y+6	; 0x06
    5232:	9f 81       	ldd	r25, Y+7	; 0x07
    5234:	a9 01       	movw	r20, r18
    5236:	48 1b       	sub	r20, r24
    5238:	59 0b       	sbc	r21, r25
    523a:	ca 01       	movw	r24, r20
    523c:	01 97       	sbiw	r24, 0x01	; 1
    523e:	9f 83       	std	Y+7, r25	; 0x07
    5240:	8e 83       	std	Y+6, r24	; 0x06
    5242:	88 85       	ldd	r24, Y+8	; 0x08
    5244:	99 85       	ldd	r25, Y+9	; 0x09
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	2c 81       	ldd	r18, Y+4	; 0x04
    524a:	3d 81       	ldd	r19, Y+5	; 0x05
    524c:	f9 01       	movw	r30, r18
    524e:	e8 1b       	sub	r30, r24
    5250:	f9 0b       	sbc	r31, r25
    5252:	cf 01       	movw	r24, r30
    5254:	9d 83       	std	Y+5, r25	; 0x05
    5256:	8c 83       	std	Y+4, r24	; 0x04
    5258:	34 c0       	rjmp	.+104    	; 0x52c2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x158>
    525a:	81 e0       	ldi	r24, 0x01	; 1
    525c:	89 83       	std	Y+1, r24	; 0x01
    525e:	2c 81       	ldd	r18, Y+4	; 0x04
    5260:	3d 81       	ldd	r19, Y+5	; 0x05
    5262:	8e 81       	ldd	r24, Y+6	; 0x06
    5264:	9f 81       	ldd	r25, Y+7	; 0x07
    5266:	82 27       	eor	r24, r18
    5268:	93 27       	eor	r25, r19
    526a:	9d 83       	std	Y+5, r25	; 0x05
    526c:	8c 83       	std	Y+4, r24	; 0x04
    526e:	2e 81       	ldd	r18, Y+6	; 0x06
    5270:	3f 81       	ldd	r19, Y+7	; 0x07
    5272:	8c 81       	ldd	r24, Y+4	; 0x04
    5274:	9d 81       	ldd	r25, Y+5	; 0x05
    5276:	82 27       	eor	r24, r18
    5278:	93 27       	eor	r25, r19
    527a:	9f 83       	std	Y+7, r25	; 0x07
    527c:	8e 83       	std	Y+6, r24	; 0x06
    527e:	2c 81       	ldd	r18, Y+4	; 0x04
    5280:	3d 81       	ldd	r19, Y+5	; 0x05
    5282:	8e 81       	ldd	r24, Y+6	; 0x06
    5284:	9f 81       	ldd	r25, Y+7	; 0x07
    5286:	82 27       	eor	r24, r18
    5288:	93 27       	eor	r25, r19
    528a:	9d 83       	std	Y+5, r25	; 0x05
    528c:	8c 83       	std	Y+4, r24	; 0x04
    528e:	8a 81       	ldd	r24, Y+2	; 0x02
    5290:	9b 81       	ldd	r25, Y+3	; 0x03
    5292:	fc 01       	movw	r30, r24
    5294:	26 81       	ldd	r18, Z+6	; 0x06
    5296:	37 81       	ldd	r19, Z+7	; 0x07
    5298:	8e 81       	ldd	r24, Y+6	; 0x06
    529a:	9f 81       	ldd	r25, Y+7	; 0x07
    529c:	a9 01       	movw	r20, r18
    529e:	48 1b       	sub	r20, r24
    52a0:	59 0b       	sbc	r21, r25
    52a2:	ca 01       	movw	r24, r20
    52a4:	01 97       	sbiw	r24, 0x01	; 1
    52a6:	9f 83       	std	Y+7, r25	; 0x07
    52a8:	8e 83       	std	Y+6, r24	; 0x06
    52aa:	88 85       	ldd	r24, Y+8	; 0x08
    52ac:	99 85       	ldd	r25, Y+9	; 0x09
    52ae:	01 97       	sbiw	r24, 0x01	; 1
    52b0:	2e 81       	ldd	r18, Y+6	; 0x06
    52b2:	3f 81       	ldd	r19, Y+7	; 0x07
    52b4:	f9 01       	movw	r30, r18
    52b6:	e8 1b       	sub	r30, r24
    52b8:	f9 0b       	sbc	r31, r25
    52ba:	cf 01       	movw	r24, r30
    52bc:	9f 83       	std	Y+7, r25	; 0x07
    52be:	8e 83       	std	Y+6, r24	; 0x06
    52c0:	00 00       	nop
    52c2:	89 81       	ldd	r24, Y+1	; 0x01
    52c4:	88 23       	and	r24, r24
    52c6:	69 f0       	breq	.+26     	; 0x52e2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x178>
    52c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    52ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    52cc:	28 85       	ldd	r18, Y+8	; 0x08
    52ce:	39 85       	ldd	r19, Y+9	; 0x09
    52d0:	4e 81       	ldd	r20, Y+6	; 0x06
    52d2:	5f 81       	ldd	r21, Y+7	; 0x07
    52d4:	6c 81       	ldd	r22, Y+4	; 0x04
    52d6:	7d 81       	ldd	r23, Y+5	; 0x05
    52d8:	8a 81       	ldd	r24, Y+2	; 0x02
    52da:	9b 81       	ldd	r25, Y+3	; 0x03
    52dc:	8f 01       	movw	r16, r30
    52de:	e5 d1       	rcall	.+970    	; 0x56aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    52e0:	0c c0       	rjmp	.+24     	; 0x52fa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x190>
    52e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    52e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    52e6:	28 85       	ldd	r18, Y+8	; 0x08
    52e8:	39 85       	ldd	r19, Y+9	; 0x09
    52ea:	4e 81       	ldd	r20, Y+6	; 0x06
    52ec:	5f 81       	ldd	r21, Y+7	; 0x07
    52ee:	6c 81       	ldd	r22, Y+4	; 0x04
    52f0:	7d 81       	ldd	r23, Y+5	; 0x05
    52f2:	8a 81       	ldd	r24, Y+2	; 0x02
    52f4:	9b 81       	ldd	r25, Y+3	; 0x03
    52f6:	8f 01       	movw	r16, r30
    52f8:	0c d0       	rcall	.+24     	; 0x5312 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    52fa:	00 00       	nop
    52fc:	2b 96       	adiw	r28, 0x0b	; 11
    52fe:	0f b6       	in	r0, 0x3f	; 63
    5300:	f8 94       	cli
    5302:	de bf       	out	0x3e, r29	; 62
    5304:	0f be       	out	0x3f, r0	; 63
    5306:	cd bf       	out	0x3d, r28	; 61
    5308:	df 91       	pop	r29
    530a:	cf 91       	pop	r28
    530c:	1f 91       	pop	r17
    530e:	0f 91       	pop	r16
    5310:	08 95       	ret

00005312 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    5312:	0f 93       	push	r16
    5314:	1f 93       	push	r17
    5316:	cf 93       	push	r28
    5318:	df 93       	push	r29
    531a:	cd b7       	in	r28, 0x3d	; 61
    531c:	de b7       	in	r29, 0x3e	; 62
    531e:	2d 97       	sbiw	r28, 0x0d	; 13
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	f8 94       	cli
    5324:	de bf       	out	0x3e, r29	; 62
    5326:	0f be       	out	0x3f, r0	; 63
    5328:	cd bf       	out	0x3d, r28	; 61
    532a:	9d 83       	std	Y+5, r25	; 0x05
    532c:	8c 83       	std	Y+4, r24	; 0x04
    532e:	7f 83       	std	Y+7, r23	; 0x07
    5330:	6e 83       	std	Y+6, r22	; 0x06
    5332:	59 87       	std	Y+9, r21	; 0x09
    5334:	48 87       	std	Y+8, r20	; 0x08
    5336:	3b 87       	std	Y+11, r19	; 0x0b
    5338:	2a 87       	std	Y+10, r18	; 0x0a
    533a:	1d 87       	std	Y+13, r17	; 0x0d
    533c:	0c 87       	std	Y+12, r16	; 0x0c
    533e:	88 85       	ldd	r24, Y+8	; 0x08
    5340:	99 85       	ldd	r25, Y+9	; 0x09
    5342:	99 23       	and	r25, r25
    5344:	0c f4       	brge	.+2      	; 0x5348 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x36>
    5346:	d1 c0       	rjmp	.+418    	; 0x54ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    5348:	8c 81       	ldd	r24, Y+4	; 0x04
    534a:	9d 81       	ldd	r25, Y+5	; 0x05
    534c:	fc 01       	movw	r30, r24
    534e:	26 81       	ldd	r18, Z+6	; 0x06
    5350:	37 81       	ldd	r19, Z+7	; 0x07
    5352:	88 85       	ldd	r24, Y+8	; 0x08
    5354:	99 85       	ldd	r25, Y+9	; 0x09
    5356:	82 17       	cp	r24, r18
    5358:	93 07       	cpc	r25, r19
    535a:	0c f0       	brlt	.+2      	; 0x535e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    535c:	c6 c0       	rjmp	.+396    	; 0x54ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    535e:	8e 81       	ldd	r24, Y+6	; 0x06
    5360:	9f 81       	ldd	r25, Y+7	; 0x07
    5362:	99 23       	and	r25, r25
    5364:	54 f4       	brge	.+20     	; 0x537a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x68>
    5366:	2a 85       	ldd	r18, Y+10	; 0x0a
    5368:	3b 85       	ldd	r19, Y+11	; 0x0b
    536a:	8e 81       	ldd	r24, Y+6	; 0x06
    536c:	9f 81       	ldd	r25, Y+7	; 0x07
    536e:	82 0f       	add	r24, r18
    5370:	93 1f       	adc	r25, r19
    5372:	9b 87       	std	Y+11, r25	; 0x0b
    5374:	8a 87       	std	Y+10, r24	; 0x0a
    5376:	1f 82       	std	Y+7, r1	; 0x07
    5378:	1e 82       	std	Y+6, r1	; 0x06
    537a:	2e 81       	ldd	r18, Y+6	; 0x06
    537c:	3f 81       	ldd	r19, Y+7	; 0x07
    537e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5380:	9b 85       	ldd	r25, Y+11	; 0x0b
    5382:	28 0f       	add	r18, r24
    5384:	39 1f       	adc	r19, r25
    5386:	8c 81       	ldd	r24, Y+4	; 0x04
    5388:	9d 81       	ldd	r25, Y+5	; 0x05
    538a:	fc 01       	movw	r30, r24
    538c:	84 81       	ldd	r24, Z+4	; 0x04
    538e:	95 81       	ldd	r25, Z+5	; 0x05
    5390:	82 17       	cp	r24, r18
    5392:	93 07       	cpc	r25, r19
    5394:	6c f4       	brge	.+26     	; 0x53b0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x9e>
    5396:	8c 81       	ldd	r24, Y+4	; 0x04
    5398:	9d 81       	ldd	r25, Y+5	; 0x05
    539a:	fc 01       	movw	r30, r24
    539c:	24 81       	ldd	r18, Z+4	; 0x04
    539e:	35 81       	ldd	r19, Z+5	; 0x05
    53a0:	8e 81       	ldd	r24, Y+6	; 0x06
    53a2:	9f 81       	ldd	r25, Y+7	; 0x07
    53a4:	a9 01       	movw	r20, r18
    53a6:	48 1b       	sub	r20, r24
    53a8:	59 0b       	sbc	r21, r25
    53aa:	ca 01       	movw	r24, r20
    53ac:	9b 87       	std	Y+11, r25	; 0x0b
    53ae:	8a 87       	std	Y+10, r24	; 0x0a
    53b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    53b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    53b4:	18 16       	cp	r1, r24
    53b6:	19 06       	cpc	r1, r25
    53b8:	0c f0       	brlt	.+2      	; 0x53bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xaa>
    53ba:	97 c0       	rjmp	.+302    	; 0x54ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    53bc:	8c 81       	ldd	r24, Y+4	; 0x04
    53be:	9d 81       	ldd	r25, Y+5	; 0x05
    53c0:	fc 01       	movw	r30, r24
    53c2:	27 8d       	ldd	r18, Z+31	; 0x1f
    53c4:	30 a1       	ldd	r19, Z+32	; 0x20
    53c6:	88 85       	ldd	r24, Y+8	; 0x08
    53c8:	99 85       	ldd	r25, Y+9	; 0x09
    53ca:	99 23       	and	r25, r25
    53cc:	0c f4       	brge	.+2      	; 0x53d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xbe>
    53ce:	07 96       	adiw	r24, 0x07	; 7
    53d0:	95 95       	asr	r25
    53d2:	87 95       	ror	r24
    53d4:	95 95       	asr	r25
    53d6:	87 95       	ror	r24
    53d8:	95 95       	asr	r25
    53da:	87 95       	ror	r24
    53dc:	bc 01       	movw	r22, r24
    53de:	8c 81       	ldd	r24, Y+4	; 0x04
    53e0:	9d 81       	ldd	r25, Y+5	; 0x05
    53e2:	fc 01       	movw	r30, r24
    53e4:	84 81       	ldd	r24, Z+4	; 0x04
    53e6:	95 81       	ldd	r25, Z+5	; 0x05
    53e8:	68 9f       	mul	r22, r24
    53ea:	a0 01       	movw	r20, r0
    53ec:	69 9f       	mul	r22, r25
    53ee:	50 0d       	add	r21, r0
    53f0:	78 9f       	mul	r23, r24
    53f2:	50 0d       	add	r21, r0
    53f4:	11 24       	eor	r1, r1
    53f6:	8e 81       	ldd	r24, Y+6	; 0x06
    53f8:	9f 81       	ldd	r25, Y+7	; 0x07
    53fa:	84 0f       	add	r24, r20
    53fc:	95 1f       	adc	r25, r21
    53fe:	82 0f       	add	r24, r18
    5400:	93 1f       	adc	r25, r19
    5402:	9a 83       	std	Y+2, r25	; 0x02
    5404:	89 83       	std	Y+1, r24	; 0x01
    5406:	88 85       	ldd	r24, Y+8	; 0x08
    5408:	99 85       	ldd	r25, Y+9	; 0x09
    540a:	9c 01       	movw	r18, r24
    540c:	27 70       	andi	r18, 0x07	; 7
    540e:	33 27       	eor	r19, r19
    5410:	81 e0       	ldi	r24, 0x01	; 1
    5412:	90 e0       	ldi	r25, 0x00	; 0
    5414:	02 c0       	rjmp	.+4      	; 0x541a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x108>
    5416:	88 0f       	add	r24, r24
    5418:	99 1f       	adc	r25, r25
    541a:	2a 95       	dec	r18
    541c:	e2 f7       	brpl	.-8      	; 0x5416 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x104>
    541e:	8b 83       	std	Y+3, r24	; 0x03
    5420:	8c 85       	ldd	r24, Y+12	; 0x0c
    5422:	9d 85       	ldd	r25, Y+13	; 0x0d
    5424:	81 30       	cpi	r24, 0x01	; 1
    5426:	91 05       	cpc	r25, r1
    5428:	31 f0       	breq	.+12     	; 0x5436 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x124>
    542a:	81 30       	cpi	r24, 0x01	; 1
    542c:	91 05       	cpc	r25, r1
    542e:	f8 f0       	brcs	.+62     	; 0x546e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x15c>
    5430:	02 97       	sbiw	r24, 0x02	; 2
    5432:	d9 f1       	breq	.+118    	; 0x54aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x198>
    5434:	5a c0       	rjmp	.+180    	; 0x54ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    5436:	8a 85       	ldd	r24, Y+10	; 0x0a
    5438:	9b 85       	ldd	r25, Y+11	; 0x0b
    543a:	9c 01       	movw	r18, r24
    543c:	21 50       	subi	r18, 0x01	; 1
    543e:	31 09       	sbc	r19, r1
    5440:	3b 87       	std	Y+11, r19	; 0x0b
    5442:	2a 87       	std	Y+10, r18	; 0x0a
    5444:	21 e0       	ldi	r18, 0x01	; 1
    5446:	89 2b       	or	r24, r25
    5448:	09 f4       	brne	.+2      	; 0x544c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x13a>
    544a:	20 e0       	ldi	r18, 0x00	; 0
    544c:	22 23       	and	r18, r18
    544e:	09 f4       	brne	.+2      	; 0x5452 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x140>
    5450:	47 c0       	rjmp	.+142    	; 0x54e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1ce>
    5452:	89 81       	ldd	r24, Y+1	; 0x01
    5454:	9a 81       	ldd	r25, Y+2	; 0x02
    5456:	9c 01       	movw	r18, r24
    5458:	2f 5f       	subi	r18, 0xFF	; 255
    545a:	3f 4f       	sbci	r19, 0xFF	; 255
    545c:	3a 83       	std	Y+2, r19	; 0x02
    545e:	29 83       	std	Y+1, r18	; 0x01
    5460:	fc 01       	movw	r30, r24
    5462:	30 81       	ld	r19, Z
    5464:	2b 81       	ldd	r18, Y+3	; 0x03
    5466:	23 2b       	or	r18, r19
    5468:	fc 01       	movw	r30, r24
    546a:	20 83       	st	Z, r18
    546c:	e4 cf       	rjmp	.-56     	; 0x5436 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x124>
    546e:	8b 81       	ldd	r24, Y+3	; 0x03
    5470:	80 95       	com	r24
    5472:	8b 83       	std	Y+3, r24	; 0x03
    5474:	8a 85       	ldd	r24, Y+10	; 0x0a
    5476:	9b 85       	ldd	r25, Y+11	; 0x0b
    5478:	9c 01       	movw	r18, r24
    547a:	21 50       	subi	r18, 0x01	; 1
    547c:	31 09       	sbc	r19, r1
    547e:	3b 87       	std	Y+11, r19	; 0x0b
    5480:	2a 87       	std	Y+10, r18	; 0x0a
    5482:	21 e0       	ldi	r18, 0x01	; 1
    5484:	89 2b       	or	r24, r25
    5486:	09 f4       	brne	.+2      	; 0x548a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x178>
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	22 23       	and	r18, r18
    548c:	59 f1       	breq	.+86     	; 0x54e4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d2>
    548e:	89 81       	ldd	r24, Y+1	; 0x01
    5490:	9a 81       	ldd	r25, Y+2	; 0x02
    5492:	9c 01       	movw	r18, r24
    5494:	2f 5f       	subi	r18, 0xFF	; 255
    5496:	3f 4f       	sbci	r19, 0xFF	; 255
    5498:	3a 83       	std	Y+2, r19	; 0x02
    549a:	29 83       	std	Y+1, r18	; 0x01
    549c:	fc 01       	movw	r30, r24
    549e:	30 81       	ld	r19, Z
    54a0:	2b 81       	ldd	r18, Y+3	; 0x03
    54a2:	23 23       	and	r18, r19
    54a4:	fc 01       	movw	r30, r24
    54a6:	20 83       	st	Z, r18
    54a8:	e5 cf       	rjmp	.-54     	; 0x5474 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x162>
    54aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    54ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    54ae:	9c 01       	movw	r18, r24
    54b0:	21 50       	subi	r18, 0x01	; 1
    54b2:	31 09       	sbc	r19, r1
    54b4:	3b 87       	std	Y+11, r19	; 0x0b
    54b6:	2a 87       	std	Y+10, r18	; 0x0a
    54b8:	21 e0       	ldi	r18, 0x01	; 1
    54ba:	89 2b       	or	r24, r25
    54bc:	09 f4       	brne	.+2      	; 0x54c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1ae>
    54be:	20 e0       	ldi	r18, 0x00	; 0
    54c0:	22 23       	and	r18, r18
    54c2:	91 f0       	breq	.+36     	; 0x54e8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d6>
    54c4:	89 81       	ldd	r24, Y+1	; 0x01
    54c6:	9a 81       	ldd	r25, Y+2	; 0x02
    54c8:	9c 01       	movw	r18, r24
    54ca:	2f 5f       	subi	r18, 0xFF	; 255
    54cc:	3f 4f       	sbci	r19, 0xFF	; 255
    54ce:	3a 83       	std	Y+2, r19	; 0x02
    54d0:	29 83       	std	Y+1, r18	; 0x01
    54d2:	fc 01       	movw	r30, r24
    54d4:	30 81       	ld	r19, Z
    54d6:	2b 81       	ldd	r18, Y+3	; 0x03
    54d8:	23 27       	eor	r18, r19
    54da:	fc 01       	movw	r30, r24
    54dc:	20 83       	st	Z, r18
    54de:	e5 cf       	rjmp	.-54     	; 0x54aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x198>
    54e0:	00 00       	nop
    54e2:	03 c0       	rjmp	.+6      	; 0x54ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    54e4:	00 00       	nop
    54e6:	01 c0       	rjmp	.+2      	; 0x54ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1d8>
    54e8:	00 00       	nop
    54ea:	00 00       	nop
    54ec:	2d 96       	adiw	r28, 0x0d	; 13
    54ee:	0f b6       	in	r0, 0x3f	; 63
    54f0:	f8 94       	cli
    54f2:	de bf       	out	0x3e, r29	; 62
    54f4:	0f be       	out	0x3f, r0	; 63
    54f6:	cd bf       	out	0x3d, r28	; 61
    54f8:	df 91       	pop	r29
    54fa:	cf 91       	pop	r28
    54fc:	1f 91       	pop	r17
    54fe:	0f 91       	pop	r16
    5500:	08 95       	ret

00005502 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    5502:	0f 93       	push	r16
    5504:	1f 93       	push	r17
    5506:	cf 93       	push	r28
    5508:	df 93       	push	r29
    550a:	cd b7       	in	r28, 0x3d	; 61
    550c:	de b7       	in	r29, 0x3e	; 62
    550e:	2b 97       	sbiw	r28, 0x0b	; 11
    5510:	0f b6       	in	r0, 0x3f	; 63
    5512:	f8 94       	cli
    5514:	de bf       	out	0x3e, r29	; 62
    5516:	0f be       	out	0x3f, r0	; 63
    5518:	cd bf       	out	0x3d, r28	; 61
    551a:	9b 83       	std	Y+3, r25	; 0x03
    551c:	8a 83       	std	Y+2, r24	; 0x02
    551e:	7d 83       	std	Y+5, r23	; 0x05
    5520:	6c 83       	std	Y+4, r22	; 0x04
    5522:	5f 83       	std	Y+7, r21	; 0x07
    5524:	4e 83       	std	Y+6, r20	; 0x06
    5526:	39 87       	std	Y+9, r19	; 0x09
    5528:	28 87       	std	Y+8, r18	; 0x08
    552a:	1b 87       	std	Y+11, r17	; 0x0b
    552c:	0a 87       	std	Y+10, r16	; 0x0a
    552e:	19 82       	std	Y+1, r1	; 0x01
    5530:	8a 81       	ldd	r24, Y+2	; 0x02
    5532:	9b 81       	ldd	r25, Y+3	; 0x03
    5534:	fc 01       	movw	r30, r24
    5536:	86 89       	ldd	r24, Z+22	; 0x16
    5538:	88 2f       	mov	r24, r24
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	82 30       	cpi	r24, 0x02	; 2
    553e:	91 05       	cpc	r25, r1
    5540:	d9 f1       	breq	.+118    	; 0x55b8 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xb6>
    5542:	83 30       	cpi	r24, 0x03	; 3
    5544:	91 05       	cpc	r25, r1
    5546:	09 f4       	brne	.+2      	; 0x554a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x48>
    5548:	5f c0       	rjmp	.+190    	; 0x5608 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x106>
    554a:	01 97       	sbiw	r24, 0x01	; 1
    554c:	09 f0       	breq	.+2      	; 0x5550 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4e>
    554e:	85 c0       	rjmp	.+266    	; 0x565a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x158>
    5550:	81 e0       	ldi	r24, 0x01	; 1
    5552:	89 83       	std	Y+1, r24	; 0x01
    5554:	2c 81       	ldd	r18, Y+4	; 0x04
    5556:	3d 81       	ldd	r19, Y+5	; 0x05
    5558:	8e 81       	ldd	r24, Y+6	; 0x06
    555a:	9f 81       	ldd	r25, Y+7	; 0x07
    555c:	82 27       	eor	r24, r18
    555e:	93 27       	eor	r25, r19
    5560:	9d 83       	std	Y+5, r25	; 0x05
    5562:	8c 83       	std	Y+4, r24	; 0x04
    5564:	2e 81       	ldd	r18, Y+6	; 0x06
    5566:	3f 81       	ldd	r19, Y+7	; 0x07
    5568:	8c 81       	ldd	r24, Y+4	; 0x04
    556a:	9d 81       	ldd	r25, Y+5	; 0x05
    556c:	82 27       	eor	r24, r18
    556e:	93 27       	eor	r25, r19
    5570:	9f 83       	std	Y+7, r25	; 0x07
    5572:	8e 83       	std	Y+6, r24	; 0x06
    5574:	2c 81       	ldd	r18, Y+4	; 0x04
    5576:	3d 81       	ldd	r19, Y+5	; 0x05
    5578:	8e 81       	ldd	r24, Y+6	; 0x06
    557a:	9f 81       	ldd	r25, Y+7	; 0x07
    557c:	82 27       	eor	r24, r18
    557e:	93 27       	eor	r25, r19
    5580:	9d 83       	std	Y+5, r25	; 0x05
    5582:	8c 83       	std	Y+4, r24	; 0x04
    5584:	8a 81       	ldd	r24, Y+2	; 0x02
    5586:	9b 81       	ldd	r25, Y+3	; 0x03
    5588:	fc 01       	movw	r30, r24
    558a:	24 81       	ldd	r18, Z+4	; 0x04
    558c:	35 81       	ldd	r19, Z+5	; 0x05
    558e:	8c 81       	ldd	r24, Y+4	; 0x04
    5590:	9d 81       	ldd	r25, Y+5	; 0x05
    5592:	a9 01       	movw	r20, r18
    5594:	48 1b       	sub	r20, r24
    5596:	59 0b       	sbc	r21, r25
    5598:	ca 01       	movw	r24, r20
    559a:	01 97       	sbiw	r24, 0x01	; 1
    559c:	9d 83       	std	Y+5, r25	; 0x05
    559e:	8c 83       	std	Y+4, r24	; 0x04
    55a0:	88 85       	ldd	r24, Y+8	; 0x08
    55a2:	99 85       	ldd	r25, Y+9	; 0x09
    55a4:	01 97       	sbiw	r24, 0x01	; 1
    55a6:	2c 81       	ldd	r18, Y+4	; 0x04
    55a8:	3d 81       	ldd	r19, Y+5	; 0x05
    55aa:	f9 01       	movw	r30, r18
    55ac:	e8 1b       	sub	r30, r24
    55ae:	f9 0b       	sbc	r31, r25
    55b0:	cf 01       	movw	r24, r30
    55b2:	9d 83       	std	Y+5, r25	; 0x05
    55b4:	8c 83       	std	Y+4, r24	; 0x04
    55b6:	51 c0       	rjmp	.+162    	; 0x565a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x158>
    55b8:	8a 81       	ldd	r24, Y+2	; 0x02
    55ba:	9b 81       	ldd	r25, Y+3	; 0x03
    55bc:	fc 01       	movw	r30, r24
    55be:	24 81       	ldd	r18, Z+4	; 0x04
    55c0:	35 81       	ldd	r19, Z+5	; 0x05
    55c2:	8c 81       	ldd	r24, Y+4	; 0x04
    55c4:	9d 81       	ldd	r25, Y+5	; 0x05
    55c6:	a9 01       	movw	r20, r18
    55c8:	48 1b       	sub	r20, r24
    55ca:	59 0b       	sbc	r21, r25
    55cc:	ca 01       	movw	r24, r20
    55ce:	01 97       	sbiw	r24, 0x01	; 1
    55d0:	9d 83       	std	Y+5, r25	; 0x05
    55d2:	8c 83       	std	Y+4, r24	; 0x04
    55d4:	8a 81       	ldd	r24, Y+2	; 0x02
    55d6:	9b 81       	ldd	r25, Y+3	; 0x03
    55d8:	fc 01       	movw	r30, r24
    55da:	26 81       	ldd	r18, Z+6	; 0x06
    55dc:	37 81       	ldd	r19, Z+7	; 0x07
    55de:	8e 81       	ldd	r24, Y+6	; 0x06
    55e0:	9f 81       	ldd	r25, Y+7	; 0x07
    55e2:	a9 01       	movw	r20, r18
    55e4:	48 1b       	sub	r20, r24
    55e6:	59 0b       	sbc	r21, r25
    55e8:	ca 01       	movw	r24, r20
    55ea:	01 97       	sbiw	r24, 0x01	; 1
    55ec:	9f 83       	std	Y+7, r25	; 0x07
    55ee:	8e 83       	std	Y+6, r24	; 0x06
    55f0:	88 85       	ldd	r24, Y+8	; 0x08
    55f2:	99 85       	ldd	r25, Y+9	; 0x09
    55f4:	01 97       	sbiw	r24, 0x01	; 1
    55f6:	2e 81       	ldd	r18, Y+6	; 0x06
    55f8:	3f 81       	ldd	r19, Y+7	; 0x07
    55fa:	f9 01       	movw	r30, r18
    55fc:	e8 1b       	sub	r30, r24
    55fe:	f9 0b       	sbc	r31, r25
    5600:	cf 01       	movw	r24, r30
    5602:	9f 83       	std	Y+7, r25	; 0x07
    5604:	8e 83       	std	Y+6, r24	; 0x06
    5606:	29 c0       	rjmp	.+82     	; 0x565a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x158>
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	89 83       	std	Y+1, r24	; 0x01
    560c:	2c 81       	ldd	r18, Y+4	; 0x04
    560e:	3d 81       	ldd	r19, Y+5	; 0x05
    5610:	8e 81       	ldd	r24, Y+6	; 0x06
    5612:	9f 81       	ldd	r25, Y+7	; 0x07
    5614:	82 27       	eor	r24, r18
    5616:	93 27       	eor	r25, r19
    5618:	9d 83       	std	Y+5, r25	; 0x05
    561a:	8c 83       	std	Y+4, r24	; 0x04
    561c:	2e 81       	ldd	r18, Y+6	; 0x06
    561e:	3f 81       	ldd	r19, Y+7	; 0x07
    5620:	8c 81       	ldd	r24, Y+4	; 0x04
    5622:	9d 81       	ldd	r25, Y+5	; 0x05
    5624:	82 27       	eor	r24, r18
    5626:	93 27       	eor	r25, r19
    5628:	9f 83       	std	Y+7, r25	; 0x07
    562a:	8e 83       	std	Y+6, r24	; 0x06
    562c:	2c 81       	ldd	r18, Y+4	; 0x04
    562e:	3d 81       	ldd	r19, Y+5	; 0x05
    5630:	8e 81       	ldd	r24, Y+6	; 0x06
    5632:	9f 81       	ldd	r25, Y+7	; 0x07
    5634:	82 27       	eor	r24, r18
    5636:	93 27       	eor	r25, r19
    5638:	9d 83       	std	Y+5, r25	; 0x05
    563a:	8c 83       	std	Y+4, r24	; 0x04
    563c:	8a 81       	ldd	r24, Y+2	; 0x02
    563e:	9b 81       	ldd	r25, Y+3	; 0x03
    5640:	fc 01       	movw	r30, r24
    5642:	26 81       	ldd	r18, Z+6	; 0x06
    5644:	37 81       	ldd	r19, Z+7	; 0x07
    5646:	8e 81       	ldd	r24, Y+6	; 0x06
    5648:	9f 81       	ldd	r25, Y+7	; 0x07
    564a:	a9 01       	movw	r20, r18
    564c:	48 1b       	sub	r20, r24
    564e:	59 0b       	sbc	r21, r25
    5650:	ca 01       	movw	r24, r20
    5652:	01 97       	sbiw	r24, 0x01	; 1
    5654:	9f 83       	std	Y+7, r25	; 0x07
    5656:	8e 83       	std	Y+6, r24	; 0x06
    5658:	00 00       	nop
    565a:	89 81       	ldd	r24, Y+1	; 0x01
    565c:	88 23       	and	r24, r24
    565e:	69 f0       	breq	.+26     	; 0x567a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x178>
    5660:	ea 85       	ldd	r30, Y+10	; 0x0a
    5662:	fb 85       	ldd	r31, Y+11	; 0x0b
    5664:	28 85       	ldd	r18, Y+8	; 0x08
    5666:	39 85       	ldd	r19, Y+9	; 0x09
    5668:	4e 81       	ldd	r20, Y+6	; 0x06
    566a:	5f 81       	ldd	r21, Y+7	; 0x07
    566c:	6c 81       	ldd	r22, Y+4	; 0x04
    566e:	7d 81       	ldd	r23, Y+5	; 0x05
    5670:	8a 81       	ldd	r24, Y+2	; 0x02
    5672:	9b 81       	ldd	r25, Y+3	; 0x03
    5674:	8f 01       	movw	r16, r30
    5676:	4d de       	rcall	.-870    	; 0x5312 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    5678:	0c c0       	rjmp	.+24     	; 0x5692 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x190>
    567a:	ea 85       	ldd	r30, Y+10	; 0x0a
    567c:	fb 85       	ldd	r31, Y+11	; 0x0b
    567e:	28 85       	ldd	r18, Y+8	; 0x08
    5680:	39 85       	ldd	r19, Y+9	; 0x09
    5682:	4e 81       	ldd	r20, Y+6	; 0x06
    5684:	5f 81       	ldd	r21, Y+7	; 0x07
    5686:	6c 81       	ldd	r22, Y+4	; 0x04
    5688:	7d 81       	ldd	r23, Y+5	; 0x05
    568a:	8a 81       	ldd	r24, Y+2	; 0x02
    568c:	9b 81       	ldd	r25, Y+3	; 0x03
    568e:	8f 01       	movw	r16, r30
    5690:	0c d0       	rcall	.+24     	; 0x56aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    5692:	00 00       	nop
    5694:	2b 96       	adiw	r28, 0x0b	; 11
    5696:	0f b6       	in	r0, 0x3f	; 63
    5698:	f8 94       	cli
    569a:	de bf       	out	0x3e, r29	; 62
    569c:	0f be       	out	0x3f, r0	; 63
    569e:	cd bf       	out	0x3d, r28	; 61
    56a0:	df 91       	pop	r29
    56a2:	cf 91       	pop	r28
    56a4:	1f 91       	pop	r17
    56a6:	0f 91       	pop	r16
    56a8:	08 95       	ret

000056aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    56aa:	0f 93       	push	r16
    56ac:	1f 93       	push	r17
    56ae:	cf 93       	push	r28
    56b0:	df 93       	push	r29
    56b2:	cd b7       	in	r28, 0x3d	; 61
    56b4:	de b7       	in	r29, 0x3e	; 62
    56b6:	68 97       	sbiw	r28, 0x18	; 24
    56b8:	0f b6       	in	r0, 0x3f	; 63
    56ba:	f8 94       	cli
    56bc:	de bf       	out	0x3e, r29	; 62
    56be:	0f be       	out	0x3f, r0	; 63
    56c0:	cd bf       	out	0x3d, r28	; 61
    56c2:	98 8b       	std	Y+16, r25	; 0x10
    56c4:	8f 87       	std	Y+15, r24	; 0x0f
    56c6:	7a 8b       	std	Y+18, r23	; 0x12
    56c8:	69 8b       	std	Y+17, r22	; 0x11
    56ca:	5c 8b       	std	Y+20, r21	; 0x14
    56cc:	4b 8b       	std	Y+19, r20	; 0x13
    56ce:	3e 8b       	std	Y+22, r19	; 0x16
    56d0:	2d 8b       	std	Y+21, r18	; 0x15
    56d2:	18 8f       	std	Y+24, r17	; 0x18
    56d4:	0f 8b       	std	Y+23, r16	; 0x17
    56d6:	89 89       	ldd	r24, Y+17	; 0x11
    56d8:	9a 89       	ldd	r25, Y+18	; 0x12
    56da:	99 23       	and	r25, r25
    56dc:	0c f4       	brge	.+2      	; 0x56e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x36>
    56de:	62 c1       	rjmp	.+708    	; 0x59a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    56e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    56e2:	98 89       	ldd	r25, Y+16	; 0x10
    56e4:	fc 01       	movw	r30, r24
    56e6:	24 81       	ldd	r18, Z+4	; 0x04
    56e8:	35 81       	ldd	r19, Z+5	; 0x05
    56ea:	89 89       	ldd	r24, Y+17	; 0x11
    56ec:	9a 89       	ldd	r25, Y+18	; 0x12
    56ee:	82 17       	cp	r24, r18
    56f0:	93 07       	cpc	r25, r19
    56f2:	0c f0       	brlt	.+2      	; 0x56f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x4c>
    56f4:	57 c1       	rjmp	.+686    	; 0x59a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    56f6:	8b 89       	ldd	r24, Y+19	; 0x13
    56f8:	9c 89       	ldd	r25, Y+20	; 0x14
    56fa:	99 23       	and	r25, r25
    56fc:	54 f4       	brge	.+20     	; 0x5712 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x68>
    56fe:	2d 89       	ldd	r18, Y+21	; 0x15
    5700:	3e 89       	ldd	r19, Y+22	; 0x16
    5702:	8b 89       	ldd	r24, Y+19	; 0x13
    5704:	9c 89       	ldd	r25, Y+20	; 0x14
    5706:	82 0f       	add	r24, r18
    5708:	93 1f       	adc	r25, r19
    570a:	9e 8b       	std	Y+22, r25	; 0x16
    570c:	8d 8b       	std	Y+21, r24	; 0x15
    570e:	1c 8a       	std	Y+20, r1	; 0x14
    5710:	1b 8a       	std	Y+19, r1	; 0x13
    5712:	2b 89       	ldd	r18, Y+19	; 0x13
    5714:	3c 89       	ldd	r19, Y+20	; 0x14
    5716:	8d 89       	ldd	r24, Y+21	; 0x15
    5718:	9e 89       	ldd	r25, Y+22	; 0x16
    571a:	28 0f       	add	r18, r24
    571c:	39 1f       	adc	r19, r25
    571e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5720:	98 89       	ldd	r25, Y+16	; 0x10
    5722:	fc 01       	movw	r30, r24
    5724:	86 81       	ldd	r24, Z+6	; 0x06
    5726:	97 81       	ldd	r25, Z+7	; 0x07
    5728:	82 17       	cp	r24, r18
    572a:	93 07       	cpc	r25, r19
    572c:	6c f4       	brge	.+26     	; 0x5748 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x9e>
    572e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5730:	98 89       	ldd	r25, Y+16	; 0x10
    5732:	fc 01       	movw	r30, r24
    5734:	26 81       	ldd	r18, Z+6	; 0x06
    5736:	37 81       	ldd	r19, Z+7	; 0x07
    5738:	8b 89       	ldd	r24, Y+19	; 0x13
    573a:	9c 89       	ldd	r25, Y+20	; 0x14
    573c:	a9 01       	movw	r20, r18
    573e:	48 1b       	sub	r20, r24
    5740:	59 0b       	sbc	r21, r25
    5742:	ca 01       	movw	r24, r20
    5744:	9e 8b       	std	Y+22, r25	; 0x16
    5746:	8d 8b       	std	Y+21, r24	; 0x15
    5748:	8d 89       	ldd	r24, Y+21	; 0x15
    574a:	9e 89       	ldd	r25, Y+22	; 0x16
    574c:	18 16       	cp	r1, r24
    574e:	19 06       	cpc	r1, r25
    5750:	0c f0       	brlt	.+2      	; 0x5754 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xaa>
    5752:	28 c1       	rjmp	.+592    	; 0x59a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5754:	8b 89       	ldd	r24, Y+19	; 0x13
    5756:	8e 83       	std	Y+6, r24	; 0x06
    5758:	8d 89       	ldd	r24, Y+21	; 0x15
    575a:	89 83       	std	Y+1, r24	; 0x01
    575c:	8f 85       	ldd	r24, Y+15	; 0x0f
    575e:	98 89       	ldd	r25, Y+16	; 0x10
    5760:	fc 01       	movw	r30, r24
    5762:	87 8d       	ldd	r24, Z+31	; 0x1f
    5764:	90 a1       	ldd	r25, Z+32	; 0x20
    5766:	2e 81       	ldd	r18, Y+6	; 0x06
    5768:	26 95       	lsr	r18
    576a:	26 95       	lsr	r18
    576c:	26 95       	lsr	r18
    576e:	62 2f       	mov	r22, r18
    5770:	70 e0       	ldi	r23, 0x00	; 0
    5772:	2f 85       	ldd	r18, Y+15	; 0x0f
    5774:	38 89       	ldd	r19, Y+16	; 0x10
    5776:	f9 01       	movw	r30, r18
    5778:	24 81       	ldd	r18, Z+4	; 0x04
    577a:	35 81       	ldd	r19, Z+5	; 0x05
    577c:	62 9f       	mul	r22, r18
    577e:	a0 01       	movw	r20, r0
    5780:	63 9f       	mul	r22, r19
    5782:	50 0d       	add	r21, r0
    5784:	72 9f       	mul	r23, r18
    5786:	50 0d       	add	r21, r0
    5788:	11 24       	eor	r1, r1
    578a:	29 89       	ldd	r18, Y+17	; 0x11
    578c:	3a 89       	ldd	r19, Y+18	; 0x12
    578e:	24 0f       	add	r18, r20
    5790:	35 1f       	adc	r19, r21
    5792:	82 0f       	add	r24, r18
    5794:	93 1f       	adc	r25, r19
    5796:	9b 83       	std	Y+3, r25	; 0x03
    5798:	8a 83       	std	Y+2, r24	; 0x02
    579a:	8e 81       	ldd	r24, Y+6	; 0x06
    579c:	87 70       	andi	r24, 0x07	; 7
    579e:	8c 83       	std	Y+4, r24	; 0x04
    57a0:	8c 81       	ldd	r24, Y+4	; 0x04
    57a2:	88 23       	and	r24, r24
    57a4:	09 f4       	brne	.+2      	; 0x57a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    57a6:	68 c0       	rjmp	.+208    	; 0x5878 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1ce>
    57a8:	98 e0       	ldi	r25, 0x08	; 8
    57aa:	8c 81       	ldd	r24, Y+4	; 0x04
    57ac:	f9 2f       	mov	r31, r25
    57ae:	f8 1b       	sub	r31, r24
    57b0:	8f 2f       	mov	r24, r31
    57b2:	8c 83       	std	Y+4, r24	; 0x04
    57b4:	8c 81       	ldd	r24, Y+4	; 0x04
    57b6:	88 2f       	mov	r24, r24
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	8e 5b       	subi	r24, 0xBE	; 190
    57bc:	94 4f       	sbci	r25, 0xF4	; 244
    57be:	98 87       	std	Y+8, r25	; 0x08
    57c0:	8f 83       	std	Y+7, r24	; 0x07
    57c2:	8f 81       	ldd	r24, Y+7	; 0x07
    57c4:	98 85       	ldd	r25, Y+8	; 0x08
    57c6:	fc 01       	movw	r30, r24
    57c8:	84 91       	lpm	r24, Z
    57ca:	89 87       	std	Y+9, r24	; 0x09
    57cc:	89 85       	ldd	r24, Y+9	; 0x09
    57ce:	8d 83       	std	Y+5, r24	; 0x05
    57d0:	99 81       	ldd	r25, Y+1	; 0x01
    57d2:	8c 81       	ldd	r24, Y+4	; 0x04
    57d4:	98 17       	cp	r25, r24
    57d6:	98 f4       	brcc	.+38     	; 0x57fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x154>
    57d8:	8c 81       	ldd	r24, Y+4	; 0x04
    57da:	28 2f       	mov	r18, r24
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	89 81       	ldd	r24, Y+1	; 0x01
    57e0:	88 2f       	mov	r24, r24
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	28 1b       	sub	r18, r24
    57e6:	39 0b       	sbc	r19, r25
    57e8:	8f ef       	ldi	r24, 0xFF	; 255
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	02 c0       	rjmp	.+4      	; 0x57f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x148>
    57ee:	95 95       	asr	r25
    57f0:	87 95       	ror	r24
    57f2:	2a 95       	dec	r18
    57f4:	e2 f7       	brpl	.-8      	; 0x57ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    57f6:	98 2f       	mov	r25, r24
    57f8:	8d 81       	ldd	r24, Y+5	; 0x05
    57fa:	89 23       	and	r24, r25
    57fc:	8d 83       	std	Y+5, r24	; 0x05
    57fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5800:	98 8d       	ldd	r25, Y+24	; 0x18
    5802:	81 30       	cpi	r24, 0x01	; 1
    5804:	91 05       	cpc	r25, r1
    5806:	31 f0       	breq	.+12     	; 0x5814 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x16a>
    5808:	81 30       	cpi	r24, 0x01	; 1
    580a:	91 05       	cpc	r25, r1
    580c:	78 f0       	brcs	.+30     	; 0x582c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x182>
    580e:	02 97       	sbiw	r24, 0x02	; 2
    5810:	d9 f0       	breq	.+54     	; 0x5848 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x19e>
    5812:	26 c0       	rjmp	.+76     	; 0x5860 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1b6>
    5814:	8a 81       	ldd	r24, Y+2	; 0x02
    5816:	9b 81       	ldd	r25, Y+3	; 0x03
    5818:	fc 01       	movw	r30, r24
    581a:	90 81       	ld	r25, Z
    581c:	8d 81       	ldd	r24, Y+5	; 0x05
    581e:	29 2f       	mov	r18, r25
    5820:	28 2b       	or	r18, r24
    5822:	8a 81       	ldd	r24, Y+2	; 0x02
    5824:	9b 81       	ldd	r25, Y+3	; 0x03
    5826:	fc 01       	movw	r30, r24
    5828:	20 83       	st	Z, r18
    582a:	1a c0       	rjmp	.+52     	; 0x5860 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1b6>
    582c:	8a 81       	ldd	r24, Y+2	; 0x02
    582e:	9b 81       	ldd	r25, Y+3	; 0x03
    5830:	fc 01       	movw	r30, r24
    5832:	80 81       	ld	r24, Z
    5834:	98 2f       	mov	r25, r24
    5836:	8d 81       	ldd	r24, Y+5	; 0x05
    5838:	80 95       	com	r24
    583a:	89 23       	and	r24, r25
    583c:	28 2f       	mov	r18, r24
    583e:	8a 81       	ldd	r24, Y+2	; 0x02
    5840:	9b 81       	ldd	r25, Y+3	; 0x03
    5842:	fc 01       	movw	r30, r24
    5844:	20 83       	st	Z, r18
    5846:	0c c0       	rjmp	.+24     	; 0x5860 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1b6>
    5848:	8a 81       	ldd	r24, Y+2	; 0x02
    584a:	9b 81       	ldd	r25, Y+3	; 0x03
    584c:	fc 01       	movw	r30, r24
    584e:	90 81       	ld	r25, Z
    5850:	8d 81       	ldd	r24, Y+5	; 0x05
    5852:	29 2f       	mov	r18, r25
    5854:	28 27       	eor	r18, r24
    5856:	8a 81       	ldd	r24, Y+2	; 0x02
    5858:	9b 81       	ldd	r25, Y+3	; 0x03
    585a:	fc 01       	movw	r30, r24
    585c:	20 83       	st	Z, r18
    585e:	00 00       	nop
    5860:	8f 85       	ldd	r24, Y+15	; 0x0f
    5862:	98 89       	ldd	r25, Y+16	; 0x10
    5864:	fc 01       	movw	r30, r24
    5866:	84 81       	ldd	r24, Z+4	; 0x04
    5868:	95 81       	ldd	r25, Z+5	; 0x05
    586a:	9c 01       	movw	r18, r24
    586c:	8a 81       	ldd	r24, Y+2	; 0x02
    586e:	9b 81       	ldd	r25, Y+3	; 0x03
    5870:	82 0f       	add	r24, r18
    5872:	93 1f       	adc	r25, r19
    5874:	9b 83       	std	Y+3, r25	; 0x03
    5876:	8a 83       	std	Y+2, r24	; 0x02
    5878:	99 81       	ldd	r25, Y+1	; 0x01
    587a:	8c 81       	ldd	r24, Y+4	; 0x04
    587c:	98 17       	cp	r25, r24
    587e:	08 f4       	brcc	.+2      	; 0x5882 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1d8>
    5880:	91 c0       	rjmp	.+290    	; 0x59a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5882:	99 81       	ldd	r25, Y+1	; 0x01
    5884:	8c 81       	ldd	r24, Y+4	; 0x04
    5886:	f9 2f       	mov	r31, r25
    5888:	f8 1b       	sub	r31, r24
    588a:	8f 2f       	mov	r24, r31
    588c:	89 83       	std	Y+1, r24	; 0x01
    588e:	89 81       	ldd	r24, Y+1	; 0x01
    5890:	88 30       	cpi	r24, 0x08	; 8
    5892:	08 f4       	brcc	.+2      	; 0x5896 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1ec>
    5894:	41 c0       	rjmp	.+130    	; 0x5918 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x26e>
    5896:	8f 89       	ldd	r24, Y+23	; 0x17
    5898:	98 8d       	ldd	r25, Y+24	; 0x18
    589a:	02 97       	sbiw	r24, 0x02	; 2
    589c:	e9 f4       	brne	.+58     	; 0x58d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x22e>
    589e:	8a 81       	ldd	r24, Y+2	; 0x02
    58a0:	9b 81       	ldd	r25, Y+3	; 0x03
    58a2:	fc 01       	movw	r30, r24
    58a4:	80 81       	ld	r24, Z
    58a6:	28 2f       	mov	r18, r24
    58a8:	20 95       	com	r18
    58aa:	8a 81       	ldd	r24, Y+2	; 0x02
    58ac:	9b 81       	ldd	r25, Y+3	; 0x03
    58ae:	fc 01       	movw	r30, r24
    58b0:	20 83       	st	Z, r18
    58b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    58b4:	98 89       	ldd	r25, Y+16	; 0x10
    58b6:	fc 01       	movw	r30, r24
    58b8:	84 81       	ldd	r24, Z+4	; 0x04
    58ba:	95 81       	ldd	r25, Z+5	; 0x05
    58bc:	9c 01       	movw	r18, r24
    58be:	8a 81       	ldd	r24, Y+2	; 0x02
    58c0:	9b 81       	ldd	r25, Y+3	; 0x03
    58c2:	82 0f       	add	r24, r18
    58c4:	93 1f       	adc	r25, r19
    58c6:	9b 83       	std	Y+3, r25	; 0x03
    58c8:	8a 83       	std	Y+2, r24	; 0x02
    58ca:	89 81       	ldd	r24, Y+1	; 0x01
    58cc:	88 50       	subi	r24, 0x08	; 8
    58ce:	89 83       	std	Y+1, r24	; 0x01
    58d0:	89 81       	ldd	r24, Y+1	; 0x01
    58d2:	88 30       	cpi	r24, 0x08	; 8
    58d4:	08 f1       	brcs	.+66     	; 0x5918 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x26e>
    58d6:	e3 cf       	rjmp	.-58     	; 0x589e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1f4>
    58d8:	8f 89       	ldd	r24, Y+23	; 0x17
    58da:	98 8d       	ldd	r25, Y+24	; 0x18
    58dc:	89 2b       	or	r24, r25
    58de:	11 f0       	breq	.+4      	; 0x58e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x23a>
    58e0:	8f ef       	ldi	r24, 0xFF	; 255
    58e2:	01 c0       	rjmp	.+2      	; 0x58e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x23c>
    58e4:	80 e0       	ldi	r24, 0x00	; 0
    58e6:	8a 87       	std	Y+10, r24	; 0x0a
    58e8:	8a 81       	ldd	r24, Y+2	; 0x02
    58ea:	9b 81       	ldd	r25, Y+3	; 0x03
    58ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    58ee:	fc 01       	movw	r30, r24
    58f0:	20 83       	st	Z, r18
    58f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    58f4:	98 89       	ldd	r25, Y+16	; 0x10
    58f6:	fc 01       	movw	r30, r24
    58f8:	84 81       	ldd	r24, Z+4	; 0x04
    58fa:	95 81       	ldd	r25, Z+5	; 0x05
    58fc:	9c 01       	movw	r18, r24
    58fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5900:	9b 81       	ldd	r25, Y+3	; 0x03
    5902:	82 0f       	add	r24, r18
    5904:	93 1f       	adc	r25, r19
    5906:	9b 83       	std	Y+3, r25	; 0x03
    5908:	8a 83       	std	Y+2, r24	; 0x02
    590a:	89 81       	ldd	r24, Y+1	; 0x01
    590c:	88 50       	subi	r24, 0x08	; 8
    590e:	89 83       	std	Y+1, r24	; 0x01
    5910:	89 81       	ldd	r24, Y+1	; 0x01
    5912:	88 30       	cpi	r24, 0x08	; 8
    5914:	08 f0       	brcs	.+2      	; 0x5918 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x26e>
    5916:	e8 cf       	rjmp	.-48     	; 0x58e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x23e>
    5918:	89 81       	ldd	r24, Y+1	; 0x01
    591a:	88 23       	and	r24, r24
    591c:	09 f4       	brne	.+2      	; 0x5920 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x276>
    591e:	42 c0       	rjmp	.+132    	; 0x59a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5920:	89 81       	ldd	r24, Y+1	; 0x01
    5922:	87 70       	andi	r24, 0x07	; 7
    5924:	8c 83       	std	Y+4, r24	; 0x04
    5926:	8c 81       	ldd	r24, Y+4	; 0x04
    5928:	88 2f       	mov	r24, r24
    592a:	90 e0       	ldi	r25, 0x00	; 0
    592c:	86 5b       	subi	r24, 0xB6	; 182
    592e:	94 4f       	sbci	r25, 0xF4	; 244
    5930:	9c 87       	std	Y+12, r25	; 0x0c
    5932:	8b 87       	std	Y+11, r24	; 0x0b
    5934:	8b 85       	ldd	r24, Y+11	; 0x0b
    5936:	9c 85       	ldd	r25, Y+12	; 0x0c
    5938:	fc 01       	movw	r30, r24
    593a:	84 91       	lpm	r24, Z
    593c:	8d 87       	std	Y+13, r24	; 0x0d
    593e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5940:	8e 87       	std	Y+14, r24	; 0x0e
    5942:	8f 89       	ldd	r24, Y+23	; 0x17
    5944:	98 8d       	ldd	r25, Y+24	; 0x18
    5946:	81 30       	cpi	r24, 0x01	; 1
    5948:	91 05       	cpc	r25, r1
    594a:	31 f0       	breq	.+12     	; 0x5958 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2ae>
    594c:	81 30       	cpi	r24, 0x01	; 1
    594e:	91 05       	cpc	r25, r1
    5950:	78 f0       	brcs	.+30     	; 0x5970 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2c6>
    5952:	02 97       	sbiw	r24, 0x02	; 2
    5954:	d9 f0       	breq	.+54     	; 0x598c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2e2>
    5956:	26 c0       	rjmp	.+76     	; 0x59a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5958:	8a 81       	ldd	r24, Y+2	; 0x02
    595a:	9b 81       	ldd	r25, Y+3	; 0x03
    595c:	fc 01       	movw	r30, r24
    595e:	90 81       	ld	r25, Z
    5960:	8e 85       	ldd	r24, Y+14	; 0x0e
    5962:	29 2f       	mov	r18, r25
    5964:	28 2b       	or	r18, r24
    5966:	8a 81       	ldd	r24, Y+2	; 0x02
    5968:	9b 81       	ldd	r25, Y+3	; 0x03
    596a:	fc 01       	movw	r30, r24
    596c:	20 83       	st	Z, r18
    596e:	1a c0       	rjmp	.+52     	; 0x59a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    5970:	8a 81       	ldd	r24, Y+2	; 0x02
    5972:	9b 81       	ldd	r25, Y+3	; 0x03
    5974:	fc 01       	movw	r30, r24
    5976:	80 81       	ld	r24, Z
    5978:	98 2f       	mov	r25, r24
    597a:	8e 85       	ldd	r24, Y+14	; 0x0e
    597c:	80 95       	com	r24
    597e:	89 23       	and	r24, r25
    5980:	28 2f       	mov	r18, r24
    5982:	8a 81       	ldd	r24, Y+2	; 0x02
    5984:	9b 81       	ldd	r25, Y+3	; 0x03
    5986:	fc 01       	movw	r30, r24
    5988:	20 83       	st	Z, r18
    598a:	0c c0       	rjmp	.+24     	; 0x59a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2fa>
    598c:	8a 81       	ldd	r24, Y+2	; 0x02
    598e:	9b 81       	ldd	r25, Y+3	; 0x03
    5990:	fc 01       	movw	r30, r24
    5992:	90 81       	ld	r25, Z
    5994:	8e 85       	ldd	r24, Y+14	; 0x0e
    5996:	29 2f       	mov	r18, r25
    5998:	28 27       	eor	r18, r24
    599a:	8a 81       	ldd	r24, Y+2	; 0x02
    599c:	9b 81       	ldd	r25, Y+3	; 0x03
    599e:	fc 01       	movw	r30, r24
    59a0:	20 83       	st	Z, r18
    59a2:	00 00       	nop
    59a4:	00 00       	nop
    59a6:	68 96       	adiw	r28, 0x18	; 24
    59a8:	0f b6       	in	r0, 0x3f	; 63
    59aa:	f8 94       	cli
    59ac:	de bf       	out	0x3e, r29	; 62
    59ae:	0f be       	out	0x3f, r0	; 63
    59b0:	cd bf       	out	0x3d, r28	; 61
    59b2:	df 91       	pop	r29
    59b4:	cf 91       	pop	r28
    59b6:	1f 91       	pop	r17
    59b8:	0f 91       	pop	r16
    59ba:	08 95       	ret

000059bc <_ZN16Adafruit_SSD13067displayEv>:
    59bc:	cf 93       	push	r28
    59be:	df 93       	push	r29
    59c0:	cd b7       	in	r28, 0x3d	; 61
    59c2:	de b7       	in	r29, 0x3e	; 62
    59c4:	2c 97       	sbiw	r28, 0x0c	; 12
    59c6:	0f b6       	in	r0, 0x3f	; 63
    59c8:	f8 94       	cli
    59ca:	de bf       	out	0x3e, r29	; 62
    59cc:	0f be       	out	0x3f, r0	; 63
    59ce:	cd bf       	out	0x3d, r28	; 61
    59d0:	9c 87       	std	Y+12, r25	; 0x0c
    59d2:	8b 87       	std	Y+11, r24	; 0x0b
    59d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    59d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    59d8:	fc 01       	movw	r30, r24
    59da:	85 8d       	ldd	r24, Z+29	; 0x1d
    59dc:	96 8d       	ldd	r25, Z+30	; 0x1e
    59de:	89 2b       	or	r24, r25
    59e0:	91 f0       	breq	.+36     	; 0x5a06 <_ZN16Adafruit_SSD13067displayEv+0x4a>
    59e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    59e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    59e6:	fc 01       	movw	r30, r24
    59e8:	85 a9       	ldd	r24, Z+53	; 0x35
    59ea:	96 a9       	ldd	r25, Z+54	; 0x36
    59ec:	a7 a9       	ldd	r26, Z+55	; 0x37
    59ee:	b0 ad       	ldd	r27, Z+56	; 0x38
    59f0:	2b 85       	ldd	r18, Y+11	; 0x0b
    59f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    59f4:	f9 01       	movw	r30, r18
    59f6:	25 8d       	ldd	r18, Z+29	; 0x1d
    59f8:	36 8d       	ldd	r19, Z+30	; 0x1e
    59fa:	ac 01       	movw	r20, r24
    59fc:	bd 01       	movw	r22, r26
    59fe:	c9 01       	movw	r24, r18
    5a00:	0e 94 01 55 	call	0xaa02	; 0xaa02 <_ZN7TwoWire8setClockEm>
    5a04:	23 c0       	rjmp	.+70     	; 0x5a4c <_ZN16Adafruit_SSD13067displayEv+0x90>
    5a06:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a08:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	83 8d       	ldd	r24, Z+27	; 0x1b
    5a0e:	94 8d       	ldd	r25, Z+28	; 0x1c
    5a10:	89 2b       	or	r24, r25
    5a12:	39 f0       	breq	.+14     	; 0x5a22 <_ZN16Adafruit_SSD13067displayEv+0x66>
    5a14:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a16:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a18:	fc 01       	movw	r30, r24
    5a1a:	86 ad       	ldd	r24, Z+62	; 0x3e
    5a1c:	97 ad       	ldd	r25, Z+63	; 0x3f
    5a1e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5a22:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a24:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a26:	fc 01       	movw	r30, r24
    5a28:	87 a5       	ldd	r24, Z+47	; 0x2f
    5a2a:	90 a9       	ldd	r25, Z+48	; 0x30
    5a2c:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a2e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a30:	f9 01       	movw	r30, r18
    5a32:	27 a5       	ldd	r18, Z+47	; 0x2f
    5a34:	30 a9       	ldd	r19, Z+48	; 0x30
    5a36:	f9 01       	movw	r30, r18
    5a38:	20 81       	ld	r18, Z
    5a3a:	42 2f       	mov	r20, r18
    5a3c:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a3e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a40:	f9 01       	movw	r30, r18
    5a42:	24 a9       	ldd	r18, Z+52	; 0x34
    5a44:	20 95       	com	r18
    5a46:	24 23       	and	r18, r20
    5a48:	fc 01       	movw	r30, r24
    5a4a:	20 83       	st	Z, r18
    5a4c:	25 e0       	ldi	r18, 0x05	; 5
    5a4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a50:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a52:	42 2f       	mov	r20, r18
    5a54:	62 e5       	ldi	r22, 0x52	; 82
    5a56:	7b e0       	ldi	r23, 0x0B	; 11
    5a58:	0e 94 dd 21 	call	0x43ba	; 0x43ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    5a5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a60:	fc 01       	movw	r30, r24
    5a62:	84 81       	ldd	r24, Z+4	; 0x04
    5a64:	95 81       	ldd	r25, Z+5	; 0x05
    5a66:	2f ef       	ldi	r18, 0xFF	; 255
    5a68:	28 0f       	add	r18, r24
    5a6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a6e:	62 2f       	mov	r22, r18
    5a70:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5a74:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a76:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a78:	fc 01       	movw	r30, r24
    5a7a:	24 81       	ldd	r18, Z+4	; 0x04
    5a7c:	35 81       	ldd	r19, Z+5	; 0x05
    5a7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a80:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a82:	fc 01       	movw	r30, r24
    5a84:	86 81       	ldd	r24, Z+6	; 0x06
    5a86:	97 81       	ldd	r25, Z+7	; 0x07
    5a88:	07 96       	adiw	r24, 0x07	; 7
    5a8a:	99 23       	and	r25, r25
    5a8c:	0c f4       	brge	.+2      	; 0x5a90 <_ZN16Adafruit_SSD13067displayEv+0xd4>
    5a8e:	07 96       	adiw	r24, 0x07	; 7
    5a90:	95 95       	asr	r25
    5a92:	87 95       	ror	r24
    5a94:	95 95       	asr	r25
    5a96:	87 95       	ror	r24
    5a98:	95 95       	asr	r25
    5a9a:	87 95       	ror	r24
    5a9c:	ac 01       	movw	r20, r24
    5a9e:	24 9f       	mul	r18, r20
    5aa0:	c0 01       	movw	r24, r0
    5aa2:	25 9f       	mul	r18, r21
    5aa4:	90 0d       	add	r25, r0
    5aa6:	34 9f       	mul	r19, r20
    5aa8:	90 0d       	add	r25, r0
    5aaa:	11 24       	eor	r1, r1
    5aac:	9a 83       	std	Y+2, r25	; 0x02
    5aae:	89 83       	std	Y+1, r24	; 0x01
    5ab0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ab2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	87 8d       	ldd	r24, Z+31	; 0x1f
    5ab8:	90 a1       	ldd	r25, Z+32	; 0x20
    5aba:	9c 83       	std	Y+4, r25	; 0x04
    5abc:	8b 83       	std	Y+3, r24	; 0x03
    5abe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ac0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ac2:	fc 01       	movw	r30, r24
    5ac4:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ac6:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ac8:	89 2b       	or	r24, r25
    5aca:	09 f4       	brne	.+2      	; 0x5ace <_ZN16Adafruit_SSD13067displayEv+0x112>
    5acc:	8f c0       	rjmp	.+286    	; 0x5bec <_ZN16Adafruit_SSD13067displayEv+0x230>
    5ace:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ad0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ad2:	fc 01       	movw	r30, r24
    5ad4:	81 a1       	ldd	r24, Z+33	; 0x21
    5ad6:	28 2f       	mov	r18, r24
    5ad8:	88 0f       	add	r24, r24
    5ada:	33 0b       	sbc	r19, r19
    5adc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ade:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ae0:	fc 01       	movw	r30, r24
    5ae2:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ae4:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ae6:	b9 01       	movw	r22, r18
    5ae8:	0e 94 ee 55 	call	0xabdc	; 0xabdc <_ZN7TwoWire17beginTransmissionEi>
    5aec:	8b 85       	ldd	r24, Y+11	; 0x0b
    5aee:	9c 85       	ldd	r25, Y+12	; 0x0c
    5af0:	fc 01       	movw	r30, r24
    5af2:	85 8d       	ldd	r24, Z+29	; 0x1d
    5af4:	96 8d       	ldd	r25, Z+30	; 0x1e
    5af6:	fc 01       	movw	r30, r24
    5af8:	80 81       	ld	r24, Z
    5afa:	91 81       	ldd	r25, Z+1	; 0x01
    5afc:	fc 01       	movw	r30, r24
    5afe:	20 81       	ld	r18, Z
    5b00:	31 81       	ldd	r19, Z+1	; 0x01
    5b02:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b04:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b06:	fc 01       	movw	r30, r24
    5b08:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b0a:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b0c:	60 e4       	ldi	r22, 0x40	; 64
    5b0e:	f9 01       	movw	r30, r18
    5b10:	19 95       	eicall
    5b12:	81 e0       	ldi	r24, 0x01	; 1
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	9e 83       	std	Y+6, r25	; 0x06
    5b18:	8d 83       	std	Y+5, r24	; 0x05
    5b1a:	89 81       	ldd	r24, Y+1	; 0x01
    5b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b1e:	9c 01       	movw	r18, r24
    5b20:	21 50       	subi	r18, 0x01	; 1
    5b22:	31 09       	sbc	r19, r1
    5b24:	3a 83       	std	Y+2, r19	; 0x02
    5b26:	29 83       	std	Y+1, r18	; 0x01
    5b28:	21 e0       	ldi	r18, 0x01	; 1
    5b2a:	89 2b       	or	r24, r25
    5b2c:	09 f4       	brne	.+2      	; 0x5b30 <_ZN16Adafruit_SSD13067displayEv+0x174>
    5b2e:	20 e0       	ldi	r18, 0x00	; 0
    5b30:	22 23       	and	r18, r18
    5b32:	09 f4       	brne	.+2      	; 0x5b36 <_ZN16Adafruit_SSD13067displayEv+0x17a>
    5b34:	53 c0       	rjmp	.+166    	; 0x5bdc <_ZN16Adafruit_SSD13067displayEv+0x220>
    5b36:	8d 81       	ldd	r24, Y+5	; 0x05
    5b38:	9e 81       	ldd	r25, Y+6	; 0x06
    5b3a:	80 97       	sbiw	r24, 0x20	; 32
    5b3c:	68 f1       	brcs	.+90     	; 0x5b98 <_ZN16Adafruit_SSD13067displayEv+0x1dc>
    5b3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b40:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b42:	fc 01       	movw	r30, r24
    5b44:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b46:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b48:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>
    5b4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b50:	fc 01       	movw	r30, r24
    5b52:	81 a1       	ldd	r24, Z+33	; 0x21
    5b54:	28 2f       	mov	r18, r24
    5b56:	88 0f       	add	r24, r24
    5b58:	33 0b       	sbc	r19, r19
    5b5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b5e:	fc 01       	movw	r30, r24
    5b60:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b62:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b64:	b9 01       	movw	r22, r18
    5b66:	0e 94 ee 55 	call	0xabdc	; 0xabdc <_ZN7TwoWire17beginTransmissionEi>
    5b6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b6e:	fc 01       	movw	r30, r24
    5b70:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b72:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b74:	fc 01       	movw	r30, r24
    5b76:	80 81       	ld	r24, Z
    5b78:	91 81       	ldd	r25, Z+1	; 0x01
    5b7a:	fc 01       	movw	r30, r24
    5b7c:	20 81       	ld	r18, Z
    5b7e:	31 81       	ldd	r19, Z+1	; 0x01
    5b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b82:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b84:	fc 01       	movw	r30, r24
    5b86:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b88:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b8a:	60 e4       	ldi	r22, 0x40	; 64
    5b8c:	f9 01       	movw	r30, r18
    5b8e:	19 95       	eicall
    5b90:	81 e0       	ldi	r24, 0x01	; 1
    5b92:	90 e0       	ldi	r25, 0x00	; 0
    5b94:	9e 83       	std	Y+6, r25	; 0x06
    5b96:	8d 83       	std	Y+5, r24	; 0x05
    5b98:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b9c:	fc 01       	movw	r30, r24
    5b9e:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ba0:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	80 81       	ld	r24, Z
    5ba6:	91 81       	ldd	r25, Z+1	; 0x01
    5ba8:	fc 01       	movw	r30, r24
    5baa:	20 81       	ld	r18, Z
    5bac:	31 81       	ldd	r19, Z+1	; 0x01
    5bae:	8b 81       	ldd	r24, Y+3	; 0x03
    5bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    5bb2:	ac 01       	movw	r20, r24
    5bb4:	4f 5f       	subi	r20, 0xFF	; 255
    5bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    5bb8:	5c 83       	std	Y+4, r21	; 0x04
    5bba:	4b 83       	std	Y+3, r20	; 0x03
    5bbc:	fc 01       	movw	r30, r24
    5bbe:	40 81       	ld	r20, Z
    5bc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bc4:	fc 01       	movw	r30, r24
    5bc6:	85 8d       	ldd	r24, Z+29	; 0x1d
    5bc8:	96 8d       	ldd	r25, Z+30	; 0x1e
    5bca:	64 2f       	mov	r22, r20
    5bcc:	f9 01       	movw	r30, r18
    5bce:	19 95       	eicall
    5bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    5bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    5bd4:	01 96       	adiw	r24, 0x01	; 1
    5bd6:	9e 83       	std	Y+6, r25	; 0x06
    5bd8:	8d 83       	std	Y+5, r24	; 0x05
    5bda:	9f cf       	rjmp	.-194    	; 0x5b1a <_ZN16Adafruit_SSD13067displayEv+0x15e>
    5bdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bde:	9c 85       	ldd	r25, Y+12	; 0x0c
    5be0:	fc 01       	movw	r30, r24
    5be2:	85 8d       	ldd	r24, Z+29	; 0x1d
    5be4:	96 8d       	ldd	r25, Z+30	; 0x1e
    5be6:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>
    5bea:	9c c0       	rjmp	.+312    	; 0x5d24 <_ZN16Adafruit_SSD13067displayEv+0x368>
    5bec:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bee:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bf0:	fc 01       	movw	r30, r24
    5bf2:	85 a5       	ldd	r24, Z+45	; 0x2d
    5bf4:	96 a5       	ldd	r25, Z+46	; 0x2e
    5bf6:	2b 85       	ldd	r18, Y+11	; 0x0b
    5bf8:	3c 85       	ldd	r19, Y+12	; 0x0c
    5bfa:	f9 01       	movw	r30, r18
    5bfc:	25 a5       	ldd	r18, Z+45	; 0x2d
    5bfe:	36 a5       	ldd	r19, Z+46	; 0x2e
    5c00:	f9 01       	movw	r30, r18
    5c02:	40 81       	ld	r20, Z
    5c04:	2b 85       	ldd	r18, Y+11	; 0x0b
    5c06:	3c 85       	ldd	r19, Y+12	; 0x0c
    5c08:	f9 01       	movw	r30, r18
    5c0a:	23 a9       	ldd	r18, Z+51	; 0x33
    5c0c:	24 2b       	or	r18, r20
    5c0e:	fc 01       	movw	r30, r24
    5c10:	20 83       	st	Z, r18
    5c12:	89 81       	ldd	r24, Y+1	; 0x01
    5c14:	9a 81       	ldd	r25, Y+2	; 0x02
    5c16:	9c 01       	movw	r18, r24
    5c18:	21 50       	subi	r18, 0x01	; 1
    5c1a:	31 09       	sbc	r19, r1
    5c1c:	3a 83       	std	Y+2, r19	; 0x02
    5c1e:	29 83       	std	Y+1, r18	; 0x01
    5c20:	21 e0       	ldi	r18, 0x01	; 1
    5c22:	89 2b       	or	r24, r25
    5c24:	09 f4       	brne	.+2      	; 0x5c28 <_ZN16Adafruit_SSD13067displayEv+0x26c>
    5c26:	20 e0       	ldi	r18, 0x00	; 0
    5c28:	22 23       	and	r18, r18
    5c2a:	09 f4       	brne	.+2      	; 0x5c2e <_ZN16Adafruit_SSD13067displayEv+0x272>
    5c2c:	7b c0       	rjmp	.+246    	; 0x5d24 <_ZN16Adafruit_SSD13067displayEv+0x368>
    5c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    5c30:	9c 81       	ldd	r25, Y+4	; 0x04
    5c32:	9c 01       	movw	r18, r24
    5c34:	2f 5f       	subi	r18, 0xFF	; 255
    5c36:	3f 4f       	sbci	r19, 0xFF	; 255
    5c38:	3c 83       	std	Y+4, r19	; 0x04
    5c3a:	2b 83       	std	Y+3, r18	; 0x03
    5c3c:	fc 01       	movw	r30, r24
    5c3e:	20 81       	ld	r18, Z
    5c40:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c42:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c44:	98 87       	std	Y+8, r25	; 0x08
    5c46:	8f 83       	std	Y+7, r24	; 0x07
    5c48:	29 87       	std	Y+9, r18	; 0x09
    5c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    5c4c:	98 85       	ldd	r25, Y+8	; 0x08
    5c4e:	fc 01       	movw	r30, r24
    5c50:	83 8d       	ldd	r24, Z+27	; 0x1b
    5c52:	94 8d       	ldd	r25, Z+28	; 0x1c
    5c54:	89 2b       	or	r24, r25
    5c56:	21 f0       	breq	.+8      	; 0x5c60 <_ZN16Adafruit_SSD13067displayEv+0x2a4>
    5c58:	89 85       	ldd	r24, Y+9	; 0x09
    5c5a:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    5c5e:	d9 cf       	rjmp	.-78     	; 0x5c12 <_ZN16Adafruit_SSD13067displayEv+0x256>
    5c60:	80 e8       	ldi	r24, 0x80	; 128
    5c62:	8a 87       	std	Y+10, r24	; 0x0a
    5c64:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c66:	88 23       	and	r24, r24
    5c68:	a1 f2       	breq	.-88     	; 0x5c12 <_ZN16Adafruit_SSD13067displayEv+0x256>
    5c6a:	99 85       	ldd	r25, Y+9	; 0x09
    5c6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c6e:	89 23       	and	r24, r25
    5c70:	88 23       	and	r24, r24
    5c72:	a1 f0       	breq	.+40     	; 0x5c9c <_ZN16Adafruit_SSD13067displayEv+0x2e0>
    5c74:	8f 81       	ldd	r24, Y+7	; 0x07
    5c76:	98 85       	ldd	r25, Y+8	; 0x08
    5c78:	fc 01       	movw	r30, r24
    5c7a:	81 a5       	ldd	r24, Z+41	; 0x29
    5c7c:	92 a5       	ldd	r25, Z+42	; 0x2a
    5c7e:	2f 81       	ldd	r18, Y+7	; 0x07
    5c80:	38 85       	ldd	r19, Y+8	; 0x08
    5c82:	f9 01       	movw	r30, r18
    5c84:	21 a5       	ldd	r18, Z+41	; 0x29
    5c86:	32 a5       	ldd	r19, Z+42	; 0x2a
    5c88:	f9 01       	movw	r30, r18
    5c8a:	40 81       	ld	r20, Z
    5c8c:	2f 81       	ldd	r18, Y+7	; 0x07
    5c8e:	38 85       	ldd	r19, Y+8	; 0x08
    5c90:	f9 01       	movw	r30, r18
    5c92:	21 a9       	ldd	r18, Z+49	; 0x31
    5c94:	24 2b       	or	r18, r20
    5c96:	fc 01       	movw	r30, r24
    5c98:	20 83       	st	Z, r18
    5c9a:	15 c0       	rjmp	.+42     	; 0x5cc6 <_ZN16Adafruit_SSD13067displayEv+0x30a>
    5c9c:	8f 81       	ldd	r24, Y+7	; 0x07
    5c9e:	98 85       	ldd	r25, Y+8	; 0x08
    5ca0:	fc 01       	movw	r30, r24
    5ca2:	81 a5       	ldd	r24, Z+41	; 0x29
    5ca4:	92 a5       	ldd	r25, Z+42	; 0x2a
    5ca6:	2f 81       	ldd	r18, Y+7	; 0x07
    5ca8:	38 85       	ldd	r19, Y+8	; 0x08
    5caa:	f9 01       	movw	r30, r18
    5cac:	21 a5       	ldd	r18, Z+41	; 0x29
    5cae:	32 a5       	ldd	r19, Z+42	; 0x2a
    5cb0:	f9 01       	movw	r30, r18
    5cb2:	20 81       	ld	r18, Z
    5cb4:	42 2f       	mov	r20, r18
    5cb6:	2f 81       	ldd	r18, Y+7	; 0x07
    5cb8:	38 85       	ldd	r19, Y+8	; 0x08
    5cba:	f9 01       	movw	r30, r18
    5cbc:	21 a9       	ldd	r18, Z+49	; 0x31
    5cbe:	20 95       	com	r18
    5cc0:	24 23       	and	r18, r20
    5cc2:	fc 01       	movw	r30, r24
    5cc4:	20 83       	st	Z, r18
    5cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    5cc8:	98 85       	ldd	r25, Y+8	; 0x08
    5cca:	fc 01       	movw	r30, r24
    5ccc:	83 a5       	ldd	r24, Z+43	; 0x2b
    5cce:	94 a5       	ldd	r25, Z+44	; 0x2c
    5cd0:	2f 81       	ldd	r18, Y+7	; 0x07
    5cd2:	38 85       	ldd	r19, Y+8	; 0x08
    5cd4:	f9 01       	movw	r30, r18
    5cd6:	23 a5       	ldd	r18, Z+43	; 0x2b
    5cd8:	34 a5       	ldd	r19, Z+44	; 0x2c
    5cda:	f9 01       	movw	r30, r18
    5cdc:	40 81       	ld	r20, Z
    5cde:	2f 81       	ldd	r18, Y+7	; 0x07
    5ce0:	38 85       	ldd	r19, Y+8	; 0x08
    5ce2:	f9 01       	movw	r30, r18
    5ce4:	22 a9       	ldd	r18, Z+50	; 0x32
    5ce6:	24 2b       	or	r18, r20
    5ce8:	fc 01       	movw	r30, r24
    5cea:	20 83       	st	Z, r18
    5cec:	8f 81       	ldd	r24, Y+7	; 0x07
    5cee:	98 85       	ldd	r25, Y+8	; 0x08
    5cf0:	fc 01       	movw	r30, r24
    5cf2:	83 a5       	ldd	r24, Z+43	; 0x2b
    5cf4:	94 a5       	ldd	r25, Z+44	; 0x2c
    5cf6:	2f 81       	ldd	r18, Y+7	; 0x07
    5cf8:	38 85       	ldd	r19, Y+8	; 0x08
    5cfa:	f9 01       	movw	r30, r18
    5cfc:	23 a5       	ldd	r18, Z+43	; 0x2b
    5cfe:	34 a5       	ldd	r19, Z+44	; 0x2c
    5d00:	f9 01       	movw	r30, r18
    5d02:	20 81       	ld	r18, Z
    5d04:	42 2f       	mov	r20, r18
    5d06:	2f 81       	ldd	r18, Y+7	; 0x07
    5d08:	38 85       	ldd	r19, Y+8	; 0x08
    5d0a:	f9 01       	movw	r30, r18
    5d0c:	22 a9       	ldd	r18, Z+50	; 0x32
    5d0e:	20 95       	com	r18
    5d10:	24 23       	and	r18, r20
    5d12:	fc 01       	movw	r30, r24
    5d14:	20 83       	st	Z, r18
    5d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d18:	88 2f       	mov	r24, r24
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	95 95       	asr	r25
    5d1e:	87 95       	ror	r24
    5d20:	8a 87       	std	Y+10, r24	; 0x0a
    5d22:	a0 cf       	rjmp	.-192    	; 0x5c64 <_ZN16Adafruit_SSD13067displayEv+0x2a8>
    5d24:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d26:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d28:	fc 01       	movw	r30, r24
    5d2a:	85 8d       	ldd	r24, Z+29	; 0x1d
    5d2c:	96 8d       	ldd	r25, Z+30	; 0x1e
    5d2e:	89 2b       	or	r24, r25
    5d30:	91 f0       	breq	.+36     	; 0x5d56 <_ZN16Adafruit_SSD13067displayEv+0x39a>
    5d32:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d34:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d36:	fc 01       	movw	r30, r24
    5d38:	81 ad       	ldd	r24, Z+57	; 0x39
    5d3a:	92 ad       	ldd	r25, Z+58	; 0x3a
    5d3c:	a3 ad       	ldd	r26, Z+59	; 0x3b
    5d3e:	b4 ad       	ldd	r27, Z+60	; 0x3c
    5d40:	2b 85       	ldd	r18, Y+11	; 0x0b
    5d42:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d44:	f9 01       	movw	r30, r18
    5d46:	25 8d       	ldd	r18, Z+29	; 0x1d
    5d48:	36 8d       	ldd	r19, Z+30	; 0x1e
    5d4a:	ac 01       	movw	r20, r24
    5d4c:	bd 01       	movw	r22, r26
    5d4e:	c9 01       	movw	r24, r18
    5d50:	0e 94 01 55 	call	0xaa02	; 0xaa02 <_ZN7TwoWire8setClockEm>
    5d54:	1c c0       	rjmp	.+56     	; 0x5d8e <_ZN16Adafruit_SSD13067displayEv+0x3d2>
    5d56:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d58:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d5a:	fc 01       	movw	r30, r24
    5d5c:	87 a5       	ldd	r24, Z+47	; 0x2f
    5d5e:	90 a9       	ldd	r25, Z+48	; 0x30
    5d60:	2b 85       	ldd	r18, Y+11	; 0x0b
    5d62:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d64:	f9 01       	movw	r30, r18
    5d66:	27 a5       	ldd	r18, Z+47	; 0x2f
    5d68:	30 a9       	ldd	r19, Z+48	; 0x30
    5d6a:	f9 01       	movw	r30, r18
    5d6c:	40 81       	ld	r20, Z
    5d6e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5d70:	3c 85       	ldd	r19, Y+12	; 0x0c
    5d72:	f9 01       	movw	r30, r18
    5d74:	24 a9       	ldd	r18, Z+52	; 0x34
    5d76:	24 2b       	or	r18, r20
    5d78:	fc 01       	movw	r30, r24
    5d7a:	20 83       	st	Z, r18
    5d7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d80:	fc 01       	movw	r30, r24
    5d82:	83 8d       	ldd	r24, Z+27	; 0x1b
    5d84:	94 8d       	ldd	r25, Z+28	; 0x1c
    5d86:	89 2b       	or	r24, r25
    5d88:	11 f0       	breq	.+4      	; 0x5d8e <_ZN16Adafruit_SSD13067displayEv+0x3d2>
    5d8a:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN8SPIClass14endTransactionEv>
    5d8e:	00 00       	nop
    5d90:	2c 96       	adiw	r28, 0x0c	; 12
    5d92:	0f b6       	in	r0, 0x3f	; 63
    5d94:	f8 94       	cli
    5d96:	de bf       	out	0x3e, r29	; 62
    5d98:	0f be       	out	0x3f, r0	; 63
    5d9a:	cd bf       	out	0x3d, r28	; 61
    5d9c:	df 91       	pop	r29
    5d9e:	cf 91       	pop	r28
    5da0:	08 95       	ret

00005da2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    5da2:	cf 93       	push	r28
    5da4:	df 93       	push	r29
    5da6:	00 d0       	rcall	.+0      	; 0x5da8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x6>
    5da8:	cd b7       	in	r28, 0x3d	; 61
    5daa:	de b7       	in	r29, 0x3e	; 62
    5dac:	9a 83       	std	Y+2, r25	; 0x02
    5dae:	89 83       	std	Y+1, r24	; 0x01
    5db0:	6b 83       	std	Y+3, r22	; 0x03
  TRANSACTION_START
    5db2:	89 81       	ldd	r24, Y+1	; 0x01
    5db4:	9a 81       	ldd	r25, Y+2	; 0x02
    5db6:	fc 01       	movw	r30, r24
    5db8:	85 8d       	ldd	r24, Z+29	; 0x1d
    5dba:	96 8d       	ldd	r25, Z+30	; 0x1e
    5dbc:	89 2b       	or	r24, r25
    5dbe:	91 f0       	breq	.+36     	; 0x5de4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x42>
    5dc0:	89 81       	ldd	r24, Y+1	; 0x01
    5dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    5dc4:	fc 01       	movw	r30, r24
    5dc6:	85 a9       	ldd	r24, Z+53	; 0x35
    5dc8:	96 a9       	ldd	r25, Z+54	; 0x36
    5dca:	a7 a9       	ldd	r26, Z+55	; 0x37
    5dcc:	b0 ad       	ldd	r27, Z+56	; 0x38
    5dce:	29 81       	ldd	r18, Y+1	; 0x01
    5dd0:	3a 81       	ldd	r19, Y+2	; 0x02
    5dd2:	f9 01       	movw	r30, r18
    5dd4:	25 8d       	ldd	r18, Z+29	; 0x1d
    5dd6:	36 8d       	ldd	r19, Z+30	; 0x1e
    5dd8:	ac 01       	movw	r20, r24
    5dda:	bd 01       	movw	r22, r26
    5ddc:	c9 01       	movw	r24, r18
    5dde:	0e 94 01 55 	call	0xaa02	; 0xaa02 <_ZN7TwoWire8setClockEm>
    5de2:	23 c0       	rjmp	.+70     	; 0x5e2a <_ZN16Adafruit_SSD130613invertDisplayEb+0x88>
    5de4:	89 81       	ldd	r24, Y+1	; 0x01
    5de6:	9a 81       	ldd	r25, Y+2	; 0x02
    5de8:	fc 01       	movw	r30, r24
    5dea:	83 8d       	ldd	r24, Z+27	; 0x1b
    5dec:	94 8d       	ldd	r25, Z+28	; 0x1c
    5dee:	89 2b       	or	r24, r25
    5df0:	39 f0       	breq	.+14     	; 0x5e00 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
    5df2:	89 81       	ldd	r24, Y+1	; 0x01
    5df4:	9a 81       	ldd	r25, Y+2	; 0x02
    5df6:	fc 01       	movw	r30, r24
    5df8:	86 ad       	ldd	r24, Z+62	; 0x3e
    5dfa:	97 ad       	ldd	r25, Z+63	; 0x3f
    5dfc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5e00:	89 81       	ldd	r24, Y+1	; 0x01
    5e02:	9a 81       	ldd	r25, Y+2	; 0x02
    5e04:	fc 01       	movw	r30, r24
    5e06:	87 a5       	ldd	r24, Z+47	; 0x2f
    5e08:	90 a9       	ldd	r25, Z+48	; 0x30
    5e0a:	29 81       	ldd	r18, Y+1	; 0x01
    5e0c:	3a 81       	ldd	r19, Y+2	; 0x02
    5e0e:	f9 01       	movw	r30, r18
    5e10:	27 a5       	ldd	r18, Z+47	; 0x2f
    5e12:	30 a9       	ldd	r19, Z+48	; 0x30
    5e14:	f9 01       	movw	r30, r18
    5e16:	20 81       	ld	r18, Z
    5e18:	42 2f       	mov	r20, r18
    5e1a:	29 81       	ldd	r18, Y+1	; 0x01
    5e1c:	3a 81       	ldd	r19, Y+2	; 0x02
    5e1e:	f9 01       	movw	r30, r18
    5e20:	24 a9       	ldd	r18, Z+52	; 0x34
    5e22:	20 95       	com	r18
    5e24:	24 23       	and	r18, r20
    5e26:	fc 01       	movw	r30, r24
    5e28:	20 83       	st	Z, r18
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    5e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e2c:	88 23       	and	r24, r24
    5e2e:	11 f0       	breq	.+4      	; 0x5e34 <_ZN16Adafruit_SSD130613invertDisplayEb+0x92>
    5e30:	27 ea       	ldi	r18, 0xA7	; 167
    5e32:	01 c0       	rjmp	.+2      	; 0x5e36 <_ZN16Adafruit_SSD130613invertDisplayEb+0x94>
    5e34:	26 ea       	ldi	r18, 0xA6	; 166
    5e36:	89 81       	ldd	r24, Y+1	; 0x01
    5e38:	9a 81       	ldd	r25, Y+2	; 0x02
    5e3a:	62 2f       	mov	r22, r18
    5e3c:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
    5e40:	89 81       	ldd	r24, Y+1	; 0x01
    5e42:	9a 81       	ldd	r25, Y+2	; 0x02
    5e44:	fc 01       	movw	r30, r24
    5e46:	85 8d       	ldd	r24, Z+29	; 0x1d
    5e48:	96 8d       	ldd	r25, Z+30	; 0x1e
    5e4a:	89 2b       	or	r24, r25
    5e4c:	91 f0       	breq	.+36     	; 0x5e72 <_ZN16Adafruit_SSD130613invertDisplayEb+0xd0>
    5e4e:	89 81       	ldd	r24, Y+1	; 0x01
    5e50:	9a 81       	ldd	r25, Y+2	; 0x02
    5e52:	fc 01       	movw	r30, r24
    5e54:	81 ad       	ldd	r24, Z+57	; 0x39
    5e56:	92 ad       	ldd	r25, Z+58	; 0x3a
    5e58:	a3 ad       	ldd	r26, Z+59	; 0x3b
    5e5a:	b4 ad       	ldd	r27, Z+60	; 0x3c
    5e5c:	29 81       	ldd	r18, Y+1	; 0x01
    5e5e:	3a 81       	ldd	r19, Y+2	; 0x02
    5e60:	f9 01       	movw	r30, r18
    5e62:	25 8d       	ldd	r18, Z+29	; 0x1d
    5e64:	36 8d       	ldd	r19, Z+30	; 0x1e
    5e66:	ac 01       	movw	r20, r24
    5e68:	bd 01       	movw	r22, r26
    5e6a:	c9 01       	movw	r24, r18
    5e6c:	0e 94 01 55 	call	0xaa02	; 0xaa02 <_ZN7TwoWire8setClockEm>
}
    5e70:	1c c0       	rjmp	.+56     	; 0x5eaa <_ZN16Adafruit_SSD130613invertDisplayEb+0x108>
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
    5e72:	89 81       	ldd	r24, Y+1	; 0x01
    5e74:	9a 81       	ldd	r25, Y+2	; 0x02
    5e76:	fc 01       	movw	r30, r24
    5e78:	87 a5       	ldd	r24, Z+47	; 0x2f
    5e7a:	90 a9       	ldd	r25, Z+48	; 0x30
    5e7c:	29 81       	ldd	r18, Y+1	; 0x01
    5e7e:	3a 81       	ldd	r19, Y+2	; 0x02
    5e80:	f9 01       	movw	r30, r18
    5e82:	27 a5       	ldd	r18, Z+47	; 0x2f
    5e84:	30 a9       	ldd	r19, Z+48	; 0x30
    5e86:	f9 01       	movw	r30, r18
    5e88:	40 81       	ld	r20, Z
    5e8a:	29 81       	ldd	r18, Y+1	; 0x01
    5e8c:	3a 81       	ldd	r19, Y+2	; 0x02
    5e8e:	f9 01       	movw	r30, r18
    5e90:	24 a9       	ldd	r18, Z+52	; 0x34
    5e92:	24 2b       	or	r18, r20
    5e94:	fc 01       	movw	r30, r24
    5e96:	20 83       	st	Z, r18
    5e98:	89 81       	ldd	r24, Y+1	; 0x01
    5e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e9c:	fc 01       	movw	r30, r24
    5e9e:	83 8d       	ldd	r24, Z+27	; 0x1b
    5ea0:	94 8d       	ldd	r25, Z+28	; 0x1c
    5ea2:	89 2b       	or	r24, r25
    5ea4:	11 f0       	breq	.+4      	; 0x5eaa <_ZN16Adafruit_SSD130613invertDisplayEb+0x108>
    5ea6:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN8SPIClass14endTransactionEv>
}
    5eaa:	00 00       	nop
    5eac:	0f 90       	pop	r0
    5eae:	0f 90       	pop	r0
    5eb0:	0f 90       	pop	r0
    5eb2:	df 91       	pop	r29
    5eb4:	cf 91       	pop	r28
    5eb6:	08 95       	ret

00005eb8 <_ZN13InterruptLockC1Ev>:
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    5eb8:	cf 93       	push	r28
    5eba:	df 93       	push	r29
    5ebc:	1f 92       	push	r1
    5ebe:	1f 92       	push	r1
    5ec0:	cd b7       	in	r28, 0x3d	; 61
    5ec2:	de b7       	in	r29, 0x3e	; 62
    5ec4:	9a 83       	std	Y+2, r25	; 0x02
    5ec6:	89 83       	std	Y+1, r24	; 0x01
    5ec8:	f8 94       	cli
    5eca:	00 00       	nop
    5ecc:	0f 90       	pop	r0
    5ece:	0f 90       	pop	r0
    5ed0:	df 91       	pop	r29
    5ed2:	cf 91       	pop	r28
    5ed4:	08 95       	ret

00005ed6 <_ZN13InterruptLockD1Ev>:
    5ed6:	cf 93       	push	r28
    5ed8:	df 93       	push	r29
    5eda:	1f 92       	push	r1
    5edc:	1f 92       	push	r1
    5ede:	cd b7       	in	r28, 0x3d	; 61
    5ee0:	de b7       	in	r29, 0x3e	; 62
    5ee2:	9a 83       	std	Y+2, r25	; 0x02
    5ee4:	89 83       	std	Y+1, r24	; 0x01
    5ee6:	78 94       	sei
    5ee8:	00 00       	nop
    5eea:	0f 90       	pop	r0
    5eec:	0f 90       	pop	r0
    5eee:	df 91       	pop	r29
    5ef0:	cf 91       	pop	r28
    5ef2:	08 95       	ret

00005ef4 <_ZN3DHTC1Ehhh>:
    5ef4:	cf 93       	push	r28
    5ef6:	df 93       	push	r29
    5ef8:	cd b7       	in	r28, 0x3d	; 61
    5efa:	de b7       	in	r29, 0x3e	; 62
    5efc:	2b 97       	sbiw	r28, 0x0b	; 11
    5efe:	0f b6       	in	r0, 0x3f	; 63
    5f00:	f8 94       	cli
    5f02:	de bf       	out	0x3e, r29	; 62
    5f04:	0f be       	out	0x3f, r0	; 63
    5f06:	cd bf       	out	0x3d, r28	; 61
    5f08:	98 87       	std	Y+8, r25	; 0x08
    5f0a:	8f 83       	std	Y+7, r24	; 0x07
    5f0c:	69 87       	std	Y+9, r22	; 0x09
    5f0e:	4a 87       	std	Y+10, r20	; 0x0a
    5f10:	2b 87       	std	Y+11, r18	; 0x0b
    5f12:	8f 81       	ldd	r24, Y+7	; 0x07
    5f14:	98 85       	ldd	r25, Y+8	; 0x08
    5f16:	29 85       	ldd	r18, Y+9	; 0x09
    5f18:	fc 01       	movw	r30, r24
    5f1a:	25 83       	std	Z+5, r18	; 0x05
    5f1c:	8f 81       	ldd	r24, Y+7	; 0x07
    5f1e:	98 85       	ldd	r25, Y+8	; 0x08
    5f20:	2a 85       	ldd	r18, Y+10	; 0x0a
    5f22:	fc 01       	movw	r30, r24
    5f24:	26 83       	std	Z+6, r18	; 0x06
    5f26:	89 85       	ldd	r24, Y+9	; 0x09
    5f28:	88 2f       	mov	r24, r24
    5f2a:	90 e0       	ldi	r25, 0x00	; 0
    5f2c:	87 55       	subi	r24, 0x57	; 87
    5f2e:	94 4f       	sbci	r25, 0xF4	; 244
    5f30:	9a 83       	std	Y+2, r25	; 0x02
    5f32:	89 83       	std	Y+1, r24	; 0x01
    5f34:	89 81       	ldd	r24, Y+1	; 0x01
    5f36:	9a 81       	ldd	r25, Y+2	; 0x02
    5f38:	fc 01       	movw	r30, r24
    5f3a:	84 91       	lpm	r24, Z
    5f3c:	8b 83       	std	Y+3, r24	; 0x03
    5f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    5f40:	98 85       	ldd	r25, Y+8	; 0x08
    5f42:	2b 81       	ldd	r18, Y+3	; 0x03
    5f44:	fc 01       	movw	r30, r24
    5f46:	27 83       	std	Z+7, r18	; 0x07
    5f48:	89 85       	ldd	r24, Y+9	; 0x09
    5f4a:	88 2f       	mov	r24, r24
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	81 51       	subi	r24, 0x11	; 17
    5f50:	94 4f       	sbci	r25, 0xF4	; 244
    5f52:	9d 83       	std	Y+5, r25	; 0x05
    5f54:	8c 83       	std	Y+4, r24	; 0x04
    5f56:	8c 81       	ldd	r24, Y+4	; 0x04
    5f58:	9d 81       	ldd	r25, Y+5	; 0x05
    5f5a:	fc 01       	movw	r30, r24
    5f5c:	84 91       	lpm	r24, Z
    5f5e:	8e 83       	std	Y+6, r24	; 0x06
    5f60:	8f 81       	ldd	r24, Y+7	; 0x07
    5f62:	98 85       	ldd	r25, Y+8	; 0x08
    5f64:	2e 81       	ldd	r18, Y+6	; 0x06
    5f66:	fc 01       	movw	r30, r24
    5f68:	20 87       	std	Z+8, r18	; 0x08
    5f6a:	2f 81       	ldd	r18, Y+7	; 0x07
    5f6c:	38 85       	ldd	r19, Y+8	; 0x08
    5f6e:	80 e8       	ldi	r24, 0x80	; 128
    5f70:	9e e3       	ldi	r25, 0x3E	; 62
    5f72:	a0 e0       	ldi	r26, 0x00	; 0
    5f74:	b0 e0       	ldi	r27, 0x00	; 0
    5f76:	f9 01       	movw	r30, r18
    5f78:	85 87       	std	Z+13, r24	; 0x0d
    5f7a:	96 87       	std	Z+14, r25	; 0x0e
    5f7c:	a7 87       	std	Z+15, r26	; 0x0f
    5f7e:	b0 8b       	std	Z+16, r27	; 0x10
    5f80:	00 00       	nop
    5f82:	2b 96       	adiw	r28, 0x0b	; 11
    5f84:	0f b6       	in	r0, 0x3f	; 63
    5f86:	f8 94       	cli
    5f88:	de bf       	out	0x3e, r29	; 62
    5f8a:	0f be       	out	0x3f, r0	; 63
    5f8c:	cd bf       	out	0x3d, r28	; 61
    5f8e:	df 91       	pop	r29
    5f90:	cf 91       	pop	r28
    5f92:	08 95       	ret

00005f94 <_ZN3DHT5beginEh>:
    5f94:	cf 93       	push	r28
    5f96:	df 93       	push	r29
    5f98:	00 d0       	rcall	.+0      	; 0x5f9a <_ZN3DHT5beginEh+0x6>
    5f9a:	cd b7       	in	r28, 0x3d	; 61
    5f9c:	de b7       	in	r29, 0x3e	; 62
    5f9e:	9a 83       	std	Y+2, r25	; 0x02
    5fa0:	89 83       	std	Y+1, r24	; 0x01
    5fa2:	6b 83       	std	Y+3, r22	; 0x03
    5fa4:	89 81       	ldd	r24, Y+1	; 0x01
    5fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    5fa8:	fc 01       	movw	r30, r24
    5faa:	85 81       	ldd	r24, Z+5	; 0x05
    5fac:	62 e0       	ldi	r22, 0x02	; 2
    5fae:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    5fb2:	0e 94 7c 5e 	call	0xbcf8	; 0xbcf8 <millis>
    5fb6:	dc 01       	movw	r26, r24
    5fb8:	cb 01       	movw	r24, r22
    5fba:	80 5d       	subi	r24, 0xD0	; 208
    5fbc:	97 40       	sbci	r25, 0x07	; 7
    5fbe:	a1 09       	sbc	r26, r1
    5fc0:	b1 09       	sbc	r27, r1
    5fc2:	29 81       	ldd	r18, Y+1	; 0x01
    5fc4:	3a 81       	ldd	r19, Y+2	; 0x02
    5fc6:	f9 01       	movw	r30, r18
    5fc8:	81 87       	std	Z+9, r24	; 0x09
    5fca:	92 87       	std	Z+10, r25	; 0x0a
    5fcc:	a3 87       	std	Z+11, r26	; 0x0b
    5fce:	b4 87       	std	Z+12, r27	; 0x0c
    5fd0:	89 81       	ldd	r24, Y+1	; 0x01
    5fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    5fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    5fd6:	fc 01       	movw	r30, r24
    5fd8:	22 8b       	std	Z+18, r18	; 0x12
    5fda:	00 00       	nop
    5fdc:	0f 90       	pop	r0
    5fde:	0f 90       	pop	r0
    5fe0:	0f 90       	pop	r0
    5fe2:	df 91       	pop	r29
    5fe4:	cf 91       	pop	r28
    5fe6:	08 95       	ret

00005fe8 <_ZN3DHT15readTemperatureEbb>:
    5fe8:	cf 93       	push	r28
    5fea:	df 93       	push	r29
    5fec:	cd b7       	in	r28, 0x3d	; 61
    5fee:	de b7       	in	r29, 0x3e	; 62
    5ff0:	28 97       	sbiw	r28, 0x08	; 8
    5ff2:	0f b6       	in	r0, 0x3f	; 63
    5ff4:	f8 94       	cli
    5ff6:	de bf       	out	0x3e, r29	; 62
    5ff8:	0f be       	out	0x3f, r0	; 63
    5ffa:	cd bf       	out	0x3d, r28	; 61
    5ffc:	9e 83       	std	Y+6, r25	; 0x06
    5ffe:	8d 83       	std	Y+5, r24	; 0x05
    6000:	6f 83       	std	Y+7, r22	; 0x07
    6002:	48 87       	std	Y+8, r20	; 0x08
    6004:	80 e0       	ldi	r24, 0x00	; 0
    6006:	90 e0       	ldi	r25, 0x00	; 0
    6008:	a0 ec       	ldi	r26, 0xC0	; 192
    600a:	bf e7       	ldi	r27, 0x7F	; 127
    600c:	89 83       	std	Y+1, r24	; 0x01
    600e:	9a 83       	std	Y+2, r25	; 0x02
    6010:	ab 83       	std	Y+3, r26	; 0x03
    6012:	bc 83       	std	Y+4, r27	; 0x04
    6014:	8d 81       	ldd	r24, Y+5	; 0x05
    6016:	9e 81       	ldd	r25, Y+6	; 0x06
    6018:	68 85       	ldd	r22, Y+8	; 0x08
    601a:	1d d2       	rcall	.+1082   	; 0x6456 <_ZN3DHT4readEb>
    601c:	88 23       	and	r24, r24
    601e:	09 f4       	brne	.+2      	; 0x6022 <_ZN3DHT15readTemperatureEbb+0x3a>
    6020:	34 c1       	rjmp	.+616    	; 0x628a <_ZN3DHT15readTemperatureEbb+0x2a2>
    6022:	8d 81       	ldd	r24, Y+5	; 0x05
    6024:	9e 81       	ldd	r25, Y+6	; 0x06
    6026:	fc 01       	movw	r30, r24
    6028:	86 81       	ldd	r24, Z+6	; 0x06
    602a:	88 2f       	mov	r24, r24
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	8c 30       	cpi	r24, 0x0C	; 12
    6030:	91 05       	cpc	r25, r1
    6032:	09 f4       	brne	.+2      	; 0x6036 <_ZN3DHT15readTemperatureEbb+0x4e>
    6034:	72 c0       	rjmp	.+228    	; 0x611a <_ZN3DHT15readTemperatureEbb+0x132>
    6036:	8d 30       	cpi	r24, 0x0D	; 13
    6038:	91 05       	cpc	r25, r1
    603a:	1c f4       	brge	.+6      	; 0x6042 <_ZN3DHT15readTemperatureEbb+0x5a>
    603c:	0b 97       	sbiw	r24, 0x0b	; 11
    603e:	31 f0       	breq	.+12     	; 0x604c <_ZN3DHT15readTemperatureEbb+0x64>
    6040:	24 c1       	rjmp	.+584    	; 0x628a <_ZN3DHT15readTemperatureEbb+0x2a2>
    6042:	45 97       	sbiw	r24, 0x15	; 21
    6044:	02 97       	sbiw	r24, 0x02	; 2
    6046:	08 f0       	brcs	.+2      	; 0x604a <_ZN3DHT15readTemperatureEbb+0x62>
    6048:	20 c1       	rjmp	.+576    	; 0x628a <_ZN3DHT15readTemperatureEbb+0x2a2>
    604a:	c7 c0       	rjmp	.+398    	; 0x61da <_ZN3DHT15readTemperatureEbb+0x1f2>
    604c:	8d 81       	ldd	r24, Y+5	; 0x05
    604e:	9e 81       	ldd	r25, Y+6	; 0x06
    6050:	fc 01       	movw	r30, r24
    6052:	82 81       	ldd	r24, Z+2	; 0x02
    6054:	88 2f       	mov	r24, r24
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	a0 e0       	ldi	r26, 0x00	; 0
    605a:	b0 e0       	ldi	r27, 0x00	; 0
    605c:	bc 01       	movw	r22, r24
    605e:	cd 01       	movw	r24, r26
    6060:	0e 94 ef 58 	call	0xb1de	; 0xb1de <__floatunsisf>
    6064:	dc 01       	movw	r26, r24
    6066:	cb 01       	movw	r24, r22
    6068:	89 83       	std	Y+1, r24	; 0x01
    606a:	9a 83       	std	Y+2, r25	; 0x02
    606c:	ab 83       	std	Y+3, r26	; 0x03
    606e:	bc 83       	std	Y+4, r27	; 0x04
    6070:	8d 81       	ldd	r24, Y+5	; 0x05
    6072:	9e 81       	ldd	r25, Y+6	; 0x06
    6074:	fc 01       	movw	r30, r24
    6076:	83 81       	ldd	r24, Z+3	; 0x03
    6078:	88 23       	and	r24, r24
    607a:	84 f4       	brge	.+32     	; 0x609c <_ZN3DHT15readTemperatureEbb+0xb4>
    607c:	29 81       	ldd	r18, Y+1	; 0x01
    607e:	3a 81       	ldd	r19, Y+2	; 0x02
    6080:	4b 81       	ldd	r20, Y+3	; 0x03
    6082:	5c 81       	ldd	r21, Y+4	; 0x04
    6084:	60 e0       	ldi	r22, 0x00	; 0
    6086:	70 e0       	ldi	r23, 0x00	; 0
    6088:	80 e8       	ldi	r24, 0x80	; 128
    608a:	9f eb       	ldi	r25, 0xBF	; 191
    608c:	0e 94 f2 57 	call	0xafe4	; 0xafe4 <__subsf3>
    6090:	dc 01       	movw	r26, r24
    6092:	cb 01       	movw	r24, r22
    6094:	89 83       	std	Y+1, r24	; 0x01
    6096:	9a 83       	std	Y+2, r25	; 0x02
    6098:	ab 83       	std	Y+3, r26	; 0x03
    609a:	bc 83       	std	Y+4, r27	; 0x04
    609c:	8d 81       	ldd	r24, Y+5	; 0x05
    609e:	9e 81       	ldd	r25, Y+6	; 0x06
    60a0:	fc 01       	movw	r30, r24
    60a2:	83 81       	ldd	r24, Z+3	; 0x03
    60a4:	88 2f       	mov	r24, r24
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	8f 70       	andi	r24, 0x0F	; 15
    60aa:	99 27       	eor	r25, r25
    60ac:	09 2e       	mov	r0, r25
    60ae:	00 0c       	add	r0, r0
    60b0:	aa 0b       	sbc	r26, r26
    60b2:	bb 0b       	sbc	r27, r27
    60b4:	bc 01       	movw	r22, r24
    60b6:	cd 01       	movw	r24, r26
    60b8:	0e 94 f1 58 	call	0xb1e2	; 0xb1e2 <__floatsisf>
    60bc:	dc 01       	movw	r26, r24
    60be:	cb 01       	movw	r24, r22
    60c0:	2d ec       	ldi	r18, 0xCD	; 205
    60c2:	3c ec       	ldi	r19, 0xCC	; 204
    60c4:	4c ec       	ldi	r20, 0xCC	; 204
    60c6:	5d e3       	ldi	r21, 0x3D	; 61
    60c8:	bc 01       	movw	r22, r24
    60ca:	cd 01       	movw	r24, r26
    60cc:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__mulsf3>
    60d0:	dc 01       	movw	r26, r24
    60d2:	cb 01       	movw	r24, r22
    60d4:	9c 01       	movw	r18, r24
    60d6:	ad 01       	movw	r20, r26
    60d8:	69 81       	ldd	r22, Y+1	; 0x01
    60da:	7a 81       	ldd	r23, Y+2	; 0x02
    60dc:	8b 81       	ldd	r24, Y+3	; 0x03
    60de:	9c 81       	ldd	r25, Y+4	; 0x04
    60e0:	0e 94 f3 57 	call	0xafe6	; 0xafe6 <__addsf3>
    60e4:	dc 01       	movw	r26, r24
    60e6:	cb 01       	movw	r24, r22
    60e8:	89 83       	std	Y+1, r24	; 0x01
    60ea:	9a 83       	std	Y+2, r25	; 0x02
    60ec:	ab 83       	std	Y+3, r26	; 0x03
    60ee:	bc 83       	std	Y+4, r27	; 0x04
    60f0:	8f 81       	ldd	r24, Y+7	; 0x07
    60f2:	88 23       	and	r24, r24
    60f4:	09 f4       	brne	.+2      	; 0x60f8 <_ZN3DHT15readTemperatureEbb+0x110>
    60f6:	c4 c0       	rjmp	.+392    	; 0x6280 <_ZN3DHT15readTemperatureEbb+0x298>
    60f8:	89 81       	ldd	r24, Y+1	; 0x01
    60fa:	9a 81       	ldd	r25, Y+2	; 0x02
    60fc:	ab 81       	ldd	r26, Y+3	; 0x03
    60fe:	bc 81       	ldd	r27, Y+4	; 0x04
    6100:	2d 81       	ldd	r18, Y+5	; 0x05
    6102:	3e 81       	ldd	r19, Y+6	; 0x06
    6104:	ac 01       	movw	r20, r24
    6106:	bd 01       	movw	r22, r26
    6108:	c9 01       	movw	r24, r18
    610a:	ce d0       	rcall	.+412    	; 0x62a8 <_ZN3DHT11convertCtoFEf>
    610c:	dc 01       	movw	r26, r24
    610e:	cb 01       	movw	r24, r22
    6110:	89 83       	std	Y+1, r24	; 0x01
    6112:	9a 83       	std	Y+2, r25	; 0x02
    6114:	ab 83       	std	Y+3, r26	; 0x03
    6116:	bc 83       	std	Y+4, r27	; 0x04
    6118:	b3 c0       	rjmp	.+358    	; 0x6280 <_ZN3DHT15readTemperatureEbb+0x298>
    611a:	8d 81       	ldd	r24, Y+5	; 0x05
    611c:	9e 81       	ldd	r25, Y+6	; 0x06
    611e:	fc 01       	movw	r30, r24
    6120:	82 81       	ldd	r24, Z+2	; 0x02
    6122:	88 2f       	mov	r24, r24
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	a0 e0       	ldi	r26, 0x00	; 0
    6128:	b0 e0       	ldi	r27, 0x00	; 0
    612a:	bc 01       	movw	r22, r24
    612c:	cd 01       	movw	r24, r26
    612e:	0e 94 ef 58 	call	0xb1de	; 0xb1de <__floatunsisf>
    6132:	dc 01       	movw	r26, r24
    6134:	cb 01       	movw	r24, r22
    6136:	89 83       	std	Y+1, r24	; 0x01
    6138:	9a 83       	std	Y+2, r25	; 0x02
    613a:	ab 83       	std	Y+3, r26	; 0x03
    613c:	bc 83       	std	Y+4, r27	; 0x04
    613e:	8d 81       	ldd	r24, Y+5	; 0x05
    6140:	9e 81       	ldd	r25, Y+6	; 0x06
    6142:	fc 01       	movw	r30, r24
    6144:	83 81       	ldd	r24, Z+3	; 0x03
    6146:	88 2f       	mov	r24, r24
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	8f 70       	andi	r24, 0x0F	; 15
    614c:	99 27       	eor	r25, r25
    614e:	09 2e       	mov	r0, r25
    6150:	00 0c       	add	r0, r0
    6152:	aa 0b       	sbc	r26, r26
    6154:	bb 0b       	sbc	r27, r27
    6156:	bc 01       	movw	r22, r24
    6158:	cd 01       	movw	r24, r26
    615a:	0e 94 f1 58 	call	0xb1e2	; 0xb1e2 <__floatsisf>
    615e:	dc 01       	movw	r26, r24
    6160:	cb 01       	movw	r24, r22
    6162:	2d ec       	ldi	r18, 0xCD	; 205
    6164:	3c ec       	ldi	r19, 0xCC	; 204
    6166:	4c ec       	ldi	r20, 0xCC	; 204
    6168:	5d e3       	ldi	r21, 0x3D	; 61
    616a:	bc 01       	movw	r22, r24
    616c:	cd 01       	movw	r24, r26
    616e:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__mulsf3>
    6172:	dc 01       	movw	r26, r24
    6174:	cb 01       	movw	r24, r22
    6176:	9c 01       	movw	r18, r24
    6178:	ad 01       	movw	r20, r26
    617a:	69 81       	ldd	r22, Y+1	; 0x01
    617c:	7a 81       	ldd	r23, Y+2	; 0x02
    617e:	8b 81       	ldd	r24, Y+3	; 0x03
    6180:	9c 81       	ldd	r25, Y+4	; 0x04
    6182:	0e 94 f3 57 	call	0xafe6	; 0xafe6 <__addsf3>
    6186:	dc 01       	movw	r26, r24
    6188:	cb 01       	movw	r24, r22
    618a:	89 83       	std	Y+1, r24	; 0x01
    618c:	9a 83       	std	Y+2, r25	; 0x02
    618e:	ab 83       	std	Y+3, r26	; 0x03
    6190:	bc 83       	std	Y+4, r27	; 0x04
    6192:	8d 81       	ldd	r24, Y+5	; 0x05
    6194:	9e 81       	ldd	r25, Y+6	; 0x06
    6196:	fc 01       	movw	r30, r24
    6198:	82 81       	ldd	r24, Z+2	; 0x02
    619a:	88 23       	and	r24, r24
    619c:	4c f4       	brge	.+18     	; 0x61b0 <_ZN3DHT15readTemperatureEbb+0x1c8>
    619e:	89 81       	ldd	r24, Y+1	; 0x01
    61a0:	9a 81       	ldd	r25, Y+2	; 0x02
    61a2:	ab 81       	ldd	r26, Y+3	; 0x03
    61a4:	bc 81       	ldd	r27, Y+4	; 0x04
    61a6:	b0 58       	subi	r27, 0x80	; 128
    61a8:	89 83       	std	Y+1, r24	; 0x01
    61aa:	9a 83       	std	Y+2, r25	; 0x02
    61ac:	ab 83       	std	Y+3, r26	; 0x03
    61ae:	bc 83       	std	Y+4, r27	; 0x04
    61b0:	8f 81       	ldd	r24, Y+7	; 0x07
    61b2:	88 23       	and	r24, r24
    61b4:	09 f4       	brne	.+2      	; 0x61b8 <_ZN3DHT15readTemperatureEbb+0x1d0>
    61b6:	66 c0       	rjmp	.+204    	; 0x6284 <_ZN3DHT15readTemperatureEbb+0x29c>
    61b8:	89 81       	ldd	r24, Y+1	; 0x01
    61ba:	9a 81       	ldd	r25, Y+2	; 0x02
    61bc:	ab 81       	ldd	r26, Y+3	; 0x03
    61be:	bc 81       	ldd	r27, Y+4	; 0x04
    61c0:	2d 81       	ldd	r18, Y+5	; 0x05
    61c2:	3e 81       	ldd	r19, Y+6	; 0x06
    61c4:	ac 01       	movw	r20, r24
    61c6:	bd 01       	movw	r22, r26
    61c8:	c9 01       	movw	r24, r18
    61ca:	6e d0       	rcall	.+220    	; 0x62a8 <_ZN3DHT11convertCtoFEf>
    61cc:	dc 01       	movw	r26, r24
    61ce:	cb 01       	movw	r24, r22
    61d0:	89 83       	std	Y+1, r24	; 0x01
    61d2:	9a 83       	std	Y+2, r25	; 0x02
    61d4:	ab 83       	std	Y+3, r26	; 0x03
    61d6:	bc 83       	std	Y+4, r27	; 0x04
    61d8:	55 c0       	rjmp	.+170    	; 0x6284 <_ZN3DHT15readTemperatureEbb+0x29c>
    61da:	8d 81       	ldd	r24, Y+5	; 0x05
    61dc:	9e 81       	ldd	r25, Y+6	; 0x06
    61de:	fc 01       	movw	r30, r24
    61e0:	82 81       	ldd	r24, Z+2	; 0x02
    61e2:	88 2f       	mov	r24, r24
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	8f 77       	andi	r24, 0x7F	; 127
    61e8:	99 27       	eor	r25, r25
    61ea:	38 2f       	mov	r19, r24
    61ec:	22 27       	eor	r18, r18
    61ee:	8d 81       	ldd	r24, Y+5	; 0x05
    61f0:	9e 81       	ldd	r25, Y+6	; 0x06
    61f2:	fc 01       	movw	r30, r24
    61f4:	83 81       	ldd	r24, Z+3	; 0x03
    61f6:	88 2f       	mov	r24, r24
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	82 2b       	or	r24, r18
    61fc:	93 2b       	or	r25, r19
    61fe:	cc 01       	movw	r24, r24
    6200:	a0 e0       	ldi	r26, 0x00	; 0
    6202:	b0 e0       	ldi	r27, 0x00	; 0
    6204:	bc 01       	movw	r22, r24
    6206:	cd 01       	movw	r24, r26
    6208:	0e 94 ef 58 	call	0xb1de	; 0xb1de <__floatunsisf>
    620c:	dc 01       	movw	r26, r24
    620e:	cb 01       	movw	r24, r22
    6210:	89 83       	std	Y+1, r24	; 0x01
    6212:	9a 83       	std	Y+2, r25	; 0x02
    6214:	ab 83       	std	Y+3, r26	; 0x03
    6216:	bc 83       	std	Y+4, r27	; 0x04
    6218:	2d ec       	ldi	r18, 0xCD	; 205
    621a:	3c ec       	ldi	r19, 0xCC	; 204
    621c:	4c ec       	ldi	r20, 0xCC	; 204
    621e:	5d e3       	ldi	r21, 0x3D	; 61
    6220:	69 81       	ldd	r22, Y+1	; 0x01
    6222:	7a 81       	ldd	r23, Y+2	; 0x02
    6224:	8b 81       	ldd	r24, Y+3	; 0x03
    6226:	9c 81       	ldd	r25, Y+4	; 0x04
    6228:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__mulsf3>
    622c:	dc 01       	movw	r26, r24
    622e:	cb 01       	movw	r24, r22
    6230:	89 83       	std	Y+1, r24	; 0x01
    6232:	9a 83       	std	Y+2, r25	; 0x02
    6234:	ab 83       	std	Y+3, r26	; 0x03
    6236:	bc 83       	std	Y+4, r27	; 0x04
    6238:	8d 81       	ldd	r24, Y+5	; 0x05
    623a:	9e 81       	ldd	r25, Y+6	; 0x06
    623c:	fc 01       	movw	r30, r24
    623e:	82 81       	ldd	r24, Z+2	; 0x02
    6240:	88 23       	and	r24, r24
    6242:	4c f4       	brge	.+18     	; 0x6256 <_ZN3DHT15readTemperatureEbb+0x26e>
    6244:	89 81       	ldd	r24, Y+1	; 0x01
    6246:	9a 81       	ldd	r25, Y+2	; 0x02
    6248:	ab 81       	ldd	r26, Y+3	; 0x03
    624a:	bc 81       	ldd	r27, Y+4	; 0x04
    624c:	b0 58       	subi	r27, 0x80	; 128
    624e:	89 83       	std	Y+1, r24	; 0x01
    6250:	9a 83       	std	Y+2, r25	; 0x02
    6252:	ab 83       	std	Y+3, r26	; 0x03
    6254:	bc 83       	std	Y+4, r27	; 0x04
    6256:	8f 81       	ldd	r24, Y+7	; 0x07
    6258:	88 23       	and	r24, r24
    625a:	b1 f0       	breq	.+44     	; 0x6288 <_ZN3DHT15readTemperatureEbb+0x2a0>
    625c:	89 81       	ldd	r24, Y+1	; 0x01
    625e:	9a 81       	ldd	r25, Y+2	; 0x02
    6260:	ab 81       	ldd	r26, Y+3	; 0x03
    6262:	bc 81       	ldd	r27, Y+4	; 0x04
    6264:	2d 81       	ldd	r18, Y+5	; 0x05
    6266:	3e 81       	ldd	r19, Y+6	; 0x06
    6268:	ac 01       	movw	r20, r24
    626a:	bd 01       	movw	r22, r26
    626c:	c9 01       	movw	r24, r18
    626e:	1c d0       	rcall	.+56     	; 0x62a8 <_ZN3DHT11convertCtoFEf>
    6270:	dc 01       	movw	r26, r24
    6272:	cb 01       	movw	r24, r22
    6274:	89 83       	std	Y+1, r24	; 0x01
    6276:	9a 83       	std	Y+2, r25	; 0x02
    6278:	ab 83       	std	Y+3, r26	; 0x03
    627a:	bc 83       	std	Y+4, r27	; 0x04
    627c:	00 00       	nop
    627e:	04 c0       	rjmp	.+8      	; 0x6288 <_ZN3DHT15readTemperatureEbb+0x2a0>
    6280:	00 00       	nop
    6282:	03 c0       	rjmp	.+6      	; 0x628a <_ZN3DHT15readTemperatureEbb+0x2a2>
    6284:	00 00       	nop
    6286:	01 c0       	rjmp	.+2      	; 0x628a <_ZN3DHT15readTemperatureEbb+0x2a2>
    6288:	00 00       	nop
    628a:	89 81       	ldd	r24, Y+1	; 0x01
    628c:	9a 81       	ldd	r25, Y+2	; 0x02
    628e:	ab 81       	ldd	r26, Y+3	; 0x03
    6290:	bc 81       	ldd	r27, Y+4	; 0x04
    6292:	bc 01       	movw	r22, r24
    6294:	cd 01       	movw	r24, r26
    6296:	28 96       	adiw	r28, 0x08	; 8
    6298:	0f b6       	in	r0, 0x3f	; 63
    629a:	f8 94       	cli
    629c:	de bf       	out	0x3e, r29	; 62
    629e:	0f be       	out	0x3f, r0	; 63
    62a0:	cd bf       	out	0x3d, r28	; 61
    62a2:	df 91       	pop	r29
    62a4:	cf 91       	pop	r28
    62a6:	08 95       	ret

000062a8 <_ZN3DHT11convertCtoFEf>:
    62a8:	cf 93       	push	r28
    62aa:	df 93       	push	r29
    62ac:	00 d0       	rcall	.+0      	; 0x62ae <_ZN3DHT11convertCtoFEf+0x6>
    62ae:	00 d0       	rcall	.+0      	; 0x62b0 <_ZN3DHT11convertCtoFEf+0x8>
    62b0:	cd b7       	in	r28, 0x3d	; 61
    62b2:	de b7       	in	r29, 0x3e	; 62
    62b4:	9a 83       	std	Y+2, r25	; 0x02
    62b6:	89 83       	std	Y+1, r24	; 0x01
    62b8:	4b 83       	std	Y+3, r20	; 0x03
    62ba:	5c 83       	std	Y+4, r21	; 0x04
    62bc:	6d 83       	std	Y+5, r22	; 0x05
    62be:	7e 83       	std	Y+6, r23	; 0x06
    62c0:	26 e6       	ldi	r18, 0x66	; 102
    62c2:	36 e6       	ldi	r19, 0x66	; 102
    62c4:	46 ee       	ldi	r20, 0xE6	; 230
    62c6:	5f e3       	ldi	r21, 0x3F	; 63
    62c8:	6b 81       	ldd	r22, Y+3	; 0x03
    62ca:	7c 81       	ldd	r23, Y+4	; 0x04
    62cc:	8d 81       	ldd	r24, Y+5	; 0x05
    62ce:	9e 81       	ldd	r25, Y+6	; 0x06
    62d0:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__mulsf3>
    62d4:	dc 01       	movw	r26, r24
    62d6:	cb 01       	movw	r24, r22
    62d8:	20 e0       	ldi	r18, 0x00	; 0
    62da:	30 e0       	ldi	r19, 0x00	; 0
    62dc:	40 e0       	ldi	r20, 0x00	; 0
    62de:	52 e4       	ldi	r21, 0x42	; 66
    62e0:	bc 01       	movw	r22, r24
    62e2:	cd 01       	movw	r24, r26
    62e4:	0e 94 f3 57 	call	0xafe6	; 0xafe6 <__addsf3>
    62e8:	dc 01       	movw	r26, r24
    62ea:	cb 01       	movw	r24, r22
    62ec:	bc 01       	movw	r22, r24
    62ee:	cd 01       	movw	r24, r26
    62f0:	26 96       	adiw	r28, 0x06	; 6
    62f2:	0f b6       	in	r0, 0x3f	; 63
    62f4:	f8 94       	cli
    62f6:	de bf       	out	0x3e, r29	; 62
    62f8:	0f be       	out	0x3f, r0	; 63
    62fa:	cd bf       	out	0x3d, r28	; 61
    62fc:	df 91       	pop	r29
    62fe:	cf 91       	pop	r28
    6300:	08 95       	ret

00006302 <_ZN3DHT12readHumidityEb>:
    6302:	cf 92       	push	r12
    6304:	df 92       	push	r13
    6306:	ef 92       	push	r14
    6308:	ff 92       	push	r15
    630a:	cf 93       	push	r28
    630c:	df 93       	push	r29
    630e:	cd b7       	in	r28, 0x3d	; 61
    6310:	de b7       	in	r29, 0x3e	; 62
    6312:	27 97       	sbiw	r28, 0x07	; 7
    6314:	0f b6       	in	r0, 0x3f	; 63
    6316:	f8 94       	cli
    6318:	de bf       	out	0x3e, r29	; 62
    631a:	0f be       	out	0x3f, r0	; 63
    631c:	cd bf       	out	0x3d, r28	; 61
    631e:	9e 83       	std	Y+6, r25	; 0x06
    6320:	8d 83       	std	Y+5, r24	; 0x05
    6322:	6f 83       	std	Y+7, r22	; 0x07
    6324:	80 e0       	ldi	r24, 0x00	; 0
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	a0 ec       	ldi	r26, 0xC0	; 192
    632a:	bf e7       	ldi	r27, 0x7F	; 127
    632c:	89 83       	std	Y+1, r24	; 0x01
    632e:	9a 83       	std	Y+2, r25	; 0x02
    6330:	ab 83       	std	Y+3, r26	; 0x03
    6332:	bc 83       	std	Y+4, r27	; 0x04
    6334:	8d 81       	ldd	r24, Y+5	; 0x05
    6336:	9e 81       	ldd	r25, Y+6	; 0x06
    6338:	6f 81       	ldd	r22, Y+7	; 0x07
    633a:	8d d0       	rcall	.+282    	; 0x6456 <_ZN3DHT4readEb>
    633c:	88 23       	and	r24, r24
    633e:	09 f4       	brne	.+2      	; 0x6342 <_ZN3DHT12readHumidityEb+0x40>
    6340:	77 c0       	rjmp	.+238    	; 0x6430 <_ZN3DHT12readHumidityEb+0x12e>
    6342:	8d 81       	ldd	r24, Y+5	; 0x05
    6344:	9e 81       	ldd	r25, Y+6	; 0x06
    6346:	fc 01       	movw	r30, r24
    6348:	86 81       	ldd	r24, Z+6	; 0x06
    634a:	88 2f       	mov	r24, r24
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	8b 30       	cpi	r24, 0x0B	; 11
    6350:	91 05       	cpc	r25, r1
    6352:	0c f4       	brge	.+2      	; 0x6356 <_ZN3DHT12readHumidityEb+0x54>
    6354:	6d c0       	rjmp	.+218    	; 0x6430 <_ZN3DHT12readHumidityEb+0x12e>
    6356:	8d 30       	cpi	r24, 0x0D	; 13
    6358:	91 05       	cpc	r25, r1
    635a:	2c f0       	brlt	.+10     	; 0x6366 <_ZN3DHT12readHumidityEb+0x64>
    635c:	45 97       	sbiw	r24, 0x15	; 21
    635e:	02 97       	sbiw	r24, 0x02	; 2
    6360:	08 f0       	brcs	.+2      	; 0x6364 <_ZN3DHT12readHumidityEb+0x62>
    6362:	66 c0       	rjmp	.+204    	; 0x6430 <_ZN3DHT12readHumidityEb+0x12e>
    6364:	37 c0       	rjmp	.+110    	; 0x63d4 <_ZN3DHT12readHumidityEb+0xd2>
    6366:	8d 81       	ldd	r24, Y+5	; 0x05
    6368:	9e 81       	ldd	r25, Y+6	; 0x06
    636a:	fc 01       	movw	r30, r24
    636c:	80 81       	ld	r24, Z
    636e:	88 2f       	mov	r24, r24
    6370:	90 e0       	ldi	r25, 0x00	; 0
    6372:	09 2e       	mov	r0, r25
    6374:	00 0c       	add	r0, r0
    6376:	aa 0b       	sbc	r26, r26
    6378:	bb 0b       	sbc	r27, r27
    637a:	bc 01       	movw	r22, r24
    637c:	cd 01       	movw	r24, r26
    637e:	0e 94 f1 58 	call	0xb1e2	; 0xb1e2 <__floatsisf>
    6382:	6b 01       	movw	r12, r22
    6384:	7c 01       	movw	r14, r24
    6386:	8d 81       	ldd	r24, Y+5	; 0x05
    6388:	9e 81       	ldd	r25, Y+6	; 0x06
    638a:	fc 01       	movw	r30, r24
    638c:	81 81       	ldd	r24, Z+1	; 0x01
    638e:	88 2f       	mov	r24, r24
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	09 2e       	mov	r0, r25
    6394:	00 0c       	add	r0, r0
    6396:	aa 0b       	sbc	r26, r26
    6398:	bb 0b       	sbc	r27, r27
    639a:	bc 01       	movw	r22, r24
    639c:	cd 01       	movw	r24, r26
    639e:	0e 94 f1 58 	call	0xb1e2	; 0xb1e2 <__floatsisf>
    63a2:	dc 01       	movw	r26, r24
    63a4:	cb 01       	movw	r24, r22
    63a6:	2d ec       	ldi	r18, 0xCD	; 205
    63a8:	3c ec       	ldi	r19, 0xCC	; 204
    63aa:	4c ec       	ldi	r20, 0xCC	; 204
    63ac:	5d e3       	ldi	r21, 0x3D	; 61
    63ae:	bc 01       	movw	r22, r24
    63b0:	cd 01       	movw	r24, r26
    63b2:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__mulsf3>
    63b6:	dc 01       	movw	r26, r24
    63b8:	cb 01       	movw	r24, r22
    63ba:	9c 01       	movw	r18, r24
    63bc:	ad 01       	movw	r20, r26
    63be:	c7 01       	movw	r24, r14
    63c0:	b6 01       	movw	r22, r12
    63c2:	0e 94 f3 57 	call	0xafe6	; 0xafe6 <__addsf3>
    63c6:	dc 01       	movw	r26, r24
    63c8:	cb 01       	movw	r24, r22
    63ca:	89 83       	std	Y+1, r24	; 0x01
    63cc:	9a 83       	std	Y+2, r25	; 0x02
    63ce:	ab 83       	std	Y+3, r26	; 0x03
    63d0:	bc 83       	std	Y+4, r27	; 0x04
    63d2:	2e c0       	rjmp	.+92     	; 0x6430 <_ZN3DHT12readHumidityEb+0x12e>
    63d4:	8d 81       	ldd	r24, Y+5	; 0x05
    63d6:	9e 81       	ldd	r25, Y+6	; 0x06
    63d8:	fc 01       	movw	r30, r24
    63da:	80 81       	ld	r24, Z
    63dc:	88 2f       	mov	r24, r24
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	38 2f       	mov	r19, r24
    63e2:	22 27       	eor	r18, r18
    63e4:	8d 81       	ldd	r24, Y+5	; 0x05
    63e6:	9e 81       	ldd	r25, Y+6	; 0x06
    63e8:	fc 01       	movw	r30, r24
    63ea:	81 81       	ldd	r24, Z+1	; 0x01
    63ec:	88 2f       	mov	r24, r24
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	82 2b       	or	r24, r18
    63f2:	93 2b       	or	r25, r19
    63f4:	cc 01       	movw	r24, r24
    63f6:	a0 e0       	ldi	r26, 0x00	; 0
    63f8:	b0 e0       	ldi	r27, 0x00	; 0
    63fa:	bc 01       	movw	r22, r24
    63fc:	cd 01       	movw	r24, r26
    63fe:	0e 94 ef 58 	call	0xb1de	; 0xb1de <__floatunsisf>
    6402:	dc 01       	movw	r26, r24
    6404:	cb 01       	movw	r24, r22
    6406:	89 83       	std	Y+1, r24	; 0x01
    6408:	9a 83       	std	Y+2, r25	; 0x02
    640a:	ab 83       	std	Y+3, r26	; 0x03
    640c:	bc 83       	std	Y+4, r27	; 0x04
    640e:	2d ec       	ldi	r18, 0xCD	; 205
    6410:	3c ec       	ldi	r19, 0xCC	; 204
    6412:	4c ec       	ldi	r20, 0xCC	; 204
    6414:	5d e3       	ldi	r21, 0x3D	; 61
    6416:	69 81       	ldd	r22, Y+1	; 0x01
    6418:	7a 81       	ldd	r23, Y+2	; 0x02
    641a:	8b 81       	ldd	r24, Y+3	; 0x03
    641c:	9c 81       	ldd	r25, Y+4	; 0x04
    641e:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__mulsf3>
    6422:	dc 01       	movw	r26, r24
    6424:	cb 01       	movw	r24, r22
    6426:	89 83       	std	Y+1, r24	; 0x01
    6428:	9a 83       	std	Y+2, r25	; 0x02
    642a:	ab 83       	std	Y+3, r26	; 0x03
    642c:	bc 83       	std	Y+4, r27	; 0x04
    642e:	00 00       	nop
    6430:	89 81       	ldd	r24, Y+1	; 0x01
    6432:	9a 81       	ldd	r25, Y+2	; 0x02
    6434:	ab 81       	ldd	r26, Y+3	; 0x03
    6436:	bc 81       	ldd	r27, Y+4	; 0x04
    6438:	bc 01       	movw	r22, r24
    643a:	cd 01       	movw	r24, r26
    643c:	27 96       	adiw	r28, 0x07	; 7
    643e:	0f b6       	in	r0, 0x3f	; 63
    6440:	f8 94       	cli
    6442:	de bf       	out	0x3e, r29	; 62
    6444:	0f be       	out	0x3f, r0	; 63
    6446:	cd bf       	out	0x3d, r28	; 61
    6448:	df 91       	pop	r29
    644a:	cf 91       	pop	r28
    644c:	ff 90       	pop	r15
    644e:	ef 90       	pop	r14
    6450:	df 90       	pop	r13
    6452:	cf 90       	pop	r12
    6454:	08 95       	ret

00006456 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    6456:	af 92       	push	r10
    6458:	bf 92       	push	r11
    645a:	cf 92       	push	r12
    645c:	df 92       	push	r13
    645e:	ff 92       	push	r15
    6460:	0f 93       	push	r16
    6462:	1f 93       	push	r17
    6464:	cf 93       	push	r28
    6466:	df 93       	push	r29
    6468:	cd b7       	in	r28, 0x3d	; 61
    646a:	de b7       	in	r29, 0x3e	; 62
    646c:	c4 55       	subi	r28, 0x54	; 84
    646e:	d1 40       	sbci	r29, 0x01	; 1
    6470:	0f b6       	in	r0, 0x3f	; 63
    6472:	f8 94       	cli
    6474:	de bf       	out	0x3e, r29	; 62
    6476:	0f be       	out	0x3f, r0	; 63
    6478:	cd bf       	out	0x3d, r28	; 61
    647a:	9e 01       	movw	r18, r28
    647c:	2e 5a       	subi	r18, 0xAE	; 174
    647e:	3e 4f       	sbci	r19, 0xFE	; 254
    6480:	f9 01       	movw	r30, r18
    6482:	91 83       	std	Z+1, r25	; 0x01
    6484:	80 83       	st	Z, r24
    6486:	ce 01       	movw	r24, r28
    6488:	8c 5a       	subi	r24, 0xAC	; 172
    648a:	9e 4f       	sbci	r25, 0xFE	; 254
    648c:	fc 01       	movw	r30, r24
    648e:	60 83       	st	Z, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    6490:	0e 94 7c 5e 	call	0xbcf8	; 0xbcf8 <millis>
    6494:	dc 01       	movw	r26, r24
    6496:	cb 01       	movw	r24, r22
    6498:	8d 83       	std	Y+5, r24	; 0x05
    649a:	9e 83       	std	Y+6, r25	; 0x06
    649c:	af 83       	std	Y+7, r26	; 0x07
    649e:	b8 87       	std	Y+8, r27	; 0x08
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    64a0:	ce 01       	movw	r24, r28
    64a2:	8c 5a       	subi	r24, 0xAC	; 172
    64a4:	9e 4f       	sbci	r25, 0xFE	; 254
    64a6:	fc 01       	movw	r30, r24
    64a8:	90 81       	ld	r25, Z
    64aa:	81 e0       	ldi	r24, 0x01	; 1
    64ac:	89 27       	eor	r24, r25
    64ae:	88 23       	and	r24, r24
    64b0:	29 f1       	breq	.+74     	; 0x64fc <_ZN3DHT4readEb+0xa6>
    64b2:	ce 01       	movw	r24, r28
    64b4:	8e 5a       	subi	r24, 0xAE	; 174
    64b6:	9e 4f       	sbci	r25, 0xFE	; 254
    64b8:	fc 01       	movw	r30, r24
    64ba:	80 81       	ld	r24, Z
    64bc:	91 81       	ldd	r25, Z+1	; 0x01
    64be:	fc 01       	movw	r30, r24
    64c0:	81 85       	ldd	r24, Z+9	; 0x09
    64c2:	92 85       	ldd	r25, Z+10	; 0x0a
    64c4:	a3 85       	ldd	r26, Z+11	; 0x0b
    64c6:	b4 85       	ldd	r27, Z+12	; 0x0c
    64c8:	2d 81       	ldd	r18, Y+5	; 0x05
    64ca:	3e 81       	ldd	r19, Y+6	; 0x06
    64cc:	4f 81       	ldd	r20, Y+7	; 0x07
    64ce:	58 85       	ldd	r21, Y+8	; 0x08
    64d0:	59 01       	movw	r10, r18
    64d2:	6a 01       	movw	r12, r20
    64d4:	a8 1a       	sub	r10, r24
    64d6:	b9 0a       	sbc	r11, r25
    64d8:	ca 0a       	sbc	r12, r26
    64da:	db 0a       	sbc	r13, r27
    64dc:	d6 01       	movw	r26, r12
    64de:	c5 01       	movw	r24, r10
    64e0:	80 3d       	cpi	r24, 0xD0	; 208
    64e2:	97 40       	sbci	r25, 0x07	; 7
    64e4:	a1 05       	cpc	r26, r1
    64e6:	b1 05       	cpc	r27, r1
    64e8:	48 f4       	brcc	.+18     	; 0x64fc <_ZN3DHT4readEb+0xa6>
    return _lastresult; // return last correct measurement
    64ea:	ce 01       	movw	r24, r28
    64ec:	8e 5a       	subi	r24, 0xAE	; 174
    64ee:	9e 4f       	sbci	r25, 0xFE	; 254
    64f0:	fc 01       	movw	r30, r24
    64f2:	80 81       	ld	r24, Z
    64f4:	91 81       	ldd	r25, Z+1	; 0x01
    64f6:	fc 01       	movw	r30, r24
    64f8:	f1 88       	ldd	r15, Z+17	; 0x11
    64fa:	5f c2       	rjmp	.+1214   	; 0x69ba <_ZN3DHT4readEb+0x564>
  }
  _lastreadtime = currenttime;
    64fc:	ce 01       	movw	r24, r28
    64fe:	8e 5a       	subi	r24, 0xAE	; 174
    6500:	9e 4f       	sbci	r25, 0xFE	; 254
    6502:	fc 01       	movw	r30, r24
    6504:	20 81       	ld	r18, Z
    6506:	31 81       	ldd	r19, Z+1	; 0x01
    6508:	8d 81       	ldd	r24, Y+5	; 0x05
    650a:	9e 81       	ldd	r25, Y+6	; 0x06
    650c:	af 81       	ldd	r26, Y+7	; 0x07
    650e:	b8 85       	ldd	r27, Y+8	; 0x08
    6510:	f9 01       	movw	r30, r18
    6512:	81 87       	std	Z+9, r24	; 0x09
    6514:	92 87       	std	Z+10, r25	; 0x0a
    6516:	a3 87       	std	Z+11, r26	; 0x0b
    6518:	b4 87       	std	Z+12, r27	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    651a:	ce 01       	movw	r24, r28
    651c:	8e 5a       	subi	r24, 0xAE	; 174
    651e:	9e 4f       	sbci	r25, 0xFE	; 254
    6520:	fc 01       	movw	r30, r24
    6522:	80 81       	ld	r24, Z
    6524:	91 81       	ldd	r25, Z+1	; 0x01
    6526:	fc 01       	movw	r30, r24
    6528:	14 82       	std	Z+4, r1	; 0x04
    652a:	ce 01       	movw	r24, r28
    652c:	8e 5a       	subi	r24, 0xAE	; 174
    652e:	9e 4f       	sbci	r25, 0xFE	; 254
    6530:	fc 01       	movw	r30, r24
    6532:	80 81       	ld	r24, Z
    6534:	91 81       	ldd	r25, Z+1	; 0x01
    6536:	fc 01       	movw	r30, r24
    6538:	24 81       	ldd	r18, Z+4	; 0x04
    653a:	ce 01       	movw	r24, r28
    653c:	8e 5a       	subi	r24, 0xAE	; 174
    653e:	9e 4f       	sbci	r25, 0xFE	; 254
    6540:	fc 01       	movw	r30, r24
    6542:	80 81       	ld	r24, Z
    6544:	91 81       	ldd	r25, Z+1	; 0x01
    6546:	fc 01       	movw	r30, r24
    6548:	23 83       	std	Z+3, r18	; 0x03
    654a:	ce 01       	movw	r24, r28
    654c:	8e 5a       	subi	r24, 0xAE	; 174
    654e:	9e 4f       	sbci	r25, 0xFE	; 254
    6550:	fc 01       	movw	r30, r24
    6552:	80 81       	ld	r24, Z
    6554:	91 81       	ldd	r25, Z+1	; 0x01
    6556:	fc 01       	movw	r30, r24
    6558:	23 81       	ldd	r18, Z+3	; 0x03
    655a:	ce 01       	movw	r24, r28
    655c:	8e 5a       	subi	r24, 0xAE	; 174
    655e:	9e 4f       	sbci	r25, 0xFE	; 254
    6560:	fc 01       	movw	r30, r24
    6562:	80 81       	ld	r24, Z
    6564:	91 81       	ldd	r25, Z+1	; 0x01
    6566:	fc 01       	movw	r30, r24
    6568:	22 83       	std	Z+2, r18	; 0x02
    656a:	ce 01       	movw	r24, r28
    656c:	8e 5a       	subi	r24, 0xAE	; 174
    656e:	9e 4f       	sbci	r25, 0xFE	; 254
    6570:	fc 01       	movw	r30, r24
    6572:	80 81       	ld	r24, Z
    6574:	91 81       	ldd	r25, Z+1	; 0x01
    6576:	fc 01       	movw	r30, r24
    6578:	22 81       	ldd	r18, Z+2	; 0x02
    657a:	ce 01       	movw	r24, r28
    657c:	8e 5a       	subi	r24, 0xAE	; 174
    657e:	9e 4f       	sbci	r25, 0xFE	; 254
    6580:	fc 01       	movw	r30, r24
    6582:	80 81       	ld	r24, Z
    6584:	91 81       	ldd	r25, Z+1	; 0x01
    6586:	fc 01       	movw	r30, r24
    6588:	21 83       	std	Z+1, r18	; 0x01
    658a:	ce 01       	movw	r24, r28
    658c:	8e 5a       	subi	r24, 0xAE	; 174
    658e:	9e 4f       	sbci	r25, 0xFE	; 254
    6590:	fc 01       	movw	r30, r24
    6592:	80 81       	ld	r24, Z
    6594:	91 81       	ldd	r25, Z+1	; 0x01
    6596:	fc 01       	movw	r30, r24
    6598:	21 81       	ldd	r18, Z+1	; 0x01
    659a:	ce 01       	movw	r24, r28
    659c:	8e 5a       	subi	r24, 0xAE	; 174
    659e:	9e 4f       	sbci	r25, 0xFE	; 254
    65a0:	fc 01       	movw	r30, r24
    65a2:	80 81       	ld	r24, Z
    65a4:	91 81       	ldd	r25, Z+1	; 0x01
    65a6:	fc 01       	movw	r30, r24
    65a8:	20 83       	st	Z, r18
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    65aa:	ce 01       	movw	r24, r28
    65ac:	8e 5a       	subi	r24, 0xAE	; 174
    65ae:	9e 4f       	sbci	r25, 0xFE	; 254
    65b0:	fc 01       	movw	r30, r24
    65b2:	80 81       	ld	r24, Z
    65b4:	91 81       	ldd	r25, Z+1	; 0x01
    65b6:	fc 01       	movw	r30, r24
    65b8:	85 81       	ldd	r24, Z+5	; 0x05
    65ba:	62 e0       	ldi	r22, 0x02	; 2
    65bc:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
  delay(1);
    65c0:	61 e0       	ldi	r22, 0x01	; 1
    65c2:	70 e0       	ldi	r23, 0x00	; 0
    65c4:	80 e0       	ldi	r24, 0x00	; 0
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    65cc:	ce 01       	movw	r24, r28
    65ce:	8e 5a       	subi	r24, 0xAE	; 174
    65d0:	9e 4f       	sbci	r25, 0xFE	; 254
    65d2:	fc 01       	movw	r30, r24
    65d4:	80 81       	ld	r24, Z
    65d6:	91 81       	ldd	r25, Z+1	; 0x01
    65d8:	fc 01       	movw	r30, r24
    65da:	85 81       	ldd	r24, Z+5	; 0x05
    65dc:	61 e0       	ldi	r22, 0x01	; 1
    65de:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
  digitalWrite(_pin, LOW);
    65e2:	ce 01       	movw	r24, r28
    65e4:	8e 5a       	subi	r24, 0xAE	; 174
    65e6:	9e 4f       	sbci	r25, 0xFE	; 254
    65e8:	fc 01       	movw	r30, r24
    65ea:	80 81       	ld	r24, Z
    65ec:	91 81       	ldd	r25, Z+1	; 0x01
    65ee:	fc 01       	movw	r30, r24
    65f0:	85 81       	ldd	r24, Z+5	; 0x05
    65f2:	60 e0       	ldi	r22, 0x00	; 0
    65f4:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
  switch (_type) {
    65f8:	ce 01       	movw	r24, r28
    65fa:	8e 5a       	subi	r24, 0xAE	; 174
    65fc:	9e 4f       	sbci	r25, 0xFE	; 254
    65fe:	fc 01       	movw	r30, r24
    6600:	80 81       	ld	r24, Z
    6602:	91 81       	ldd	r25, Z+1	; 0x01
    6604:	fc 01       	movw	r30, r24
    6606:	86 81       	ldd	r24, Z+6	; 0x06
    6608:	88 2f       	mov	r24, r24
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	45 97       	sbiw	r24, 0x15	; 21
    660e:	02 97       	sbiw	r24, 0x02	; 2
    6610:	28 f4       	brcc	.+10     	; 0x661c <_ZN3DHT4readEb+0x1c6>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    6612:	8c e4       	ldi	r24, 0x4C	; 76
    6614:	94 e0       	ldi	r25, 0x04	; 4
    6616:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
    break;
    661a:	07 c0       	rjmp	.+14     	; 0x662a <_ZN3DHT4readEb+0x1d4>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    661c:	64 e1       	ldi	r22, 0x14	; 20
    661e:	70 e0       	ldi	r23, 0x00	; 0
    6620:	80 e0       	ldi	r24, 0x00	; 0
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <delay>
    break;
    6628:	00 00       	nop
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    662a:	ce 01       	movw	r24, r28
    662c:	8e 5a       	subi	r24, 0xAE	; 174
    662e:	9e 4f       	sbci	r25, 0xFE	; 254
    6630:	fc 01       	movw	r30, r24
    6632:	80 81       	ld	r24, Z
    6634:	91 81       	ldd	r25, Z+1	; 0x01
    6636:	fc 01       	movw	r30, r24
    6638:	85 81       	ldd	r24, Z+5	; 0x05
    663a:	62 e0       	ldi	r22, 0x02	; 2
    663c:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    6640:	ce 01       	movw	r24, r28
    6642:	8e 5a       	subi	r24, 0xAE	; 174
    6644:	9e 4f       	sbci	r25, 0xFE	; 254
    6646:	fc 01       	movw	r30, r24
    6648:	80 81       	ld	r24, Z
    664a:	91 81       	ldd	r25, Z+1	; 0x01
    664c:	fc 01       	movw	r30, r24
    664e:	82 89       	ldd	r24, Z+18	; 0x12
    6650:	88 2f       	mov	r24, r24
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    6658:	ce 01       	movw	r24, r28
    665a:	8f 5a       	subi	r24, 0xAF	; 175
    665c:	9e 4f       	sbci	r25, 0xFE	; 254
    665e:	2c dc       	rcall	.-1960   	; 0x5eb8 <_ZN13InterruptLockC1Ev>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    6660:	ce 01       	movw	r24, r28
    6662:	8e 5a       	subi	r24, 0xAE	; 174
    6664:	9e 4f       	sbci	r25, 0xFE	; 254
    6666:	fc 01       	movw	r30, r24
    6668:	80 81       	ld	r24, Z
    666a:	91 81       	ldd	r25, Z+1	; 0x01
    666c:	60 e0       	ldi	r22, 0x00	; 0
    666e:	b7 d1       	rcall	.+878    	; 0x69de <_ZN3DHT11expectPulseEb>
    6670:	dc 01       	movw	r26, r24
    6672:	cb 01       	movw	r24, r22
    6674:	21 e0       	ldi	r18, 0x01	; 1
    6676:	8f 3f       	cpi	r24, 0xFF	; 255
    6678:	9f 4f       	sbci	r25, 0xFF	; 255
    667a:	af 4f       	sbci	r26, 0xFF	; 255
    667c:	bf 4f       	sbci	r27, 0xFF	; 255
    667e:	09 f0       	breq	.+2      	; 0x6682 <_ZN3DHT4readEb+0x22c>
    6680:	20 e0       	ldi	r18, 0x00	; 0
    6682:	22 23       	and	r18, r18
    6684:	99 f0       	breq	.+38     	; 0x66ac <_ZN3DHT4readEb+0x256>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    6686:	ce 01       	movw	r24, r28
    6688:	8e 5a       	subi	r24, 0xAE	; 174
    668a:	9e 4f       	sbci	r25, 0xFE	; 254
    668c:	fc 01       	movw	r30, r24
    668e:	80 81       	ld	r24, Z
    6690:	91 81       	ldd	r25, Z+1	; 0x01
    6692:	fc 01       	movw	r30, r24
    6694:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    6696:	ce 01       	movw	r24, r28
    6698:	8e 5a       	subi	r24, 0xAE	; 174
    669a:	9e 4f       	sbci	r25, 0xFE	; 254
    669c:	fc 01       	movw	r30, r24
    669e:	80 81       	ld	r24, Z
    66a0:	91 81       	ldd	r25, Z+1	; 0x01
    66a2:	fc 01       	movw	r30, r24
    66a4:	f1 88       	ldd	r15, Z+17	; 0x11
    66a6:	00 e0       	ldi	r16, 0x00	; 0
    66a8:	10 e0       	ldi	r17, 0x00	; 0
    66aa:	72 c0       	rjmp	.+228    	; 0x6790 <_ZN3DHT4readEb+0x33a>
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    66ac:	ce 01       	movw	r24, r28
    66ae:	8e 5a       	subi	r24, 0xAE	; 174
    66b0:	9e 4f       	sbci	r25, 0xFE	; 254
    66b2:	fc 01       	movw	r30, r24
    66b4:	80 81       	ld	r24, Z
    66b6:	91 81       	ldd	r25, Z+1	; 0x01
    66b8:	61 e0       	ldi	r22, 0x01	; 1
    66ba:	91 d1       	rcall	.+802    	; 0x69de <_ZN3DHT11expectPulseEb>
    66bc:	dc 01       	movw	r26, r24
    66be:	cb 01       	movw	r24, r22
    66c0:	21 e0       	ldi	r18, 0x01	; 1
    66c2:	8f 3f       	cpi	r24, 0xFF	; 255
    66c4:	9f 4f       	sbci	r25, 0xFF	; 255
    66c6:	af 4f       	sbci	r26, 0xFF	; 255
    66c8:	bf 4f       	sbci	r27, 0xFF	; 255
    66ca:	09 f0       	breq	.+2      	; 0x66ce <_ZN3DHT4readEb+0x278>
    66cc:	20 e0       	ldi	r18, 0x00	; 0
    66ce:	22 23       	and	r18, r18
    66d0:	99 f0       	breq	.+38     	; 0x66f8 <_ZN3DHT4readEb+0x2a2>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal high pulse."));
      _lastresult = false;
    66d2:	ce 01       	movw	r24, r28
    66d4:	8e 5a       	subi	r24, 0xAE	; 174
    66d6:	9e 4f       	sbci	r25, 0xFE	; 254
    66d8:	fc 01       	movw	r30, r24
    66da:	80 81       	ld	r24, Z
    66dc:	91 81       	ldd	r25, Z+1	; 0x01
    66de:	fc 01       	movw	r30, r24
    66e0:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    66e2:	ce 01       	movw	r24, r28
    66e4:	8e 5a       	subi	r24, 0xAE	; 174
    66e6:	9e 4f       	sbci	r25, 0xFE	; 254
    66e8:	fc 01       	movw	r30, r24
    66ea:	80 81       	ld	r24, Z
    66ec:	91 81       	ldd	r25, Z+1	; 0x01
    66ee:	fc 01       	movw	r30, r24
    66f0:	f1 88       	ldd	r15, Z+17	; 0x11
    66f2:	00 e0       	ldi	r16, 0x00	; 0
    66f4:	10 e0       	ldi	r17, 0x00	; 0
    66f6:	4c c0       	rjmp	.+152    	; 0x6790 <_ZN3DHT4readEb+0x33a>
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    66f8:	1a 82       	std	Y+2, r1	; 0x02
    66fa:	19 82       	std	Y+1, r1	; 0x01
    66fc:	89 81       	ldd	r24, Y+1	; 0x01
    66fe:	9a 81       	ldd	r25, Y+2	; 0x02
    6700:	80 35       	cpi	r24, 0x50	; 80
    6702:	91 05       	cpc	r25, r1
    6704:	0c f0       	brlt	.+2      	; 0x6708 <_ZN3DHT4readEb+0x2b2>
    6706:	42 c0       	rjmp	.+132    	; 0x678c <_ZN3DHT4readEb+0x336>
      cycles[i] = expectPulse(LOW);
    6708:	ce 01       	movw	r24, r28
    670a:	8e 5a       	subi	r24, 0xAE	; 174
    670c:	9e 4f       	sbci	r25, 0xFE	; 254
    670e:	fc 01       	movw	r30, r24
    6710:	80 81       	ld	r24, Z
    6712:	91 81       	ldd	r25, Z+1	; 0x01
    6714:	60 e0       	ldi	r22, 0x00	; 0
    6716:	63 d1       	rcall	.+710    	; 0x69de <_ZN3DHT11expectPulseEb>
    6718:	dc 01       	movw	r26, r24
    671a:	cb 01       	movw	r24, r22
    671c:	29 81       	ldd	r18, Y+1	; 0x01
    671e:	3a 81       	ldd	r19, Y+2	; 0x02
    6720:	22 0f       	add	r18, r18
    6722:	33 1f       	adc	r19, r19
    6724:	22 0f       	add	r18, r18
    6726:	33 1f       	adc	r19, r19
    6728:	ae 01       	movw	r20, r28
    672a:	4f 5f       	subi	r20, 0xFF	; 255
    672c:	5f 4f       	sbci	r21, 0xFF	; 255
    672e:	24 0f       	add	r18, r20
    6730:	35 1f       	adc	r19, r21
    6732:	20 5f       	subi	r18, 0xF0	; 240
    6734:	3f 4f       	sbci	r19, 0xFF	; 255
    6736:	f9 01       	movw	r30, r18
    6738:	80 83       	st	Z, r24
    673a:	91 83       	std	Z+1, r25	; 0x01
    673c:	a2 83       	std	Z+2, r26	; 0x02
    673e:	b3 83       	std	Z+3, r27	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    6740:	89 81       	ldd	r24, Y+1	; 0x01
    6742:	9a 81       	ldd	r25, Y+2	; 0x02
    6744:	8c 01       	movw	r16, r24
    6746:	0f 5f       	subi	r16, 0xFF	; 255
    6748:	1f 4f       	sbci	r17, 0xFF	; 255
    674a:	ce 01       	movw	r24, r28
    674c:	8e 5a       	subi	r24, 0xAE	; 174
    674e:	9e 4f       	sbci	r25, 0xFE	; 254
    6750:	fc 01       	movw	r30, r24
    6752:	80 81       	ld	r24, Z
    6754:	91 81       	ldd	r25, Z+1	; 0x01
    6756:	61 e0       	ldi	r22, 0x01	; 1
    6758:	42 d1       	rcall	.+644    	; 0x69de <_ZN3DHT11expectPulseEb>
    675a:	dc 01       	movw	r26, r24
    675c:	cb 01       	movw	r24, r22
    675e:	98 01       	movw	r18, r16
    6760:	22 0f       	add	r18, r18
    6762:	33 1f       	adc	r19, r19
    6764:	22 0f       	add	r18, r18
    6766:	33 1f       	adc	r19, r19
    6768:	ae 01       	movw	r20, r28
    676a:	4f 5f       	subi	r20, 0xFF	; 255
    676c:	5f 4f       	sbci	r21, 0xFF	; 255
    676e:	24 0f       	add	r18, r20
    6770:	35 1f       	adc	r19, r21
    6772:	20 5f       	subi	r18, 0xF0	; 240
    6774:	3f 4f       	sbci	r19, 0xFF	; 255
    6776:	f9 01       	movw	r30, r18
    6778:	80 83       	st	Z, r24
    677a:	91 83       	std	Z+1, r25	; 0x01
    677c:	a2 83       	std	Z+2, r26	; 0x02
    677e:	b3 83       	std	Z+3, r27	; 0x03
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    6780:	89 81       	ldd	r24, Y+1	; 0x01
    6782:	9a 81       	ldd	r25, Y+2	; 0x02
    6784:	02 96       	adiw	r24, 0x02	; 2
    6786:	9a 83       	std	Y+2, r25	; 0x02
    6788:	89 83       	std	Y+1, r24	; 0x01
    678a:	b8 cf       	rjmp	.-144    	; 0x66fc <_ZN3DHT4readEb+0x2a6>
    678c:	01 e0       	ldi	r16, 0x01	; 1
    678e:	10 e0       	ldi	r17, 0x00	; 0
    6790:	ce 01       	movw	r24, r28
    6792:	8f 5a       	subi	r24, 0xAF	; 175
    6794:	9e 4f       	sbci	r25, 0xFE	; 254
    6796:	9f db       	rcall	.-2242   	; 0x5ed6 <_ZN13InterruptLockD1Ev>
    6798:	01 30       	cpi	r16, 0x01	; 1
    679a:	11 05       	cpc	r17, r1
    679c:	09 f0       	breq	.+2      	; 0x67a0 <_ZN3DHT4readEb+0x34a>
    679e:	0d c1       	rjmp	.+538    	; 0x69ba <_ZN3DHT4readEb+0x564>

    // Now start reading the data line to get the value from the DHT sensor.

    // Turn off interrupts temporarily because the next sections
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;
    67a0:	00 00       	nop
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    67a2:	1c 82       	std	Y+4, r1	; 0x04
    67a4:	1b 82       	std	Y+3, r1	; 0x03
    67a6:	8b 81       	ldd	r24, Y+3	; 0x03
    67a8:	9c 81       	ldd	r25, Y+4	; 0x04
    67aa:	88 97       	sbiw	r24, 0x28	; 40
    67ac:	0c f0       	brlt	.+2      	; 0x67b0 <_ZN3DHT4readEb+0x35a>
    67ae:	a7 c0       	rjmp	.+334    	; 0x68fe <_ZN3DHT4readEb+0x4a8>
    uint32_t lowCycles = cycles[2 * i];
    67b0:	8b 81       	ldd	r24, Y+3	; 0x03
    67b2:	9c 81       	ldd	r25, Y+4	; 0x04
    67b4:	88 0f       	add	r24, r24
    67b6:	99 1f       	adc	r25, r25
    67b8:	88 0f       	add	r24, r24
    67ba:	99 1f       	adc	r25, r25
    67bc:	88 0f       	add	r24, r24
    67be:	99 1f       	adc	r25, r25
    67c0:	9e 01       	movw	r18, r28
    67c2:	2f 5f       	subi	r18, 0xFF	; 255
    67c4:	3f 4f       	sbci	r19, 0xFF	; 255
    67c6:	82 0f       	add	r24, r18
    67c8:	93 1f       	adc	r25, r19
    67ca:	40 96       	adiw	r24, 0x10	; 16
    67cc:	fc 01       	movw	r30, r24
    67ce:	80 81       	ld	r24, Z
    67d0:	91 81       	ldd	r25, Z+1	; 0x01
    67d2:	a2 81       	ldd	r26, Z+2	; 0x02
    67d4:	b3 81       	ldd	r27, Z+3	; 0x03
    67d6:	89 87       	std	Y+9, r24	; 0x09
    67d8:	9a 87       	std	Y+10, r25	; 0x0a
    67da:	ab 87       	std	Y+11, r26	; 0x0b
    67dc:	bc 87       	std	Y+12, r27	; 0x0c
    uint32_t highCycles = cycles[2 * i + 1];
    67de:	8b 81       	ldd	r24, Y+3	; 0x03
    67e0:	9c 81       	ldd	r25, Y+4	; 0x04
    67e2:	88 0f       	add	r24, r24
    67e4:	99 1f       	adc	r25, r25
    67e6:	01 96       	adiw	r24, 0x01	; 1
    67e8:	88 0f       	add	r24, r24
    67ea:	99 1f       	adc	r25, r25
    67ec:	88 0f       	add	r24, r24
    67ee:	99 1f       	adc	r25, r25
    67f0:	9e 01       	movw	r18, r28
    67f2:	2f 5f       	subi	r18, 0xFF	; 255
    67f4:	3f 4f       	sbci	r19, 0xFF	; 255
    67f6:	82 0f       	add	r24, r18
    67f8:	93 1f       	adc	r25, r19
    67fa:	40 96       	adiw	r24, 0x10	; 16
    67fc:	fc 01       	movw	r30, r24
    67fe:	80 81       	ld	r24, Z
    6800:	91 81       	ldd	r25, Z+1	; 0x01
    6802:	a2 81       	ldd	r26, Z+2	; 0x02
    6804:	b3 81       	ldd	r27, Z+3	; 0x03
    6806:	8d 87       	std	Y+13, r24	; 0x0d
    6808:	9e 87       	std	Y+14, r25	; 0x0e
    680a:	af 87       	std	Y+15, r26	; 0x0f
    680c:	b8 8b       	std	Y+16, r27	; 0x10
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    680e:	89 85       	ldd	r24, Y+9	; 0x09
    6810:	9a 85       	ldd	r25, Y+10	; 0x0a
    6812:	ab 85       	ldd	r26, Y+11	; 0x0b
    6814:	bc 85       	ldd	r27, Y+12	; 0x0c
    6816:	8f 3f       	cpi	r24, 0xFF	; 255
    6818:	9f 4f       	sbci	r25, 0xFF	; 255
    681a:	af 4f       	sbci	r26, 0xFF	; 255
    681c:	bf 4f       	sbci	r27, 0xFF	; 255
    681e:	49 f0       	breq	.+18     	; 0x6832 <_ZN3DHT4readEb+0x3dc>
    6820:	8d 85       	ldd	r24, Y+13	; 0x0d
    6822:	9e 85       	ldd	r25, Y+14	; 0x0e
    6824:	af 85       	ldd	r26, Y+15	; 0x0f
    6826:	b8 89       	ldd	r27, Y+16	; 0x10
    6828:	8f 3f       	cpi	r24, 0xFF	; 255
    682a:	9f 4f       	sbci	r25, 0xFF	; 255
    682c:	af 4f       	sbci	r26, 0xFF	; 255
    682e:	bf 4f       	sbci	r27, 0xFF	; 255
    6830:	89 f4       	brne	.+34     	; 0x6854 <_ZN3DHT4readEb+0x3fe>
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    6832:	ce 01       	movw	r24, r28
    6834:	8e 5a       	subi	r24, 0xAE	; 174
    6836:	9e 4f       	sbci	r25, 0xFE	; 254
    6838:	fc 01       	movw	r30, r24
    683a:	80 81       	ld	r24, Z
    683c:	91 81       	ldd	r25, Z+1	; 0x01
    683e:	fc 01       	movw	r30, r24
    6840:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
    6842:	ce 01       	movw	r24, r28
    6844:	8e 5a       	subi	r24, 0xAE	; 174
    6846:	9e 4f       	sbci	r25, 0xFE	; 254
    6848:	fc 01       	movw	r30, r24
    684a:	80 81       	ld	r24, Z
    684c:	91 81       	ldd	r25, Z+1	; 0x01
    684e:	fc 01       	movw	r30, r24
    6850:	f1 88       	ldd	r15, Z+17	; 0x11
    6852:	b3 c0       	rjmp	.+358    	; 0x69ba <_ZN3DHT4readEb+0x564>
    }
    data[i / 8] <<= 1;
    6854:	8b 81       	ldd	r24, Y+3	; 0x03
    6856:	9c 81       	ldd	r25, Y+4	; 0x04
    6858:	99 23       	and	r25, r25
    685a:	0c f4       	brge	.+2      	; 0x685e <_ZN3DHT4readEb+0x408>
    685c:	07 96       	adiw	r24, 0x07	; 7
    685e:	95 95       	asr	r25
    6860:	87 95       	ror	r24
    6862:	95 95       	asr	r25
    6864:	87 95       	ror	r24
    6866:	95 95       	asr	r25
    6868:	87 95       	ror	r24
    686a:	9e 01       	movw	r18, r28
    686c:	2e 5a       	subi	r18, 0xAE	; 174
    686e:	3e 4f       	sbci	r19, 0xFE	; 254
    6870:	f9 01       	movw	r30, r18
    6872:	20 81       	ld	r18, Z
    6874:	31 81       	ldd	r19, Z+1	; 0x01
    6876:	28 0f       	add	r18, r24
    6878:	39 1f       	adc	r19, r25
    687a:	f9 01       	movw	r30, r18
    687c:	20 81       	ld	r18, Z
    687e:	42 2f       	mov	r20, r18
    6880:	44 0f       	add	r20, r20
    6882:	9e 01       	movw	r18, r28
    6884:	2e 5a       	subi	r18, 0xAE	; 174
    6886:	3e 4f       	sbci	r19, 0xFE	; 254
    6888:	f9 01       	movw	r30, r18
    688a:	20 81       	ld	r18, Z
    688c:	31 81       	ldd	r19, Z+1	; 0x01
    688e:	82 0f       	add	r24, r18
    6890:	93 1f       	adc	r25, r19
    6892:	fc 01       	movw	r30, r24
    6894:	40 83       	st	Z, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    6896:	2d 85       	ldd	r18, Y+13	; 0x0d
    6898:	3e 85       	ldd	r19, Y+14	; 0x0e
    689a:	4f 85       	ldd	r20, Y+15	; 0x0f
    689c:	58 89       	ldd	r21, Y+16	; 0x10
    689e:	89 85       	ldd	r24, Y+9	; 0x09
    68a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    68a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    68a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    68a6:	82 17       	cp	r24, r18
    68a8:	93 07       	cpc	r25, r19
    68aa:	a4 07       	cpc	r26, r20
    68ac:	b5 07       	cpc	r27, r21
    68ae:	08 f5       	brcc	.+66     	; 0x68f2 <_ZN3DHT4readEb+0x49c>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    68b0:	8b 81       	ldd	r24, Y+3	; 0x03
    68b2:	9c 81       	ldd	r25, Y+4	; 0x04
    68b4:	99 23       	and	r25, r25
    68b6:	0c f4       	brge	.+2      	; 0x68ba <_ZN3DHT4readEb+0x464>
    68b8:	07 96       	adiw	r24, 0x07	; 7
    68ba:	95 95       	asr	r25
    68bc:	87 95       	ror	r24
    68be:	95 95       	asr	r25
    68c0:	87 95       	ror	r24
    68c2:	95 95       	asr	r25
    68c4:	87 95       	ror	r24
    68c6:	9e 01       	movw	r18, r28
    68c8:	2e 5a       	subi	r18, 0xAE	; 174
    68ca:	3e 4f       	sbci	r19, 0xFE	; 254
    68cc:	f9 01       	movw	r30, r18
    68ce:	20 81       	ld	r18, Z
    68d0:	31 81       	ldd	r19, Z+1	; 0x01
    68d2:	28 0f       	add	r18, r24
    68d4:	39 1f       	adc	r19, r25
    68d6:	f9 01       	movw	r30, r18
    68d8:	20 81       	ld	r18, Z
    68da:	42 2f       	mov	r20, r18
    68dc:	41 60       	ori	r20, 0x01	; 1
    68de:	9e 01       	movw	r18, r28
    68e0:	2e 5a       	subi	r18, 0xAE	; 174
    68e2:	3e 4f       	sbci	r19, 0xFE	; 254
    68e4:	f9 01       	movw	r30, r18
    68e6:	20 81       	ld	r18, Z
    68e8:	31 81       	ldd	r19, Z+1	; 0x01
    68ea:	82 0f       	add	r24, r18
    68ec:	93 1f       	adc	r25, r19
    68ee:	fc 01       	movw	r30, r24
    68f0:	40 83       	st	Z, r20
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    68f2:	8b 81       	ldd	r24, Y+3	; 0x03
    68f4:	9c 81       	ldd	r25, Y+4	; 0x04
    68f6:	01 96       	adiw	r24, 0x01	; 1
    68f8:	9c 83       	std	Y+4, r25	; 0x04
    68fa:	8b 83       	std	Y+3, r24	; 0x03
    68fc:	54 cf       	rjmp	.-344    	; 0x67a6 <_ZN3DHT4readEb+0x350>
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    68fe:	ce 01       	movw	r24, r28
    6900:	8e 5a       	subi	r24, 0xAE	; 174
    6902:	9e 4f       	sbci	r25, 0xFE	; 254
    6904:	fc 01       	movw	r30, r24
    6906:	80 81       	ld	r24, Z
    6908:	91 81       	ldd	r25, Z+1	; 0x01
    690a:	fc 01       	movw	r30, r24
    690c:	84 81       	ldd	r24, Z+4	; 0x04
    690e:	28 2f       	mov	r18, r24
    6910:	30 e0       	ldi	r19, 0x00	; 0
    6912:	ce 01       	movw	r24, r28
    6914:	8e 5a       	subi	r24, 0xAE	; 174
    6916:	9e 4f       	sbci	r25, 0xFE	; 254
    6918:	fc 01       	movw	r30, r24
    691a:	80 81       	ld	r24, Z
    691c:	91 81       	ldd	r25, Z+1	; 0x01
    691e:	fc 01       	movw	r30, r24
    6920:	80 81       	ld	r24, Z
    6922:	48 2f       	mov	r20, r24
    6924:	50 e0       	ldi	r21, 0x00	; 0
    6926:	ce 01       	movw	r24, r28
    6928:	8e 5a       	subi	r24, 0xAE	; 174
    692a:	9e 4f       	sbci	r25, 0xFE	; 254
    692c:	fc 01       	movw	r30, r24
    692e:	80 81       	ld	r24, Z
    6930:	91 81       	ldd	r25, Z+1	; 0x01
    6932:	fc 01       	movw	r30, r24
    6934:	81 81       	ldd	r24, Z+1	; 0x01
    6936:	88 2f       	mov	r24, r24
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	48 0f       	add	r20, r24
    693c:	59 1f       	adc	r21, r25
    693e:	ce 01       	movw	r24, r28
    6940:	8e 5a       	subi	r24, 0xAE	; 174
    6942:	9e 4f       	sbci	r25, 0xFE	; 254
    6944:	fc 01       	movw	r30, r24
    6946:	80 81       	ld	r24, Z
    6948:	91 81       	ldd	r25, Z+1	; 0x01
    694a:	fc 01       	movw	r30, r24
    694c:	82 81       	ldd	r24, Z+2	; 0x02
    694e:	88 2f       	mov	r24, r24
    6950:	90 e0       	ldi	r25, 0x00	; 0
    6952:	48 0f       	add	r20, r24
    6954:	59 1f       	adc	r21, r25
    6956:	ce 01       	movw	r24, r28
    6958:	8e 5a       	subi	r24, 0xAE	; 174
    695a:	9e 4f       	sbci	r25, 0xFE	; 254
    695c:	fc 01       	movw	r30, r24
    695e:	80 81       	ld	r24, Z
    6960:	91 81       	ldd	r25, Z+1	; 0x01
    6962:	fc 01       	movw	r30, r24
    6964:	83 81       	ldd	r24, Z+3	; 0x03
    6966:	88 2f       	mov	r24, r24
    6968:	90 e0       	ldi	r25, 0x00	; 0
    696a:	84 0f       	add	r24, r20
    696c:	95 1f       	adc	r25, r21
    696e:	99 27       	eor	r25, r25
    6970:	28 17       	cp	r18, r24
    6972:	39 07       	cpc	r19, r25
    6974:	91 f4       	brne	.+36     	; 0x699a <_ZN3DHT4readEb+0x544>
    _lastresult = true;
    6976:	ce 01       	movw	r24, r28
    6978:	8e 5a       	subi	r24, 0xAE	; 174
    697a:	9e 4f       	sbci	r25, 0xFE	; 254
    697c:	fc 01       	movw	r30, r24
    697e:	80 81       	ld	r24, Z
    6980:	91 81       	ldd	r25, Z+1	; 0x01
    6982:	21 e0       	ldi	r18, 0x01	; 1
    6984:	fc 01       	movw	r30, r24
    6986:	21 8b       	std	Z+17, r18	; 0x11
    return _lastresult;
    6988:	ce 01       	movw	r24, r28
    698a:	8e 5a       	subi	r24, 0xAE	; 174
    698c:	9e 4f       	sbci	r25, 0xFE	; 254
    698e:	fc 01       	movw	r30, r24
    6990:	80 81       	ld	r24, Z
    6992:	91 81       	ldd	r25, Z+1	; 0x01
    6994:	fc 01       	movw	r30, r24
    6996:	f1 88       	ldd	r15, Z+17	; 0x11
    6998:	10 c0       	rjmp	.+32     	; 0x69ba <_ZN3DHT4readEb+0x564>
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    699a:	ce 01       	movw	r24, r28
    699c:	8e 5a       	subi	r24, 0xAE	; 174
    699e:	9e 4f       	sbci	r25, 0xFE	; 254
    69a0:	fc 01       	movw	r30, r24
    69a2:	80 81       	ld	r24, Z
    69a4:	91 81       	ldd	r25, Z+1	; 0x01
    69a6:	fc 01       	movw	r30, r24
    69a8:	11 8a       	std	Z+17, r1	; 0x11
    return _lastresult;
    69aa:	ce 01       	movw	r24, r28
    69ac:	8e 5a       	subi	r24, 0xAE	; 174
    69ae:	9e 4f       	sbci	r25, 0xFE	; 254
    69b0:	fc 01       	movw	r30, r24
    69b2:	80 81       	ld	r24, Z
    69b4:	91 81       	ldd	r25, Z+1	; 0x01
    69b6:	fc 01       	movw	r30, r24
    69b8:	f1 88       	ldd	r15, Z+17	; 0x11
    69ba:	8f 2d       	mov	r24, r15
  }
}
    69bc:	cc 5a       	subi	r28, 0xAC	; 172
    69be:	de 4f       	sbci	r29, 0xFE	; 254
    69c0:	0f b6       	in	r0, 0x3f	; 63
    69c2:	f8 94       	cli
    69c4:	de bf       	out	0x3e, r29	; 62
    69c6:	0f be       	out	0x3f, r0	; 63
    69c8:	cd bf       	out	0x3d, r28	; 61
    69ca:	df 91       	pop	r29
    69cc:	cf 91       	pop	r28
    69ce:	1f 91       	pop	r17
    69d0:	0f 91       	pop	r16
    69d2:	ff 90       	pop	r15
    69d4:	df 90       	pop	r13
    69d6:	cf 90       	pop	r12
    69d8:	bf 90       	pop	r11
    69da:	af 90       	pop	r10
    69dc:	08 95       	ret

000069de <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    69de:	cf 93       	push	r28
    69e0:	df 93       	push	r29
    69e2:	cd b7       	in	r28, 0x3d	; 61
    69e4:	de b7       	in	r29, 0x3e	; 62
    69e6:	2a 97       	sbiw	r28, 0x0a	; 10
    69e8:	0f b6       	in	r0, 0x3f	; 63
    69ea:	f8 94       	cli
    69ec:	de bf       	out	0x3e, r29	; 62
    69ee:	0f be       	out	0x3f, r0	; 63
    69f0:	cd bf       	out	0x3d, r28	; 61
    69f2:	99 87       	std	Y+9, r25	; 0x09
    69f4:	88 87       	std	Y+8, r24	; 0x08
    69f6:	6a 87       	std	Y+10, r22	; 0x0a
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    69f8:	1a 82       	std	Y+2, r1	; 0x02
    69fa:	19 82       	std	Y+1, r1	; 0x01
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    69fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    69fe:	88 23       	and	r24, r24
    6a00:	29 f0       	breq	.+10     	; 0x6a0c <_ZN3DHT11expectPulseEb+0x2e>
    6a02:	88 85       	ldd	r24, Y+8	; 0x08
    6a04:	99 85       	ldd	r25, Y+9	; 0x09
    6a06:	fc 01       	movw	r30, r24
    6a08:	87 81       	ldd	r24, Z+7	; 0x07
    6a0a:	01 c0       	rjmp	.+2      	; 0x6a0e <_ZN3DHT11expectPulseEb+0x30>
    6a0c:	80 e0       	ldi	r24, 0x00	; 0
    6a0e:	8b 83       	std	Y+3, r24	; 0x03
  while ((*portInputRegister(_port) & _bit) == portState) {
    6a10:	88 85       	ldd	r24, Y+8	; 0x08
    6a12:	99 85       	ldd	r25, Y+9	; 0x09
    6a14:	fc 01       	movw	r30, r24
    6a16:	80 85       	ldd	r24, Z+8	; 0x08
    6a18:	88 2f       	mov	r24, r24
    6a1a:	90 e0       	ldi	r25, 0x00	; 0
    6a1c:	88 0f       	add	r24, r24
    6a1e:	99 1f       	adc	r25, r25
    6a20:	8b 5c       	subi	r24, 0xCB	; 203
    6a22:	93 4f       	sbci	r25, 0xF3	; 243
    6a24:	9d 83       	std	Y+5, r25	; 0x05
    6a26:	8c 83       	std	Y+4, r24	; 0x04
    6a28:	8c 81       	ldd	r24, Y+4	; 0x04
    6a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    6a2c:	fc 01       	movw	r30, r24
    6a2e:	25 91       	lpm	r18, Z+
    6a30:	34 91       	lpm	r19, Z
    6a32:	cf 01       	movw	r24, r30
    6a34:	3f 83       	std	Y+7, r19	; 0x07
    6a36:	2e 83       	std	Y+6, r18	; 0x06
    6a38:	9d 83       	std	Y+5, r25	; 0x05
    6a3a:	8c 83       	std	Y+4, r24	; 0x04
    6a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    6a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    6a40:	fc 01       	movw	r30, r24
    6a42:	20 81       	ld	r18, Z
    6a44:	88 85       	ldd	r24, Y+8	; 0x08
    6a46:	99 85       	ldd	r25, Y+9	; 0x09
    6a48:	fc 01       	movw	r30, r24
    6a4a:	87 81       	ldd	r24, Z+7	; 0x07
    6a4c:	28 23       	and	r18, r24
    6a4e:	81 e0       	ldi	r24, 0x01	; 1
    6a50:	9b 81       	ldd	r25, Y+3	; 0x03
    6a52:	29 17       	cp	r18, r25
    6a54:	09 f0       	breq	.+2      	; 0x6a58 <_ZN3DHT11expectPulseEb+0x7a>
    6a56:	80 e0       	ldi	r24, 0x00	; 0
    6a58:	88 23       	and	r24, r24
    6a5a:	f9 f0       	breq	.+62     	; 0x6a9a <_ZN3DHT11expectPulseEb+0xbc>
    if (count++ >= _maxcycles) {
    6a5c:	89 81       	ldd	r24, Y+1	; 0x01
    6a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a60:	9c 01       	movw	r18, r24
    6a62:	2f 5f       	subi	r18, 0xFF	; 255
    6a64:	3f 4f       	sbci	r19, 0xFF	; 255
    6a66:	3a 83       	std	Y+2, r19	; 0x02
    6a68:	29 83       	std	Y+1, r18	; 0x01
    6a6a:	9c 01       	movw	r18, r24
    6a6c:	40 e0       	ldi	r20, 0x00	; 0
    6a6e:	50 e0       	ldi	r21, 0x00	; 0
    6a70:	88 85       	ldd	r24, Y+8	; 0x08
    6a72:	99 85       	ldd	r25, Y+9	; 0x09
    6a74:	fc 01       	movw	r30, r24
    6a76:	85 85       	ldd	r24, Z+13	; 0x0d
    6a78:	96 85       	ldd	r25, Z+14	; 0x0e
    6a7a:	a7 85       	ldd	r26, Z+15	; 0x0f
    6a7c:	b0 89       	ldd	r27, Z+16	; 0x10
    6a7e:	61 e0       	ldi	r22, 0x01	; 1
    6a80:	28 17       	cp	r18, r24
    6a82:	39 07       	cpc	r19, r25
    6a84:	4a 07       	cpc	r20, r26
    6a86:	5b 07       	cpc	r21, r27
    6a88:	08 f4       	brcc	.+2      	; 0x6a8c <_ZN3DHT11expectPulseEb+0xae>
    6a8a:	60 e0       	ldi	r22, 0x00	; 0
    6a8c:	66 23       	and	r22, r22
    6a8e:	09 f4       	brne	.+2      	; 0x6a92 <_ZN3DHT11expectPulseEb+0xb4>
    6a90:	bf cf       	rjmp	.-130    	; 0x6a10 <_ZN3DHT11expectPulseEb+0x32>
      return TIMEOUT; // Exceeded timeout, fail.
    6a92:	8f ef       	ldi	r24, 0xFF	; 255
    6a94:	9f ef       	ldi	r25, 0xFF	; 255
    6a96:	dc 01       	movw	r26, r24
    6a98:	05 c0       	rjmp	.+10     	; 0x6aa4 <_ZN3DHT11expectPulseEb+0xc6>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    6a9a:	89 81       	ldd	r24, Y+1	; 0x01
    6a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    6a9e:	cc 01       	movw	r24, r24
    6aa0:	a0 e0       	ldi	r26, 0x00	; 0
    6aa2:	b0 e0       	ldi	r27, 0x00	; 0
}
    6aa4:	bc 01       	movw	r22, r24
    6aa6:	cd 01       	movw	r24, r26
    6aa8:	2a 96       	adiw	r28, 0x0a	; 10
    6aaa:	0f b6       	in	r0, 0x3f	; 63
    6aac:	f8 94       	cli
    6aae:	de bf       	out	0x3e, r29	; 62
    6ab0:	0f be       	out	0x3f, r0	; 63
    6ab2:	cd bf       	out	0x3d, r28	; 61
    6ab4:	df 91       	pop	r29
    6ab6:	cf 91       	pop	r28
    6ab8:	08 95       	ret

00006aba <_ZN7TwoWire5writeEi>:
	{
		return 7;
	}

	return dow;
}
    6aba:	cf 93       	push	r28
    6abc:	df 93       	push	r29
    6abe:	00 d0       	rcall	.+0      	; 0x6ac0 <_ZN7TwoWire5writeEi+0x6>
    6ac0:	1f 92       	push	r1
    6ac2:	cd b7       	in	r28, 0x3d	; 61
    6ac4:	de b7       	in	r29, 0x3e	; 62
    6ac6:	9a 83       	std	Y+2, r25	; 0x02
    6ac8:	89 83       	std	Y+1, r24	; 0x01
    6aca:	7c 83       	std	Y+4, r23	; 0x04
    6acc:	6b 83       	std	Y+3, r22	; 0x03
    6ace:	89 81       	ldd	r24, Y+1	; 0x01
    6ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ad2:	fc 01       	movw	r30, r24
    6ad4:	80 81       	ld	r24, Z
    6ad6:	91 81       	ldd	r25, Z+1	; 0x01
    6ad8:	fc 01       	movw	r30, r24
    6ada:	20 81       	ld	r18, Z
    6adc:	31 81       	ldd	r19, Z+1	; 0x01
    6ade:	4b 81       	ldd	r20, Y+3	; 0x03
    6ae0:	89 81       	ldd	r24, Y+1	; 0x01
    6ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae4:	64 2f       	mov	r22, r20
    6ae6:	f9 01       	movw	r30, r18
    6ae8:	19 95       	eicall
    6aea:	0f 90       	pop	r0
    6aec:	0f 90       	pop	r0
    6aee:	0f 90       	pop	r0
    6af0:	0f 90       	pop	r0
    6af2:	df 91       	pop	r29
    6af4:	cf 91       	pop	r28
    6af6:	08 95       	ret

00006af8 <_ZN6DS32315beginEv>:
    6af8:	cf 93       	push	r28
    6afa:	df 93       	push	r29
    6afc:	1f 92       	push	r1
    6afe:	1f 92       	push	r1
    6b00:	cd b7       	in	r28, 0x3d	; 61
    6b02:	de b7       	in	r29, 0x3e	; 62
    6b04:	9a 83       	std	Y+2, r25	; 0x02
    6b06:	89 83       	std	Y+1, r24	; 0x01
    6b08:	85 ec       	ldi	r24, 0xC5	; 197
    6b0a:	95 e0       	ldi	r25, 0x05	; 5
    6b0c:	0e 94 e4 54 	call	0xa9c8	; 0xa9c8 <_ZN7TwoWire5beginEv>
    6b10:	89 81       	ldd	r24, Y+1	; 0x01
    6b12:	9a 81       	ldd	r25, Y+2	; 0x02
    6b14:	40 e0       	ldi	r20, 0x00	; 0
    6b16:	61 e0       	ldi	r22, 0x01	; 1
    6b18:	e3 d0       	rcall	.+454    	; 0x6ce0 <_ZN6DS323110setBatteryEbb>
    6b1a:	89 81       	ldd	r24, Y+1	; 0x01
    6b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    6b1e:	20 ed       	ldi	r18, 0xD0	; 208
    6b20:	37 e0       	ldi	r19, 0x07	; 7
    6b22:	fc 01       	movw	r30, r24
    6b24:	31 83       	std	Z+1, r19	; 0x01
    6b26:	20 83       	st	Z, r18
    6b28:	89 81       	ldd	r24, Y+1	; 0x01
    6b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    6b2c:	21 e0       	ldi	r18, 0x01	; 1
    6b2e:	fc 01       	movw	r30, r24
    6b30:	22 83       	std	Z+2, r18	; 0x02
    6b32:	89 81       	ldd	r24, Y+1	; 0x01
    6b34:	9a 81       	ldd	r25, Y+2	; 0x02
    6b36:	21 e0       	ldi	r18, 0x01	; 1
    6b38:	fc 01       	movw	r30, r24
    6b3a:	23 83       	std	Z+3, r18	; 0x03
    6b3c:	89 81       	ldd	r24, Y+1	; 0x01
    6b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    6b40:	fc 01       	movw	r30, r24
    6b42:	14 82       	std	Z+4, r1	; 0x04
    6b44:	89 81       	ldd	r24, Y+1	; 0x01
    6b46:	9a 81       	ldd	r25, Y+2	; 0x02
    6b48:	fc 01       	movw	r30, r24
    6b4a:	15 82       	std	Z+5, r1	; 0x05
    6b4c:	89 81       	ldd	r24, Y+1	; 0x01
    6b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    6b50:	fc 01       	movw	r30, r24
    6b52:	16 82       	std	Z+6, r1	; 0x06
    6b54:	89 81       	ldd	r24, Y+1	; 0x01
    6b56:	9a 81       	ldd	r25, Y+2	; 0x02
    6b58:	26 e0       	ldi	r18, 0x06	; 6
    6b5a:	fc 01       	movw	r30, r24
    6b5c:	27 83       	std	Z+7, r18	; 0x07
    6b5e:	29 81       	ldd	r18, Y+1	; 0x01
    6b60:	3a 81       	ldd	r19, Y+2	; 0x02
    6b62:	80 e7       	ldi	r24, 0x70	; 112
    6b64:	95 e3       	ldi	r25, 0x35	; 53
    6b66:	ad e6       	ldi	r26, 0x6D	; 109
    6b68:	b8 e3       	ldi	r27, 0x38	; 56
    6b6a:	f9 01       	movw	r30, r18
    6b6c:	80 87       	std	Z+8, r24	; 0x08
    6b6e:	91 87       	std	Z+9, r25	; 0x09
    6b70:	a2 87       	std	Z+10, r26	; 0x0a
    6b72:	b3 87       	std	Z+11, r27	; 0x0b
    6b74:	81 e0       	ldi	r24, 0x01	; 1
    6b76:	0f 90       	pop	r0
    6b78:	0f 90       	pop	r0
    6b7a:	df 91       	pop	r29
    6b7c:	cf 91       	pop	r28
    6b7e:	08 95       	ret

00006b80 <_ZN6DS323111getDateTimeEv>:
    6b80:	cf 93       	push	r28
    6b82:	df 93       	push	r29
    6b84:	cd b7       	in	r28, 0x3d	; 61
    6b86:	de b7       	in	r29, 0x3e	; 62
    6b88:	64 97       	sbiw	r28, 0x14	; 20
    6b8a:	0f b6       	in	r0, 0x3f	; 63
    6b8c:	f8 94       	cli
    6b8e:	de bf       	out	0x3e, r29	; 62
    6b90:	0f be       	out	0x3f, r0	; 63
    6b92:	cd bf       	out	0x3d, r28	; 61
    6b94:	9a 8b       	std	Y+18, r25	; 0x12
    6b96:	89 8b       	std	Y+17, r24	; 0x11
    6b98:	7c 8b       	std	Y+20, r23	; 0x14
    6b9a:	6b 8b       	std	Y+19, r22	; 0x13
    6b9c:	68 e6       	ldi	r22, 0x68	; 104
    6b9e:	70 e0       	ldi	r23, 0x00	; 0
    6ba0:	85 ec       	ldi	r24, 0xC5	; 197
    6ba2:	95 e0       	ldi	r25, 0x05	; 5
    6ba4:	0e 94 ee 55 	call	0xabdc	; 0xabdc <_ZN7TwoWire17beginTransmissionEi>
    6ba8:	60 e0       	ldi	r22, 0x00	; 0
    6baa:	70 e0       	ldi	r23, 0x00	; 0
    6bac:	85 ec       	ldi	r24, 0xC5	; 197
    6bae:	95 e0       	ldi	r25, 0x05	; 5
    6bb0:	84 df       	rcall	.-248    	; 0x6aba <_ZN7TwoWire5writeEi>
    6bb2:	85 ec       	ldi	r24, 0xC5	; 197
    6bb4:	95 e0       	ldi	r25, 0x05	; 5
    6bb6:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>
    6bba:	47 e0       	ldi	r20, 0x07	; 7
    6bbc:	50 e0       	ldi	r21, 0x00	; 0
    6bbe:	68 e6       	ldi	r22, 0x68	; 104
    6bc0:	70 e0       	ldi	r23, 0x00	; 0
    6bc2:	85 ec       	ldi	r24, 0xC5	; 197
    6bc4:	95 e0       	ldi	r25, 0x05	; 5
    6bc6:	0e 94 b9 55 	call	0xab72	; 0xab72 <_ZN7TwoWire11requestFromEii>
    6bca:	85 ec       	ldi	r24, 0xC5	; 197
    6bcc:	95 e0       	ldi	r25, 0x05	; 5
    6bce:	0e 94 b9 56 	call	0xad72	; 0xad72 <_ZN7TwoWire9availableEv>
    6bd2:	21 e0       	ldi	r18, 0x01	; 1
    6bd4:	89 2b       	or	r24, r25
    6bd6:	09 f0       	breq	.+2      	; 0x6bda <_ZN6DS323111getDateTimeEv+0x5a>
    6bd8:	20 e0       	ldi	r18, 0x00	; 0
    6bda:	22 23       	and	r18, r18
    6bdc:	09 f0       	breq	.+2      	; 0x6be0 <_ZN6DS323111getDateTimeEv+0x60>
    6bde:	f5 cf       	rjmp	.-22     	; 0x6bca <_ZN6DS323111getDateTimeEv+0x4a>
    6be0:	86 e0       	ldi	r24, 0x06	; 6
    6be2:	90 e0       	ldi	r25, 0x00	; 0
    6be4:	9a 83       	std	Y+2, r25	; 0x02
    6be6:	89 83       	std	Y+1, r24	; 0x01
    6be8:	89 81       	ldd	r24, Y+1	; 0x01
    6bea:	9a 81       	ldd	r25, Y+2	; 0x02
    6bec:	99 23       	and	r25, r25
    6bee:	f4 f0       	brlt	.+60     	; 0x6c2c <_ZN6DS323111getDateTimeEv+0xac>
    6bf0:	85 ec       	ldi	r24, 0xC5	; 197
    6bf2:	95 e0       	ldi	r25, 0x05	; 5
    6bf4:	0e 94 d2 56 	call	0xada4	; 0xada4 <_ZN7TwoWire4readEv>
    6bf8:	28 2f       	mov	r18, r24
    6bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    6bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    6bfe:	62 2f       	mov	r22, r18
    6c00:	a1 d0       	rcall	.+322    	; 0x6d44 <_ZN6DS32317bcd2decEh>
    6c02:	28 2f       	mov	r18, r24
    6c04:	30 e0       	ldi	r19, 0x00	; 0
    6c06:	89 81       	ldd	r24, Y+1	; 0x01
    6c08:	9a 81       	ldd	r25, Y+2	; 0x02
    6c0a:	88 0f       	add	r24, r24
    6c0c:	99 1f       	adc	r25, r25
    6c0e:	ae 01       	movw	r20, r28
    6c10:	4f 5f       	subi	r20, 0xFF	; 255
    6c12:	5f 4f       	sbci	r21, 0xFF	; 255
    6c14:	84 0f       	add	r24, r20
    6c16:	95 1f       	adc	r25, r21
    6c18:	02 96       	adiw	r24, 0x02	; 2
    6c1a:	fc 01       	movw	r30, r24
    6c1c:	31 83       	std	Z+1, r19	; 0x01
    6c1e:	20 83       	st	Z, r18
    6c20:	89 81       	ldd	r24, Y+1	; 0x01
    6c22:	9a 81       	ldd	r25, Y+2	; 0x02
    6c24:	01 97       	sbiw	r24, 0x01	; 1
    6c26:	9a 83       	std	Y+2, r25	; 0x02
    6c28:	89 83       	std	Y+1, r24	; 0x01
    6c2a:	de cf       	rjmp	.-68     	; 0x6be8 <_ZN6DS323111getDateTimeEv+0x68>
    6c2c:	85 ec       	ldi	r24, 0xC5	; 197
    6c2e:	95 e0       	ldi	r25, 0x05	; 5
    6c30:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>
    6c34:	8b 81       	ldd	r24, Y+3	; 0x03
    6c36:	9c 81       	ldd	r25, Y+4	; 0x04
    6c38:	80 53       	subi	r24, 0x30	; 48
    6c3a:	98 4f       	sbci	r25, 0xF8	; 248
    6c3c:	9c 01       	movw	r18, r24
    6c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    6c40:	9c 89       	ldd	r25, Y+20	; 0x14
    6c42:	fc 01       	movw	r30, r24
    6c44:	31 83       	std	Z+1, r19	; 0x01
    6c46:	20 83       	st	Z, r18
    6c48:	8d 81       	ldd	r24, Y+5	; 0x05
    6c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    6c4c:	28 2f       	mov	r18, r24
    6c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    6c50:	9c 89       	ldd	r25, Y+20	; 0x14
    6c52:	fc 01       	movw	r30, r24
    6c54:	22 83       	std	Z+2, r18	; 0x02
    6c56:	8f 81       	ldd	r24, Y+7	; 0x07
    6c58:	98 85       	ldd	r25, Y+8	; 0x08
    6c5a:	28 2f       	mov	r18, r24
    6c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    6c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    6c60:	fc 01       	movw	r30, r24
    6c62:	23 83       	std	Z+3, r18	; 0x03
    6c64:	89 85       	ldd	r24, Y+9	; 0x09
    6c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c68:	28 2f       	mov	r18, r24
    6c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    6c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    6c6e:	fc 01       	movw	r30, r24
    6c70:	27 83       	std	Z+7, r18	; 0x07
    6c72:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c74:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c76:	28 2f       	mov	r18, r24
    6c78:	8b 89       	ldd	r24, Y+19	; 0x13
    6c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    6c7c:	fc 01       	movw	r30, r24
    6c7e:	24 83       	std	Z+4, r18	; 0x04
    6c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c84:	28 2f       	mov	r18, r24
    6c86:	8b 89       	ldd	r24, Y+19	; 0x13
    6c88:	9c 89       	ldd	r25, Y+20	; 0x14
    6c8a:	fc 01       	movw	r30, r24
    6c8c:	25 83       	std	Z+5, r18	; 0x05
    6c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c90:	98 89       	ldd	r25, Y+16	; 0x10
    6c92:	28 2f       	mov	r18, r24
    6c94:	8b 89       	ldd	r24, Y+19	; 0x13
    6c96:	9c 89       	ldd	r25, Y+20	; 0x14
    6c98:	fc 01       	movw	r30, r24
    6c9a:	26 83       	std	Z+6, r18	; 0x06
    6c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    6c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    6ca0:	5a d1       	rcall	.+692    	; 0x6f56 <_ZN6DS32318unixtimeEv>
    6ca2:	dc 01       	movw	r26, r24
    6ca4:	cb 01       	movw	r24, r22
    6ca6:	2b 89       	ldd	r18, Y+19	; 0x13
    6ca8:	3c 89       	ldd	r19, Y+20	; 0x14
    6caa:	f9 01       	movw	r30, r18
    6cac:	80 87       	std	Z+8, r24	; 0x08
    6cae:	91 87       	std	Z+9, r25	; 0x09
    6cb0:	a2 87       	std	Z+10, r26	; 0x0a
    6cb2:	b3 87       	std	Z+11, r27	; 0x0b
    6cb4:	89 89       	ldd	r24, Y+17	; 0x11
    6cb6:	9a 89       	ldd	r25, Y+18	; 0x12
    6cb8:	2b 89       	ldd	r18, Y+19	; 0x13
    6cba:	3c 89       	ldd	r19, Y+20	; 0x14
    6cbc:	4c e0       	ldi	r20, 0x0C	; 12
    6cbe:	f9 01       	movw	r30, r18
    6cc0:	dc 01       	movw	r26, r24
    6cc2:	01 90       	ld	r0, Z+
    6cc4:	0d 92       	st	X+, r0
    6cc6:	4a 95       	dec	r20
    6cc8:	e1 f7       	brne	.-8      	; 0x6cc2 <_ZN6DS323111getDateTimeEv+0x142>
    6cca:	89 89       	ldd	r24, Y+17	; 0x11
    6ccc:	9a 89       	ldd	r25, Y+18	; 0x12
    6cce:	64 96       	adiw	r28, 0x14	; 20
    6cd0:	0f b6       	in	r0, 0x3f	; 63
    6cd2:	f8 94       	cli
    6cd4:	de bf       	out	0x3e, r29	; 62
    6cd6:	0f be       	out	0x3f, r0	; 63
    6cd8:	cd bf       	out	0x3d, r28	; 61
    6cda:	df 91       	pop	r29
    6cdc:	cf 91       	pop	r28
    6cde:	08 95       	ret

00006ce0 <_ZN6DS323110setBatteryEbb>:
    6ce0:	cf 93       	push	r28
    6ce2:	df 93       	push	r29
    6ce4:	00 d0       	rcall	.+0      	; 0x6ce6 <_ZN6DS323110setBatteryEbb+0x6>
    6ce6:	1f 92       	push	r1
    6ce8:	1f 92       	push	r1
    6cea:	cd b7       	in	r28, 0x3d	; 61
    6cec:	de b7       	in	r29, 0x3e	; 62
    6cee:	9b 83       	std	Y+3, r25	; 0x03
    6cf0:	8a 83       	std	Y+2, r24	; 0x02
    6cf2:	6c 83       	std	Y+4, r22	; 0x04
    6cf4:	4d 83       	std	Y+5, r20	; 0x05
    6cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    6cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    6cfa:	6e e0       	ldi	r22, 0x0E	; 14
    6cfc:	a4 d1       	rcall	.+840    	; 0x7046 <_ZN6DS323113readRegister8Eh>
    6cfe:	89 83       	std	Y+1, r24	; 0x01
    6d00:	8d 81       	ldd	r24, Y+5	; 0x05
    6d02:	88 23       	and	r24, r24
    6d04:	21 f0       	breq	.+8      	; 0x6d0e <_ZN6DS323110setBatteryEbb+0x2e>
    6d06:	89 81       	ldd	r24, Y+1	; 0x01
    6d08:	80 64       	ori	r24, 0x40	; 64
    6d0a:	89 83       	std	Y+1, r24	; 0x01
    6d0c:	03 c0       	rjmp	.+6      	; 0x6d14 <_ZN6DS323110setBatteryEbb+0x34>
    6d0e:	89 81       	ldd	r24, Y+1	; 0x01
    6d10:	8f 7b       	andi	r24, 0xBF	; 191
    6d12:	89 83       	std	Y+1, r24	; 0x01
    6d14:	8c 81       	ldd	r24, Y+4	; 0x04
    6d16:	88 23       	and	r24, r24
    6d18:	21 f0       	breq	.+8      	; 0x6d22 <_ZN6DS323110setBatteryEbb+0x42>
    6d1a:	89 81       	ldd	r24, Y+1	; 0x01
    6d1c:	8b 77       	andi	r24, 0x7B	; 123
    6d1e:	89 83       	std	Y+1, r24	; 0x01
    6d20:	03 c0       	rjmp	.+6      	; 0x6d28 <_ZN6DS323110setBatteryEbb+0x48>
    6d22:	89 81       	ldd	r24, Y+1	; 0x01
    6d24:	80 68       	ori	r24, 0x80	; 128
    6d26:	89 83       	std	Y+1, r24	; 0x01
    6d28:	8a 81       	ldd	r24, Y+2	; 0x02
    6d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    6d2c:	49 81       	ldd	r20, Y+1	; 0x01
    6d2e:	6e e0       	ldi	r22, 0x0E	; 14
    6d30:	64 d1       	rcall	.+712    	; 0x6ffa <_ZN6DS323114writeRegister8Ehh>
    6d32:	00 00       	nop
    6d34:	0f 90       	pop	r0
    6d36:	0f 90       	pop	r0
    6d38:	0f 90       	pop	r0
    6d3a:	0f 90       	pop	r0
    6d3c:	0f 90       	pop	r0
    6d3e:	df 91       	pop	r29
    6d40:	cf 91       	pop	r28
    6d42:	08 95       	ret

00006d44 <_ZN6DS32317bcd2decEh>:
    6d44:	cf 93       	push	r28
    6d46:	df 93       	push	r29
    6d48:	00 d0       	rcall	.+0      	; 0x6d4a <_ZN6DS32317bcd2decEh+0x6>
    6d4a:	cd b7       	in	r28, 0x3d	; 61
    6d4c:	de b7       	in	r29, 0x3e	; 62
    6d4e:	9a 83       	std	Y+2, r25	; 0x02
    6d50:	89 83       	std	Y+1, r24	; 0x01
    6d52:	6b 83       	std	Y+3, r22	; 0x03
    6d54:	8b 81       	ldd	r24, Y+3	; 0x03
    6d56:	82 95       	swap	r24
    6d58:	8f 70       	andi	r24, 0x0F	; 15
    6d5a:	88 0f       	add	r24, r24
    6d5c:	98 2f       	mov	r25, r24
    6d5e:	99 0f       	add	r25, r25
    6d60:	99 0f       	add	r25, r25
    6d62:	98 0f       	add	r25, r24
    6d64:	8b 81       	ldd	r24, Y+3	; 0x03
    6d66:	8f 70       	andi	r24, 0x0F	; 15
    6d68:	89 0f       	add	r24, r25
    6d6a:	0f 90       	pop	r0
    6d6c:	0f 90       	pop	r0
    6d6e:	0f 90       	pop	r0
    6d70:	df 91       	pop	r29
    6d72:	cf 91       	pop	r28
    6d74:	08 95       	ret

00006d76 <_ZN6DS32319time2longEjhhh>:
    6d76:	0f 93       	push	r16
    6d78:	cf 93       	push	r28
    6d7a:	df 93       	push	r29
    6d7c:	cd b7       	in	r28, 0x3d	; 61
    6d7e:	de b7       	in	r29, 0x3e	; 62
    6d80:	27 97       	sbiw	r28, 0x07	; 7
    6d82:	0f b6       	in	r0, 0x3f	; 63
    6d84:	f8 94       	cli
    6d86:	de bf       	out	0x3e, r29	; 62
    6d88:	0f be       	out	0x3f, r0	; 63
    6d8a:	cd bf       	out	0x3d, r28	; 61
    6d8c:	9a 83       	std	Y+2, r25	; 0x02
    6d8e:	89 83       	std	Y+1, r24	; 0x01
    6d90:	7c 83       	std	Y+4, r23	; 0x04
    6d92:	6b 83       	std	Y+3, r22	; 0x03
    6d94:	4d 83       	std	Y+5, r20	; 0x05
    6d96:	2e 83       	std	Y+6, r18	; 0x06
    6d98:	0f 83       	std	Y+7, r16	; 0x07
    6d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    6d9e:	9c 01       	movw	r18, r24
    6da0:	40 e0       	ldi	r20, 0x00	; 0
    6da2:	50 e0       	ldi	r21, 0x00	; 0
    6da4:	da 01       	movw	r26, r20
    6da6:	c9 01       	movw	r24, r18
    6da8:	88 0f       	add	r24, r24
    6daa:	99 1f       	adc	r25, r25
    6dac:	aa 1f       	adc	r26, r26
    6dae:	bb 1f       	adc	r27, r27
    6db0:	82 0f       	add	r24, r18
    6db2:	93 1f       	adc	r25, r19
    6db4:	a4 1f       	adc	r26, r20
    6db6:	b5 1f       	adc	r27, r21
    6db8:	88 0f       	add	r24, r24
    6dba:	99 1f       	adc	r25, r25
    6dbc:	aa 1f       	adc	r26, r26
    6dbe:	bb 1f       	adc	r27, r27
    6dc0:	88 0f       	add	r24, r24
    6dc2:	99 1f       	adc	r25, r25
    6dc4:	aa 1f       	adc	r26, r26
    6dc6:	bb 1f       	adc	r27, r27
    6dc8:	88 0f       	add	r24, r24
    6dca:	99 1f       	adc	r25, r25
    6dcc:	aa 1f       	adc	r26, r26
    6dce:	bb 1f       	adc	r27, r27
    6dd0:	9c 01       	movw	r18, r24
    6dd2:	ad 01       	movw	r20, r26
    6dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    6dd6:	88 2f       	mov	r24, r24
    6dd8:	90 e0       	ldi	r25, 0x00	; 0
    6dda:	a0 e0       	ldi	r26, 0x00	; 0
    6ddc:	b0 e0       	ldi	r27, 0x00	; 0
    6dde:	28 0f       	add	r18, r24
    6de0:	39 1f       	adc	r19, r25
    6de2:	4a 1f       	adc	r20, r26
    6de4:	5b 1f       	adc	r21, r27
    6de6:	8c e3       	ldi	r24, 0x3C	; 60
    6de8:	90 e0       	ldi	r25, 0x00	; 0
    6dea:	dc 01       	movw	r26, r24
    6dec:	0e 94 6b 63 	call	0xc6d6	; 0xc6d6 <__muluhisi3>
    6df0:	9b 01       	movw	r18, r22
    6df2:	ac 01       	movw	r20, r24
    6df4:	8e 81       	ldd	r24, Y+6	; 0x06
    6df6:	88 2f       	mov	r24, r24
    6df8:	90 e0       	ldi	r25, 0x00	; 0
    6dfa:	a0 e0       	ldi	r26, 0x00	; 0
    6dfc:	b0 e0       	ldi	r27, 0x00	; 0
    6dfe:	28 0f       	add	r18, r24
    6e00:	39 1f       	adc	r19, r25
    6e02:	4a 1f       	adc	r20, r26
    6e04:	5b 1f       	adc	r21, r27
    6e06:	8c e3       	ldi	r24, 0x3C	; 60
    6e08:	90 e0       	ldi	r25, 0x00	; 0
    6e0a:	dc 01       	movw	r26, r24
    6e0c:	0e 94 6b 63 	call	0xc6d6	; 0xc6d6 <__muluhisi3>
    6e10:	9b 01       	movw	r18, r22
    6e12:	ac 01       	movw	r20, r24
    6e14:	8f 81       	ldd	r24, Y+7	; 0x07
    6e16:	88 2f       	mov	r24, r24
    6e18:	90 e0       	ldi	r25, 0x00	; 0
    6e1a:	a0 e0       	ldi	r26, 0x00	; 0
    6e1c:	b0 e0       	ldi	r27, 0x00	; 0
    6e1e:	82 0f       	add	r24, r18
    6e20:	93 1f       	adc	r25, r19
    6e22:	a4 1f       	adc	r26, r20
    6e24:	b5 1f       	adc	r27, r21
    6e26:	bc 01       	movw	r22, r24
    6e28:	cd 01       	movw	r24, r26
    6e2a:	27 96       	adiw	r28, 0x07	; 7
    6e2c:	0f b6       	in	r0, 0x3f	; 63
    6e2e:	f8 94       	cli
    6e30:	de bf       	out	0x3e, r29	; 62
    6e32:	0f be       	out	0x3f, r0	; 63
    6e34:	cd bf       	out	0x3d, r28	; 61
    6e36:	df 91       	pop	r29
    6e38:	cf 91       	pop	r28
    6e3a:	0f 91       	pop	r16
    6e3c:	08 95       	ret

00006e3e <_ZN6DS323110isLeapYearEj>:
    6e3e:	cf 93       	push	r28
    6e40:	df 93       	push	r29
    6e42:	00 d0       	rcall	.+0      	; 0x6e44 <_ZN6DS323110isLeapYearEj+0x6>
    6e44:	1f 92       	push	r1
    6e46:	cd b7       	in	r28, 0x3d	; 61
    6e48:	de b7       	in	r29, 0x3e	; 62
    6e4a:	9a 83       	std	Y+2, r25	; 0x02
    6e4c:	89 83       	std	Y+1, r24	; 0x01
    6e4e:	7c 83       	std	Y+4, r23	; 0x04
    6e50:	6b 83       	std	Y+3, r22	; 0x03
    6e52:	8b 81       	ldd	r24, Y+3	; 0x03
    6e54:	9c 81       	ldd	r25, Y+4	; 0x04
    6e56:	83 70       	andi	r24, 0x03	; 3
    6e58:	99 27       	eor	r25, r25
    6e5a:	21 e0       	ldi	r18, 0x01	; 1
    6e5c:	89 2b       	or	r24, r25
    6e5e:	09 f0       	breq	.+2      	; 0x6e62 <_ZN6DS323110isLeapYearEj+0x24>
    6e60:	20 e0       	ldi	r18, 0x00	; 0
    6e62:	82 2f       	mov	r24, r18
    6e64:	0f 90       	pop	r0
    6e66:	0f 90       	pop	r0
    6e68:	0f 90       	pop	r0
    6e6a:	0f 90       	pop	r0
    6e6c:	df 91       	pop	r29
    6e6e:	cf 91       	pop	r28
    6e70:	08 95       	ret

00006e72 <_ZN6DS32319date2daysEjhh>:
    6e72:	cf 93       	push	r28
    6e74:	df 93       	push	r29
    6e76:	cd b7       	in	r28, 0x3d	; 61
    6e78:	de b7       	in	r29, 0x3e	; 62
    6e7a:	2c 97       	sbiw	r28, 0x0c	; 12
    6e7c:	0f b6       	in	r0, 0x3f	; 63
    6e7e:	f8 94       	cli
    6e80:	de bf       	out	0x3e, r29	; 62
    6e82:	0f be       	out	0x3f, r0	; 63
    6e84:	cd bf       	out	0x3d, r28	; 61
    6e86:	98 87       	std	Y+8, r25	; 0x08
    6e88:	8f 83       	std	Y+7, r24	; 0x07
    6e8a:	7a 87       	std	Y+10, r23	; 0x0a
    6e8c:	69 87       	std	Y+9, r22	; 0x09
    6e8e:	4b 87       	std	Y+11, r20	; 0x0b
    6e90:	2c 87       	std	Y+12, r18	; 0x0c
    6e92:	89 85       	ldd	r24, Y+9	; 0x09
    6e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e96:	80 5d       	subi	r24, 0xD0	; 208
    6e98:	97 40       	sbci	r25, 0x07	; 7
    6e9a:	9a 87       	std	Y+10, r25	; 0x0a
    6e9c:	89 87       	std	Y+9, r24	; 0x09
    6e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ea0:	88 2f       	mov	r24, r24
    6ea2:	90 e0       	ldi	r25, 0x00	; 0
    6ea4:	9a 83       	std	Y+2, r25	; 0x02
    6ea6:	89 83       	std	Y+1, r24	; 0x01
    6ea8:	81 e0       	ldi	r24, 0x01	; 1
    6eaa:	8b 83       	std	Y+3, r24	; 0x03
    6eac:	9b 81       	ldd	r25, Y+3	; 0x03
    6eae:	8b 85       	ldd	r24, Y+11	; 0x0b
    6eb0:	98 17       	cp	r25, r24
    6eb2:	d0 f4       	brcc	.+52     	; 0x6ee8 <_ZN6DS32319date2daysEjhh+0x76>
    6eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    6eb6:	88 2f       	mov	r24, r24
    6eb8:	90 e0       	ldi	r25, 0x00	; 0
    6eba:	01 97       	sbiw	r24, 0x01	; 1
    6ebc:	89 5a       	subi	r24, 0xA9	; 169
    6ebe:	94 4f       	sbci	r25, 0xF4	; 244
    6ec0:	9d 83       	std	Y+5, r25	; 0x05
    6ec2:	8c 83       	std	Y+4, r24	; 0x04
    6ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    6ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    6ec8:	fc 01       	movw	r30, r24
    6eca:	84 91       	lpm	r24, Z
    6ecc:	8e 83       	std	Y+6, r24	; 0x06
    6ece:	8e 81       	ldd	r24, Y+6	; 0x06
    6ed0:	88 2f       	mov	r24, r24
    6ed2:	90 e0       	ldi	r25, 0x00	; 0
    6ed4:	29 81       	ldd	r18, Y+1	; 0x01
    6ed6:	3a 81       	ldd	r19, Y+2	; 0x02
    6ed8:	82 0f       	add	r24, r18
    6eda:	93 1f       	adc	r25, r19
    6edc:	9a 83       	std	Y+2, r25	; 0x02
    6ede:	89 83       	std	Y+1, r24	; 0x01
    6ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    6ee2:	8f 5f       	subi	r24, 0xFF	; 255
    6ee4:	8b 83       	std	Y+3, r24	; 0x03
    6ee6:	e2 cf       	rjmp	.-60     	; 0x6eac <_ZN6DS32319date2daysEjhh+0x3a>
    6ee8:	8b 85       	ldd	r24, Y+11	; 0x0b
    6eea:	82 30       	cpi	r24, 0x02	; 2
    6eec:	51 f4       	brne	.+20     	; 0x6f02 <_ZN6DS32319date2daysEjhh+0x90>
    6eee:	29 85       	ldd	r18, Y+9	; 0x09
    6ef0:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    6ef4:	98 85       	ldd	r25, Y+8	; 0x08
    6ef6:	b9 01       	movw	r22, r18
    6ef8:	a2 df       	rcall	.-188    	; 0x6e3e <_ZN6DS323110isLeapYearEj>
    6efa:	88 23       	and	r24, r24
    6efc:	11 f0       	breq	.+4      	; 0x6f02 <_ZN6DS32319date2daysEjhh+0x90>
    6efe:	81 e0       	ldi	r24, 0x01	; 1
    6f00:	01 c0       	rjmp	.+2      	; 0x6f04 <_ZN6DS32319date2daysEjhh+0x92>
    6f02:	80 e0       	ldi	r24, 0x00	; 0
    6f04:	88 23       	and	r24, r24
    6f06:	29 f0       	breq	.+10     	; 0x6f12 <_ZN6DS32319date2daysEjhh+0xa0>
    6f08:	89 81       	ldd	r24, Y+1	; 0x01
    6f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    6f0c:	01 96       	adiw	r24, 0x01	; 1
    6f0e:	9a 83       	std	Y+2, r25	; 0x02
    6f10:	89 83       	std	Y+1, r24	; 0x01
    6f12:	49 85       	ldd	r20, Y+9	; 0x09
    6f14:	5a 85       	ldd	r21, Y+10	; 0x0a
    6f16:	8d e6       	ldi	r24, 0x6D	; 109
    6f18:	91 e0       	ldi	r25, 0x01	; 1
    6f1a:	48 9f       	mul	r20, r24
    6f1c:	90 01       	movw	r18, r0
    6f1e:	49 9f       	mul	r20, r25
    6f20:	30 0d       	add	r19, r0
    6f22:	58 9f       	mul	r21, r24
    6f24:	30 0d       	add	r19, r0
    6f26:	11 24       	eor	r1, r1
    6f28:	89 81       	ldd	r24, Y+1	; 0x01
    6f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    6f2c:	28 0f       	add	r18, r24
    6f2e:	39 1f       	adc	r19, r25
    6f30:	89 85       	ldd	r24, Y+9	; 0x09
    6f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f34:	03 96       	adiw	r24, 0x03	; 3
    6f36:	96 95       	lsr	r25
    6f38:	87 95       	ror	r24
    6f3a:	96 95       	lsr	r25
    6f3c:	87 95       	ror	r24
    6f3e:	82 0f       	add	r24, r18
    6f40:	93 1f       	adc	r25, r19
    6f42:	01 97       	sbiw	r24, 0x01	; 1
    6f44:	2c 96       	adiw	r28, 0x0c	; 12
    6f46:	0f b6       	in	r0, 0x3f	; 63
    6f48:	f8 94       	cli
    6f4a:	de bf       	out	0x3e, r29	; 62
    6f4c:	0f be       	out	0x3f, r0	; 63
    6f4e:	cd bf       	out	0x3d, r28	; 61
    6f50:	df 91       	pop	r29
    6f52:	cf 91       	pop	r28
    6f54:	08 95       	ret

00006f56 <_ZN6DS32318unixtimeEv>:
    6f56:	ff 92       	push	r15
    6f58:	0f 93       	push	r16
    6f5a:	1f 93       	push	r17
    6f5c:	cf 93       	push	r28
    6f5e:	df 93       	push	r29
    6f60:	00 d0       	rcall	.+0      	; 0x6f62 <_ZN6DS32318unixtimeEv+0xc>
    6f62:	00 d0       	rcall	.+0      	; 0x6f64 <_ZN6DS32318unixtimeEv+0xe>
    6f64:	cd b7       	in	r28, 0x3d	; 61
    6f66:	de b7       	in	r29, 0x3e	; 62
    6f68:	9e 83       	std	Y+6, r25	; 0x06
    6f6a:	8d 83       	std	Y+5, r24	; 0x05
    6f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    6f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    6f70:	fc 01       	movw	r30, r24
    6f72:	06 81       	ldd	r16, Z+6	; 0x06
    6f74:	8d 81       	ldd	r24, Y+5	; 0x05
    6f76:	9e 81       	ldd	r25, Y+6	; 0x06
    6f78:	fc 01       	movw	r30, r24
    6f7a:	f5 80       	ldd	r15, Z+5	; 0x05
    6f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    6f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    6f80:	fc 01       	movw	r30, r24
    6f82:	14 81       	ldd	r17, Z+4	; 0x04
    6f84:	8d 81       	ldd	r24, Y+5	; 0x05
    6f86:	9e 81       	ldd	r25, Y+6	; 0x06
    6f88:	fc 01       	movw	r30, r24
    6f8a:	23 81       	ldd	r18, Z+3	; 0x03
    6f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    6f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    6f90:	fc 01       	movw	r30, r24
    6f92:	32 81       	ldd	r19, Z+2	; 0x02
    6f94:	8d 81       	ldd	r24, Y+5	; 0x05
    6f96:	9e 81       	ldd	r25, Y+6	; 0x06
    6f98:	fc 01       	movw	r30, r24
    6f9a:	60 81       	ld	r22, Z
    6f9c:	71 81       	ldd	r23, Z+1	; 0x01
    6f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    6fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    6fa2:	43 2f       	mov	r20, r19
    6fa4:	66 df       	rcall	.-308    	; 0x6e72 <_ZN6DS32319date2daysEjhh>
    6fa6:	bc 01       	movw	r22, r24
    6fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    6faa:	9e 81       	ldd	r25, Y+6	; 0x06
    6fac:	2f 2d       	mov	r18, r15
    6fae:	41 2f       	mov	r20, r17
    6fb0:	e2 de       	rcall	.-572    	; 0x6d76 <_ZN6DS32319time2longEjhhh>
    6fb2:	dc 01       	movw	r26, r24
    6fb4:	cb 01       	movw	r24, r22
    6fb6:	89 83       	std	Y+1, r24	; 0x01
    6fb8:	9a 83       	std	Y+2, r25	; 0x02
    6fba:	ab 83       	std	Y+3, r26	; 0x03
    6fbc:	bc 83       	std	Y+4, r27	; 0x04
    6fbe:	89 81       	ldd	r24, Y+1	; 0x01
    6fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    6fc2:	ab 81       	ldd	r26, Y+3	; 0x03
    6fc4:	bc 81       	ldd	r27, Y+4	; 0x04
    6fc6:	80 59       	subi	r24, 0x90	; 144
    6fc8:	9a 4c       	sbci	r25, 0xCA	; 202
    6fca:	a2 49       	sbci	r26, 0x92	; 146
    6fcc:	b7 4c       	sbci	r27, 0xC7	; 199
    6fce:	89 83       	std	Y+1, r24	; 0x01
    6fd0:	9a 83       	std	Y+2, r25	; 0x02
    6fd2:	ab 83       	std	Y+3, r26	; 0x03
    6fd4:	bc 83       	std	Y+4, r27	; 0x04
    6fd6:	89 81       	ldd	r24, Y+1	; 0x01
    6fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    6fda:	ab 81       	ldd	r26, Y+3	; 0x03
    6fdc:	bc 81       	ldd	r27, Y+4	; 0x04
    6fde:	bc 01       	movw	r22, r24
    6fe0:	cd 01       	movw	r24, r26
    6fe2:	26 96       	adiw	r28, 0x06	; 6
    6fe4:	0f b6       	in	r0, 0x3f	; 63
    6fe6:	f8 94       	cli
    6fe8:	de bf       	out	0x3e, r29	; 62
    6fea:	0f be       	out	0x3f, r0	; 63
    6fec:	cd bf       	out	0x3d, r28	; 61
    6fee:	df 91       	pop	r29
    6ff0:	cf 91       	pop	r28
    6ff2:	1f 91       	pop	r17
    6ff4:	0f 91       	pop	r16
    6ff6:	ff 90       	pop	r15
    6ff8:	08 95       	ret

00006ffa <_ZN6DS323114writeRegister8Ehh>:

void DS3231::writeRegister8(uint8_t reg, uint8_t value)
{
    6ffa:	cf 93       	push	r28
    6ffc:	df 93       	push	r29
    6ffe:	00 d0       	rcall	.+0      	; 0x7000 <_ZN6DS323114writeRegister8Ehh+0x6>
    7000:	1f 92       	push	r1
    7002:	cd b7       	in	r28, 0x3d	; 61
    7004:	de b7       	in	r29, 0x3e	; 62
    7006:	9a 83       	std	Y+2, r25	; 0x02
    7008:	89 83       	std	Y+1, r24	; 0x01
    700a:	6b 83       	std	Y+3, r22	; 0x03
    700c:	4c 83       	std	Y+4, r20	; 0x04
	Wire.beginTransmission(DS3231_ADDRESS);
    700e:	68 e6       	ldi	r22, 0x68	; 104
    7010:	70 e0       	ldi	r23, 0x00	; 0
    7012:	85 ec       	ldi	r24, 0xC5	; 197
    7014:	95 e0       	ldi	r25, 0x05	; 5
    7016:	0e 94 ee 55 	call	0xabdc	; 0xabdc <_ZN7TwoWire17beginTransmissionEi>
	#if ARDUINO >= 100
	Wire.write(reg);
    701a:	6b 81       	ldd	r22, Y+3	; 0x03
    701c:	85 ec       	ldi	r24, 0xC5	; 197
    701e:	95 e0       	ldi	r25, 0x05	; 5
    7020:	0e 94 3a 56 	call	0xac74	; 0xac74 <_ZN7TwoWire5writeEh>
	Wire.write(value);
    7024:	6c 81       	ldd	r22, Y+4	; 0x04
    7026:	85 ec       	ldi	r24, 0xC5	; 197
    7028:	95 e0       	ldi	r25, 0x05	; 5
    702a:	0e 94 3a 56 	call	0xac74	; 0xac74 <_ZN7TwoWire5writeEh>
	#else
	Wire.send(reg);
	Wire.send(value);
	#endif
	Wire.endTransmission();
    702e:	85 ec       	ldi	r24, 0xC5	; 197
    7030:	95 e0       	ldi	r25, 0x05	; 5
    7032:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>
}
    7036:	00 00       	nop
    7038:	0f 90       	pop	r0
    703a:	0f 90       	pop	r0
    703c:	0f 90       	pop	r0
    703e:	0f 90       	pop	r0
    7040:	df 91       	pop	r29
    7042:	cf 91       	pop	r28
    7044:	08 95       	ret

00007046 <_ZN6DS323113readRegister8Eh>:

uint8_t DS3231::readRegister8(uint8_t reg)
{
    7046:	cf 93       	push	r28
    7048:	df 93       	push	r29
    704a:	00 d0       	rcall	.+0      	; 0x704c <_ZN6DS323113readRegister8Eh+0x6>
    704c:	1f 92       	push	r1
    704e:	cd b7       	in	r28, 0x3d	; 61
    7050:	de b7       	in	r29, 0x3e	; 62
    7052:	9b 83       	std	Y+3, r25	; 0x03
    7054:	8a 83       	std	Y+2, r24	; 0x02
    7056:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t value;
	Wire.beginTransmission(DS3231_ADDRESS);
    7058:	68 e6       	ldi	r22, 0x68	; 104
    705a:	70 e0       	ldi	r23, 0x00	; 0
    705c:	85 ec       	ldi	r24, 0xC5	; 197
    705e:	95 e0       	ldi	r25, 0x05	; 5
    7060:	0e 94 ee 55 	call	0xabdc	; 0xabdc <_ZN7TwoWire17beginTransmissionEi>
	#if ARDUINO >= 100
	Wire.write(reg);
    7064:	6c 81       	ldd	r22, Y+4	; 0x04
    7066:	85 ec       	ldi	r24, 0xC5	; 197
    7068:	95 e0       	ldi	r25, 0x05	; 5
    706a:	0e 94 3a 56 	call	0xac74	; 0xac74 <_ZN7TwoWire5writeEh>
	#else
	Wire.send(reg);
	#endif
	Wire.endTransmission();
    706e:	85 ec       	ldi	r24, 0xC5	; 197
    7070:	95 e0       	ldi	r25, 0x05	; 5
    7072:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(DS3231_ADDRESS, 1);
    7076:	41 e0       	ldi	r20, 0x01	; 1
    7078:	50 e0       	ldi	r21, 0x00	; 0
    707a:	68 e6       	ldi	r22, 0x68	; 104
    707c:	70 e0       	ldi	r23, 0x00	; 0
    707e:	85 ec       	ldi	r24, 0xC5	; 197
    7080:	95 e0       	ldi	r25, 0x05	; 5
    7082:	0e 94 b9 55 	call	0xab72	; 0xab72 <_ZN7TwoWire11requestFromEii>
	while(!Wire.available()) {};
    7086:	85 ec       	ldi	r24, 0xC5	; 197
    7088:	95 e0       	ldi	r25, 0x05	; 5
    708a:	0e 94 b9 56 	call	0xad72	; 0xad72 <_ZN7TwoWire9availableEv>
    708e:	21 e0       	ldi	r18, 0x01	; 1
    7090:	89 2b       	or	r24, r25
    7092:	09 f0       	breq	.+2      	; 0x7096 <_ZN6DS323113readRegister8Eh+0x50>
    7094:	20 e0       	ldi	r18, 0x00	; 0
    7096:	22 23       	and	r18, r18
    7098:	09 f0       	breq	.+2      	; 0x709c <_ZN6DS323113readRegister8Eh+0x56>
    709a:	f5 cf       	rjmp	.-22     	; 0x7086 <_ZN6DS323113readRegister8Eh+0x40>
	#if ARDUINO >= 100
	value = Wire.read();
    709c:	85 ec       	ldi	r24, 0xC5	; 197
    709e:	95 e0       	ldi	r25, 0x05	; 5
    70a0:	0e 94 d2 56 	call	0xada4	; 0xada4 <_ZN7TwoWire4readEv>
    70a4:	89 83       	std	Y+1, r24	; 0x01
	#else
	value = Wire.receive();
	#endif;
	Wire.endTransmission();
    70a6:	85 ec       	ldi	r24, 0xC5	; 197
    70a8:	95 e0       	ldi	r25, 0x05	; 5
    70aa:	0e 94 29 56 	call	0xac52	; 0xac52 <_ZN7TwoWire15endTransmissionEv>

	return value;
    70ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    70b0:	0f 90       	pop	r0
    70b2:	0f 90       	pop	r0
    70b4:	0f 90       	pop	r0
    70b6:	0f 90       	pop	r0
    70b8:	df 91       	pop	r29
    70ba:	cf 91       	pop	r28
    70bc:	08 95       	ret

000070be <_ZN6HCSR044initEiPii>:
	this->n = n;
	pinMode(this->out, OUTPUT);
	for(int i=0;i<n;i++){ pinMode(this->echo[i], INPUT); }
}
HCSR04::HCSR04(int out,int echo){this->init(out,new int[1]{echo},1);}
HCSR04::HCSR04(int out,int echo[],int n){this->init(out,echo,n);}
    70be:	cf 93       	push	r28
    70c0:	df 93       	push	r29
    70c2:	cd b7       	in	r28, 0x3d	; 61
    70c4:	de b7       	in	r29, 0x3e	; 62
    70c6:	2a 97       	sbiw	r28, 0x0a	; 10
    70c8:	0f b6       	in	r0, 0x3f	; 63
    70ca:	f8 94       	cli
    70cc:	de bf       	out	0x3e, r29	; 62
    70ce:	0f be       	out	0x3f, r0	; 63
    70d0:	cd bf       	out	0x3d, r28	; 61
    70d2:	9c 83       	std	Y+4, r25	; 0x04
    70d4:	8b 83       	std	Y+3, r24	; 0x03
    70d6:	7e 83       	std	Y+6, r23	; 0x06
    70d8:	6d 83       	std	Y+5, r22	; 0x05
    70da:	58 87       	std	Y+8, r21	; 0x08
    70dc:	4f 83       	std	Y+7, r20	; 0x07
    70de:	3a 87       	std	Y+10, r19	; 0x0a
    70e0:	29 87       	std	Y+9, r18	; 0x09
    70e2:	8b 81       	ldd	r24, Y+3	; 0x03
    70e4:	9c 81       	ldd	r25, Y+4	; 0x04
    70e6:	2d 81       	ldd	r18, Y+5	; 0x05
    70e8:	3e 81       	ldd	r19, Y+6	; 0x06
    70ea:	fc 01       	movw	r30, r24
    70ec:	31 83       	std	Z+1, r19	; 0x01
    70ee:	20 83       	st	Z, r18
    70f0:	8b 81       	ldd	r24, Y+3	; 0x03
    70f2:	9c 81       	ldd	r25, Y+4	; 0x04
    70f4:	2f 81       	ldd	r18, Y+7	; 0x07
    70f6:	38 85       	ldd	r19, Y+8	; 0x08
    70f8:	fc 01       	movw	r30, r24
    70fa:	33 83       	std	Z+3, r19	; 0x03
    70fc:	22 83       	std	Z+2, r18	; 0x02
    70fe:	8b 81       	ldd	r24, Y+3	; 0x03
    7100:	9c 81       	ldd	r25, Y+4	; 0x04
    7102:	29 85       	ldd	r18, Y+9	; 0x09
    7104:	3a 85       	ldd	r19, Y+10	; 0x0a
    7106:	fc 01       	movw	r30, r24
    7108:	35 83       	std	Z+5, r19	; 0x05
    710a:	24 83       	std	Z+4, r18	; 0x04
    710c:	8b 81       	ldd	r24, Y+3	; 0x03
    710e:	9c 81       	ldd	r25, Y+4	; 0x04
    7110:	fc 01       	movw	r30, r24
    7112:	80 81       	ld	r24, Z
    7114:	91 81       	ldd	r25, Z+1	; 0x01
    7116:	61 e0       	ldi	r22, 0x01	; 1
    7118:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    711c:	1a 82       	std	Y+2, r1	; 0x02
    711e:	19 82       	std	Y+1, r1	; 0x01
    7120:	29 81       	ldd	r18, Y+1	; 0x01
    7122:	3a 81       	ldd	r19, Y+2	; 0x02
    7124:	89 85       	ldd	r24, Y+9	; 0x09
    7126:	9a 85       	ldd	r25, Y+10	; 0x0a
    7128:	28 17       	cp	r18, r24
    712a:	39 07       	cpc	r19, r25
    712c:	bc f4       	brge	.+46     	; 0x715c <_ZN6HCSR044initEiPii+0x9e>
    712e:	8b 81       	ldd	r24, Y+3	; 0x03
    7130:	9c 81       	ldd	r25, Y+4	; 0x04
    7132:	fc 01       	movw	r30, r24
    7134:	22 81       	ldd	r18, Z+2	; 0x02
    7136:	33 81       	ldd	r19, Z+3	; 0x03
    7138:	89 81       	ldd	r24, Y+1	; 0x01
    713a:	9a 81       	ldd	r25, Y+2	; 0x02
    713c:	88 0f       	add	r24, r24
    713e:	99 1f       	adc	r25, r25
    7140:	82 0f       	add	r24, r18
    7142:	93 1f       	adc	r25, r19
    7144:	fc 01       	movw	r30, r24
    7146:	80 81       	ld	r24, Z
    7148:	91 81       	ldd	r25, Z+1	; 0x01
    714a:	60 e0       	ldi	r22, 0x00	; 0
    714c:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    7150:	89 81       	ldd	r24, Y+1	; 0x01
    7152:	9a 81       	ldd	r25, Y+2	; 0x02
    7154:	01 96       	adiw	r24, 0x01	; 1
    7156:	9a 83       	std	Y+2, r25	; 0x02
    7158:	89 83       	std	Y+1, r24	; 0x01
    715a:	e2 cf       	rjmp	.-60     	; 0x7120 <_ZN6HCSR044initEiPii+0x62>
    715c:	00 00       	nop
    715e:	2a 96       	adiw	r28, 0x0a	; 10
    7160:	0f b6       	in	r0, 0x3f	; 63
    7162:	f8 94       	cli
    7164:	de bf       	out	0x3e, r29	; 62
    7166:	0f be       	out	0x3f, r0	; 63
    7168:	cd bf       	out	0x3d, r28	; 61
    716a:	df 91       	pop	r29
    716c:	cf 91       	pop	r28
    716e:	08 95       	ret

00007170 <_ZN6HCSR04C1Eii>:
    7170:	cf 93       	push	r28
    7172:	df 93       	push	r29
    7174:	00 d0       	rcall	.+0      	; 0x7176 <_ZN6HCSR04C1Eii+0x6>
    7176:	00 d0       	rcall	.+0      	; 0x7178 <_ZN6HCSR04C1Eii+0x8>
    7178:	cd b7       	in	r28, 0x3d	; 61
    717a:	de b7       	in	r29, 0x3e	; 62
    717c:	9a 83       	std	Y+2, r25	; 0x02
    717e:	89 83       	std	Y+1, r24	; 0x01
    7180:	7c 83       	std	Y+4, r23	; 0x04
    7182:	6b 83       	std	Y+3, r22	; 0x03
    7184:	5e 83       	std	Y+6, r21	; 0x06
    7186:	4d 83       	std	Y+5, r20	; 0x05
    7188:	82 e0       	ldi	r24, 0x02	; 2
    718a:	90 e0       	ldi	r25, 0x00	; 0
    718c:	0e 94 17 5c 	call	0xb82e	; 0xb82e <_Znaj>
    7190:	ac 01       	movw	r20, r24
    7192:	9a 01       	movw	r18, r20
    7194:	8d 81       	ldd	r24, Y+5	; 0x05
    7196:	9e 81       	ldd	r25, Y+6	; 0x06
    7198:	f9 01       	movw	r30, r18
    719a:	91 83       	std	Z+1, r25	; 0x01
    719c:	80 83       	st	Z, r24
    719e:	6b 81       	ldd	r22, Y+3	; 0x03
    71a0:	7c 81       	ldd	r23, Y+4	; 0x04
    71a2:	89 81       	ldd	r24, Y+1	; 0x01
    71a4:	9a 81       	ldd	r25, Y+2	; 0x02
    71a6:	21 e0       	ldi	r18, 0x01	; 1
    71a8:	30 e0       	ldi	r19, 0x00	; 0
    71aa:	89 df       	rcall	.-238    	; 0x70be <_ZN6HCSR044initEiPii>
    71ac:	00 00       	nop
    71ae:	26 96       	adiw	r28, 0x06	; 6
    71b0:	0f b6       	in	r0, 0x3f	; 63
    71b2:	f8 94       	cli
    71b4:	de bf       	out	0x3e, r29	; 62
    71b6:	0f be       	out	0x3f, r0	; 63
    71b8:	cd bf       	out	0x3d, r28	; 61
    71ba:	df 91       	pop	r29
    71bc:	cf 91       	pop	r28
    71be:	08 95       	ret

000071c0 <_ZN6HCSR04D1Ev>:
HCSR04::~HCSR04()
    71c0:	cf 93       	push	r28
    71c2:	df 93       	push	r29
    71c4:	1f 92       	push	r1
    71c6:	1f 92       	push	r1
    71c8:	cd b7       	in	r28, 0x3d	; 61
    71ca:	de b7       	in	r29, 0x3e	; 62
    71cc:	9a 83       	std	Y+2, r25	; 0x02
    71ce:	89 83       	std	Y+1, r24	; 0x01
{
	~this->out;
	delete[] this->echo;
    71d0:	89 81       	ldd	r24, Y+1	; 0x01
    71d2:	9a 81       	ldd	r25, Y+2	; 0x02
    71d4:	fc 01       	movw	r30, r24
    71d6:	82 81       	ldd	r24, Z+2	; 0x02
    71d8:	93 81       	ldd	r25, Z+3	; 0x03
    71da:	89 2b       	or	r24, r25
    71dc:	39 f0       	breq	.+14     	; 0x71ec <_ZN6HCSR04D1Ev+0x2c>
    71de:	89 81       	ldd	r24, Y+1	; 0x01
    71e0:	9a 81       	ldd	r25, Y+2	; 0x02
    71e2:	fc 01       	movw	r30, r24
    71e4:	82 81       	ldd	r24, Z+2	; 0x02
    71e6:	93 81       	ldd	r25, Z+3	; 0x03
    71e8:	0e 94 18 5c 	call	0xb830	; 0xb830 <_ZdaPv>
	~this->n;
}
    71ec:	00 00       	nop
    71ee:	0f 90       	pop	r0
    71f0:	0f 90       	pop	r0
    71f2:	df 91       	pop	r29
    71f4:	cf 91       	pop	r28
    71f6:	08 95       	ret

000071f8 <_ZNK6HCSR044distEi>:
///////////////////////////////////////////////////dist
float HCSR04::dist(int n) const
{
    71f8:	cf 93       	push	r28
    71fa:	df 93       	push	r29
    71fc:	cd b7       	in	r28, 0x3d	; 61
    71fe:	de b7       	in	r29, 0x3e	; 62
    7200:	28 97       	sbiw	r28, 0x08	; 8
    7202:	0f b6       	in	r0, 0x3f	; 63
    7204:	f8 94       	cli
    7206:	de bf       	out	0x3e, r29	; 62
    7208:	0f be       	out	0x3f, r0	; 63
    720a:	cd bf       	out	0x3d, r28	; 61
    720c:	9e 83       	std	Y+6, r25	; 0x06
    720e:	8d 83       	std	Y+5, r24	; 0x05
    7210:	78 87       	std	Y+8, r23	; 0x08
    7212:	6f 83       	std	Y+7, r22	; 0x07
	digitalWrite(this->out, LOW);
    7214:	8d 81       	ldd	r24, Y+5	; 0x05
    7216:	9e 81       	ldd	r25, Y+6	; 0x06
    7218:	fc 01       	movw	r30, r24
    721a:	80 81       	ld	r24, Z
    721c:	91 81       	ldd	r25, Z+1	; 0x01
    721e:	60 e0       	ldi	r22, 0x00	; 0
    7220:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
	delayMicroseconds(2);
    7224:	82 e0       	ldi	r24, 0x02	; 2
    7226:	90 e0       	ldi	r25, 0x00	; 0
    7228:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
	digitalWrite(this->out, HIGH);
    722c:	8d 81       	ldd	r24, Y+5	; 0x05
    722e:	9e 81       	ldd	r25, Y+6	; 0x06
    7230:	fc 01       	movw	r30, r24
    7232:	80 81       	ld	r24, Z
    7234:	91 81       	ldd	r25, Z+1	; 0x01
    7236:	61 e0       	ldi	r22, 0x01	; 1
    7238:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
	delayMicroseconds(10);
    723c:	8a e0       	ldi	r24, 0x0A	; 10
    723e:	90 e0       	ldi	r25, 0x00	; 0
    7240:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
	digitalWrite(this->out, LOW);
    7244:	8d 81       	ldd	r24, Y+5	; 0x05
    7246:	9e 81       	ldd	r25, Y+6	; 0x06
    7248:	fc 01       	movw	r30, r24
    724a:	80 81       	ld	r24, Z
    724c:	91 81       	ldd	r25, Z+1	; 0x01
    724e:	60 e0       	ldi	r22, 0x00	; 0
    7250:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
	noInterrupts();
    7254:	f8 94       	cli
	float d=pulseIn(this->echo[n], HIGH);
    7256:	8d 81       	ldd	r24, Y+5	; 0x05
    7258:	9e 81       	ldd	r25, Y+6	; 0x06
    725a:	fc 01       	movw	r30, r24
    725c:	22 81       	ldd	r18, Z+2	; 0x02
    725e:	33 81       	ldd	r19, Z+3	; 0x03
    7260:	8f 81       	ldd	r24, Y+7	; 0x07
    7262:	98 85       	ldd	r25, Y+8	; 0x08
    7264:	88 0f       	add	r24, r24
    7266:	99 1f       	adc	r25, r25
    7268:	82 0f       	add	r24, r18
    726a:	93 1f       	adc	r25, r19
    726c:	fc 01       	movw	r30, r24
    726e:	80 81       	ld	r24, Z
    7270:	91 81       	ldd	r25, Z+1	; 0x01
    7272:	20 e4       	ldi	r18, 0x40	; 64
    7274:	32 e4       	ldi	r19, 0x42	; 66
    7276:	4f e0       	ldi	r20, 0x0F	; 15
    7278:	50 e0       	ldi	r21, 0x00	; 0
    727a:	61 e0       	ldi	r22, 0x01	; 1
    727c:	0e 94 25 61 	call	0xc24a	; 0xc24a <pulseIn>
    7280:	dc 01       	movw	r26, r24
    7282:	cb 01       	movw	r24, r22
    7284:	bc 01       	movw	r22, r24
    7286:	cd 01       	movw	r24, r26
    7288:	0e 94 ef 58 	call	0xb1de	; 0xb1de <__floatunsisf>
    728c:	dc 01       	movw	r26, r24
    728e:	cb 01       	movw	r24, r22
    7290:	89 83       	std	Y+1, r24	; 0x01
    7292:	9a 83       	std	Y+2, r25	; 0x02
    7294:	ab 83       	std	Y+3, r26	; 0x03
    7296:	bc 83       	std	Y+4, r27	; 0x04
	interrupts();
    7298:	78 94       	sei
	return d / 58.0;
    729a:	20 e0       	ldi	r18, 0x00	; 0
    729c:	30 e0       	ldi	r19, 0x00	; 0
    729e:	48 e6       	ldi	r20, 0x68	; 104
    72a0:	52 e4       	ldi	r21, 0x42	; 66
    72a2:	69 81       	ldd	r22, Y+1	; 0x01
    72a4:	7a 81       	ldd	r23, Y+2	; 0x02
    72a6:	8b 81       	ldd	r24, Y+3	; 0x03
    72a8:	9c 81       	ldd	r25, Y+4	; 0x04
    72aa:	0e 94 5b 58 	call	0xb0b6	; 0xb0b6 <__divsf3>
    72ae:	dc 01       	movw	r26, r24
    72b0:	cb 01       	movw	r24, r22
}
    72b2:	bc 01       	movw	r22, r24
    72b4:	cd 01       	movw	r24, r26
    72b6:	28 96       	adiw	r28, 0x08	; 8
    72b8:	0f b6       	in	r0, 0x3f	; 63
    72ba:	f8 94       	cli
    72bc:	de bf       	out	0x3e, r29	; 62
    72be:	0f be       	out	0x3f, r0	; 63
    72c0:	cd bf       	out	0x3d, r28	; 61
    72c2:	df 91       	pop	r29
    72c4:	cf 91       	pop	r28
    72c6:	08 95       	ret

000072c8 <_ZNK6HCSR044distEv>:
float HCSR04::dist() const{return this->dist(0);}
    72c8:	cf 93       	push	r28
    72ca:	df 93       	push	r29
    72cc:	1f 92       	push	r1
    72ce:	1f 92       	push	r1
    72d0:	cd b7       	in	r28, 0x3d	; 61
    72d2:	de b7       	in	r29, 0x3e	; 62
    72d4:	9a 83       	std	Y+2, r25	; 0x02
    72d6:	89 83       	std	Y+1, r24	; 0x01
    72d8:	89 81       	ldd	r24, Y+1	; 0x01
    72da:	9a 81       	ldd	r25, Y+2	; 0x02
    72dc:	60 e0       	ldi	r22, 0x00	; 0
    72de:	70 e0       	ldi	r23, 0x00	; 0
    72e0:	8b df       	rcall	.-234    	; 0x71f8 <_ZNK6HCSR044distEi>
    72e2:	dc 01       	movw	r26, r24
    72e4:	cb 01       	movw	r24, r22
    72e6:	bc 01       	movw	r22, r24
    72e8:	cd 01       	movw	r24, r26
    72ea:	0f 90       	pop	r0
    72ec:	0f 90       	pop	r0
    72ee:	df 91       	pop	r29
    72f0:	cf 91       	pop	r28
    72f2:	08 95       	ret

000072f4 <_ZN3KeyC1Ev>:
*/
#include <Key.h>


// default constructor
Key::Key() {
    72f4:	cf 93       	push	r28
    72f6:	df 93       	push	r29
    72f8:	1f 92       	push	r1
    72fa:	1f 92       	push	r1
    72fc:	cd b7       	in	r28, 0x3d	; 61
    72fe:	de b7       	in	r29, 0x3e	; 62
    7300:	9a 83       	std	Y+2, r25	; 0x02
    7302:	89 83       	std	Y+1, r24	; 0x01
	kchar = NO_KEY;
    7304:	89 81       	ldd	r24, Y+1	; 0x01
    7306:	9a 81       	ldd	r25, Y+2	; 0x02
    7308:	fc 01       	movw	r30, r24
    730a:	10 82       	st	Z, r1
	kstate = IDLE;
    730c:	89 81       	ldd	r24, Y+1	; 0x01
    730e:	9a 81       	ldd	r25, Y+2	; 0x02
    7310:	fc 01       	movw	r30, r24
    7312:	13 82       	std	Z+3, r1	; 0x03
	stateChanged = false;
    7314:	89 81       	ldd	r24, Y+1	; 0x01
    7316:	9a 81       	ldd	r25, Y+2	; 0x02
    7318:	fc 01       	movw	r30, r24
    731a:	14 82       	std	Z+4, r1	; 0x04
}
    731c:	00 00       	nop
    731e:	0f 90       	pop	r0
    7320:	0f 90       	pop	r0
    7322:	df 91       	pop	r29
    7324:	cf 91       	pop	r28
    7326:	08 95       	ret

00007328 <_ZN6Keypad8pin_modeEhh>:
    holdTime = hold;
}

void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
}
    7328:	cf 93       	push	r28
    732a:	df 93       	push	r29
    732c:	00 d0       	rcall	.+0      	; 0x732e <_ZN6Keypad8pin_modeEhh+0x6>
    732e:	1f 92       	push	r1
    7330:	cd b7       	in	r28, 0x3d	; 61
    7332:	de b7       	in	r29, 0x3e	; 62
    7334:	9a 83       	std	Y+2, r25	; 0x02
    7336:	89 83       	std	Y+1, r24	; 0x01
    7338:	6b 83       	std	Y+3, r22	; 0x03
    733a:	4c 83       	std	Y+4, r20	; 0x04
    733c:	6c 81       	ldd	r22, Y+4	; 0x04
    733e:	8b 81       	ldd	r24, Y+3	; 0x03
    7340:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    7344:	00 00       	nop
    7346:	0f 90       	pop	r0
    7348:	0f 90       	pop	r0
    734a:	0f 90       	pop	r0
    734c:	0f 90       	pop	r0
    734e:	df 91       	pop	r29
    7350:	cf 91       	pop	r28
    7352:	08 95       	ret

00007354 <_ZN6Keypad9pin_writeEhb>:
    7354:	cf 93       	push	r28
    7356:	df 93       	push	r29
    7358:	00 d0       	rcall	.+0      	; 0x735a <_ZN6Keypad9pin_writeEhb+0x6>
    735a:	1f 92       	push	r1
    735c:	cd b7       	in	r28, 0x3d	; 61
    735e:	de b7       	in	r29, 0x3e	; 62
    7360:	9a 83       	std	Y+2, r25	; 0x02
    7362:	89 83       	std	Y+1, r24	; 0x01
    7364:	6b 83       	std	Y+3, r22	; 0x03
    7366:	4c 83       	std	Y+4, r20	; 0x04
    7368:	8c 81       	ldd	r24, Y+4	; 0x04
    736a:	68 2f       	mov	r22, r24
    736c:	8b 81       	ldd	r24, Y+3	; 0x03
    736e:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    7372:	00 00       	nop
    7374:	0f 90       	pop	r0
    7376:	0f 90       	pop	r0
    7378:	0f 90       	pop	r0
    737a:	0f 90       	pop	r0
    737c:	df 91       	pop	r29
    737e:	cf 91       	pop	r28
    7380:	08 95       	ret

00007382 <_ZN6Keypad8pin_readEh>:
    7382:	cf 93       	push	r28
    7384:	df 93       	push	r29
    7386:	00 d0       	rcall	.+0      	; 0x7388 <_ZN6Keypad8pin_readEh+0x6>
    7388:	cd b7       	in	r28, 0x3d	; 61
    738a:	de b7       	in	r29, 0x3e	; 62
    738c:	9a 83       	std	Y+2, r25	; 0x02
    738e:	89 83       	std	Y+1, r24	; 0x01
    7390:	6b 83       	std	Y+3, r22	; 0x03
    7392:	8b 81       	ldd	r24, Y+3	; 0x03
    7394:	0e 94 fd 60 	call	0xc1fa	; 0xc1fa <digitalRead>
    7398:	0f 90       	pop	r0
    739a:	0f 90       	pop	r0
    739c:	0f 90       	pop	r0
    739e:	df 91       	pop	r29
    73a0:	cf 91       	pop	r28
    73a2:	08 95       	ret

000073a4 <_ZN6KeypadC1EPcPhS1_hh>:
    73a4:	ef 92       	push	r14
    73a6:	ff 92       	push	r15
    73a8:	0f 93       	push	r16
    73aa:	1f 93       	push	r17
    73ac:	cf 93       	push	r28
    73ae:	df 93       	push	r29
    73b0:	cd b7       	in	r28, 0x3d	; 61
    73b2:	de b7       	in	r29, 0x3e	; 62
    73b4:	2a 97       	sbiw	r28, 0x0a	; 10
    73b6:	0f b6       	in	r0, 0x3f	; 63
    73b8:	f8 94       	cli
    73ba:	de bf       	out	0x3e, r29	; 62
    73bc:	0f be       	out	0x3f, r0	; 63
    73be:	cd bf       	out	0x3d, r28	; 61
    73c0:	9a 83       	std	Y+2, r25	; 0x02
    73c2:	89 83       	std	Y+1, r24	; 0x01
    73c4:	7c 83       	std	Y+4, r23	; 0x04
    73c6:	6b 83       	std	Y+3, r22	; 0x03
    73c8:	5e 83       	std	Y+6, r21	; 0x06
    73ca:	4d 83       	std	Y+5, r20	; 0x05
    73cc:	38 87       	std	Y+8, r19	; 0x08
    73ce:	2f 83       	std	Y+7, r18	; 0x07
    73d0:	09 87       	std	Y+9, r16	; 0x09
    73d2:	ea 86       	std	Y+10, r14	; 0x0a
    73d4:	89 81       	ldd	r24, Y+1	; 0x01
    73d6:	9a 81       	ldd	r25, Y+2	; 0x02
    73d8:	02 96       	adiw	r24, 0x02	; 2
    73da:	8c df       	rcall	.-232    	; 0x72f4 <_ZN3KeyC1Ev>
    73dc:	29 ef       	ldi	r18, 0xF9	; 249
    73de:	32 e0       	ldi	r19, 0x02	; 2
    73e0:	89 81       	ldd	r24, Y+1	; 0x01
    73e2:	9a 81       	ldd	r25, Y+2	; 0x02
    73e4:	fc 01       	movw	r30, r24
    73e6:	31 83       	std	Z+1, r19	; 0x01
    73e8:	20 83       	st	Z, r18
    73ea:	89 81       	ldd	r24, Y+1	; 0x01
    73ec:	9a 81       	ldd	r25, Y+2	; 0x02
    73ee:	4b 96       	adiw	r24, 0x1b	; 27
    73f0:	09 e0       	ldi	r16, 0x09	; 9
    73f2:	10 e0       	ldi	r17, 0x00	; 0
    73f4:	7c 01       	movw	r14, r24
    73f6:	0f 3f       	cpi	r16, 0xFF	; 255
    73f8:	ff ef       	ldi	r31, 0xFF	; 255
    73fa:	1f 07       	cpc	r17, r31
    73fc:	41 f0       	breq	.+16     	; 0x740e <_ZN6KeypadC1EPcPhS1_hh+0x6a>
    73fe:	c7 01       	movw	r24, r14
    7400:	79 df       	rcall	.-270    	; 0x72f4 <_ZN3KeyC1Ev>
    7402:	85 e0       	ldi	r24, 0x05	; 5
    7404:	e8 0e       	add	r14, r24
    7406:	f1 1c       	adc	r15, r1
    7408:	01 50       	subi	r16, 0x01	; 1
    740a:	11 09       	sbc	r17, r1
    740c:	f4 cf       	rjmp	.-24     	; 0x73f6 <_ZN6KeypadC1EPcPhS1_hh+0x52>
    740e:	89 81       	ldd	r24, Y+1	; 0x01
    7410:	9a 81       	ldd	r25, Y+2	; 0x02
    7412:	89 5a       	subi	r24, 0xA9	; 169
    7414:	9f 4f       	sbci	r25, 0xFF	; 255
    7416:	2d 81       	ldd	r18, Y+5	; 0x05
    7418:	3e 81       	ldd	r19, Y+6	; 0x06
    741a:	fc 01       	movw	r30, r24
    741c:	31 83       	std	Z+1, r19	; 0x01
    741e:	20 83       	st	Z, r18
    7420:	89 81       	ldd	r24, Y+1	; 0x01
    7422:	9a 81       	ldd	r25, Y+2	; 0x02
    7424:	87 5a       	subi	r24, 0xA7	; 167
    7426:	9f 4f       	sbci	r25, 0xFF	; 255
    7428:	2f 81       	ldd	r18, Y+7	; 0x07
    742a:	38 85       	ldd	r19, Y+8	; 0x08
    742c:	fc 01       	movw	r30, r24
    742e:	31 83       	std	Z+1, r19	; 0x01
    7430:	20 83       	st	Z, r18
    7432:	89 81       	ldd	r24, Y+1	; 0x01
    7434:	9a 81       	ldd	r25, Y+2	; 0x02
    7436:	85 5a       	subi	r24, 0xA5	; 165
    7438:	9f 4f       	sbci	r25, 0xFF	; 255
    743a:	29 85       	ldd	r18, Y+9	; 0x09
    743c:	fc 01       	movw	r30, r24
    743e:	20 83       	st	Z, r18
    7440:	89 81       	ldd	r24, Y+1	; 0x01
    7442:	9a 81       	ldd	r25, Y+2	; 0x02
    7444:	84 5a       	subi	r24, 0xA4	; 164
    7446:	9f 4f       	sbci	r25, 0xFF	; 255
    7448:	2a 85       	ldd	r18, Y+10	; 0x0a
    744a:	fc 01       	movw	r30, r24
    744c:	20 83       	st	Z, r18
    744e:	2b 81       	ldd	r18, Y+3	; 0x03
    7450:	3c 81       	ldd	r19, Y+4	; 0x04
    7452:	89 81       	ldd	r24, Y+1	; 0x01
    7454:	9a 81       	ldd	r25, Y+2	; 0x02
    7456:	b9 01       	movw	r22, r18
    7458:	2e d0       	rcall	.+92     	; 0x74b6 <_ZN6Keypad5beginEPc>
    745a:	89 81       	ldd	r24, Y+1	; 0x01
    745c:	9a 81       	ldd	r25, Y+2	; 0x02
    745e:	6a e0       	ldi	r22, 0x0A	; 10
    7460:	70 e0       	ldi	r23, 0x00	; 0
    7462:	55 d4       	rcall	.+2218   	; 0x7d0e <_ZN6Keypad15setDebounceTimeEj>
    7464:	89 81       	ldd	r24, Y+1	; 0x01
    7466:	9a 81       	ldd	r25, Y+2	; 0x02
    7468:	64 ef       	ldi	r22, 0xF4	; 244
    746a:	71 e0       	ldi	r23, 0x01	; 1
    746c:	79 d4       	rcall	.+2290   	; 0x7d60 <_ZN6Keypad11setHoldTimeEj>
    746e:	89 81       	ldd	r24, Y+1	; 0x01
    7470:	9a 81       	ldd	r25, Y+2	; 0x02
    7472:	8e 59       	subi	r24, 0x9E	; 158
    7474:	9f 4f       	sbci	r25, 0xFF	; 255
    7476:	fc 01       	movw	r30, r24
    7478:	11 82       	std	Z+1, r1	; 0x01
    747a:	10 82       	st	Z, r1
    747c:	89 81       	ldd	r24, Y+1	; 0x01
    747e:	9a 81       	ldd	r25, Y+2	; 0x02
    7480:	8f 5a       	subi	r24, 0xAF	; 175
    7482:	9f 4f       	sbci	r25, 0xFF	; 255
    7484:	fc 01       	movw	r30, r24
    7486:	10 82       	st	Z, r1
    7488:	11 82       	std	Z+1, r1	; 0x01
    748a:	12 82       	std	Z+2, r1	; 0x02
    748c:	13 82       	std	Z+3, r1	; 0x03
    748e:	89 81       	ldd	r24, Y+1	; 0x01
    7490:	9a 81       	ldd	r25, Y+2	; 0x02
    7492:	8f 59       	subi	r24, 0x9F	; 159
    7494:	9f 4f       	sbci	r25, 0xFF	; 255
    7496:	fc 01       	movw	r30, r24
    7498:	10 82       	st	Z, r1
    749a:	00 00       	nop
    749c:	2a 96       	adiw	r28, 0x0a	; 10
    749e:	0f b6       	in	r0, 0x3f	; 63
    74a0:	f8 94       	cli
    74a2:	de bf       	out	0x3e, r29	; 62
    74a4:	0f be       	out	0x3f, r0	; 63
    74a6:	cd bf       	out	0x3d, r28	; 61
    74a8:	df 91       	pop	r29
    74aa:	cf 91       	pop	r28
    74ac:	1f 91       	pop	r17
    74ae:	0f 91       	pop	r16
    74b0:	ff 90       	pop	r15
    74b2:	ef 90       	pop	r14
    74b4:	08 95       	ret

000074b6 <_ZN6Keypad5beginEPc>:
    74b6:	cf 93       	push	r28
    74b8:	df 93       	push	r29
    74ba:	00 d0       	rcall	.+0      	; 0x74bc <_ZN6Keypad5beginEPc+0x6>
    74bc:	1f 92       	push	r1
    74be:	cd b7       	in	r28, 0x3d	; 61
    74c0:	de b7       	in	r29, 0x3e	; 62
    74c2:	9a 83       	std	Y+2, r25	; 0x02
    74c4:	89 83       	std	Y+1, r24	; 0x01
    74c6:	7c 83       	std	Y+4, r23	; 0x04
    74c8:	6b 83       	std	Y+3, r22	; 0x03
    74ca:	89 81       	ldd	r24, Y+1	; 0x01
    74cc:	9a 81       	ldd	r25, Y+2	; 0x02
    74ce:	8b 5a       	subi	r24, 0xAB	; 171
    74d0:	9f 4f       	sbci	r25, 0xFF	; 255
    74d2:	2b 81       	ldd	r18, Y+3	; 0x03
    74d4:	3c 81       	ldd	r19, Y+4	; 0x04
    74d6:	fc 01       	movw	r30, r24
    74d8:	31 83       	std	Z+1, r19	; 0x01
    74da:	20 83       	st	Z, r18
    74dc:	00 00       	nop
    74de:	0f 90       	pop	r0
    74e0:	0f 90       	pop	r0
    74e2:	0f 90       	pop	r0
    74e4:	0f 90       	pop	r0
    74e6:	df 91       	pop	r29
    74e8:	cf 91       	pop	r28
    74ea:	08 95       	ret

000074ec <_ZN6Keypad6getKeyEv>:
    74ec:	cf 93       	push	r28
    74ee:	df 93       	push	r29
    74f0:	1f 92       	push	r1
    74f2:	1f 92       	push	r1
    74f4:	cd b7       	in	r28, 0x3d	; 61
    74f6:	de b7       	in	r29, 0x3e	; 62
    74f8:	9a 83       	std	Y+2, r25	; 0x02
    74fa:	89 83       	std	Y+1, r24	; 0x01
    74fc:	89 81       	ldd	r24, Y+1	; 0x01
    74fe:	9a 81       	ldd	r25, Y+2	; 0x02
    7500:	8f 59       	subi	r24, 0x9F	; 159
    7502:	9f 4f       	sbci	r25, 0xFF	; 255
    7504:	21 e0       	ldi	r18, 0x01	; 1
    7506:	fc 01       	movw	r30, r24
    7508:	20 83       	st	Z, r18
    750a:	89 81       	ldd	r24, Y+1	; 0x01
    750c:	9a 81       	ldd	r25, Y+2	; 0x02
    750e:	24 d0       	rcall	.+72     	; 0x7558 <_ZN6Keypad7getKeysEv>
    7510:	88 23       	and	r24, r24
    7512:	71 f0       	breq	.+28     	; 0x7530 <_ZN6Keypad6getKeyEv+0x44>
    7514:	89 81       	ldd	r24, Y+1	; 0x01
    7516:	9a 81       	ldd	r25, Y+2	; 0x02
    7518:	fc 01       	movw	r30, r24
    751a:	87 8d       	ldd	r24, Z+31	; 0x1f
    751c:	88 23       	and	r24, r24
    751e:	41 f0       	breq	.+16     	; 0x7530 <_ZN6Keypad6getKeyEv+0x44>
    7520:	89 81       	ldd	r24, Y+1	; 0x01
    7522:	9a 81       	ldd	r25, Y+2	; 0x02
    7524:	fc 01       	movw	r30, r24
    7526:	86 8d       	ldd	r24, Z+30	; 0x1e
    7528:	81 30       	cpi	r24, 0x01	; 1
    752a:	11 f4       	brne	.+4      	; 0x7530 <_ZN6Keypad6getKeyEv+0x44>
    752c:	81 e0       	ldi	r24, 0x01	; 1
    752e:	01 c0       	rjmp	.+2      	; 0x7532 <_ZN6Keypad6getKeyEv+0x46>
    7530:	80 e0       	ldi	r24, 0x00	; 0
    7532:	88 23       	and	r24, r24
    7534:	29 f0       	breq	.+10     	; 0x7540 <_ZN6Keypad6getKeyEv+0x54>
    7536:	89 81       	ldd	r24, Y+1	; 0x01
    7538:	9a 81       	ldd	r25, Y+2	; 0x02
    753a:	fc 01       	movw	r30, r24
    753c:	83 8d       	ldd	r24, Z+27	; 0x1b
    753e:	07 c0       	rjmp	.+14     	; 0x754e <_ZN6Keypad6getKeyEv+0x62>
    7540:	89 81       	ldd	r24, Y+1	; 0x01
    7542:	9a 81       	ldd	r25, Y+2	; 0x02
    7544:	8f 59       	subi	r24, 0x9F	; 159
    7546:	9f 4f       	sbci	r25, 0xFF	; 255
    7548:	fc 01       	movw	r30, r24
    754a:	10 82       	st	Z, r1
    754c:	80 e0       	ldi	r24, 0x00	; 0
    754e:	0f 90       	pop	r0
    7550:	0f 90       	pop	r0
    7552:	df 91       	pop	r29
    7554:	cf 91       	pop	r28
    7556:	08 95       	ret

00007558 <_ZN6Keypad7getKeysEv>:
    7558:	cf 93       	push	r28
    755a:	df 93       	push	r29
    755c:	00 d0       	rcall	.+0      	; 0x755e <_ZN6Keypad7getKeysEv+0x6>
    755e:	cd b7       	in	r28, 0x3d	; 61
    7560:	de b7       	in	r29, 0x3e	; 62
    7562:	9b 83       	std	Y+3, r25	; 0x03
    7564:	8a 83       	std	Y+2, r24	; 0x02
    7566:	19 82       	std	Y+1, r1	; 0x01
    7568:	0e 94 7c 5e 	call	0xbcf8	; 0xbcf8 <millis>
    756c:	9b 01       	movw	r18, r22
    756e:	ac 01       	movw	r20, r24
    7570:	8a 81       	ldd	r24, Y+2	; 0x02
    7572:	9b 81       	ldd	r25, Y+3	; 0x03
    7574:	8f 5a       	subi	r24, 0xAF	; 175
    7576:	9f 4f       	sbci	r25, 0xFF	; 255
    7578:	fc 01       	movw	r30, r24
    757a:	80 81       	ld	r24, Z
    757c:	91 81       	ldd	r25, Z+1	; 0x01
    757e:	a2 81       	ldd	r26, Z+2	; 0x02
    7580:	b3 81       	ldd	r27, Z+3	; 0x03
    7582:	28 1b       	sub	r18, r24
    7584:	39 0b       	sbc	r19, r25
    7586:	4a 0b       	sbc	r20, r26
    7588:	5b 0b       	sbc	r21, r27
    758a:	8a 81       	ldd	r24, Y+2	; 0x02
    758c:	9b 81       	ldd	r25, Y+3	; 0x03
    758e:	83 5a       	subi	r24, 0xA3	; 163
    7590:	9f 4f       	sbci	r25, 0xFF	; 255
    7592:	fc 01       	movw	r30, r24
    7594:	80 81       	ld	r24, Z
    7596:	91 81       	ldd	r25, Z+1	; 0x01
    7598:	cc 01       	movw	r24, r24
    759a:	a0 e0       	ldi	r26, 0x00	; 0
    759c:	b0 e0       	ldi	r27, 0x00	; 0
    759e:	61 e0       	ldi	r22, 0x01	; 1
    75a0:	82 17       	cp	r24, r18
    75a2:	93 07       	cpc	r25, r19
    75a4:	a4 07       	cpc	r26, r20
    75a6:	b5 07       	cpc	r27, r21
    75a8:	08 f0       	brcs	.+2      	; 0x75ac <_ZN6Keypad7getKeysEv+0x54>
    75aa:	60 e0       	ldi	r22, 0x00	; 0
    75ac:	66 23       	and	r22, r22
    75ae:	a1 f0       	breq	.+40     	; 0x75d8 <_ZN6Keypad7getKeysEv+0x80>
    75b0:	8a 81       	ldd	r24, Y+2	; 0x02
    75b2:	9b 81       	ldd	r25, Y+3	; 0x03
    75b4:	18 d0       	rcall	.+48     	; 0x75e6 <_ZN6Keypad8scanKeysEv>
    75b6:	8a 81       	ldd	r24, Y+2	; 0x02
    75b8:	9b 81       	ldd	r25, Y+3	; 0x03
    75ba:	58 d1       	rcall	.+688    	; 0x786c <_ZN6Keypad10updateListEv>
    75bc:	89 83       	std	Y+1, r24	; 0x01
    75be:	0e 94 7c 5e 	call	0xbcf8	; 0xbcf8 <millis>
    75c2:	dc 01       	movw	r26, r24
    75c4:	cb 01       	movw	r24, r22
    75c6:	2a 81       	ldd	r18, Y+2	; 0x02
    75c8:	3b 81       	ldd	r19, Y+3	; 0x03
    75ca:	2f 5a       	subi	r18, 0xAF	; 175
    75cc:	3f 4f       	sbci	r19, 0xFF	; 255
    75ce:	f9 01       	movw	r30, r18
    75d0:	80 83       	st	Z, r24
    75d2:	91 83       	std	Z+1, r25	; 0x01
    75d4:	a2 83       	std	Z+2, r26	; 0x02
    75d6:	b3 83       	std	Z+3, r27	; 0x03
    75d8:	89 81       	ldd	r24, Y+1	; 0x01
    75da:	0f 90       	pop	r0
    75dc:	0f 90       	pop	r0
    75de:	0f 90       	pop	r0
    75e0:	df 91       	pop	r29
    75e2:	cf 91       	pop	r28
    75e4:	08 95       	ret

000075e6 <_ZN6Keypad8scanKeysEv>:
    75e6:	cf 93       	push	r28
    75e8:	df 93       	push	r29
    75ea:	00 d0       	rcall	.+0      	; 0x75ec <_ZN6Keypad8scanKeysEv+0x6>
    75ec:	1f 92       	push	r1
    75ee:	1f 92       	push	r1
    75f0:	cd b7       	in	r28, 0x3d	; 61
    75f2:	de b7       	in	r29, 0x3e	; 62
    75f4:	9d 83       	std	Y+5, r25	; 0x05
    75f6:	8c 83       	std	Y+4, r24	; 0x04
    75f8:	19 82       	std	Y+1, r1	; 0x01
    75fa:	8c 81       	ldd	r24, Y+4	; 0x04
    75fc:	9d 81       	ldd	r25, Y+5	; 0x05
    75fe:	85 5a       	subi	r24, 0xA5	; 165
    7600:	9f 4f       	sbci	r25, 0xFF	; 255
    7602:	fc 01       	movw	r30, r24
    7604:	90 81       	ld	r25, Z
    7606:	89 81       	ldd	r24, Y+1	; 0x01
    7608:	89 17       	cp	r24, r25
    760a:	00 f5       	brcc	.+64     	; 0x764c <_ZN6Keypad8scanKeysEv+0x66>
    760c:	8c 81       	ldd	r24, Y+4	; 0x04
    760e:	9d 81       	ldd	r25, Y+5	; 0x05
    7610:	fc 01       	movw	r30, r24
    7612:	80 81       	ld	r24, Z
    7614:	91 81       	ldd	r25, Z+1	; 0x01
    7616:	fc 01       	movw	r30, r24
    7618:	20 81       	ld	r18, Z
    761a:	31 81       	ldd	r19, Z+1	; 0x01
    761c:	8c 81       	ldd	r24, Y+4	; 0x04
    761e:	9d 81       	ldd	r25, Y+5	; 0x05
    7620:	89 5a       	subi	r24, 0xA9	; 169
    7622:	9f 4f       	sbci	r25, 0xFF	; 255
    7624:	fc 01       	movw	r30, r24
    7626:	40 81       	ld	r20, Z
    7628:	51 81       	ldd	r21, Z+1	; 0x01
    762a:	89 81       	ldd	r24, Y+1	; 0x01
    762c:	88 2f       	mov	r24, r24
    762e:	90 e0       	ldi	r25, 0x00	; 0
    7630:	84 0f       	add	r24, r20
    7632:	95 1f       	adc	r25, r21
    7634:	fc 01       	movw	r30, r24
    7636:	50 81       	ld	r21, Z
    7638:	8c 81       	ldd	r24, Y+4	; 0x04
    763a:	9d 81       	ldd	r25, Y+5	; 0x05
    763c:	42 e0       	ldi	r20, 0x02	; 2
    763e:	65 2f       	mov	r22, r21
    7640:	f9 01       	movw	r30, r18
    7642:	19 95       	eicall
    7644:	89 81       	ldd	r24, Y+1	; 0x01
    7646:	8f 5f       	subi	r24, 0xFF	; 255
    7648:	89 83       	std	Y+1, r24	; 0x01
    764a:	d7 cf       	rjmp	.-82     	; 0x75fa <_ZN6Keypad8scanKeysEv+0x14>
    764c:	1a 82       	std	Y+2, r1	; 0x02
    764e:	8c 81       	ldd	r24, Y+4	; 0x04
    7650:	9d 81       	ldd	r25, Y+5	; 0x05
    7652:	84 5a       	subi	r24, 0xA4	; 164
    7654:	9f 4f       	sbci	r25, 0xFF	; 255
    7656:	fc 01       	movw	r30, r24
    7658:	90 81       	ld	r25, Z
    765a:	8a 81       	ldd	r24, Y+2	; 0x02
    765c:	89 17       	cp	r24, r25
    765e:	08 f0       	brcs	.+2      	; 0x7662 <_ZN6Keypad8scanKeysEv+0x7c>
    7660:	fc c0       	rjmp	.+504    	; 0x785a <_ZN6Keypad8scanKeysEv+0x274>
    7662:	8c 81       	ldd	r24, Y+4	; 0x04
    7664:	9d 81       	ldd	r25, Y+5	; 0x05
    7666:	fc 01       	movw	r30, r24
    7668:	80 81       	ld	r24, Z
    766a:	91 81       	ldd	r25, Z+1	; 0x01
    766c:	fc 01       	movw	r30, r24
    766e:	20 81       	ld	r18, Z
    7670:	31 81       	ldd	r19, Z+1	; 0x01
    7672:	8c 81       	ldd	r24, Y+4	; 0x04
    7674:	9d 81       	ldd	r25, Y+5	; 0x05
    7676:	87 5a       	subi	r24, 0xA7	; 167
    7678:	9f 4f       	sbci	r25, 0xFF	; 255
    767a:	fc 01       	movw	r30, r24
    767c:	40 81       	ld	r20, Z
    767e:	51 81       	ldd	r21, Z+1	; 0x01
    7680:	8a 81       	ldd	r24, Y+2	; 0x02
    7682:	88 2f       	mov	r24, r24
    7684:	90 e0       	ldi	r25, 0x00	; 0
    7686:	84 0f       	add	r24, r20
    7688:	95 1f       	adc	r25, r21
    768a:	fc 01       	movw	r30, r24
    768c:	50 81       	ld	r21, Z
    768e:	8c 81       	ldd	r24, Y+4	; 0x04
    7690:	9d 81       	ldd	r25, Y+5	; 0x05
    7692:	41 e0       	ldi	r20, 0x01	; 1
    7694:	65 2f       	mov	r22, r21
    7696:	f9 01       	movw	r30, r18
    7698:	19 95       	eicall
    769a:	8c 81       	ldd	r24, Y+4	; 0x04
    769c:	9d 81       	ldd	r25, Y+5	; 0x05
    769e:	fc 01       	movw	r30, r24
    76a0:	80 81       	ld	r24, Z
    76a2:	91 81       	ldd	r25, Z+1	; 0x01
    76a4:	02 96       	adiw	r24, 0x02	; 2
    76a6:	fc 01       	movw	r30, r24
    76a8:	20 81       	ld	r18, Z
    76aa:	31 81       	ldd	r19, Z+1	; 0x01
    76ac:	8c 81       	ldd	r24, Y+4	; 0x04
    76ae:	9d 81       	ldd	r25, Y+5	; 0x05
    76b0:	87 5a       	subi	r24, 0xA7	; 167
    76b2:	9f 4f       	sbci	r25, 0xFF	; 255
    76b4:	fc 01       	movw	r30, r24
    76b6:	40 81       	ld	r20, Z
    76b8:	51 81       	ldd	r21, Z+1	; 0x01
    76ba:	8a 81       	ldd	r24, Y+2	; 0x02
    76bc:	88 2f       	mov	r24, r24
    76be:	90 e0       	ldi	r25, 0x00	; 0
    76c0:	84 0f       	add	r24, r20
    76c2:	95 1f       	adc	r25, r21
    76c4:	fc 01       	movw	r30, r24
    76c6:	50 81       	ld	r21, Z
    76c8:	8c 81       	ldd	r24, Y+4	; 0x04
    76ca:	9d 81       	ldd	r25, Y+5	; 0x05
    76cc:	40 e0       	ldi	r20, 0x00	; 0
    76ce:	65 2f       	mov	r22, r21
    76d0:	f9 01       	movw	r30, r18
    76d2:	19 95       	eicall
    76d4:	1b 82       	std	Y+3, r1	; 0x03
    76d6:	8c 81       	ldd	r24, Y+4	; 0x04
    76d8:	9d 81       	ldd	r25, Y+5	; 0x05
    76da:	85 5a       	subi	r24, 0xA5	; 165
    76dc:	9f 4f       	sbci	r25, 0xFF	; 255
    76de:	fc 01       	movw	r30, r24
    76e0:	90 81       	ld	r25, Z
    76e2:	8b 81       	ldd	r24, Y+3	; 0x03
    76e4:	89 17       	cp	r24, r25
    76e6:	08 f0       	brcs	.+2      	; 0x76ea <_ZN6Keypad8scanKeysEv+0x104>
    76e8:	7b c0       	rjmp	.+246    	; 0x77e0 <_ZN6Keypad8scanKeysEv+0x1fa>
    76ea:	8c 81       	ldd	r24, Y+4	; 0x04
    76ec:	9d 81       	ldd	r25, Y+5	; 0x05
    76ee:	fc 01       	movw	r30, r24
    76f0:	80 81       	ld	r24, Z
    76f2:	91 81       	ldd	r25, Z+1	; 0x01
    76f4:	04 96       	adiw	r24, 0x04	; 4
    76f6:	fc 01       	movw	r30, r24
    76f8:	20 81       	ld	r18, Z
    76fa:	31 81       	ldd	r19, Z+1	; 0x01
    76fc:	8c 81       	ldd	r24, Y+4	; 0x04
    76fe:	9d 81       	ldd	r25, Y+5	; 0x05
    7700:	89 5a       	subi	r24, 0xA9	; 169
    7702:	9f 4f       	sbci	r25, 0xFF	; 255
    7704:	fc 01       	movw	r30, r24
    7706:	40 81       	ld	r20, Z
    7708:	51 81       	ldd	r21, Z+1	; 0x01
    770a:	8b 81       	ldd	r24, Y+3	; 0x03
    770c:	88 2f       	mov	r24, r24
    770e:	90 e0       	ldi	r25, 0x00	; 0
    7710:	84 0f       	add	r24, r20
    7712:	95 1f       	adc	r25, r21
    7714:	fc 01       	movw	r30, r24
    7716:	40 81       	ld	r20, Z
    7718:	8c 81       	ldd	r24, Y+4	; 0x04
    771a:	9d 81       	ldd	r25, Y+5	; 0x05
    771c:	64 2f       	mov	r22, r20
    771e:	f9 01       	movw	r30, r18
    7720:	19 95       	eicall
    7722:	89 2b       	or	r24, r25
    7724:	61 f5       	brne	.+88     	; 0x777e <_ZN6Keypad8scanKeysEv+0x198>
    7726:	8b 81       	ldd	r24, Y+3	; 0x03
    7728:	68 2f       	mov	r22, r24
    772a:	70 e0       	ldi	r23, 0x00	; 0
    772c:	8b 81       	ldd	r24, Y+3	; 0x03
    772e:	88 2f       	mov	r24, r24
    7730:	90 e0       	ldi	r25, 0x00	; 0
    7732:	2c 81       	ldd	r18, Y+4	; 0x04
    7734:	3d 81       	ldd	r19, Y+5	; 0x05
    7736:	88 0f       	add	r24, r24
    7738:	99 1f       	adc	r25, r25
    773a:	82 0f       	add	r24, r18
    773c:	93 1f       	adc	r25, r19
    773e:	07 96       	adiw	r24, 0x07	; 7
    7740:	fc 01       	movw	r30, r24
    7742:	20 81       	ld	r18, Z
    7744:	31 81       	ldd	r19, Z+1	; 0x01
    7746:	8a 81       	ldd	r24, Y+2	; 0x02
    7748:	48 2f       	mov	r20, r24
    774a:	50 e0       	ldi	r21, 0x00	; 0
    774c:	81 e0       	ldi	r24, 0x01	; 1
    774e:	90 e0       	ldi	r25, 0x00	; 0
    7750:	a0 e0       	ldi	r26, 0x00	; 0
    7752:	b0 e0       	ldi	r27, 0x00	; 0
    7754:	04 c0       	rjmp	.+8      	; 0x775e <_ZN6Keypad8scanKeysEv+0x178>
    7756:	88 0f       	add	r24, r24
    7758:	99 1f       	adc	r25, r25
    775a:	aa 1f       	adc	r26, r26
    775c:	bb 1f       	adc	r27, r27
    775e:	4a 95       	dec	r20
    7760:	d2 f7       	brpl	.-12     	; 0x7756 <_ZN6Keypad8scanKeysEv+0x170>
    7762:	28 2b       	or	r18, r24
    7764:	39 2b       	or	r19, r25
    7766:	4c 81       	ldd	r20, Y+4	; 0x04
    7768:	5d 81       	ldd	r21, Y+5	; 0x05
    776a:	cb 01       	movw	r24, r22
    776c:	88 0f       	add	r24, r24
    776e:	99 1f       	adc	r25, r25
    7770:	84 0f       	add	r24, r20
    7772:	95 1f       	adc	r25, r21
    7774:	07 96       	adiw	r24, 0x07	; 7
    7776:	fc 01       	movw	r30, r24
    7778:	31 83       	std	Z+1, r19	; 0x01
    777a:	20 83       	st	Z, r18
    777c:	2d c0       	rjmp	.+90     	; 0x77d8 <_ZN6Keypad8scanKeysEv+0x1f2>
    777e:	8b 81       	ldd	r24, Y+3	; 0x03
    7780:	68 2f       	mov	r22, r24
    7782:	70 e0       	ldi	r23, 0x00	; 0
    7784:	8b 81       	ldd	r24, Y+3	; 0x03
    7786:	88 2f       	mov	r24, r24
    7788:	90 e0       	ldi	r25, 0x00	; 0
    778a:	2c 81       	ldd	r18, Y+4	; 0x04
    778c:	3d 81       	ldd	r19, Y+5	; 0x05
    778e:	88 0f       	add	r24, r24
    7790:	99 1f       	adc	r25, r25
    7792:	82 0f       	add	r24, r18
    7794:	93 1f       	adc	r25, r19
    7796:	07 96       	adiw	r24, 0x07	; 7
    7798:	fc 01       	movw	r30, r24
    779a:	20 81       	ld	r18, Z
    779c:	31 81       	ldd	r19, Z+1	; 0x01
    779e:	8a 81       	ldd	r24, Y+2	; 0x02
    77a0:	48 2f       	mov	r20, r24
    77a2:	50 e0       	ldi	r21, 0x00	; 0
    77a4:	81 e0       	ldi	r24, 0x01	; 1
    77a6:	90 e0       	ldi	r25, 0x00	; 0
    77a8:	a0 e0       	ldi	r26, 0x00	; 0
    77aa:	b0 e0       	ldi	r27, 0x00	; 0
    77ac:	04 c0       	rjmp	.+8      	; 0x77b6 <_ZN6Keypad8scanKeysEv+0x1d0>
    77ae:	88 0f       	add	r24, r24
    77b0:	99 1f       	adc	r25, r25
    77b2:	aa 1f       	adc	r26, r26
    77b4:	bb 1f       	adc	r27, r27
    77b6:	4a 95       	dec	r20
    77b8:	d2 f7       	brpl	.-12     	; 0x77ae <_ZN6Keypad8scanKeysEv+0x1c8>
    77ba:	80 95       	com	r24
    77bc:	90 95       	com	r25
    77be:	28 23       	and	r18, r24
    77c0:	39 23       	and	r19, r25
    77c2:	4c 81       	ldd	r20, Y+4	; 0x04
    77c4:	5d 81       	ldd	r21, Y+5	; 0x05
    77c6:	cb 01       	movw	r24, r22
    77c8:	88 0f       	add	r24, r24
    77ca:	99 1f       	adc	r25, r25
    77cc:	84 0f       	add	r24, r20
    77ce:	95 1f       	adc	r25, r21
    77d0:	07 96       	adiw	r24, 0x07	; 7
    77d2:	fc 01       	movw	r30, r24
    77d4:	31 83       	std	Z+1, r19	; 0x01
    77d6:	20 83       	st	Z, r18
    77d8:	8b 81       	ldd	r24, Y+3	; 0x03
    77da:	8f 5f       	subi	r24, 0xFF	; 255
    77dc:	8b 83       	std	Y+3, r24	; 0x03
    77de:	7b cf       	rjmp	.-266    	; 0x76d6 <_ZN6Keypad8scanKeysEv+0xf0>
    77e0:	8c 81       	ldd	r24, Y+4	; 0x04
    77e2:	9d 81       	ldd	r25, Y+5	; 0x05
    77e4:	fc 01       	movw	r30, r24
    77e6:	80 81       	ld	r24, Z
    77e8:	91 81       	ldd	r25, Z+1	; 0x01
    77ea:	02 96       	adiw	r24, 0x02	; 2
    77ec:	fc 01       	movw	r30, r24
    77ee:	20 81       	ld	r18, Z
    77f0:	31 81       	ldd	r19, Z+1	; 0x01
    77f2:	8c 81       	ldd	r24, Y+4	; 0x04
    77f4:	9d 81       	ldd	r25, Y+5	; 0x05
    77f6:	87 5a       	subi	r24, 0xA7	; 167
    77f8:	9f 4f       	sbci	r25, 0xFF	; 255
    77fa:	fc 01       	movw	r30, r24
    77fc:	40 81       	ld	r20, Z
    77fe:	51 81       	ldd	r21, Z+1	; 0x01
    7800:	8a 81       	ldd	r24, Y+2	; 0x02
    7802:	88 2f       	mov	r24, r24
    7804:	90 e0       	ldi	r25, 0x00	; 0
    7806:	84 0f       	add	r24, r20
    7808:	95 1f       	adc	r25, r21
    780a:	fc 01       	movw	r30, r24
    780c:	50 81       	ld	r21, Z
    780e:	8c 81       	ldd	r24, Y+4	; 0x04
    7810:	9d 81       	ldd	r25, Y+5	; 0x05
    7812:	41 e0       	ldi	r20, 0x01	; 1
    7814:	65 2f       	mov	r22, r21
    7816:	f9 01       	movw	r30, r18
    7818:	19 95       	eicall
    781a:	8c 81       	ldd	r24, Y+4	; 0x04
    781c:	9d 81       	ldd	r25, Y+5	; 0x05
    781e:	fc 01       	movw	r30, r24
    7820:	80 81       	ld	r24, Z
    7822:	91 81       	ldd	r25, Z+1	; 0x01
    7824:	fc 01       	movw	r30, r24
    7826:	20 81       	ld	r18, Z
    7828:	31 81       	ldd	r19, Z+1	; 0x01
    782a:	8c 81       	ldd	r24, Y+4	; 0x04
    782c:	9d 81       	ldd	r25, Y+5	; 0x05
    782e:	87 5a       	subi	r24, 0xA7	; 167
    7830:	9f 4f       	sbci	r25, 0xFF	; 255
    7832:	fc 01       	movw	r30, r24
    7834:	40 81       	ld	r20, Z
    7836:	51 81       	ldd	r21, Z+1	; 0x01
    7838:	8a 81       	ldd	r24, Y+2	; 0x02
    783a:	88 2f       	mov	r24, r24
    783c:	90 e0       	ldi	r25, 0x00	; 0
    783e:	84 0f       	add	r24, r20
    7840:	95 1f       	adc	r25, r21
    7842:	fc 01       	movw	r30, r24
    7844:	50 81       	ld	r21, Z
    7846:	8c 81       	ldd	r24, Y+4	; 0x04
    7848:	9d 81       	ldd	r25, Y+5	; 0x05
    784a:	40 e0       	ldi	r20, 0x00	; 0
    784c:	65 2f       	mov	r22, r21
    784e:	f9 01       	movw	r30, r18
    7850:	19 95       	eicall
    7852:	8a 81       	ldd	r24, Y+2	; 0x02
    7854:	8f 5f       	subi	r24, 0xFF	; 255
    7856:	8a 83       	std	Y+2, r24	; 0x02
    7858:	fa ce       	rjmp	.-524    	; 0x764e <_ZN6Keypad8scanKeysEv+0x68>
    785a:	00 00       	nop
    785c:	0f 90       	pop	r0
    785e:	0f 90       	pop	r0
    7860:	0f 90       	pop	r0
    7862:	0f 90       	pop	r0
    7864:	0f 90       	pop	r0
    7866:	df 91       	pop	r29
    7868:	cf 91       	pop	r28
    786a:	08 95       	ret

0000786c <_ZN6Keypad10updateListEv>:
    786c:	cf 93       	push	r28
    786e:	df 93       	push	r29
    7870:	cd b7       	in	r28, 0x3d	; 61
    7872:	de b7       	in	r29, 0x3e	; 62
    7874:	2e 97       	sbiw	r28, 0x0e	; 14
    7876:	0f b6       	in	r0, 0x3f	; 63
    7878:	f8 94       	cli
    787a:	de bf       	out	0x3e, r29	; 62
    787c:	0f be       	out	0x3f, r0	; 63
    787e:	cd bf       	out	0x3d, r28	; 61
    7880:	9e 87       	std	Y+14, r25	; 0x0e
    7882:	8d 87       	std	Y+13, r24	; 0x0d
    7884:	19 82       	std	Y+1, r1	; 0x01
    7886:	1a 82       	std	Y+2, r1	; 0x02
    7888:	8a 81       	ldd	r24, Y+2	; 0x02
    788a:	8a 30       	cpi	r24, 0x0A	; 10
    788c:	08 f0       	brcs	.+2      	; 0x7890 <_ZN6Keypad10updateListEv+0x24>
    788e:	4d c0       	rjmp	.+154    	; 0x792a <_ZN6Keypad10updateListEv+0xbe>
    7890:	8a 81       	ldd	r24, Y+2	; 0x02
    7892:	28 2f       	mov	r18, r24
    7894:	30 e0       	ldi	r19, 0x00	; 0
    7896:	4d 85       	ldd	r20, Y+13	; 0x0d
    7898:	5e 85       	ldd	r21, Y+14	; 0x0e
    789a:	c9 01       	movw	r24, r18
    789c:	88 0f       	add	r24, r24
    789e:	99 1f       	adc	r25, r25
    78a0:	88 0f       	add	r24, r24
    78a2:	99 1f       	adc	r25, r25
    78a4:	82 0f       	add	r24, r18
    78a6:	93 1f       	adc	r25, r19
    78a8:	84 0f       	add	r24, r20
    78aa:	95 1f       	adc	r25, r21
    78ac:	4e 96       	adiw	r24, 0x1e	; 30
    78ae:	fc 01       	movw	r30, r24
    78b0:	80 81       	ld	r24, Z
    78b2:	88 23       	and	r24, r24
    78b4:	b1 f5       	brne	.+108    	; 0x7922 <_ZN6Keypad10updateListEv+0xb6>
    78b6:	8a 81       	ldd	r24, Y+2	; 0x02
    78b8:	28 2f       	mov	r18, r24
    78ba:	30 e0       	ldi	r19, 0x00	; 0
    78bc:	4d 85       	ldd	r20, Y+13	; 0x0d
    78be:	5e 85       	ldd	r21, Y+14	; 0x0e
    78c0:	c9 01       	movw	r24, r18
    78c2:	88 0f       	add	r24, r24
    78c4:	99 1f       	adc	r25, r25
    78c6:	88 0f       	add	r24, r24
    78c8:	99 1f       	adc	r25, r25
    78ca:	82 0f       	add	r24, r18
    78cc:	93 1f       	adc	r25, r19
    78ce:	84 0f       	add	r24, r20
    78d0:	95 1f       	adc	r25, r21
    78d2:	4b 96       	adiw	r24, 0x1b	; 27
    78d4:	fc 01       	movw	r30, r24
    78d6:	10 82       	st	Z, r1
    78d8:	8a 81       	ldd	r24, Y+2	; 0x02
    78da:	28 2f       	mov	r18, r24
    78dc:	30 e0       	ldi	r19, 0x00	; 0
    78de:	4d 85       	ldd	r20, Y+13	; 0x0d
    78e0:	5e 85       	ldd	r21, Y+14	; 0x0e
    78e2:	c9 01       	movw	r24, r18
    78e4:	88 0f       	add	r24, r24
    78e6:	99 1f       	adc	r25, r25
    78e8:	88 0f       	add	r24, r24
    78ea:	99 1f       	adc	r25, r25
    78ec:	82 0f       	add	r24, r18
    78ee:	93 1f       	adc	r25, r19
    78f0:	84 0f       	add	r24, r20
    78f2:	95 1f       	adc	r25, r21
    78f4:	4c 96       	adiw	r24, 0x1c	; 28
    78f6:	2f ef       	ldi	r18, 0xFF	; 255
    78f8:	3f ef       	ldi	r19, 0xFF	; 255
    78fa:	fc 01       	movw	r30, r24
    78fc:	31 83       	std	Z+1, r19	; 0x01
    78fe:	20 83       	st	Z, r18
    7900:	8a 81       	ldd	r24, Y+2	; 0x02
    7902:	28 2f       	mov	r18, r24
    7904:	30 e0       	ldi	r19, 0x00	; 0
    7906:	4d 85       	ldd	r20, Y+13	; 0x0d
    7908:	5e 85       	ldd	r21, Y+14	; 0x0e
    790a:	c9 01       	movw	r24, r18
    790c:	88 0f       	add	r24, r24
    790e:	99 1f       	adc	r25, r25
    7910:	88 0f       	add	r24, r24
    7912:	99 1f       	adc	r25, r25
    7914:	82 0f       	add	r24, r18
    7916:	93 1f       	adc	r25, r19
    7918:	84 0f       	add	r24, r20
    791a:	95 1f       	adc	r25, r21
    791c:	4f 96       	adiw	r24, 0x1f	; 31
    791e:	fc 01       	movw	r30, r24
    7920:	10 82       	st	Z, r1
    7922:	8a 81       	ldd	r24, Y+2	; 0x02
    7924:	8f 5f       	subi	r24, 0xFF	; 255
    7926:	8a 83       	std	Y+2, r24	; 0x02
    7928:	af cf       	rjmp	.-162    	; 0x7888 <_ZN6Keypad10updateListEv+0x1c>
    792a:	1b 82       	std	Y+3, r1	; 0x03
    792c:	8d 85       	ldd	r24, Y+13	; 0x0d
    792e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7930:	85 5a       	subi	r24, 0xA5	; 165
    7932:	9f 4f       	sbci	r25, 0xFF	; 255
    7934:	fc 01       	movw	r30, r24
    7936:	90 81       	ld	r25, Z
    7938:	8b 81       	ldd	r24, Y+3	; 0x03
    793a:	89 17       	cp	r24, r25
    793c:	08 f0       	brcs	.+2      	; 0x7940 <_ZN6Keypad10updateListEv+0xd4>
    793e:	df c0       	rjmp	.+446    	; 0x7afe <_ZN6Keypad10updateListEv+0x292>
    7940:	1c 82       	std	Y+4, r1	; 0x04
    7942:	8d 85       	ldd	r24, Y+13	; 0x0d
    7944:	9e 85       	ldd	r25, Y+14	; 0x0e
    7946:	84 5a       	subi	r24, 0xA4	; 164
    7948:	9f 4f       	sbci	r25, 0xFF	; 255
    794a:	fc 01       	movw	r30, r24
    794c:	90 81       	ld	r25, Z
    794e:	8c 81       	ldd	r24, Y+4	; 0x04
    7950:	89 17       	cp	r24, r25
    7952:	08 f0       	brcs	.+2      	; 0x7956 <_ZN6Keypad10updateListEv+0xea>
    7954:	d0 c0       	rjmp	.+416    	; 0x7af6 <_ZN6Keypad10updateListEv+0x28a>
    7956:	8b 81       	ldd	r24, Y+3	; 0x03
    7958:	88 2f       	mov	r24, r24
    795a:	90 e0       	ldi	r25, 0x00	; 0
    795c:	2d 85       	ldd	r18, Y+13	; 0x0d
    795e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7960:	88 0f       	add	r24, r24
    7962:	99 1f       	adc	r25, r25
    7964:	82 0f       	add	r24, r18
    7966:	93 1f       	adc	r25, r19
    7968:	07 96       	adiw	r24, 0x07	; 7
    796a:	fc 01       	movw	r30, r24
    796c:	80 81       	ld	r24, Z
    796e:	91 81       	ldd	r25, Z+1	; 0x01
    7970:	2c 81       	ldd	r18, Y+4	; 0x04
    7972:	22 2f       	mov	r18, r18
    7974:	30 e0       	ldi	r19, 0x00	; 0
    7976:	02 c0       	rjmp	.+4      	; 0x797c <_ZN6Keypad10updateListEv+0x110>
    7978:	96 95       	lsr	r25
    797a:	87 95       	ror	r24
    797c:	2a 95       	dec	r18
    797e:	e2 f7       	brpl	.-8      	; 0x7978 <_ZN6Keypad10updateListEv+0x10c>
    7980:	81 70       	andi	r24, 0x01	; 1
    7982:	99 27       	eor	r25, r25
    7984:	21 e0       	ldi	r18, 0x01	; 1
    7986:	89 2b       	or	r24, r25
    7988:	09 f4       	brne	.+2      	; 0x798c <_ZN6Keypad10updateListEv+0x120>
    798a:	20 e0       	ldi	r18, 0x00	; 0
    798c:	2f 83       	std	Y+7, r18	; 0x07
    798e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7990:	9e 85       	ldd	r25, Y+14	; 0x0e
    7992:	8b 5a       	subi	r24, 0xAB	; 171
    7994:	9f 4f       	sbci	r25, 0xFF	; 255
    7996:	fc 01       	movw	r30, r24
    7998:	80 81       	ld	r24, Z
    799a:	91 81       	ldd	r25, Z+1	; 0x01
    799c:	2b 81       	ldd	r18, Y+3	; 0x03
    799e:	62 2f       	mov	r22, r18
    79a0:	70 e0       	ldi	r23, 0x00	; 0
    79a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    79a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    79a6:	24 5a       	subi	r18, 0xA4	; 164
    79a8:	3f 4f       	sbci	r19, 0xFF	; 255
    79aa:	f9 01       	movw	r30, r18
    79ac:	20 81       	ld	r18, Z
    79ae:	22 2f       	mov	r18, r18
    79b0:	30 e0       	ldi	r19, 0x00	; 0
    79b2:	62 9f       	mul	r22, r18
    79b4:	a0 01       	movw	r20, r0
    79b6:	63 9f       	mul	r22, r19
    79b8:	50 0d       	add	r21, r0
    79ba:	72 9f       	mul	r23, r18
    79bc:	50 0d       	add	r21, r0
    79be:	11 24       	eor	r1, r1
    79c0:	2c 81       	ldd	r18, Y+4	; 0x04
    79c2:	22 2f       	mov	r18, r18
    79c4:	30 e0       	ldi	r19, 0x00	; 0
    79c6:	24 0f       	add	r18, r20
    79c8:	35 1f       	adc	r19, r21
    79ca:	82 0f       	add	r24, r18
    79cc:	93 1f       	adc	r25, r19
    79ce:	fc 01       	movw	r30, r24
    79d0:	80 81       	ld	r24, Z
    79d2:	88 87       	std	Y+8, r24	; 0x08
    79d4:	8b 81       	ldd	r24, Y+3	; 0x03
    79d6:	48 2f       	mov	r20, r24
    79d8:	50 e0       	ldi	r21, 0x00	; 0
    79da:	8d 85       	ldd	r24, Y+13	; 0x0d
    79dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    79de:	84 5a       	subi	r24, 0xA4	; 164
    79e0:	9f 4f       	sbci	r25, 0xFF	; 255
    79e2:	fc 01       	movw	r30, r24
    79e4:	80 81       	ld	r24, Z
    79e6:	88 2f       	mov	r24, r24
    79e8:	90 e0       	ldi	r25, 0x00	; 0
    79ea:	48 9f       	mul	r20, r24
    79ec:	90 01       	movw	r18, r0
    79ee:	49 9f       	mul	r20, r25
    79f0:	30 0d       	add	r19, r0
    79f2:	58 9f       	mul	r21, r24
    79f4:	30 0d       	add	r19, r0
    79f6:	11 24       	eor	r1, r1
    79f8:	8c 81       	ldd	r24, Y+4	; 0x04
    79fa:	88 2f       	mov	r24, r24
    79fc:	90 e0       	ldi	r25, 0x00	; 0
    79fe:	82 0f       	add	r24, r18
    7a00:	93 1f       	adc	r25, r19
    7a02:	9a 87       	std	Y+10, r25	; 0x0a
    7a04:	89 87       	std	Y+9, r24	; 0x09
    7a06:	29 85       	ldd	r18, Y+9	; 0x09
    7a08:	3a 85       	ldd	r19, Y+10	; 0x0a
    7a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a0e:	b9 01       	movw	r22, r18
    7a10:	46 d1       	rcall	.+652    	; 0x7c9e <_ZN6Keypad10findInListEi>
    7a12:	9c 87       	std	Y+12, r25	; 0x0c
    7a14:	8b 87       	std	Y+11, r24	; 0x0b
    7a16:	8b 85       	ldd	r24, Y+11	; 0x0b
    7a18:	9c 85       	ldd	r25, Y+12	; 0x0c
    7a1a:	99 23       	and	r25, r25
    7a1c:	34 f0       	brlt	.+12     	; 0x7a2a <_ZN6Keypad10updateListEv+0x1be>
    7a1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    7a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    7a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    7a24:	4f 81       	ldd	r20, Y+7	; 0x07
    7a26:	62 2f       	mov	r22, r18
    7a28:	91 d0       	rcall	.+290    	; 0x7b4c <_ZN6Keypad12nextKeyStateEhb>
    7a2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    7a2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    7a2e:	01 96       	adiw	r24, 0x01	; 1
    7a30:	09 f0       	breq	.+2      	; 0x7a34 <_ZN6Keypad10updateListEv+0x1c8>
    7a32:	5d c0       	rjmp	.+186    	; 0x7aee <_ZN6Keypad10updateListEv+0x282>
    7a34:	8f 81       	ldd	r24, Y+7	; 0x07
    7a36:	88 23       	and	r24, r24
    7a38:	09 f4       	brne	.+2      	; 0x7a3c <_ZN6Keypad10updateListEv+0x1d0>
    7a3a:	59 c0       	rjmp	.+178    	; 0x7aee <_ZN6Keypad10updateListEv+0x282>
    7a3c:	1d 82       	std	Y+5, r1	; 0x05
    7a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    7a40:	8a 30       	cpi	r24, 0x0A	; 10
    7a42:	08 f0       	brcs	.+2      	; 0x7a46 <_ZN6Keypad10updateListEv+0x1da>
    7a44:	54 c0       	rjmp	.+168    	; 0x7aee <_ZN6Keypad10updateListEv+0x282>
    7a46:	8d 81       	ldd	r24, Y+5	; 0x05
    7a48:	28 2f       	mov	r18, r24
    7a4a:	30 e0       	ldi	r19, 0x00	; 0
    7a4c:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a4e:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a50:	c9 01       	movw	r24, r18
    7a52:	88 0f       	add	r24, r24
    7a54:	99 1f       	adc	r25, r25
    7a56:	88 0f       	add	r24, r24
    7a58:	99 1f       	adc	r25, r25
    7a5a:	82 0f       	add	r24, r18
    7a5c:	93 1f       	adc	r25, r19
    7a5e:	84 0f       	add	r24, r20
    7a60:	95 1f       	adc	r25, r21
    7a62:	4b 96       	adiw	r24, 0x1b	; 27
    7a64:	fc 01       	movw	r30, r24
    7a66:	80 81       	ld	r24, Z
    7a68:	88 23       	and	r24, r24
    7a6a:	e9 f5       	brne	.+122    	; 0x7ae6 <_ZN6Keypad10updateListEv+0x27a>
    7a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    7a6e:	28 2f       	mov	r18, r24
    7a70:	30 e0       	ldi	r19, 0x00	; 0
    7a72:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a74:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a76:	c9 01       	movw	r24, r18
    7a78:	88 0f       	add	r24, r24
    7a7a:	99 1f       	adc	r25, r25
    7a7c:	88 0f       	add	r24, r24
    7a7e:	99 1f       	adc	r25, r25
    7a80:	82 0f       	add	r24, r18
    7a82:	93 1f       	adc	r25, r19
    7a84:	84 0f       	add	r24, r20
    7a86:	95 1f       	adc	r25, r21
    7a88:	4b 96       	adiw	r24, 0x1b	; 27
    7a8a:	28 85       	ldd	r18, Y+8	; 0x08
    7a8c:	fc 01       	movw	r30, r24
    7a8e:	20 83       	st	Z, r18
    7a90:	8d 81       	ldd	r24, Y+5	; 0x05
    7a92:	28 2f       	mov	r18, r24
    7a94:	30 e0       	ldi	r19, 0x00	; 0
    7a96:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a98:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a9a:	c9 01       	movw	r24, r18
    7a9c:	88 0f       	add	r24, r24
    7a9e:	99 1f       	adc	r25, r25
    7aa0:	88 0f       	add	r24, r24
    7aa2:	99 1f       	adc	r25, r25
    7aa4:	82 0f       	add	r24, r18
    7aa6:	93 1f       	adc	r25, r19
    7aa8:	84 0f       	add	r24, r20
    7aaa:	95 1f       	adc	r25, r21
    7aac:	4c 96       	adiw	r24, 0x1c	; 28
    7aae:	29 85       	ldd	r18, Y+9	; 0x09
    7ab0:	3a 85       	ldd	r19, Y+10	; 0x0a
    7ab2:	fc 01       	movw	r30, r24
    7ab4:	31 83       	std	Z+1, r19	; 0x01
    7ab6:	20 83       	st	Z, r18
    7ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    7aba:	28 2f       	mov	r18, r24
    7abc:	30 e0       	ldi	r19, 0x00	; 0
    7abe:	4d 85       	ldd	r20, Y+13	; 0x0d
    7ac0:	5e 85       	ldd	r21, Y+14	; 0x0e
    7ac2:	c9 01       	movw	r24, r18
    7ac4:	88 0f       	add	r24, r24
    7ac6:	99 1f       	adc	r25, r25
    7ac8:	88 0f       	add	r24, r24
    7aca:	99 1f       	adc	r25, r25
    7acc:	82 0f       	add	r24, r18
    7ace:	93 1f       	adc	r25, r19
    7ad0:	84 0f       	add	r24, r20
    7ad2:	95 1f       	adc	r25, r21
    7ad4:	4e 96       	adiw	r24, 0x1e	; 30
    7ad6:	fc 01       	movw	r30, r24
    7ad8:	10 82       	st	Z, r1
    7ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    7adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    7ade:	4f 81       	ldd	r20, Y+7	; 0x07
    7ae0:	6d 81       	ldd	r22, Y+5	; 0x05
    7ae2:	34 d0       	rcall	.+104    	; 0x7b4c <_ZN6Keypad12nextKeyStateEhb>
    7ae4:	04 c0       	rjmp	.+8      	; 0x7aee <_ZN6Keypad10updateListEv+0x282>
    7ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    7ae8:	8f 5f       	subi	r24, 0xFF	; 255
    7aea:	8d 83       	std	Y+5, r24	; 0x05
    7aec:	a8 cf       	rjmp	.-176    	; 0x7a3e <_ZN6Keypad10updateListEv+0x1d2>
    7aee:	8c 81       	ldd	r24, Y+4	; 0x04
    7af0:	8f 5f       	subi	r24, 0xFF	; 255
    7af2:	8c 83       	std	Y+4, r24	; 0x04
    7af4:	26 cf       	rjmp	.-436    	; 0x7942 <_ZN6Keypad10updateListEv+0xd6>
    7af6:	8b 81       	ldd	r24, Y+3	; 0x03
    7af8:	8f 5f       	subi	r24, 0xFF	; 255
    7afa:	8b 83       	std	Y+3, r24	; 0x03
    7afc:	17 cf       	rjmp	.-466    	; 0x792c <_ZN6Keypad10updateListEv+0xc0>
    7afe:	1e 82       	std	Y+6, r1	; 0x06
    7b00:	8e 81       	ldd	r24, Y+6	; 0x06
    7b02:	8a 30       	cpi	r24, 0x0A	; 10
    7b04:	c8 f4       	brcc	.+50     	; 0x7b38 <_ZN6Keypad10updateListEv+0x2cc>
    7b06:	8e 81       	ldd	r24, Y+6	; 0x06
    7b08:	28 2f       	mov	r18, r24
    7b0a:	30 e0       	ldi	r19, 0x00	; 0
    7b0c:	4d 85       	ldd	r20, Y+13	; 0x0d
    7b0e:	5e 85       	ldd	r21, Y+14	; 0x0e
    7b10:	c9 01       	movw	r24, r18
    7b12:	88 0f       	add	r24, r24
    7b14:	99 1f       	adc	r25, r25
    7b16:	88 0f       	add	r24, r24
    7b18:	99 1f       	adc	r25, r25
    7b1a:	82 0f       	add	r24, r18
    7b1c:	93 1f       	adc	r25, r19
    7b1e:	84 0f       	add	r24, r20
    7b20:	95 1f       	adc	r25, r21
    7b22:	4f 96       	adiw	r24, 0x1f	; 31
    7b24:	fc 01       	movw	r30, r24
    7b26:	80 81       	ld	r24, Z
    7b28:	88 23       	and	r24, r24
    7b2a:	11 f0       	breq	.+4      	; 0x7b30 <_ZN6Keypad10updateListEv+0x2c4>
    7b2c:	81 e0       	ldi	r24, 0x01	; 1
    7b2e:	89 83       	std	Y+1, r24	; 0x01
    7b30:	8e 81       	ldd	r24, Y+6	; 0x06
    7b32:	8f 5f       	subi	r24, 0xFF	; 255
    7b34:	8e 83       	std	Y+6, r24	; 0x06
    7b36:	e4 cf       	rjmp	.-56     	; 0x7b00 <_ZN6Keypad10updateListEv+0x294>
    7b38:	89 81       	ldd	r24, Y+1	; 0x01
    7b3a:	2e 96       	adiw	r28, 0x0e	; 14
    7b3c:	0f b6       	in	r0, 0x3f	; 63
    7b3e:	f8 94       	cli
    7b40:	de bf       	out	0x3e, r29	; 62
    7b42:	0f be       	out	0x3f, r0	; 63
    7b44:	cd bf       	out	0x3d, r28	; 61
    7b46:	df 91       	pop	r29
    7b48:	cf 91       	pop	r28
    7b4a:	08 95       	ret

00007b4c <_ZN6Keypad12nextKeyStateEhb>:
    7b4c:	cf 93       	push	r28
    7b4e:	df 93       	push	r29
    7b50:	00 d0       	rcall	.+0      	; 0x7b52 <_ZN6Keypad12nextKeyStateEhb+0x6>
    7b52:	1f 92       	push	r1
    7b54:	cd b7       	in	r28, 0x3d	; 61
    7b56:	de b7       	in	r29, 0x3e	; 62
    7b58:	9a 83       	std	Y+2, r25	; 0x02
    7b5a:	89 83       	std	Y+1, r24	; 0x01
    7b5c:	6b 83       	std	Y+3, r22	; 0x03
    7b5e:	4c 83       	std	Y+4, r20	; 0x04
    7b60:	8b 81       	ldd	r24, Y+3	; 0x03
    7b62:	28 2f       	mov	r18, r24
    7b64:	30 e0       	ldi	r19, 0x00	; 0
    7b66:	49 81       	ldd	r20, Y+1	; 0x01
    7b68:	5a 81       	ldd	r21, Y+2	; 0x02
    7b6a:	c9 01       	movw	r24, r18
    7b6c:	88 0f       	add	r24, r24
    7b6e:	99 1f       	adc	r25, r25
    7b70:	88 0f       	add	r24, r24
    7b72:	99 1f       	adc	r25, r25
    7b74:	82 0f       	add	r24, r18
    7b76:	93 1f       	adc	r25, r19
    7b78:	84 0f       	add	r24, r20
    7b7a:	95 1f       	adc	r25, r21
    7b7c:	4f 96       	adiw	r24, 0x1f	; 31
    7b7e:	fc 01       	movw	r30, r24
    7b80:	10 82       	st	Z, r1
    7b82:	8b 81       	ldd	r24, Y+3	; 0x03
    7b84:	28 2f       	mov	r18, r24
    7b86:	30 e0       	ldi	r19, 0x00	; 0
    7b88:	49 81       	ldd	r20, Y+1	; 0x01
    7b8a:	5a 81       	ldd	r21, Y+2	; 0x02
    7b8c:	c9 01       	movw	r24, r18
    7b8e:	88 0f       	add	r24, r24
    7b90:	99 1f       	adc	r25, r25
    7b92:	88 0f       	add	r24, r24
    7b94:	99 1f       	adc	r25, r25
    7b96:	82 0f       	add	r24, r18
    7b98:	93 1f       	adc	r25, r19
    7b9a:	84 0f       	add	r24, r20
    7b9c:	95 1f       	adc	r25, r21
    7b9e:	4e 96       	adiw	r24, 0x1e	; 30
    7ba0:	fc 01       	movw	r30, r24
    7ba2:	80 81       	ld	r24, Z
    7ba4:	88 2f       	mov	r24, r24
    7ba6:	90 e0       	ldi	r25, 0x00	; 0
    7ba8:	81 30       	cpi	r24, 0x01	; 1
    7baa:	91 05       	cpc	r25, r1
    7bac:	29 f1       	breq	.+74     	; 0x7bf8 <_ZN6Keypad12nextKeyStateEhb+0xac>
    7bae:	82 30       	cpi	r24, 0x02	; 2
    7bb0:	91 05       	cpc	r25, r1
    7bb2:	1c f4       	brge	.+6      	; 0x7bba <_ZN6Keypad12nextKeyStateEhb+0x6e>
    7bb4:	89 2b       	or	r24, r25
    7bb6:	49 f0       	breq	.+18     	; 0x7bca <_ZN6Keypad12nextKeyStateEhb+0x7e>
    7bb8:	6a c0       	rjmp	.+212    	; 0x7c8e <_ZN6Keypad12nextKeyStateEhb+0x142>
    7bba:	82 30       	cpi	r24, 0x02	; 2
    7bbc:	91 05       	cpc	r25, r1
    7bbe:	09 f4       	brne	.+2      	; 0x7bc2 <_ZN6Keypad12nextKeyStateEhb+0x76>
    7bc0:	50 c0       	rjmp	.+160    	; 0x7c62 <_ZN6Keypad12nextKeyStateEhb+0x116>
    7bc2:	03 97       	sbiw	r24, 0x03	; 3
    7bc4:	09 f4       	brne	.+2      	; 0x7bc8 <_ZN6Keypad12nextKeyStateEhb+0x7c>
    7bc6:	58 c0       	rjmp	.+176    	; 0x7c78 <_ZN6Keypad12nextKeyStateEhb+0x12c>
    7bc8:	62 c0       	rjmp	.+196    	; 0x7c8e <_ZN6Keypad12nextKeyStateEhb+0x142>
    7bca:	8c 81       	ldd	r24, Y+4	; 0x04
    7bcc:	88 23       	and	r24, r24
    7bce:	09 f4       	brne	.+2      	; 0x7bd2 <_ZN6Keypad12nextKeyStateEhb+0x86>
    7bd0:	59 c0       	rjmp	.+178    	; 0x7c84 <_ZN6Keypad12nextKeyStateEhb+0x138>
    7bd2:	89 81       	ldd	r24, Y+1	; 0x01
    7bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    7bd6:	41 e0       	ldi	r20, 0x01	; 1
    7bd8:	6b 81       	ldd	r22, Y+3	; 0x03
    7bda:	dd d0       	rcall	.+442    	; 0x7d96 <_ZN6Keypad12transitionToEh8KeyState>
    7bdc:	0e 94 7c 5e 	call	0xbcf8	; 0xbcf8 <millis>
    7be0:	dc 01       	movw	r26, r24
    7be2:	cb 01       	movw	r24, r22
    7be4:	29 81       	ldd	r18, Y+1	; 0x01
    7be6:	3a 81       	ldd	r19, Y+2	; 0x02
    7be8:	23 5b       	subi	r18, 0xB3	; 179
    7bea:	3f 4f       	sbci	r19, 0xFF	; 255
    7bec:	f9 01       	movw	r30, r18
    7bee:	80 83       	st	Z, r24
    7bf0:	91 83       	std	Z+1, r25	; 0x01
    7bf2:	a2 83       	std	Z+2, r26	; 0x02
    7bf4:	b3 83       	std	Z+3, r27	; 0x03
    7bf6:	46 c0       	rjmp	.+140    	; 0x7c84 <_ZN6Keypad12nextKeyStateEhb+0x138>
    7bf8:	0e 94 7c 5e 	call	0xbcf8	; 0xbcf8 <millis>
    7bfc:	9b 01       	movw	r18, r22
    7bfe:	ac 01       	movw	r20, r24
    7c00:	89 81       	ldd	r24, Y+1	; 0x01
    7c02:	9a 81       	ldd	r25, Y+2	; 0x02
    7c04:	83 5b       	subi	r24, 0xB3	; 179
    7c06:	9f 4f       	sbci	r25, 0xFF	; 255
    7c08:	fc 01       	movw	r30, r24
    7c0a:	80 81       	ld	r24, Z
    7c0c:	91 81       	ldd	r25, Z+1	; 0x01
    7c0e:	a2 81       	ldd	r26, Z+2	; 0x02
    7c10:	b3 81       	ldd	r27, Z+3	; 0x03
    7c12:	28 1b       	sub	r18, r24
    7c14:	39 0b       	sbc	r19, r25
    7c16:	4a 0b       	sbc	r20, r26
    7c18:	5b 0b       	sbc	r21, r27
    7c1a:	89 81       	ldd	r24, Y+1	; 0x01
    7c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    7c1e:	81 5a       	subi	r24, 0xA1	; 161
    7c20:	9f 4f       	sbci	r25, 0xFF	; 255
    7c22:	fc 01       	movw	r30, r24
    7c24:	80 81       	ld	r24, Z
    7c26:	91 81       	ldd	r25, Z+1	; 0x01
    7c28:	cc 01       	movw	r24, r24
    7c2a:	a0 e0       	ldi	r26, 0x00	; 0
    7c2c:	b0 e0       	ldi	r27, 0x00	; 0
    7c2e:	61 e0       	ldi	r22, 0x01	; 1
    7c30:	82 17       	cp	r24, r18
    7c32:	93 07       	cpc	r25, r19
    7c34:	a4 07       	cpc	r26, r20
    7c36:	b5 07       	cpc	r27, r21
    7c38:	08 f0       	brcs	.+2      	; 0x7c3c <_ZN6Keypad12nextKeyStateEhb+0xf0>
    7c3a:	60 e0       	ldi	r22, 0x00	; 0
    7c3c:	66 23       	and	r22, r22
    7c3e:	31 f0       	breq	.+12     	; 0x7c4c <_ZN6Keypad12nextKeyStateEhb+0x100>
    7c40:	89 81       	ldd	r24, Y+1	; 0x01
    7c42:	9a 81       	ldd	r25, Y+2	; 0x02
    7c44:	42 e0       	ldi	r20, 0x02	; 2
    7c46:	6b 81       	ldd	r22, Y+3	; 0x03
    7c48:	a6 d0       	rcall	.+332    	; 0x7d96 <_ZN6Keypad12transitionToEh8KeyState>
    7c4a:	1e c0       	rjmp	.+60     	; 0x7c88 <_ZN6Keypad12nextKeyStateEhb+0x13c>
    7c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    7c4e:	81 e0       	ldi	r24, 0x01	; 1
    7c50:	89 27       	eor	r24, r25
    7c52:	88 23       	and	r24, r24
    7c54:	c9 f0       	breq	.+50     	; 0x7c88 <_ZN6Keypad12nextKeyStateEhb+0x13c>
    7c56:	89 81       	ldd	r24, Y+1	; 0x01
    7c58:	9a 81       	ldd	r25, Y+2	; 0x02
    7c5a:	43 e0       	ldi	r20, 0x03	; 3
    7c5c:	6b 81       	ldd	r22, Y+3	; 0x03
    7c5e:	9b d0       	rcall	.+310    	; 0x7d96 <_ZN6Keypad12transitionToEh8KeyState>
    7c60:	13 c0       	rjmp	.+38     	; 0x7c88 <_ZN6Keypad12nextKeyStateEhb+0x13c>
    7c62:	9c 81       	ldd	r25, Y+4	; 0x04
    7c64:	81 e0       	ldi	r24, 0x01	; 1
    7c66:	89 27       	eor	r24, r25
    7c68:	88 23       	and	r24, r24
    7c6a:	81 f0       	breq	.+32     	; 0x7c8c <_ZN6Keypad12nextKeyStateEhb+0x140>
    7c6c:	89 81       	ldd	r24, Y+1	; 0x01
    7c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    7c70:	43 e0       	ldi	r20, 0x03	; 3
    7c72:	6b 81       	ldd	r22, Y+3	; 0x03
    7c74:	90 d0       	rcall	.+288    	; 0x7d96 <_ZN6Keypad12transitionToEh8KeyState>
    7c76:	0a c0       	rjmp	.+20     	; 0x7c8c <_ZN6Keypad12nextKeyStateEhb+0x140>
    7c78:	89 81       	ldd	r24, Y+1	; 0x01
    7c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    7c7c:	40 e0       	ldi	r20, 0x00	; 0
    7c7e:	6b 81       	ldd	r22, Y+3	; 0x03
    7c80:	8a d0       	rcall	.+276    	; 0x7d96 <_ZN6Keypad12transitionToEh8KeyState>
    7c82:	05 c0       	rjmp	.+10     	; 0x7c8e <_ZN6Keypad12nextKeyStateEhb+0x142>
    7c84:	00 00       	nop
    7c86:	03 c0       	rjmp	.+6      	; 0x7c8e <_ZN6Keypad12nextKeyStateEhb+0x142>
    7c88:	00 00       	nop
    7c8a:	01 c0       	rjmp	.+2      	; 0x7c8e <_ZN6Keypad12nextKeyStateEhb+0x142>
    7c8c:	00 00       	nop
    7c8e:	00 00       	nop
    7c90:	0f 90       	pop	r0
    7c92:	0f 90       	pop	r0
    7c94:	0f 90       	pop	r0
    7c96:	0f 90       	pop	r0
    7c98:	df 91       	pop	r29
    7c9a:	cf 91       	pop	r28
    7c9c:	08 95       	ret

00007c9e <_ZN6Keypad10findInListEi>:
    7c9e:	cf 93       	push	r28
    7ca0:	df 93       	push	r29
    7ca2:	00 d0       	rcall	.+0      	; 0x7ca4 <_ZN6Keypad10findInListEi+0x6>
    7ca4:	1f 92       	push	r1
    7ca6:	1f 92       	push	r1
    7ca8:	cd b7       	in	r28, 0x3d	; 61
    7caa:	de b7       	in	r29, 0x3e	; 62
    7cac:	9b 83       	std	Y+3, r25	; 0x03
    7cae:	8a 83       	std	Y+2, r24	; 0x02
    7cb0:	7d 83       	std	Y+5, r23	; 0x05
    7cb2:	6c 83       	std	Y+4, r22	; 0x04
    7cb4:	19 82       	std	Y+1, r1	; 0x01
    7cb6:	89 81       	ldd	r24, Y+1	; 0x01
    7cb8:	8a 30       	cpi	r24, 0x0A	; 10
    7cba:	f8 f4       	brcc	.+62     	; 0x7cfa <_ZN6Keypad10findInListEi+0x5c>
    7cbc:	89 81       	ldd	r24, Y+1	; 0x01
    7cbe:	28 2f       	mov	r18, r24
    7cc0:	30 e0       	ldi	r19, 0x00	; 0
    7cc2:	4a 81       	ldd	r20, Y+2	; 0x02
    7cc4:	5b 81       	ldd	r21, Y+3	; 0x03
    7cc6:	c9 01       	movw	r24, r18
    7cc8:	88 0f       	add	r24, r24
    7cca:	99 1f       	adc	r25, r25
    7ccc:	88 0f       	add	r24, r24
    7cce:	99 1f       	adc	r25, r25
    7cd0:	82 0f       	add	r24, r18
    7cd2:	93 1f       	adc	r25, r19
    7cd4:	84 0f       	add	r24, r20
    7cd6:	95 1f       	adc	r25, r21
    7cd8:	4c 96       	adiw	r24, 0x1c	; 28
    7cda:	fc 01       	movw	r30, r24
    7cdc:	20 81       	ld	r18, Z
    7cde:	31 81       	ldd	r19, Z+1	; 0x01
    7ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    7ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    7ce4:	28 17       	cp	r18, r24
    7ce6:	39 07       	cpc	r19, r25
    7ce8:	21 f4       	brne	.+8      	; 0x7cf2 <_ZN6Keypad10findInListEi+0x54>
    7cea:	89 81       	ldd	r24, Y+1	; 0x01
    7cec:	88 2f       	mov	r24, r24
    7cee:	90 e0       	ldi	r25, 0x00	; 0
    7cf0:	06 c0       	rjmp	.+12     	; 0x7cfe <_ZN6Keypad10findInListEi+0x60>
    7cf2:	89 81       	ldd	r24, Y+1	; 0x01
    7cf4:	8f 5f       	subi	r24, 0xFF	; 255
    7cf6:	89 83       	std	Y+1, r24	; 0x01
    7cf8:	de cf       	rjmp	.-68     	; 0x7cb6 <_ZN6Keypad10findInListEi+0x18>
    7cfa:	8f ef       	ldi	r24, 0xFF	; 255
    7cfc:	9f ef       	ldi	r25, 0xFF	; 255
    7cfe:	0f 90       	pop	r0
    7d00:	0f 90       	pop	r0
    7d02:	0f 90       	pop	r0
    7d04:	0f 90       	pop	r0
    7d06:	0f 90       	pop	r0
    7d08:	df 91       	pop	r29
    7d0a:	cf 91       	pop	r28
    7d0c:	08 95       	ret

00007d0e <_ZN6Keypad15setDebounceTimeEj>:
    7d0e:	cf 93       	push	r28
    7d10:	df 93       	push	r29
    7d12:	00 d0       	rcall	.+0      	; 0x7d14 <_ZN6Keypad15setDebounceTimeEj+0x6>
    7d14:	1f 92       	push	r1
    7d16:	cd b7       	in	r28, 0x3d	; 61
    7d18:	de b7       	in	r29, 0x3e	; 62
    7d1a:	9a 83       	std	Y+2, r25	; 0x02
    7d1c:	89 83       	std	Y+1, r24	; 0x01
    7d1e:	7c 83       	std	Y+4, r23	; 0x04
    7d20:	6b 83       	std	Y+3, r22	; 0x03
    7d22:	8b 81       	ldd	r24, Y+3	; 0x03
    7d24:	9c 81       	ldd	r25, Y+4	; 0x04
    7d26:	89 2b       	or	r24, r25
    7d28:	51 f4       	brne	.+20     	; 0x7d3e <_ZN6Keypad15setDebounceTimeEj+0x30>
    7d2a:	89 81       	ldd	r24, Y+1	; 0x01
    7d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d2e:	83 5a       	subi	r24, 0xA3	; 163
    7d30:	9f 4f       	sbci	r25, 0xFF	; 255
    7d32:	21 e0       	ldi	r18, 0x01	; 1
    7d34:	30 e0       	ldi	r19, 0x00	; 0
    7d36:	fc 01       	movw	r30, r24
    7d38:	31 83       	std	Z+1, r19	; 0x01
    7d3a:	20 83       	st	Z, r18
    7d3c:	09 c0       	rjmp	.+18     	; 0x7d50 <_ZN6Keypad15setDebounceTimeEj+0x42>
    7d3e:	89 81       	ldd	r24, Y+1	; 0x01
    7d40:	9a 81       	ldd	r25, Y+2	; 0x02
    7d42:	83 5a       	subi	r24, 0xA3	; 163
    7d44:	9f 4f       	sbci	r25, 0xFF	; 255
    7d46:	2b 81       	ldd	r18, Y+3	; 0x03
    7d48:	3c 81       	ldd	r19, Y+4	; 0x04
    7d4a:	fc 01       	movw	r30, r24
    7d4c:	31 83       	std	Z+1, r19	; 0x01
    7d4e:	20 83       	st	Z, r18
    7d50:	00 00       	nop
    7d52:	0f 90       	pop	r0
    7d54:	0f 90       	pop	r0
    7d56:	0f 90       	pop	r0
    7d58:	0f 90       	pop	r0
    7d5a:	df 91       	pop	r29
    7d5c:	cf 91       	pop	r28
    7d5e:	08 95       	ret

00007d60 <_ZN6Keypad11setHoldTimeEj>:
    7d60:	cf 93       	push	r28
    7d62:	df 93       	push	r29
    7d64:	00 d0       	rcall	.+0      	; 0x7d66 <_ZN6Keypad11setHoldTimeEj+0x6>
    7d66:	1f 92       	push	r1
    7d68:	cd b7       	in	r28, 0x3d	; 61
    7d6a:	de b7       	in	r29, 0x3e	; 62
    7d6c:	9a 83       	std	Y+2, r25	; 0x02
    7d6e:	89 83       	std	Y+1, r24	; 0x01
    7d70:	7c 83       	std	Y+4, r23	; 0x04
    7d72:	6b 83       	std	Y+3, r22	; 0x03
    7d74:	89 81       	ldd	r24, Y+1	; 0x01
    7d76:	9a 81       	ldd	r25, Y+2	; 0x02
    7d78:	81 5a       	subi	r24, 0xA1	; 161
    7d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    7d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    7d80:	fc 01       	movw	r30, r24
    7d82:	31 83       	std	Z+1, r19	; 0x01
    7d84:	20 83       	st	Z, r18
    7d86:	00 00       	nop
    7d88:	0f 90       	pop	r0
    7d8a:	0f 90       	pop	r0
    7d8c:	0f 90       	pop	r0
    7d8e:	0f 90       	pop	r0
    7d90:	df 91       	pop	r29
    7d92:	cf 91       	pop	r28
    7d94:	08 95       	ret

00007d96 <_ZN6Keypad12transitionToEh8KeyState>:

void Keypad::transitionTo(byte idx, KeyState nextState) {
    7d96:	cf 93       	push	r28
    7d98:	df 93       	push	r29
    7d9a:	00 d0       	rcall	.+0      	; 0x7d9c <_ZN6Keypad12transitionToEh8KeyState+0x6>
    7d9c:	1f 92       	push	r1
    7d9e:	cd b7       	in	r28, 0x3d	; 61
    7da0:	de b7       	in	r29, 0x3e	; 62
    7da2:	9a 83       	std	Y+2, r25	; 0x02
    7da4:	89 83       	std	Y+1, r24	; 0x01
    7da6:	6b 83       	std	Y+3, r22	; 0x03
    7da8:	4c 83       	std	Y+4, r20	; 0x04
	key[idx].kstate = nextState;
    7daa:	8b 81       	ldd	r24, Y+3	; 0x03
    7dac:	28 2f       	mov	r18, r24
    7dae:	30 e0       	ldi	r19, 0x00	; 0
    7db0:	49 81       	ldd	r20, Y+1	; 0x01
    7db2:	5a 81       	ldd	r21, Y+2	; 0x02
    7db4:	c9 01       	movw	r24, r18
    7db6:	88 0f       	add	r24, r24
    7db8:	99 1f       	adc	r25, r25
    7dba:	88 0f       	add	r24, r24
    7dbc:	99 1f       	adc	r25, r25
    7dbe:	82 0f       	add	r24, r18
    7dc0:	93 1f       	adc	r25, r19
    7dc2:	84 0f       	add	r24, r20
    7dc4:	95 1f       	adc	r25, r21
    7dc6:	4e 96       	adiw	r24, 0x1e	; 30
    7dc8:	2c 81       	ldd	r18, Y+4	; 0x04
    7dca:	fc 01       	movw	r30, r24
    7dcc:	20 83       	st	Z, r18
	key[idx].stateChanged = true;
    7dce:	8b 81       	ldd	r24, Y+3	; 0x03
    7dd0:	28 2f       	mov	r18, r24
    7dd2:	30 e0       	ldi	r19, 0x00	; 0
    7dd4:	49 81       	ldd	r20, Y+1	; 0x01
    7dd6:	5a 81       	ldd	r21, Y+2	; 0x02
    7dd8:	c9 01       	movw	r24, r18
    7dda:	88 0f       	add	r24, r24
    7ddc:	99 1f       	adc	r25, r25
    7dde:	88 0f       	add	r24, r24
    7de0:	99 1f       	adc	r25, r25
    7de2:	82 0f       	add	r24, r18
    7de4:	93 1f       	adc	r25, r19
    7de6:	84 0f       	add	r24, r20
    7de8:	95 1f       	adc	r25, r21
    7dea:	4f 96       	adiw	r24, 0x1f	; 31
    7dec:	21 e0       	ldi	r18, 0x01	; 1
    7dee:	fc 01       	movw	r30, r24
    7df0:	20 83       	st	Z, r18

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
    7df2:	89 81       	ldd	r24, Y+1	; 0x01
    7df4:	9a 81       	ldd	r25, Y+2	; 0x02
    7df6:	8f 59       	subi	r24, 0x9F	; 159
    7df8:	9f 4f       	sbci	r25, 0xFF	; 255
    7dfa:	fc 01       	movw	r30, r24
    7dfc:	80 81       	ld	r24, Z
    7dfe:	88 23       	and	r24, r24
    7e00:	d1 f0       	breq	.+52     	; 0x7e36 <_ZN6Keypad12transitionToEh8KeyState+0xa0>
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
    7e02:	89 81       	ldd	r24, Y+1	; 0x01
    7e04:	9a 81       	ldd	r25, Y+2	; 0x02
    7e06:	8e 59       	subi	r24, 0x9E	; 158
    7e08:	9f 4f       	sbci	r25, 0xFF	; 255
    7e0a:	fc 01       	movw	r30, r24
    7e0c:	80 81       	ld	r24, Z
    7e0e:	91 81       	ldd	r25, Z+1	; 0x01
    7e10:	89 2b       	or	r24, r25
    7e12:	a1 f1       	breq	.+104    	; 0x7e7c <_ZN6Keypad12transitionToEh8KeyState+0xe6>
    7e14:	8b 81       	ldd	r24, Y+3	; 0x03
    7e16:	88 23       	and	r24, r24
    7e18:	89 f5       	brne	.+98     	; 0x7e7c <_ZN6Keypad12transitionToEh8KeyState+0xe6>
			keypadEventListener(key[0].kchar);
    7e1a:	89 81       	ldd	r24, Y+1	; 0x01
    7e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e1e:	8e 59       	subi	r24, 0x9E	; 158
    7e20:	9f 4f       	sbci	r25, 0xFF	; 255
    7e22:	fc 01       	movw	r30, r24
    7e24:	20 81       	ld	r18, Z
    7e26:	31 81       	ldd	r19, Z+1	; 0x01
    7e28:	89 81       	ldd	r24, Y+1	; 0x01
    7e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    7e2c:	fc 01       	movw	r30, r24
    7e2e:	83 8d       	ldd	r24, Z+27	; 0x1b
    7e30:	f9 01       	movw	r30, r18
    7e32:	19 95       	eicall
	else {
	  	if (keypadEventListener!=NULL)  {
			keypadEventListener(key[idx].kchar);
		}
	}
}
    7e34:	23 c0       	rjmp	.+70     	; 0x7e7c <_ZN6Keypad12transitionToEh8KeyState+0xe6>
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
    7e36:	89 81       	ldd	r24, Y+1	; 0x01
    7e38:	9a 81       	ldd	r25, Y+2	; 0x02
    7e3a:	8e 59       	subi	r24, 0x9E	; 158
    7e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    7e3e:	fc 01       	movw	r30, r24
    7e40:	80 81       	ld	r24, Z
    7e42:	91 81       	ldd	r25, Z+1	; 0x01
    7e44:	89 2b       	or	r24, r25
    7e46:	d1 f0       	breq	.+52     	; 0x7e7c <_ZN6Keypad12transitionToEh8KeyState+0xe6>
			keypadEventListener(key[idx].kchar);
    7e48:	89 81       	ldd	r24, Y+1	; 0x01
    7e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    7e4c:	8e 59       	subi	r24, 0x9E	; 158
    7e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e50:	fc 01       	movw	r30, r24
    7e52:	40 81       	ld	r20, Z
    7e54:	51 81       	ldd	r21, Z+1	; 0x01
    7e56:	8b 81       	ldd	r24, Y+3	; 0x03
    7e58:	28 2f       	mov	r18, r24
    7e5a:	30 e0       	ldi	r19, 0x00	; 0
    7e5c:	69 81       	ldd	r22, Y+1	; 0x01
    7e5e:	7a 81       	ldd	r23, Y+2	; 0x02
    7e60:	c9 01       	movw	r24, r18
    7e62:	88 0f       	add	r24, r24
    7e64:	99 1f       	adc	r25, r25
    7e66:	88 0f       	add	r24, r24
    7e68:	99 1f       	adc	r25, r25
    7e6a:	82 0f       	add	r24, r18
    7e6c:	93 1f       	adc	r25, r19
    7e6e:	86 0f       	add	r24, r22
    7e70:	97 1f       	adc	r25, r23
    7e72:	4b 96       	adiw	r24, 0x1b	; 27
    7e74:	fc 01       	movw	r30, r24
    7e76:	80 81       	ld	r24, Z
    7e78:	fa 01       	movw	r30, r20
    7e7a:	19 95       	eicall
		}
	}
}
    7e7c:	00 00       	nop
    7e7e:	0f 90       	pop	r0
    7e80:	0f 90       	pop	r0
    7e82:	0f 90       	pop	r0
    7e84:	0f 90       	pop	r0
    7e86:	df 91       	pop	r29
    7e88:	cf 91       	pop	r28
    7e8a:	08 95       	ret

00007e8c <_ZN13LiquidCrystalC1Ehhhhhh>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    7e8c:	8f 92       	push	r8
    7e8e:	af 92       	push	r10
    7e90:	cf 92       	push	r12
    7e92:	ef 92       	push	r14
    7e94:	0f 93       	push	r16
    7e96:	cf 93       	push	r28
    7e98:	df 93       	push	r29
    7e9a:	cd b7       	in	r28, 0x3d	; 61
    7e9c:	de b7       	in	r29, 0x3e	; 62
    7e9e:	28 97       	sbiw	r28, 0x08	; 8
    7ea0:	0f b6       	in	r0, 0x3f	; 63
    7ea2:	f8 94       	cli
    7ea4:	de bf       	out	0x3e, r29	; 62
    7ea6:	0f be       	out	0x3f, r0	; 63
    7ea8:	cd bf       	out	0x3d, r28	; 61
    7eaa:	9a 83       	std	Y+2, r25	; 0x02
    7eac:	89 83       	std	Y+1, r24	; 0x01
    7eae:	6b 83       	std	Y+3, r22	; 0x03
    7eb0:	4c 83       	std	Y+4, r20	; 0x04
    7eb2:	2d 83       	std	Y+5, r18	; 0x05
    7eb4:	0e 83       	std	Y+6, r16	; 0x06
    7eb6:	ef 82       	std	Y+7, r14	; 0x07
    7eb8:	c8 86       	std	Y+8, r12	; 0x08
    7eba:	89 81       	ldd	r24, Y+1	; 0x01
    7ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    7ebe:	0e 94 bf 12 	call	0x257e	; 0x257e <_ZN5PrintC1Ev>
    7ec2:	23 e0       	ldi	r18, 0x03	; 3
    7ec4:	33 e0       	ldi	r19, 0x03	; 3
    7ec6:	89 81       	ldd	r24, Y+1	; 0x01
    7ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    7eca:	fc 01       	movw	r30, r24
    7ecc:	31 83       	std	Z+1, r19	; 0x01
    7ece:	20 83       	st	Z, r18
    7ed0:	89 81       	ldd	r24, Y+1	; 0x01
    7ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    7ed4:	1f 92       	push	r1
    7ed6:	1f 92       	push	r1
    7ed8:	1f 92       	push	r1
    7eda:	1f 92       	push	r1
    7edc:	88 84       	ldd	r8, Y+8	; 0x08
    7ede:	af 80       	ldd	r10, Y+7	; 0x07
    7ee0:	ce 80       	ldd	r12, Y+6	; 0x06
    7ee2:	ed 80       	ldd	r14, Y+5	; 0x05
    7ee4:	0c 81       	ldd	r16, Y+4	; 0x04
    7ee6:	2f ef       	ldi	r18, 0xFF	; 255
    7ee8:	4b 81       	ldd	r20, Y+3	; 0x03
    7eea:	61 e0       	ldi	r22, 0x01	; 1
    7eec:	13 d0       	rcall	.+38     	; 0x7f14 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    7eee:	0f 90       	pop	r0
    7ef0:	0f 90       	pop	r0
    7ef2:	0f 90       	pop	r0
    7ef4:	0f 90       	pop	r0
    7ef6:	00 00       	nop
    7ef8:	28 96       	adiw	r28, 0x08	; 8
    7efa:	0f b6       	in	r0, 0x3f	; 63
    7efc:	f8 94       	cli
    7efe:	de bf       	out	0x3e, r29	; 62
    7f00:	0f be       	out	0x3f, r0	; 63
    7f02:	cd bf       	out	0x3d, r28	; 61
    7f04:	df 91       	pop	r29
    7f06:	cf 91       	pop	r28
    7f08:	0f 91       	pop	r16
    7f0a:	ef 90       	pop	r14
    7f0c:	cf 90       	pop	r12
    7f0e:	af 90       	pop	r10
    7f10:	8f 90       	pop	r8
    7f12:	08 95       	ret

00007f14 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
    7f14:	8f 92       	push	r8
    7f16:	af 92       	push	r10
    7f18:	cf 92       	push	r12
    7f1a:	ef 92       	push	r14
    7f1c:	0f 93       	push	r16
    7f1e:	cf 93       	push	r28
    7f20:	df 93       	push	r29
    7f22:	cd b7       	in	r28, 0x3d	; 61
    7f24:	de b7       	in	r29, 0x3e	; 62
    7f26:	2a 97       	sbiw	r28, 0x0a	; 10
    7f28:	0f b6       	in	r0, 0x3f	; 63
    7f2a:	f8 94       	cli
    7f2c:	de bf       	out	0x3e, r29	; 62
    7f2e:	0f be       	out	0x3f, r0	; 63
    7f30:	cd bf       	out	0x3d, r28	; 61
    7f32:	9a 83       	std	Y+2, r25	; 0x02
    7f34:	89 83       	std	Y+1, r24	; 0x01
    7f36:	6b 83       	std	Y+3, r22	; 0x03
    7f38:	4c 83       	std	Y+4, r20	; 0x04
    7f3a:	2d 83       	std	Y+5, r18	; 0x05
    7f3c:	0e 83       	std	Y+6, r16	; 0x06
    7f3e:	ef 82       	std	Y+7, r14	; 0x07
    7f40:	c8 86       	std	Y+8, r12	; 0x08
    7f42:	a9 86       	std	Y+9, r10	; 0x09
    7f44:	8a 86       	std	Y+10, r8	; 0x0a
    7f46:	89 81       	ldd	r24, Y+1	; 0x01
    7f48:	9a 81       	ldd	r25, Y+2	; 0x02
    7f4a:	2c 81       	ldd	r18, Y+4	; 0x04
    7f4c:	fc 01       	movw	r30, r24
    7f4e:	24 83       	std	Z+4, r18	; 0x04
    7f50:	89 81       	ldd	r24, Y+1	; 0x01
    7f52:	9a 81       	ldd	r25, Y+2	; 0x02
    7f54:	2d 81       	ldd	r18, Y+5	; 0x05
    7f56:	fc 01       	movw	r30, r24
    7f58:	25 83       	std	Z+5, r18	; 0x05
    7f5a:	89 81       	ldd	r24, Y+1	; 0x01
    7f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    7f5e:	2e 81       	ldd	r18, Y+6	; 0x06
    7f60:	fc 01       	movw	r30, r24
    7f62:	26 83       	std	Z+6, r18	; 0x06
    7f64:	89 81       	ldd	r24, Y+1	; 0x01
    7f66:	9a 81       	ldd	r25, Y+2	; 0x02
    7f68:	2f 81       	ldd	r18, Y+7	; 0x07
    7f6a:	fc 01       	movw	r30, r24
    7f6c:	27 83       	std	Z+7, r18	; 0x07
    7f6e:	89 81       	ldd	r24, Y+1	; 0x01
    7f70:	9a 81       	ldd	r25, Y+2	; 0x02
    7f72:	28 85       	ldd	r18, Y+8	; 0x08
    7f74:	fc 01       	movw	r30, r24
    7f76:	20 87       	std	Z+8, r18	; 0x08
    7f78:	89 81       	ldd	r24, Y+1	; 0x01
    7f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    7f7c:	29 85       	ldd	r18, Y+9	; 0x09
    7f7e:	fc 01       	movw	r30, r24
    7f80:	21 87       	std	Z+9, r18	; 0x09
    7f82:	89 81       	ldd	r24, Y+1	; 0x01
    7f84:	9a 81       	ldd	r25, Y+2	; 0x02
    7f86:	2a 85       	ldd	r18, Y+10	; 0x0a
    7f88:	fc 01       	movw	r30, r24
    7f8a:	22 87       	std	Z+10, r18	; 0x0a
    7f8c:	89 81       	ldd	r24, Y+1	; 0x01
    7f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    7f90:	2d 89       	ldd	r18, Y+21	; 0x15
    7f92:	fc 01       	movw	r30, r24
    7f94:	23 87       	std	Z+11, r18	; 0x0b
    7f96:	89 81       	ldd	r24, Y+1	; 0x01
    7f98:	9a 81       	ldd	r25, Y+2	; 0x02
    7f9a:	2e 89       	ldd	r18, Y+22	; 0x16
    7f9c:	fc 01       	movw	r30, r24
    7f9e:	24 87       	std	Z+12, r18	; 0x0c
    7fa0:	89 81       	ldd	r24, Y+1	; 0x01
    7fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    7fa4:	2f 89       	ldd	r18, Y+23	; 0x17
    7fa6:	fc 01       	movw	r30, r24
    7fa8:	25 87       	std	Z+13, r18	; 0x0d
    7faa:	89 81       	ldd	r24, Y+1	; 0x01
    7fac:	9a 81       	ldd	r25, Y+2	; 0x02
    7fae:	28 8d       	ldd	r18, Y+24	; 0x18
    7fb0:	fc 01       	movw	r30, r24
    7fb2:	26 87       	std	Z+14, r18	; 0x0e
    7fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    7fb6:	88 23       	and	r24, r24
    7fb8:	29 f0       	breq	.+10     	; 0x7fc4 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xb0>
    7fba:	89 81       	ldd	r24, Y+1	; 0x01
    7fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    7fbe:	fc 01       	movw	r30, r24
    7fc0:	17 86       	std	Z+15, r1	; 0x0f
    7fc2:	05 c0       	rjmp	.+10     	; 0x7fce <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0xba>
    7fc4:	89 81       	ldd	r24, Y+1	; 0x01
    7fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    7fc8:	20 e1       	ldi	r18, 0x10	; 16
    7fca:	fc 01       	movw	r30, r24
    7fcc:	27 87       	std	Z+15, r18	; 0x0f
    7fce:	89 81       	ldd	r24, Y+1	; 0x01
    7fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    7fd2:	20 e0       	ldi	r18, 0x00	; 0
    7fd4:	41 e0       	ldi	r20, 0x01	; 1
    7fd6:	60 e1       	ldi	r22, 0x10	; 16
    7fd8:	0f d0       	rcall	.+30     	; 0x7ff8 <_ZN13LiquidCrystal5beginEhhh>
    7fda:	00 00       	nop
    7fdc:	2a 96       	adiw	r28, 0x0a	; 10
    7fde:	0f b6       	in	r0, 0x3f	; 63
    7fe0:	f8 94       	cli
    7fe2:	de bf       	out	0x3e, r29	; 62
    7fe4:	0f be       	out	0x3f, r0	; 63
    7fe6:	cd bf       	out	0x3d, r28	; 61
    7fe8:	df 91       	pop	r29
    7fea:	cf 91       	pop	r28
    7fec:	0f 91       	pop	r16
    7fee:	ef 90       	pop	r14
    7ff0:	cf 90       	pop	r12
    7ff2:	af 90       	pop	r10
    7ff4:	8f 90       	pop	r8
    7ff6:	08 95       	ret

00007ff8 <_ZN13LiquidCrystal5beginEhhh>:
    7ff8:	0f 93       	push	r16
    7ffa:	1f 93       	push	r17
    7ffc:	cf 93       	push	r28
    7ffe:	df 93       	push	r29
    8000:	cd b7       	in	r28, 0x3d	; 61
    8002:	de b7       	in	r29, 0x3e	; 62
    8004:	27 97       	sbiw	r28, 0x07	; 7
    8006:	0f b6       	in	r0, 0x3f	; 63
    8008:	f8 94       	cli
    800a:	de bf       	out	0x3e, r29	; 62
    800c:	0f be       	out	0x3f, r0	; 63
    800e:	cd bf       	out	0x3d, r28	; 61
    8010:	9c 83       	std	Y+4, r25	; 0x04
    8012:	8b 83       	std	Y+3, r24	; 0x03
    8014:	6d 83       	std	Y+5, r22	; 0x05
    8016:	4e 83       	std	Y+6, r20	; 0x06
    8018:	2f 83       	std	Y+7, r18	; 0x07
    801a:	8e 81       	ldd	r24, Y+6	; 0x06
    801c:	82 30       	cpi	r24, 0x02	; 2
    801e:	50 f0       	brcs	.+20     	; 0x8034 <_ZN13LiquidCrystal5beginEhhh+0x3c>
    8020:	8b 81       	ldd	r24, Y+3	; 0x03
    8022:	9c 81       	ldd	r25, Y+4	; 0x04
    8024:	fc 01       	movw	r30, r24
    8026:	87 85       	ldd	r24, Z+15	; 0x0f
    8028:	28 2f       	mov	r18, r24
    802a:	28 60       	ori	r18, 0x08	; 8
    802c:	8b 81       	ldd	r24, Y+3	; 0x03
    802e:	9c 81       	ldd	r25, Y+4	; 0x04
    8030:	fc 01       	movw	r30, r24
    8032:	27 87       	std	Z+15, r18	; 0x0f
    8034:	8b 81       	ldd	r24, Y+3	; 0x03
    8036:	9c 81       	ldd	r25, Y+4	; 0x04
    8038:	2e 81       	ldd	r18, Y+6	; 0x06
    803a:	fc 01       	movw	r30, r24
    803c:	23 8b       	std	Z+19, r18	; 0x13
    803e:	8d 81       	ldd	r24, Y+5	; 0x05
    8040:	88 2f       	mov	r24, r24
    8042:	90 e0       	ldi	r25, 0x00	; 0
    8044:	ac 01       	movw	r20, r24
    8046:	40 5c       	subi	r20, 0xC0	; 192
    8048:	5f 4f       	sbci	r21, 0xFF	; 255
    804a:	8d 81       	ldd	r24, Y+5	; 0x05
    804c:	28 2f       	mov	r18, r24
    804e:	30 e0       	ldi	r19, 0x00	; 0
    8050:	8b 81       	ldd	r24, Y+3	; 0x03
    8052:	9c 81       	ldd	r25, Y+4	; 0x04
    8054:	8a 01       	movw	r16, r20
    8056:	40 e4       	ldi	r20, 0x40	; 64
    8058:	50 e0       	ldi	r21, 0x00	; 0
    805a:	60 e0       	ldi	r22, 0x00	; 0
    805c:	70 e0       	ldi	r23, 0x00	; 0
    805e:	ef d0       	rcall	.+478    	; 0x823e <_ZN13LiquidCrystal13setRowOffsetsEiiii>
    8060:	8f 81       	ldd	r24, Y+7	; 0x07
    8062:	88 23       	and	r24, r24
    8064:	69 f0       	breq	.+26     	; 0x8080 <_ZN13LiquidCrystal5beginEhhh+0x88>
    8066:	8e 81       	ldd	r24, Y+6	; 0x06
    8068:	81 30       	cpi	r24, 0x01	; 1
    806a:	51 f4       	brne	.+20     	; 0x8080 <_ZN13LiquidCrystal5beginEhhh+0x88>
    806c:	8b 81       	ldd	r24, Y+3	; 0x03
    806e:	9c 81       	ldd	r25, Y+4	; 0x04
    8070:	fc 01       	movw	r30, r24
    8072:	87 85       	ldd	r24, Z+15	; 0x0f
    8074:	28 2f       	mov	r18, r24
    8076:	24 60       	ori	r18, 0x04	; 4
    8078:	8b 81       	ldd	r24, Y+3	; 0x03
    807a:	9c 81       	ldd	r25, Y+4	; 0x04
    807c:	fc 01       	movw	r30, r24
    807e:	27 87       	std	Z+15, r18	; 0x0f
    8080:	8b 81       	ldd	r24, Y+3	; 0x03
    8082:	9c 81       	ldd	r25, Y+4	; 0x04
    8084:	fc 01       	movw	r30, r24
    8086:	84 81       	ldd	r24, Z+4	; 0x04
    8088:	61 e0       	ldi	r22, 0x01	; 1
    808a:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    808e:	8b 81       	ldd	r24, Y+3	; 0x03
    8090:	9c 81       	ldd	r25, Y+4	; 0x04
    8092:	fc 01       	movw	r30, r24
    8094:	85 81       	ldd	r24, Z+5	; 0x05
    8096:	8f 3f       	cpi	r24, 0xFF	; 255
    8098:	39 f0       	breq	.+14     	; 0x80a8 <_ZN13LiquidCrystal5beginEhhh+0xb0>
    809a:	8b 81       	ldd	r24, Y+3	; 0x03
    809c:	9c 81       	ldd	r25, Y+4	; 0x04
    809e:	fc 01       	movw	r30, r24
    80a0:	85 81       	ldd	r24, Z+5	; 0x05
    80a2:	61 e0       	ldi	r22, 0x01	; 1
    80a4:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    80a8:	8b 81       	ldd	r24, Y+3	; 0x03
    80aa:	9c 81       	ldd	r25, Y+4	; 0x04
    80ac:	fc 01       	movw	r30, r24
    80ae:	86 81       	ldd	r24, Z+6	; 0x06
    80b0:	61 e0       	ldi	r22, 0x01	; 1
    80b2:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    80b6:	1a 82       	std	Y+2, r1	; 0x02
    80b8:	19 82       	std	Y+1, r1	; 0x01
    80ba:	8b 81       	ldd	r24, Y+3	; 0x03
    80bc:	9c 81       	ldd	r25, Y+4	; 0x04
    80be:	fc 01       	movw	r30, r24
    80c0:	87 85       	ldd	r24, Z+15	; 0x0f
    80c2:	88 2f       	mov	r24, r24
    80c4:	90 e0       	ldi	r25, 0x00	; 0
    80c6:	80 71       	andi	r24, 0x10	; 16
    80c8:	99 27       	eor	r25, r25
    80ca:	89 2b       	or	r24, r25
    80cc:	19 f0       	breq	.+6      	; 0x80d4 <_ZN13LiquidCrystal5beginEhhh+0xdc>
    80ce:	88 e0       	ldi	r24, 0x08	; 8
    80d0:	90 e0       	ldi	r25, 0x00	; 0
    80d2:	02 c0       	rjmp	.+4      	; 0x80d8 <_ZN13LiquidCrystal5beginEhhh+0xe0>
    80d4:	84 e0       	ldi	r24, 0x04	; 4
    80d6:	90 e0       	ldi	r25, 0x00	; 0
    80d8:	29 81       	ldd	r18, Y+1	; 0x01
    80da:	3a 81       	ldd	r19, Y+2	; 0x02
    80dc:	28 17       	cp	r18, r24
    80de:	39 07       	cpc	r19, r25
    80e0:	94 f4       	brge	.+36     	; 0x8106 <_ZN13LiquidCrystal5beginEhhh+0x10e>
    80e2:	2b 81       	ldd	r18, Y+3	; 0x03
    80e4:	3c 81       	ldd	r19, Y+4	; 0x04
    80e6:	89 81       	ldd	r24, Y+1	; 0x01
    80e8:	9a 81       	ldd	r25, Y+2	; 0x02
    80ea:	82 0f       	add	r24, r18
    80ec:	93 1f       	adc	r25, r19
    80ee:	07 96       	adiw	r24, 0x07	; 7
    80f0:	fc 01       	movw	r30, r24
    80f2:	80 81       	ld	r24, Z
    80f4:	61 e0       	ldi	r22, 0x01	; 1
    80f6:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    80fa:	89 81       	ldd	r24, Y+1	; 0x01
    80fc:	9a 81       	ldd	r25, Y+2	; 0x02
    80fe:	01 96       	adiw	r24, 0x01	; 1
    8100:	9a 83       	std	Y+2, r25	; 0x02
    8102:	89 83       	std	Y+1, r24	; 0x01
    8104:	da cf       	rjmp	.-76     	; 0x80ba <_ZN13LiquidCrystal5beginEhhh+0xc2>
    8106:	80 e5       	ldi	r24, 0x50	; 80
    8108:	93 ec       	ldi	r25, 0xC3	; 195
    810a:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
    810e:	8b 81       	ldd	r24, Y+3	; 0x03
    8110:	9c 81       	ldd	r25, Y+4	; 0x04
    8112:	fc 01       	movw	r30, r24
    8114:	84 81       	ldd	r24, Z+4	; 0x04
    8116:	60 e0       	ldi	r22, 0x00	; 0
    8118:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    811c:	8b 81       	ldd	r24, Y+3	; 0x03
    811e:	9c 81       	ldd	r25, Y+4	; 0x04
    8120:	fc 01       	movw	r30, r24
    8122:	86 81       	ldd	r24, Z+6	; 0x06
    8124:	60 e0       	ldi	r22, 0x00	; 0
    8126:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    812a:	8b 81       	ldd	r24, Y+3	; 0x03
    812c:	9c 81       	ldd	r25, Y+4	; 0x04
    812e:	fc 01       	movw	r30, r24
    8130:	85 81       	ldd	r24, Z+5	; 0x05
    8132:	8f 3f       	cpi	r24, 0xFF	; 255
    8134:	39 f0       	breq	.+14     	; 0x8144 <_ZN13LiquidCrystal5beginEhhh+0x14c>
    8136:	8b 81       	ldd	r24, Y+3	; 0x03
    8138:	9c 81       	ldd	r25, Y+4	; 0x04
    813a:	fc 01       	movw	r30, r24
    813c:	85 81       	ldd	r24, Z+5	; 0x05
    813e:	60 e0       	ldi	r22, 0x00	; 0
    8140:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    8144:	8b 81       	ldd	r24, Y+3	; 0x03
    8146:	9c 81       	ldd	r25, Y+4	; 0x04
    8148:	fc 01       	movw	r30, r24
    814a:	87 85       	ldd	r24, Z+15	; 0x0f
    814c:	88 2f       	mov	r24, r24
    814e:	90 e0       	ldi	r25, 0x00	; 0
    8150:	80 71       	andi	r24, 0x10	; 16
    8152:	99 27       	eor	r25, r25
    8154:	89 2b       	or	r24, r25
    8156:	e9 f4       	brne	.+58     	; 0x8192 <_ZN13LiquidCrystal5beginEhhh+0x19a>
    8158:	8b 81       	ldd	r24, Y+3	; 0x03
    815a:	9c 81       	ldd	r25, Y+4	; 0x04
    815c:	63 e0       	ldi	r22, 0x03	; 3
    815e:	ba d1       	rcall	.+884    	; 0x84d4 <_ZN13LiquidCrystal10write4bitsEh>
    8160:	84 e9       	ldi	r24, 0x94	; 148
    8162:	91 e1       	ldi	r25, 0x11	; 17
    8164:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
    8168:	8b 81       	ldd	r24, Y+3	; 0x03
    816a:	9c 81       	ldd	r25, Y+4	; 0x04
    816c:	63 e0       	ldi	r22, 0x03	; 3
    816e:	b2 d1       	rcall	.+868    	; 0x84d4 <_ZN13LiquidCrystal10write4bitsEh>
    8170:	84 e9       	ldi	r24, 0x94	; 148
    8172:	91 e1       	ldi	r25, 0x11	; 17
    8174:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
    8178:	8b 81       	ldd	r24, Y+3	; 0x03
    817a:	9c 81       	ldd	r25, Y+4	; 0x04
    817c:	63 e0       	ldi	r22, 0x03	; 3
    817e:	aa d1       	rcall	.+852    	; 0x84d4 <_ZN13LiquidCrystal10write4bitsEh>
    8180:	86 e9       	ldi	r24, 0x96	; 150
    8182:	90 e0       	ldi	r25, 0x00	; 0
    8184:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
    8188:	8b 81       	ldd	r24, Y+3	; 0x03
    818a:	9c 81       	ldd	r25, Y+4	; 0x04
    818c:	62 e0       	ldi	r22, 0x02	; 2
    818e:	a2 d1       	rcall	.+836    	; 0x84d4 <_ZN13LiquidCrystal10write4bitsEh>
    8190:	26 c0       	rjmp	.+76     	; 0x81de <_ZN13LiquidCrystal5beginEhhh+0x1e6>
    8192:	8b 81       	ldd	r24, Y+3	; 0x03
    8194:	9c 81       	ldd	r25, Y+4	; 0x04
    8196:	fc 01       	movw	r30, r24
    8198:	87 85       	ldd	r24, Z+15	; 0x0f
    819a:	28 2f       	mov	r18, r24
    819c:	20 62       	ori	r18, 0x20	; 32
    819e:	8b 81       	ldd	r24, Y+3	; 0x03
    81a0:	9c 81       	ldd	r25, Y+4	; 0x04
    81a2:	62 2f       	mov	r22, r18
    81a4:	f6 d0       	rcall	.+492    	; 0x8392 <_ZN13LiquidCrystal7commandEh>
    81a6:	84 e9       	ldi	r24, 0x94	; 148
    81a8:	91 e1       	ldi	r25, 0x11	; 17
    81aa:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
    81ae:	8b 81       	ldd	r24, Y+3	; 0x03
    81b0:	9c 81       	ldd	r25, Y+4	; 0x04
    81b2:	fc 01       	movw	r30, r24
    81b4:	87 85       	ldd	r24, Z+15	; 0x0f
    81b6:	28 2f       	mov	r18, r24
    81b8:	20 62       	ori	r18, 0x20	; 32
    81ba:	8b 81       	ldd	r24, Y+3	; 0x03
    81bc:	9c 81       	ldd	r25, Y+4	; 0x04
    81be:	62 2f       	mov	r22, r18
    81c0:	e8 d0       	rcall	.+464    	; 0x8392 <_ZN13LiquidCrystal7commandEh>
    81c2:	86 e9       	ldi	r24, 0x96	; 150
    81c4:	90 e0       	ldi	r25, 0x00	; 0
    81c6:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
    81ca:	8b 81       	ldd	r24, Y+3	; 0x03
    81cc:	9c 81       	ldd	r25, Y+4	; 0x04
    81ce:	fc 01       	movw	r30, r24
    81d0:	87 85       	ldd	r24, Z+15	; 0x0f
    81d2:	28 2f       	mov	r18, r24
    81d4:	20 62       	ori	r18, 0x20	; 32
    81d6:	8b 81       	ldd	r24, Y+3	; 0x03
    81d8:	9c 81       	ldd	r25, Y+4	; 0x04
    81da:	62 2f       	mov	r22, r18
    81dc:	da d0       	rcall	.+436    	; 0x8392 <_ZN13LiquidCrystal7commandEh>
    81de:	8b 81       	ldd	r24, Y+3	; 0x03
    81e0:	9c 81       	ldd	r25, Y+4	; 0x04
    81e2:	fc 01       	movw	r30, r24
    81e4:	87 85       	ldd	r24, Z+15	; 0x0f
    81e6:	28 2f       	mov	r18, r24
    81e8:	20 62       	ori	r18, 0x20	; 32
    81ea:	8b 81       	ldd	r24, Y+3	; 0x03
    81ec:	9c 81       	ldd	r25, Y+4	; 0x04
    81ee:	62 2f       	mov	r22, r18
    81f0:	d0 d0       	rcall	.+416    	; 0x8392 <_ZN13LiquidCrystal7commandEh>
    81f2:	8b 81       	ldd	r24, Y+3	; 0x03
    81f4:	9c 81       	ldd	r25, Y+4	; 0x04
    81f6:	24 e0       	ldi	r18, 0x04	; 4
    81f8:	fc 01       	movw	r30, r24
    81fa:	20 8b       	std	Z+16, r18	; 0x10
    81fc:	8b 81       	ldd	r24, Y+3	; 0x03
    81fe:	9c 81       	ldd	r25, Y+4	; 0x04
    8200:	a6 d0       	rcall	.+332    	; 0x834e <_ZN13LiquidCrystal7displayEv>
    8202:	8b 81       	ldd	r24, Y+3	; 0x03
    8204:	9c 81       	ldd	r25, Y+4	; 0x04
    8206:	51 d0       	rcall	.+162    	; 0x82aa <_ZN13LiquidCrystal5clearEv>
    8208:	8b 81       	ldd	r24, Y+3	; 0x03
    820a:	9c 81       	ldd	r25, Y+4	; 0x04
    820c:	22 e0       	ldi	r18, 0x02	; 2
    820e:	fc 01       	movw	r30, r24
    8210:	21 8b       	std	Z+17, r18	; 0x11
    8212:	8b 81       	ldd	r24, Y+3	; 0x03
    8214:	9c 81       	ldd	r25, Y+4	; 0x04
    8216:	fc 01       	movw	r30, r24
    8218:	81 89       	ldd	r24, Z+17	; 0x11
    821a:	28 2f       	mov	r18, r24
    821c:	24 60       	ori	r18, 0x04	; 4
    821e:	8b 81       	ldd	r24, Y+3	; 0x03
    8220:	9c 81       	ldd	r25, Y+4	; 0x04
    8222:	62 2f       	mov	r22, r18
    8224:	b6 d0       	rcall	.+364    	; 0x8392 <_ZN13LiquidCrystal7commandEh>
    8226:	00 00       	nop
    8228:	27 96       	adiw	r28, 0x07	; 7
    822a:	0f b6       	in	r0, 0x3f	; 63
    822c:	f8 94       	cli
    822e:	de bf       	out	0x3e, r29	; 62
    8230:	0f be       	out	0x3f, r0	; 63
    8232:	cd bf       	out	0x3d, r28	; 61
    8234:	df 91       	pop	r29
    8236:	cf 91       	pop	r28
    8238:	1f 91       	pop	r17
    823a:	0f 91       	pop	r16
    823c:	08 95       	ret

0000823e <_ZN13LiquidCrystal13setRowOffsetsEiiii>:
    823e:	0f 93       	push	r16
    8240:	1f 93       	push	r17
    8242:	cf 93       	push	r28
    8244:	df 93       	push	r29
    8246:	cd b7       	in	r28, 0x3d	; 61
    8248:	de b7       	in	r29, 0x3e	; 62
    824a:	2a 97       	sbiw	r28, 0x0a	; 10
    824c:	0f b6       	in	r0, 0x3f	; 63
    824e:	f8 94       	cli
    8250:	de bf       	out	0x3e, r29	; 62
    8252:	0f be       	out	0x3f, r0	; 63
    8254:	cd bf       	out	0x3d, r28	; 61
    8256:	9a 83       	std	Y+2, r25	; 0x02
    8258:	89 83       	std	Y+1, r24	; 0x01
    825a:	7c 83       	std	Y+4, r23	; 0x04
    825c:	6b 83       	std	Y+3, r22	; 0x03
    825e:	5e 83       	std	Y+6, r21	; 0x06
    8260:	4d 83       	std	Y+5, r20	; 0x05
    8262:	38 87       	std	Y+8, r19	; 0x08
    8264:	2f 83       	std	Y+7, r18	; 0x07
    8266:	1a 87       	std	Y+10, r17	; 0x0a
    8268:	09 87       	std	Y+9, r16	; 0x09
    826a:	2b 81       	ldd	r18, Y+3	; 0x03
    826c:	89 81       	ldd	r24, Y+1	; 0x01
    826e:	9a 81       	ldd	r25, Y+2	; 0x02
    8270:	fc 01       	movw	r30, r24
    8272:	24 8b       	std	Z+20, r18	; 0x14
    8274:	2d 81       	ldd	r18, Y+5	; 0x05
    8276:	89 81       	ldd	r24, Y+1	; 0x01
    8278:	9a 81       	ldd	r25, Y+2	; 0x02
    827a:	fc 01       	movw	r30, r24
    827c:	25 8b       	std	Z+21, r18	; 0x15
    827e:	2f 81       	ldd	r18, Y+7	; 0x07
    8280:	89 81       	ldd	r24, Y+1	; 0x01
    8282:	9a 81       	ldd	r25, Y+2	; 0x02
    8284:	fc 01       	movw	r30, r24
    8286:	26 8b       	std	Z+22, r18	; 0x16
    8288:	29 85       	ldd	r18, Y+9	; 0x09
    828a:	89 81       	ldd	r24, Y+1	; 0x01
    828c:	9a 81       	ldd	r25, Y+2	; 0x02
    828e:	fc 01       	movw	r30, r24
    8290:	27 8b       	std	Z+23, r18	; 0x17
    8292:	00 00       	nop
    8294:	2a 96       	adiw	r28, 0x0a	; 10
    8296:	0f b6       	in	r0, 0x3f	; 63
    8298:	f8 94       	cli
    829a:	de bf       	out	0x3e, r29	; 62
    829c:	0f be       	out	0x3f, r0	; 63
    829e:	cd bf       	out	0x3d, r28	; 61
    82a0:	df 91       	pop	r29
    82a2:	cf 91       	pop	r28
    82a4:	1f 91       	pop	r17
    82a6:	0f 91       	pop	r16
    82a8:	08 95       	ret

000082aa <_ZN13LiquidCrystal5clearEv>:
    82aa:	cf 93       	push	r28
    82ac:	df 93       	push	r29
    82ae:	1f 92       	push	r1
    82b0:	1f 92       	push	r1
    82b2:	cd b7       	in	r28, 0x3d	; 61
    82b4:	de b7       	in	r29, 0x3e	; 62
    82b6:	9a 83       	std	Y+2, r25	; 0x02
    82b8:	89 83       	std	Y+1, r24	; 0x01
    82ba:	89 81       	ldd	r24, Y+1	; 0x01
    82bc:	9a 81       	ldd	r25, Y+2	; 0x02
    82be:	61 e0       	ldi	r22, 0x01	; 1
    82c0:	68 d0       	rcall	.+208    	; 0x8392 <_ZN13LiquidCrystal7commandEh>
    82c2:	80 ed       	ldi	r24, 0xD0	; 208
    82c4:	97 e0       	ldi	r25, 0x07	; 7
    82c6:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
    82ca:	00 00       	nop
    82cc:	0f 90       	pop	r0
    82ce:	0f 90       	pop	r0
    82d0:	df 91       	pop	r29
    82d2:	cf 91       	pop	r28
    82d4:	08 95       	ret

000082d6 <_ZN13LiquidCrystal9setCursorEhh>:
    82d6:	cf 93       	push	r28
    82d8:	df 93       	push	r29
    82da:	00 d0       	rcall	.+0      	; 0x82dc <_ZN13LiquidCrystal9setCursorEhh+0x6>
    82dc:	00 d0       	rcall	.+0      	; 0x82de <_ZN13LiquidCrystal9setCursorEhh+0x8>
    82de:	cd b7       	in	r28, 0x3d	; 61
    82e0:	de b7       	in	r29, 0x3e	; 62
    82e2:	9c 83       	std	Y+4, r25	; 0x04
    82e4:	8b 83       	std	Y+3, r24	; 0x03
    82e6:	6d 83       	std	Y+5, r22	; 0x05
    82e8:	4e 83       	std	Y+6, r20	; 0x06
    82ea:	84 e0       	ldi	r24, 0x04	; 4
    82ec:	90 e0       	ldi	r25, 0x00	; 0
    82ee:	9a 83       	std	Y+2, r25	; 0x02
    82f0:	89 83       	std	Y+1, r24	; 0x01
    82f2:	8e 81       	ldd	r24, Y+6	; 0x06
    82f4:	84 30       	cpi	r24, 0x04	; 4
    82f6:	10 f0       	brcs	.+4      	; 0x82fc <_ZN13LiquidCrystal9setCursorEhh+0x26>
    82f8:	83 e0       	ldi	r24, 0x03	; 3
    82fa:	8e 83       	std	Y+6, r24	; 0x06
    82fc:	8b 81       	ldd	r24, Y+3	; 0x03
    82fe:	9c 81       	ldd	r25, Y+4	; 0x04
    8300:	fc 01       	movw	r30, r24
    8302:	93 89       	ldd	r25, Z+19	; 0x13
    8304:	8e 81       	ldd	r24, Y+6	; 0x06
    8306:	89 17       	cp	r24, r25
    8308:	30 f0       	brcs	.+12     	; 0x8316 <_ZN13LiquidCrystal9setCursorEhh+0x40>
    830a:	8b 81       	ldd	r24, Y+3	; 0x03
    830c:	9c 81       	ldd	r25, Y+4	; 0x04
    830e:	fc 01       	movw	r30, r24
    8310:	83 89       	ldd	r24, Z+19	; 0x13
    8312:	81 50       	subi	r24, 0x01	; 1
    8314:	8e 83       	std	Y+6, r24	; 0x06
    8316:	8e 81       	ldd	r24, Y+6	; 0x06
    8318:	88 2f       	mov	r24, r24
    831a:	90 e0       	ldi	r25, 0x00	; 0
    831c:	2b 81       	ldd	r18, Y+3	; 0x03
    831e:	3c 81       	ldd	r19, Y+4	; 0x04
    8320:	82 0f       	add	r24, r18
    8322:	93 1f       	adc	r25, r19
    8324:	44 96       	adiw	r24, 0x14	; 20
    8326:	fc 01       	movw	r30, r24
    8328:	90 81       	ld	r25, Z
    832a:	8d 81       	ldd	r24, Y+5	; 0x05
    832c:	89 0f       	add	r24, r25
    832e:	80 68       	ori	r24, 0x80	; 128
    8330:	28 2f       	mov	r18, r24
    8332:	8b 81       	ldd	r24, Y+3	; 0x03
    8334:	9c 81       	ldd	r25, Y+4	; 0x04
    8336:	62 2f       	mov	r22, r18
    8338:	2c d0       	rcall	.+88     	; 0x8392 <_ZN13LiquidCrystal7commandEh>
    833a:	00 00       	nop
    833c:	26 96       	adiw	r28, 0x06	; 6
    833e:	0f b6       	in	r0, 0x3f	; 63
    8340:	f8 94       	cli
    8342:	de bf       	out	0x3e, r29	; 62
    8344:	0f be       	out	0x3f, r0	; 63
    8346:	cd bf       	out	0x3d, r28	; 61
    8348:	df 91       	pop	r29
    834a:	cf 91       	pop	r28
    834c:	08 95       	ret

0000834e <_ZN13LiquidCrystal7displayEv>:
    834e:	cf 93       	push	r28
    8350:	df 93       	push	r29
    8352:	1f 92       	push	r1
    8354:	1f 92       	push	r1
    8356:	cd b7       	in	r28, 0x3d	; 61
    8358:	de b7       	in	r29, 0x3e	; 62
    835a:	9a 83       	std	Y+2, r25	; 0x02
    835c:	89 83       	std	Y+1, r24	; 0x01
    835e:	89 81       	ldd	r24, Y+1	; 0x01
    8360:	9a 81       	ldd	r25, Y+2	; 0x02
    8362:	fc 01       	movw	r30, r24
    8364:	80 89       	ldd	r24, Z+16	; 0x10
    8366:	28 2f       	mov	r18, r24
    8368:	24 60       	ori	r18, 0x04	; 4
    836a:	89 81       	ldd	r24, Y+1	; 0x01
    836c:	9a 81       	ldd	r25, Y+2	; 0x02
    836e:	fc 01       	movw	r30, r24
    8370:	20 8b       	std	Z+16, r18	; 0x10
    8372:	89 81       	ldd	r24, Y+1	; 0x01
    8374:	9a 81       	ldd	r25, Y+2	; 0x02
    8376:	fc 01       	movw	r30, r24
    8378:	80 89       	ldd	r24, Z+16	; 0x10
    837a:	28 2f       	mov	r18, r24
    837c:	28 60       	ori	r18, 0x08	; 8
    837e:	89 81       	ldd	r24, Y+1	; 0x01
    8380:	9a 81       	ldd	r25, Y+2	; 0x02
    8382:	62 2f       	mov	r22, r18
    8384:	06 d0       	rcall	.+12     	; 0x8392 <_ZN13LiquidCrystal7commandEh>
    8386:	00 00       	nop
    8388:	0f 90       	pop	r0
    838a:	0f 90       	pop	r0
    838c:	df 91       	pop	r29
    838e:	cf 91       	pop	r28
    8390:	08 95       	ret

00008392 <_ZN13LiquidCrystal7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
    8392:	cf 93       	push	r28
    8394:	df 93       	push	r29
    8396:	00 d0       	rcall	.+0      	; 0x8398 <_ZN13LiquidCrystal7commandEh+0x6>
    8398:	cd b7       	in	r28, 0x3d	; 61
    839a:	de b7       	in	r29, 0x3e	; 62
    839c:	9a 83       	std	Y+2, r25	; 0x02
    839e:	89 83       	std	Y+1, r24	; 0x01
    83a0:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
    83a2:	89 81       	ldd	r24, Y+1	; 0x01
    83a4:	9a 81       	ldd	r25, Y+2	; 0x02
    83a6:	40 e0       	ldi	r20, 0x00	; 0
    83a8:	6b 81       	ldd	r22, Y+3	; 0x03
    83aa:	1c d0       	rcall	.+56     	; 0x83e4 <_ZN13LiquidCrystal4sendEhh>
}
    83ac:	00 00       	nop
    83ae:	0f 90       	pop	r0
    83b0:	0f 90       	pop	r0
    83b2:	0f 90       	pop	r0
    83b4:	df 91       	pop	r29
    83b6:	cf 91       	pop	r28
    83b8:	08 95       	ret

000083ba <_ZN13LiquidCrystal5writeEh>:

inline size_t LiquidCrystal::write(uint8_t value) {
    83ba:	cf 93       	push	r28
    83bc:	df 93       	push	r29
    83be:	00 d0       	rcall	.+0      	; 0x83c0 <_ZN13LiquidCrystal5writeEh+0x6>
    83c0:	cd b7       	in	r28, 0x3d	; 61
    83c2:	de b7       	in	r29, 0x3e	; 62
    83c4:	9a 83       	std	Y+2, r25	; 0x02
    83c6:	89 83       	std	Y+1, r24	; 0x01
    83c8:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
    83ca:	89 81       	ldd	r24, Y+1	; 0x01
    83cc:	9a 81       	ldd	r25, Y+2	; 0x02
    83ce:	41 e0       	ldi	r20, 0x01	; 1
    83d0:	6b 81       	ldd	r22, Y+3	; 0x03
    83d2:	08 d0       	rcall	.+16     	; 0x83e4 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
    83d4:	81 e0       	ldi	r24, 0x01	; 1
    83d6:	90 e0       	ldi	r25, 0x00	; 0
}
    83d8:	0f 90       	pop	r0
    83da:	0f 90       	pop	r0
    83dc:	0f 90       	pop	r0
    83de:	df 91       	pop	r29
    83e0:	cf 91       	pop	r28
    83e2:	08 95       	ret

000083e4 <_ZN13LiquidCrystal4sendEhh>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    83e4:	cf 93       	push	r28
    83e6:	df 93       	push	r29
    83e8:	00 d0       	rcall	.+0      	; 0x83ea <_ZN13LiquidCrystal4sendEhh+0x6>
    83ea:	1f 92       	push	r1
    83ec:	cd b7       	in	r28, 0x3d	; 61
    83ee:	de b7       	in	r29, 0x3e	; 62
    83f0:	9a 83       	std	Y+2, r25	; 0x02
    83f2:	89 83       	std	Y+1, r24	; 0x01
    83f4:	6b 83       	std	Y+3, r22	; 0x03
    83f6:	4c 83       	std	Y+4, r20	; 0x04
  digitalWrite(_rs_pin, mode);
    83f8:	89 81       	ldd	r24, Y+1	; 0x01
    83fa:	9a 81       	ldd	r25, Y+2	; 0x02
    83fc:	fc 01       	movw	r30, r24
    83fe:	84 81       	ldd	r24, Z+4	; 0x04
    8400:	6c 81       	ldd	r22, Y+4	; 0x04
    8402:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    8406:	89 81       	ldd	r24, Y+1	; 0x01
    8408:	9a 81       	ldd	r25, Y+2	; 0x02
    840a:	fc 01       	movw	r30, r24
    840c:	85 81       	ldd	r24, Z+5	; 0x05
    840e:	8f 3f       	cpi	r24, 0xFF	; 255
    8410:	39 f0       	breq	.+14     	; 0x8420 <_ZN13LiquidCrystal4sendEhh+0x3c>
    digitalWrite(_rw_pin, LOW);
    8412:	89 81       	ldd	r24, Y+1	; 0x01
    8414:	9a 81       	ldd	r25, Y+2	; 0x02
    8416:	fc 01       	movw	r30, r24
    8418:	85 81       	ldd	r24, Z+5	; 0x05
    841a:	60 e0       	ldi	r22, 0x00	; 0
    841c:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    8420:	89 81       	ldd	r24, Y+1	; 0x01
    8422:	9a 81       	ldd	r25, Y+2	; 0x02
    8424:	fc 01       	movw	r30, r24
    8426:	87 85       	ldd	r24, Z+15	; 0x0f
    8428:	88 2f       	mov	r24, r24
    842a:	90 e0       	ldi	r25, 0x00	; 0
    842c:	80 71       	andi	r24, 0x10	; 16
    842e:	99 27       	eor	r25, r25
    8430:	89 2b       	or	r24, r25
    8432:	29 f0       	breq	.+10     	; 0x843e <_ZN13LiquidCrystal4sendEhh+0x5a>
    write8bits(value); 
    8434:	89 81       	ldd	r24, Y+1	; 0x01
    8436:	9a 81       	ldd	r25, Y+2	; 0x02
    8438:	6b 81       	ldd	r22, Y+3	; 0x03
    843a:	85 d0       	rcall	.+266    	; 0x8546 <_ZN13LiquidCrystal10write8bitsEh>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
    843c:	14 c0       	rjmp	.+40     	; 0x8466 <_ZN13LiquidCrystal4sendEhh+0x82>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    843e:	8b 81       	ldd	r24, Y+3	; 0x03
    8440:	88 2f       	mov	r24, r24
    8442:	90 e0       	ldi	r25, 0x00	; 0
    8444:	95 95       	asr	r25
    8446:	87 95       	ror	r24
    8448:	95 95       	asr	r25
    844a:	87 95       	ror	r24
    844c:	95 95       	asr	r25
    844e:	87 95       	ror	r24
    8450:	95 95       	asr	r25
    8452:	87 95       	ror	r24
    8454:	28 2f       	mov	r18, r24
    8456:	89 81       	ldd	r24, Y+1	; 0x01
    8458:	9a 81       	ldd	r25, Y+2	; 0x02
    845a:	62 2f       	mov	r22, r18
    845c:	3b d0       	rcall	.+118    	; 0x84d4 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    845e:	89 81       	ldd	r24, Y+1	; 0x01
    8460:	9a 81       	ldd	r25, Y+2	; 0x02
    8462:	6b 81       	ldd	r22, Y+3	; 0x03
    8464:	37 d0       	rcall	.+110    	; 0x84d4 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    8466:	00 00       	nop
    8468:	0f 90       	pop	r0
    846a:	0f 90       	pop	r0
    846c:	0f 90       	pop	r0
    846e:	0f 90       	pop	r0
    8470:	df 91       	pop	r29
    8472:	cf 91       	pop	r28
    8474:	08 95       	ret

00008476 <_ZN13LiquidCrystal11pulseEnableEv>:

void LiquidCrystal::pulseEnable(void) {
    8476:	cf 93       	push	r28
    8478:	df 93       	push	r29
    847a:	1f 92       	push	r1
    847c:	1f 92       	push	r1
    847e:	cd b7       	in	r28, 0x3d	; 61
    8480:	de b7       	in	r29, 0x3e	; 62
    8482:	9a 83       	std	Y+2, r25	; 0x02
    8484:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(_enable_pin, LOW);
    8486:	89 81       	ldd	r24, Y+1	; 0x01
    8488:	9a 81       	ldd	r25, Y+2	; 0x02
    848a:	fc 01       	movw	r30, r24
    848c:	86 81       	ldd	r24, Z+6	; 0x06
    848e:	60 e0       	ldi	r22, 0x00	; 0
    8490:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
  delayMicroseconds(1);    
    8494:	81 e0       	ldi	r24, 0x01	; 1
    8496:	90 e0       	ldi	r25, 0x00	; 0
    8498:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    849c:	89 81       	ldd	r24, Y+1	; 0x01
    849e:	9a 81       	ldd	r25, Y+2	; 0x02
    84a0:	fc 01       	movw	r30, r24
    84a2:	86 81       	ldd	r24, Z+6	; 0x06
    84a4:	61 e0       	ldi	r22, 0x01	; 1
    84a6:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    84aa:	81 e0       	ldi	r24, 0x01	; 1
    84ac:	90 e0       	ldi	r25, 0x00	; 0
    84ae:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    84b2:	89 81       	ldd	r24, Y+1	; 0x01
    84b4:	9a 81       	ldd	r25, Y+2	; 0x02
    84b6:	fc 01       	movw	r30, r24
    84b8:	86 81       	ldd	r24, Z+6	; 0x06
    84ba:	60 e0       	ldi	r22, 0x00	; 0
    84bc:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    84c0:	84 e6       	ldi	r24, 0x64	; 100
    84c2:	90 e0       	ldi	r25, 0x00	; 0
    84c4:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
}
    84c8:	00 00       	nop
    84ca:	0f 90       	pop	r0
    84cc:	0f 90       	pop	r0
    84ce:	df 91       	pop	r29
    84d0:	cf 91       	pop	r28
    84d2:	08 95       	ret

000084d4 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
    84d4:	cf 93       	push	r28
    84d6:	df 93       	push	r29
    84d8:	00 d0       	rcall	.+0      	; 0x84da <_ZN13LiquidCrystal10write4bitsEh+0x6>
    84da:	1f 92       	push	r1
    84dc:	1f 92       	push	r1
    84de:	cd b7       	in	r28, 0x3d	; 61
    84e0:	de b7       	in	r29, 0x3e	; 62
    84e2:	9c 83       	std	Y+4, r25	; 0x04
    84e4:	8b 83       	std	Y+3, r24	; 0x03
    84e6:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 4; i++) {
    84e8:	1a 82       	std	Y+2, r1	; 0x02
    84ea:	19 82       	std	Y+1, r1	; 0x01
    84ec:	89 81       	ldd	r24, Y+1	; 0x01
    84ee:	9a 81       	ldd	r25, Y+2	; 0x02
    84f0:	04 97       	sbiw	r24, 0x04	; 4
    84f2:	ec f4       	brge	.+58     	; 0x852e <_ZN13LiquidCrystal10write4bitsEh+0x5a>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    84f4:	8d 81       	ldd	r24, Y+5	; 0x05
    84f6:	88 2f       	mov	r24, r24
    84f8:	90 e0       	ldi	r25, 0x00	; 0
    84fa:	09 80       	ldd	r0, Y+1	; 0x01
    84fc:	02 c0       	rjmp	.+4      	; 0x8502 <_ZN13LiquidCrystal10write4bitsEh+0x2e>
    84fe:	95 95       	asr	r25
    8500:	87 95       	ror	r24
    8502:	0a 94       	dec	r0
    8504:	e2 f7       	brpl	.-8      	; 0x84fe <_ZN13LiquidCrystal10write4bitsEh+0x2a>
    8506:	48 2f       	mov	r20, r24
    8508:	41 70       	andi	r20, 0x01	; 1
    850a:	2b 81       	ldd	r18, Y+3	; 0x03
    850c:	3c 81       	ldd	r19, Y+4	; 0x04
    850e:	89 81       	ldd	r24, Y+1	; 0x01
    8510:	9a 81       	ldd	r25, Y+2	; 0x02
    8512:	82 0f       	add	r24, r18
    8514:	93 1f       	adc	r25, r19
    8516:	07 96       	adiw	r24, 0x07	; 7
    8518:	fc 01       	movw	r30, r24
    851a:	80 81       	ld	r24, Z
    851c:	64 2f       	mov	r22, r20
    851e:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    8522:	89 81       	ldd	r24, Y+1	; 0x01
    8524:	9a 81       	ldd	r25, Y+2	; 0x02
    8526:	01 96       	adiw	r24, 0x01	; 1
    8528:	9a 83       	std	Y+2, r25	; 0x02
    852a:	89 83       	std	Y+1, r24	; 0x01
    852c:	df cf       	rjmp	.-66     	; 0x84ec <_ZN13LiquidCrystal10write4bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    852e:	8b 81       	ldd	r24, Y+3	; 0x03
    8530:	9c 81       	ldd	r25, Y+4	; 0x04
    8532:	a1 df       	rcall	.-190    	; 0x8476 <_ZN13LiquidCrystal11pulseEnableEv>
}
    8534:	00 00       	nop
    8536:	0f 90       	pop	r0
    8538:	0f 90       	pop	r0
    853a:	0f 90       	pop	r0
    853c:	0f 90       	pop	r0
    853e:	0f 90       	pop	r0
    8540:	df 91       	pop	r29
    8542:	cf 91       	pop	r28
    8544:	08 95       	ret

00008546 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
    8546:	cf 93       	push	r28
    8548:	df 93       	push	r29
    854a:	00 d0       	rcall	.+0      	; 0x854c <_ZN13LiquidCrystal10write8bitsEh+0x6>
    854c:	1f 92       	push	r1
    854e:	1f 92       	push	r1
    8550:	cd b7       	in	r28, 0x3d	; 61
    8552:	de b7       	in	r29, 0x3e	; 62
    8554:	9c 83       	std	Y+4, r25	; 0x04
    8556:	8b 83       	std	Y+3, r24	; 0x03
    8558:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    855a:	1a 82       	std	Y+2, r1	; 0x02
    855c:	19 82       	std	Y+1, r1	; 0x01
    855e:	89 81       	ldd	r24, Y+1	; 0x01
    8560:	9a 81       	ldd	r25, Y+2	; 0x02
    8562:	08 97       	sbiw	r24, 0x08	; 8
    8564:	ec f4       	brge	.+58     	; 0x85a0 <_ZN13LiquidCrystal10write8bitsEh+0x5a>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    8566:	8d 81       	ldd	r24, Y+5	; 0x05
    8568:	88 2f       	mov	r24, r24
    856a:	90 e0       	ldi	r25, 0x00	; 0
    856c:	09 80       	ldd	r0, Y+1	; 0x01
    856e:	02 c0       	rjmp	.+4      	; 0x8574 <_ZN13LiquidCrystal10write8bitsEh+0x2e>
    8570:	95 95       	asr	r25
    8572:	87 95       	ror	r24
    8574:	0a 94       	dec	r0
    8576:	e2 f7       	brpl	.-8      	; 0x8570 <_ZN13LiquidCrystal10write8bitsEh+0x2a>
    8578:	48 2f       	mov	r20, r24
    857a:	41 70       	andi	r20, 0x01	; 1
    857c:	2b 81       	ldd	r18, Y+3	; 0x03
    857e:	3c 81       	ldd	r19, Y+4	; 0x04
    8580:	89 81       	ldd	r24, Y+1	; 0x01
    8582:	9a 81       	ldd	r25, Y+2	; 0x02
    8584:	82 0f       	add	r24, r18
    8586:	93 1f       	adc	r25, r19
    8588:	07 96       	adiw	r24, 0x07	; 7
    858a:	fc 01       	movw	r30, r24
    858c:	80 81       	ld	r24, Z
    858e:	64 2f       	mov	r22, r20
    8590:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    8594:	89 81       	ldd	r24, Y+1	; 0x01
    8596:	9a 81       	ldd	r25, Y+2	; 0x02
    8598:	01 96       	adiw	r24, 0x01	; 1
    859a:	9a 83       	std	Y+2, r25	; 0x02
    859c:	89 83       	std	Y+1, r24	; 0x01
    859e:	df cf       	rjmp	.-66     	; 0x855e <_ZN13LiquidCrystal10write8bitsEh+0x18>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    85a0:	8b 81       	ldd	r24, Y+3	; 0x03
    85a2:	9c 81       	ldd	r25, Y+4	; 0x04
    85a4:	68 df       	rcall	.-304    	; 0x8476 <_ZN13LiquidCrystal11pulseEnableEv>
}
    85a6:	00 00       	nop
    85a8:	0f 90       	pop	r0
    85aa:	0f 90       	pop	r0
    85ac:	0f 90       	pop	r0
    85ae:	0f 90       	pop	r0
    85b0:	0f 90       	pop	r0
    85b2:	df 91       	pop	r29
    85b4:	cf 91       	pop	r28
    85b6:	08 95       	ret

000085b8 <_ZN7MFRC522C1Ehh>:
			Serial.println(GetStatusCodeName(status));
		}
		return false;
	}
	return true;
}
    85b8:	cf 93       	push	r28
    85ba:	df 93       	push	r29
    85bc:	00 d0       	rcall	.+0      	; 0x85be <_ZN7MFRC522C1Ehh+0x6>
    85be:	1f 92       	push	r1
    85c0:	cd b7       	in	r28, 0x3d	; 61
    85c2:	de b7       	in	r29, 0x3e	; 62
    85c4:	9a 83       	std	Y+2, r25	; 0x02
    85c6:	89 83       	std	Y+1, r24	; 0x01
    85c8:	6b 83       	std	Y+3, r22	; 0x03
    85ca:	4c 83       	std	Y+4, r20	; 0x04
    85cc:	2f e0       	ldi	r18, 0x0F	; 15
    85ce:	33 e0       	ldi	r19, 0x03	; 3
    85d0:	89 81       	ldd	r24, Y+1	; 0x01
    85d2:	9a 81       	ldd	r25, Y+2	; 0x02
    85d4:	fc 01       	movw	r30, r24
    85d6:	31 83       	std	Z+1, r19	; 0x01
    85d8:	20 83       	st	Z, r18
    85da:	89 81       	ldd	r24, Y+1	; 0x01
    85dc:	9a 81       	ldd	r25, Y+2	; 0x02
    85de:	2b 81       	ldd	r18, Y+3	; 0x03
    85e0:	fc 01       	movw	r30, r24
    85e2:	26 87       	std	Z+14, r18	; 0x0e
    85e4:	89 81       	ldd	r24, Y+1	; 0x01
    85e6:	9a 81       	ldd	r25, Y+2	; 0x02
    85e8:	2c 81       	ldd	r18, Y+4	; 0x04
    85ea:	fc 01       	movw	r30, r24
    85ec:	27 87       	std	Z+15, r18	; 0x0f
    85ee:	00 00       	nop
    85f0:	0f 90       	pop	r0
    85f2:	0f 90       	pop	r0
    85f4:	0f 90       	pop	r0
    85f6:	0f 90       	pop	r0
    85f8:	df 91       	pop	r29
    85fa:	cf 91       	pop	r28
    85fc:	08 95       	ret

000085fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    85fe:	0f 93       	push	r16
    8600:	cf 93       	push	r28
    8602:	df 93       	push	r29
    8604:	00 d0       	rcall	.+0      	; 0x8606 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0x8>
    8606:	00 d0       	rcall	.+0      	; 0x8608 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh+0xa>
    8608:	cd b7       	in	r28, 0x3d	; 61
    860a:	de b7       	in	r29, 0x3e	; 62
    860c:	9c 83       	std	Y+4, r25	; 0x04
    860e:	8b 83       	std	Y+3, r24	; 0x03
    8610:	6d 83       	std	Y+5, r22	; 0x05
    8612:	4e 83       	std	Y+6, r20	; 0x06
    8614:	00 e0       	ldi	r16, 0x00	; 0
    8616:	21 e0       	ldi	r18, 0x01	; 1
    8618:	40 e0       	ldi	r20, 0x00	; 0
    861a:	59 e0       	ldi	r21, 0x09	; 9
    861c:	6d e3       	ldi	r22, 0x3D	; 61
    861e:	70 e0       	ldi	r23, 0x00	; 0
    8620:	ce 01       	movw	r24, r28
    8622:	01 96       	adiw	r24, 0x01	; 1
    8624:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZN11SPISettingsC1Emhh>
    8628:	89 81       	ldd	r24, Y+1	; 0x01
    862a:	9a 81       	ldd	r25, Y+2	; 0x02
    862c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8630:	8b 81       	ldd	r24, Y+3	; 0x03
    8632:	9c 81       	ldd	r25, Y+4	; 0x04
    8634:	fc 01       	movw	r30, r24
    8636:	86 85       	ldd	r24, Z+14	; 0x0e
    8638:	60 e0       	ldi	r22, 0x00	; 0
    863a:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    863e:	8d 81       	ldd	r24, Y+5	; 0x05
    8640:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    8644:	8e 81       	ldd	r24, Y+6	; 0x06
    8646:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    864a:	8b 81       	ldd	r24, Y+3	; 0x03
    864c:	9c 81       	ldd	r25, Y+4	; 0x04
    864e:	fc 01       	movw	r30, r24
    8650:	86 85       	ldd	r24, Z+14	; 0x0e
    8652:	61 e0       	ldi	r22, 0x01	; 1
    8654:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    8658:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN8SPIClass14endTransactionEv>
    865c:	00 00       	nop
    865e:	26 96       	adiw	r28, 0x06	; 6
    8660:	0f b6       	in	r0, 0x3f	; 63
    8662:	f8 94       	cli
    8664:	de bf       	out	0x3e, r29	; 62
    8666:	0f be       	out	0x3f, r0	; 63
    8668:	cd bf       	out	0x3d, r28	; 61
    866a:	df 91       	pop	r29
    866c:	cf 91       	pop	r28
    866e:	0f 91       	pop	r16
    8670:	08 95       	ret

00008672 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    8672:	0f 93       	push	r16
    8674:	cf 93       	push	r28
    8676:	df 93       	push	r29
    8678:	cd b7       	in	r28, 0x3d	; 61
    867a:	de b7       	in	r29, 0x3e	; 62
    867c:	29 97       	sbiw	r28, 0x09	; 9
    867e:	0f b6       	in	r0, 0x3f	; 63
    8680:	f8 94       	cli
    8682:	de bf       	out	0x3e, r29	; 62
    8684:	0f be       	out	0x3f, r0	; 63
    8686:	cd bf       	out	0x3d, r28	; 61
    8688:	9d 83       	std	Y+5, r25	; 0x05
    868a:	8c 83       	std	Y+4, r24	; 0x04
    868c:	6e 83       	std	Y+6, r22	; 0x06
    868e:	4f 83       	std	Y+7, r20	; 0x07
    8690:	39 87       	std	Y+9, r19	; 0x09
    8692:	28 87       	std	Y+8, r18	; 0x08
    8694:	ce 01       	movw	r24, r28
    8696:	02 96       	adiw	r24, 0x02	; 2
    8698:	00 e0       	ldi	r16, 0x00	; 0
    869a:	21 e0       	ldi	r18, 0x01	; 1
    869c:	40 e0       	ldi	r20, 0x00	; 0
    869e:	59 e0       	ldi	r21, 0x09	; 9
    86a0:	6d e3       	ldi	r22, 0x3D	; 61
    86a2:	70 e0       	ldi	r23, 0x00	; 0
    86a4:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZN11SPISettingsC1Emhh>
    86a8:	8a 81       	ldd	r24, Y+2	; 0x02
    86aa:	9b 81       	ldd	r25, Y+3	; 0x03
    86ac:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    86b0:	8c 81       	ldd	r24, Y+4	; 0x04
    86b2:	9d 81       	ldd	r25, Y+5	; 0x05
    86b4:	fc 01       	movw	r30, r24
    86b6:	86 85       	ldd	r24, Z+14	; 0x0e
    86b8:	60 e0       	ldi	r22, 0x00	; 0
    86ba:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    86be:	8e 81       	ldd	r24, Y+6	; 0x06
    86c0:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    86c4:	19 82       	std	Y+1, r1	; 0x01
    86c6:	99 81       	ldd	r25, Y+1	; 0x01
    86c8:	8f 81       	ldd	r24, Y+7	; 0x07
    86ca:	98 17       	cp	r25, r24
    86cc:	78 f4       	brcc	.+30     	; 0x86ec <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x7a>
    86ce:	89 81       	ldd	r24, Y+1	; 0x01
    86d0:	88 2f       	mov	r24, r24
    86d2:	90 e0       	ldi	r25, 0x00	; 0
    86d4:	28 85       	ldd	r18, Y+8	; 0x08
    86d6:	39 85       	ldd	r19, Y+9	; 0x09
    86d8:	82 0f       	add	r24, r18
    86da:	93 1f       	adc	r25, r19
    86dc:	fc 01       	movw	r30, r24
    86de:	80 81       	ld	r24, Z
    86e0:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    86e4:	89 81       	ldd	r24, Y+1	; 0x01
    86e6:	8f 5f       	subi	r24, 0xFF	; 255
    86e8:	89 83       	std	Y+1, r24	; 0x01
    86ea:	ed cf       	rjmp	.-38     	; 0x86c6 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x54>
    86ec:	8c 81       	ldd	r24, Y+4	; 0x04
    86ee:	9d 81       	ldd	r25, Y+5	; 0x05
    86f0:	fc 01       	movw	r30, r24
    86f2:	86 85       	ldd	r24, Z+14	; 0x0e
    86f4:	61 e0       	ldi	r22, 0x01	; 1
    86f6:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    86fa:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN8SPIClass14endTransactionEv>
    86fe:	00 00       	nop
    8700:	29 96       	adiw	r28, 0x09	; 9
    8702:	0f b6       	in	r0, 0x3f	; 63
    8704:	f8 94       	cli
    8706:	de bf       	out	0x3e, r29	; 62
    8708:	0f be       	out	0x3f, r0	; 63
    870a:	cd bf       	out	0x3d, r28	; 61
    870c:	df 91       	pop	r29
    870e:	cf 91       	pop	r28
    8710:	0f 91       	pop	r16
    8712:	08 95       	ret

00008714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    8714:	0f 93       	push	r16
    8716:	cf 93       	push	r28
    8718:	df 93       	push	r29
    871a:	00 d0       	rcall	.+0      	; 0x871c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0x8>
    871c:	00 d0       	rcall	.+0      	; 0x871e <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE+0xa>
    871e:	cd b7       	in	r28, 0x3d	; 61
    8720:	de b7       	in	r29, 0x3e	; 62
    8722:	9d 83       	std	Y+5, r25	; 0x05
    8724:	8c 83       	std	Y+4, r24	; 0x04
    8726:	6e 83       	std	Y+6, r22	; 0x06
    8728:	ce 01       	movw	r24, r28
    872a:	02 96       	adiw	r24, 0x02	; 2
    872c:	00 e0       	ldi	r16, 0x00	; 0
    872e:	21 e0       	ldi	r18, 0x01	; 1
    8730:	40 e0       	ldi	r20, 0x00	; 0
    8732:	59 e0       	ldi	r21, 0x09	; 9
    8734:	6d e3       	ldi	r22, 0x3D	; 61
    8736:	70 e0       	ldi	r23, 0x00	; 0
    8738:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZN11SPISettingsC1Emhh>
    873c:	8a 81       	ldd	r24, Y+2	; 0x02
    873e:	9b 81       	ldd	r25, Y+3	; 0x03
    8740:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8744:	8c 81       	ldd	r24, Y+4	; 0x04
    8746:	9d 81       	ldd	r25, Y+5	; 0x05
    8748:	fc 01       	movw	r30, r24
    874a:	86 85       	ldd	r24, Z+14	; 0x0e
    874c:	60 e0       	ldi	r22, 0x00	; 0
    874e:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    8752:	8e 81       	ldd	r24, Y+6	; 0x06
    8754:	80 68       	ori	r24, 0x80	; 128
    8756:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    875a:	80 e0       	ldi	r24, 0x00	; 0
    875c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    8760:	89 83       	std	Y+1, r24	; 0x01
    8762:	8c 81       	ldd	r24, Y+4	; 0x04
    8764:	9d 81       	ldd	r25, Y+5	; 0x05
    8766:	fc 01       	movw	r30, r24
    8768:	86 85       	ldd	r24, Z+14	; 0x0e
    876a:	61 e0       	ldi	r22, 0x01	; 1
    876c:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    8770:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN8SPIClass14endTransactionEv>
    8774:	89 81       	ldd	r24, Y+1	; 0x01
    8776:	26 96       	adiw	r28, 0x06	; 6
    8778:	0f b6       	in	r0, 0x3f	; 63
    877a:	f8 94       	cli
    877c:	de bf       	out	0x3e, r29	; 62
    877e:	0f be       	out	0x3f, r0	; 63
    8780:	cd bf       	out	0x3d, r28	; 61
    8782:	df 91       	pop	r29
    8784:	cf 91       	pop	r28
    8786:	0f 91       	pop	r16
    8788:	08 95       	ret

0000878a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    878a:	0f 93       	push	r16
    878c:	1f 93       	push	r17
    878e:	cf 93       	push	r28
    8790:	df 93       	push	r29
    8792:	cd b7       	in	r28, 0x3d	; 61
    8794:	de b7       	in	r29, 0x3e	; 62
    8796:	2d 97       	sbiw	r28, 0x0d	; 13
    8798:	0f b6       	in	r0, 0x3f	; 63
    879a:	f8 94       	cli
    879c:	de bf       	out	0x3e, r29	; 62
    879e:	0f be       	out	0x3f, r0	; 63
    87a0:	cd bf       	out	0x3d, r28	; 61
    87a2:	98 87       	std	Y+8, r25	; 0x08
    87a4:	8f 83       	std	Y+7, r24	; 0x07
    87a6:	69 87       	std	Y+9, r22	; 0x09
    87a8:	4a 87       	std	Y+10, r20	; 0x0a
    87aa:	3c 87       	std	Y+12, r19	; 0x0c
    87ac:	2b 87       	std	Y+11, r18	; 0x0b
    87ae:	0d 87       	std	Y+13, r16	; 0x0d
    87b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    87b2:	88 23       	and	r24, r24
    87b4:	09 f4       	brne	.+2      	; 0x87b8 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x2e>
    87b6:	71 c0       	rjmp	.+226    	; 0x889a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x110>
    87b8:	89 85       	ldd	r24, Y+9	; 0x09
    87ba:	80 68       	ori	r24, 0x80	; 128
    87bc:	8a 83       	std	Y+2, r24	; 0x02
    87be:	19 82       	std	Y+1, r1	; 0x01
    87c0:	ce 01       	movw	r24, r28
    87c2:	05 96       	adiw	r24, 0x05	; 5
    87c4:	00 e0       	ldi	r16, 0x00	; 0
    87c6:	21 e0       	ldi	r18, 0x01	; 1
    87c8:	40 e0       	ldi	r20, 0x00	; 0
    87ca:	59 e0       	ldi	r21, 0x09	; 9
    87cc:	6d e3       	ldi	r22, 0x3D	; 61
    87ce:	70 e0       	ldi	r23, 0x00	; 0
    87d0:	0e 94 ac 11 	call	0x2358	; 0x2358 <_ZN11SPISettingsC1Emhh>
    87d4:	8d 81       	ldd	r24, Y+5	; 0x05
    87d6:	9e 81       	ldd	r25, Y+6	; 0x06
    87d8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_ZN8SPIClass16beginTransactionE11SPISettings>
    87dc:	8f 81       	ldd	r24, Y+7	; 0x07
    87de:	98 85       	ldd	r25, Y+8	; 0x08
    87e0:	fc 01       	movw	r30, r24
    87e2:	86 85       	ldd	r24, Z+14	; 0x0e
    87e4:	60 e0       	ldi	r22, 0x00	; 0
    87e6:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    87ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    87ec:	81 50       	subi	r24, 0x01	; 1
    87ee:	8a 87       	std	Y+10, r24	; 0x0a
    87f0:	8a 81       	ldd	r24, Y+2	; 0x02
    87f2:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    87f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    87f8:	88 23       	and	r24, r24
    87fa:	19 f1       	breq	.+70     	; 0x8842 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xb8>
    87fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    87fe:	28 2f       	mov	r18, r24
    8800:	30 e0       	ldi	r19, 0x00	; 0
    8802:	8f ef       	ldi	r24, 0xFF	; 255
    8804:	90 e0       	ldi	r25, 0x00	; 0
    8806:	02 c0       	rjmp	.+4      	; 0x880c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x82>
    8808:	88 0f       	add	r24, r24
    880a:	99 1f       	adc	r25, r25
    880c:	2a 95       	dec	r18
    880e:	e2 f7       	brpl	.-8      	; 0x8808 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x7e>
    8810:	8b 83       	std	Y+3, r24	; 0x03
    8812:	8a 81       	ldd	r24, Y+2	; 0x02
    8814:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    8818:	8c 83       	std	Y+4, r24	; 0x04
    881a:	8b 85       	ldd	r24, Y+11	; 0x0b
    881c:	9c 85       	ldd	r25, Y+12	; 0x0c
    881e:	fc 01       	movw	r30, r24
    8820:	80 81       	ld	r24, Z
    8822:	98 2f       	mov	r25, r24
    8824:	8b 81       	ldd	r24, Y+3	; 0x03
    8826:	80 95       	com	r24
    8828:	89 23       	and	r24, r25
    882a:	2c 81       	ldd	r18, Y+4	; 0x04
    882c:	9b 81       	ldd	r25, Y+3	; 0x03
    882e:	92 23       	and	r25, r18
    8830:	89 2b       	or	r24, r25
    8832:	28 2f       	mov	r18, r24
    8834:	8b 85       	ldd	r24, Y+11	; 0x0b
    8836:	9c 85       	ldd	r25, Y+12	; 0x0c
    8838:	fc 01       	movw	r30, r24
    883a:	20 83       	st	Z, r18
    883c:	89 81       	ldd	r24, Y+1	; 0x01
    883e:	8f 5f       	subi	r24, 0xFF	; 255
    8840:	89 83       	std	Y+1, r24	; 0x01
    8842:	99 81       	ldd	r25, Y+1	; 0x01
    8844:	8a 85       	ldd	r24, Y+10	; 0x0a
    8846:	98 17       	cp	r25, r24
    8848:	88 f4       	brcc	.+34     	; 0x886c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xe2>
    884a:	89 81       	ldd	r24, Y+1	; 0x01
    884c:	88 2f       	mov	r24, r24
    884e:	90 e0       	ldi	r25, 0x00	; 0
    8850:	2b 85       	ldd	r18, Y+11	; 0x0b
    8852:	3c 85       	ldd	r19, Y+12	; 0x0c
    8854:	89 01       	movw	r16, r18
    8856:	08 0f       	add	r16, r24
    8858:	19 1f       	adc	r17, r25
    885a:	8a 81       	ldd	r24, Y+2	; 0x02
    885c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    8860:	f8 01       	movw	r30, r16
    8862:	80 83       	st	Z, r24
    8864:	89 81       	ldd	r24, Y+1	; 0x01
    8866:	8f 5f       	subi	r24, 0xFF	; 255
    8868:	89 83       	std	Y+1, r24	; 0x01
    886a:	eb cf       	rjmp	.-42     	; 0x8842 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0xb8>
    886c:	89 81       	ldd	r24, Y+1	; 0x01
    886e:	88 2f       	mov	r24, r24
    8870:	90 e0       	ldi	r25, 0x00	; 0
    8872:	2b 85       	ldd	r18, Y+11	; 0x0b
    8874:	3c 85       	ldd	r19, Y+12	; 0x0c
    8876:	89 01       	movw	r16, r18
    8878:	08 0f       	add	r16, r24
    887a:	19 1f       	adc	r17, r25
    887c:	80 e0       	ldi	r24, 0x00	; 0
    887e:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <_ZN8SPIClass8transferEh>
    8882:	f8 01       	movw	r30, r16
    8884:	80 83       	st	Z, r24
    8886:	8f 81       	ldd	r24, Y+7	; 0x07
    8888:	98 85       	ldd	r25, Y+8	; 0x08
    888a:	fc 01       	movw	r30, r24
    888c:	86 85       	ldd	r24, Z+14	; 0x0e
    888e:	61 e0       	ldi	r22, 0x01	; 1
    8890:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    8894:	0e 94 95 12 	call	0x252a	; 0x252a <_ZN8SPIClass14endTransactionEv>
    8898:	01 c0       	rjmp	.+2      	; 0x889c <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh+0x112>
    889a:	00 00       	nop
    889c:	2d 96       	adiw	r28, 0x0d	; 13
    889e:	0f b6       	in	r0, 0x3f	; 63
    88a0:	f8 94       	cli
    88a2:	de bf       	out	0x3e, r29	; 62
    88a4:	0f be       	out	0x3f, r0	; 63
    88a6:	cd bf       	out	0x3d, r28	; 61
    88a8:	df 91       	pop	r29
    88aa:	cf 91       	pop	r28
    88ac:	1f 91       	pop	r17
    88ae:	0f 91       	pop	r16
    88b0:	08 95       	ret

000088b2 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    88b2:	cf 93       	push	r28
    88b4:	df 93       	push	r29
    88b6:	00 d0       	rcall	.+0      	; 0x88b8 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh+0x6>
    88b8:	1f 92       	push	r1
    88ba:	1f 92       	push	r1
    88bc:	cd b7       	in	r28, 0x3d	; 61
    88be:	de b7       	in	r29, 0x3e	; 62
    88c0:	9b 83       	std	Y+3, r25	; 0x03
    88c2:	8a 83       	std	Y+2, r24	; 0x02
    88c4:	6c 83       	std	Y+4, r22	; 0x04
    88c6:	4d 83       	std	Y+5, r20	; 0x05
    88c8:	8a 81       	ldd	r24, Y+2	; 0x02
    88ca:	9b 81       	ldd	r25, Y+3	; 0x03
    88cc:	6c 81       	ldd	r22, Y+4	; 0x04
    88ce:	22 df       	rcall	.-444    	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    88d0:	89 83       	std	Y+1, r24	; 0x01
    88d2:	99 81       	ldd	r25, Y+1	; 0x01
    88d4:	8d 81       	ldd	r24, Y+5	; 0x05
    88d6:	29 2f       	mov	r18, r25
    88d8:	28 2b       	or	r18, r24
    88da:	8a 81       	ldd	r24, Y+2	; 0x02
    88dc:	9b 81       	ldd	r25, Y+3	; 0x03
    88de:	42 2f       	mov	r20, r18
    88e0:	6c 81       	ldd	r22, Y+4	; 0x04
    88e2:	8d de       	rcall	.-742    	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    88e4:	00 00       	nop
    88e6:	0f 90       	pop	r0
    88e8:	0f 90       	pop	r0
    88ea:	0f 90       	pop	r0
    88ec:	0f 90       	pop	r0
    88ee:	0f 90       	pop	r0
    88f0:	df 91       	pop	r29
    88f2:	cf 91       	pop	r28
    88f4:	08 95       	ret

000088f6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    88f6:	cf 93       	push	r28
    88f8:	df 93       	push	r29
    88fa:	00 d0       	rcall	.+0      	; 0x88fc <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh+0x6>
    88fc:	1f 92       	push	r1
    88fe:	1f 92       	push	r1
    8900:	cd b7       	in	r28, 0x3d	; 61
    8902:	de b7       	in	r29, 0x3e	; 62
    8904:	9b 83       	std	Y+3, r25	; 0x03
    8906:	8a 83       	std	Y+2, r24	; 0x02
    8908:	6c 83       	std	Y+4, r22	; 0x04
    890a:	4d 83       	std	Y+5, r20	; 0x05
    890c:	8a 81       	ldd	r24, Y+2	; 0x02
    890e:	9b 81       	ldd	r25, Y+3	; 0x03
    8910:	6c 81       	ldd	r22, Y+4	; 0x04
    8912:	00 df       	rcall	.-512    	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8914:	89 83       	std	Y+1, r24	; 0x01
    8916:	8d 81       	ldd	r24, Y+5	; 0x05
    8918:	98 2f       	mov	r25, r24
    891a:	90 95       	com	r25
    891c:	89 81       	ldd	r24, Y+1	; 0x01
    891e:	89 23       	and	r24, r25
    8920:	28 2f       	mov	r18, r24
    8922:	8a 81       	ldd	r24, Y+2	; 0x02
    8924:	9b 81       	ldd	r25, Y+3	; 0x03
    8926:	42 2f       	mov	r20, r18
    8928:	6c 81       	ldd	r22, Y+4	; 0x04
    892a:	69 de       	rcall	.-814    	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    892c:	00 00       	nop
    892e:	0f 90       	pop	r0
    8930:	0f 90       	pop	r0
    8932:	0f 90       	pop	r0
    8934:	0f 90       	pop	r0
    8936:	0f 90       	pop	r0
    8938:	df 91       	pop	r29
    893a:	cf 91       	pop	r28
    893c:	08 95       	ret

0000893e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    893e:	0f 93       	push	r16
    8940:	1f 93       	push	r17
    8942:	cf 93       	push	r28
    8944:	df 93       	push	r29
    8946:	cd b7       	in	r28, 0x3d	; 61
    8948:	de b7       	in	r29, 0x3e	; 62
    894a:	2a 97       	sbiw	r28, 0x0a	; 10
    894c:	0f b6       	in	r0, 0x3f	; 63
    894e:	f8 94       	cli
    8950:	de bf       	out	0x3e, r29	; 62
    8952:	0f be       	out	0x3f, r0	; 63
    8954:	cd bf       	out	0x3d, r28	; 61
    8956:	9d 83       	std	Y+5, r25	; 0x05
    8958:	8c 83       	std	Y+4, r24	; 0x04
    895a:	7f 83       	std	Y+7, r23	; 0x07
    895c:	6e 83       	std	Y+6, r22	; 0x06
    895e:	48 87       	std	Y+8, r20	; 0x08
    8960:	3a 87       	std	Y+10, r19	; 0x0a
    8962:	29 87       	std	Y+9, r18	; 0x09
    8964:	8c 81       	ldd	r24, Y+4	; 0x04
    8966:	9d 81       	ldd	r25, Y+5	; 0x05
    8968:	40 e0       	ldi	r20, 0x00	; 0
    896a:	62 e0       	ldi	r22, 0x02	; 2
    896c:	48 de       	rcall	.-880    	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    896e:	8c 81       	ldd	r24, Y+4	; 0x04
    8970:	9d 81       	ldd	r25, Y+5	; 0x05
    8972:	44 e0       	ldi	r20, 0x04	; 4
    8974:	6a e0       	ldi	r22, 0x0A	; 10
    8976:	43 de       	rcall	.-890    	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8978:	8c 81       	ldd	r24, Y+4	; 0x04
    897a:	9d 81       	ldd	r25, Y+5	; 0x05
    897c:	40 e8       	ldi	r20, 0x80	; 128
    897e:	64 e1       	ldi	r22, 0x14	; 20
    8980:	3e de       	rcall	.-900    	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8982:	2e 81       	ldd	r18, Y+6	; 0x06
    8984:	3f 81       	ldd	r19, Y+7	; 0x07
    8986:	8c 81       	ldd	r24, Y+4	; 0x04
    8988:	9d 81       	ldd	r25, Y+5	; 0x05
    898a:	48 85       	ldd	r20, Y+8	; 0x08
    898c:	62 e1       	ldi	r22, 0x12	; 18
    898e:	71 de       	rcall	.-798    	; 0x8672 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    8990:	8c 81       	ldd	r24, Y+4	; 0x04
    8992:	9d 81       	ldd	r25, Y+5	; 0x05
    8994:	43 e0       	ldi	r20, 0x03	; 3
    8996:	62 e0       	ldi	r22, 0x02	; 2
    8998:	32 de       	rcall	.-924    	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    899a:	88 e8       	ldi	r24, 0x88	; 136
    899c:	93 e1       	ldi	r25, 0x13	; 19
    899e:	9a 83       	std	Y+2, r25	; 0x02
    89a0:	89 83       	std	Y+1, r24	; 0x01
    89a2:	89 81       	ldd	r24, Y+1	; 0x01
    89a4:	9a 81       	ldd	r25, Y+2	; 0x02
    89a6:	89 2b       	or	r24, r25
    89a8:	69 f1       	breq	.+90     	; 0x8a04 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xc6>
    89aa:	8c 81       	ldd	r24, Y+4	; 0x04
    89ac:	9d 81       	ldd	r25, Y+5	; 0x05
    89ae:	6a e0       	ldi	r22, 0x0A	; 10
    89b0:	b1 de       	rcall	.-670    	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    89b2:	8b 83       	std	Y+3, r24	; 0x03
    89b4:	8b 81       	ldd	r24, Y+3	; 0x03
    89b6:	88 2f       	mov	r24, r24
    89b8:	90 e0       	ldi	r25, 0x00	; 0
    89ba:	84 70       	andi	r24, 0x04	; 4
    89bc:	99 27       	eor	r25, r25
    89be:	89 2b       	or	r24, r25
    89c0:	d9 f0       	breq	.+54     	; 0x89f8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xba>
    89c2:	8c 81       	ldd	r24, Y+4	; 0x04
    89c4:	9d 81       	ldd	r25, Y+5	; 0x05
    89c6:	40 e0       	ldi	r20, 0x00	; 0
    89c8:	62 e0       	ldi	r22, 0x02	; 2
    89ca:	19 de       	rcall	.-974    	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    89cc:	8c 81       	ldd	r24, Y+4	; 0x04
    89ce:	9d 81       	ldd	r25, Y+5	; 0x05
    89d0:	64 e4       	ldi	r22, 0x44	; 68
    89d2:	a0 de       	rcall	.-704    	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    89d4:	28 2f       	mov	r18, r24
    89d6:	89 85       	ldd	r24, Y+9	; 0x09
    89d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    89da:	fc 01       	movw	r30, r24
    89dc:	20 83       	st	Z, r18
    89de:	89 85       	ldd	r24, Y+9	; 0x09
    89e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    89e2:	8c 01       	movw	r16, r24
    89e4:	0f 5f       	subi	r16, 0xFF	; 255
    89e6:	1f 4f       	sbci	r17, 0xFF	; 255
    89e8:	8c 81       	ldd	r24, Y+4	; 0x04
    89ea:	9d 81       	ldd	r25, Y+5	; 0x05
    89ec:	62 e4       	ldi	r22, 0x42	; 66
    89ee:	92 de       	rcall	.-732    	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    89f0:	f8 01       	movw	r30, r16
    89f2:	80 83       	st	Z, r24
    89f4:	80 e0       	ldi	r24, 0x00	; 0
    89f6:	07 c0       	rjmp	.+14     	; 0x8a06 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0xc8>
    89f8:	89 81       	ldd	r24, Y+1	; 0x01
    89fa:	9a 81       	ldd	r25, Y+2	; 0x02
    89fc:	01 97       	sbiw	r24, 0x01	; 1
    89fe:	9a 83       	std	Y+2, r25	; 0x02
    8a00:	89 83       	std	Y+1, r24	; 0x01
    8a02:	cf cf       	rjmp	.-98     	; 0x89a2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x64>
    8a04:	83 e0       	ldi	r24, 0x03	; 3
    8a06:	2a 96       	adiw	r28, 0x0a	; 10
    8a08:	0f b6       	in	r0, 0x3f	; 63
    8a0a:	f8 94       	cli
    8a0c:	de bf       	out	0x3e, r29	; 62
    8a0e:	0f be       	out	0x3f, r0	; 63
    8a10:	cd bf       	out	0x3d, r28	; 61
    8a12:	df 91       	pop	r29
    8a14:	cf 91       	pop	r28
    8a16:	1f 91       	pop	r17
    8a18:	0f 91       	pop	r16
    8a1a:	08 95       	ret

00008a1c <_ZN7MFRC5228PCD_InitEv>:
    8a1c:	cf 93       	push	r28
    8a1e:	df 93       	push	r29
    8a20:	00 d0       	rcall	.+0      	; 0x8a22 <_ZN7MFRC5228PCD_InitEv+0x6>
    8a22:	cd b7       	in	r28, 0x3d	; 61
    8a24:	de b7       	in	r29, 0x3e	; 62
    8a26:	9b 83       	std	Y+3, r25	; 0x03
    8a28:	8a 83       	std	Y+2, r24	; 0x02
    8a2a:	19 82       	std	Y+1, r1	; 0x01
    8a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    8a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    8a30:	fc 01       	movw	r30, r24
    8a32:	86 85       	ldd	r24, Z+14	; 0x0e
    8a34:	61 e0       	ldi	r22, 0x01	; 1
    8a36:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    8a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    8a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    8a3e:	fc 01       	movw	r30, r24
    8a40:	86 85       	ldd	r24, Z+14	; 0x0e
    8a42:	61 e0       	ldi	r22, 0x01	; 1
    8a44:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    8a48:	8a 81       	ldd	r24, Y+2	; 0x02
    8a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    8a4c:	fc 01       	movw	r30, r24
    8a4e:	87 85       	ldd	r24, Z+15	; 0x0f
    8a50:	8f 3f       	cpi	r24, 0xFF	; 255
    8a52:	a1 f1       	breq	.+104    	; 0x8abc <_ZN7MFRC5228PCD_InitEv+0xa0>
    8a54:	8a 81       	ldd	r24, Y+2	; 0x02
    8a56:	9b 81       	ldd	r25, Y+3	; 0x03
    8a58:	fc 01       	movw	r30, r24
    8a5a:	87 85       	ldd	r24, Z+15	; 0x0f
    8a5c:	60 e0       	ldi	r22, 0x00	; 0
    8a5e:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    8a62:	8a 81       	ldd	r24, Y+2	; 0x02
    8a64:	9b 81       	ldd	r25, Y+3	; 0x03
    8a66:	fc 01       	movw	r30, r24
    8a68:	87 85       	ldd	r24, Z+15	; 0x0f
    8a6a:	0e 94 fd 60 	call	0xc1fa	; 0xc1fa <digitalRead>
    8a6e:	21 e0       	ldi	r18, 0x01	; 1
    8a70:	89 2b       	or	r24, r25
    8a72:	09 f0       	breq	.+2      	; 0x8a76 <_ZN7MFRC5228PCD_InitEv+0x5a>
    8a74:	20 e0       	ldi	r18, 0x00	; 0
    8a76:	22 23       	and	r18, r18
    8a78:	09 f1       	breq	.+66     	; 0x8abc <_ZN7MFRC5228PCD_InitEv+0xa0>
    8a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    8a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    8a7e:	fc 01       	movw	r30, r24
    8a80:	87 85       	ldd	r24, Z+15	; 0x0f
    8a82:	61 e0       	ldi	r22, 0x01	; 1
    8a84:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    8a88:	8a 81       	ldd	r24, Y+2	; 0x02
    8a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    8a8c:	fc 01       	movw	r30, r24
    8a8e:	87 85       	ldd	r24, Z+15	; 0x0f
    8a90:	60 e0       	ldi	r22, 0x00	; 0
    8a92:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    8a96:	82 e0       	ldi	r24, 0x02	; 2
    8a98:	90 e0       	ldi	r25, 0x00	; 0
    8a9a:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <delayMicroseconds>
    8a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    8aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    8aa2:	fc 01       	movw	r30, r24
    8aa4:	87 85       	ldd	r24, Z+15	; 0x0f
    8aa6:	61 e0       	ldi	r22, 0x01	; 1
    8aa8:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    8aac:	62 e3       	ldi	r22, 0x32	; 50
    8aae:	70 e0       	ldi	r23, 0x00	; 0
    8ab0:	80 e0       	ldi	r24, 0x00	; 0
    8ab2:	90 e0       	ldi	r25, 0x00	; 0
    8ab4:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <delay>
    8ab8:	81 e0       	ldi	r24, 0x01	; 1
    8aba:	89 83       	std	Y+1, r24	; 0x01
    8abc:	99 81       	ldd	r25, Y+1	; 0x01
    8abe:	81 e0       	ldi	r24, 0x01	; 1
    8ac0:	89 27       	eor	r24, r25
    8ac2:	88 23       	and	r24, r24
    8ac4:	19 f0       	breq	.+6      	; 0x8acc <_ZN7MFRC5228PCD_InitEv+0xb0>
    8ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    8ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    8aca:	37 d0       	rcall	.+110    	; 0x8b3a <_ZN7MFRC5229PCD_ResetEv>
    8acc:	8a 81       	ldd	r24, Y+2	; 0x02
    8ace:	9b 81       	ldd	r25, Y+3	; 0x03
    8ad0:	40 e0       	ldi	r20, 0x00	; 0
    8ad2:	64 e2       	ldi	r22, 0x24	; 36
    8ad4:	94 dd       	rcall	.-1240   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    8ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    8ada:	40 e0       	ldi	r20, 0x00	; 0
    8adc:	66 e2       	ldi	r22, 0x26	; 38
    8ade:	8f dd       	rcall	.-1250   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    8ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    8ae4:	46 e2       	ldi	r20, 0x26	; 38
    8ae6:	68 e4       	ldi	r22, 0x48	; 72
    8ae8:	8a dd       	rcall	.-1260   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8aea:	8a 81       	ldd	r24, Y+2	; 0x02
    8aec:	9b 81       	ldd	r25, Y+3	; 0x03
    8aee:	40 e8       	ldi	r20, 0x80	; 128
    8af0:	64 e5       	ldi	r22, 0x54	; 84
    8af2:	85 dd       	rcall	.-1270   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8af4:	8a 81       	ldd	r24, Y+2	; 0x02
    8af6:	9b 81       	ldd	r25, Y+3	; 0x03
    8af8:	49 ea       	ldi	r20, 0xA9	; 169
    8afa:	66 e5       	ldi	r22, 0x56	; 86
    8afc:	80 dd       	rcall	.-1280   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8afe:	8a 81       	ldd	r24, Y+2	; 0x02
    8b00:	9b 81       	ldd	r25, Y+3	; 0x03
    8b02:	43 e0       	ldi	r20, 0x03	; 3
    8b04:	68 e5       	ldi	r22, 0x58	; 88
    8b06:	7b dd       	rcall	.-1290   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8b08:	8a 81       	ldd	r24, Y+2	; 0x02
    8b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    8b0c:	48 ee       	ldi	r20, 0xE8	; 232
    8b0e:	6a e5       	ldi	r22, 0x5A	; 90
    8b10:	76 dd       	rcall	.-1300   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8b12:	8a 81       	ldd	r24, Y+2	; 0x02
    8b14:	9b 81       	ldd	r25, Y+3	; 0x03
    8b16:	40 e4       	ldi	r20, 0x40	; 64
    8b18:	6a e2       	ldi	r22, 0x2A	; 42
    8b1a:	71 dd       	rcall	.-1310   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    8b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    8b20:	4d e3       	ldi	r20, 0x3D	; 61
    8b22:	62 e2       	ldi	r22, 0x22	; 34
    8b24:	6c dd       	rcall	.-1320   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8b26:	8a 81       	ldd	r24, Y+2	; 0x02
    8b28:	9b 81       	ldd	r25, Y+3	; 0x03
    8b2a:	37 d0       	rcall	.+110    	; 0x8b9a <_ZN7MFRC52213PCD_AntennaOnEv>
    8b2c:	00 00       	nop
    8b2e:	0f 90       	pop	r0
    8b30:	0f 90       	pop	r0
    8b32:	0f 90       	pop	r0
    8b34:	df 91       	pop	r29
    8b36:	cf 91       	pop	r28
    8b38:	08 95       	ret

00008b3a <_ZN7MFRC5229PCD_ResetEv>:
    8b3a:	cf 93       	push	r28
    8b3c:	df 93       	push	r29
    8b3e:	00 d0       	rcall	.+0      	; 0x8b40 <_ZN7MFRC5229PCD_ResetEv+0x6>
    8b40:	cd b7       	in	r28, 0x3d	; 61
    8b42:	de b7       	in	r29, 0x3e	; 62
    8b44:	9b 83       	std	Y+3, r25	; 0x03
    8b46:	8a 83       	std	Y+2, r24	; 0x02
    8b48:	8a 81       	ldd	r24, Y+2	; 0x02
    8b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    8b4c:	4f e0       	ldi	r20, 0x0F	; 15
    8b4e:	62 e0       	ldi	r22, 0x02	; 2
    8b50:	56 dd       	rcall	.-1364   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8b52:	19 82       	std	Y+1, r1	; 0x01
    8b54:	62 e3       	ldi	r22, 0x32	; 50
    8b56:	70 e0       	ldi	r23, 0x00	; 0
    8b58:	80 e0       	ldi	r24, 0x00	; 0
    8b5a:	90 e0       	ldi	r25, 0x00	; 0
    8b5c:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <delay>
    8b60:	8a 81       	ldd	r24, Y+2	; 0x02
    8b62:	9b 81       	ldd	r25, Y+3	; 0x03
    8b64:	62 e0       	ldi	r22, 0x02	; 2
    8b66:	d6 dd       	rcall	.-1108   	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8b68:	88 2f       	mov	r24, r24
    8b6a:	90 e0       	ldi	r25, 0x00	; 0
    8b6c:	80 71       	andi	r24, 0x10	; 16
    8b6e:	99 27       	eor	r25, r25
    8b70:	89 2b       	or	r24, r25
    8b72:	41 f0       	breq	.+16     	; 0x8b84 <_ZN7MFRC5229PCD_ResetEv+0x4a>
    8b74:	89 81       	ldd	r24, Y+1	; 0x01
    8b76:	8f 5f       	subi	r24, 0xFF	; 255
    8b78:	89 83       	std	Y+1, r24	; 0x01
    8b7a:	89 81       	ldd	r24, Y+1	; 0x01
    8b7c:	83 30       	cpi	r24, 0x03	; 3
    8b7e:	10 f4       	brcc	.+4      	; 0x8b84 <_ZN7MFRC5229PCD_ResetEv+0x4a>
    8b80:	81 e0       	ldi	r24, 0x01	; 1
    8b82:	01 c0       	rjmp	.+2      	; 0x8b86 <_ZN7MFRC5229PCD_ResetEv+0x4c>
    8b84:	80 e0       	ldi	r24, 0x00	; 0
    8b86:	88 23       	and	r24, r24
    8b88:	09 f0       	breq	.+2      	; 0x8b8c <_ZN7MFRC5229PCD_ResetEv+0x52>
    8b8a:	e4 cf       	rjmp	.-56     	; 0x8b54 <_ZN7MFRC5229PCD_ResetEv+0x1a>
    8b8c:	00 00       	nop
    8b8e:	0f 90       	pop	r0
    8b90:	0f 90       	pop	r0
    8b92:	0f 90       	pop	r0
    8b94:	df 91       	pop	r29
    8b96:	cf 91       	pop	r28
    8b98:	08 95       	ret

00008b9a <_ZN7MFRC52213PCD_AntennaOnEv>:
    8b9a:	cf 93       	push	r28
    8b9c:	df 93       	push	r29
    8b9e:	00 d0       	rcall	.+0      	; 0x8ba0 <_ZN7MFRC52213PCD_AntennaOnEv+0x6>
    8ba0:	cd b7       	in	r28, 0x3d	; 61
    8ba2:	de b7       	in	r29, 0x3e	; 62
    8ba4:	9b 83       	std	Y+3, r25	; 0x03
    8ba6:	8a 83       	std	Y+2, r24	; 0x02
    8ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    8baa:	9b 81       	ldd	r25, Y+3	; 0x03
    8bac:	68 e2       	ldi	r22, 0x28	; 40
    8bae:	b2 dd       	rcall	.-1180   	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8bb0:	89 83       	std	Y+1, r24	; 0x01
    8bb2:	89 81       	ldd	r24, Y+1	; 0x01
    8bb4:	88 2f       	mov	r24, r24
    8bb6:	90 e0       	ldi	r25, 0x00	; 0
    8bb8:	83 70       	andi	r24, 0x03	; 3
    8bba:	99 27       	eor	r25, r25
    8bbc:	03 97       	sbiw	r24, 0x03	; 3
    8bbe:	41 f0       	breq	.+16     	; 0x8bd0 <_ZN7MFRC52213PCD_AntennaOnEv+0x36>
    8bc0:	89 81       	ldd	r24, Y+1	; 0x01
    8bc2:	28 2f       	mov	r18, r24
    8bc4:	23 60       	ori	r18, 0x03	; 3
    8bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    8bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    8bca:	42 2f       	mov	r20, r18
    8bcc:	68 e2       	ldi	r22, 0x28	; 40
    8bce:	17 dd       	rcall	.-1490   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8bd0:	00 00       	nop
    8bd2:	0f 90       	pop	r0
    8bd4:	0f 90       	pop	r0
    8bd6:	0f 90       	pop	r0
    8bd8:	df 91       	pop	r29
    8bda:	cf 91       	pop	r28
    8bdc:	08 95       	ret

00008bde <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    8bde:	8f 92       	push	r8
    8be0:	af 92       	push	r10
    8be2:	bf 92       	push	r11
    8be4:	cf 92       	push	r12
    8be6:	df 92       	push	r13
    8be8:	ef 92       	push	r14
    8bea:	ff 92       	push	r15
    8bec:	0f 93       	push	r16
    8bee:	1f 93       	push	r17
    8bf0:	cf 93       	push	r28
    8bf2:	df 93       	push	r29
    8bf4:	cd b7       	in	r28, 0x3d	; 61
    8bf6:	de b7       	in	r29, 0x3e	; 62
    8bf8:	2e 97       	sbiw	r28, 0x0e	; 14
    8bfa:	0f b6       	in	r0, 0x3f	; 63
    8bfc:	f8 94       	cli
    8bfe:	de bf       	out	0x3e, r29	; 62
    8c00:	0f be       	out	0x3f, r0	; 63
    8c02:	cd bf       	out	0x3d, r28	; 61
    8c04:	9b 83       	std	Y+3, r25	; 0x03
    8c06:	8a 83       	std	Y+2, r24	; 0x02
    8c08:	7d 83       	std	Y+5, r23	; 0x05
    8c0a:	6c 83       	std	Y+4, r22	; 0x04
    8c0c:	4e 83       	std	Y+6, r20	; 0x06
    8c0e:	38 87       	std	Y+8, r19	; 0x08
    8c10:	2f 83       	std	Y+7, r18	; 0x07
    8c12:	1a 87       	std	Y+10, r17	; 0x0a
    8c14:	09 87       	std	Y+9, r16	; 0x09
    8c16:	fc 86       	std	Y+12, r15	; 0x0c
    8c18:	eb 86       	std	Y+11, r14	; 0x0b
    8c1a:	cd 86       	std	Y+13, r12	; 0x0d
    8c1c:	ae 86       	std	Y+14, r10	; 0x0e
    8c1e:	80 e3       	ldi	r24, 0x30	; 48
    8c20:	89 83       	std	Y+1, r24	; 0x01
    8c22:	eb 85       	ldd	r30, Y+11	; 0x0b
    8c24:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c26:	69 85       	ldd	r22, Y+9	; 0x09
    8c28:	7a 85       	ldd	r23, Y+10	; 0x0a
    8c2a:	4f 81       	ldd	r20, Y+7	; 0x07
    8c2c:	58 85       	ldd	r21, Y+8	; 0x08
    8c2e:	2c 81       	ldd	r18, Y+4	; 0x04
    8c30:	3d 81       	ldd	r19, Y+5	; 0x05
    8c32:	8a 81       	ldd	r24, Y+2	; 0x02
    8c34:	9b 81       	ldd	r25, Y+3	; 0x03
    8c36:	ae 85       	ldd	r26, Y+14	; 0x0e
    8c38:	af 93       	push	r26
    8c3a:	8d 84       	ldd	r8, Y+13	; 0x0d
    8c3c:	5f 01       	movw	r10, r30
    8c3e:	6b 01       	movw	r12, r22
    8c40:	7a 01       	movw	r14, r20
    8c42:	0e 81       	ldd	r16, Y+6	; 0x06
    8c44:	49 81       	ldd	r20, Y+1	; 0x01
    8c46:	6c e0       	ldi	r22, 0x0C	; 12
    8c48:	13 d0       	rcall	.+38     	; 0x8c70 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    8c4a:	0f 90       	pop	r0
    8c4c:	2e 96       	adiw	r28, 0x0e	; 14
    8c4e:	0f b6       	in	r0, 0x3f	; 63
    8c50:	f8 94       	cli
    8c52:	de bf       	out	0x3e, r29	; 62
    8c54:	0f be       	out	0x3f, r0	; 63
    8c56:	cd bf       	out	0x3d, r28	; 61
    8c58:	df 91       	pop	r29
    8c5a:	cf 91       	pop	r28
    8c5c:	1f 91       	pop	r17
    8c5e:	0f 91       	pop	r16
    8c60:	ff 90       	pop	r15
    8c62:	ef 90       	pop	r14
    8c64:	df 90       	pop	r13
    8c66:	cf 90       	pop	r12
    8c68:	bf 90       	pop	r11
    8c6a:	af 90       	pop	r10
    8c6c:	8f 90       	pop	r8
    8c6e:	08 95       	ret

00008c70 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    8c70:	8f 92       	push	r8
    8c72:	af 92       	push	r10
    8c74:	bf 92       	push	r11
    8c76:	cf 92       	push	r12
    8c78:	df 92       	push	r13
    8c7a:	ef 92       	push	r14
    8c7c:	ff 92       	push	r15
    8c7e:	0f 93       	push	r16
    8c80:	cf 93       	push	r28
    8c82:	df 93       	push	r29
    8c84:	cd b7       	in	r28, 0x3d	; 61
    8c86:	de b7       	in	r29, 0x3e	; 62
    8c88:	69 97       	sbiw	r28, 0x19	; 25
    8c8a:	0f b6       	in	r0, 0x3f	; 63
    8c8c:	f8 94       	cli
    8c8e:	de bf       	out	0x3e, r29	; 62
    8c90:	0f be       	out	0x3f, r0	; 63
    8c92:	cd bf       	out	0x3d, r28	; 61
    8c94:	9d 87       	std	Y+13, r25	; 0x0d
    8c96:	8c 87       	std	Y+12, r24	; 0x0c
    8c98:	6e 87       	std	Y+14, r22	; 0x0e
    8c9a:	4f 87       	std	Y+15, r20	; 0x0f
    8c9c:	39 8b       	std	Y+17, r19	; 0x11
    8c9e:	28 8b       	std	Y+16, r18	; 0x10
    8ca0:	0a 8b       	std	Y+18, r16	; 0x12
    8ca2:	fc 8a       	std	Y+20, r15	; 0x14
    8ca4:	eb 8a       	std	Y+19, r14	; 0x13
    8ca6:	de 8a       	std	Y+22, r13	; 0x16
    8ca8:	cd 8a       	std	Y+21, r12	; 0x15
    8caa:	b8 8e       	std	Y+24, r11	; 0x18
    8cac:	af 8a       	std	Y+23, r10	; 0x17
    8cae:	89 8e       	std	Y+25, r8	; 0x19
    8cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    8cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    8cb4:	89 2b       	or	r24, r25
    8cb6:	29 f0       	breq	.+10     	; 0x8cc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x52>
    8cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    8cba:	98 8d       	ldd	r25, Y+24	; 0x18
    8cbc:	fc 01       	movw	r30, r24
    8cbe:	80 81       	ld	r24, Z
    8cc0:	01 c0       	rjmp	.+2      	; 0x8cc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x54>
    8cc2:	80 e0       	ldi	r24, 0x00	; 0
    8cc4:	8c 83       	std	Y+4, r24	; 0x04
    8cc6:	89 8d       	ldd	r24, Y+25	; 0x19
    8cc8:	98 2f       	mov	r25, r24
    8cca:	92 95       	swap	r25
    8ccc:	90 7f       	andi	r25, 0xF0	; 240
    8cce:	8c 81       	ldd	r24, Y+4	; 0x04
    8cd0:	89 0f       	add	r24, r25
    8cd2:	8d 83       	std	Y+5, r24	; 0x05
    8cd4:	8c 85       	ldd	r24, Y+12	; 0x0c
    8cd6:	9d 85       	ldd	r25, Y+13	; 0x0d
    8cd8:	40 e0       	ldi	r20, 0x00	; 0
    8cda:	62 e0       	ldi	r22, 0x02	; 2
    8cdc:	90 dc       	rcall	.-1760   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8cde:	8c 85       	ldd	r24, Y+12	; 0x0c
    8ce0:	9d 85       	ldd	r25, Y+13	; 0x0d
    8ce2:	4f e7       	ldi	r20, 0x7F	; 127
    8ce4:	68 e0       	ldi	r22, 0x08	; 8
    8ce6:	8b dc       	rcall	.-1770   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8ce8:	8c 85       	ldd	r24, Y+12	; 0x0c
    8cea:	9d 85       	ldd	r25, Y+13	; 0x0d
    8cec:	40 e8       	ldi	r20, 0x80	; 128
    8cee:	64 e1       	ldi	r22, 0x14	; 20
    8cf0:	86 dc       	rcall	.-1780   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8cf2:	28 89       	ldd	r18, Y+16	; 0x10
    8cf4:	39 89       	ldd	r19, Y+17	; 0x11
    8cf6:	8c 85       	ldd	r24, Y+12	; 0x0c
    8cf8:	9d 85       	ldd	r25, Y+13	; 0x0d
    8cfa:	4a 89       	ldd	r20, Y+18	; 0x12
    8cfc:	62 e1       	ldi	r22, 0x12	; 18
    8cfe:	b9 dc       	rcall	.-1678   	; 0x8672 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    8d00:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d02:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d04:	4d 81       	ldd	r20, Y+5	; 0x05
    8d06:	6a e1       	ldi	r22, 0x1A	; 26
    8d08:	7a dc       	rcall	.-1804   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8d0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d0e:	4e 85       	ldd	r20, Y+14	; 0x0e
    8d10:	62 e0       	ldi	r22, 0x02	; 2
    8d12:	75 dc       	rcall	.-1814   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    8d14:	8e 85       	ldd	r24, Y+14	; 0x0e
    8d16:	8c 30       	cpi	r24, 0x0C	; 12
    8d18:	29 f4       	brne	.+10     	; 0x8d24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    8d1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d1e:	40 e8       	ldi	r20, 0x80	; 128
    8d20:	6a e1       	ldi	r22, 0x1A	; 26
    8d22:	c7 dd       	rcall	.-1138   	; 0x88b2 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    8d24:	80 ed       	ldi	r24, 0xD0	; 208
    8d26:	97 e0       	ldi	r25, 0x07	; 7
    8d28:	9a 83       	std	Y+2, r25	; 0x02
    8d2a:	89 83       	std	Y+1, r24	; 0x01
    8d2c:	89 81       	ldd	r24, Y+1	; 0x01
    8d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    8d30:	89 2b       	or	r24, r25
    8d32:	d1 f0       	breq	.+52     	; 0x8d68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf8>
    8d34:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d36:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d38:	68 e0       	ldi	r22, 0x08	; 8
    8d3a:	ec dc       	rcall	.-1576   	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8d3c:	8e 83       	std	Y+6, r24	; 0x06
    8d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    8d40:	8f 85       	ldd	r24, Y+15	; 0x0f
    8d42:	89 23       	and	r24, r25
    8d44:	88 23       	and	r24, r24
    8d46:	79 f4       	brne	.+30     	; 0x8d66 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf6>
    8d48:	8e 81       	ldd	r24, Y+6	; 0x06
    8d4a:	88 2f       	mov	r24, r24
    8d4c:	90 e0       	ldi	r25, 0x00	; 0
    8d4e:	81 70       	andi	r24, 0x01	; 1
    8d50:	99 27       	eor	r25, r25
    8d52:	89 2b       	or	r24, r25
    8d54:	11 f0       	breq	.+4      	; 0x8d5a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xea>
    8d56:	83 e0       	ldi	r24, 0x03	; 3
    8d58:	b2 c0       	rjmp	.+356    	; 0x8ebe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8d5a:	89 81       	ldd	r24, Y+1	; 0x01
    8d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    8d5e:	01 97       	sbiw	r24, 0x01	; 1
    8d60:	9a 83       	std	Y+2, r25	; 0x02
    8d62:	89 83       	std	Y+1, r24	; 0x01
    8d64:	e3 cf       	rjmp	.-58     	; 0x8d2c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xbc>
    8d66:	00 00       	nop
    8d68:	89 81       	ldd	r24, Y+1	; 0x01
    8d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    8d6c:	89 2b       	or	r24, r25
    8d6e:	11 f4       	brne	.+4      	; 0x8d74 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x104>
    8d70:	83 e0       	ldi	r24, 0x03	; 3
    8d72:	a5 c0       	rjmp	.+330    	; 0x8ebe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8d74:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d76:	9d 85       	ldd	r25, Y+13	; 0x0d
    8d78:	6c e0       	ldi	r22, 0x0C	; 12
    8d7a:	cc dc       	rcall	.-1640   	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8d7c:	8f 83       	std	Y+7, r24	; 0x07
    8d7e:	8f 81       	ldd	r24, Y+7	; 0x07
    8d80:	88 2f       	mov	r24, r24
    8d82:	90 e0       	ldi	r25, 0x00	; 0
    8d84:	83 71       	andi	r24, 0x13	; 19
    8d86:	99 27       	eor	r25, r25
    8d88:	89 2b       	or	r24, r25
    8d8a:	11 f0       	breq	.+4      	; 0x8d90 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x120>
    8d8c:	81 e0       	ldi	r24, 0x01	; 1
    8d8e:	97 c0       	rjmp	.+302    	; 0x8ebe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8d90:	1b 82       	std	Y+3, r1	; 0x03
    8d92:	8b 89       	ldd	r24, Y+19	; 0x13
    8d94:	9c 89       	ldd	r25, Y+20	; 0x14
    8d96:	89 2b       	or	r24, r25
    8d98:	71 f1       	breq	.+92     	; 0x8df6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x186>
    8d9a:	8d 89       	ldd	r24, Y+21	; 0x15
    8d9c:	9e 89       	ldd	r25, Y+22	; 0x16
    8d9e:	89 2b       	or	r24, r25
    8da0:	51 f1       	breq	.+84     	; 0x8df6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x186>
    8da2:	8c 85       	ldd	r24, Y+12	; 0x0c
    8da4:	9d 85       	ldd	r25, Y+13	; 0x0d
    8da6:	64 e1       	ldi	r22, 0x14	; 20
    8da8:	b5 dc       	rcall	.-1686   	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8daa:	88 87       	std	Y+8, r24	; 0x08
    8dac:	8d 89       	ldd	r24, Y+21	; 0x15
    8dae:	9e 89       	ldd	r25, Y+22	; 0x16
    8db0:	fc 01       	movw	r30, r24
    8db2:	90 81       	ld	r25, Z
    8db4:	88 85       	ldd	r24, Y+8	; 0x08
    8db6:	98 17       	cp	r25, r24
    8db8:	10 f4       	brcc	.+4      	; 0x8dbe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
    8dba:	84 e0       	ldi	r24, 0x04	; 4
    8dbc:	80 c0       	rjmp	.+256    	; 0x8ebe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8dbe:	8d 89       	ldd	r24, Y+21	; 0x15
    8dc0:	9e 89       	ldd	r25, Y+22	; 0x16
    8dc2:	28 85       	ldd	r18, Y+8	; 0x08
    8dc4:	fc 01       	movw	r30, r24
    8dc6:	20 83       	st	Z, r18
    8dc8:	2b 89       	ldd	r18, Y+19	; 0x13
    8dca:	3c 89       	ldd	r19, Y+20	; 0x14
    8dcc:	8c 85       	ldd	r24, Y+12	; 0x0c
    8dce:	9d 85       	ldd	r25, Y+13	; 0x0d
    8dd0:	09 8d       	ldd	r16, Y+25	; 0x19
    8dd2:	48 85       	ldd	r20, Y+8	; 0x08
    8dd4:	62 e1       	ldi	r22, 0x12	; 18
    8dd6:	d9 dc       	rcall	.-1614   	; 0x878a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    8dd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    8dda:	9d 85       	ldd	r25, Y+13	; 0x0d
    8ddc:	68 e1       	ldi	r22, 0x18	; 24
    8dde:	9a dc       	rcall	.-1740   	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    8de0:	87 70       	andi	r24, 0x07	; 7
    8de2:	8b 83       	std	Y+3, r24	; 0x03
    8de4:	8f 89       	ldd	r24, Y+23	; 0x17
    8de6:	98 8d       	ldd	r25, Y+24	; 0x18
    8de8:	89 2b       	or	r24, r25
    8dea:	29 f0       	breq	.+10     	; 0x8df6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x186>
    8dec:	8f 89       	ldd	r24, Y+23	; 0x17
    8dee:	98 8d       	ldd	r25, Y+24	; 0x18
    8df0:	2b 81       	ldd	r18, Y+3	; 0x03
    8df2:	fc 01       	movw	r30, r24
    8df4:	20 83       	st	Z, r18
    8df6:	8f 81       	ldd	r24, Y+7	; 0x07
    8df8:	88 2f       	mov	r24, r24
    8dfa:	90 e0       	ldi	r25, 0x00	; 0
    8dfc:	88 70       	andi	r24, 0x08	; 8
    8dfe:	99 27       	eor	r25, r25
    8e00:	89 2b       	or	r24, r25
    8e02:	11 f0       	breq	.+4      	; 0x8e08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x198>
    8e04:	82 e0       	ldi	r24, 0x02	; 2
    8e06:	5b c0       	rjmp	.+182    	; 0x8ebe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e08:	8b 89       	ldd	r24, Y+19	; 0x13
    8e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    8e0c:	89 2b       	or	r24, r25
    8e0e:	09 f4       	brne	.+2      	; 0x8e12 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1a2>
    8e10:	55 c0       	rjmp	.+170    	; 0x8ebc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8e12:	8d 89       	ldd	r24, Y+21	; 0x15
    8e14:	9e 89       	ldd	r25, Y+22	; 0x16
    8e16:	89 2b       	or	r24, r25
    8e18:	09 f4       	brne	.+2      	; 0x8e1c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ac>
    8e1a:	50 c0       	rjmp	.+160    	; 0x8ebc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8e1c:	8f a1       	ldd	r24, Y+39	; 0x27
    8e1e:	88 23       	and	r24, r24
    8e20:	09 f4       	brne	.+2      	; 0x8e24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1b4>
    8e22:	4c c0       	rjmp	.+152    	; 0x8ebc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8e24:	8d 89       	ldd	r24, Y+21	; 0x15
    8e26:	9e 89       	ldd	r25, Y+22	; 0x16
    8e28:	fc 01       	movw	r30, r24
    8e2a:	80 81       	ld	r24, Z
    8e2c:	81 30       	cpi	r24, 0x01	; 1
    8e2e:	29 f4       	brne	.+10     	; 0x8e3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ca>
    8e30:	8b 81       	ldd	r24, Y+3	; 0x03
    8e32:	84 30       	cpi	r24, 0x04	; 4
    8e34:	11 f4       	brne	.+4      	; 0x8e3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1ca>
    8e36:	8f ef       	ldi	r24, 0xFF	; 255
    8e38:	42 c0       	rjmp	.+132    	; 0x8ebe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e3a:	8d 89       	ldd	r24, Y+21	; 0x15
    8e3c:	9e 89       	ldd	r25, Y+22	; 0x16
    8e3e:	fc 01       	movw	r30, r24
    8e40:	80 81       	ld	r24, Z
    8e42:	82 30       	cpi	r24, 0x02	; 2
    8e44:	18 f0       	brcs	.+6      	; 0x8e4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1dc>
    8e46:	8b 81       	ldd	r24, Y+3	; 0x03
    8e48:	88 23       	and	r24, r24
    8e4a:	11 f0       	breq	.+4      	; 0x8e50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x1e0>
    8e4c:	87 e0       	ldi	r24, 0x07	; 7
    8e4e:	37 c0       	rjmp	.+110    	; 0x8ebe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e50:	8d 89       	ldd	r24, Y+21	; 0x15
    8e52:	9e 89       	ldd	r25, Y+22	; 0x16
    8e54:	fc 01       	movw	r30, r24
    8e56:	80 81       	ld	r24, Z
    8e58:	4e ef       	ldi	r20, 0xFE	; 254
    8e5a:	48 0f       	add	r20, r24
    8e5c:	9e 01       	movw	r18, r28
    8e5e:	26 5f       	subi	r18, 0xF6	; 246
    8e60:	3f 4f       	sbci	r19, 0xFF	; 255
    8e62:	6b 89       	ldd	r22, Y+19	; 0x13
    8e64:	7c 89       	ldd	r23, Y+20	; 0x14
    8e66:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e68:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e6a:	69 dd       	rcall	.-1326   	; 0x893e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    8e6c:	89 87       	std	Y+9, r24	; 0x09
    8e6e:	89 85       	ldd	r24, Y+9	; 0x09
    8e70:	88 23       	and	r24, r24
    8e72:	11 f0       	breq	.+4      	; 0x8e78 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x208>
    8e74:	89 85       	ldd	r24, Y+9	; 0x09
    8e76:	23 c0       	rjmp	.+70     	; 0x8ebe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8e78:	8d 89       	ldd	r24, Y+21	; 0x15
    8e7a:	9e 89       	ldd	r25, Y+22	; 0x16
    8e7c:	fc 01       	movw	r30, r24
    8e7e:	80 81       	ld	r24, Z
    8e80:	88 2f       	mov	r24, r24
    8e82:	90 e0       	ldi	r25, 0x00	; 0
    8e84:	02 97       	sbiw	r24, 0x02	; 2
    8e86:	2b 89       	ldd	r18, Y+19	; 0x13
    8e88:	3c 89       	ldd	r19, Y+20	; 0x14
    8e8a:	82 0f       	add	r24, r18
    8e8c:	93 1f       	adc	r25, r19
    8e8e:	fc 01       	movw	r30, r24
    8e90:	90 81       	ld	r25, Z
    8e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    8e94:	98 17       	cp	r25, r24
    8e96:	81 f4       	brne	.+32     	; 0x8eb8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x248>
    8e98:	8d 89       	ldd	r24, Y+21	; 0x15
    8e9a:	9e 89       	ldd	r25, Y+22	; 0x16
    8e9c:	fc 01       	movw	r30, r24
    8e9e:	80 81       	ld	r24, Z
    8ea0:	88 2f       	mov	r24, r24
    8ea2:	90 e0       	ldi	r25, 0x00	; 0
    8ea4:	01 97       	sbiw	r24, 0x01	; 1
    8ea6:	2b 89       	ldd	r18, Y+19	; 0x13
    8ea8:	3c 89       	ldd	r19, Y+20	; 0x14
    8eaa:	82 0f       	add	r24, r18
    8eac:	93 1f       	adc	r25, r19
    8eae:	fc 01       	movw	r30, r24
    8eb0:	90 81       	ld	r25, Z
    8eb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    8eb4:	98 17       	cp	r25, r24
    8eb6:	11 f0       	breq	.+4      	; 0x8ebc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24c>
    8eb8:	87 e0       	ldi	r24, 0x07	; 7
    8eba:	01 c0       	rjmp	.+2      	; 0x8ebe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24e>
    8ebc:	80 e0       	ldi	r24, 0x00	; 0
    8ebe:	69 96       	adiw	r28, 0x19	; 25
    8ec0:	0f b6       	in	r0, 0x3f	; 63
    8ec2:	f8 94       	cli
    8ec4:	de bf       	out	0x3e, r29	; 62
    8ec6:	0f be       	out	0x3f, r0	; 63
    8ec8:	cd bf       	out	0x3d, r28	; 61
    8eca:	df 91       	pop	r29
    8ecc:	cf 91       	pop	r28
    8ece:	0f 91       	pop	r16
    8ed0:	ff 90       	pop	r15
    8ed2:	ef 90       	pop	r14
    8ed4:	df 90       	pop	r13
    8ed6:	cf 90       	pop	r12
    8ed8:	bf 90       	pop	r11
    8eda:	af 90       	pop	r10
    8edc:	8f 90       	pop	r8
    8ede:	08 95       	ret

00008ee0 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    8ee0:	cf 93       	push	r28
    8ee2:	df 93       	push	r29
    8ee4:	00 d0       	rcall	.+0      	; 0x8ee6 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x6>
    8ee6:	00 d0       	rcall	.+0      	; 0x8ee8 <_ZN7MFRC52213PICC_RequestAEPhS0_+0x8>
    8ee8:	cd b7       	in	r28, 0x3d	; 61
    8eea:	de b7       	in	r29, 0x3e	; 62
    8eec:	9a 83       	std	Y+2, r25	; 0x02
    8eee:	89 83       	std	Y+1, r24	; 0x01
    8ef0:	7c 83       	std	Y+4, r23	; 0x04
    8ef2:	6b 83       	std	Y+3, r22	; 0x03
    8ef4:	5e 83       	std	Y+6, r21	; 0x06
    8ef6:	4d 83       	std	Y+5, r20	; 0x05
    8ef8:	2d 81       	ldd	r18, Y+5	; 0x05
    8efa:	3e 81       	ldd	r19, Y+6	; 0x06
    8efc:	4b 81       	ldd	r20, Y+3	; 0x03
    8efe:	5c 81       	ldd	r21, Y+4	; 0x04
    8f00:	89 81       	ldd	r24, Y+1	; 0x01
    8f02:	9a 81       	ldd	r25, Y+2	; 0x02
    8f04:	66 e2       	ldi	r22, 0x26	; 38
    8f06:	09 d0       	rcall	.+18     	; 0x8f1a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>
    8f08:	26 96       	adiw	r28, 0x06	; 6
    8f0a:	0f b6       	in	r0, 0x3f	; 63
    8f0c:	f8 94       	cli
    8f0e:	de bf       	out	0x3e, r29	; 62
    8f10:	0f be       	out	0x3f, r0	; 63
    8f12:	cd bf       	out	0x3d, r28	; 61
    8f14:	df 91       	pop	r29
    8f16:	cf 91       	pop	r28
    8f18:	08 95       	ret

00008f1a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    8f1a:	af 92       	push	r10
    8f1c:	cf 92       	push	r12
    8f1e:	ef 92       	push	r14
    8f20:	ff 92       	push	r15
    8f22:	0f 93       	push	r16
    8f24:	1f 93       	push	r17
    8f26:	cf 93       	push	r28
    8f28:	df 93       	push	r29
    8f2a:	cd b7       	in	r28, 0x3d	; 61
    8f2c:	de b7       	in	r29, 0x3e	; 62
    8f2e:	29 97       	sbiw	r28, 0x09	; 9
    8f30:	0f b6       	in	r0, 0x3f	; 63
    8f32:	f8 94       	cli
    8f34:	de bf       	out	0x3e, r29	; 62
    8f36:	0f be       	out	0x3f, r0	; 63
    8f38:	cd bf       	out	0x3d, r28	; 61
    8f3a:	9c 83       	std	Y+4, r25	; 0x04
    8f3c:	8b 83       	std	Y+3, r24	; 0x03
    8f3e:	6d 83       	std	Y+5, r22	; 0x05
    8f40:	5f 83       	std	Y+7, r21	; 0x07
    8f42:	4e 83       	std	Y+6, r20	; 0x06
    8f44:	39 87       	std	Y+9, r19	; 0x09
    8f46:	28 87       	std	Y+8, r18	; 0x08
    8f48:	8e 81       	ldd	r24, Y+6	; 0x06
    8f4a:	9f 81       	ldd	r25, Y+7	; 0x07
    8f4c:	89 2b       	or	r24, r25
    8f4e:	31 f0       	breq	.+12     	; 0x8f5c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x42>
    8f50:	88 85       	ldd	r24, Y+8	; 0x08
    8f52:	99 85       	ldd	r25, Y+9	; 0x09
    8f54:	fc 01       	movw	r30, r24
    8f56:	80 81       	ld	r24, Z
    8f58:	82 30       	cpi	r24, 0x02	; 2
    8f5a:	10 f4       	brcc	.+4      	; 0x8f60 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x46>
    8f5c:	84 e0       	ldi	r24, 0x04	; 4
    8f5e:	2a c0       	rjmp	.+84     	; 0x8fb4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    8f60:	8b 81       	ldd	r24, Y+3	; 0x03
    8f62:	9c 81       	ldd	r25, Y+4	; 0x04
    8f64:	40 e8       	ldi	r20, 0x80	; 128
    8f66:	6c e1       	ldi	r22, 0x1C	; 28
    8f68:	c6 dc       	rcall	.-1652   	; 0x88f6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    8f6a:	87 e0       	ldi	r24, 0x07	; 7
    8f6c:	8a 83       	std	Y+2, r24	; 0x02
    8f6e:	fe 01       	movw	r30, r28
    8f70:	32 96       	adiw	r30, 0x02	; 2
    8f72:	48 85       	ldd	r20, Y+8	; 0x08
    8f74:	59 85       	ldd	r21, Y+9	; 0x09
    8f76:	2e 81       	ldd	r18, Y+6	; 0x06
    8f78:	3f 81       	ldd	r19, Y+7	; 0x07
    8f7a:	be 01       	movw	r22, r28
    8f7c:	6b 5f       	subi	r22, 0xFB	; 251
    8f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    8f80:	8b 81       	ldd	r24, Y+3	; 0x03
    8f82:	9c 81       	ldd	r25, Y+4	; 0x04
    8f84:	a1 2c       	mov	r10, r1
    8f86:	c1 2c       	mov	r12, r1
    8f88:	7f 01       	movw	r14, r30
    8f8a:	8a 01       	movw	r16, r20
    8f8c:	41 e0       	ldi	r20, 0x01	; 1
    8f8e:	27 de       	rcall	.-946    	; 0x8bde <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    8f90:	89 83       	std	Y+1, r24	; 0x01
    8f92:	89 81       	ldd	r24, Y+1	; 0x01
    8f94:	88 23       	and	r24, r24
    8f96:	11 f0       	breq	.+4      	; 0x8f9c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x82>
    8f98:	89 81       	ldd	r24, Y+1	; 0x01
    8f9a:	0c c0       	rjmp	.+24     	; 0x8fb4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    8f9c:	88 85       	ldd	r24, Y+8	; 0x08
    8f9e:	99 85       	ldd	r25, Y+9	; 0x09
    8fa0:	fc 01       	movw	r30, r24
    8fa2:	80 81       	ld	r24, Z
    8fa4:	82 30       	cpi	r24, 0x02	; 2
    8fa6:	19 f4       	brne	.+6      	; 0x8fae <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x94>
    8fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    8faa:	88 23       	and	r24, r24
    8fac:	11 f0       	breq	.+4      	; 0x8fb2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x98>
    8fae:	81 e0       	ldi	r24, 0x01	; 1
    8fb0:	01 c0       	rjmp	.+2      	; 0x8fb4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x9a>
    8fb2:	80 e0       	ldi	r24, 0x00	; 0
    8fb4:	29 96       	adiw	r28, 0x09	; 9
    8fb6:	0f b6       	in	r0, 0x3f	; 63
    8fb8:	f8 94       	cli
    8fba:	de bf       	out	0x3e, r29	; 62
    8fbc:	0f be       	out	0x3f, r0	; 63
    8fbe:	cd bf       	out	0x3d, r28	; 61
    8fc0:	df 91       	pop	r29
    8fc2:	cf 91       	pop	r28
    8fc4:	1f 91       	pop	r17
    8fc6:	0f 91       	pop	r16
    8fc8:	ff 90       	pop	r15
    8fca:	ef 90       	pop	r14
    8fcc:	cf 90       	pop	r12
    8fce:	af 90       	pop	r10
    8fd0:	08 95       	ret

00008fd2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    8fd2:	af 92       	push	r10
    8fd4:	cf 92       	push	r12
    8fd6:	ef 92       	push	r14
    8fd8:	ff 92       	push	r15
    8fda:	0f 93       	push	r16
    8fdc:	1f 93       	push	r17
    8fde:	cf 93       	push	r28
    8fe0:	df 93       	push	r29
    8fe2:	cd b7       	in	r28, 0x3d	; 61
    8fe4:	de b7       	in	r29, 0x3e	; 62
    8fe6:	a2 97       	sbiw	r28, 0x22	; 34
    8fe8:	0f b6       	in	r0, 0x3f	; 63
    8fea:	f8 94       	cli
    8fec:	de bf       	out	0x3e, r29	; 62
    8fee:	0f be       	out	0x3f, r0	; 63
    8ff0:	cd bf       	out	0x3d, r28	; 61
    8ff2:	9f 8f       	std	Y+31, r25	; 0x1f
    8ff4:	8e 8f       	std	Y+30, r24	; 0x1e
    8ff6:	79 a3       	std	Y+33, r23	; 0x21
    8ff8:	68 a3       	std	Y+32, r22	; 0x20
    8ffa:	4a a3       	std	Y+34, r20	; 0x22
    8ffc:	81 e0       	ldi	r24, 0x01	; 1
    8ffe:	8c 83       	std	Y+4, r24	; 0x04
    9000:	8a a1       	ldd	r24, Y+34	; 0x22
    9002:	81 35       	cpi	r24, 0x51	; 81
    9004:	10 f0       	brcs	.+4      	; 0x900a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
    9006:	86 e0       	ldi	r24, 0x06	; 6
    9008:	31 c2       	rjmp	.+1122   	; 0x946c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    900a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    900c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    900e:	40 e8       	ldi	r20, 0x80	; 128
    9010:	6c e1       	ldi	r22, 0x1C	; 28
    9012:	71 dc       	rcall	.-1822   	; 0x88f6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    9014:	19 82       	std	Y+1, r1	; 0x01
    9016:	89 81       	ldd	r24, Y+1	; 0x01
    9018:	88 23       	and	r24, r24
    901a:	09 f0       	breq	.+2      	; 0x901e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    901c:	1c c2       	rjmp	.+1080   	; 0x9456 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x484>
    901e:	8c 81       	ldd	r24, Y+4	; 0x04
    9020:	88 2f       	mov	r24, r24
    9022:	90 e0       	ldi	r25, 0x00	; 0
    9024:	82 30       	cpi	r24, 0x02	; 2
    9026:	91 05       	cpc	r25, r1
    9028:	b1 f0       	breq	.+44     	; 0x9056 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x84>
    902a:	83 30       	cpi	r24, 0x03	; 3
    902c:	91 05       	cpc	r25, r1
    902e:	29 f1       	breq	.+74     	; 0x907a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa8>
    9030:	01 97       	sbiw	r24, 0x01	; 1
    9032:	49 f5       	brne	.+82     	; 0x9086 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb4>
    9034:	83 e9       	ldi	r24, 0x93	; 147
    9036:	8b 8b       	std	Y+19, r24	; 0x13
    9038:	1f 82       	std	Y+7, r1	; 0x07
    903a:	8a a1       	ldd	r24, Y+34	; 0x22
    903c:	88 23       	and	r24, r24
    903e:	41 f0       	breq	.+16     	; 0x9050 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    9040:	88 a1       	ldd	r24, Y+32	; 0x20
    9042:	99 a1       	ldd	r25, Y+33	; 0x21
    9044:	fc 01       	movw	r30, r24
    9046:	80 81       	ld	r24, Z
    9048:	85 30       	cpi	r24, 0x05	; 5
    904a:	10 f0       	brcs	.+4      	; 0x9050 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x7e>
    904c:	81 e0       	ldi	r24, 0x01	; 1
    904e:	01 c0       	rjmp	.+2      	; 0x9052 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x80>
    9050:	80 e0       	ldi	r24, 0x00	; 0
    9052:	8b 83       	std	Y+3, r24	; 0x03
    9054:	1a c0       	rjmp	.+52     	; 0x908a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    9056:	85 e9       	ldi	r24, 0x95	; 149
    9058:	8b 8b       	std	Y+19, r24	; 0x13
    905a:	83 e0       	ldi	r24, 0x03	; 3
    905c:	8f 83       	std	Y+7, r24	; 0x07
    905e:	8a a1       	ldd	r24, Y+34	; 0x22
    9060:	88 23       	and	r24, r24
    9062:	41 f0       	breq	.+16     	; 0x9074 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    9064:	88 a1       	ldd	r24, Y+32	; 0x20
    9066:	99 a1       	ldd	r25, Y+33	; 0x21
    9068:	fc 01       	movw	r30, r24
    906a:	80 81       	ld	r24, Z
    906c:	88 30       	cpi	r24, 0x08	; 8
    906e:	10 f0       	brcs	.+4      	; 0x9074 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    9070:	81 e0       	ldi	r24, 0x01	; 1
    9072:	01 c0       	rjmp	.+2      	; 0x9076 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    9074:	80 e0       	ldi	r24, 0x00	; 0
    9076:	8b 83       	std	Y+3, r24	; 0x03
    9078:	08 c0       	rjmp	.+16     	; 0x908a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    907a:	87 e9       	ldi	r24, 0x97	; 151
    907c:	8b 8b       	std	Y+19, r24	; 0x13
    907e:	86 e0       	ldi	r24, 0x06	; 6
    9080:	8f 83       	std	Y+7, r24	; 0x07
    9082:	1b 82       	std	Y+3, r1	; 0x03
    9084:	02 c0       	rjmp	.+4      	; 0x908a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
    9086:	85 e0       	ldi	r24, 0x05	; 5
    9088:	f1 c1       	rjmp	.+994    	; 0x946c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    908a:	8f 81       	ldd	r24, Y+7	; 0x07
    908c:	88 0f       	add	r24, r24
    908e:	88 0f       	add	r24, r24
    9090:	88 0f       	add	r24, r24
    9092:	9a a1       	ldd	r25, Y+34	; 0x22
    9094:	f9 2f       	mov	r31, r25
    9096:	f8 1b       	sub	r31, r24
    9098:	8f 2f       	mov	r24, r31
    909a:	88 87       	std	Y+8, r24	; 0x08
    909c:	88 85       	ldd	r24, Y+8	; 0x08
    909e:	88 23       	and	r24, r24
    90a0:	0c f4       	brge	.+2      	; 0x90a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd2>
    90a2:	18 86       	std	Y+8, r1	; 0x08
    90a4:	82 e0       	ldi	r24, 0x02	; 2
    90a6:	8e 83       	std	Y+6, r24	; 0x06
    90a8:	8b 81       	ldd	r24, Y+3	; 0x03
    90aa:	88 23       	and	r24, r24
    90ac:	71 f0       	breq	.+28     	; 0x90ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf8>
    90ae:	8e 81       	ldd	r24, Y+6	; 0x06
    90b0:	91 e0       	ldi	r25, 0x01	; 1
    90b2:	98 0f       	add	r25, r24
    90b4:	9e 83       	std	Y+6, r25	; 0x06
    90b6:	88 2f       	mov	r24, r24
    90b8:	90 e0       	ldi	r25, 0x00	; 0
    90ba:	9e 01       	movw	r18, r28
    90bc:	2d 5e       	subi	r18, 0xED	; 237
    90be:	3f 4f       	sbci	r19, 0xFF	; 255
    90c0:	82 0f       	add	r24, r18
    90c2:	93 1f       	adc	r25, r19
    90c4:	28 e8       	ldi	r18, 0x88	; 136
    90c6:	fc 01       	movw	r30, r24
    90c8:	20 83       	st	Z, r18
    90ca:	88 85       	ldd	r24, Y+8	; 0x08
    90cc:	88 23       	and	r24, r24
    90ce:	0c f4       	brge	.+2      	; 0x90d2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x100>
    90d0:	89 5f       	subi	r24, 0xF9	; 249
    90d2:	85 95       	asr	r24
    90d4:	85 95       	asr	r24
    90d6:	85 95       	asr	r24
    90d8:	98 2f       	mov	r25, r24
    90da:	88 85       	ldd	r24, Y+8	; 0x08
    90dc:	87 70       	andi	r24, 0x07	; 7
    90de:	88 23       	and	r24, r24
    90e0:	11 f0       	breq	.+4      	; 0x90e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x114>
    90e2:	81 e0       	ldi	r24, 0x01	; 1
    90e4:	01 c0       	rjmp	.+2      	; 0x90e8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x116>
    90e6:	80 e0       	ldi	r24, 0x00	; 0
    90e8:	89 0f       	add	r24, r25
    90ea:	8c 87       	std	Y+12, r24	; 0x0c
    90ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    90ee:	88 23       	and	r24, r24
    90f0:	99 f1       	breq	.+102    	; 0x9158 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    90f2:	8b 81       	ldd	r24, Y+3	; 0x03
    90f4:	88 23       	and	r24, r24
    90f6:	11 f0       	breq	.+4      	; 0x90fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    90f8:	83 e0       	ldi	r24, 0x03	; 3
    90fa:	01 c0       	rjmp	.+2      	; 0x90fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12c>
    90fc:	84 e0       	ldi	r24, 0x04	; 4
    90fe:	8e 87       	std	Y+14, r24	; 0x0e
    9100:	9c 85       	ldd	r25, Y+12	; 0x0c
    9102:	8e 85       	ldd	r24, Y+14	; 0x0e
    9104:	89 17       	cp	r24, r25
    9106:	10 f4       	brcc	.+4      	; 0x910c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13a>
    9108:	8e 85       	ldd	r24, Y+14	; 0x0e
    910a:	8c 87       	std	Y+12, r24	; 0x0c
    910c:	1d 82       	std	Y+5, r1	; 0x05
    910e:	9d 81       	ldd	r25, Y+5	; 0x05
    9110:	8c 85       	ldd	r24, Y+12	; 0x0c
    9112:	98 17       	cp	r25, r24
    9114:	08 f5       	brcc	.+66     	; 0x9158 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x186>
    9116:	8e 81       	ldd	r24, Y+6	; 0x06
    9118:	91 e0       	ldi	r25, 0x01	; 1
    911a:	98 0f       	add	r25, r24
    911c:	9e 83       	std	Y+6, r25	; 0x06
    911e:	88 2f       	mov	r24, r24
    9120:	90 e0       	ldi	r25, 0x00	; 0
    9122:	2f 81       	ldd	r18, Y+7	; 0x07
    9124:	42 2f       	mov	r20, r18
    9126:	50 e0       	ldi	r21, 0x00	; 0
    9128:	2d 81       	ldd	r18, Y+5	; 0x05
    912a:	22 2f       	mov	r18, r18
    912c:	30 e0       	ldi	r19, 0x00	; 0
    912e:	24 0f       	add	r18, r20
    9130:	35 1f       	adc	r19, r21
    9132:	48 a1       	ldd	r20, Y+32	; 0x20
    9134:	59 a1       	ldd	r21, Y+33	; 0x21
    9136:	24 0f       	add	r18, r20
    9138:	35 1f       	adc	r19, r21
    913a:	2f 5f       	subi	r18, 0xFF	; 255
    913c:	3f 4f       	sbci	r19, 0xFF	; 255
    913e:	f9 01       	movw	r30, r18
    9140:	40 81       	ld	r20, Z
    9142:	9e 01       	movw	r18, r28
    9144:	2d 5e       	subi	r18, 0xED	; 237
    9146:	3f 4f       	sbci	r19, 0xFF	; 255
    9148:	82 0f       	add	r24, r18
    914a:	93 1f       	adc	r25, r19
    914c:	fc 01       	movw	r30, r24
    914e:	40 83       	st	Z, r20
    9150:	8d 81       	ldd	r24, Y+5	; 0x05
    9152:	8f 5f       	subi	r24, 0xFF	; 255
    9154:	8d 83       	std	Y+5, r24	; 0x05
    9156:	db cf       	rjmp	.-74     	; 0x910e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x13c>
    9158:	8b 81       	ldd	r24, Y+3	; 0x03
    915a:	88 23       	and	r24, r24
    915c:	19 f0       	breq	.+6      	; 0x9164 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x192>
    915e:	88 85       	ldd	r24, Y+8	; 0x08
    9160:	88 5f       	subi	r24, 0xF8	; 248
    9162:	88 87       	std	Y+8, r24	; 0x08
    9164:	1a 82       	std	Y+2, r1	; 0x02
    9166:	8a 81       	ldd	r24, Y+2	; 0x02
    9168:	88 23       	and	r24, r24
    916a:	09 f0       	breq	.+2      	; 0x916e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    916c:	fd c0       	rjmp	.+506    	; 0x9368 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x396>
    916e:	88 85       	ldd	r24, Y+8	; 0x08
    9170:	80 32       	cpi	r24, 0x20	; 32
    9172:	3c f1       	brlt	.+78     	; 0x91c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    9174:	80 e7       	ldi	r24, 0x70	; 112
    9176:	8c 8b       	std	Y+20, r24	; 0x14
    9178:	9d 89       	ldd	r25, Y+21	; 0x15
    917a:	8e 89       	ldd	r24, Y+22	; 0x16
    917c:	98 27       	eor	r25, r24
    917e:	8f 89       	ldd	r24, Y+23	; 0x17
    9180:	98 27       	eor	r25, r24
    9182:	88 8d       	ldd	r24, Y+24	; 0x18
    9184:	89 27       	eor	r24, r25
    9186:	89 8f       	std	Y+25, r24	; 0x19
    9188:	ce 01       	movw	r24, r28
    918a:	43 96       	adiw	r24, 0x13	; 19
    918c:	9c 01       	movw	r18, r24
    918e:	29 5f       	subi	r18, 0xF9	; 249
    9190:	3f 4f       	sbci	r19, 0xFF	; 255
    9192:	be 01       	movw	r22, r28
    9194:	6d 5e       	subi	r22, 0xED	; 237
    9196:	7f 4f       	sbci	r23, 0xFF	; 255
    9198:	8e 8d       	ldd	r24, Y+30	; 0x1e
    919a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    919c:	47 e0       	ldi	r20, 0x07	; 7
    919e:	cf db       	rcall	.-2146   	; 0x893e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    91a0:	8f 87       	std	Y+15, r24	; 0x0f
    91a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    91a4:	88 23       	and	r24, r24
    91a6:	11 f0       	breq	.+4      	; 0x91ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1da>
    91a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    91aa:	60 c1       	rjmp	.+704    	; 0x946c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    91ac:	1c 8e       	std	Y+28, r1	; 0x1c
    91ae:	89 e0       	ldi	r24, 0x09	; 9
    91b0:	89 87       	std	Y+9, r24	; 0x09
    91b2:	ce 01       	movw	r24, r28
    91b4:	43 96       	adiw	r24, 0x13	; 19
    91b6:	06 96       	adiw	r24, 0x06	; 6
    91b8:	9b 87       	std	Y+11, r25	; 0x0b
    91ba:	8a 87       	std	Y+10, r24	; 0x0a
    91bc:	83 e0       	ldi	r24, 0x03	; 3
    91be:	8d 8f       	std	Y+29, r24	; 0x1d
    91c0:	33 c0       	rjmp	.+102    	; 0x9228 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x256>
    91c2:	88 85       	ldd	r24, Y+8	; 0x08
    91c4:	87 78       	andi	r24, 0x87	; 135
    91c6:	88 23       	and	r24, r24
    91c8:	1c f4       	brge	.+6      	; 0x91d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
    91ca:	81 50       	subi	r24, 0x01	; 1
    91cc:	88 6f       	ori	r24, 0xF8	; 248
    91ce:	8f 5f       	subi	r24, 0xFF	; 255
    91d0:	8c 8f       	std	Y+28, r24	; 0x1c
    91d2:	88 85       	ldd	r24, Y+8	; 0x08
    91d4:	88 23       	and	r24, r24
    91d6:	0c f4       	brge	.+2      	; 0x91da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x208>
    91d8:	89 5f       	subi	r24, 0xF9	; 249
    91da:	85 95       	asr	r24
    91dc:	85 95       	asr	r24
    91de:	85 95       	asr	r24
    91e0:	8d 83       	std	Y+5, r24	; 0x05
    91e2:	8d 81       	ldd	r24, Y+5	; 0x05
    91e4:	8e 5f       	subi	r24, 0xFE	; 254
    91e6:	8e 83       	std	Y+6, r24	; 0x06
    91e8:	8e 81       	ldd	r24, Y+6	; 0x06
    91ea:	98 2f       	mov	r25, r24
    91ec:	92 95       	swap	r25
    91ee:	90 7f       	andi	r25, 0xF0	; 240
    91f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    91f2:	89 0f       	add	r24, r25
    91f4:	8c 8b       	std	Y+20, r24	; 0x14
    91f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    91f8:	88 23       	and	r24, r24
    91fa:	11 f0       	breq	.+4      	; 0x9200 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x22e>
    91fc:	81 e0       	ldi	r24, 0x01	; 1
    91fe:	01 c0       	rjmp	.+2      	; 0x9202 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x230>
    9200:	80 e0       	ldi	r24, 0x00	; 0
    9202:	9e 81       	ldd	r25, Y+6	; 0x06
    9204:	89 0f       	add	r24, r25
    9206:	89 87       	std	Y+9, r24	; 0x09
    9208:	8e 81       	ldd	r24, Y+6	; 0x06
    920a:	88 2f       	mov	r24, r24
    920c:	90 e0       	ldi	r25, 0x00	; 0
    920e:	9e 01       	movw	r18, r28
    9210:	2d 5e       	subi	r18, 0xED	; 237
    9212:	3f 4f       	sbci	r19, 0xFF	; 255
    9214:	82 0f       	add	r24, r18
    9216:	93 1f       	adc	r25, r19
    9218:	9b 87       	std	Y+11, r25	; 0x0b
    921a:	8a 87       	std	Y+10, r24	; 0x0a
    921c:	99 e0       	ldi	r25, 0x09	; 9
    921e:	8e 81       	ldd	r24, Y+6	; 0x06
    9220:	f9 2f       	mov	r31, r25
    9222:	f8 1b       	sub	r31, r24
    9224:	8f 2f       	mov	r24, r31
    9226:	8d 8f       	std	Y+29, r24	; 0x1d
    9228:	8c 8d       	ldd	r24, Y+28	; 0x1c
    922a:	88 8b       	std	Y+16, r24	; 0x10
    922c:	88 89       	ldd	r24, Y+16	; 0x10
    922e:	98 2f       	mov	r25, r24
    9230:	92 95       	swap	r25
    9232:	90 7f       	andi	r25, 0xF0	; 240
    9234:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9236:	29 2f       	mov	r18, r25
    9238:	28 0f       	add	r18, r24
    923a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    923c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    923e:	42 2f       	mov	r20, r18
    9240:	6a e1       	ldi	r22, 0x1A	; 26
    9242:	dd d9       	rcall	.-3142   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    9244:	fe 01       	movw	r30, r28
    9246:	7c 96       	adiw	r30, 0x1c	; 28
    9248:	ae 01       	movw	r20, r28
    924a:	43 5e       	subi	r20, 0xE3	; 227
    924c:	5f 4f       	sbci	r21, 0xFF	; 255
    924e:	2a 85       	ldd	r18, Y+10	; 0x0a
    9250:	3b 85       	ldd	r19, Y+11	; 0x0b
    9252:	be 01       	movw	r22, r28
    9254:	6d 5e       	subi	r22, 0xED	; 237
    9256:	7f 4f       	sbci	r23, 0xFF	; 255
    9258:	8e 8d       	ldd	r24, Y+30	; 0x1e
    925a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    925c:	a1 2c       	mov	r10, r1
    925e:	c8 88       	ldd	r12, Y+16	; 0x10
    9260:	7f 01       	movw	r14, r30
    9262:	8a 01       	movw	r16, r20
    9264:	49 85       	ldd	r20, Y+9	; 0x09
    9266:	bb dc       	rcall	.-1674   	; 0x8bde <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    9268:	8f 87       	std	Y+15, r24	; 0x0f
    926a:	8f 85       	ldd	r24, Y+15	; 0x0f
    926c:	82 30       	cpi	r24, 0x02	; 2
    926e:	09 f0       	breq	.+2      	; 0x9272 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2a0>
    9270:	6d c0       	rjmp	.+218    	; 0x934c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x37a>
    9272:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9274:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9276:	6c e1       	ldi	r22, 0x1C	; 28
    9278:	4d da       	rcall	.-2918   	; 0x8714 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    927a:	89 8b       	std	Y+17, r24	; 0x11
    927c:	89 89       	ldd	r24, Y+17	; 0x11
    927e:	88 2f       	mov	r24, r24
    9280:	90 e0       	ldi	r25, 0x00	; 0
    9282:	80 72       	andi	r24, 0x20	; 32
    9284:	99 27       	eor	r25, r25
    9286:	89 2b       	or	r24, r25
    9288:	11 f0       	breq	.+4      	; 0x928e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2bc>
    928a:	82 e0       	ldi	r24, 0x02	; 2
    928c:	ef c0       	rjmp	.+478    	; 0x946c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    928e:	89 89       	ldd	r24, Y+17	; 0x11
    9290:	8f 71       	andi	r24, 0x1F	; 31
    9292:	8d 87       	std	Y+13, r24	; 0x0d
    9294:	8d 85       	ldd	r24, Y+13	; 0x0d
    9296:	88 23       	and	r24, r24
    9298:	11 f4       	brne	.+4      	; 0x929e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    929a:	80 e2       	ldi	r24, 0x20	; 32
    929c:	8d 87       	std	Y+13, r24	; 0x0d
    929e:	8d 85       	ldd	r24, Y+13	; 0x0d
    92a0:	28 2f       	mov	r18, r24
    92a2:	30 e0       	ldi	r19, 0x00	; 0
    92a4:	88 85       	ldd	r24, Y+8	; 0x08
    92a6:	08 2e       	mov	r0, r24
    92a8:	00 0c       	add	r0, r0
    92aa:	99 0b       	sbc	r25, r25
    92ac:	82 17       	cp	r24, r18
    92ae:	93 07       	cpc	r25, r19
    92b0:	14 f0       	brlt	.+4      	; 0x92b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2e4>
    92b2:	85 e0       	ldi	r24, 0x05	; 5
    92b4:	db c0       	rjmp	.+438    	; 0x946c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    92b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    92b8:	88 87       	std	Y+8, r24	; 0x08
    92ba:	88 85       	ldd	r24, Y+8	; 0x08
    92bc:	87 78       	andi	r24, 0x87	; 135
    92be:	88 23       	and	r24, r24
    92c0:	1c f4       	brge	.+6      	; 0x92c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2f6>
    92c2:	81 50       	subi	r24, 0x01	; 1
    92c4:	88 6f       	ori	r24, 0xF8	; 248
    92c6:	8f 5f       	subi	r24, 0xFF	; 255
    92c8:	8d 83       	std	Y+5, r24	; 0x05
    92ca:	88 85       	ldd	r24, Y+8	; 0x08
    92cc:	08 2e       	mov	r0, r24
    92ce:	00 0c       	add	r0, r0
    92d0:	99 0b       	sbc	r25, r25
    92d2:	01 97       	sbiw	r24, 0x01	; 1
    92d4:	87 70       	andi	r24, 0x07	; 7
    92d6:	90 78       	andi	r25, 0x80	; 128
    92d8:	99 23       	and	r25, r25
    92da:	24 f4       	brge	.+8      	; 0x92e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x312>
    92dc:	01 97       	sbiw	r24, 0x01	; 1
    92de:	88 6f       	ori	r24, 0xF8	; 248
    92e0:	9f 6f       	ori	r25, 0xFF	; 255
    92e2:	01 96       	adiw	r24, 0x01	; 1
    92e4:	8a 8b       	std	Y+18, r24	; 0x12
    92e6:	88 85       	ldd	r24, Y+8	; 0x08
    92e8:	88 23       	and	r24, r24
    92ea:	0c f4       	brge	.+2      	; 0x92ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x31c>
    92ec:	89 5f       	subi	r24, 0xF9	; 249
    92ee:	85 95       	asr	r24
    92f0:	85 95       	asr	r24
    92f2:	85 95       	asr	r24
    92f4:	98 2f       	mov	r25, r24
    92f6:	8d 81       	ldd	r24, Y+5	; 0x05
    92f8:	88 23       	and	r24, r24
    92fa:	11 f0       	breq	.+4      	; 0x9300 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32e>
    92fc:	81 e0       	ldi	r24, 0x01	; 1
    92fe:	01 c0       	rjmp	.+2      	; 0x9302 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x330>
    9300:	80 e0       	ldi	r24, 0x00	; 0
    9302:	89 0f       	add	r24, r25
    9304:	8f 5f       	subi	r24, 0xFF	; 255
    9306:	8e 83       	std	Y+6, r24	; 0x06
    9308:	8e 81       	ldd	r24, Y+6	; 0x06
    930a:	88 2f       	mov	r24, r24
    930c:	90 e0       	ldi	r25, 0x00	; 0
    930e:	2e 81       	ldd	r18, Y+6	; 0x06
    9310:	22 2f       	mov	r18, r18
    9312:	30 e0       	ldi	r19, 0x00	; 0
    9314:	ae 01       	movw	r20, r28
    9316:	4d 5e       	subi	r20, 0xED	; 237
    9318:	5f 4f       	sbci	r21, 0xFF	; 255
    931a:	24 0f       	add	r18, r20
    931c:	35 1f       	adc	r19, r21
    931e:	f9 01       	movw	r30, r18
    9320:	20 81       	ld	r18, Z
    9322:	62 2f       	mov	r22, r18
    9324:	2a 89       	ldd	r18, Y+18	; 0x12
    9326:	42 2f       	mov	r20, r18
    9328:	50 e0       	ldi	r21, 0x00	; 0
    932a:	21 e0       	ldi	r18, 0x01	; 1
    932c:	30 e0       	ldi	r19, 0x00	; 0
    932e:	02 c0       	rjmp	.+4      	; 0x9334 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x362>
    9330:	22 0f       	add	r18, r18
    9332:	33 1f       	adc	r19, r19
    9334:	4a 95       	dec	r20
    9336:	e2 f7       	brpl	.-8      	; 0x9330 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x35e>
    9338:	26 2b       	or	r18, r22
    933a:	42 2f       	mov	r20, r18
    933c:	9e 01       	movw	r18, r28
    933e:	2d 5e       	subi	r18, 0xED	; 237
    9340:	3f 4f       	sbci	r19, 0xFF	; 255
    9342:	82 0f       	add	r24, r18
    9344:	93 1f       	adc	r25, r19
    9346:	fc 01       	movw	r30, r24
    9348:	40 83       	st	Z, r20
    934a:	0d cf       	rjmp	.-486    	; 0x9166 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    934c:	8f 85       	ldd	r24, Y+15	; 0x0f
    934e:	88 23       	and	r24, r24
    9350:	11 f0       	breq	.+4      	; 0x9356 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x384>
    9352:	8f 85       	ldd	r24, Y+15	; 0x0f
    9354:	8b c0       	rjmp	.+278    	; 0x946c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9356:	88 85       	ldd	r24, Y+8	; 0x08
    9358:	80 32       	cpi	r24, 0x20	; 32
    935a:	1c f0       	brlt	.+6      	; 0x9362 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x390>
    935c:	81 e0       	ldi	r24, 0x01	; 1
    935e:	8a 83       	std	Y+2, r24	; 0x02
    9360:	02 cf       	rjmp	.-508    	; 0x9166 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    9362:	80 e2       	ldi	r24, 0x20	; 32
    9364:	88 87       	std	Y+8, r24	; 0x08
    9366:	ff ce       	rjmp	.-514    	; 0x9166 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
    9368:	8d 89       	ldd	r24, Y+21	; 0x15
    936a:	88 38       	cpi	r24, 0x88	; 136
    936c:	11 f4       	brne	.+4      	; 0x9372 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a0>
    936e:	83 e0       	ldi	r24, 0x03	; 3
    9370:	01 c0       	rjmp	.+2      	; 0x9374 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a2>
    9372:	82 e0       	ldi	r24, 0x02	; 2
    9374:	8e 83       	std	Y+6, r24	; 0x06
    9376:	8d 89       	ldd	r24, Y+21	; 0x15
    9378:	88 38       	cpi	r24, 0x88	; 136
    937a:	11 f4       	brne	.+4      	; 0x9380 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3ae>
    937c:	83 e0       	ldi	r24, 0x03	; 3
    937e:	01 c0       	rjmp	.+2      	; 0x9382 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3b0>
    9380:	84 e0       	ldi	r24, 0x04	; 4
    9382:	8c 87       	std	Y+12, r24	; 0x0c
    9384:	1d 82       	std	Y+5, r1	; 0x05
    9386:	9d 81       	ldd	r25, Y+5	; 0x05
    9388:	8c 85       	ldd	r24, Y+12	; 0x0c
    938a:	98 17       	cp	r25, r24
    938c:	00 f5       	brcc	.+64     	; 0x93ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3fc>
    938e:	8f 81       	ldd	r24, Y+7	; 0x07
    9390:	28 2f       	mov	r18, r24
    9392:	30 e0       	ldi	r19, 0x00	; 0
    9394:	8d 81       	ldd	r24, Y+5	; 0x05
    9396:	88 2f       	mov	r24, r24
    9398:	90 e0       	ldi	r25, 0x00	; 0
    939a:	82 0f       	add	r24, r18
    939c:	93 1f       	adc	r25, r19
    939e:	2e 81       	ldd	r18, Y+6	; 0x06
    93a0:	31 e0       	ldi	r19, 0x01	; 1
    93a2:	32 0f       	add	r19, r18
    93a4:	3e 83       	std	Y+6, r19	; 0x06
    93a6:	22 2f       	mov	r18, r18
    93a8:	30 e0       	ldi	r19, 0x00	; 0
    93aa:	ae 01       	movw	r20, r28
    93ac:	4d 5e       	subi	r20, 0xED	; 237
    93ae:	5f 4f       	sbci	r21, 0xFF	; 255
    93b0:	24 0f       	add	r18, r20
    93b2:	35 1f       	adc	r19, r21
    93b4:	f9 01       	movw	r30, r18
    93b6:	40 81       	ld	r20, Z
    93b8:	28 a1       	ldd	r18, Y+32	; 0x20
    93ba:	39 a1       	ldd	r19, Y+33	; 0x21
    93bc:	82 0f       	add	r24, r18
    93be:	93 1f       	adc	r25, r19
    93c0:	01 96       	adiw	r24, 0x01	; 1
    93c2:	fc 01       	movw	r30, r24
    93c4:	40 83       	st	Z, r20
    93c6:	8d 81       	ldd	r24, Y+5	; 0x05
    93c8:	8f 5f       	subi	r24, 0xFF	; 255
    93ca:	8d 83       	std	Y+5, r24	; 0x05
    93cc:	dc cf       	rjmp	.-72     	; 0x9386 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3b4>
    93ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    93d0:	83 30       	cpi	r24, 0x03	; 3
    93d2:	19 f4       	brne	.+6      	; 0x93da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x408>
    93d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    93d6:	88 23       	and	r24, r24
    93d8:	11 f0       	breq	.+4      	; 0x93de <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x40c>
    93da:	81 e0       	ldi	r24, 0x01	; 1
    93dc:	47 c0       	rjmp	.+142    	; 0x946c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    93de:	ce 01       	movw	r24, r28
    93e0:	43 96       	adiw	r24, 0x13	; 19
    93e2:	9c 01       	movw	r18, r24
    93e4:	2e 5f       	subi	r18, 0xFE	; 254
    93e6:	3f 4f       	sbci	r19, 0xFF	; 255
    93e8:	6a 85       	ldd	r22, Y+10	; 0x0a
    93ea:	7b 85       	ldd	r23, Y+11	; 0x0b
    93ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    93ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    93f0:	41 e0       	ldi	r20, 0x01	; 1
    93f2:	a5 da       	rcall	.-2742   	; 0x893e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    93f4:	8f 87       	std	Y+15, r24	; 0x0f
    93f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    93f8:	88 23       	and	r24, r24
    93fa:	11 f0       	breq	.+4      	; 0x9400 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x42e>
    93fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    93fe:	36 c0       	rjmp	.+108    	; 0x946c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9400:	2d 89       	ldd	r18, Y+21	; 0x15
    9402:	8a 85       	ldd	r24, Y+10	; 0x0a
    9404:	9b 85       	ldd	r25, Y+11	; 0x0b
    9406:	01 96       	adiw	r24, 0x01	; 1
    9408:	fc 01       	movw	r30, r24
    940a:	80 81       	ld	r24, Z
    940c:	28 17       	cp	r18, r24
    940e:	41 f4       	brne	.+16     	; 0x9420 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44e>
    9410:	2e 89       	ldd	r18, Y+22	; 0x16
    9412:	8a 85       	ldd	r24, Y+10	; 0x0a
    9414:	9b 85       	ldd	r25, Y+11	; 0x0b
    9416:	02 96       	adiw	r24, 0x02	; 2
    9418:	fc 01       	movw	r30, r24
    941a:	80 81       	ld	r24, Z
    941c:	28 17       	cp	r18, r24
    941e:	11 f0       	breq	.+4      	; 0x9424 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x452>
    9420:	87 e0       	ldi	r24, 0x07	; 7
    9422:	24 c0       	rjmp	.+72     	; 0x946c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x49a>
    9424:	8a 85       	ldd	r24, Y+10	; 0x0a
    9426:	9b 85       	ldd	r25, Y+11	; 0x0b
    9428:	fc 01       	movw	r30, r24
    942a:	80 81       	ld	r24, Z
    942c:	88 2f       	mov	r24, r24
    942e:	90 e0       	ldi	r25, 0x00	; 0
    9430:	84 70       	andi	r24, 0x04	; 4
    9432:	99 27       	eor	r25, r25
    9434:	89 2b       	or	r24, r25
    9436:	21 f0       	breq	.+8      	; 0x9440 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x46e>
    9438:	8c 81       	ldd	r24, Y+4	; 0x04
    943a:	8f 5f       	subi	r24, 0xFF	; 255
    943c:	8c 83       	std	Y+4, r24	; 0x04
    943e:	eb cd       	rjmp	.-1066   	; 0x9016 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    9440:	81 e0       	ldi	r24, 0x01	; 1
    9442:	89 83       	std	Y+1, r24	; 0x01
    9444:	8a 85       	ldd	r24, Y+10	; 0x0a
    9446:	9b 85       	ldd	r25, Y+11	; 0x0b
    9448:	fc 01       	movw	r30, r24
    944a:	20 81       	ld	r18, Z
    944c:	88 a1       	ldd	r24, Y+32	; 0x20
    944e:	99 a1       	ldd	r25, Y+33	; 0x21
    9450:	fc 01       	movw	r30, r24
    9452:	23 87       	std	Z+11, r18	; 0x0b
    9454:	e0 cd       	rjmp	.-1088   	; 0x9016 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x44>
    9456:	9c 81       	ldd	r25, Y+4	; 0x04
    9458:	89 2f       	mov	r24, r25
    945a:	88 0f       	add	r24, r24
    945c:	89 0f       	add	r24, r25
    945e:	21 e0       	ldi	r18, 0x01	; 1
    9460:	28 0f       	add	r18, r24
    9462:	88 a1       	ldd	r24, Y+32	; 0x20
    9464:	99 a1       	ldd	r25, Y+33	; 0x21
    9466:	fc 01       	movw	r30, r24
    9468:	20 83       	st	Z, r18
    946a:	80 e0       	ldi	r24, 0x00	; 0
    946c:	a2 96       	adiw	r28, 0x22	; 34
    946e:	0f b6       	in	r0, 0x3f	; 63
    9470:	f8 94       	cli
    9472:	de bf       	out	0x3e, r29	; 62
    9474:	0f be       	out	0x3f, r0	; 63
    9476:	cd bf       	out	0x3d, r28	; 61
    9478:	df 91       	pop	r29
    947a:	cf 91       	pop	r28
    947c:	1f 91       	pop	r17
    947e:	0f 91       	pop	r16
    9480:	ff 90       	pop	r15
    9482:	ef 90       	pop	r14
    9484:	cf 90       	pop	r12
    9486:	af 90       	pop	r10
    9488:	08 95       	ret

0000948a <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
    948a:	cf 93       	push	r28
    948c:	df 93       	push	r29
    948e:	00 d0       	rcall	.+0      	; 0x9490 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x6>
    9490:	00 d0       	rcall	.+0      	; 0x9492 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x8>
    9492:	cd b7       	in	r28, 0x3d	; 61
    9494:	de b7       	in	r29, 0x3e	; 62
    9496:	9e 83       	std	Y+6, r25	; 0x06
    9498:	8d 83       	std	Y+5, r24	; 0x05
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
    949a:	82 e0       	ldi	r24, 0x02	; 2
    949c:	8c 83       	std	Y+4, r24	; 0x04

	// Reset baud rates
	PCD_WriteRegister(TxModeReg, 0x00);
    949e:	8d 81       	ldd	r24, Y+5	; 0x05
    94a0:	9e 81       	ldd	r25, Y+6	; 0x06
    94a2:	40 e0       	ldi	r20, 0x00	; 0
    94a4:	64 e2       	ldi	r22, 0x24	; 36
    94a6:	ab d8       	rcall	.-3754   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	PCD_WriteRegister(RxModeReg, 0x00);
    94a8:	8d 81       	ldd	r24, Y+5	; 0x05
    94aa:	9e 81       	ldd	r25, Y+6	; 0x06
    94ac:	40 e0       	ldi	r20, 0x00	; 0
    94ae:	66 e2       	ldi	r22, 0x26	; 38
    94b0:	a6 d8       	rcall	.-3764   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
	// Reset ModWidthReg
	PCD_WriteRegister(ModWidthReg, 0x26);
    94b2:	8d 81       	ldd	r24, Y+5	; 0x05
    94b4:	9e 81       	ldd	r25, Y+6	; 0x06
    94b6:	46 e2       	ldi	r20, 0x26	; 38
    94b8:	68 e4       	ldi	r22, 0x48	; 72
    94ba:	a1 d8       	rcall	.-3774   	; 0x85fe <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

	MFRC522::StatusCode result = PICC_RequestA(bufferATQA, &bufferSize);
    94bc:	ae 01       	movw	r20, r28
    94be:	4c 5f       	subi	r20, 0xFC	; 252
    94c0:	5f 4f       	sbci	r21, 0xFF	; 255
    94c2:	9e 01       	movw	r18, r28
    94c4:	2e 5f       	subi	r18, 0xFE	; 254
    94c6:	3f 4f       	sbci	r19, 0xFF	; 255
    94c8:	8d 81       	ldd	r24, Y+5	; 0x05
    94ca:	9e 81       	ldd	r25, Y+6	; 0x06
    94cc:	b9 01       	movw	r22, r18
    94ce:	08 dd       	rcall	.-1520   	; 0x8ee0 <_ZN7MFRC52213PICC_RequestAEPhS0_>
    94d0:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK || result == STATUS_COLLISION);
    94d2:	89 81       	ldd	r24, Y+1	; 0x01
    94d4:	88 23       	and	r24, r24
    94d6:	19 f0       	breq	.+6      	; 0x94de <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    94d8:	89 81       	ldd	r24, Y+1	; 0x01
    94da:	82 30       	cpi	r24, 0x02	; 2
    94dc:	11 f4       	brne	.+4      	; 0x94e2 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x58>
    94de:	81 e0       	ldi	r24, 0x01	; 1
    94e0:	01 c0       	rjmp	.+2      	; 0x94e4 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x5a>
    94e2:	80 e0       	ldi	r24, 0x00	; 0
} // End PICC_IsNewCardPresent()
    94e4:	26 96       	adiw	r28, 0x06	; 6
    94e6:	0f b6       	in	r0, 0x3f	; 63
    94e8:	f8 94       	cli
    94ea:	de bf       	out	0x3e, r29	; 62
    94ec:	0f be       	out	0x3f, r0	; 63
    94ee:	cd bf       	out	0x3d, r28	; 61
    94f0:	df 91       	pop	r29
    94f2:	cf 91       	pop	r28
    94f4:	08 95       	ret

000094f6 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
    94f6:	cf 93       	push	r28
    94f8:	df 93       	push	r29
    94fa:	00 d0       	rcall	.+0      	; 0x94fc <_ZN7MFRC52219PICC_ReadCardSerialEv+0x6>
    94fc:	cd b7       	in	r28, 0x3d	; 61
    94fe:	de b7       	in	r29, 0x3e	; 62
    9500:	9b 83       	std	Y+3, r25	; 0x03
    9502:	8a 83       	std	Y+2, r24	; 0x02
	MFRC522::StatusCode result = PICC_Select(&uid);
    9504:	8a 81       	ldd	r24, Y+2	; 0x02
    9506:	9b 81       	ldd	r25, Y+3	; 0x03
    9508:	fc 01       	movw	r30, r24
    950a:	80 81       	ld	r24, Z
    950c:	91 81       	ldd	r25, Z+1	; 0x01
    950e:	fc 01       	movw	r30, r24
    9510:	20 81       	ld	r18, Z
    9512:	31 81       	ldd	r19, Z+1	; 0x01
    9514:	8a 81       	ldd	r24, Y+2	; 0x02
    9516:	9b 81       	ldd	r25, Y+3	; 0x03
    9518:	bc 01       	movw	r22, r24
    951a:	6e 5f       	subi	r22, 0xFE	; 254
    951c:	7f 4f       	sbci	r23, 0xFF	; 255
    951e:	8a 81       	ldd	r24, Y+2	; 0x02
    9520:	9b 81       	ldd	r25, Y+3	; 0x03
    9522:	40 e0       	ldi	r20, 0x00	; 0
    9524:	f9 01       	movw	r30, r18
    9526:	19 95       	eicall
    9528:	89 83       	std	Y+1, r24	; 0x01
	return (result == STATUS_OK);
    952a:	81 e0       	ldi	r24, 0x01	; 1
    952c:	99 81       	ldd	r25, Y+1	; 0x01
    952e:	99 23       	and	r25, r25
    9530:	09 f0       	breq	.+2      	; 0x9534 <_ZN7MFRC52219PICC_ReadCardSerialEv+0x3e>
    9532:	80 e0       	ldi	r24, 0x00	; 0
} // End 
    9534:	0f 90       	pop	r0
    9536:	0f 90       	pop	r0
    9538:	0f 90       	pop	r0
    953a:	df 91       	pop	r29
    953c:	cf 91       	pop	r28
    953e:	08 95       	ret

00009540 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    9540:	cf 93       	push	r28
    9542:	df 93       	push	r29
    9544:	00 d0       	rcall	.+0      	; 0x9546 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
    9546:	1f 92       	push	r1
    9548:	1f 92       	push	r1
    954a:	cd b7       	in	r28, 0x3d	; 61
    954c:	de b7       	in	r29, 0x3e	; 62
    954e:	89 83       	std	Y+1, r24	; 0x01
    9550:	7b 83       	std	Y+3, r23	; 0x03
    9552:	6a 83       	std	Y+2, r22	; 0x02
    9554:	5d 83       	std	Y+5, r21	; 0x05
    9556:	4c 83       	std	Y+4, r20	; 0x04
    9558:	89 81       	ldd	r24, Y+1	; 0x01
    955a:	88 2f       	mov	r24, r24
    955c:	90 e0       	ldi	r25, 0x00	; 0
    955e:	8a 50       	subi	r24, 0x0A	; 10
    9560:	9b 4f       	sbci	r25, 0xFB	; 251
    9562:	fc 01       	movw	r30, r24
    9564:	80 81       	ld	r24, Z
    9566:	88 1f       	adc	r24, r24
    9568:	88 27       	eor	r24, r24
    956a:	88 1f       	adc	r24, r24
    956c:	88 23       	and	r24, r24
    956e:	31 f0       	breq	.+12     	; 0x957c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
    9570:	8a 81       	ldd	r24, Y+2	; 0x02
    9572:	9b 81       	ldd	r25, Y+3	; 0x03
    9574:	fc 01       	movw	r30, r24
    9576:	11 82       	std	Z+1, r1	; 0x01
    9578:	10 82       	st	Z, r1
    957a:	72 c0       	rjmp	.+228    	; 0x9660 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    957c:	89 81       	ldd	r24, Y+1	; 0x01
    957e:	28 2f       	mov	r18, r24
    9580:	30 e0       	ldi	r19, 0x00	; 0
    9582:	c9 01       	movw	r24, r18
    9584:	88 0f       	add	r24, r24
    9586:	99 1f       	adc	r25, r25
    9588:	82 0f       	add	r24, r18
    958a:	93 1f       	adc	r25, r19
    958c:	88 0f       	add	r24, r24
    958e:	99 1f       	adc	r25, r25
    9590:	88 0f       	add	r24, r24
    9592:	99 1f       	adc	r25, r25
    9594:	9c 01       	movw	r18, r24
    9596:	89 81       	ldd	r24, Y+1	; 0x01
    9598:	88 2f       	mov	r24, r24
    959a:	90 e0       	ldi	r25, 0x00	; 0
    959c:	8a 50       	subi	r24, 0x0A	; 10
    959e:	9b 4f       	sbci	r25, 0xFB	; 251
    95a0:	fc 01       	movw	r30, r24
    95a2:	80 81       	ld	r24, Z
    95a4:	08 2e       	mov	r0, r24
    95a6:	00 0c       	add	r0, r0
    95a8:	99 0b       	sbc	r25, r25
    95aa:	28 0f       	add	r18, r24
    95ac:	39 1f       	adc	r19, r25
    95ae:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ServoCount>
    95b2:	88 2f       	mov	r24, r24
    95b4:	90 e0       	ldi	r25, 0x00	; 0
    95b6:	28 17       	cp	r18, r24
    95b8:	39 07       	cpc	r19, r25
    95ba:	4c f5       	brge	.+82     	; 0x960e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    95bc:	89 81       	ldd	r24, Y+1	; 0x01
    95be:	28 2f       	mov	r18, r24
    95c0:	30 e0       	ldi	r19, 0x00	; 0
    95c2:	c9 01       	movw	r24, r18
    95c4:	88 0f       	add	r24, r24
    95c6:	99 1f       	adc	r25, r25
    95c8:	82 0f       	add	r24, r18
    95ca:	93 1f       	adc	r25, r19
    95cc:	88 0f       	add	r24, r24
    95ce:	99 1f       	adc	r25, r25
    95d0:	88 0f       	add	r24, r24
    95d2:	99 1f       	adc	r25, r25
    95d4:	9c 01       	movw	r18, r24
    95d6:	89 81       	ldd	r24, Y+1	; 0x01
    95d8:	88 2f       	mov	r24, r24
    95da:	90 e0       	ldi	r25, 0x00	; 0
    95dc:	8a 50       	subi	r24, 0x0A	; 10
    95de:	9b 4f       	sbci	r25, 0xFB	; 251
    95e0:	fc 01       	movw	r30, r24
    95e2:	80 81       	ld	r24, Z
    95e4:	08 2e       	mov	r0, r24
    95e6:	00 0c       	add	r0, r0
    95e8:	99 0b       	sbc	r25, r25
    95ea:	28 0f       	add	r18, r24
    95ec:	39 1f       	adc	r19, r25
    95ee:	c9 01       	movw	r24, r18
    95f0:	88 0f       	add	r24, r24
    95f2:	99 1f       	adc	r25, r25
    95f4:	82 0f       	add	r24, r18
    95f6:	93 1f       	adc	r25, r19
    95f8:	8a 59       	subi	r24, 0x9A	; 154
    95fa:	9b 4f       	sbci	r25, 0xFB	; 251
    95fc:	fc 01       	movw	r30, r24
    95fe:	80 81       	ld	r24, Z
    9600:	86 fb       	bst	r24, 6
    9602:	88 27       	eor	r24, r24
    9604:	80 f9       	bld	r24, 0
    9606:	81 30       	cpi	r24, 0x01	; 1
    9608:	11 f4       	brne	.+4      	; 0x960e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xce>
    960a:	81 e0       	ldi	r24, 0x01	; 1
    960c:	01 c0       	rjmp	.+2      	; 0x9610 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd0>
    960e:	80 e0       	ldi	r24, 0x00	; 0
    9610:	88 23       	and	r24, r24
    9612:	31 f1       	breq	.+76     	; 0x9660 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x120>
    9614:	89 81       	ldd	r24, Y+1	; 0x01
    9616:	28 2f       	mov	r18, r24
    9618:	30 e0       	ldi	r19, 0x00	; 0
    961a:	c9 01       	movw	r24, r18
    961c:	88 0f       	add	r24, r24
    961e:	99 1f       	adc	r25, r25
    9620:	82 0f       	add	r24, r18
    9622:	93 1f       	adc	r25, r19
    9624:	88 0f       	add	r24, r24
    9626:	99 1f       	adc	r25, r25
    9628:	88 0f       	add	r24, r24
    962a:	99 1f       	adc	r25, r25
    962c:	9c 01       	movw	r18, r24
    962e:	89 81       	ldd	r24, Y+1	; 0x01
    9630:	88 2f       	mov	r24, r24
    9632:	90 e0       	ldi	r25, 0x00	; 0
    9634:	8a 50       	subi	r24, 0x0A	; 10
    9636:	9b 4f       	sbci	r25, 0xFB	; 251
    9638:	fc 01       	movw	r30, r24
    963a:	80 81       	ld	r24, Z
    963c:	08 2e       	mov	r0, r24
    963e:	00 0c       	add	r0, r0
    9640:	99 0b       	sbc	r25, r25
    9642:	28 0f       	add	r18, r24
    9644:	39 1f       	adc	r19, r25
    9646:	c9 01       	movw	r24, r18
    9648:	88 0f       	add	r24, r24
    964a:	99 1f       	adc	r25, r25
    964c:	82 0f       	add	r24, r18
    964e:	93 1f       	adc	r25, r19
    9650:	8a 59       	subi	r24, 0x9A	; 154
    9652:	9b 4f       	sbci	r25, 0xFB	; 251
    9654:	fc 01       	movw	r30, r24
    9656:	80 81       	ld	r24, Z
    9658:	8f 73       	andi	r24, 0x3F	; 63
    965a:	60 e0       	ldi	r22, 0x00	; 0
    965c:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    9660:	89 81       	ldd	r24, Y+1	; 0x01
    9662:	88 2f       	mov	r24, r24
    9664:	90 e0       	ldi	r25, 0x00	; 0
    9666:	9c 01       	movw	r18, r24
    9668:	2a 50       	subi	r18, 0x0A	; 10
    966a:	3b 4f       	sbci	r19, 0xFB	; 251
    966c:	f9 01       	movw	r30, r18
    966e:	20 81       	ld	r18, Z
    9670:	2f 5f       	subi	r18, 0xFF	; 255
    9672:	8a 50       	subi	r24, 0x0A	; 10
    9674:	9b 4f       	sbci	r25, 0xFB	; 251
    9676:	fc 01       	movw	r30, r24
    9678:	20 83       	st	Z, r18
    967a:	89 81       	ldd	r24, Y+1	; 0x01
    967c:	28 2f       	mov	r18, r24
    967e:	30 e0       	ldi	r19, 0x00	; 0
    9680:	c9 01       	movw	r24, r18
    9682:	88 0f       	add	r24, r24
    9684:	99 1f       	adc	r25, r25
    9686:	82 0f       	add	r24, r18
    9688:	93 1f       	adc	r25, r19
    968a:	88 0f       	add	r24, r24
    968c:	99 1f       	adc	r25, r25
    968e:	88 0f       	add	r24, r24
    9690:	99 1f       	adc	r25, r25
    9692:	9c 01       	movw	r18, r24
    9694:	89 81       	ldd	r24, Y+1	; 0x01
    9696:	88 2f       	mov	r24, r24
    9698:	90 e0       	ldi	r25, 0x00	; 0
    969a:	8a 50       	subi	r24, 0x0A	; 10
    969c:	9b 4f       	sbci	r25, 0xFB	; 251
    969e:	fc 01       	movw	r30, r24
    96a0:	80 81       	ld	r24, Z
    96a2:	08 2e       	mov	r0, r24
    96a4:	00 0c       	add	r0, r0
    96a6:	99 0b       	sbc	r25, r25
    96a8:	28 0f       	add	r18, r24
    96aa:	39 1f       	adc	r19, r25
    96ac:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ServoCount>
    96b0:	88 2f       	mov	r24, r24
    96b2:	90 e0       	ldi	r25, 0x00	; 0
    96b4:	28 17       	cp	r18, r24
    96b6:	39 07       	cpc	r19, r25
    96b8:	5c f4       	brge	.+22     	; 0x96d0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    96ba:	89 81       	ldd	r24, Y+1	; 0x01
    96bc:	88 2f       	mov	r24, r24
    96be:	90 e0       	ldi	r25, 0x00	; 0
    96c0:	8a 50       	subi	r24, 0x0A	; 10
    96c2:	9b 4f       	sbci	r25, 0xFB	; 251
    96c4:	fc 01       	movw	r30, r24
    96c6:	80 81       	ld	r24, Z
    96c8:	8c 30       	cpi	r24, 0x0C	; 12
    96ca:	14 f4       	brge	.+4      	; 0x96d0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x190>
    96cc:	81 e0       	ldi	r24, 0x01	; 1
    96ce:	01 c0       	rjmp	.+2      	; 0x96d2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x192>
    96d0:	80 e0       	ldi	r24, 0x00	; 0
    96d2:	88 23       	and	r24, r24
    96d4:	09 f4       	brne	.+2      	; 0x96d8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x198>
    96d6:	7f c0       	rjmp	.+254    	; 0x97d6 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x296>
    96d8:	8a 81       	ldd	r24, Y+2	; 0x02
    96da:	9b 81       	ldd	r25, Y+3	; 0x03
    96dc:	fc 01       	movw	r30, r24
    96de:	40 81       	ld	r20, Z
    96e0:	51 81       	ldd	r21, Z+1	; 0x01
    96e2:	89 81       	ldd	r24, Y+1	; 0x01
    96e4:	28 2f       	mov	r18, r24
    96e6:	30 e0       	ldi	r19, 0x00	; 0
    96e8:	c9 01       	movw	r24, r18
    96ea:	88 0f       	add	r24, r24
    96ec:	99 1f       	adc	r25, r25
    96ee:	82 0f       	add	r24, r18
    96f0:	93 1f       	adc	r25, r19
    96f2:	88 0f       	add	r24, r24
    96f4:	99 1f       	adc	r25, r25
    96f6:	88 0f       	add	r24, r24
    96f8:	99 1f       	adc	r25, r25
    96fa:	9c 01       	movw	r18, r24
    96fc:	89 81       	ldd	r24, Y+1	; 0x01
    96fe:	88 2f       	mov	r24, r24
    9700:	90 e0       	ldi	r25, 0x00	; 0
    9702:	8a 50       	subi	r24, 0x0A	; 10
    9704:	9b 4f       	sbci	r25, 0xFB	; 251
    9706:	fc 01       	movw	r30, r24
    9708:	80 81       	ld	r24, Z
    970a:	08 2e       	mov	r0, r24
    970c:	00 0c       	add	r0, r0
    970e:	99 0b       	sbc	r25, r25
    9710:	28 0f       	add	r18, r24
    9712:	39 1f       	adc	r19, r25
    9714:	c9 01       	movw	r24, r18
    9716:	88 0f       	add	r24, r24
    9718:	99 1f       	adc	r25, r25
    971a:	82 0f       	add	r24, r18
    971c:	93 1f       	adc	r25, r19
    971e:	89 59       	subi	r24, 0x99	; 153
    9720:	9b 4f       	sbci	r25, 0xFB	; 251
    9722:	fc 01       	movw	r30, r24
    9724:	80 81       	ld	r24, Z
    9726:	91 81       	ldd	r25, Z+1	; 0x01
    9728:	9a 01       	movw	r18, r20
    972a:	28 0f       	add	r18, r24
    972c:	39 1f       	adc	r19, r25
    972e:	8c 81       	ldd	r24, Y+4	; 0x04
    9730:	9d 81       	ldd	r25, Y+5	; 0x05
    9732:	fc 01       	movw	r30, r24
    9734:	31 83       	std	Z+1, r19	; 0x01
    9736:	20 83       	st	Z, r18
    9738:	89 81       	ldd	r24, Y+1	; 0x01
    973a:	28 2f       	mov	r18, r24
    973c:	30 e0       	ldi	r19, 0x00	; 0
    973e:	c9 01       	movw	r24, r18
    9740:	88 0f       	add	r24, r24
    9742:	99 1f       	adc	r25, r25
    9744:	82 0f       	add	r24, r18
    9746:	93 1f       	adc	r25, r19
    9748:	88 0f       	add	r24, r24
    974a:	99 1f       	adc	r25, r25
    974c:	88 0f       	add	r24, r24
    974e:	99 1f       	adc	r25, r25
    9750:	9c 01       	movw	r18, r24
    9752:	89 81       	ldd	r24, Y+1	; 0x01
    9754:	88 2f       	mov	r24, r24
    9756:	90 e0       	ldi	r25, 0x00	; 0
    9758:	8a 50       	subi	r24, 0x0A	; 10
    975a:	9b 4f       	sbci	r25, 0xFB	; 251
    975c:	fc 01       	movw	r30, r24
    975e:	80 81       	ld	r24, Z
    9760:	08 2e       	mov	r0, r24
    9762:	00 0c       	add	r0, r0
    9764:	99 0b       	sbc	r25, r25
    9766:	28 0f       	add	r18, r24
    9768:	39 1f       	adc	r19, r25
    976a:	c9 01       	movw	r24, r18
    976c:	88 0f       	add	r24, r24
    976e:	99 1f       	adc	r25, r25
    9770:	82 0f       	add	r24, r18
    9772:	93 1f       	adc	r25, r19
    9774:	8a 59       	subi	r24, 0x9A	; 154
    9776:	9b 4f       	sbci	r25, 0xFB	; 251
    9778:	fc 01       	movw	r30, r24
    977a:	80 81       	ld	r24, Z
    977c:	86 fb       	bst	r24, 6
    977e:	88 27       	eor	r24, r24
    9780:	80 f9       	bld	r24, 0
    9782:	88 23       	and	r24, r24
    9784:	09 f4       	brne	.+2      	; 0x9788 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x248>
    9786:	51 c0       	rjmp	.+162    	; 0x982a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    9788:	89 81       	ldd	r24, Y+1	; 0x01
    978a:	28 2f       	mov	r18, r24
    978c:	30 e0       	ldi	r19, 0x00	; 0
    978e:	c9 01       	movw	r24, r18
    9790:	88 0f       	add	r24, r24
    9792:	99 1f       	adc	r25, r25
    9794:	82 0f       	add	r24, r18
    9796:	93 1f       	adc	r25, r19
    9798:	88 0f       	add	r24, r24
    979a:	99 1f       	adc	r25, r25
    979c:	88 0f       	add	r24, r24
    979e:	99 1f       	adc	r25, r25
    97a0:	9c 01       	movw	r18, r24
    97a2:	89 81       	ldd	r24, Y+1	; 0x01
    97a4:	88 2f       	mov	r24, r24
    97a6:	90 e0       	ldi	r25, 0x00	; 0
    97a8:	8a 50       	subi	r24, 0x0A	; 10
    97aa:	9b 4f       	sbci	r25, 0xFB	; 251
    97ac:	fc 01       	movw	r30, r24
    97ae:	80 81       	ld	r24, Z
    97b0:	08 2e       	mov	r0, r24
    97b2:	00 0c       	add	r0, r0
    97b4:	99 0b       	sbc	r25, r25
    97b6:	28 0f       	add	r18, r24
    97b8:	39 1f       	adc	r19, r25
    97ba:	c9 01       	movw	r24, r18
    97bc:	88 0f       	add	r24, r24
    97be:	99 1f       	adc	r25, r25
    97c0:	82 0f       	add	r24, r18
    97c2:	93 1f       	adc	r25, r19
    97c4:	8a 59       	subi	r24, 0x9A	; 154
    97c6:	9b 4f       	sbci	r25, 0xFB	; 251
    97c8:	fc 01       	movw	r30, r24
    97ca:	80 81       	ld	r24, Z
    97cc:	8f 73       	andi	r24, 0x3F	; 63
    97ce:	61 e0       	ldi	r22, 0x01	; 1
    97d0:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    97d4:	2a c0       	rjmp	.+84     	; 0x982a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ea>
    97d6:	8a 81       	ldd	r24, Y+2	; 0x02
    97d8:	9b 81       	ldd	r25, Y+3	; 0x03
    97da:	fc 01       	movw	r30, r24
    97dc:	80 81       	ld	r24, Z
    97de:	91 81       	ldd	r25, Z+1	; 0x01
    97e0:	04 96       	adiw	r24, 0x04	; 4
    97e2:	21 e0       	ldi	r18, 0x01	; 1
    97e4:	80 34       	cpi	r24, 0x40	; 64
    97e6:	9c 49       	sbci	r25, 0x9C	; 156
    97e8:	08 f0       	brcs	.+2      	; 0x97ec <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2ac>
    97ea:	20 e0       	ldi	r18, 0x00	; 0
    97ec:	22 23       	and	r18, r18
    97ee:	41 f0       	breq	.+16     	; 0x9800 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2c0>
    97f0:	8c 81       	ldd	r24, Y+4	; 0x04
    97f2:	9d 81       	ldd	r25, Y+5	; 0x05
    97f4:	20 e4       	ldi	r18, 0x40	; 64
    97f6:	3c e9       	ldi	r19, 0x9C	; 156
    97f8:	fc 01       	movw	r30, r24
    97fa:	31 83       	std	Z+1, r19	; 0x01
    97fc:	20 83       	st	Z, r18
    97fe:	0d c0       	rjmp	.+26     	; 0x981a <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x2da>
    9800:	8a 81       	ldd	r24, Y+2	; 0x02
    9802:	9b 81       	ldd	r25, Y+3	; 0x03
    9804:	fc 01       	movw	r30, r24
    9806:	80 81       	ld	r24, Z
    9808:	91 81       	ldd	r25, Z+1	; 0x01
    980a:	9c 01       	movw	r18, r24
    980c:	2c 5f       	subi	r18, 0xFC	; 252
    980e:	3f 4f       	sbci	r19, 0xFF	; 255
    9810:	8c 81       	ldd	r24, Y+4	; 0x04
    9812:	9d 81       	ldd	r25, Y+5	; 0x05
    9814:	fc 01       	movw	r30, r24
    9816:	31 83       	std	Z+1, r19	; 0x01
    9818:	20 83       	st	Z, r18
    981a:	89 81       	ldd	r24, Y+1	; 0x01
    981c:	88 2f       	mov	r24, r24
    981e:	90 e0       	ldi	r25, 0x00	; 0
    9820:	8a 50       	subi	r24, 0x0A	; 10
    9822:	9b 4f       	sbci	r25, 0xFB	; 251
    9824:	2f ef       	ldi	r18, 0xFF	; 255
    9826:	fc 01       	movw	r30, r24
    9828:	20 83       	st	Z, r18
    982a:	00 00       	nop
    982c:	0f 90       	pop	r0
    982e:	0f 90       	pop	r0
    9830:	0f 90       	pop	r0
    9832:	0f 90       	pop	r0
    9834:	0f 90       	pop	r0
    9836:	df 91       	pop	r29
    9838:	cf 91       	pop	r28
    983a:	08 95       	ret

0000983c <__vector_17>:
    983c:	1f 92       	push	r1
    983e:	0f 92       	push	r0
    9840:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9844:	0f 92       	push	r0
    9846:	11 24       	eor	r1, r1
    9848:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    984c:	0f 92       	push	r0
    984e:	2f 93       	push	r18
    9850:	3f 93       	push	r19
    9852:	4f 93       	push	r20
    9854:	5f 93       	push	r21
    9856:	6f 93       	push	r22
    9858:	7f 93       	push	r23
    985a:	8f 93       	push	r24
    985c:	9f 93       	push	r25
    985e:	af 93       	push	r26
    9860:	bf 93       	push	r27
    9862:	ef 93       	push	r30
    9864:	ff 93       	push	r31
    9866:	cf 93       	push	r28
    9868:	df 93       	push	r29
    986a:	cd b7       	in	r28, 0x3d	; 61
    986c:	de b7       	in	r29, 0x3e	; 62
    986e:	48 e8       	ldi	r20, 0x88	; 136
    9870:	50 e0       	ldi	r21, 0x00	; 0
    9872:	64 e8       	ldi	r22, 0x84	; 132
    9874:	70 e0       	ldi	r23, 0x00	; 0
    9876:	81 e0       	ldi	r24, 0x01	; 1
    9878:	63 de       	rcall	.-826    	; 0x9540 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    987a:	00 00       	nop
    987c:	df 91       	pop	r29
    987e:	cf 91       	pop	r28
    9880:	ff 91       	pop	r31
    9882:	ef 91       	pop	r30
    9884:	bf 91       	pop	r27
    9886:	af 91       	pop	r26
    9888:	9f 91       	pop	r25
    988a:	8f 91       	pop	r24
    988c:	7f 91       	pop	r23
    988e:	6f 91       	pop	r22
    9890:	5f 91       	pop	r21
    9892:	4f 91       	pop	r20
    9894:	3f 91       	pop	r19
    9896:	2f 91       	pop	r18
    9898:	0f 90       	pop	r0
    989a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    989e:	0f 90       	pop	r0
    98a0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    98a4:	0f 90       	pop	r0
    98a6:	1f 90       	pop	r1
    98a8:	18 95       	reti

000098aa <__vector_32>:
    98aa:	1f 92       	push	r1
    98ac:	0f 92       	push	r0
    98ae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    98b2:	0f 92       	push	r0
    98b4:	11 24       	eor	r1, r1
    98b6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    98ba:	0f 92       	push	r0
    98bc:	2f 93       	push	r18
    98be:	3f 93       	push	r19
    98c0:	4f 93       	push	r20
    98c2:	5f 93       	push	r21
    98c4:	6f 93       	push	r22
    98c6:	7f 93       	push	r23
    98c8:	8f 93       	push	r24
    98ca:	9f 93       	push	r25
    98cc:	af 93       	push	r26
    98ce:	bf 93       	push	r27
    98d0:	ef 93       	push	r30
    98d2:	ff 93       	push	r31
    98d4:	cf 93       	push	r28
    98d6:	df 93       	push	r29
    98d8:	cd b7       	in	r28, 0x3d	; 61
    98da:	de b7       	in	r29, 0x3e	; 62
    98dc:	48 e9       	ldi	r20, 0x98	; 152
    98de:	50 e0       	ldi	r21, 0x00	; 0
    98e0:	64 e9       	ldi	r22, 0x94	; 148
    98e2:	70 e0       	ldi	r23, 0x00	; 0
    98e4:	82 e0       	ldi	r24, 0x02	; 2
    98e6:	2c de       	rcall	.-936    	; 0x9540 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    98e8:	00 00       	nop
    98ea:	df 91       	pop	r29
    98ec:	cf 91       	pop	r28
    98ee:	ff 91       	pop	r31
    98f0:	ef 91       	pop	r30
    98f2:	bf 91       	pop	r27
    98f4:	af 91       	pop	r26
    98f6:	9f 91       	pop	r25
    98f8:	8f 91       	pop	r24
    98fa:	7f 91       	pop	r23
    98fc:	6f 91       	pop	r22
    98fe:	5f 91       	pop	r21
    9900:	4f 91       	pop	r20
    9902:	3f 91       	pop	r19
    9904:	2f 91       	pop	r18
    9906:	0f 90       	pop	r0
    9908:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    990c:	0f 90       	pop	r0
    990e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9912:	0f 90       	pop	r0
    9914:	1f 90       	pop	r1
    9916:	18 95       	reti

00009918 <__vector_42>:
    9918:	1f 92       	push	r1
    991a:	0f 92       	push	r0
    991c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9920:	0f 92       	push	r0
    9922:	11 24       	eor	r1, r1
    9924:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9928:	0f 92       	push	r0
    992a:	2f 93       	push	r18
    992c:	3f 93       	push	r19
    992e:	4f 93       	push	r20
    9930:	5f 93       	push	r21
    9932:	6f 93       	push	r22
    9934:	7f 93       	push	r23
    9936:	8f 93       	push	r24
    9938:	9f 93       	push	r25
    993a:	af 93       	push	r26
    993c:	bf 93       	push	r27
    993e:	ef 93       	push	r30
    9940:	ff 93       	push	r31
    9942:	cf 93       	push	r28
    9944:	df 93       	push	r29
    9946:	cd b7       	in	r28, 0x3d	; 61
    9948:	de b7       	in	r29, 0x3e	; 62
    994a:	48 ea       	ldi	r20, 0xA8	; 168
    994c:	50 e0       	ldi	r21, 0x00	; 0
    994e:	64 ea       	ldi	r22, 0xA4	; 164
    9950:	70 e0       	ldi	r23, 0x00	; 0
    9952:	83 e0       	ldi	r24, 0x03	; 3
    9954:	f5 dd       	rcall	.-1046   	; 0x9540 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    9956:	00 00       	nop
    9958:	df 91       	pop	r29
    995a:	cf 91       	pop	r28
    995c:	ff 91       	pop	r31
    995e:	ef 91       	pop	r30
    9960:	bf 91       	pop	r27
    9962:	af 91       	pop	r26
    9964:	9f 91       	pop	r25
    9966:	8f 91       	pop	r24
    9968:	7f 91       	pop	r23
    996a:	6f 91       	pop	r22
    996c:	5f 91       	pop	r21
    996e:	4f 91       	pop	r20
    9970:	3f 91       	pop	r19
    9972:	2f 91       	pop	r18
    9974:	0f 90       	pop	r0
    9976:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    997a:	0f 90       	pop	r0
    997c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    9980:	0f 90       	pop	r0
    9982:	1f 90       	pop	r1
    9984:	18 95       	reti

00009986 <__vector_47>:
    9986:	1f 92       	push	r1
    9988:	0f 92       	push	r0
    998a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    998e:	0f 92       	push	r0
    9990:	11 24       	eor	r1, r1
    9992:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    9996:	0f 92       	push	r0
    9998:	2f 93       	push	r18
    999a:	3f 93       	push	r19
    999c:	4f 93       	push	r20
    999e:	5f 93       	push	r21
    99a0:	6f 93       	push	r22
    99a2:	7f 93       	push	r23
    99a4:	8f 93       	push	r24
    99a6:	9f 93       	push	r25
    99a8:	af 93       	push	r26
    99aa:	bf 93       	push	r27
    99ac:	ef 93       	push	r30
    99ae:	ff 93       	push	r31
    99b0:	cf 93       	push	r28
    99b2:	df 93       	push	r29
    99b4:	cd b7       	in	r28, 0x3d	; 61
    99b6:	de b7       	in	r29, 0x3e	; 62
    99b8:	48 e2       	ldi	r20, 0x28	; 40
    99ba:	51 e0       	ldi	r21, 0x01	; 1
    99bc:	64 e2       	ldi	r22, 0x24	; 36
    99be:	71 e0       	ldi	r23, 0x01	; 1
    99c0:	80 e0       	ldi	r24, 0x00	; 0
    99c2:	be dd       	rcall	.-1156   	; 0x9540 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
    99c4:	00 00       	nop
    99c6:	df 91       	pop	r29
    99c8:	cf 91       	pop	r28
    99ca:	ff 91       	pop	r31
    99cc:	ef 91       	pop	r30
    99ce:	bf 91       	pop	r27
    99d0:	af 91       	pop	r26
    99d2:	9f 91       	pop	r25
    99d4:	8f 91       	pop	r24
    99d6:	7f 91       	pop	r23
    99d8:	6f 91       	pop	r22
    99da:	5f 91       	pop	r21
    99dc:	4f 91       	pop	r20
    99de:	3f 91       	pop	r19
    99e0:	2f 91       	pop	r18
    99e2:	0f 90       	pop	r0
    99e4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    99e8:	0f 90       	pop	r0
    99ea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    99ee:	0f 90       	pop	r0
    99f0:	1f 90       	pop	r1
    99f2:	18 95       	reti

000099f4 <_ZL7initISR18timer16_Sequence_t>:
    99f4:	cf 93       	push	r28
    99f6:	df 93       	push	r29
    99f8:	1f 92       	push	r1
    99fa:	cd b7       	in	r28, 0x3d	; 61
    99fc:	de b7       	in	r29, 0x3e	; 62
    99fe:	89 83       	std	Y+1, r24	; 0x01
    9a00:	89 81       	ldd	r24, Y+1	; 0x01
    9a02:	81 30       	cpi	r24, 0x01	; 1
    9a04:	01 f5       	brne	.+64     	; 0x9a46 <_ZL7initISR18timer16_Sequence_t+0x52>
    9a06:	80 e8       	ldi	r24, 0x80	; 128
    9a08:	90 e0       	ldi	r25, 0x00	; 0
    9a0a:	fc 01       	movw	r30, r24
    9a0c:	10 82       	st	Z, r1
    9a0e:	81 e8       	ldi	r24, 0x81	; 129
    9a10:	90 e0       	ldi	r25, 0x00	; 0
    9a12:	22 e0       	ldi	r18, 0x02	; 2
    9a14:	fc 01       	movw	r30, r24
    9a16:	20 83       	st	Z, r18
    9a18:	84 e8       	ldi	r24, 0x84	; 132
    9a1a:	90 e0       	ldi	r25, 0x00	; 0
    9a1c:	fc 01       	movw	r30, r24
    9a1e:	11 82       	std	Z+1, r1	; 0x01
    9a20:	10 82       	st	Z, r1
    9a22:	86 e3       	ldi	r24, 0x36	; 54
    9a24:	90 e0       	ldi	r25, 0x00	; 0
    9a26:	26 e3       	ldi	r18, 0x36	; 54
    9a28:	30 e0       	ldi	r19, 0x00	; 0
    9a2a:	f9 01       	movw	r30, r18
    9a2c:	20 81       	ld	r18, Z
    9a2e:	22 60       	ori	r18, 0x02	; 2
    9a30:	fc 01       	movw	r30, r24
    9a32:	20 83       	st	Z, r18
    9a34:	8f e6       	ldi	r24, 0x6F	; 111
    9a36:	90 e0       	ldi	r25, 0x00	; 0
    9a38:	2f e6       	ldi	r18, 0x6F	; 111
    9a3a:	30 e0       	ldi	r19, 0x00	; 0
    9a3c:	f9 01       	movw	r30, r18
    9a3e:	20 81       	ld	r18, Z
    9a40:	22 60       	ori	r18, 0x02	; 2
    9a42:	fc 01       	movw	r30, r24
    9a44:	20 83       	st	Z, r18
    9a46:	89 81       	ldd	r24, Y+1	; 0x01
    9a48:	82 30       	cpi	r24, 0x02	; 2
    9a4a:	c1 f4       	brne	.+48     	; 0x9a7c <_ZL7initISR18timer16_Sequence_t+0x88>
    9a4c:	80 e9       	ldi	r24, 0x90	; 144
    9a4e:	90 e0       	ldi	r25, 0x00	; 0
    9a50:	fc 01       	movw	r30, r24
    9a52:	10 82       	st	Z, r1
    9a54:	81 e9       	ldi	r24, 0x91	; 145
    9a56:	90 e0       	ldi	r25, 0x00	; 0
    9a58:	22 e0       	ldi	r18, 0x02	; 2
    9a5a:	fc 01       	movw	r30, r24
    9a5c:	20 83       	st	Z, r18
    9a5e:	84 e9       	ldi	r24, 0x94	; 148
    9a60:	90 e0       	ldi	r25, 0x00	; 0
    9a62:	fc 01       	movw	r30, r24
    9a64:	11 82       	std	Z+1, r1	; 0x01
    9a66:	10 82       	st	Z, r1
    9a68:	88 e3       	ldi	r24, 0x38	; 56
    9a6a:	90 e0       	ldi	r25, 0x00	; 0
    9a6c:	22 e0       	ldi	r18, 0x02	; 2
    9a6e:	fc 01       	movw	r30, r24
    9a70:	20 83       	st	Z, r18
    9a72:	81 e7       	ldi	r24, 0x71	; 113
    9a74:	90 e0       	ldi	r25, 0x00	; 0
    9a76:	22 e0       	ldi	r18, 0x02	; 2
    9a78:	fc 01       	movw	r30, r24
    9a7a:	20 83       	st	Z, r18
    9a7c:	89 81       	ldd	r24, Y+1	; 0x01
    9a7e:	83 30       	cpi	r24, 0x03	; 3
    9a80:	c1 f4       	brne	.+48     	; 0x9ab2 <_ZL7initISR18timer16_Sequence_t+0xbe>
    9a82:	80 ea       	ldi	r24, 0xA0	; 160
    9a84:	90 e0       	ldi	r25, 0x00	; 0
    9a86:	fc 01       	movw	r30, r24
    9a88:	10 82       	st	Z, r1
    9a8a:	81 ea       	ldi	r24, 0xA1	; 161
    9a8c:	90 e0       	ldi	r25, 0x00	; 0
    9a8e:	22 e0       	ldi	r18, 0x02	; 2
    9a90:	fc 01       	movw	r30, r24
    9a92:	20 83       	st	Z, r18
    9a94:	84 ea       	ldi	r24, 0xA4	; 164
    9a96:	90 e0       	ldi	r25, 0x00	; 0
    9a98:	fc 01       	movw	r30, r24
    9a9a:	11 82       	std	Z+1, r1	; 0x01
    9a9c:	10 82       	st	Z, r1
    9a9e:	89 e3       	ldi	r24, 0x39	; 57
    9aa0:	90 e0       	ldi	r25, 0x00	; 0
    9aa2:	22 e0       	ldi	r18, 0x02	; 2
    9aa4:	fc 01       	movw	r30, r24
    9aa6:	20 83       	st	Z, r18
    9aa8:	82 e7       	ldi	r24, 0x72	; 114
    9aaa:	90 e0       	ldi	r25, 0x00	; 0
    9aac:	22 e0       	ldi	r18, 0x02	; 2
    9aae:	fc 01       	movw	r30, r24
    9ab0:	20 83       	st	Z, r18
    9ab2:	89 81       	ldd	r24, Y+1	; 0x01
    9ab4:	88 23       	and	r24, r24
    9ab6:	c1 f4       	brne	.+48     	; 0x9ae8 <_ZL7initISR18timer16_Sequence_t+0xf4>
    9ab8:	80 e2       	ldi	r24, 0x20	; 32
    9aba:	91 e0       	ldi	r25, 0x01	; 1
    9abc:	fc 01       	movw	r30, r24
    9abe:	10 82       	st	Z, r1
    9ac0:	81 e2       	ldi	r24, 0x21	; 33
    9ac2:	91 e0       	ldi	r25, 0x01	; 1
    9ac4:	22 e0       	ldi	r18, 0x02	; 2
    9ac6:	fc 01       	movw	r30, r24
    9ac8:	20 83       	st	Z, r18
    9aca:	84 e2       	ldi	r24, 0x24	; 36
    9acc:	91 e0       	ldi	r25, 0x01	; 1
    9ace:	fc 01       	movw	r30, r24
    9ad0:	11 82       	std	Z+1, r1	; 0x01
    9ad2:	10 82       	st	Z, r1
    9ad4:	8a e3       	ldi	r24, 0x3A	; 58
    9ad6:	90 e0       	ldi	r25, 0x00	; 0
    9ad8:	22 e0       	ldi	r18, 0x02	; 2
    9ada:	fc 01       	movw	r30, r24
    9adc:	20 83       	st	Z, r18
    9ade:	83 e7       	ldi	r24, 0x73	; 115
    9ae0:	90 e0       	ldi	r25, 0x00	; 0
    9ae2:	22 e0       	ldi	r18, 0x02	; 2
    9ae4:	fc 01       	movw	r30, r24
    9ae6:	20 83       	st	Z, r18
    9ae8:	00 00       	nop
    9aea:	0f 90       	pop	r0
    9aec:	df 91       	pop	r29
    9aee:	cf 91       	pop	r28
    9af0:	08 95       	ret

00009af2 <_ZL13isTimerActive18timer16_Sequence_t>:
    9af2:	cf 93       	push	r28
    9af4:	df 93       	push	r29
    9af6:	1f 92       	push	r1
    9af8:	1f 92       	push	r1
    9afa:	cd b7       	in	r28, 0x3d	; 61
    9afc:	de b7       	in	r29, 0x3e	; 62
    9afe:	8a 83       	std	Y+2, r24	; 0x02
    9b00:	19 82       	std	Y+1, r1	; 0x01
    9b02:	89 81       	ldd	r24, Y+1	; 0x01
    9b04:	8c 30       	cpi	r24, 0x0C	; 12
    9b06:	30 f5       	brcc	.+76     	; 0x9b54 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
    9b08:	8a 81       	ldd	r24, Y+2	; 0x02
    9b0a:	28 2f       	mov	r18, r24
    9b0c:	30 e0       	ldi	r19, 0x00	; 0
    9b0e:	c9 01       	movw	r24, r18
    9b10:	88 0f       	add	r24, r24
    9b12:	99 1f       	adc	r25, r25
    9b14:	82 0f       	add	r24, r18
    9b16:	93 1f       	adc	r25, r19
    9b18:	88 0f       	add	r24, r24
    9b1a:	99 1f       	adc	r25, r25
    9b1c:	88 0f       	add	r24, r24
    9b1e:	99 1f       	adc	r25, r25
    9b20:	9c 01       	movw	r18, r24
    9b22:	89 81       	ldd	r24, Y+1	; 0x01
    9b24:	88 2f       	mov	r24, r24
    9b26:	90 e0       	ldi	r25, 0x00	; 0
    9b28:	28 0f       	add	r18, r24
    9b2a:	39 1f       	adc	r19, r25
    9b2c:	c9 01       	movw	r24, r18
    9b2e:	88 0f       	add	r24, r24
    9b30:	99 1f       	adc	r25, r25
    9b32:	82 0f       	add	r24, r18
    9b34:	93 1f       	adc	r25, r19
    9b36:	8a 59       	subi	r24, 0x9A	; 154
    9b38:	9b 4f       	sbci	r25, 0xFB	; 251
    9b3a:	fc 01       	movw	r30, r24
    9b3c:	80 81       	ld	r24, Z
    9b3e:	86 fb       	bst	r24, 6
    9b40:	88 27       	eor	r24, r24
    9b42:	80 f9       	bld	r24, 0
    9b44:	81 30       	cpi	r24, 0x01	; 1
    9b46:	11 f4       	brne	.+4      	; 0x9b4c <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
    9b48:	81 e0       	ldi	r24, 0x01	; 1
    9b4a:	05 c0       	rjmp	.+10     	; 0x9b56 <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    9b4c:	89 81       	ldd	r24, Y+1	; 0x01
    9b4e:	8f 5f       	subi	r24, 0xFF	; 255
    9b50:	89 83       	std	Y+1, r24	; 0x01
    9b52:	d7 cf       	rjmp	.-82     	; 0x9b02 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
    9b54:	80 e0       	ldi	r24, 0x00	; 0
    9b56:	0f 90       	pop	r0
    9b58:	0f 90       	pop	r0
    9b5a:	df 91       	pop	r29
    9b5c:	cf 91       	pop	r28
    9b5e:	08 95       	ret

00009b60 <_ZN5ServoC1Ev>:
    9b60:	cf 93       	push	r28
    9b62:	df 93       	push	r29
    9b64:	1f 92       	push	r1
    9b66:	1f 92       	push	r1
    9b68:	cd b7       	in	r28, 0x3d	; 61
    9b6a:	de b7       	in	r29, 0x3e	; 62
    9b6c:	9a 83       	std	Y+2, r25	; 0x02
    9b6e:	89 83       	std	Y+1, r24	; 0x01
    9b70:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ServoCount>
    9b74:	80 33       	cpi	r24, 0x30	; 48
    9b76:	e8 f4       	brcc	.+58     	; 0x9bb2 <_ZN5ServoC1Ev+0x52>
    9b78:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <ServoCount>
    9b7c:	81 e0       	ldi	r24, 0x01	; 1
    9b7e:	82 0f       	add	r24, r18
    9b80:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <ServoCount>
    9b84:	89 81       	ldd	r24, Y+1	; 0x01
    9b86:	9a 81       	ldd	r25, Y+2	; 0x02
    9b88:	fc 01       	movw	r30, r24
    9b8a:	20 83       	st	Z, r18
    9b8c:	89 81       	ldd	r24, Y+1	; 0x01
    9b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    9b90:	fc 01       	movw	r30, r24
    9b92:	80 81       	ld	r24, Z
    9b94:	28 2f       	mov	r18, r24
    9b96:	30 e0       	ldi	r19, 0x00	; 0
    9b98:	c9 01       	movw	r24, r18
    9b9a:	88 0f       	add	r24, r24
    9b9c:	99 1f       	adc	r25, r25
    9b9e:	82 0f       	add	r24, r18
    9ba0:	93 1f       	adc	r25, r19
    9ba2:	89 59       	subi	r24, 0x99	; 153
    9ba4:	9b 4f       	sbci	r25, 0xFB	; 251
    9ba6:	28 eb       	ldi	r18, 0xB8	; 184
    9ba8:	3b e0       	ldi	r19, 0x0B	; 11
    9baa:	fc 01       	movw	r30, r24
    9bac:	31 83       	std	Z+1, r19	; 0x01
    9bae:	20 83       	st	Z, r18
    9bb0:	05 c0       	rjmp	.+10     	; 0x9bbc <_ZN5ServoC1Ev+0x5c>
    9bb2:	89 81       	ldd	r24, Y+1	; 0x01
    9bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    9bb6:	2f ef       	ldi	r18, 0xFF	; 255
    9bb8:	fc 01       	movw	r30, r24
    9bba:	20 83       	st	Z, r18
    9bbc:	00 00       	nop
    9bbe:	0f 90       	pop	r0
    9bc0:	0f 90       	pop	r0
    9bc2:	df 91       	pop	r29
    9bc4:	cf 91       	pop	r28
    9bc6:	08 95       	ret

00009bc8 <_ZN5Servo6attachEi>:
    9bc8:	cf 93       	push	r28
    9bca:	df 93       	push	r29
    9bcc:	00 d0       	rcall	.+0      	; 0x9bce <_ZN5Servo6attachEi+0x6>
    9bce:	1f 92       	push	r1
    9bd0:	cd b7       	in	r28, 0x3d	; 61
    9bd2:	de b7       	in	r29, 0x3e	; 62
    9bd4:	9a 83       	std	Y+2, r25	; 0x02
    9bd6:	89 83       	std	Y+1, r24	; 0x01
    9bd8:	7c 83       	std	Y+4, r23	; 0x04
    9bda:	6b 83       	std	Y+3, r22	; 0x03
    9bdc:	6b 81       	ldd	r22, Y+3	; 0x03
    9bde:	7c 81       	ldd	r23, Y+4	; 0x04
    9be0:	89 81       	ldd	r24, Y+1	; 0x01
    9be2:	9a 81       	ldd	r25, Y+2	; 0x02
    9be4:	20 e6       	ldi	r18, 0x60	; 96
    9be6:	39 e0       	ldi	r19, 0x09	; 9
    9be8:	40 e2       	ldi	r20, 0x20	; 32
    9bea:	52 e0       	ldi	r21, 0x02	; 2
    9bec:	07 d0       	rcall	.+14     	; 0x9bfc <_ZN5Servo6attachEiii>
    9bee:	0f 90       	pop	r0
    9bf0:	0f 90       	pop	r0
    9bf2:	0f 90       	pop	r0
    9bf4:	0f 90       	pop	r0
    9bf6:	df 91       	pop	r29
    9bf8:	cf 91       	pop	r28
    9bfa:	08 95       	ret

00009bfc <_ZN5Servo6attachEiii>:
    9bfc:	cf 93       	push	r28
    9bfe:	df 93       	push	r29
    9c00:	cd b7       	in	r28, 0x3d	; 61
    9c02:	de b7       	in	r29, 0x3e	; 62
    9c04:	29 97       	sbiw	r28, 0x09	; 9
    9c06:	0f b6       	in	r0, 0x3f	; 63
    9c08:	f8 94       	cli
    9c0a:	de bf       	out	0x3e, r29	; 62
    9c0c:	0f be       	out	0x3f, r0	; 63
    9c0e:	cd bf       	out	0x3d, r28	; 61
    9c10:	9b 83       	std	Y+3, r25	; 0x03
    9c12:	8a 83       	std	Y+2, r24	; 0x02
    9c14:	7d 83       	std	Y+5, r23	; 0x05
    9c16:	6c 83       	std	Y+4, r22	; 0x04
    9c18:	5f 83       	std	Y+7, r21	; 0x07
    9c1a:	4e 83       	std	Y+6, r20	; 0x06
    9c1c:	39 87       	std	Y+9, r19	; 0x09
    9c1e:	28 87       	std	Y+8, r18	; 0x08
    9c20:	8a 81       	ldd	r24, Y+2	; 0x02
    9c22:	9b 81       	ldd	r25, Y+3	; 0x03
    9c24:	fc 01       	movw	r30, r24
    9c26:	80 81       	ld	r24, Z
    9c28:	80 33       	cpi	r24, 0x30	; 48
    9c2a:	08 f0       	brcs	.+2      	; 0x9c2e <_ZN5Servo6attachEiii+0x32>
    9c2c:	6b c0       	rjmp	.+214    	; 0x9d04 <_ZN5Servo6attachEiii+0x108>
    9c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    9c30:	61 e0       	ldi	r22, 0x01	; 1
    9c32:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    9c36:	8a 81       	ldd	r24, Y+2	; 0x02
    9c38:	9b 81       	ldd	r25, Y+3	; 0x03
    9c3a:	fc 01       	movw	r30, r24
    9c3c:	80 81       	ld	r24, Z
    9c3e:	28 2f       	mov	r18, r24
    9c40:	30 e0       	ldi	r19, 0x00	; 0
    9c42:	8c 81       	ldd	r24, Y+4	; 0x04
    9c44:	48 2f       	mov	r20, r24
    9c46:	4f 73       	andi	r20, 0x3F	; 63
    9c48:	c9 01       	movw	r24, r18
    9c4a:	88 0f       	add	r24, r24
    9c4c:	99 1f       	adc	r25, r25
    9c4e:	82 0f       	add	r24, r18
    9c50:	93 1f       	adc	r25, r19
    9c52:	8a 59       	subi	r24, 0x9A	; 154
    9c54:	9b 4f       	sbci	r25, 0xFB	; 251
    9c56:	24 2f       	mov	r18, r20
    9c58:	2f 73       	andi	r18, 0x3F	; 63
    9c5a:	fc 01       	movw	r30, r24
    9c5c:	30 81       	ld	r19, Z
    9c5e:	30 7c       	andi	r19, 0xC0	; 192
    9c60:	23 2b       	or	r18, r19
    9c62:	fc 01       	movw	r30, r24
    9c64:	20 83       	st	Z, r18
    9c66:	20 e2       	ldi	r18, 0x20	; 32
    9c68:	32 e0       	ldi	r19, 0x02	; 2
    9c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    9c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    9c6e:	a9 01       	movw	r20, r18
    9c70:	48 1b       	sub	r20, r24
    9c72:	59 0b       	sbc	r21, r25
    9c74:	ca 01       	movw	r24, r20
    9c76:	99 23       	and	r25, r25
    9c78:	0c f4       	brge	.+2      	; 0x9c7c <_ZN5Servo6attachEiii+0x80>
    9c7a:	03 96       	adiw	r24, 0x03	; 3
    9c7c:	95 95       	asr	r25
    9c7e:	87 95       	ror	r24
    9c80:	95 95       	asr	r25
    9c82:	87 95       	ror	r24
    9c84:	28 2f       	mov	r18, r24
    9c86:	8a 81       	ldd	r24, Y+2	; 0x02
    9c88:	9b 81       	ldd	r25, Y+3	; 0x03
    9c8a:	fc 01       	movw	r30, r24
    9c8c:	21 83       	std	Z+1, r18	; 0x01
    9c8e:	20 e6       	ldi	r18, 0x60	; 96
    9c90:	39 e0       	ldi	r19, 0x09	; 9
    9c92:	88 85       	ldd	r24, Y+8	; 0x08
    9c94:	99 85       	ldd	r25, Y+9	; 0x09
    9c96:	a9 01       	movw	r20, r18
    9c98:	48 1b       	sub	r20, r24
    9c9a:	59 0b       	sbc	r21, r25
    9c9c:	ca 01       	movw	r24, r20
    9c9e:	99 23       	and	r25, r25
    9ca0:	0c f4       	brge	.+2      	; 0x9ca4 <_ZN5Servo6attachEiii+0xa8>
    9ca2:	03 96       	adiw	r24, 0x03	; 3
    9ca4:	95 95       	asr	r25
    9ca6:	87 95       	ror	r24
    9ca8:	95 95       	asr	r25
    9caa:	87 95       	ror	r24
    9cac:	28 2f       	mov	r18, r24
    9cae:	8a 81       	ldd	r24, Y+2	; 0x02
    9cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    9cb2:	fc 01       	movw	r30, r24
    9cb4:	22 83       	std	Z+2, r18	; 0x02
    9cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    9cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    9cba:	fc 01       	movw	r30, r24
    9cbc:	90 81       	ld	r25, Z
    9cbe:	8b ea       	ldi	r24, 0xAB	; 171
    9cc0:	98 9f       	mul	r25, r24
    9cc2:	81 2d       	mov	r24, r1
    9cc4:	11 24       	eor	r1, r1
    9cc6:	86 95       	lsr	r24
    9cc8:	86 95       	lsr	r24
    9cca:	86 95       	lsr	r24
    9ccc:	89 83       	std	Y+1, r24	; 0x01
    9cce:	89 81       	ldd	r24, Y+1	; 0x01
    9cd0:	10 df       	rcall	.-480    	; 0x9af2 <_ZL13isTimerActive18timer16_Sequence_t>
    9cd2:	98 2f       	mov	r25, r24
    9cd4:	81 e0       	ldi	r24, 0x01	; 1
    9cd6:	89 27       	eor	r24, r25
    9cd8:	88 23       	and	r24, r24
    9cda:	11 f0       	breq	.+4      	; 0x9ce0 <_ZN5Servo6attachEiii+0xe4>
    9cdc:	89 81       	ldd	r24, Y+1	; 0x01
    9cde:	8a de       	rcall	.-748    	; 0x99f4 <_ZL7initISR18timer16_Sequence_t>
    9ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    9ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    9ce4:	fc 01       	movw	r30, r24
    9ce6:	80 81       	ld	r24, Z
    9ce8:	28 2f       	mov	r18, r24
    9cea:	30 e0       	ldi	r19, 0x00	; 0
    9cec:	c9 01       	movw	r24, r18
    9cee:	88 0f       	add	r24, r24
    9cf0:	99 1f       	adc	r25, r25
    9cf2:	82 0f       	add	r24, r18
    9cf4:	93 1f       	adc	r25, r19
    9cf6:	8a 59       	subi	r24, 0x9A	; 154
    9cf8:	9b 4f       	sbci	r25, 0xFB	; 251
    9cfa:	fc 01       	movw	r30, r24
    9cfc:	20 81       	ld	r18, Z
    9cfe:	20 64       	ori	r18, 0x40	; 64
    9d00:	fc 01       	movw	r30, r24
    9d02:	20 83       	st	Z, r18
    9d04:	8a 81       	ldd	r24, Y+2	; 0x02
    9d06:	9b 81       	ldd	r25, Y+3	; 0x03
    9d08:	fc 01       	movw	r30, r24
    9d0a:	80 81       	ld	r24, Z
    9d0c:	29 96       	adiw	r28, 0x09	; 9
    9d0e:	0f b6       	in	r0, 0x3f	; 63
    9d10:	f8 94       	cli
    9d12:	de bf       	out	0x3e, r29	; 62
    9d14:	0f be       	out	0x3f, r0	; 63
    9d16:	cd bf       	out	0x3d, r28	; 61
    9d18:	df 91       	pop	r29
    9d1a:	cf 91       	pop	r28
    9d1c:	08 95       	ret

00009d1e <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
    9d1e:	6f 92       	push	r6
    9d20:	7f 92       	push	r7
    9d22:	8f 92       	push	r8
    9d24:	9f 92       	push	r9
    9d26:	af 92       	push	r10
    9d28:	bf 92       	push	r11
    9d2a:	cf 92       	push	r12
    9d2c:	df 92       	push	r13
    9d2e:	ef 92       	push	r14
    9d30:	ff 92       	push	r15
    9d32:	0f 93       	push	r16
    9d34:	1f 93       	push	r17
    9d36:	cf 93       	push	r28
    9d38:	df 93       	push	r29
    9d3a:	00 d0       	rcall	.+0      	; 0x9d3c <_ZN5Servo5writeEi+0x1e>
    9d3c:	1f 92       	push	r1
    9d3e:	cd b7       	in	r28, 0x3d	; 61
    9d40:	de b7       	in	r29, 0x3e	; 62
    9d42:	9a 83       	std	Y+2, r25	; 0x02
    9d44:	89 83       	std	Y+1, r24	; 0x01
    9d46:	7c 83       	std	Y+4, r23	; 0x04
    9d48:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
    9d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    9d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    9d4e:	80 32       	cpi	r24, 0x20	; 32
    9d50:	92 40       	sbci	r25, 0x02	; 2
    9d52:	0c f0       	brlt	.+2      	; 0x9d56 <_ZN5Servo5writeEi+0x38>
    9d54:	5c c0       	rjmp	.+184    	; 0x9e0e <_ZN5Servo5writeEi+0xf0>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    9d56:	8b 81       	ldd	r24, Y+3	; 0x03
    9d58:	9c 81       	ldd	r25, Y+4	; 0x04
    9d5a:	99 23       	and	r25, r25
    9d5c:	14 f4       	brge	.+4      	; 0x9d62 <_ZN5Servo5writeEi+0x44>
    9d5e:	1c 82       	std	Y+4, r1	; 0x04
    9d60:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
    9d62:	8b 81       	ldd	r24, Y+3	; 0x03
    9d64:	9c 81       	ldd	r25, Y+4	; 0x04
    9d66:	85 3b       	cpi	r24, 0xB5	; 181
    9d68:	91 05       	cpc	r25, r1
    9d6a:	24 f0       	brlt	.+8      	; 0x9d74 <_ZN5Servo5writeEi+0x56>
    9d6c:	84 eb       	ldi	r24, 0xB4	; 180
    9d6e:	90 e0       	ldi	r25, 0x00	; 0
    9d70:	9c 83       	std	Y+4, r25	; 0x04
    9d72:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    9d74:	89 81       	ldd	r24, Y+1	; 0x01
    9d76:	9a 81       	ldd	r25, Y+2	; 0x02
    9d78:	fc 01       	movw	r30, r24
    9d7a:	82 81       	ldd	r24, Z+2	; 0x02
    9d7c:	08 2e       	mov	r0, r24
    9d7e:	00 0c       	add	r0, r0
    9d80:	99 0b       	sbc	r25, r25
    9d82:	28 e5       	ldi	r18, 0x58	; 88
    9d84:	32 e0       	ldi	r19, 0x02	; 2
    9d86:	a9 01       	movw	r20, r18
    9d88:	48 1b       	sub	r20, r24
    9d8a:	59 0b       	sbc	r21, r25
    9d8c:	ca 01       	movw	r24, r20
    9d8e:	88 0f       	add	r24, r24
    9d90:	99 1f       	adc	r25, r25
    9d92:	88 0f       	add	r24, r24
    9d94:	99 1f       	adc	r25, r25
    9d96:	09 2e       	mov	r0, r25
    9d98:	00 0c       	add	r0, r0
    9d9a:	aa 0b       	sbc	r26, r26
    9d9c:	bb 0b       	sbc	r27, r27
    9d9e:	29 81       	ldd	r18, Y+1	; 0x01
    9da0:	3a 81       	ldd	r19, Y+2	; 0x02
    9da2:	f9 01       	movw	r30, r18
    9da4:	21 81       	ldd	r18, Z+1	; 0x01
    9da6:	02 2e       	mov	r0, r18
    9da8:	00 0c       	add	r0, r0
    9daa:	33 0b       	sbc	r19, r19
    9dac:	48 e8       	ldi	r20, 0x88	; 136
    9dae:	50 e0       	ldi	r21, 0x00	; 0
    9db0:	ba 01       	movw	r22, r20
    9db2:	62 1b       	sub	r22, r18
    9db4:	73 0b       	sbc	r23, r19
    9db6:	9b 01       	movw	r18, r22
    9db8:	22 0f       	add	r18, r18
    9dba:	33 1f       	adc	r19, r19
    9dbc:	22 0f       	add	r18, r18
    9dbe:	33 1f       	adc	r19, r19
    9dc0:	03 2e       	mov	r0, r19
    9dc2:	00 0c       	add	r0, r0
    9dc4:	44 0b       	sbc	r20, r20
    9dc6:	55 0b       	sbc	r21, r21
    9dc8:	6b 81       	ldd	r22, Y+3	; 0x03
    9dca:	7c 81       	ldd	r23, Y+4	; 0x04
    9dcc:	3b 01       	movw	r6, r22
    9dce:	77 0f       	add	r23, r23
    9dd0:	88 08       	sbc	r8, r8
    9dd2:	99 08       	sbc	r9, r9
    9dd4:	6b 2f       	mov	r22, r27
    9dd6:	6f 93       	push	r22
    9dd8:	6a 2f       	mov	r22, r26
    9dda:	6f 93       	push	r22
    9ddc:	69 2f       	mov	r22, r25
    9dde:	6f 93       	push	r22
    9de0:	8f 93       	push	r24
    9de2:	59 01       	movw	r10, r18
    9de4:	6a 01       	movw	r12, r20
    9de6:	14 eb       	ldi	r17, 0xB4	; 180
    9de8:	e1 2e       	mov	r14, r17
    9dea:	f1 2c       	mov	r15, r1
    9dec:	00 e0       	ldi	r16, 0x00	; 0
    9dee:	10 e0       	ldi	r17, 0x00	; 0
    9df0:	20 e0       	ldi	r18, 0x00	; 0
    9df2:	30 e0       	ldi	r19, 0x00	; 0
    9df4:	a9 01       	movw	r20, r18
    9df6:	c4 01       	movw	r24, r8
    9df8:	b3 01       	movw	r22, r6
    9dfa:	0e 94 57 61 	call	0xc2ae	; 0xc2ae <_Z3maplllll>
    9dfe:	0f 90       	pop	r0
    9e00:	0f 90       	pop	r0
    9e02:	0f 90       	pop	r0
    9e04:	0f 90       	pop	r0
    9e06:	dc 01       	movw	r26, r24
    9e08:	cb 01       	movw	r24, r22
    9e0a:	9c 83       	std	Y+4, r25	; 0x04
    9e0c:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
    9e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    9e10:	3c 81       	ldd	r19, Y+4	; 0x04
    9e12:	89 81       	ldd	r24, Y+1	; 0x01
    9e14:	9a 81       	ldd	r25, Y+2	; 0x02
    9e16:	b9 01       	movw	r22, r18
    9e18:	14 d0       	rcall	.+40     	; 0x9e42 <_ZN5Servo17writeMicrosecondsEi>
}
    9e1a:	00 00       	nop
    9e1c:	0f 90       	pop	r0
    9e1e:	0f 90       	pop	r0
    9e20:	0f 90       	pop	r0
    9e22:	0f 90       	pop	r0
    9e24:	df 91       	pop	r29
    9e26:	cf 91       	pop	r28
    9e28:	1f 91       	pop	r17
    9e2a:	0f 91       	pop	r16
    9e2c:	ff 90       	pop	r15
    9e2e:	ef 90       	pop	r14
    9e30:	df 90       	pop	r13
    9e32:	cf 90       	pop	r12
    9e34:	bf 90       	pop	r11
    9e36:	af 90       	pop	r10
    9e38:	9f 90       	pop	r9
    9e3a:	8f 90       	pop	r8
    9e3c:	7f 90       	pop	r7
    9e3e:	6f 90       	pop	r6
    9e40:	08 95       	ret

00009e42 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
    9e42:	cf 93       	push	r28
    9e44:	df 93       	push	r29
    9e46:	00 d0       	rcall	.+0      	; 0x9e48 <_ZN5Servo17writeMicrosecondsEi+0x6>
    9e48:	00 d0       	rcall	.+0      	; 0x9e4a <_ZN5Servo17writeMicrosecondsEi+0x8>
    9e4a:	cd b7       	in	r28, 0x3d	; 61
    9e4c:	de b7       	in	r29, 0x3e	; 62
    9e4e:	9c 83       	std	Y+4, r25	; 0x04
    9e50:	8b 83       	std	Y+3, r24	; 0x03
    9e52:	7e 83       	std	Y+6, r23	; 0x06
    9e54:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    9e56:	8b 81       	ldd	r24, Y+3	; 0x03
    9e58:	9c 81       	ldd	r25, Y+4	; 0x04
    9e5a:	fc 01       	movw	r30, r24
    9e5c:	80 81       	ld	r24, Z
    9e5e:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    9e60:	89 81       	ldd	r24, Y+1	; 0x01
    9e62:	80 33       	cpi	r24, 0x30	; 48
    9e64:	08 f0       	brcs	.+2      	; 0x9e68 <_ZN5Servo17writeMicrosecondsEi+0x26>
    9e66:	99 c0       	rjmp	.+306    	; 0x9f9a <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    9e68:	8b 81       	ldd	r24, Y+3	; 0x03
    9e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    9e6c:	fc 01       	movw	r30, r24
    9e6e:	81 81       	ldd	r24, Z+1	; 0x01
    9e70:	08 2e       	mov	r0, r24
    9e72:	00 0c       	add	r0, r0
    9e74:	99 0b       	sbc	r25, r25
    9e76:	28 e8       	ldi	r18, 0x88	; 136
    9e78:	30 e0       	ldi	r19, 0x00	; 0
    9e7a:	a9 01       	movw	r20, r18
    9e7c:	48 1b       	sub	r20, r24
    9e7e:	59 0b       	sbc	r21, r25
    9e80:	ca 01       	movw	r24, r20
    9e82:	9c 01       	movw	r18, r24
    9e84:	22 0f       	add	r18, r18
    9e86:	33 1f       	adc	r19, r19
    9e88:	22 0f       	add	r18, r18
    9e8a:	33 1f       	adc	r19, r19
    9e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    9e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    9e90:	82 17       	cp	r24, r18
    9e92:	93 07       	cpc	r25, r19
    9e94:	a4 f4       	brge	.+40     	; 0x9ebe <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
    9e96:	8b 81       	ldd	r24, Y+3	; 0x03
    9e98:	9c 81       	ldd	r25, Y+4	; 0x04
    9e9a:	fc 01       	movw	r30, r24
    9e9c:	81 81       	ldd	r24, Z+1	; 0x01
    9e9e:	08 2e       	mov	r0, r24
    9ea0:	00 0c       	add	r0, r0
    9ea2:	99 0b       	sbc	r25, r25
    9ea4:	28 e8       	ldi	r18, 0x88	; 136
    9ea6:	30 e0       	ldi	r19, 0x00	; 0
    9ea8:	a9 01       	movw	r20, r18
    9eaa:	48 1b       	sub	r20, r24
    9eac:	59 0b       	sbc	r21, r25
    9eae:	ca 01       	movw	r24, r20
    9eb0:	88 0f       	add	r24, r24
    9eb2:	99 1f       	adc	r25, r25
    9eb4:	88 0f       	add	r24, r24
    9eb6:	99 1f       	adc	r25, r25
    9eb8:	9e 83       	std	Y+6, r25	; 0x06
    9eba:	8d 83       	std	Y+5, r24	; 0x05
    9ebc:	2a c0       	rjmp	.+84     	; 0x9f12 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
    9ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    9ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    9ec2:	fc 01       	movw	r30, r24
    9ec4:	82 81       	ldd	r24, Z+2	; 0x02
    9ec6:	08 2e       	mov	r0, r24
    9ec8:	00 0c       	add	r0, r0
    9eca:	99 0b       	sbc	r25, r25
    9ecc:	28 e5       	ldi	r18, 0x58	; 88
    9ece:	32 e0       	ldi	r19, 0x02	; 2
    9ed0:	a9 01       	movw	r20, r18
    9ed2:	48 1b       	sub	r20, r24
    9ed4:	59 0b       	sbc	r21, r25
    9ed6:	ca 01       	movw	r24, r20
    9ed8:	9c 01       	movw	r18, r24
    9eda:	22 0f       	add	r18, r18
    9edc:	33 1f       	adc	r19, r19
    9ede:	22 0f       	add	r18, r18
    9ee0:	33 1f       	adc	r19, r19
    9ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    9ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    9ee6:	28 17       	cp	r18, r24
    9ee8:	39 07       	cpc	r19, r25
    9eea:	9c f4       	brge	.+38     	; 0x9f12 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
    9eec:	8b 81       	ldd	r24, Y+3	; 0x03
    9eee:	9c 81       	ldd	r25, Y+4	; 0x04
    9ef0:	fc 01       	movw	r30, r24
    9ef2:	82 81       	ldd	r24, Z+2	; 0x02
    9ef4:	08 2e       	mov	r0, r24
    9ef6:	00 0c       	add	r0, r0
    9ef8:	99 0b       	sbc	r25, r25
    9efa:	28 e5       	ldi	r18, 0x58	; 88
    9efc:	32 e0       	ldi	r19, 0x02	; 2
    9efe:	a9 01       	movw	r20, r18
    9f00:	48 1b       	sub	r20, r24
    9f02:	59 0b       	sbc	r21, r25
    9f04:	ca 01       	movw	r24, r20
    9f06:	88 0f       	add	r24, r24
    9f08:	99 1f       	adc	r25, r25
    9f0a:	88 0f       	add	r24, r24
    9f0c:	99 1f       	adc	r25, r25
    9f0e:	9e 83       	std	Y+6, r25	; 0x06
    9f10:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
    9f12:	8d 81       	ldd	r24, Y+5	; 0x05
    9f14:	9e 81       	ldd	r25, Y+6	; 0x06
    9f16:	02 97       	sbiw	r24, 0x02	; 2
    9f18:	9e 83       	std	Y+6, r25	; 0x06
    9f1a:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    9f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    9f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    9f20:	09 2e       	mov	r0, r25
    9f22:	00 0c       	add	r0, r0
    9f24:	aa 0b       	sbc	r26, r26
    9f26:	bb 0b       	sbc	r27, r27
    9f28:	88 0f       	add	r24, r24
    9f2a:	99 1f       	adc	r25, r25
    9f2c:	aa 1f       	adc	r26, r26
    9f2e:	bb 1f       	adc	r27, r27
    9f30:	88 0f       	add	r24, r24
    9f32:	99 1f       	adc	r25, r25
    9f34:	aa 1f       	adc	r26, r26
    9f36:	bb 1f       	adc	r27, r27
    9f38:	88 0f       	add	r24, r24
    9f3a:	99 1f       	adc	r25, r25
    9f3c:	aa 1f       	adc	r26, r26
    9f3e:	bb 1f       	adc	r27, r27
    9f40:	88 0f       	add	r24, r24
    9f42:	99 1f       	adc	r25, r25
    9f44:	aa 1f       	adc	r26, r26
    9f46:	bb 1f       	adc	r27, r27
    9f48:	bb 23       	and	r27, r27
    9f4a:	1c f4       	brge	.+6      	; 0x9f52 <_ZN5Servo17writeMicrosecondsEi+0x110>
    9f4c:	07 96       	adiw	r24, 0x07	; 7
    9f4e:	a1 1d       	adc	r26, r1
    9f50:	b1 1d       	adc	r27, r1
    9f52:	68 94       	set
    9f54:	12 f8       	bld	r1, 2
    9f56:	b5 95       	asr	r27
    9f58:	a7 95       	ror	r26
    9f5a:	97 95       	ror	r25
    9f5c:	87 95       	ror	r24
    9f5e:	16 94       	lsr	r1
    9f60:	d1 f7       	brne	.-12     	; 0x9f56 <_ZN5Servo17writeMicrosecondsEi+0x114>
    9f62:	9e 83       	std	Y+6, r25	; 0x06
    9f64:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
    9f66:	8f e5       	ldi	r24, 0x5F	; 95
    9f68:	90 e0       	ldi	r25, 0x00	; 0
    9f6a:	fc 01       	movw	r30, r24
    9f6c:	80 81       	ld	r24, Z
    9f6e:	8a 83       	std	Y+2, r24	; 0x02
    cli();
    9f70:	f8 94       	cli
    servos[channel].ticks = value;
    9f72:	89 81       	ldd	r24, Y+1	; 0x01
    9f74:	28 2f       	mov	r18, r24
    9f76:	30 e0       	ldi	r19, 0x00	; 0
    9f78:	4d 81       	ldd	r20, Y+5	; 0x05
    9f7a:	5e 81       	ldd	r21, Y+6	; 0x06
    9f7c:	c9 01       	movw	r24, r18
    9f7e:	88 0f       	add	r24, r24
    9f80:	99 1f       	adc	r25, r25
    9f82:	82 0f       	add	r24, r18
    9f84:	93 1f       	adc	r25, r19
    9f86:	89 59       	subi	r24, 0x99	; 153
    9f88:	9b 4f       	sbci	r25, 0xFB	; 251
    9f8a:	fc 01       	movw	r30, r24
    9f8c:	51 83       	std	Z+1, r21	; 0x01
    9f8e:	40 83       	st	Z, r20
    SREG = oldSREG;
    9f90:	8f e5       	ldi	r24, 0x5F	; 95
    9f92:	90 e0       	ldi	r25, 0x00	; 0
    9f94:	2a 81       	ldd	r18, Y+2	; 0x02
    9f96:	fc 01       	movw	r30, r24
    9f98:	20 83       	st	Z, r18
  }
}
    9f9a:	00 00       	nop
    9f9c:	26 96       	adiw	r28, 0x06	; 6
    9f9e:	0f b6       	in	r0, 0x3f	; 63
    9fa0:	f8 94       	cli
    9fa2:	de bf       	out	0x3e, r29	; 62
    9fa4:	0f be       	out	0x3f, r0	; 63
    9fa6:	cd bf       	out	0x3d, r28	; 61
    9fa8:	df 91       	pop	r29
    9faa:	cf 91       	pop	r28
    9fac:	08 95       	ret

00009fae <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    9fae:	cf 93       	push	r28
    9fb0:	df 93       	push	r29
    9fb2:	cd b7       	in	r28, 0x3d	; 61
    9fb4:	de b7       	in	r29, 0x3e	; 62
    9fb6:	2f 97       	sbiw	r28, 0x0f	; 15
    9fb8:	0f b6       	in	r0, 0x3f	; 63
    9fba:	f8 94       	cli
    9fbc:	de bf       	out	0x3e, r29	; 62
    9fbe:	0f be       	out	0x3f, r0	; 63
    9fc0:	cd bf       	out	0x3d, r28	; 61
  uint8_t sreg = SREG;
    9fc2:	8f e5       	ldi	r24, 0x5F	; 95
    9fc4:	90 e0       	ldi	r25, 0x00	; 0
    9fc6:	fc 01       	movw	r30, r24
    9fc8:	80 81       	ld	r24, Z
    9fca:	89 83       	std	Y+1, r24	; 0x01
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    9fcc:	f8 94       	cli
  if (!initialized) {
    9fce:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <_ZN8SPIClass11initializedE>
    9fd2:	88 23       	and	r24, r24
    9fd4:	09 f0       	breq	.+2      	; 0x9fd8 <_ZN8SPIClass5beginEv+0x2a>
    9fd6:	5b c0       	rjmp	.+182    	; 0xa08e <_ZN8SPIClass5beginEv+0xe0>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    9fd8:	84 e2       	ldi	r24, 0x24	; 36
    9fda:	9c e0       	ldi	r25, 0x0C	; 12
    9fdc:	9b 83       	std	Y+3, r25	; 0x03
    9fde:	8a 83       	std	Y+2, r24	; 0x02
    9fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    9fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    9fe4:	fc 01       	movw	r30, r24
    9fe6:	84 91       	lpm	r24, Z
    9fe8:	8c 83       	std	Y+4, r24	; 0x04
    9fea:	8c 81       	ldd	r24, Y+4	; 0x04
    9fec:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t bit = digitalPinToBitMask(SS);
    9fee:	8e ed       	ldi	r24, 0xDE	; 222
    9ff0:	9b e0       	ldi	r25, 0x0B	; 11
    9ff2:	9f 83       	std	Y+7, r25	; 0x07
    9ff4:	8e 83       	std	Y+6, r24	; 0x06
    9ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    9ff8:	9f 81       	ldd	r25, Y+7	; 0x07
    9ffa:	fc 01       	movw	r30, r24
    9ffc:	84 91       	lpm	r24, Z
    9ffe:	88 87       	std	Y+8, r24	; 0x08
    a000:	88 85       	ldd	r24, Y+8	; 0x08
    a002:	89 87       	std	Y+9, r24	; 0x09
    volatile uint8_t *reg = portModeRegister(port);
    a004:	8d 81       	ldd	r24, Y+5	; 0x05
    a006:	88 2f       	mov	r24, r24
    a008:	90 e0       	ldi	r25, 0x00	; 0
    a00a:	88 0f       	add	r24, r24
    a00c:	99 1f       	adc	r25, r25
    a00e:	87 59       	subi	r24, 0x97	; 151
    a010:	93 4f       	sbci	r25, 0xF3	; 243
    a012:	9b 87       	std	Y+11, r25	; 0x0b
    a014:	8a 87       	std	Y+10, r24	; 0x0a
    a016:	8a 85       	ldd	r24, Y+10	; 0x0a
    a018:	9b 85       	ldd	r25, Y+11	; 0x0b
    a01a:	fc 01       	movw	r30, r24
    a01c:	25 91       	lpm	r18, Z+
    a01e:	34 91       	lpm	r19, Z
    a020:	cf 01       	movw	r24, r30
    a022:	3d 87       	std	Y+13, r19	; 0x0d
    a024:	2c 87       	std	Y+12, r18	; 0x0c
    a026:	9b 87       	std	Y+11, r25	; 0x0b
    a028:	8a 87       	std	Y+10, r24	; 0x0a
    a02a:	8c 85       	ldd	r24, Y+12	; 0x0c
    a02c:	9d 85       	ldd	r25, Y+13	; 0x0d
    a02e:	9f 87       	std	Y+15, r25	; 0x0f
    a030:	8e 87       	std	Y+14, r24	; 0x0e

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    a032:	8e 85       	ldd	r24, Y+14	; 0x0e
    a034:	9f 85       	ldd	r25, Y+15	; 0x0f
    a036:	fc 01       	movw	r30, r24
    a038:	90 81       	ld	r25, Z
    a03a:	89 85       	ldd	r24, Y+9	; 0x09
    a03c:	98 23       	and	r25, r24
    a03e:	81 e0       	ldi	r24, 0x01	; 1
    a040:	99 23       	and	r25, r25
    a042:	09 f0       	breq	.+2      	; 0xa046 <_ZN8SPIClass5beginEv+0x98>
    a044:	80 e0       	ldi	r24, 0x00	; 0
    a046:	88 23       	and	r24, r24
    a048:	21 f0       	breq	.+8      	; 0xa052 <_ZN8SPIClass5beginEv+0xa4>
      digitalWrite(SS, HIGH);
    a04a:	61 e0       	ldi	r22, 0x01	; 1
    a04c:	85 e3       	ldi	r24, 0x35	; 53
    a04e:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    a052:	61 e0       	ldi	r22, 0x01	; 1
    a054:	85 e3       	ldi	r24, 0x35	; 53
    a056:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    a05a:	8c e4       	ldi	r24, 0x4C	; 76
    a05c:	90 e0       	ldi	r25, 0x00	; 0
    a05e:	2c e4       	ldi	r18, 0x4C	; 76
    a060:	30 e0       	ldi	r19, 0x00	; 0
    a062:	f9 01       	movw	r30, r18
    a064:	20 81       	ld	r18, Z
    a066:	20 61       	ori	r18, 0x10	; 16
    a068:	fc 01       	movw	r30, r24
    a06a:	20 83       	st	Z, r18
    SPCR |= _BV(SPE);
    a06c:	8c e4       	ldi	r24, 0x4C	; 76
    a06e:	90 e0       	ldi	r25, 0x00	; 0
    a070:	2c e4       	ldi	r18, 0x4C	; 76
    a072:	30 e0       	ldi	r19, 0x00	; 0
    a074:	f9 01       	movw	r30, r18
    a076:	20 81       	ld	r18, Z
    a078:	20 64       	ori	r18, 0x40	; 64
    a07a:	fc 01       	movw	r30, r24
    a07c:	20 83       	st	Z, r18
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    a07e:	61 e0       	ldi	r22, 0x01	; 1
    a080:	84 e3       	ldi	r24, 0x34	; 52
    a082:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
    pinMode(MOSI, OUTPUT);
    a086:	61 e0       	ldi	r22, 0x01	; 1
    a088:	83 e3       	ldi	r24, 0x33	; 51
    a08a:	0e 94 93 60 	call	0xc126	; 0xc126 <pinMode>
  }
  initialized++; // reference count
    a08e:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <_ZN8SPIClass11initializedE>
    a092:	8f 5f       	subi	r24, 0xFF	; 255
    a094:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <_ZN8SPIClass11initializedE>
  SREG = sreg;
    a098:	8f e5       	ldi	r24, 0x5F	; 95
    a09a:	90 e0       	ldi	r25, 0x00	; 0
    a09c:	29 81       	ldd	r18, Y+1	; 0x01
    a09e:	fc 01       	movw	r30, r24
    a0a0:	20 83       	st	Z, r18
}
    a0a2:	00 00       	nop
    a0a4:	2f 96       	adiw	r28, 0x0f	; 15
    a0a6:	0f b6       	in	r0, 0x3f	; 63
    a0a8:	f8 94       	cli
    a0aa:	de bf       	out	0x3e, r29	; 62
    a0ac:	0f be       	out	0x3f, r0	; 63
    a0ae:	cd bf       	out	0x3d, r28	; 61
    a0b0:	df 91       	pop	r29
    a0b2:	cf 91       	pop	r28
    a0b4:	08 95       	ret

0000a0b6 <__vector_20>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    a0b6:	1f 92       	push	r1
    a0b8:	0f 92       	push	r0
    a0ba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a0be:	0f 92       	push	r0
    a0c0:	11 24       	eor	r1, r1
    a0c2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a0c6:	0f 92       	push	r0
    a0c8:	2f 93       	push	r18
    a0ca:	3f 93       	push	r19
    a0cc:	4f 93       	push	r20
    a0ce:	5f 93       	push	r21
    a0d0:	6f 93       	push	r22
    a0d2:	7f 93       	push	r23
    a0d4:	8f 93       	push	r24
    a0d6:	9f 93       	push	r25
    a0d8:	af 93       	push	r26
    a0da:	bf 93       	push	r27
    a0dc:	ef 93       	push	r30
    a0de:	ff 93       	push	r31
    a0e0:	cf 93       	push	r28
    a0e2:	df 93       	push	r29
    a0e4:	cd b7       	in	r28, 0x3d	; 61
    a0e6:	de b7       	in	r29, 0x3e	; 62
  Timer1.isrCallback();
    a0e8:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <_ZN8TimerOne11isrCallbackE>
    a0ec:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <_ZN8TimerOne11isrCallbackE+0x1>
    a0f0:	fc 01       	movw	r30, r24
    a0f2:	19 95       	eicall
}
    a0f4:	00 00       	nop
    a0f6:	df 91       	pop	r29
    a0f8:	cf 91       	pop	r28
    a0fa:	ff 91       	pop	r31
    a0fc:	ef 91       	pop	r30
    a0fe:	bf 91       	pop	r27
    a100:	af 91       	pop	r26
    a102:	9f 91       	pop	r25
    a104:	8f 91       	pop	r24
    a106:	7f 91       	pop	r23
    a108:	6f 91       	pop	r22
    a10a:	5f 91       	pop	r21
    a10c:	4f 91       	pop	r20
    a10e:	3f 91       	pop	r19
    a110:	2f 91       	pop	r18
    a112:	0f 90       	pop	r0
    a114:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a118:	0f 90       	pop	r0
    a11a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a11e:	0f 90       	pop	r0
    a120:	1f 90       	pop	r1
    a122:	18 95       	reti

0000a124 <__vector_35>:
void (*TimerThree::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER3_OVF_vect)
{
    a124:	1f 92       	push	r1
    a126:	0f 92       	push	r0
    a128:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a12c:	0f 92       	push	r0
    a12e:	11 24       	eor	r1, r1
    a130:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a134:	0f 92       	push	r0
    a136:	2f 93       	push	r18
    a138:	3f 93       	push	r19
    a13a:	4f 93       	push	r20
    a13c:	5f 93       	push	r21
    a13e:	6f 93       	push	r22
    a140:	7f 93       	push	r23
    a142:	8f 93       	push	r24
    a144:	9f 93       	push	r25
    a146:	af 93       	push	r26
    a148:	bf 93       	push	r27
    a14a:	ef 93       	push	r30
    a14c:	ff 93       	push	r31
    a14e:	cf 93       	push	r28
    a150:	df 93       	push	r29
    a152:	cd b7       	in	r28, 0x3d	; 61
    a154:	de b7       	in	r29, 0x3e	; 62
  Timer3.isrCallback();
    a156:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <_ZN10TimerThree11isrCallbackE>
    a15a:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <_ZN10TimerThree11isrCallbackE+0x1>
    a15e:	fc 01       	movw	r30, r24
    a160:	19 95       	eicall
}
    a162:	00 00       	nop
    a164:	df 91       	pop	r29
    a166:	cf 91       	pop	r28
    a168:	ff 91       	pop	r31
    a16a:	ef 91       	pop	r30
    a16c:	bf 91       	pop	r27
    a16e:	af 91       	pop	r26
    a170:	9f 91       	pop	r25
    a172:	8f 91       	pop	r24
    a174:	7f 91       	pop	r23
    a176:	6f 91       	pop	r22
    a178:	5f 91       	pop	r21
    a17a:	4f 91       	pop	r20
    a17c:	3f 91       	pop	r19
    a17e:	2f 91       	pop	r18
    a180:	0f 90       	pop	r0
    a182:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
    a186:	0f 90       	pop	r0
    a188:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
    a18c:	0f 90       	pop	r0
    a18e:	1f 90       	pop	r1
    a190:	18 95       	reti

0000a192 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    a192:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <twi_state>
    a196:	81 e0       	ldi	r24, 0x01	; 1
    a198:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <twi_sendStop>
    a19c:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <twi_inRepStart>
    a1a0:	61 e0       	ldi	r22, 0x01	; 1
    a1a2:	84 e1       	ldi	r24, 0x14	; 20
    a1a4:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    a1a8:	61 e0       	ldi	r22, 0x01	; 1
    a1aa:	85 e1       	ldi	r24, 0x15	; 21
    a1ac:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    a1b0:	e9 eb       	ldi	r30, 0xB9	; 185
    a1b2:	f0 e0       	ldi	r31, 0x00	; 0
    a1b4:	80 81       	ld	r24, Z
    a1b6:	8e 7f       	andi	r24, 0xFE	; 254
    a1b8:	80 83       	st	Z, r24
    a1ba:	80 81       	ld	r24, Z
    a1bc:	8d 7f       	andi	r24, 0xFD	; 253
    a1be:	80 83       	st	Z, r24
    a1c0:	88 e4       	ldi	r24, 0x48	; 72
    a1c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a1c6:	85 e4       	ldi	r24, 0x45	; 69
    a1c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a1cc:	08 95       	ret

0000a1ce <twi_disable>:
    a1ce:	ec eb       	ldi	r30, 0xBC	; 188
    a1d0:	f0 e0       	ldi	r31, 0x00	; 0
    a1d2:	80 81       	ld	r24, Z
    a1d4:	8a 7b       	andi	r24, 0xBA	; 186
    a1d6:	80 83       	st	Z, r24
    a1d8:	60 e0       	ldi	r22, 0x00	; 0
    a1da:	84 e1       	ldi	r24, 0x14	; 20
    a1dc:	0e 94 cf 60 	call	0xc19e	; 0xc19e <digitalWrite>
    a1e0:	60 e0       	ldi	r22, 0x00	; 0
    a1e2:	85 e1       	ldi	r24, 0x15	; 21
    a1e4:	0c 94 cf 60 	jmp	0xc19e	; 0xc19e <digitalWrite>

0000a1e8 <twi_setFrequency>:
    a1e8:	9b 01       	movw	r18, r22
    a1ea:	ac 01       	movw	r20, r24
    a1ec:	60 e0       	ldi	r22, 0x00	; 0
    a1ee:	74 e2       	ldi	r23, 0x24	; 36
    a1f0:	84 ef       	ldi	r24, 0xF4	; 244
    a1f2:	90 e0       	ldi	r25, 0x00	; 0
    a1f4:	0e 94 16 63 	call	0xc62c	; 0xc62c <__udivmodsi4>
    a1f8:	da 01       	movw	r26, r20
    a1fa:	c9 01       	movw	r24, r18
    a1fc:	40 97       	sbiw	r24, 0x10	; 16
    a1fe:	a1 09       	sbc	r26, r1
    a200:	b1 09       	sbc	r27, r1
    a202:	b6 95       	lsr	r27
    a204:	a7 95       	ror	r26
    a206:	97 95       	ror	r25
    a208:	87 95       	ror	r24
    a20a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a20e:	08 95       	ret

0000a210 <twi_transmit>:
    a210:	40 91 29 05 	lds	r20, 0x0529	; 0x800529 <twi_txBufferLength>
    a214:	26 2f       	mov	r18, r22
    a216:	30 e0       	ldi	r19, 0x00	; 0
    a218:	24 0f       	add	r18, r20
    a21a:	31 1d       	adc	r19, r1
    a21c:	21 32       	cpi	r18, 0x21	; 33
    a21e:	31 05       	cpc	r19, r1
    a220:	dc f4       	brge	.+54     	; 0xa258 <twi_transmit+0x48>
    a222:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <twi_state>
    a226:	24 30       	cpi	r18, 0x04	; 4
    a228:	c9 f4       	brne	.+50     	; 0xa25c <twi_transmit+0x4c>
    a22a:	fc 01       	movw	r30, r24
    a22c:	80 e0       	ldi	r24, 0x00	; 0
    a22e:	90 e0       	ldi	r25, 0x00	; 0
    a230:	86 17       	cp	r24, r22
    a232:	58 f4       	brcc	.+22     	; 0xa24a <twi_transmit+0x3a>
    a234:	30 91 29 05 	lds	r19, 0x0529	; 0x800529 <twi_txBufferLength>
    a238:	21 91       	ld	r18, Z+
    a23a:	dc 01       	movw	r26, r24
    a23c:	a5 5d       	subi	r26, 0xD5	; 213
    a23e:	ba 4f       	sbci	r27, 0xFA	; 250
    a240:	a3 0f       	add	r26, r19
    a242:	b1 1d       	adc	r27, r1
    a244:	2c 93       	st	X, r18
    a246:	01 96       	adiw	r24, 0x01	; 1
    a248:	f3 cf       	rjmp	.-26     	; 0xa230 <twi_transmit+0x20>
    a24a:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <twi_txBufferLength>
    a24e:	68 0f       	add	r22, r24
    a250:	60 93 29 05 	sts	0x0529, r22	; 0x800529 <twi_txBufferLength>
    a254:	80 e0       	ldi	r24, 0x00	; 0
    a256:	08 95       	ret
    a258:	81 e0       	ldi	r24, 0x01	; 1
    a25a:	08 95       	ret
    a25c:	82 e0       	ldi	r24, 0x02	; 2
    a25e:	08 95       	ret

0000a260 <twi_attachSlaveRxEvent>:
    a260:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <twi_onSlaveReceive+0x1>
    a264:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_onSlaveReceive>
    a268:	08 95       	ret

0000a26a <twi_attachSlaveTxEvent>:
    a26a:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <twi_onSlaveTransmit+0x1>
    a26e:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <twi_onSlaveTransmit>
    a272:	08 95       	ret

0000a274 <twi_releaseBus>:
    a274:	85 ec       	ldi	r24, 0xC5	; 197
    a276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a27a:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <twi_state>
    a27e:	08 95       	ret

0000a280 <twi_handleTimeout>:
    a280:	cf 93       	push	r28
    a282:	df 93       	push	r29
    a284:	91 e0       	ldi	r25, 0x01	; 1
    a286:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <twi_timed_out_flag>
    a28a:	88 23       	and	r24, r24
    a28c:	51 f0       	breq	.+20     	; 0xa2a2 <twi_handleTimeout+0x22>
    a28e:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a292:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    a296:	9b df       	rcall	.-202    	; 0xa1ce <twi_disable>
    a298:	7c df       	rcall	.-264    	; 0xa192 <twi_init>
    a29a:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    a29e:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    a2a2:	df 91       	pop	r29
    a2a4:	cf 91       	pop	r28
    a2a6:	08 95       	ret

0000a2a8 <twi_readFrom>:
    a2a8:	4f 92       	push	r4
    a2aa:	5f 92       	push	r5
    a2ac:	6f 92       	push	r6
    a2ae:	7f 92       	push	r7
    a2b0:	8f 92       	push	r8
    a2b2:	9f 92       	push	r9
    a2b4:	af 92       	push	r10
    a2b6:	bf 92       	push	r11
    a2b8:	cf 92       	push	r12
    a2ba:	df 92       	push	r13
    a2bc:	ef 92       	push	r14
    a2be:	ff 92       	push	r15
    a2c0:	0f 93       	push	r16
    a2c2:	1f 93       	push	r17
    a2c4:	cf 93       	push	r28
    a2c6:	df 93       	push	r29
    a2c8:	f8 2e       	mov	r15, r24
    a2ca:	16 2f       	mov	r17, r22
    a2cc:	07 2f       	mov	r16, r23
    a2ce:	c4 2f       	mov	r28, r20
    a2d0:	e2 2e       	mov	r14, r18
    a2d2:	41 32       	cpi	r20, 0x21	; 33
    a2d4:	08 f0       	brcs	.+2      	; 0xa2d8 <twi_readFrom+0x30>
    a2d6:	bc c0       	rjmp	.+376    	; 0xa450 <twi_readFrom+0x1a8>
    a2d8:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a2dc:	4b 01       	movw	r8, r22
    a2de:	5c 01       	movw	r10, r24
    a2e0:	d0 91 7a 05 	lds	r29, 0x057A	; 0x80057a <twi_state>
    a2e4:	dd 23       	and	r29, r29
    a2e6:	29 f1       	breq	.+74     	; 0xa332 <twi_readFrom+0x8a>
    a2e8:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a2ec:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a2f0:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a2f4:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a2f8:	89 2b       	or	r24, r25
    a2fa:	8a 2b       	or	r24, r26
    a2fc:	8b 2b       	or	r24, r27
    a2fe:	81 f3       	breq	.-32     	; 0xa2e0 <twi_readFrom+0x38>
    a300:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a304:	40 90 73 05 	lds	r4, 0x0573	; 0x800573 <twi_timeout_us>
    a308:	50 90 74 05 	lds	r5, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a30c:	60 90 75 05 	lds	r6, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a310:	70 90 76 05 	lds	r7, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a314:	dc 01       	movw	r26, r24
    a316:	cb 01       	movw	r24, r22
    a318:	88 19       	sub	r24, r8
    a31a:	99 09       	sbc	r25, r9
    a31c:	aa 09       	sbc	r26, r10
    a31e:	bb 09       	sbc	r27, r11
    a320:	48 16       	cp	r4, r24
    a322:	59 06       	cpc	r5, r25
    a324:	6a 06       	cpc	r6, r26
    a326:	7b 06       	cpc	r7, r27
    a328:	d8 f6       	brcc	.-74     	; 0xa2e0 <twi_readFrom+0x38>
    a32a:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_do_reset_on_timeout>
    a32e:	a8 df       	rcall	.-176    	; 0xa280 <twi_handleTimeout>
    a330:	8f c0       	rjmp	.+286    	; 0xa450 <twi_readFrom+0x1a8>
    a332:	81 e0       	ldi	r24, 0x01	; 1
    a334:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_state>
    a338:	e0 92 78 05 	sts	0x0578, r14	; 0x800578 <twi_sendStop>
    a33c:	9f ef       	ldi	r25, 0xFF	; 255
    a33e:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <twi_error>
    a342:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <twi_masterBufferIndex>
    a346:	9c 0f       	add	r25, r28
    a348:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <twi_masterBufferLength>
    a34c:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <twi_slarw>
    a350:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <twi_slarw>
    a354:	8f 2d       	mov	r24, r15
    a356:	88 0f       	add	r24, r24
    a358:	89 2b       	or	r24, r25
    a35a:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <twi_slarw>
    a35e:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_inRepStart>
    a362:	81 30       	cpi	r24, 0x01	; 1
    a364:	89 f5       	brne	.+98     	; 0xa3c8 <twi_readFrom+0x120>
    a366:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <twi_inRepStart>
    a36a:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a36e:	6b 01       	movw	r12, r22
    a370:	7c 01       	movw	r14, r24
    a372:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <twi_slarw>
    a376:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a37a:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a37e:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a382:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a386:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a38a:	89 2b       	or	r24, r25
    a38c:	8a 2b       	or	r24, r26
    a38e:	8b 2b       	or	r24, r27
    a390:	a9 f0       	breq	.+42     	; 0xa3bc <twi_readFrom+0x114>
    a392:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a396:	80 90 73 05 	lds	r8, 0x0573	; 0x800573 <twi_timeout_us>
    a39a:	90 90 74 05 	lds	r9, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a39e:	a0 90 75 05 	lds	r10, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a3a2:	b0 90 76 05 	lds	r11, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a3a6:	dc 01       	movw	r26, r24
    a3a8:	cb 01       	movw	r24, r22
    a3aa:	8c 19       	sub	r24, r12
    a3ac:	9d 09       	sbc	r25, r13
    a3ae:	ae 09       	sbc	r26, r14
    a3b0:	bf 09       	sbc	r27, r15
    a3b2:	88 16       	cp	r8, r24
    a3b4:	99 06       	cpc	r9, r25
    a3b6:	aa 06       	cpc	r10, r26
    a3b8:	bb 06       	cpc	r11, r27
    a3ba:	90 f1       	brcs	.+100    	; 0xa420 <twi_readFrom+0x178>
    a3bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a3c0:	83 fd       	sbrc	r24, 3
    a3c2:	d7 cf       	rjmp	.-82     	; 0xa372 <twi_readFrom+0xca>
    a3c4:	85 ec       	ldi	r24, 0xC5	; 197
    a3c6:	01 c0       	rjmp	.+2      	; 0xa3ca <twi_readFrom+0x122>
    a3c8:	85 ee       	ldi	r24, 0xE5	; 229
    a3ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a3ce:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a3d2:	6b 01       	movw	r12, r22
    a3d4:	7c 01       	movw	r14, r24
    a3d6:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <twi_state>
    a3da:	81 30       	cpi	r24, 0x01	; 1
    a3dc:	29 f5       	brne	.+74     	; 0xa428 <twi_readFrom+0x180>
    a3de:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a3e2:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a3e6:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a3ea:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a3ee:	89 2b       	or	r24, r25
    a3f0:	8a 2b       	or	r24, r26
    a3f2:	8b 2b       	or	r24, r27
    a3f4:	81 f3       	breq	.-32     	; 0xa3d6 <twi_readFrom+0x12e>
    a3f6:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a3fa:	80 90 73 05 	lds	r8, 0x0573	; 0x800573 <twi_timeout_us>
    a3fe:	90 90 74 05 	lds	r9, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a402:	a0 90 75 05 	lds	r10, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a406:	b0 90 76 05 	lds	r11, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a40a:	dc 01       	movw	r26, r24
    a40c:	cb 01       	movw	r24, r22
    a40e:	8c 19       	sub	r24, r12
    a410:	9d 09       	sbc	r25, r13
    a412:	ae 09       	sbc	r26, r14
    a414:	bf 09       	sbc	r27, r15
    a416:	88 16       	cp	r8, r24
    a418:	99 06       	cpc	r9, r25
    a41a:	aa 06       	cpc	r10, r26
    a41c:	bb 06       	cpc	r11, r27
    a41e:	d8 f6       	brcc	.-74     	; 0xa3d6 <twi_readFrom+0x12e>
    a420:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_do_reset_on_timeout>
    a424:	2d df       	rcall	.-422    	; 0xa280 <twi_handleTimeout>
    a426:	15 c0       	rjmp	.+42     	; 0xa452 <twi_readFrom+0x1aa>
    a428:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a42c:	8c 17       	cp	r24, r28
    a42e:	10 f4       	brcc	.+4      	; 0xa434 <twi_readFrom+0x18c>
    a430:	c0 91 4c 05 	lds	r28, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a434:	ad e4       	ldi	r26, 0x4D	; 77
    a436:	b5 e0       	ldi	r27, 0x05	; 5
    a438:	91 2f       	mov	r25, r17
    a43a:	e1 2f       	mov	r30, r17
    a43c:	f0 2f       	mov	r31, r16
    a43e:	8e 2f       	mov	r24, r30
    a440:	89 1b       	sub	r24, r25
    a442:	8c 17       	cp	r24, r28
    a444:	18 f4       	brcc	.+6      	; 0xa44c <twi_readFrom+0x1a4>
    a446:	8d 91       	ld	r24, X+
    a448:	81 93       	st	Z+, r24
    a44a:	f9 cf       	rjmp	.-14     	; 0xa43e <twi_readFrom+0x196>
    a44c:	dc 2f       	mov	r29, r28
    a44e:	01 c0       	rjmp	.+2      	; 0xa452 <twi_readFrom+0x1aa>
    a450:	d0 e0       	ldi	r29, 0x00	; 0
    a452:	8d 2f       	mov	r24, r29
    a454:	df 91       	pop	r29
    a456:	cf 91       	pop	r28
    a458:	1f 91       	pop	r17
    a45a:	0f 91       	pop	r16
    a45c:	ff 90       	pop	r15
    a45e:	ef 90       	pop	r14
    a460:	df 90       	pop	r13
    a462:	cf 90       	pop	r12
    a464:	bf 90       	pop	r11
    a466:	af 90       	pop	r10
    a468:	9f 90       	pop	r9
    a46a:	8f 90       	pop	r8
    a46c:	7f 90       	pop	r7
    a46e:	6f 90       	pop	r6
    a470:	5f 90       	pop	r5
    a472:	4f 90       	pop	r4
    a474:	08 95       	ret

0000a476 <twi_writeTo>:
    a476:	4f 92       	push	r4
    a478:	5f 92       	push	r5
    a47a:	6f 92       	push	r6
    a47c:	7f 92       	push	r7
    a47e:	8f 92       	push	r8
    a480:	9f 92       	push	r9
    a482:	af 92       	push	r10
    a484:	bf 92       	push	r11
    a486:	cf 92       	push	r12
    a488:	df 92       	push	r13
    a48a:	ef 92       	push	r14
    a48c:	ff 92       	push	r15
    a48e:	0f 93       	push	r16
    a490:	1f 93       	push	r17
    a492:	cf 93       	push	r28
    a494:	df 93       	push	r29
    a496:	41 32       	cpi	r20, 0x21	; 33
    a498:	08 f0       	brcs	.+2      	; 0xa49c <twi_writeTo+0x26>
    a49a:	c5 c0       	rjmp	.+394    	; 0xa626 <twi_writeTo+0x1b0>
    a49c:	12 2f       	mov	r17, r18
    a49e:	f4 2e       	mov	r15, r20
    a4a0:	d7 2e       	mov	r13, r23
    a4a2:	e6 2e       	mov	r14, r22
    a4a4:	d8 2f       	mov	r29, r24
    a4a6:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a4aa:	4b 01       	movw	r8, r22
    a4ac:	5c 01       	movw	r10, r24
    a4ae:	c0 91 7a 05 	lds	r28, 0x057A	; 0x80057a <twi_state>
    a4b2:	cc 23       	and	r28, r28
    a4b4:	11 f1       	breq	.+68     	; 0xa4fa <twi_writeTo+0x84>
    a4b6:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a4ba:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a4be:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a4c2:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a4c6:	89 2b       	or	r24, r25
    a4c8:	8a 2b       	or	r24, r26
    a4ca:	8b 2b       	or	r24, r27
    a4cc:	81 f3       	breq	.-32     	; 0xa4ae <twi_writeTo+0x38>
    a4ce:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a4d2:	40 90 73 05 	lds	r4, 0x0573	; 0x800573 <twi_timeout_us>
    a4d6:	50 90 74 05 	lds	r5, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a4da:	60 90 75 05 	lds	r6, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a4de:	70 90 76 05 	lds	r7, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a4e2:	dc 01       	movw	r26, r24
    a4e4:	cb 01       	movw	r24, r22
    a4e6:	88 19       	sub	r24, r8
    a4e8:	99 09       	sbc	r25, r9
    a4ea:	aa 09       	sbc	r26, r10
    a4ec:	bb 09       	sbc	r27, r11
    a4ee:	48 16       	cp	r4, r24
    a4f0:	59 06       	cpc	r5, r25
    a4f2:	6a 06       	cpc	r6, r26
    a4f4:	7b 06       	cpc	r7, r27
    a4f6:	d8 f6       	brcc	.-74     	; 0xa4ae <twi_writeTo+0x38>
    a4f8:	83 c0       	rjmp	.+262    	; 0xa600 <twi_writeTo+0x18a>
    a4fa:	82 e0       	ldi	r24, 0x02	; 2
    a4fc:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_state>
    a500:	00 93 78 05 	sts	0x0578, r16	; 0x800578 <twi_sendStop>
    a504:	8f ef       	ldi	r24, 0xFF	; 255
    a506:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_error>
    a50a:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <twi_masterBufferIndex>
    a50e:	f0 92 4b 05 	sts	0x054B, r15	; 0x80054b <twi_masterBufferLength>
    a512:	9e 2d       	mov	r25, r14
    a514:	ad e4       	ldi	r26, 0x4D	; 77
    a516:	b5 e0       	ldi	r27, 0x05	; 5
    a518:	ee 2d       	mov	r30, r14
    a51a:	fd 2d       	mov	r31, r13
    a51c:	8e 2f       	mov	r24, r30
    a51e:	89 1b       	sub	r24, r25
    a520:	8f 15       	cp	r24, r15
    a522:	18 f4       	brcc	.+6      	; 0xa52a <twi_writeTo+0xb4>
    a524:	81 91       	ld	r24, Z+
    a526:	8d 93       	st	X+, r24
    a528:	f9 cf       	rjmp	.-14     	; 0xa51c <twi_writeTo+0xa6>
    a52a:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <twi_slarw>
    a52e:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <twi_slarw>
    a532:	dd 0f       	add	r29, r29
    a534:	d9 2b       	or	r29, r25
    a536:	d0 93 79 05 	sts	0x0579, r29	; 0x800579 <twi_slarw>
    a53a:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <twi_inRepStart>
    a53e:	81 30       	cpi	r24, 0x01	; 1
    a540:	89 f5       	brne	.+98     	; 0xa5a4 <twi_writeTo+0x12e>
    a542:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <twi_inRepStart>
    a546:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a54a:	6b 01       	movw	r12, r22
    a54c:	7c 01       	movw	r14, r24
    a54e:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <twi_slarw>
    a552:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a556:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a55a:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a55e:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a562:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a566:	89 2b       	or	r24, r25
    a568:	8a 2b       	or	r24, r26
    a56a:	8b 2b       	or	r24, r27
    a56c:	a9 f0       	breq	.+42     	; 0xa598 <twi_writeTo+0x122>
    a56e:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a572:	80 90 73 05 	lds	r8, 0x0573	; 0x800573 <twi_timeout_us>
    a576:	90 90 74 05 	lds	r9, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a57a:	a0 90 75 05 	lds	r10, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a57e:	b0 90 76 05 	lds	r11, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a582:	dc 01       	movw	r26, r24
    a584:	cb 01       	movw	r24, r22
    a586:	8c 19       	sub	r24, r12
    a588:	9d 09       	sbc	r25, r13
    a58a:	ae 09       	sbc	r26, r14
    a58c:	bf 09       	sbc	r27, r15
    a58e:	88 16       	cp	r8, r24
    a590:	99 06       	cpc	r9, r25
    a592:	aa 06       	cpc	r10, r26
    a594:	bb 06       	cpc	r11, r27
    a596:	a0 f1       	brcs	.+104    	; 0xa600 <twi_writeTo+0x18a>
    a598:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a59c:	83 fd       	sbrc	r24, 3
    a59e:	d7 cf       	rjmp	.-82     	; 0xa54e <twi_writeTo+0xd8>
    a5a0:	85 ec       	ldi	r24, 0xC5	; 197
    a5a2:	01 c0       	rjmp	.+2      	; 0xa5a6 <twi_writeTo+0x130>
    a5a4:	85 ee       	ldi	r24, 0xE5	; 229
    a5a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a5aa:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a5ae:	6b 01       	movw	r12, r22
    a5b0:	7c 01       	movw	r14, r24
    a5b2:	11 23       	and	r17, r17
    a5b4:	51 f1       	breq	.+84     	; 0xa60a <twi_writeTo+0x194>
    a5b6:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <twi_state>
    a5ba:	82 30       	cpi	r24, 0x02	; 2
    a5bc:	31 f5       	brne	.+76     	; 0xa60a <twi_writeTo+0x194>
    a5be:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a5c2:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a5c6:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a5ca:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a5ce:	89 2b       	or	r24, r25
    a5d0:	8a 2b       	or	r24, r26
    a5d2:	8b 2b       	or	r24, r27
    a5d4:	71 f3       	breq	.-36     	; 0xa5b2 <twi_writeTo+0x13c>
    a5d6:	0e 94 88 5e 	call	0xbd10	; 0xbd10 <micros>
    a5da:	80 90 73 05 	lds	r8, 0x0573	; 0x800573 <twi_timeout_us>
    a5de:	90 90 74 05 	lds	r9, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a5e2:	a0 90 75 05 	lds	r10, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a5e6:	b0 90 76 05 	lds	r11, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a5ea:	dc 01       	movw	r26, r24
    a5ec:	cb 01       	movw	r24, r22
    a5ee:	8c 19       	sub	r24, r12
    a5f0:	9d 09       	sbc	r25, r13
    a5f2:	ae 09       	sbc	r26, r14
    a5f4:	bf 09       	sbc	r27, r15
    a5f6:	88 16       	cp	r8, r24
    a5f8:	99 06       	cpc	r9, r25
    a5fa:	aa 06       	cpc	r10, r26
    a5fc:	bb 06       	cpc	r11, r27
    a5fe:	c8 f6       	brcc	.-78     	; 0xa5b2 <twi_writeTo+0x13c>
    a600:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_do_reset_on_timeout>
    a604:	3d de       	rcall	.-902    	; 0xa280 <twi_handleTimeout>
    a606:	c5 e0       	ldi	r28, 0x05	; 5
    a608:	13 c0       	rjmp	.+38     	; 0xa630 <twi_writeTo+0x1ba>
    a60a:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <twi_error>
    a60e:	8f 3f       	cpi	r24, 0xFF	; 255
    a610:	79 f0       	breq	.+30     	; 0xa630 <twi_writeTo+0x1ba>
    a612:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <twi_error>
    a616:	80 32       	cpi	r24, 0x20	; 32
    a618:	41 f0       	breq	.+16     	; 0xa62a <twi_writeTo+0x1b4>
    a61a:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <twi_error>
    a61e:	80 33       	cpi	r24, 0x30	; 48
    a620:	31 f0       	breq	.+12     	; 0xa62e <twi_writeTo+0x1b8>
    a622:	c4 e0       	ldi	r28, 0x04	; 4
    a624:	05 c0       	rjmp	.+10     	; 0xa630 <twi_writeTo+0x1ba>
    a626:	c1 e0       	ldi	r28, 0x01	; 1
    a628:	03 c0       	rjmp	.+6      	; 0xa630 <twi_writeTo+0x1ba>
    a62a:	c2 e0       	ldi	r28, 0x02	; 2
    a62c:	01 c0       	rjmp	.+2      	; 0xa630 <twi_writeTo+0x1ba>
    a62e:	c3 e0       	ldi	r28, 0x03	; 3
    a630:	8c 2f       	mov	r24, r28
    a632:	df 91       	pop	r29
    a634:	cf 91       	pop	r28
    a636:	1f 91       	pop	r17
    a638:	0f 91       	pop	r16
    a63a:	ff 90       	pop	r15
    a63c:	ef 90       	pop	r14
    a63e:	df 90       	pop	r13
    a640:	cf 90       	pop	r12
    a642:	bf 90       	pop	r11
    a644:	af 90       	pop	r10
    a646:	9f 90       	pop	r9
    a648:	8f 90       	pop	r8
    a64a:	7f 90       	pop	r7
    a64c:	6f 90       	pop	r6
    a64e:	5f 90       	pop	r5
    a650:	4f 90       	pop	r4
    a652:	08 95       	ret

0000a654 <twi_stop>:
    a654:	85 ed       	ldi	r24, 0xD5	; 213
    a656:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a65a:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_timeout_us>
    a65e:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a662:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a666:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a66a:	07 96       	adiw	r24, 0x07	; 7
    a66c:	a1 1d       	adc	r26, r1
    a66e:	b1 1d       	adc	r27, r1
    a670:	23 e0       	ldi	r18, 0x03	; 3
    a672:	b6 95       	lsr	r27
    a674:	a7 95       	ror	r26
    a676:	97 95       	ror	r25
    a678:	87 95       	ror	r24
    a67a:	2a 95       	dec	r18
    a67c:	d1 f7       	brne	.-12     	; 0xa672 <twi_stop+0x1e>
    a67e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a682:	24 ff       	sbrs	r18, 4
    a684:	1b c0       	rjmp	.+54     	; 0xa6bc <twi_stop+0x68>
    a686:	40 91 73 05 	lds	r20, 0x0573	; 0x800573 <twi_timeout_us>
    a68a:	50 91 74 05 	lds	r21, 0x0574	; 0x800574 <twi_timeout_us+0x1>
    a68e:	60 91 75 05 	lds	r22, 0x0575	; 0x800575 <twi_timeout_us+0x2>
    a692:	70 91 76 05 	lds	r23, 0x0576	; 0x800576 <twi_timeout_us+0x3>
    a696:	45 2b       	or	r20, r21
    a698:	46 2b       	or	r20, r22
    a69a:	47 2b       	or	r20, r23
    a69c:	81 f3       	breq	.-32     	; 0xa67e <twi_stop+0x2a>
    a69e:	00 97       	sbiw	r24, 0x00	; 0
    a6a0:	a1 05       	cpc	r26, r1
    a6a2:	b1 05       	cpc	r27, r1
    a6a4:	41 f0       	breq	.+16     	; 0xa6b6 <twi_stop+0x62>
    a6a6:	25 e3       	ldi	r18, 0x35	; 53
    a6a8:	2a 95       	dec	r18
    a6aa:	f1 f7       	brne	.-4      	; 0xa6a8 <twi_stop+0x54>
    a6ac:	00 00       	nop
    a6ae:	01 97       	sbiw	r24, 0x01	; 1
    a6b0:	a1 09       	sbc	r26, r1
    a6b2:	b1 09       	sbc	r27, r1
    a6b4:	e4 cf       	rjmp	.-56     	; 0xa67e <twi_stop+0x2a>
    a6b6:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <twi_do_reset_on_timeout>
    a6ba:	e2 cd       	rjmp	.-1084   	; 0xa280 <twi_handleTimeout>
    a6bc:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <twi_state>
    a6c0:	08 95       	ret

0000a6c2 <__vector_39>:

ISR(TWI_vect)
{
    a6c2:	1f 92       	push	r1
    a6c4:	0f 92       	push	r0
    a6c6:	0f b6       	in	r0, 0x3f	; 63
    a6c8:	0f 92       	push	r0
    a6ca:	11 24       	eor	r1, r1
    a6cc:	0b b6       	in	r0, 0x3b	; 59
    a6ce:	0f 92       	push	r0
    a6d0:	2f 93       	push	r18
    a6d2:	3f 93       	push	r19
    a6d4:	4f 93       	push	r20
    a6d6:	5f 93       	push	r21
    a6d8:	6f 93       	push	r22
    a6da:	7f 93       	push	r23
    a6dc:	8f 93       	push	r24
    a6de:	9f 93       	push	r25
    a6e0:	af 93       	push	r26
    a6e2:	bf 93       	push	r27
    a6e4:	ef 93       	push	r30
    a6e6:	ff 93       	push	r31
  switch(TW_STATUS){
    a6e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    a6ec:	88 7f       	andi	r24, 0xF8	; 248
    a6ee:	80 36       	cpi	r24, 0x60	; 96
    a6f0:	09 f4       	brne	.+2      	; 0xa6f4 <__vector_39+0x32>
    a6f2:	9d c0       	rjmp	.+314    	; 0xa82e <__vector_39+0x16c>
    a6f4:	70 f5       	brcc	.+92     	; 0xa752 <__vector_39+0x90>
    a6f6:	88 32       	cpi	r24, 0x28	; 40
    a6f8:	09 f4       	brne	.+2      	; 0xa6fc <__vector_39+0x3a>
    a6fa:	5c c0       	rjmp	.+184    	; 0xa7b4 <__vector_39+0xf2>
    a6fc:	90 f4       	brcc	.+36     	; 0xa722 <__vector_39+0x60>
    a6fe:	80 31       	cpi	r24, 0x10	; 16
    a700:	09 f4       	brne	.+2      	; 0xa704 <__vector_39+0x42>
    a702:	55 c0       	rjmp	.+170    	; 0xa7ae <__vector_39+0xec>
    a704:	38 f4       	brcc	.+14     	; 0xa714 <__vector_39+0x52>
    a706:	88 23       	and	r24, r24
    a708:	09 f4       	brne	.+2      	; 0xa70c <__vector_39+0x4a>
    a70a:	f3 c0       	rjmp	.+486    	; 0xa8f2 <__vector_39+0x230>
    a70c:	88 30       	cpi	r24, 0x08	; 8
    a70e:	09 f4       	brne	.+2      	; 0xa712 <__vector_39+0x50>
    a710:	4e c0       	rjmp	.+156    	; 0xa7ae <__vector_39+0xec>
    a712:	f2 c0       	rjmp	.+484    	; 0xa8f8 <__vector_39+0x236>
    a714:	88 31       	cpi	r24, 0x18	; 24
    a716:	09 f4       	brne	.+2      	; 0xa71a <__vector_39+0x58>
    a718:	4d c0       	rjmp	.+154    	; 0xa7b4 <__vector_39+0xf2>
    a71a:	80 32       	cpi	r24, 0x20	; 32
    a71c:	09 f4       	brne	.+2      	; 0xa720 <__vector_39+0x5e>
    a71e:	5e c0       	rjmp	.+188    	; 0xa7dc <__vector_39+0x11a>
    a720:	eb c0       	rjmp	.+470    	; 0xa8f8 <__vector_39+0x236>
    a722:	80 34       	cpi	r24, 0x40	; 64
    a724:	09 f4       	brne	.+2      	; 0xa728 <__vector_39+0x66>
    a726:	69 c0       	rjmp	.+210    	; 0xa7fa <__vector_39+0x138>
    a728:	50 f4       	brcc	.+20     	; 0xa73e <__vector_39+0x7c>
    a72a:	80 33       	cpi	r24, 0x30	; 48
    a72c:	09 f4       	brne	.+2      	; 0xa730 <__vector_39+0x6e>
    a72e:	56 c0       	rjmp	.+172    	; 0xa7dc <__vector_39+0x11a>
    a730:	88 33       	cpi	r24, 0x38	; 56
    a732:	09 f0       	breq	.+2      	; 0xa736 <__vector_39+0x74>
    a734:	e1 c0       	rjmp	.+450    	; 0xa8f8 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    a736:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_error>
      twi_releaseBus();
    a73a:	9c dd       	rcall	.-1224   	; 0xa274 <twi_releaseBus>
      break;
    a73c:	dd c0       	rjmp	.+442    	; 0xa8f8 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    a73e:	80 35       	cpi	r24, 0x50	; 80
    a740:	09 f4       	brne	.+2      	; 0xa744 <__vector_39+0x82>
    a742:	4f c0       	rjmp	.+158    	; 0xa7e2 <__vector_39+0x120>
    a744:	88 35       	cpi	r24, 0x58	; 88
    a746:	09 f4       	brne	.+2      	; 0xa74a <__vector_39+0x88>
    a748:	5d c0       	rjmp	.+186    	; 0xa804 <__vector_39+0x142>
    a74a:	88 34       	cpi	r24, 0x48	; 72
    a74c:	09 f0       	breq	.+2      	; 0xa750 <__vector_39+0x8e>
    a74e:	d4 c0       	rjmp	.+424    	; 0xa8f8 <__vector_39+0x236>
    a750:	d2 c0       	rjmp	.+420    	; 0xa8f6 <__vector_39+0x234>
    a752:	88 39       	cpi	r24, 0x98	; 152
    a754:	09 f4       	brne	.+2      	; 0xa758 <__vector_39+0x96>
    a756:	c3 c0       	rjmp	.+390    	; 0xa8de <__vector_39+0x21c>
    a758:	a8 f4       	brcc	.+42     	; 0xa784 <__vector_39+0xc2>
    a75a:	88 37       	cpi	r24, 0x78	; 120
    a75c:	09 f4       	brne	.+2      	; 0xa760 <__vector_39+0x9e>
    a75e:	67 c0       	rjmp	.+206    	; 0xa82e <__vector_39+0x16c>
    a760:	38 f4       	brcc	.+14     	; 0xa770 <__vector_39+0xae>
    a762:	88 36       	cpi	r24, 0x68	; 104
    a764:	09 f4       	brne	.+2      	; 0xa768 <__vector_39+0xa6>
    a766:	63 c0       	rjmp	.+198    	; 0xa82e <__vector_39+0x16c>
    a768:	80 37       	cpi	r24, 0x70	; 112
    a76a:	09 f4       	brne	.+2      	; 0xa76e <__vector_39+0xac>
    a76c:	60 c0       	rjmp	.+192    	; 0xa82e <__vector_39+0x16c>
    a76e:	c4 c0       	rjmp	.+392    	; 0xa8f8 <__vector_39+0x236>
    a770:	88 38       	cpi	r24, 0x88	; 136
    a772:	09 f4       	brne	.+2      	; 0xa776 <__vector_39+0xb4>
    a774:	b4 c0       	rjmp	.+360    	; 0xa8de <__vector_39+0x21c>
    a776:	80 39       	cpi	r24, 0x90	; 144
    a778:	09 f4       	brne	.+2      	; 0xa77c <__vector_39+0xba>
    a77a:	5f c0       	rjmp	.+190    	; 0xa83a <__vector_39+0x178>
    a77c:	80 38       	cpi	r24, 0x80	; 128
    a77e:	09 f0       	breq	.+2      	; 0xa782 <__vector_39+0xc0>
    a780:	bb c0       	rjmp	.+374    	; 0xa8f8 <__vector_39+0x236>
    a782:	5b c0       	rjmp	.+182    	; 0xa83a <__vector_39+0x178>
    a784:	80 3b       	cpi	r24, 0xB0	; 176
    a786:	09 f4       	brne	.+2      	; 0xa78a <__vector_39+0xc8>
    a788:	82 c0       	rjmp	.+260    	; 0xa88e <__vector_39+0x1cc>
    a78a:	38 f4       	brcc	.+14     	; 0xa79a <__vector_39+0xd8>
    a78c:	80 3a       	cpi	r24, 0xA0	; 160
    a78e:	09 f4       	brne	.+2      	; 0xa792 <__vector_39+0xd0>
    a790:	66 c0       	rjmp	.+204    	; 0xa85e <__vector_39+0x19c>
    a792:	88 3a       	cpi	r24, 0xA8	; 168
    a794:	09 f4       	brne	.+2      	; 0xa798 <__vector_39+0xd6>
    a796:	7b c0       	rjmp	.+246    	; 0xa88e <__vector_39+0x1cc>
    a798:	af c0       	rjmp	.+350    	; 0xa8f8 <__vector_39+0x236>
    a79a:	80 3c       	cpi	r24, 0xC0	; 192
    a79c:	09 f4       	brne	.+2      	; 0xa7a0 <__vector_39+0xde>
    a79e:	a3 c0       	rjmp	.+326    	; 0xa8e6 <__vector_39+0x224>
    a7a0:	88 3c       	cpi	r24, 0xC8	; 200
    a7a2:	09 f4       	brne	.+2      	; 0xa7a6 <__vector_39+0xe4>
    a7a4:	a0 c0       	rjmp	.+320    	; 0xa8e6 <__vector_39+0x224>
    a7a6:	88 3b       	cpi	r24, 0xB8	; 184
    a7a8:	09 f4       	brne	.+2      	; 0xa7ac <__vector_39+0xea>
    a7aa:	86 c0       	rjmp	.+268    	; 0xa8b8 <__vector_39+0x1f6>
    a7ac:	a5 c0       	rjmp	.+330    	; 0xa8f8 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    a7ae:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <twi_slarw>
    a7b2:	10 c0       	rjmp	.+32     	; 0xa7d4 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    a7b4:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a7b8:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <twi_masterBufferLength>
    a7bc:	98 17       	cp	r25, r24
    a7be:	70 f5       	brcc	.+92     	; 0xa81c <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    a7c0:	e0 91 4c 05 	lds	r30, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a7c4:	81 e0       	ldi	r24, 0x01	; 1
    a7c6:	8e 0f       	add	r24, r30
    a7c8:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <twi_masterBufferIndex>
    a7cc:	f0 e0       	ldi	r31, 0x00	; 0
    a7ce:	e3 5b       	subi	r30, 0xB3	; 179
    a7d0:	fa 4f       	sbci	r31, 0xFA	; 250
    a7d2:	80 81       	ld	r24, Z
    a7d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    a7d8:	85 ec       	ldi	r24, 0xC5	; 197
    a7da:	82 c0       	rjmp	.+260    	; 0xa8e0 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    a7dc:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_error>
    a7e0:	8a c0       	rjmp	.+276    	; 0xa8f6 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    a7e2:	e0 91 4c 05 	lds	r30, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a7e6:	81 e0       	ldi	r24, 0x01	; 1
    a7e8:	8e 0f       	add	r24, r30
    a7ea:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <twi_masterBufferIndex>
    a7ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a7f2:	f0 e0       	ldi	r31, 0x00	; 0
    a7f4:	e3 5b       	subi	r30, 0xB3	; 179
    a7f6:	fa 4f       	sbci	r31, 0xFA	; 250
    a7f8:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    a7fa:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a7fe:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <twi_masterBufferLength>
    a802:	6a c0       	rjmp	.+212    	; 0xa8d8 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    a804:	e0 91 4c 05 	lds	r30, 0x054C	; 0x80054c <twi_masterBufferIndex>
    a808:	81 e0       	ldi	r24, 0x01	; 1
    a80a:	8e 0f       	add	r24, r30
    a80c:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <twi_masterBufferIndex>
    a810:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a814:	f0 e0       	ldi	r31, 0x00	; 0
    a816:	e3 5b       	subi	r30, 0xB3	; 179
    a818:	fa 4f       	sbci	r31, 0xFA	; 250
    a81a:	80 83       	st	Z, r24
      if (twi_sendStop){
    a81c:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <twi_sendStop>
    a820:	81 11       	cpse	r24, r1
    a822:	69 c0       	rjmp	.+210    	; 0xa8f6 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    a824:	81 e0       	ldi	r24, 0x01	; 1
    a826:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    a82a:	84 ea       	ldi	r24, 0xA4	; 164
    a82c:	5d c0       	rjmp	.+186    	; 0xa8e8 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    a82e:	83 e0       	ldi	r24, 0x03	; 3
    a830:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    a834:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <twi_rxBufferIndex>
    a838:	cf cf       	rjmp	.-98     	; 0xa7d8 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    a83a:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a83e:	80 32       	cpi	r24, 0x20	; 32
    a840:	08 f0       	brcs	.+2      	; 0xa844 <__vector_39+0x182>
    a842:	4d c0       	rjmp	.+154    	; 0xa8de <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    a844:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a848:	81 e0       	ldi	r24, 0x01	; 1
    a84a:	8e 0f       	add	r24, r30
    a84c:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <twi_rxBufferIndex>
    a850:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    a854:	f0 e0       	ldi	r31, 0x00	; 0
    a856:	e7 5f       	subi	r30, 0xF7	; 247
    a858:	fa 4f       	sbci	r31, 0xFA	; 250
    a85a:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    a85c:	bd cf       	rjmp	.-134    	; 0xa7d8 <__vector_39+0x116>
    a85e:	0a dd       	rcall	.-1516   	; 0xa274 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    a860:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a864:	80 32       	cpi	r24, 0x20	; 32
    a866:	30 f4       	brcc	.+12     	; 0xa874 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    a868:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a86c:	f0 e0       	ldi	r31, 0x00	; 0
    a86e:	e7 5f       	subi	r30, 0xF7	; 247
    a870:	fa 4f       	sbci	r31, 0xFA	; 250
    a872:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    a874:	60 91 08 05 	lds	r22, 0x0508	; 0x800508 <twi_rxBufferIndex>
    a878:	70 e0       	ldi	r23, 0x00	; 0
    a87a:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <twi_onSlaveReceive>
    a87e:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <twi_onSlaveReceive+0x1>
    a882:	89 e0       	ldi	r24, 0x09	; 9
    a884:	95 e0       	ldi	r25, 0x05	; 5
    a886:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    a888:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <twi_rxBufferIndex>
      break;
    a88c:	35 c0       	rjmp	.+106    	; 0xa8f8 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    a88e:	84 e0       	ldi	r24, 0x04	; 4
    a890:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    a894:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    a898:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    a89c:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <twi_onSlaveTransmit>
    a8a0:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <twi_onSlaveTransmit+0x1>
    a8a4:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    a8a6:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <twi_txBufferLength>
    a8aa:	81 11       	cpse	r24, r1
    a8ac:	05 c0       	rjmp	.+10     	; 0xa8b8 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    a8ae:	81 e0       	ldi	r24, 0x01	; 1
    a8b0:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    a8b4:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    a8b8:	e0 91 2a 05 	lds	r30, 0x052A	; 0x80052a <twi_txBufferIndex>
    a8bc:	81 e0       	ldi	r24, 0x01	; 1
    a8be:	8e 0f       	add	r24, r30
    a8c0:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <twi_txBufferIndex>
    a8c4:	f0 e0       	ldi	r31, 0x00	; 0
    a8c6:	e5 5d       	subi	r30, 0xD5	; 213
    a8c8:	fa 4f       	sbci	r31, 0xFA	; 250
    a8ca:	80 81       	ld	r24, Z
    a8cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    a8d0:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <twi_txBufferIndex>
    a8d4:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <twi_txBufferLength>
    a8d8:	98 17       	cp	r25, r24
    a8da:	08 f4       	brcc	.+2      	; 0xa8de <__vector_39+0x21c>
    a8dc:	7d cf       	rjmp	.-262    	; 0xa7d8 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    a8de:	85 e8       	ldi	r24, 0x85	; 133
    a8e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    a8e4:	09 c0       	rjmp	.+18     	; 0xa8f8 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    a8e6:	85 ec       	ldi	r24, 0xC5	; 197
    a8e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    a8ec:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <twi_state>
      break;
    a8f0:	03 c0       	rjmp	.+6      	; 0xa8f8 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    a8f2:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <twi_error>
      twi_stop();
    a8f6:	ae de       	rcall	.-676    	; 0xa654 <twi_stop>
      break;
  }
}
    a8f8:	ff 91       	pop	r31
    a8fa:	ef 91       	pop	r30
    a8fc:	bf 91       	pop	r27
    a8fe:	af 91       	pop	r26
    a900:	9f 91       	pop	r25
    a902:	8f 91       	pop	r24
    a904:	7f 91       	pop	r23
    a906:	6f 91       	pop	r22
    a908:	5f 91       	pop	r21
    a90a:	4f 91       	pop	r20
    a90c:	3f 91       	pop	r19
    a90e:	2f 91       	pop	r18
    a910:	0f 90       	pop	r0
    a912:	0b be       	out	0x3b, r0	; 59
    a914:	0f 90       	pop	r0
    a916:	0f be       	out	0x3f, r0	; 63
    a918:	0f 90       	pop	r0
    a91a:	1f 90       	pop	r1
    a91c:	18 95       	reti

0000a91e <_ZN5Print13setWriteErrorEi>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    a91e:	cf 93       	push	r28
    a920:	df 93       	push	r29
    a922:	00 d0       	rcall	.+0      	; 0xa924 <_ZN5Print13setWriteErrorEi+0x6>
    a924:	1f 92       	push	r1
    a926:	cd b7       	in	r28, 0x3d	; 61
    a928:	de b7       	in	r29, 0x3e	; 62
    a92a:	9a 83       	std	Y+2, r25	; 0x02
    a92c:	89 83       	std	Y+1, r24	; 0x01
    a92e:	7c 83       	std	Y+4, r23	; 0x04
    a930:	6b 83       	std	Y+3, r22	; 0x03
    a932:	89 81       	ldd	r24, Y+1	; 0x01
    a934:	9a 81       	ldd	r25, Y+2	; 0x02
    a936:	2b 81       	ldd	r18, Y+3	; 0x03
    a938:	3c 81       	ldd	r19, Y+4	; 0x04
    a93a:	fc 01       	movw	r30, r24
    a93c:	33 83       	std	Z+3, r19	; 0x03
    a93e:	22 83       	std	Z+2, r18	; 0x02
    a940:	00 00       	nop
    a942:	0f 90       	pop	r0
    a944:	0f 90       	pop	r0
    a946:	0f 90       	pop	r0
    a948:	0f 90       	pop	r0
    a94a:	df 91       	pop	r29
    a94c:	cf 91       	pop	r28
    a94e:	08 95       	ret

0000a950 <_ZN6StreamC1Ev>:
    a950:	cf 93       	push	r28
    a952:	df 93       	push	r29
    a954:	1f 92       	push	r1
    a956:	1f 92       	push	r1
    a958:	cd b7       	in	r28, 0x3d	; 61
    a95a:	de b7       	in	r29, 0x3e	; 62
    a95c:	9a 83       	std	Y+2, r25	; 0x02
    a95e:	89 83       	std	Y+1, r24	; 0x01
    a960:	89 81       	ldd	r24, Y+1	; 0x01
    a962:	9a 81       	ldd	r25, Y+2	; 0x02
    a964:	0e 94 bf 12 	call	0x257e	; 0x257e <_ZN5PrintC1Ev>
    a968:	2b e2       	ldi	r18, 0x2B	; 43
    a96a:	33 e0       	ldi	r19, 0x03	; 3
    a96c:	89 81       	ldd	r24, Y+1	; 0x01
    a96e:	9a 81       	ldd	r25, Y+2	; 0x02
    a970:	fc 01       	movw	r30, r24
    a972:	31 83       	std	Z+1, r19	; 0x01
    a974:	20 83       	st	Z, r18
    a976:	29 81       	ldd	r18, Y+1	; 0x01
    a978:	3a 81       	ldd	r19, Y+2	; 0x02
    a97a:	88 ee       	ldi	r24, 0xE8	; 232
    a97c:	93 e0       	ldi	r25, 0x03	; 3
    a97e:	a0 e0       	ldi	r26, 0x00	; 0
    a980:	b0 e0       	ldi	r27, 0x00	; 0
    a982:	f9 01       	movw	r30, r18
    a984:	84 83       	std	Z+4, r24	; 0x04
    a986:	95 83       	std	Z+5, r25	; 0x05
    a988:	a6 83       	std	Z+6, r26	; 0x06
    a98a:	b7 83       	std	Z+7, r27	; 0x07
    a98c:	00 00       	nop
    a98e:	0f 90       	pop	r0
    a990:	0f 90       	pop	r0
    a992:	df 91       	pop	r29
    a994:	cf 91       	pop	r28
    a996:	08 95       	ret

0000a998 <_ZN7TwoWireC1Ev>:
    a998:	cf 93       	push	r28
    a99a:	df 93       	push	r29
    a99c:	1f 92       	push	r1
    a99e:	1f 92       	push	r1
    a9a0:	cd b7       	in	r28, 0x3d	; 61
    a9a2:	de b7       	in	r29, 0x3e	; 62
    a9a4:	9a 83       	std	Y+2, r25	; 0x02
    a9a6:	89 83       	std	Y+1, r24	; 0x01
    a9a8:	89 81       	ldd	r24, Y+1	; 0x01
    a9aa:	9a 81       	ldd	r25, Y+2	; 0x02
    a9ac:	d1 df       	rcall	.-94     	; 0xa950 <_ZN6StreamC1Ev>
    a9ae:	29 e1       	ldi	r18, 0x19	; 25
    a9b0:	33 e0       	ldi	r19, 0x03	; 3
    a9b2:	89 81       	ldd	r24, Y+1	; 0x01
    a9b4:	9a 81       	ldd	r25, Y+2	; 0x02
    a9b6:	fc 01       	movw	r30, r24
    a9b8:	31 83       	std	Z+1, r19	; 0x01
    a9ba:	20 83       	st	Z, r18
    a9bc:	00 00       	nop
    a9be:	0f 90       	pop	r0
    a9c0:	0f 90       	pop	r0
    a9c2:	df 91       	pop	r29
    a9c4:	cf 91       	pop	r28
    a9c6:	08 95       	ret

0000a9c8 <_ZN7TwoWire5beginEv>:
    a9c8:	cf 93       	push	r28
    a9ca:	df 93       	push	r29
    a9cc:	1f 92       	push	r1
    a9ce:	1f 92       	push	r1
    a9d0:	cd b7       	in	r28, 0x3d	; 61
    a9d2:	de b7       	in	r29, 0x3e	; 62
    a9d4:	9a 83       	std	Y+2, r25	; 0x02
    a9d6:	89 83       	std	Y+1, r24	; 0x01
    a9d8:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    a9dc:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    a9e0:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    a9e4:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    a9e8:	d4 db       	rcall	.-2136   	; 0xa192 <twi_init>
    a9ea:	80 e8       	ldi	r24, 0x80	; 128
    a9ec:	97 e5       	ldi	r25, 0x57	; 87
    a9ee:	3d dc       	rcall	.-1926   	; 0xa26a <twi_attachSlaveTxEvent>
    a9f0:	83 e3       	ldi	r24, 0x33	; 51
    a9f2:	97 e5       	ldi	r25, 0x57	; 87
    a9f4:	35 dc       	rcall	.-1942   	; 0xa260 <twi_attachSlaveRxEvent>
    a9f6:	00 00       	nop
    a9f8:	0f 90       	pop	r0
    a9fa:	0f 90       	pop	r0
    a9fc:	df 91       	pop	r29
    a9fe:	cf 91       	pop	r28
    aa00:	08 95       	ret

0000aa02 <_ZN7TwoWire8setClockEm>:
    aa02:	cf 93       	push	r28
    aa04:	df 93       	push	r29
    aa06:	00 d0       	rcall	.+0      	; 0xaa08 <_ZN7TwoWire8setClockEm+0x6>
    aa08:	00 d0       	rcall	.+0      	; 0xaa0a <_ZN7TwoWire8setClockEm+0x8>
    aa0a:	cd b7       	in	r28, 0x3d	; 61
    aa0c:	de b7       	in	r29, 0x3e	; 62
    aa0e:	9a 83       	std	Y+2, r25	; 0x02
    aa10:	89 83       	std	Y+1, r24	; 0x01
    aa12:	4b 83       	std	Y+3, r20	; 0x03
    aa14:	5c 83       	std	Y+4, r21	; 0x04
    aa16:	6d 83       	std	Y+5, r22	; 0x05
    aa18:	7e 83       	std	Y+6, r23	; 0x06
    aa1a:	8b 81       	ldd	r24, Y+3	; 0x03
    aa1c:	9c 81       	ldd	r25, Y+4	; 0x04
    aa1e:	ad 81       	ldd	r26, Y+5	; 0x05
    aa20:	be 81       	ldd	r27, Y+6	; 0x06
    aa22:	bc 01       	movw	r22, r24
    aa24:	cd 01       	movw	r24, r26
    aa26:	e0 db       	rcall	.-2112   	; 0xa1e8 <twi_setFrequency>
    aa28:	00 00       	nop
    aa2a:	26 96       	adiw	r28, 0x06	; 6
    aa2c:	0f b6       	in	r0, 0x3f	; 63
    aa2e:	f8 94       	cli
    aa30:	de bf       	out	0x3e, r29	; 62
    aa32:	0f be       	out	0x3f, r0	; 63
    aa34:	cd bf       	out	0x3d, r28	; 61
    aa36:	df 91       	pop	r29
    aa38:	cf 91       	pop	r28
    aa3a:	08 95       	ret

0000aa3c <_ZN7TwoWire11requestFromEhhmhh>:
    aa3c:	cf 92       	push	r12
    aa3e:	ef 92       	push	r14
    aa40:	0f 93       	push	r16
    aa42:	1f 93       	push	r17
    aa44:	cf 93       	push	r28
    aa46:	df 93       	push	r29
    aa48:	cd b7       	in	r28, 0x3d	; 61
    aa4a:	de b7       	in	r29, 0x3e	; 62
    aa4c:	2b 97       	sbiw	r28, 0x0b	; 11
    aa4e:	0f b6       	in	r0, 0x3f	; 63
    aa50:	f8 94       	cli
    aa52:	de bf       	out	0x3e, r29	; 62
    aa54:	0f be       	out	0x3f, r0	; 63
    aa56:	cd bf       	out	0x3d, r28	; 61
    aa58:	9b 83       	std	Y+3, r25	; 0x03
    aa5a:	8a 83       	std	Y+2, r24	; 0x02
    aa5c:	6c 83       	std	Y+4, r22	; 0x04
    aa5e:	4d 83       	std	Y+5, r20	; 0x05
    aa60:	0e 83       	std	Y+6, r16	; 0x06
    aa62:	1f 83       	std	Y+7, r17	; 0x07
    aa64:	28 87       	std	Y+8, r18	; 0x08
    aa66:	39 87       	std	Y+9, r19	; 0x09
    aa68:	ea 86       	std	Y+10, r14	; 0x0a
    aa6a:	cb 86       	std	Y+11, r12	; 0x0b
    aa6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    aa6e:	88 23       	and	r24, r24
    aa70:	d9 f1       	breq	.+118    	; 0xaae8 <_ZN7TwoWire11requestFromEhhmhh+0xac>
    aa72:	8a 81       	ldd	r24, Y+2	; 0x02
    aa74:	9b 81       	ldd	r25, Y+3	; 0x03
    aa76:	6c 81       	ldd	r22, Y+4	; 0x04
    aa78:	98 d0       	rcall	.+304    	; 0xabaa <_ZN7TwoWire17beginTransmissionEh>
    aa7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    aa7c:	84 30       	cpi	r24, 0x04	; 4
    aa7e:	10 f0       	brcs	.+4      	; 0xaa84 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    aa80:	83 e0       	ldi	r24, 0x03	; 3
    aa82:	8a 87       	std	Y+10, r24	; 0x0a
    aa84:	8a 85       	ldd	r24, Y+10	; 0x0a
    aa86:	9f ef       	ldi	r25, 0xFF	; 255
    aa88:	98 0f       	add	r25, r24
    aa8a:	9a 87       	std	Y+10, r25	; 0x0a
    aa8c:	91 e0       	ldi	r25, 0x01	; 1
    aa8e:	88 23       	and	r24, r24
    aa90:	09 f4       	brne	.+2      	; 0xaa94 <_ZN7TwoWire11requestFromEhhmhh+0x58>
    aa92:	90 e0       	ldi	r25, 0x00	; 0
    aa94:	99 23       	and	r25, r25
    aa96:	21 f1       	breq	.+72     	; 0xaae0 <_ZN7TwoWire11requestFromEhhmhh+0xa4>
    aa98:	8a 81       	ldd	r24, Y+2	; 0x02
    aa9a:	9b 81       	ldd	r25, Y+3	; 0x03
    aa9c:	fc 01       	movw	r30, r24
    aa9e:	80 81       	ld	r24, Z
    aaa0:	91 81       	ldd	r25, Z+1	; 0x01
    aaa2:	fc 01       	movw	r30, r24
    aaa4:	20 81       	ld	r18, Z
    aaa6:	31 81       	ldd	r19, Z+1	; 0x01
    aaa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    aaaa:	88 2f       	mov	r24, r24
    aaac:	90 e0       	ldi	r25, 0x00	; 0
    aaae:	ac 01       	movw	r20, r24
    aab0:	44 0f       	add	r20, r20
    aab2:	55 1f       	adc	r21, r21
    aab4:	44 0f       	add	r20, r20
    aab6:	55 1f       	adc	r21, r21
    aab8:	44 0f       	add	r20, r20
    aaba:	55 1f       	adc	r21, r21
    aabc:	8e 81       	ldd	r24, Y+6	; 0x06
    aabe:	9f 81       	ldd	r25, Y+7	; 0x07
    aac0:	a8 85       	ldd	r26, Y+8	; 0x08
    aac2:	b9 85       	ldd	r27, Y+9	; 0x09
    aac4:	04 c0       	rjmp	.+8      	; 0xaace <_ZN7TwoWire11requestFromEhhmhh+0x92>
    aac6:	b6 95       	lsr	r27
    aac8:	a7 95       	ror	r26
    aaca:	97 95       	ror	r25
    aacc:	87 95       	ror	r24
    aace:	4a 95       	dec	r20
    aad0:	d2 f7       	brpl	.-12     	; 0xaac6 <_ZN7TwoWire11requestFromEhhmhh+0x8a>
    aad2:	48 2f       	mov	r20, r24
    aad4:	8a 81       	ldd	r24, Y+2	; 0x02
    aad6:	9b 81       	ldd	r25, Y+3	; 0x03
    aad8:	64 2f       	mov	r22, r20
    aada:	f9 01       	movw	r30, r18
    aadc:	19 95       	eicall
    aade:	d2 cf       	rjmp	.-92     	; 0xaa84 <_ZN7TwoWire11requestFromEhhmhh+0x48>
    aae0:	8a 81       	ldd	r24, Y+2	; 0x02
    aae2:	9b 81       	ldd	r25, Y+3	; 0x03
    aae4:	60 e0       	ldi	r22, 0x00	; 0
    aae6:	91 d0       	rcall	.+290    	; 0xac0a <_ZN7TwoWire15endTransmissionEh>
    aae8:	8d 81       	ldd	r24, Y+5	; 0x05
    aaea:	81 32       	cpi	r24, 0x21	; 33
    aaec:	10 f0       	brcs	.+4      	; 0xaaf2 <_ZN7TwoWire11requestFromEhhmhh+0xb6>
    aaee:	80 e2       	ldi	r24, 0x20	; 32
    aaf0:	8d 83       	std	Y+5, r24	; 0x05
    aaf2:	2b 85       	ldd	r18, Y+11	; 0x0b
    aaf4:	4d 81       	ldd	r20, Y+5	; 0x05
    aaf6:	6b e7       	ldi	r22, 0x7B	; 123
    aaf8:	75 e0       	ldi	r23, 0x05	; 5
    aafa:	8c 81       	ldd	r24, Y+4	; 0x04
    aafc:	d5 db       	rcall	.-2134   	; 0xa2a8 <twi_readFrom>
    aafe:	89 83       	std	Y+1, r24	; 0x01
    ab00:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    ab04:	89 81       	ldd	r24, Y+1	; 0x01
    ab06:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    ab0a:	89 81       	ldd	r24, Y+1	; 0x01
    ab0c:	2b 96       	adiw	r28, 0x0b	; 11
    ab0e:	0f b6       	in	r0, 0x3f	; 63
    ab10:	f8 94       	cli
    ab12:	de bf       	out	0x3e, r29	; 62
    ab14:	0f be       	out	0x3f, r0	; 63
    ab16:	cd bf       	out	0x3d, r28	; 61
    ab18:	df 91       	pop	r29
    ab1a:	cf 91       	pop	r28
    ab1c:	1f 91       	pop	r17
    ab1e:	0f 91       	pop	r16
    ab20:	ef 90       	pop	r14
    ab22:	cf 90       	pop	r12
    ab24:	08 95       	ret

0000ab26 <_ZN7TwoWire11requestFromEhhh>:
    ab26:	cf 92       	push	r12
    ab28:	ef 92       	push	r14
    ab2a:	0f 93       	push	r16
    ab2c:	1f 93       	push	r17
    ab2e:	cf 93       	push	r28
    ab30:	df 93       	push	r29
    ab32:	00 d0       	rcall	.+0      	; 0xab34 <_ZN7TwoWire11requestFromEhhh+0xe>
    ab34:	1f 92       	push	r1
    ab36:	1f 92       	push	r1
    ab38:	cd b7       	in	r28, 0x3d	; 61
    ab3a:	de b7       	in	r29, 0x3e	; 62
    ab3c:	9a 83       	std	Y+2, r25	; 0x02
    ab3e:	89 83       	std	Y+1, r24	; 0x01
    ab40:	6b 83       	std	Y+3, r22	; 0x03
    ab42:	4c 83       	std	Y+4, r20	; 0x04
    ab44:	2d 83       	std	Y+5, r18	; 0x05
    ab46:	89 81       	ldd	r24, Y+1	; 0x01
    ab48:	9a 81       	ldd	r25, Y+2	; 0x02
    ab4a:	cd 80       	ldd	r12, Y+5	; 0x05
    ab4c:	e1 2c       	mov	r14, r1
    ab4e:	00 e0       	ldi	r16, 0x00	; 0
    ab50:	10 e0       	ldi	r17, 0x00	; 0
    ab52:	98 01       	movw	r18, r16
    ab54:	4c 81       	ldd	r20, Y+4	; 0x04
    ab56:	6b 81       	ldd	r22, Y+3	; 0x03
    ab58:	71 df       	rcall	.-286    	; 0xaa3c <_ZN7TwoWire11requestFromEhhmhh>
    ab5a:	0f 90       	pop	r0
    ab5c:	0f 90       	pop	r0
    ab5e:	0f 90       	pop	r0
    ab60:	0f 90       	pop	r0
    ab62:	0f 90       	pop	r0
    ab64:	df 91       	pop	r29
    ab66:	cf 91       	pop	r28
    ab68:	1f 91       	pop	r17
    ab6a:	0f 91       	pop	r16
    ab6c:	ef 90       	pop	r14
    ab6e:	cf 90       	pop	r12
    ab70:	08 95       	ret

0000ab72 <_ZN7TwoWire11requestFromEii>:
    ab72:	cf 93       	push	r28
    ab74:	df 93       	push	r29
    ab76:	00 d0       	rcall	.+0      	; 0xab78 <_ZN7TwoWire11requestFromEii+0x6>
    ab78:	00 d0       	rcall	.+0      	; 0xab7a <_ZN7TwoWire11requestFromEii+0x8>
    ab7a:	cd b7       	in	r28, 0x3d	; 61
    ab7c:	de b7       	in	r29, 0x3e	; 62
    ab7e:	9a 83       	std	Y+2, r25	; 0x02
    ab80:	89 83       	std	Y+1, r24	; 0x01
    ab82:	7c 83       	std	Y+4, r23	; 0x04
    ab84:	6b 83       	std	Y+3, r22	; 0x03
    ab86:	5e 83       	std	Y+6, r21	; 0x06
    ab88:	4d 83       	std	Y+5, r20	; 0x05
    ab8a:	4d 81       	ldd	r20, Y+5	; 0x05
    ab8c:	3b 81       	ldd	r19, Y+3	; 0x03
    ab8e:	89 81       	ldd	r24, Y+1	; 0x01
    ab90:	9a 81       	ldd	r25, Y+2	; 0x02
    ab92:	21 e0       	ldi	r18, 0x01	; 1
    ab94:	63 2f       	mov	r22, r19
    ab96:	c7 df       	rcall	.-114    	; 0xab26 <_ZN7TwoWire11requestFromEhhh>
    ab98:	26 96       	adiw	r28, 0x06	; 6
    ab9a:	0f b6       	in	r0, 0x3f	; 63
    ab9c:	f8 94       	cli
    ab9e:	de bf       	out	0x3e, r29	; 62
    aba0:	0f be       	out	0x3f, r0	; 63
    aba2:	cd bf       	out	0x3d, r28	; 61
    aba4:	df 91       	pop	r29
    aba6:	cf 91       	pop	r28
    aba8:	08 95       	ret

0000abaa <_ZN7TwoWire17beginTransmissionEh>:
    abaa:	cf 93       	push	r28
    abac:	df 93       	push	r29
    abae:	00 d0       	rcall	.+0      	; 0xabb0 <_ZN7TwoWire17beginTransmissionEh+0x6>
    abb0:	cd b7       	in	r28, 0x3d	; 61
    abb2:	de b7       	in	r29, 0x3e	; 62
    abb4:	9a 83       	std	Y+2, r25	; 0x02
    abb6:	89 83       	std	Y+1, r24	; 0x01
    abb8:	6b 83       	std	Y+3, r22	; 0x03
    abba:	81 e0       	ldi	r24, 0x01	; 1
    abbc:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <_ZN7TwoWire12transmittingE>
    abc0:	8b 81       	ldd	r24, Y+3	; 0x03
    abc2:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <_ZN7TwoWire9txAddressE>
    abc6:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    abca:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    abce:	00 00       	nop
    abd0:	0f 90       	pop	r0
    abd2:	0f 90       	pop	r0
    abd4:	0f 90       	pop	r0
    abd6:	df 91       	pop	r29
    abd8:	cf 91       	pop	r28
    abda:	08 95       	ret

0000abdc <_ZN7TwoWire17beginTransmissionEi>:
    abdc:	cf 93       	push	r28
    abde:	df 93       	push	r29
    abe0:	00 d0       	rcall	.+0      	; 0xabe2 <_ZN7TwoWire17beginTransmissionEi+0x6>
    abe2:	1f 92       	push	r1
    abe4:	cd b7       	in	r28, 0x3d	; 61
    abe6:	de b7       	in	r29, 0x3e	; 62
    abe8:	9a 83       	std	Y+2, r25	; 0x02
    abea:	89 83       	std	Y+1, r24	; 0x01
    abec:	7c 83       	std	Y+4, r23	; 0x04
    abee:	6b 83       	std	Y+3, r22	; 0x03
    abf0:	2b 81       	ldd	r18, Y+3	; 0x03
    abf2:	89 81       	ldd	r24, Y+1	; 0x01
    abf4:	9a 81       	ldd	r25, Y+2	; 0x02
    abf6:	62 2f       	mov	r22, r18
    abf8:	d8 df       	rcall	.-80     	; 0xabaa <_ZN7TwoWire17beginTransmissionEh>
    abfa:	00 00       	nop
    abfc:	0f 90       	pop	r0
    abfe:	0f 90       	pop	r0
    ac00:	0f 90       	pop	r0
    ac02:	0f 90       	pop	r0
    ac04:	df 91       	pop	r29
    ac06:	cf 91       	pop	r28
    ac08:	08 95       	ret

0000ac0a <_ZN7TwoWire15endTransmissionEh>:
    ac0a:	0f 93       	push	r16
    ac0c:	cf 93       	push	r28
    ac0e:	df 93       	push	r29
    ac10:	00 d0       	rcall	.+0      	; 0xac12 <_ZN7TwoWire15endTransmissionEh+0x8>
    ac12:	1f 92       	push	r1
    ac14:	cd b7       	in	r28, 0x3d	; 61
    ac16:	de b7       	in	r29, 0x3e	; 62
    ac18:	9b 83       	std	Y+3, r25	; 0x03
    ac1a:	8a 83       	std	Y+2, r24	; 0x02
    ac1c:	6c 83       	std	Y+4, r22	; 0x04
    ac1e:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    ac22:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <_ZN7TwoWire9txAddressE>
    ac26:	0c 81       	ldd	r16, Y+4	; 0x04
    ac28:	21 e0       	ldi	r18, 0x01	; 1
    ac2a:	49 2f       	mov	r20, r25
    ac2c:	6e e9       	ldi	r22, 0x9E	; 158
    ac2e:	75 e0       	ldi	r23, 0x05	; 5
    ac30:	22 dc       	rcall	.-1980   	; 0xa476 <twi_writeTo>
    ac32:	89 83       	std	Y+1, r24	; 0x01
    ac34:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    ac38:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    ac3c:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire12transmittingE>
    ac40:	89 81       	ldd	r24, Y+1	; 0x01
    ac42:	0f 90       	pop	r0
    ac44:	0f 90       	pop	r0
    ac46:	0f 90       	pop	r0
    ac48:	0f 90       	pop	r0
    ac4a:	df 91       	pop	r29
    ac4c:	cf 91       	pop	r28
    ac4e:	0f 91       	pop	r16
    ac50:	08 95       	ret

0000ac52 <_ZN7TwoWire15endTransmissionEv>:
    ac52:	cf 93       	push	r28
    ac54:	df 93       	push	r29
    ac56:	1f 92       	push	r1
    ac58:	1f 92       	push	r1
    ac5a:	cd b7       	in	r28, 0x3d	; 61
    ac5c:	de b7       	in	r29, 0x3e	; 62
    ac5e:	9a 83       	std	Y+2, r25	; 0x02
    ac60:	89 83       	std	Y+1, r24	; 0x01
    ac62:	89 81       	ldd	r24, Y+1	; 0x01
    ac64:	9a 81       	ldd	r25, Y+2	; 0x02
    ac66:	61 e0       	ldi	r22, 0x01	; 1
    ac68:	d0 df       	rcall	.-96     	; 0xac0a <_ZN7TwoWire15endTransmissionEh>
    ac6a:	0f 90       	pop	r0
    ac6c:	0f 90       	pop	r0
    ac6e:	df 91       	pop	r29
    ac70:	cf 91       	pop	r28
    ac72:	08 95       	ret

0000ac74 <_ZN7TwoWire5writeEh>:
    ac74:	cf 93       	push	r28
    ac76:	df 93       	push	r29
    ac78:	00 d0       	rcall	.+0      	; 0xac7a <_ZN7TwoWire5writeEh+0x6>
    ac7a:	cd b7       	in	r28, 0x3d	; 61
    ac7c:	de b7       	in	r29, 0x3e	; 62
    ac7e:	9a 83       	std	Y+2, r25	; 0x02
    ac80:	89 83       	std	Y+1, r24	; 0x01
    ac82:	6b 83       	std	Y+3, r22	; 0x03
    ac84:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <_ZN7TwoWire12transmittingE>
    ac88:	88 23       	and	r24, r24
    ac8a:	f9 f0       	breq	.+62     	; 0xacca <_ZN7TwoWire5writeEh+0x56>
    ac8c:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    ac90:	80 32       	cpi	r24, 0x20	; 32
    ac92:	40 f0       	brcs	.+16     	; 0xaca4 <_ZN7TwoWire5writeEh+0x30>
    ac94:	89 81       	ldd	r24, Y+1	; 0x01
    ac96:	9a 81       	ldd	r25, Y+2	; 0x02
    ac98:	61 e0       	ldi	r22, 0x01	; 1
    ac9a:	70 e0       	ldi	r23, 0x00	; 0
    ac9c:	40 de       	rcall	.-896    	; 0xa91e <_ZN5Print13setWriteErrorEi>
    ac9e:	80 e0       	ldi	r24, 0x00	; 0
    aca0:	90 e0       	ldi	r25, 0x00	; 0
    aca2:	19 c0       	rjmp	.+50     	; 0xacd6 <_ZN7TwoWire5writeEh+0x62>
    aca4:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    aca8:	88 2f       	mov	r24, r24
    acaa:	90 e0       	ldi	r25, 0x00	; 0
    acac:	2b 81       	ldd	r18, Y+3	; 0x03
    acae:	82 56       	subi	r24, 0x62	; 98
    acb0:	9a 4f       	sbci	r25, 0xFA	; 250
    acb2:	fc 01       	movw	r30, r24
    acb4:	20 83       	st	Z, r18
    acb6:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    acba:	8f 5f       	subi	r24, 0xFF	; 255
    acbc:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    acc0:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    acc4:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    acc8:	04 c0       	rjmp	.+8      	; 0xacd2 <_ZN7TwoWire5writeEh+0x5e>
    acca:	ce 01       	movw	r24, r28
    accc:	03 96       	adiw	r24, 0x03	; 3
    acce:	61 e0       	ldi	r22, 0x01	; 1
    acd0:	9f da       	rcall	.-2754   	; 0xa210 <twi_transmit>
    acd2:	81 e0       	ldi	r24, 0x01	; 1
    acd4:	90 e0       	ldi	r25, 0x00	; 0
    acd6:	0f 90       	pop	r0
    acd8:	0f 90       	pop	r0
    acda:	0f 90       	pop	r0
    acdc:	df 91       	pop	r29
    acde:	cf 91       	pop	r28
    ace0:	08 95       	ret

0000ace2 <_ZN7TwoWire5writeEPKhj>:
    ace2:	cf 93       	push	r28
    ace4:	df 93       	push	r29
    ace6:	cd b7       	in	r28, 0x3d	; 61
    ace8:	de b7       	in	r29, 0x3e	; 62
    acea:	28 97       	sbiw	r28, 0x08	; 8
    acec:	0f b6       	in	r0, 0x3f	; 63
    acee:	f8 94       	cli
    acf0:	de bf       	out	0x3e, r29	; 62
    acf2:	0f be       	out	0x3f, r0	; 63
    acf4:	cd bf       	out	0x3d, r28	; 61
    acf6:	9c 83       	std	Y+4, r25	; 0x04
    acf8:	8b 83       	std	Y+3, r24	; 0x03
    acfa:	7e 83       	std	Y+6, r23	; 0x06
    acfc:	6d 83       	std	Y+5, r22	; 0x05
    acfe:	58 87       	std	Y+8, r21	; 0x08
    ad00:	4f 83       	std	Y+7, r20	; 0x07
    ad02:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <_ZN7TwoWire12transmittingE>
    ad06:	88 23       	and	r24, r24
    ad08:	21 f1       	breq	.+72     	; 0xad52 <_ZN7TwoWire5writeEPKhj+0x70>
    ad0a:	1a 82       	std	Y+2, r1	; 0x02
    ad0c:	19 82       	std	Y+1, r1	; 0x01
    ad0e:	29 81       	ldd	r18, Y+1	; 0x01
    ad10:	3a 81       	ldd	r19, Y+2	; 0x02
    ad12:	8f 81       	ldd	r24, Y+7	; 0x07
    ad14:	98 85       	ldd	r25, Y+8	; 0x08
    ad16:	28 17       	cp	r18, r24
    ad18:	39 07       	cpc	r19, r25
    ad1a:	00 f5       	brcc	.+64     	; 0xad5c <_ZN7TwoWire5writeEPKhj+0x7a>
    ad1c:	8b 81       	ldd	r24, Y+3	; 0x03
    ad1e:	9c 81       	ldd	r25, Y+4	; 0x04
    ad20:	fc 01       	movw	r30, r24
    ad22:	80 81       	ld	r24, Z
    ad24:	91 81       	ldd	r25, Z+1	; 0x01
    ad26:	fc 01       	movw	r30, r24
    ad28:	20 81       	ld	r18, Z
    ad2a:	31 81       	ldd	r19, Z+1	; 0x01
    ad2c:	4d 81       	ldd	r20, Y+5	; 0x05
    ad2e:	5e 81       	ldd	r21, Y+6	; 0x06
    ad30:	89 81       	ldd	r24, Y+1	; 0x01
    ad32:	9a 81       	ldd	r25, Y+2	; 0x02
    ad34:	84 0f       	add	r24, r20
    ad36:	95 1f       	adc	r25, r21
    ad38:	fc 01       	movw	r30, r24
    ad3a:	40 81       	ld	r20, Z
    ad3c:	8b 81       	ldd	r24, Y+3	; 0x03
    ad3e:	9c 81       	ldd	r25, Y+4	; 0x04
    ad40:	64 2f       	mov	r22, r20
    ad42:	f9 01       	movw	r30, r18
    ad44:	19 95       	eicall
    ad46:	89 81       	ldd	r24, Y+1	; 0x01
    ad48:	9a 81       	ldd	r25, Y+2	; 0x02
    ad4a:	01 96       	adiw	r24, 0x01	; 1
    ad4c:	9a 83       	std	Y+2, r25	; 0x02
    ad4e:	89 83       	std	Y+1, r24	; 0x01
    ad50:	de cf       	rjmp	.-68     	; 0xad0e <_ZN7TwoWire5writeEPKhj+0x2c>
    ad52:	2f 81       	ldd	r18, Y+7	; 0x07
    ad54:	8d 81       	ldd	r24, Y+5	; 0x05
    ad56:	9e 81       	ldd	r25, Y+6	; 0x06
    ad58:	62 2f       	mov	r22, r18
    ad5a:	5a da       	rcall	.-2892   	; 0xa210 <twi_transmit>
    ad5c:	8f 81       	ldd	r24, Y+7	; 0x07
    ad5e:	98 85       	ldd	r25, Y+8	; 0x08
    ad60:	28 96       	adiw	r28, 0x08	; 8
    ad62:	0f b6       	in	r0, 0x3f	; 63
    ad64:	f8 94       	cli
    ad66:	de bf       	out	0x3e, r29	; 62
    ad68:	0f be       	out	0x3f, r0	; 63
    ad6a:	cd bf       	out	0x3d, r28	; 61
    ad6c:	df 91       	pop	r29
    ad6e:	cf 91       	pop	r28
    ad70:	08 95       	ret

0000ad72 <_ZN7TwoWire9availableEv>:
    ad72:	cf 93       	push	r28
    ad74:	df 93       	push	r29
    ad76:	1f 92       	push	r1
    ad78:	1f 92       	push	r1
    ad7a:	cd b7       	in	r28, 0x3d	; 61
    ad7c:	de b7       	in	r29, 0x3e	; 62
    ad7e:	9a 83       	std	Y+2, r25	; 0x02
    ad80:	89 83       	std	Y+1, r24	; 0x01
    ad82:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    ad86:	28 2f       	mov	r18, r24
    ad88:	30 e0       	ldi	r19, 0x00	; 0
    ad8a:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    ad8e:	88 2f       	mov	r24, r24
    ad90:	90 e0       	ldi	r25, 0x00	; 0
    ad92:	a9 01       	movw	r20, r18
    ad94:	48 1b       	sub	r20, r24
    ad96:	59 0b       	sbc	r21, r25
    ad98:	ca 01       	movw	r24, r20
    ad9a:	0f 90       	pop	r0
    ad9c:	0f 90       	pop	r0
    ad9e:	df 91       	pop	r29
    ada0:	cf 91       	pop	r28
    ada2:	08 95       	ret

0000ada4 <_ZN7TwoWire4readEv>:
    ada4:	cf 93       	push	r28
    ada6:	df 93       	push	r29
    ada8:	00 d0       	rcall	.+0      	; 0xadaa <_ZN7TwoWire4readEv+0x6>
    adaa:	1f 92       	push	r1
    adac:	cd b7       	in	r28, 0x3d	; 61
    adae:	de b7       	in	r29, 0x3e	; 62
    adb0:	9c 83       	std	Y+4, r25	; 0x04
    adb2:	8b 83       	std	Y+3, r24	; 0x03
    adb4:	8f ef       	ldi	r24, 0xFF	; 255
    adb6:	9f ef       	ldi	r25, 0xFF	; 255
    adb8:	9a 83       	std	Y+2, r25	; 0x02
    adba:	89 83       	std	Y+1, r24	; 0x01
    adbc:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    adc0:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    adc4:	98 17       	cp	r25, r24
    adc6:	88 f4       	brcc	.+34     	; 0xadea <_ZN7TwoWire4readEv+0x46>
    adc8:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    adcc:	88 2f       	mov	r24, r24
    adce:	90 e0       	ldi	r25, 0x00	; 0
    add0:	85 58       	subi	r24, 0x85	; 133
    add2:	9a 4f       	sbci	r25, 0xFA	; 250
    add4:	fc 01       	movw	r30, r24
    add6:	80 81       	ld	r24, Z
    add8:	88 2f       	mov	r24, r24
    adda:	90 e0       	ldi	r25, 0x00	; 0
    addc:	9a 83       	std	Y+2, r25	; 0x02
    adde:	89 83       	std	Y+1, r24	; 0x01
    ade0:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    ade4:	8f 5f       	subi	r24, 0xFF	; 255
    ade6:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    adea:	89 81       	ldd	r24, Y+1	; 0x01
    adec:	9a 81       	ldd	r25, Y+2	; 0x02
    adee:	0f 90       	pop	r0
    adf0:	0f 90       	pop	r0
    adf2:	0f 90       	pop	r0
    adf4:	0f 90       	pop	r0
    adf6:	df 91       	pop	r29
    adf8:	cf 91       	pop	r28
    adfa:	08 95       	ret

0000adfc <_ZN7TwoWire4peekEv>:
    adfc:	cf 93       	push	r28
    adfe:	df 93       	push	r29
    ae00:	00 d0       	rcall	.+0      	; 0xae02 <_ZN7TwoWire4peekEv+0x6>
    ae02:	1f 92       	push	r1
    ae04:	cd b7       	in	r28, 0x3d	; 61
    ae06:	de b7       	in	r29, 0x3e	; 62
    ae08:	9c 83       	std	Y+4, r25	; 0x04
    ae0a:	8b 83       	std	Y+3, r24	; 0x03
    ae0c:	8f ef       	ldi	r24, 0xFF	; 255
    ae0e:	9f ef       	ldi	r25, 0xFF	; 255
    ae10:	9a 83       	std	Y+2, r25	; 0x02
    ae12:	89 83       	std	Y+1, r24	; 0x01
    ae14:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    ae18:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    ae1c:	98 17       	cp	r25, r24
    ae1e:	60 f4       	brcc	.+24     	; 0xae38 <_ZN7TwoWire4peekEv+0x3c>
    ae20:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    ae24:	88 2f       	mov	r24, r24
    ae26:	90 e0       	ldi	r25, 0x00	; 0
    ae28:	85 58       	subi	r24, 0x85	; 133
    ae2a:	9a 4f       	sbci	r25, 0xFA	; 250
    ae2c:	fc 01       	movw	r30, r24
    ae2e:	80 81       	ld	r24, Z
    ae30:	88 2f       	mov	r24, r24
    ae32:	90 e0       	ldi	r25, 0x00	; 0
    ae34:	9a 83       	std	Y+2, r25	; 0x02
    ae36:	89 83       	std	Y+1, r24	; 0x01
    ae38:	89 81       	ldd	r24, Y+1	; 0x01
    ae3a:	9a 81       	ldd	r25, Y+2	; 0x02
    ae3c:	0f 90       	pop	r0
    ae3e:	0f 90       	pop	r0
    ae40:	0f 90       	pop	r0
    ae42:	0f 90       	pop	r0
    ae44:	df 91       	pop	r29
    ae46:	cf 91       	pop	r28
    ae48:	08 95       	ret

0000ae4a <_ZN7TwoWire5flushEv>:
    ae4a:	cf 93       	push	r28
    ae4c:	df 93       	push	r29
    ae4e:	1f 92       	push	r1
    ae50:	1f 92       	push	r1
    ae52:	cd b7       	in	r28, 0x3d	; 61
    ae54:	de b7       	in	r29, 0x3e	; 62
    ae56:	9a 83       	std	Y+2, r25	; 0x02
    ae58:	89 83       	std	Y+1, r24	; 0x01
    ae5a:	00 00       	nop
    ae5c:	0f 90       	pop	r0
    ae5e:	0f 90       	pop	r0
    ae60:	df 91       	pop	r29
    ae62:	cf 91       	pop	r28
    ae64:	08 95       	ret

0000ae66 <_ZN7TwoWire16onReceiveServiceEPhi>:
    ae66:	cf 93       	push	r28
    ae68:	df 93       	push	r29
    ae6a:	00 d0       	rcall	.+0      	; 0xae6c <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    ae6c:	1f 92       	push	r1
    ae6e:	1f 92       	push	r1
    ae70:	cd b7       	in	r28, 0x3d	; 61
    ae72:	de b7       	in	r29, 0x3e	; 62
    ae74:	9b 83       	std	Y+3, r25	; 0x03
    ae76:	8a 83       	std	Y+2, r24	; 0x02
    ae78:	7d 83       	std	Y+5, r23	; 0x05
    ae7a:	6c 83       	std	Y+4, r22	; 0x04
    ae7c:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <_ZN7TwoWire14user_onReceiveE>
    ae80:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <_ZN7TwoWire14user_onReceiveE+0x1>
    ae84:	89 2b       	or	r24, r25
    ae86:	89 f1       	breq	.+98     	; 0xaeea <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    ae88:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    ae8c:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    ae90:	98 17       	cp	r25, r24
    ae92:	68 f1       	brcs	.+90     	; 0xaeee <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    ae94:	19 82       	std	Y+1, r1	; 0x01
    ae96:	89 81       	ldd	r24, Y+1	; 0x01
    ae98:	28 2f       	mov	r18, r24
    ae9a:	30 e0       	ldi	r19, 0x00	; 0
    ae9c:	8c 81       	ldd	r24, Y+4	; 0x04
    ae9e:	9d 81       	ldd	r25, Y+5	; 0x05
    aea0:	28 17       	cp	r18, r24
    aea2:	39 07       	cpc	r19, r25
    aea4:	a4 f4       	brge	.+40     	; 0xaece <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    aea6:	89 81       	ldd	r24, Y+1	; 0x01
    aea8:	88 2f       	mov	r24, r24
    aeaa:	90 e0       	ldi	r25, 0x00	; 0
    aeac:	29 81       	ldd	r18, Y+1	; 0x01
    aeae:	22 2f       	mov	r18, r18
    aeb0:	30 e0       	ldi	r19, 0x00	; 0
    aeb2:	4a 81       	ldd	r20, Y+2	; 0x02
    aeb4:	5b 81       	ldd	r21, Y+3	; 0x03
    aeb6:	24 0f       	add	r18, r20
    aeb8:	35 1f       	adc	r19, r21
    aeba:	f9 01       	movw	r30, r18
    aebc:	20 81       	ld	r18, Z
    aebe:	85 58       	subi	r24, 0x85	; 133
    aec0:	9a 4f       	sbci	r25, 0xFA	; 250
    aec2:	fc 01       	movw	r30, r24
    aec4:	20 83       	st	Z, r18
    aec6:	89 81       	ldd	r24, Y+1	; 0x01
    aec8:	8f 5f       	subi	r24, 0xFF	; 255
    aeca:	89 83       	std	Y+1, r24	; 0x01
    aecc:	e4 cf       	rjmp	.-56     	; 0xae96 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    aece:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <_ZN7TwoWire13rxBufferIndexE>
    aed2:	8c 81       	ldd	r24, Y+4	; 0x04
    aed4:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <_ZN7TwoWire14rxBufferLengthE>
    aed8:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <_ZN7TwoWire14user_onReceiveE>
    aedc:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <_ZN7TwoWire14user_onReceiveE+0x1>
    aee0:	8c 81       	ldd	r24, Y+4	; 0x04
    aee2:	9d 81       	ldd	r25, Y+5	; 0x05
    aee4:	f9 01       	movw	r30, r18
    aee6:	19 95       	eicall
    aee8:	03 c0       	rjmp	.+6      	; 0xaef0 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    aeea:	00 00       	nop
    aeec:	01 c0       	rjmp	.+2      	; 0xaef0 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
    aeee:	00 00       	nop
    aef0:	0f 90       	pop	r0
    aef2:	0f 90       	pop	r0
    aef4:	0f 90       	pop	r0
    aef6:	0f 90       	pop	r0
    aef8:	0f 90       	pop	r0
    aefa:	df 91       	pop	r29
    aefc:	cf 91       	pop	r28
    aefe:	08 95       	ret

0000af00 <_ZN7TwoWire16onRequestServiceEv>:
    af00:	cf 93       	push	r28
    af02:	df 93       	push	r29
    af04:	cd b7       	in	r28, 0x3d	; 61
    af06:	de b7       	in	r29, 0x3e	; 62
    af08:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <_ZN7TwoWire14user_onRequestE>
    af0c:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <_ZN7TwoWire14user_onRequestE+0x1>
    af10:	89 2b       	or	r24, r25
    af12:	59 f0       	breq	.+22     	; 0xaf2a <_ZN7TwoWire16onRequestServiceEv+0x2a>
    af14:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire13txBufferIndexE>
    af18:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    af1c:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <_ZN7TwoWire14user_onRequestE>
    af20:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <_ZN7TwoWire14user_onRequestE+0x1>
    af24:	fc 01       	movw	r30, r24
    af26:	19 95       	eicall
    af28:	01 c0       	rjmp	.+2      	; 0xaf2c <_ZN7TwoWire16onRequestServiceEv+0x2c>
    af2a:	00 00       	nop
    af2c:	df 91       	pop	r29
    af2e:	cf 91       	pop	r28
    af30:	08 95       	ret

0000af32 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    af32:	cf 93       	push	r28
    af34:	df 93       	push	r29
    af36:	00 d0       	rcall	.+0      	; 0xaf38 <_Z41__static_initialization_and_destruction_0ii+0x6>
    af38:	1f 92       	push	r1
    af3a:	cd b7       	in	r28, 0x3d	; 61
    af3c:	de b7       	in	r29, 0x3e	; 62
    af3e:	9a 83       	std	Y+2, r25	; 0x02
    af40:	89 83       	std	Y+1, r24	; 0x01
    af42:	7c 83       	std	Y+4, r23	; 0x04
    af44:	6b 83       	std	Y+3, r22	; 0x03
    af46:	89 81       	ldd	r24, Y+1	; 0x01
    af48:	9a 81       	ldd	r25, Y+2	; 0x02
    af4a:	01 97       	sbiw	r24, 0x01	; 1
    af4c:	39 f4       	brne	.+14     	; 0xaf5c <_Z41__static_initialization_and_destruction_0ii+0x2a>
    af4e:	8b 81       	ldd	r24, Y+3	; 0x03
    af50:	9c 81       	ldd	r25, Y+4	; 0x04
    af52:	01 96       	adiw	r24, 0x01	; 1
    af54:	19 f4       	brne	.+6      	; 0xaf5c <_Z41__static_initialization_and_destruction_0ii+0x2a>
    af56:	85 ec       	ldi	r24, 0xC5	; 197
    af58:	95 e0       	ldi	r25, 0x05	; 5
    af5a:	1e dd       	rcall	.-1476   	; 0xa998 <_ZN7TwoWireC1Ev>
    af5c:	00 00       	nop
    af5e:	0f 90       	pop	r0
    af60:	0f 90       	pop	r0
    af62:	0f 90       	pop	r0
    af64:	0f 90       	pop	r0
    af66:	df 91       	pop	r29
    af68:	cf 91       	pop	r28
    af6a:	08 95       	ret

0000af6c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    af6c:	cf 93       	push	r28
    af6e:	df 93       	push	r29
    af70:	cd b7       	in	r28, 0x3d	; 61
    af72:	de b7       	in	r29, 0x3e	; 62
    af74:	6f ef       	ldi	r22, 0xFF	; 255
    af76:	7f ef       	ldi	r23, 0xFF	; 255
    af78:	81 e0       	ldi	r24, 0x01	; 1
    af7a:	90 e0       	ldi	r25, 0x00	; 0
    af7c:	da df       	rcall	.-76     	; 0xaf32 <_Z41__static_initialization_and_destruction_0ii>
    af7e:	df 91       	pop	r29
    af80:	cf 91       	pop	r28
    af82:	08 95       	ret

0000af84 <_Z11GetDateTimev>:
#include "TimeAndDate.h"

RTCDateTime GetDateTime()
{
    af84:	cf 93       	push	r28
    af86:	df 93       	push	r29
    af88:	1f 92       	push	r1
    af8a:	1f 92       	push	r1
    af8c:	cd b7       	in	r28, 0x3d	; 61
    af8e:	de b7       	in	r29, 0x3e	; 62
    af90:	9a 83       	std	Y+2, r25	; 0x02
    af92:	89 83       	std	Y+1, r24	; 0x01
	return clock.getDateTime();
    af94:	89 81       	ldd	r24, Y+1	; 0x01
    af96:	9a 81       	ldd	r25, Y+2	; 0x02
    af98:	63 ea       	ldi	r22, 0xA3	; 163
    af9a:	73 e0       	ldi	r23, 0x03	; 3
    af9c:	0e 94 c0 35 	call	0x6b80	; 0x6b80 <_ZN6DS323111getDateTimeEv>
}
    afa0:	89 81       	ldd	r24, Y+1	; 0x01
    afa2:	9a 81       	ldd	r25, Y+2	; 0x02
    afa4:	0f 90       	pop	r0
    afa6:	0f 90       	pop	r0
    afa8:	df 91       	pop	r29
    afaa:	cf 91       	pop	r28
    afac:	08 95       	ret

0000afae <_Z14AddLeadingZeroi>:

int AddLeadingZero(int num)
{
    afae:	cf 93       	push	r28
    afb0:	df 93       	push	r29
    afb2:	1f 92       	push	r1
    afb4:	1f 92       	push	r1
    afb6:	cd b7       	in	r28, 0x3d	; 61
    afb8:	de b7       	in	r29, 0x3e	; 62
    afba:	9a 83       	std	Y+2, r25	; 0x02
    afbc:	89 83       	std	Y+1, r24	; 0x01
	if (num < 10)
    afbe:	89 81       	ldd	r24, Y+1	; 0x01
    afc0:	9a 81       	ldd	r25, Y+2	; 0x02
    afc2:	0a 97       	sbiw	r24, 0x0a	; 10
    afc4:	44 f4       	brge	.+16     	; 0xafd6 <_Z14AddLeadingZeroi+0x28>
	{
		lcd.print("0");
    afc6:	6b e9       	ldi	r22, 0x9B	; 155
    afc8:	72 e0       	ldi	r23, 0x02	; 2
    afca:	8f e7       	ldi	r24, 0x7F	; 127
    afcc:	93 e0       	ldi	r25, 0x03	; 3
    afce:	94 d4       	rcall	.+2344   	; 0xb8f8 <_ZN5Print5printEPKc>
		return num;
    afd0:	89 81       	ldd	r24, Y+1	; 0x01
    afd2:	9a 81       	ldd	r25, Y+2	; 0x02
    afd4:	02 c0       	rjmp	.+4      	; 0xafda <_Z14AddLeadingZeroi+0x2c>
	}
	return num;
    afd6:	89 81       	ldd	r24, Y+1	; 0x01
    afd8:	9a 81       	ldd	r25, Y+2	; 0x02
    afda:	0f 90       	pop	r0
    afdc:	0f 90       	pop	r0
    afde:	df 91       	pop	r29
    afe0:	cf 91       	pop	r28
    afe2:	08 95       	ret

0000afe4 <__subsf3>:
    afe4:	50 58       	subi	r21, 0x80	; 128

0000afe6 <__addsf3>:
    afe6:	bb 27       	eor	r27, r27
    afe8:	aa 27       	eor	r26, r26
    afea:	0e d0       	rcall	.+28     	; 0xb008 <__addsf3x>
    afec:	70 c1       	rjmp	.+736    	; 0xb2ce <__fp_round>
    afee:	61 d1       	rcall	.+706    	; 0xb2b2 <__fp_pscA>
    aff0:	30 f0       	brcs	.+12     	; 0xaffe <__addsf3+0x18>
    aff2:	66 d1       	rcall	.+716    	; 0xb2c0 <__fp_pscB>
    aff4:	20 f0       	brcs	.+8      	; 0xaffe <__addsf3+0x18>
    aff6:	31 f4       	brne	.+12     	; 0xb004 <__addsf3+0x1e>
    aff8:	9f 3f       	cpi	r25, 0xFF	; 255
    affa:	11 f4       	brne	.+4      	; 0xb000 <__addsf3+0x1a>
    affc:	1e f4       	brtc	.+6      	; 0xb004 <__addsf3+0x1e>
    affe:	56 c1       	rjmp	.+684    	; 0xb2ac <__fp_nan>
    b000:	0e f4       	brtc	.+2      	; 0xb004 <__addsf3+0x1e>
    b002:	e0 95       	com	r30
    b004:	e7 fb       	bst	r30, 7
    b006:	4c c1       	rjmp	.+664    	; 0xb2a0 <__fp_inf>

0000b008 <__addsf3x>:
    b008:	e9 2f       	mov	r30, r25
    b00a:	72 d1       	rcall	.+740    	; 0xb2f0 <__fp_split3>
    b00c:	80 f3       	brcs	.-32     	; 0xafee <__addsf3+0x8>
    b00e:	ba 17       	cp	r27, r26
    b010:	62 07       	cpc	r22, r18
    b012:	73 07       	cpc	r23, r19
    b014:	84 07       	cpc	r24, r20
    b016:	95 07       	cpc	r25, r21
    b018:	18 f0       	brcs	.+6      	; 0xb020 <__addsf3x+0x18>
    b01a:	71 f4       	brne	.+28     	; 0xb038 <__addsf3x+0x30>
    b01c:	9e f5       	brtc	.+102    	; 0xb084 <__addsf3x+0x7c>
    b01e:	8a c1       	rjmp	.+788    	; 0xb334 <__fp_zero>
    b020:	0e f4       	brtc	.+2      	; 0xb024 <__addsf3x+0x1c>
    b022:	e0 95       	com	r30
    b024:	0b 2e       	mov	r0, r27
    b026:	ba 2f       	mov	r27, r26
    b028:	a0 2d       	mov	r26, r0
    b02a:	0b 01       	movw	r0, r22
    b02c:	b9 01       	movw	r22, r18
    b02e:	90 01       	movw	r18, r0
    b030:	0c 01       	movw	r0, r24
    b032:	ca 01       	movw	r24, r20
    b034:	a0 01       	movw	r20, r0
    b036:	11 24       	eor	r1, r1
    b038:	ff 27       	eor	r31, r31
    b03a:	59 1b       	sub	r21, r25
    b03c:	99 f0       	breq	.+38     	; 0xb064 <__addsf3x+0x5c>
    b03e:	59 3f       	cpi	r21, 0xF9	; 249
    b040:	50 f4       	brcc	.+20     	; 0xb056 <__addsf3x+0x4e>
    b042:	50 3e       	cpi	r21, 0xE0	; 224
    b044:	68 f1       	brcs	.+90     	; 0xb0a0 <__addsf3x+0x98>
    b046:	1a 16       	cp	r1, r26
    b048:	f0 40       	sbci	r31, 0x00	; 0
    b04a:	a2 2f       	mov	r26, r18
    b04c:	23 2f       	mov	r18, r19
    b04e:	34 2f       	mov	r19, r20
    b050:	44 27       	eor	r20, r20
    b052:	58 5f       	subi	r21, 0xF8	; 248
    b054:	f3 cf       	rjmp	.-26     	; 0xb03c <__addsf3x+0x34>
    b056:	46 95       	lsr	r20
    b058:	37 95       	ror	r19
    b05a:	27 95       	ror	r18
    b05c:	a7 95       	ror	r26
    b05e:	f0 40       	sbci	r31, 0x00	; 0
    b060:	53 95       	inc	r21
    b062:	c9 f7       	brne	.-14     	; 0xb056 <__addsf3x+0x4e>
    b064:	7e f4       	brtc	.+30     	; 0xb084 <__addsf3x+0x7c>
    b066:	1f 16       	cp	r1, r31
    b068:	ba 0b       	sbc	r27, r26
    b06a:	62 0b       	sbc	r22, r18
    b06c:	73 0b       	sbc	r23, r19
    b06e:	84 0b       	sbc	r24, r20
    b070:	ba f0       	brmi	.+46     	; 0xb0a0 <__addsf3x+0x98>
    b072:	91 50       	subi	r25, 0x01	; 1
    b074:	a1 f0       	breq	.+40     	; 0xb09e <__addsf3x+0x96>
    b076:	ff 0f       	add	r31, r31
    b078:	bb 1f       	adc	r27, r27
    b07a:	66 1f       	adc	r22, r22
    b07c:	77 1f       	adc	r23, r23
    b07e:	88 1f       	adc	r24, r24
    b080:	c2 f7       	brpl	.-16     	; 0xb072 <__addsf3x+0x6a>
    b082:	0e c0       	rjmp	.+28     	; 0xb0a0 <__addsf3x+0x98>
    b084:	ba 0f       	add	r27, r26
    b086:	62 1f       	adc	r22, r18
    b088:	73 1f       	adc	r23, r19
    b08a:	84 1f       	adc	r24, r20
    b08c:	48 f4       	brcc	.+18     	; 0xb0a0 <__addsf3x+0x98>
    b08e:	87 95       	ror	r24
    b090:	77 95       	ror	r23
    b092:	67 95       	ror	r22
    b094:	b7 95       	ror	r27
    b096:	f7 95       	ror	r31
    b098:	9e 3f       	cpi	r25, 0xFE	; 254
    b09a:	08 f0       	brcs	.+2      	; 0xb09e <__addsf3x+0x96>
    b09c:	b3 cf       	rjmp	.-154    	; 0xb004 <__addsf3+0x1e>
    b09e:	93 95       	inc	r25
    b0a0:	88 0f       	add	r24, r24
    b0a2:	08 f0       	brcs	.+2      	; 0xb0a6 <__addsf3x+0x9e>
    b0a4:	99 27       	eor	r25, r25
    b0a6:	ee 0f       	add	r30, r30
    b0a8:	97 95       	ror	r25
    b0aa:	87 95       	ror	r24
    b0ac:	08 95       	ret

0000b0ae <__cmpsf2>:
    b0ae:	d4 d0       	rcall	.+424    	; 0xb258 <__fp_cmp>
    b0b0:	08 f4       	brcc	.+2      	; 0xb0b4 <__cmpsf2+0x6>
    b0b2:	81 e0       	ldi	r24, 0x01	; 1
    b0b4:	08 95       	ret

0000b0b6 <__divsf3>:
    b0b6:	0c d0       	rcall	.+24     	; 0xb0d0 <__divsf3x>
    b0b8:	0a c1       	rjmp	.+532    	; 0xb2ce <__fp_round>
    b0ba:	02 d1       	rcall	.+516    	; 0xb2c0 <__fp_pscB>
    b0bc:	40 f0       	brcs	.+16     	; 0xb0ce <__divsf3+0x18>
    b0be:	f9 d0       	rcall	.+498    	; 0xb2b2 <__fp_pscA>
    b0c0:	30 f0       	brcs	.+12     	; 0xb0ce <__divsf3+0x18>
    b0c2:	21 f4       	brne	.+8      	; 0xb0cc <__divsf3+0x16>
    b0c4:	5f 3f       	cpi	r21, 0xFF	; 255
    b0c6:	19 f0       	breq	.+6      	; 0xb0ce <__divsf3+0x18>
    b0c8:	eb c0       	rjmp	.+470    	; 0xb2a0 <__fp_inf>
    b0ca:	51 11       	cpse	r21, r1
    b0cc:	34 c1       	rjmp	.+616    	; 0xb336 <__fp_szero>
    b0ce:	ee c0       	rjmp	.+476    	; 0xb2ac <__fp_nan>

0000b0d0 <__divsf3x>:
    b0d0:	0f d1       	rcall	.+542    	; 0xb2f0 <__fp_split3>
    b0d2:	98 f3       	brcs	.-26     	; 0xb0ba <__divsf3+0x4>

0000b0d4 <__divsf3_pse>:
    b0d4:	99 23       	and	r25, r25
    b0d6:	c9 f3       	breq	.-14     	; 0xb0ca <__divsf3+0x14>
    b0d8:	55 23       	and	r21, r21
    b0da:	b1 f3       	breq	.-20     	; 0xb0c8 <__divsf3+0x12>
    b0dc:	95 1b       	sub	r25, r21
    b0de:	55 0b       	sbc	r21, r21
    b0e0:	bb 27       	eor	r27, r27
    b0e2:	aa 27       	eor	r26, r26
    b0e4:	62 17       	cp	r22, r18
    b0e6:	73 07       	cpc	r23, r19
    b0e8:	84 07       	cpc	r24, r20
    b0ea:	38 f0       	brcs	.+14     	; 0xb0fa <__divsf3_pse+0x26>
    b0ec:	9f 5f       	subi	r25, 0xFF	; 255
    b0ee:	5f 4f       	sbci	r21, 0xFF	; 255
    b0f0:	22 0f       	add	r18, r18
    b0f2:	33 1f       	adc	r19, r19
    b0f4:	44 1f       	adc	r20, r20
    b0f6:	aa 1f       	adc	r26, r26
    b0f8:	a9 f3       	breq	.-22     	; 0xb0e4 <__divsf3_pse+0x10>
    b0fa:	33 d0       	rcall	.+102    	; 0xb162 <__divsf3_pse+0x8e>
    b0fc:	0e 2e       	mov	r0, r30
    b0fe:	3a f0       	brmi	.+14     	; 0xb10e <__divsf3_pse+0x3a>
    b100:	e0 e8       	ldi	r30, 0x80	; 128
    b102:	30 d0       	rcall	.+96     	; 0xb164 <__divsf3_pse+0x90>
    b104:	91 50       	subi	r25, 0x01	; 1
    b106:	50 40       	sbci	r21, 0x00	; 0
    b108:	e6 95       	lsr	r30
    b10a:	00 1c       	adc	r0, r0
    b10c:	ca f7       	brpl	.-14     	; 0xb100 <__divsf3_pse+0x2c>
    b10e:	29 d0       	rcall	.+82     	; 0xb162 <__divsf3_pse+0x8e>
    b110:	fe 2f       	mov	r31, r30
    b112:	27 d0       	rcall	.+78     	; 0xb162 <__divsf3_pse+0x8e>
    b114:	66 0f       	add	r22, r22
    b116:	77 1f       	adc	r23, r23
    b118:	88 1f       	adc	r24, r24
    b11a:	bb 1f       	adc	r27, r27
    b11c:	26 17       	cp	r18, r22
    b11e:	37 07       	cpc	r19, r23
    b120:	48 07       	cpc	r20, r24
    b122:	ab 07       	cpc	r26, r27
    b124:	b0 e8       	ldi	r27, 0x80	; 128
    b126:	09 f0       	breq	.+2      	; 0xb12a <__divsf3_pse+0x56>
    b128:	bb 0b       	sbc	r27, r27
    b12a:	80 2d       	mov	r24, r0
    b12c:	bf 01       	movw	r22, r30
    b12e:	ff 27       	eor	r31, r31
    b130:	93 58       	subi	r25, 0x83	; 131
    b132:	5f 4f       	sbci	r21, 0xFF	; 255
    b134:	2a f0       	brmi	.+10     	; 0xb140 <__divsf3_pse+0x6c>
    b136:	9e 3f       	cpi	r25, 0xFE	; 254
    b138:	51 05       	cpc	r21, r1
    b13a:	68 f0       	brcs	.+26     	; 0xb156 <__divsf3_pse+0x82>
    b13c:	b1 c0       	rjmp	.+354    	; 0xb2a0 <__fp_inf>
    b13e:	fb c0       	rjmp	.+502    	; 0xb336 <__fp_szero>
    b140:	5f 3f       	cpi	r21, 0xFF	; 255
    b142:	ec f3       	brlt	.-6      	; 0xb13e <__divsf3_pse+0x6a>
    b144:	98 3e       	cpi	r25, 0xE8	; 232
    b146:	dc f3       	brlt	.-10     	; 0xb13e <__divsf3_pse+0x6a>
    b148:	86 95       	lsr	r24
    b14a:	77 95       	ror	r23
    b14c:	67 95       	ror	r22
    b14e:	b7 95       	ror	r27
    b150:	f7 95       	ror	r31
    b152:	9f 5f       	subi	r25, 0xFF	; 255
    b154:	c9 f7       	brne	.-14     	; 0xb148 <__divsf3_pse+0x74>
    b156:	88 0f       	add	r24, r24
    b158:	91 1d       	adc	r25, r1
    b15a:	96 95       	lsr	r25
    b15c:	87 95       	ror	r24
    b15e:	97 f9       	bld	r25, 7
    b160:	08 95       	ret
    b162:	e1 e0       	ldi	r30, 0x01	; 1
    b164:	66 0f       	add	r22, r22
    b166:	77 1f       	adc	r23, r23
    b168:	88 1f       	adc	r24, r24
    b16a:	bb 1f       	adc	r27, r27
    b16c:	62 17       	cp	r22, r18
    b16e:	73 07       	cpc	r23, r19
    b170:	84 07       	cpc	r24, r20
    b172:	ba 07       	cpc	r27, r26
    b174:	20 f0       	brcs	.+8      	; 0xb17e <__divsf3_pse+0xaa>
    b176:	62 1b       	sub	r22, r18
    b178:	73 0b       	sbc	r23, r19
    b17a:	84 0b       	sbc	r24, r20
    b17c:	ba 0b       	sbc	r27, r26
    b17e:	ee 1f       	adc	r30, r30
    b180:	88 f7       	brcc	.-30     	; 0xb164 <__divsf3_pse+0x90>
    b182:	e0 95       	com	r30
    b184:	08 95       	ret

0000b186 <__fixunssfsi>:
    b186:	bc d0       	rcall	.+376    	; 0xb300 <__fp_splitA>
    b188:	88 f0       	brcs	.+34     	; 0xb1ac <__fixunssfsi+0x26>
    b18a:	9f 57       	subi	r25, 0x7F	; 127
    b18c:	90 f0       	brcs	.+36     	; 0xb1b2 <__fixunssfsi+0x2c>
    b18e:	b9 2f       	mov	r27, r25
    b190:	99 27       	eor	r25, r25
    b192:	b7 51       	subi	r27, 0x17	; 23
    b194:	a0 f0       	brcs	.+40     	; 0xb1be <__fixunssfsi+0x38>
    b196:	d1 f0       	breq	.+52     	; 0xb1cc <__fixunssfsi+0x46>
    b198:	66 0f       	add	r22, r22
    b19a:	77 1f       	adc	r23, r23
    b19c:	88 1f       	adc	r24, r24
    b19e:	99 1f       	adc	r25, r25
    b1a0:	1a f0       	brmi	.+6      	; 0xb1a8 <__fixunssfsi+0x22>
    b1a2:	ba 95       	dec	r27
    b1a4:	c9 f7       	brne	.-14     	; 0xb198 <__fixunssfsi+0x12>
    b1a6:	12 c0       	rjmp	.+36     	; 0xb1cc <__fixunssfsi+0x46>
    b1a8:	b1 30       	cpi	r27, 0x01	; 1
    b1aa:	81 f0       	breq	.+32     	; 0xb1cc <__fixunssfsi+0x46>
    b1ac:	c3 d0       	rcall	.+390    	; 0xb334 <__fp_zero>
    b1ae:	b1 e0       	ldi	r27, 0x01	; 1
    b1b0:	08 95       	ret
    b1b2:	c0 c0       	rjmp	.+384    	; 0xb334 <__fp_zero>
    b1b4:	67 2f       	mov	r22, r23
    b1b6:	78 2f       	mov	r23, r24
    b1b8:	88 27       	eor	r24, r24
    b1ba:	b8 5f       	subi	r27, 0xF8	; 248
    b1bc:	39 f0       	breq	.+14     	; 0xb1cc <__fixunssfsi+0x46>
    b1be:	b9 3f       	cpi	r27, 0xF9	; 249
    b1c0:	cc f3       	brlt	.-14     	; 0xb1b4 <__fixunssfsi+0x2e>
    b1c2:	86 95       	lsr	r24
    b1c4:	77 95       	ror	r23
    b1c6:	67 95       	ror	r22
    b1c8:	b3 95       	inc	r27
    b1ca:	d9 f7       	brne	.-10     	; 0xb1c2 <__fixunssfsi+0x3c>
    b1cc:	3e f4       	brtc	.+14     	; 0xb1dc <__fixunssfsi+0x56>
    b1ce:	90 95       	com	r25
    b1d0:	80 95       	com	r24
    b1d2:	70 95       	com	r23
    b1d4:	61 95       	neg	r22
    b1d6:	7f 4f       	sbci	r23, 0xFF	; 255
    b1d8:	8f 4f       	sbci	r24, 0xFF	; 255
    b1da:	9f 4f       	sbci	r25, 0xFF	; 255
    b1dc:	08 95       	ret

0000b1de <__floatunsisf>:
    b1de:	e8 94       	clt
    b1e0:	09 c0       	rjmp	.+18     	; 0xb1f4 <__floatsisf+0x12>

0000b1e2 <__floatsisf>:
    b1e2:	97 fb       	bst	r25, 7
    b1e4:	3e f4       	brtc	.+14     	; 0xb1f4 <__floatsisf+0x12>
    b1e6:	90 95       	com	r25
    b1e8:	80 95       	com	r24
    b1ea:	70 95       	com	r23
    b1ec:	61 95       	neg	r22
    b1ee:	7f 4f       	sbci	r23, 0xFF	; 255
    b1f0:	8f 4f       	sbci	r24, 0xFF	; 255
    b1f2:	9f 4f       	sbci	r25, 0xFF	; 255
    b1f4:	99 23       	and	r25, r25
    b1f6:	a9 f0       	breq	.+42     	; 0xb222 <__floatsisf+0x40>
    b1f8:	f9 2f       	mov	r31, r25
    b1fa:	96 e9       	ldi	r25, 0x96	; 150
    b1fc:	bb 27       	eor	r27, r27
    b1fe:	93 95       	inc	r25
    b200:	f6 95       	lsr	r31
    b202:	87 95       	ror	r24
    b204:	77 95       	ror	r23
    b206:	67 95       	ror	r22
    b208:	b7 95       	ror	r27
    b20a:	f1 11       	cpse	r31, r1
    b20c:	f8 cf       	rjmp	.-16     	; 0xb1fe <__floatsisf+0x1c>
    b20e:	fa f4       	brpl	.+62     	; 0xb24e <__floatsisf+0x6c>
    b210:	bb 0f       	add	r27, r27
    b212:	11 f4       	brne	.+4      	; 0xb218 <__floatsisf+0x36>
    b214:	60 ff       	sbrs	r22, 0
    b216:	1b c0       	rjmp	.+54     	; 0xb24e <__floatsisf+0x6c>
    b218:	6f 5f       	subi	r22, 0xFF	; 255
    b21a:	7f 4f       	sbci	r23, 0xFF	; 255
    b21c:	8f 4f       	sbci	r24, 0xFF	; 255
    b21e:	9f 4f       	sbci	r25, 0xFF	; 255
    b220:	16 c0       	rjmp	.+44     	; 0xb24e <__floatsisf+0x6c>
    b222:	88 23       	and	r24, r24
    b224:	11 f0       	breq	.+4      	; 0xb22a <__floatsisf+0x48>
    b226:	96 e9       	ldi	r25, 0x96	; 150
    b228:	11 c0       	rjmp	.+34     	; 0xb24c <__floatsisf+0x6a>
    b22a:	77 23       	and	r23, r23
    b22c:	21 f0       	breq	.+8      	; 0xb236 <__floatsisf+0x54>
    b22e:	9e e8       	ldi	r25, 0x8E	; 142
    b230:	87 2f       	mov	r24, r23
    b232:	76 2f       	mov	r23, r22
    b234:	05 c0       	rjmp	.+10     	; 0xb240 <__floatsisf+0x5e>
    b236:	66 23       	and	r22, r22
    b238:	71 f0       	breq	.+28     	; 0xb256 <__floatsisf+0x74>
    b23a:	96 e8       	ldi	r25, 0x86	; 134
    b23c:	86 2f       	mov	r24, r22
    b23e:	70 e0       	ldi	r23, 0x00	; 0
    b240:	60 e0       	ldi	r22, 0x00	; 0
    b242:	2a f0       	brmi	.+10     	; 0xb24e <__floatsisf+0x6c>
    b244:	9a 95       	dec	r25
    b246:	66 0f       	add	r22, r22
    b248:	77 1f       	adc	r23, r23
    b24a:	88 1f       	adc	r24, r24
    b24c:	da f7       	brpl	.-10     	; 0xb244 <__floatsisf+0x62>
    b24e:	88 0f       	add	r24, r24
    b250:	96 95       	lsr	r25
    b252:	87 95       	ror	r24
    b254:	97 f9       	bld	r25, 7
    b256:	08 95       	ret

0000b258 <__fp_cmp>:
    b258:	99 0f       	add	r25, r25
    b25a:	00 08       	sbc	r0, r0
    b25c:	55 0f       	add	r21, r21
    b25e:	aa 0b       	sbc	r26, r26
    b260:	e0 e8       	ldi	r30, 0x80	; 128
    b262:	fe ef       	ldi	r31, 0xFE	; 254
    b264:	16 16       	cp	r1, r22
    b266:	17 06       	cpc	r1, r23
    b268:	e8 07       	cpc	r30, r24
    b26a:	f9 07       	cpc	r31, r25
    b26c:	c0 f0       	brcs	.+48     	; 0xb29e <__fp_cmp+0x46>
    b26e:	12 16       	cp	r1, r18
    b270:	13 06       	cpc	r1, r19
    b272:	e4 07       	cpc	r30, r20
    b274:	f5 07       	cpc	r31, r21
    b276:	98 f0       	brcs	.+38     	; 0xb29e <__fp_cmp+0x46>
    b278:	62 1b       	sub	r22, r18
    b27a:	73 0b       	sbc	r23, r19
    b27c:	84 0b       	sbc	r24, r20
    b27e:	95 0b       	sbc	r25, r21
    b280:	39 f4       	brne	.+14     	; 0xb290 <__fp_cmp+0x38>
    b282:	0a 26       	eor	r0, r26
    b284:	61 f0       	breq	.+24     	; 0xb29e <__fp_cmp+0x46>
    b286:	23 2b       	or	r18, r19
    b288:	24 2b       	or	r18, r20
    b28a:	25 2b       	or	r18, r21
    b28c:	21 f4       	brne	.+8      	; 0xb296 <__fp_cmp+0x3e>
    b28e:	08 95       	ret
    b290:	0a 26       	eor	r0, r26
    b292:	09 f4       	brne	.+2      	; 0xb296 <__fp_cmp+0x3e>
    b294:	a1 40       	sbci	r26, 0x01	; 1
    b296:	a6 95       	lsr	r26
    b298:	8f ef       	ldi	r24, 0xFF	; 255
    b29a:	81 1d       	adc	r24, r1
    b29c:	81 1d       	adc	r24, r1
    b29e:	08 95       	ret

0000b2a0 <__fp_inf>:
    b2a0:	97 f9       	bld	r25, 7
    b2a2:	9f 67       	ori	r25, 0x7F	; 127
    b2a4:	80 e8       	ldi	r24, 0x80	; 128
    b2a6:	70 e0       	ldi	r23, 0x00	; 0
    b2a8:	60 e0       	ldi	r22, 0x00	; 0
    b2aa:	08 95       	ret

0000b2ac <__fp_nan>:
    b2ac:	9f ef       	ldi	r25, 0xFF	; 255
    b2ae:	80 ec       	ldi	r24, 0xC0	; 192
    b2b0:	08 95       	ret

0000b2b2 <__fp_pscA>:
    b2b2:	00 24       	eor	r0, r0
    b2b4:	0a 94       	dec	r0
    b2b6:	16 16       	cp	r1, r22
    b2b8:	17 06       	cpc	r1, r23
    b2ba:	18 06       	cpc	r1, r24
    b2bc:	09 06       	cpc	r0, r25
    b2be:	08 95       	ret

0000b2c0 <__fp_pscB>:
    b2c0:	00 24       	eor	r0, r0
    b2c2:	0a 94       	dec	r0
    b2c4:	12 16       	cp	r1, r18
    b2c6:	13 06       	cpc	r1, r19
    b2c8:	14 06       	cpc	r1, r20
    b2ca:	05 06       	cpc	r0, r21
    b2cc:	08 95       	ret

0000b2ce <__fp_round>:
    b2ce:	09 2e       	mov	r0, r25
    b2d0:	03 94       	inc	r0
    b2d2:	00 0c       	add	r0, r0
    b2d4:	11 f4       	brne	.+4      	; 0xb2da <__fp_round+0xc>
    b2d6:	88 23       	and	r24, r24
    b2d8:	52 f0       	brmi	.+20     	; 0xb2ee <__fp_round+0x20>
    b2da:	bb 0f       	add	r27, r27
    b2dc:	40 f4       	brcc	.+16     	; 0xb2ee <__fp_round+0x20>
    b2de:	bf 2b       	or	r27, r31
    b2e0:	11 f4       	brne	.+4      	; 0xb2e6 <__fp_round+0x18>
    b2e2:	60 ff       	sbrs	r22, 0
    b2e4:	04 c0       	rjmp	.+8      	; 0xb2ee <__fp_round+0x20>
    b2e6:	6f 5f       	subi	r22, 0xFF	; 255
    b2e8:	7f 4f       	sbci	r23, 0xFF	; 255
    b2ea:	8f 4f       	sbci	r24, 0xFF	; 255
    b2ec:	9f 4f       	sbci	r25, 0xFF	; 255
    b2ee:	08 95       	ret

0000b2f0 <__fp_split3>:
    b2f0:	57 fd       	sbrc	r21, 7
    b2f2:	90 58       	subi	r25, 0x80	; 128
    b2f4:	44 0f       	add	r20, r20
    b2f6:	55 1f       	adc	r21, r21
    b2f8:	59 f0       	breq	.+22     	; 0xb310 <__fp_splitA+0x10>
    b2fa:	5f 3f       	cpi	r21, 0xFF	; 255
    b2fc:	71 f0       	breq	.+28     	; 0xb31a <__fp_splitA+0x1a>
    b2fe:	47 95       	ror	r20

0000b300 <__fp_splitA>:
    b300:	88 0f       	add	r24, r24
    b302:	97 fb       	bst	r25, 7
    b304:	99 1f       	adc	r25, r25
    b306:	61 f0       	breq	.+24     	; 0xb320 <__fp_splitA+0x20>
    b308:	9f 3f       	cpi	r25, 0xFF	; 255
    b30a:	79 f0       	breq	.+30     	; 0xb32a <__fp_splitA+0x2a>
    b30c:	87 95       	ror	r24
    b30e:	08 95       	ret
    b310:	12 16       	cp	r1, r18
    b312:	13 06       	cpc	r1, r19
    b314:	14 06       	cpc	r1, r20
    b316:	55 1f       	adc	r21, r21
    b318:	f2 cf       	rjmp	.-28     	; 0xb2fe <__fp_split3+0xe>
    b31a:	46 95       	lsr	r20
    b31c:	f1 df       	rcall	.-30     	; 0xb300 <__fp_splitA>
    b31e:	08 c0       	rjmp	.+16     	; 0xb330 <__fp_splitA+0x30>
    b320:	16 16       	cp	r1, r22
    b322:	17 06       	cpc	r1, r23
    b324:	18 06       	cpc	r1, r24
    b326:	99 1f       	adc	r25, r25
    b328:	f1 cf       	rjmp	.-30     	; 0xb30c <__fp_splitA+0xc>
    b32a:	86 95       	lsr	r24
    b32c:	71 05       	cpc	r23, r1
    b32e:	61 05       	cpc	r22, r1
    b330:	08 94       	sec
    b332:	08 95       	ret

0000b334 <__fp_zero>:
    b334:	e8 94       	clt

0000b336 <__fp_szero>:
    b336:	bb 27       	eor	r27, r27
    b338:	66 27       	eor	r22, r22
    b33a:	77 27       	eor	r23, r23
    b33c:	cb 01       	movw	r24, r22
    b33e:	97 f9       	bld	r25, 7
    b340:	08 95       	ret

0000b342 <__gesf2>:
    b342:	8a df       	rcall	.-236    	; 0xb258 <__fp_cmp>
    b344:	08 f4       	brcc	.+2      	; 0xb348 <__gesf2+0x6>
    b346:	8f ef       	ldi	r24, 0xFF	; 255
    b348:	08 95       	ret

0000b34a <__mulsf3>:
    b34a:	0b d0       	rcall	.+22     	; 0xb362 <__mulsf3x>
    b34c:	c0 cf       	rjmp	.-128    	; 0xb2ce <__fp_round>
    b34e:	b1 df       	rcall	.-158    	; 0xb2b2 <__fp_pscA>
    b350:	28 f0       	brcs	.+10     	; 0xb35c <__mulsf3+0x12>
    b352:	b6 df       	rcall	.-148    	; 0xb2c0 <__fp_pscB>
    b354:	18 f0       	brcs	.+6      	; 0xb35c <__mulsf3+0x12>
    b356:	95 23       	and	r25, r21
    b358:	09 f0       	breq	.+2      	; 0xb35c <__mulsf3+0x12>
    b35a:	a2 cf       	rjmp	.-188    	; 0xb2a0 <__fp_inf>
    b35c:	a7 cf       	rjmp	.-178    	; 0xb2ac <__fp_nan>
    b35e:	11 24       	eor	r1, r1
    b360:	ea cf       	rjmp	.-44     	; 0xb336 <__fp_szero>

0000b362 <__mulsf3x>:
    b362:	c6 df       	rcall	.-116    	; 0xb2f0 <__fp_split3>
    b364:	a0 f3       	brcs	.-24     	; 0xb34e <__mulsf3+0x4>

0000b366 <__mulsf3_pse>:
    b366:	95 9f       	mul	r25, r21
    b368:	d1 f3       	breq	.-12     	; 0xb35e <__mulsf3+0x14>
    b36a:	95 0f       	add	r25, r21
    b36c:	50 e0       	ldi	r21, 0x00	; 0
    b36e:	55 1f       	adc	r21, r21
    b370:	62 9f       	mul	r22, r18
    b372:	f0 01       	movw	r30, r0
    b374:	72 9f       	mul	r23, r18
    b376:	bb 27       	eor	r27, r27
    b378:	f0 0d       	add	r31, r0
    b37a:	b1 1d       	adc	r27, r1
    b37c:	63 9f       	mul	r22, r19
    b37e:	aa 27       	eor	r26, r26
    b380:	f0 0d       	add	r31, r0
    b382:	b1 1d       	adc	r27, r1
    b384:	aa 1f       	adc	r26, r26
    b386:	64 9f       	mul	r22, r20
    b388:	66 27       	eor	r22, r22
    b38a:	b0 0d       	add	r27, r0
    b38c:	a1 1d       	adc	r26, r1
    b38e:	66 1f       	adc	r22, r22
    b390:	82 9f       	mul	r24, r18
    b392:	22 27       	eor	r18, r18
    b394:	b0 0d       	add	r27, r0
    b396:	a1 1d       	adc	r26, r1
    b398:	62 1f       	adc	r22, r18
    b39a:	73 9f       	mul	r23, r19
    b39c:	b0 0d       	add	r27, r0
    b39e:	a1 1d       	adc	r26, r1
    b3a0:	62 1f       	adc	r22, r18
    b3a2:	83 9f       	mul	r24, r19
    b3a4:	a0 0d       	add	r26, r0
    b3a6:	61 1d       	adc	r22, r1
    b3a8:	22 1f       	adc	r18, r18
    b3aa:	74 9f       	mul	r23, r20
    b3ac:	33 27       	eor	r19, r19
    b3ae:	a0 0d       	add	r26, r0
    b3b0:	61 1d       	adc	r22, r1
    b3b2:	23 1f       	adc	r18, r19
    b3b4:	84 9f       	mul	r24, r20
    b3b6:	60 0d       	add	r22, r0
    b3b8:	21 1d       	adc	r18, r1
    b3ba:	82 2f       	mov	r24, r18
    b3bc:	76 2f       	mov	r23, r22
    b3be:	6a 2f       	mov	r22, r26
    b3c0:	11 24       	eor	r1, r1
    b3c2:	9f 57       	subi	r25, 0x7F	; 127
    b3c4:	50 40       	sbci	r21, 0x00	; 0
    b3c6:	8a f0       	brmi	.+34     	; 0xb3ea <__mulsf3_pse+0x84>
    b3c8:	e1 f0       	breq	.+56     	; 0xb402 <__mulsf3_pse+0x9c>
    b3ca:	88 23       	and	r24, r24
    b3cc:	4a f0       	brmi	.+18     	; 0xb3e0 <__mulsf3_pse+0x7a>
    b3ce:	ee 0f       	add	r30, r30
    b3d0:	ff 1f       	adc	r31, r31
    b3d2:	bb 1f       	adc	r27, r27
    b3d4:	66 1f       	adc	r22, r22
    b3d6:	77 1f       	adc	r23, r23
    b3d8:	88 1f       	adc	r24, r24
    b3da:	91 50       	subi	r25, 0x01	; 1
    b3dc:	50 40       	sbci	r21, 0x00	; 0
    b3de:	a9 f7       	brne	.-22     	; 0xb3ca <__mulsf3_pse+0x64>
    b3e0:	9e 3f       	cpi	r25, 0xFE	; 254
    b3e2:	51 05       	cpc	r21, r1
    b3e4:	70 f0       	brcs	.+28     	; 0xb402 <__mulsf3_pse+0x9c>
    b3e6:	5c cf       	rjmp	.-328    	; 0xb2a0 <__fp_inf>
    b3e8:	a6 cf       	rjmp	.-180    	; 0xb336 <__fp_szero>
    b3ea:	5f 3f       	cpi	r21, 0xFF	; 255
    b3ec:	ec f3       	brlt	.-6      	; 0xb3e8 <__mulsf3_pse+0x82>
    b3ee:	98 3e       	cpi	r25, 0xE8	; 232
    b3f0:	dc f3       	brlt	.-10     	; 0xb3e8 <__mulsf3_pse+0x82>
    b3f2:	86 95       	lsr	r24
    b3f4:	77 95       	ror	r23
    b3f6:	67 95       	ror	r22
    b3f8:	b7 95       	ror	r27
    b3fa:	f7 95       	ror	r31
    b3fc:	e7 95       	ror	r30
    b3fe:	9f 5f       	subi	r25, 0xFF	; 255
    b400:	c1 f7       	brne	.-16     	; 0xb3f2 <__mulsf3_pse+0x8c>
    b402:	fe 2b       	or	r31, r30
    b404:	88 0f       	add	r24, r24
    b406:	91 1d       	adc	r25, r1
    b408:	96 95       	lsr	r25
    b40a:	87 95       	ror	r24
    b40c:	97 f9       	bld	r25, 7
    b40e:	08 95       	ret

0000b410 <__cxa_pure_virtual>:
    b410:	0e 94 76 65 	call	0xcaec	; 0xcaec <abort>

0000b414 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    b414:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    b416:	91 8d       	ldd	r25, Z+25	; 0x19
    b418:	22 8d       	ldd	r18, Z+26	; 0x1a
    b41a:	89 2f       	mov	r24, r25
    b41c:	90 e0       	ldi	r25, 0x00	; 0
    b41e:	80 5c       	subi	r24, 0xC0	; 192
    b420:	9f 4f       	sbci	r25, 0xFF	; 255
    b422:	82 1b       	sub	r24, r18
    b424:	91 09       	sbc	r25, r1
}
    b426:	8f 73       	andi	r24, 0x3F	; 63
    b428:	99 27       	eor	r25, r25
    b42a:	08 95       	ret

0000b42c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    b42c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    b42e:	91 8d       	ldd	r25, Z+25	; 0x19
    b430:	82 8d       	ldd	r24, Z+26	; 0x1a
    b432:	98 17       	cp	r25, r24
    b434:	31 f0       	breq	.+12     	; 0xb442 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    b436:	82 8d       	ldd	r24, Z+26	; 0x1a
    b438:	e8 0f       	add	r30, r24
    b43a:	f1 1d       	adc	r31, r1
    b43c:	85 8d       	ldd	r24, Z+29	; 0x1d
    b43e:	90 e0       	ldi	r25, 0x00	; 0
    b440:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    b442:	8f ef       	ldi	r24, 0xFF	; 255
    b444:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    b446:	08 95       	ret

0000b448 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    b448:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    b44a:	91 8d       	ldd	r25, Z+25	; 0x19
    b44c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b44e:	98 17       	cp	r25, r24
    b450:	61 f0       	breq	.+24     	; 0xb46a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    b452:	82 8d       	ldd	r24, Z+26	; 0x1a
    b454:	df 01       	movw	r26, r30
    b456:	a8 0f       	add	r26, r24
    b458:	b1 1d       	adc	r27, r1
    b45a:	5d 96       	adiw	r26, 0x1d	; 29
    b45c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    b45e:	92 8d       	ldd	r25, Z+26	; 0x1a
    b460:	9f 5f       	subi	r25, 0xFF	; 255
    b462:	9f 73       	andi	r25, 0x3F	; 63
    b464:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    b466:	90 e0       	ldi	r25, 0x00	; 0
    b468:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    b46a:	8f ef       	ldi	r24, 0xFF	; 255
    b46c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    b46e:	08 95       	ret

0000b470 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    b470:	fc 01       	movw	r30, r24
    b472:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    b474:	44 8d       	ldd	r20, Z+28	; 0x1c
    b476:	25 2f       	mov	r18, r21
    b478:	30 e0       	ldi	r19, 0x00	; 0
    b47a:	84 2f       	mov	r24, r20
    b47c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    b47e:	82 1b       	sub	r24, r18
    b480:	93 0b       	sbc	r25, r19
    b482:	54 17       	cp	r21, r20
    b484:	10 f0       	brcs	.+4      	; 0xb48a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    b486:	cf 96       	adiw	r24, 0x3f	; 63
    b488:	08 95       	ret
  return tail - head - 1;
    b48a:	01 97       	sbiw	r24, 0x01	; 1
}
    b48c:	08 95       	ret

0000b48e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    b48e:	84 ed       	ldi	r24, 0xD4	; 212
    b490:	9b e5       	ldi	r25, 0x5B	; 91
    b492:	89 2b       	or	r24, r25
    b494:	39 f0       	breq	.+14     	; 0xb4a4 <_Z14serialEventRunv+0x16>
    b496:	80 e0       	ldi	r24, 0x00	; 0
    b498:	90 e0       	ldi	r25, 0x00	; 0
    b49a:	89 2b       	or	r24, r25
    b49c:	19 f0       	breq	.+6      	; 0xb4a4 <_Z14serialEventRunv+0x16>
    b49e:	84 d1       	rcall	.+776    	; 0xb7a8 <_Z17Serial0_availablev>
    b4a0:	81 11       	cpse	r24, r1
    b4a2:	25 c0       	rjmp	.+74     	; 0xb4ee <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    b4a4:	80 e0       	ldi	r24, 0x00	; 0
    b4a6:	90 e0       	ldi	r25, 0x00	; 0
    b4a8:	89 2b       	or	r24, r25
    b4aa:	41 f0       	breq	.+16     	; 0xb4bc <_Z14serialEventRunv+0x2e>
    b4ac:	80 e0       	ldi	r24, 0x00	; 0
    b4ae:	90 e0       	ldi	r25, 0x00	; 0
    b4b0:	89 2b       	or	r24, r25
    b4b2:	21 f0       	breq	.+8      	; 0xb4bc <_Z14serialEventRunv+0x2e>
    b4b4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4b8:	81 11       	cpse	r24, r1
    b4ba:	1c c0       	rjmp	.+56     	; 0xb4f4 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    b4bc:	80 e0       	ldi	r24, 0x00	; 0
    b4be:	90 e0       	ldi	r25, 0x00	; 0
    b4c0:	89 2b       	or	r24, r25
    b4c2:	41 f0       	breq	.+16     	; 0xb4d4 <_Z14serialEventRunv+0x46>
    b4c4:	80 e0       	ldi	r24, 0x00	; 0
    b4c6:	90 e0       	ldi	r25, 0x00	; 0
    b4c8:	89 2b       	or	r24, r25
    b4ca:	21 f0       	breq	.+8      	; 0xb4d4 <_Z14serialEventRunv+0x46>
    b4cc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4d0:	81 11       	cpse	r24, r1
    b4d2:	13 c0       	rjmp	.+38     	; 0xb4fa <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    b4d4:	80 e0       	ldi	r24, 0x00	; 0
    b4d6:	90 e0       	ldi	r25, 0x00	; 0
    b4d8:	89 2b       	or	r24, r25
    b4da:	a1 f0       	breq	.+40     	; 0xb504 <_Z14serialEventRunv+0x76>
    b4dc:	80 e0       	ldi	r24, 0x00	; 0
    b4de:	90 e0       	ldi	r25, 0x00	; 0
    b4e0:	89 2b       	or	r24, r25
    b4e2:	81 f0       	breq	.+32     	; 0xb504 <_Z14serialEventRunv+0x76>
    b4e4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4e8:	81 11       	cpse	r24, r1
    b4ea:	0a c0       	rjmp	.+20     	; 0xb500 <_Z14serialEventRunv+0x72>
    b4ec:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    b4ee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4f2:	d8 cf       	rjmp	.-80     	; 0xb4a4 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    b4f4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4f8:	e1 cf       	rjmp	.-62     	; 0xb4bc <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    b4fa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    b4fe:	ea cf       	rjmp	.-44     	; 0xb4d4 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    b500:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    b504:	08 95       	ret

0000b506 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    b506:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    b508:	84 8d       	ldd	r24, Z+28	; 0x1c
    b50a:	df 01       	movw	r26, r30
    b50c:	a8 0f       	add	r26, r24
    b50e:	b1 1d       	adc	r27, r1
    b510:	a3 5a       	subi	r26, 0xA3	; 163
    b512:	bf 4f       	sbci	r27, 0xFF	; 255
    b514:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    b516:	84 8d       	ldd	r24, Z+28	; 0x1c
    b518:	90 e0       	ldi	r25, 0x00	; 0
    b51a:	01 96       	adiw	r24, 0x01	; 1
    b51c:	8f 73       	andi	r24, 0x3F	; 63
    b51e:	99 27       	eor	r25, r25
    b520:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    b522:	a6 89       	ldd	r26, Z+22	; 0x16
    b524:	b7 89       	ldd	r27, Z+23	; 0x17
    b526:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    b528:	a0 89       	ldd	r26, Z+16	; 0x10
    b52a:	b1 89       	ldd	r27, Z+17	; 0x11
    b52c:	8c 91       	ld	r24, X
    b52e:	83 70       	andi	r24, 0x03	; 3
    b530:	80 64       	ori	r24, 0x40	; 64
    b532:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    b534:	93 8d       	ldd	r25, Z+27	; 0x1b
    b536:	84 8d       	ldd	r24, Z+28	; 0x1c
    b538:	98 13       	cpse	r25, r24
    b53a:	06 c0       	rjmp	.+12     	; 0xb548 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    b53c:	02 88       	ldd	r0, Z+18	; 0x12
    b53e:	f3 89       	ldd	r31, Z+19	; 0x13
    b540:	e0 2d       	mov	r30, r0
    b542:	80 81       	ld	r24, Z
    b544:	8f 7d       	andi	r24, 0xDF	; 223
    b546:	80 83       	st	Z, r24
    b548:	08 95       	ret

0000b54a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    b54a:	ef 92       	push	r14
    b54c:	ff 92       	push	r15
    b54e:	0f 93       	push	r16
    b550:	1f 93       	push	r17
    b552:	cf 93       	push	r28
    b554:	df 93       	push	r29
    b556:	ec 01       	movw	r28, r24
  _written = true;
    b558:	81 e0       	ldi	r24, 0x01	; 1
    b55a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    b55c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    b55e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    b560:	98 13       	cpse	r25, r24
    b562:	05 c0       	rjmp	.+10     	; 0xb56e <_ZN14HardwareSerial5writeEh+0x24>
    b564:	e8 89       	ldd	r30, Y+16	; 0x10
    b566:	f9 89       	ldd	r31, Y+17	; 0x11
    b568:	80 81       	ld	r24, Z
    b56a:	85 fd       	sbrc	r24, 5
    b56c:	25 c0       	rjmp	.+74     	; 0xb5b8 <_ZN14HardwareSerial5writeEh+0x6e>
    b56e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    b570:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b572:	10 e0       	ldi	r17, 0x00	; 0
    b574:	0f 5f       	subi	r16, 0xFF	; 255
    b576:	1f 4f       	sbci	r17, 0xFF	; 255
    b578:	0f 73       	andi	r16, 0x3F	; 63
    b57a:	11 27       	eor	r17, r17
    b57c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    b57e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    b580:	e8 12       	cpse	r14, r24
    b582:	0b c0       	rjmp	.+22     	; 0xb59a <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    b584:	0f b6       	in	r0, 0x3f	; 63
    b586:	07 fc       	sbrc	r0, 7
    b588:	fa cf       	rjmp	.-12     	; 0xb57e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    b58a:	e8 89       	ldd	r30, Y+16	; 0x10
    b58c:	f9 89       	ldd	r31, Y+17	; 0x11
    b58e:	80 81       	ld	r24, Z
    b590:	85 ff       	sbrs	r24, 5
    b592:	f5 cf       	rjmp	.-22     	; 0xb57e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    b594:	ce 01       	movw	r24, r28
    b596:	b7 df       	rcall	.-146    	; 0xb506 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    b598:	f2 cf       	rjmp	.-28     	; 0xb57e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    b59a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b59c:	fe 01       	movw	r30, r28
    b59e:	e8 0f       	add	r30, r24
    b5a0:	f1 1d       	adc	r31, r1
    b5a2:	e3 5a       	subi	r30, 0xA3	; 163
    b5a4:	ff 4f       	sbci	r31, 0xFF	; 255
    b5a6:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    b5a8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    b5aa:	f8 94       	cli
    _tx_buffer_head = i;
    b5ac:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    b5ae:	ea 89       	ldd	r30, Y+18	; 0x12
    b5b0:	fb 89       	ldd	r31, Y+19	; 0x13
    b5b2:	80 81       	ld	r24, Z
    b5b4:	80 62       	ori	r24, 0x20	; 32
    b5b6:	0a c0       	rjmp	.+20     	; 0xb5cc <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    b5b8:	9f b7       	in	r25, 0x3f	; 63
    b5ba:	f8 94       	cli
      *_udr = c;
    b5bc:	ee 89       	ldd	r30, Y+22	; 0x16
    b5be:	ff 89       	ldd	r31, Y+23	; 0x17
    b5c0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    b5c2:	e8 89       	ldd	r30, Y+16	; 0x10
    b5c4:	f9 89       	ldd	r31, Y+17	; 0x11
    b5c6:	80 81       	ld	r24, Z
    b5c8:	83 70       	andi	r24, 0x03	; 3
    b5ca:	80 64       	ori	r24, 0x40	; 64
    b5cc:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    b5ce:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    b5d0:	81 e0       	ldi	r24, 0x01	; 1
    b5d2:	90 e0       	ldi	r25, 0x00	; 0
    b5d4:	df 91       	pop	r29
    b5d6:	cf 91       	pop	r28
    b5d8:	1f 91       	pop	r17
    b5da:	0f 91       	pop	r16
    b5dc:	ff 90       	pop	r15
    b5de:	ef 90       	pop	r14
    b5e0:	08 95       	ret

0000b5e2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    b5e2:	cf 93       	push	r28
    b5e4:	df 93       	push	r29
    b5e6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    b5e8:	88 8d       	ldd	r24, Y+24	; 0x18
    b5ea:	88 23       	and	r24, r24
    b5ec:	c1 f0       	breq	.+48     	; 0xb61e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    b5ee:	ea 89       	ldd	r30, Y+18	; 0x12
    b5f0:	fb 89       	ldd	r31, Y+19	; 0x13
    b5f2:	80 81       	ld	r24, Z
    b5f4:	85 fd       	sbrc	r24, 5
    b5f6:	05 c0       	rjmp	.+10     	; 0xb602 <_ZN14HardwareSerial5flushEv+0x20>
    b5f8:	a8 89       	ldd	r26, Y+16	; 0x10
    b5fa:	b9 89       	ldd	r27, Y+17	; 0x11
    b5fc:	8c 91       	ld	r24, X
    b5fe:	86 fd       	sbrc	r24, 6
    b600:	0e c0       	rjmp	.+28     	; 0xb61e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    b602:	0f b6       	in	r0, 0x3f	; 63
    b604:	07 fc       	sbrc	r0, 7
    b606:	f5 cf       	rjmp	.-22     	; 0xb5f2 <_ZN14HardwareSerial5flushEv+0x10>
    b608:	80 81       	ld	r24, Z
    b60a:	85 ff       	sbrs	r24, 5
    b60c:	f2 cf       	rjmp	.-28     	; 0xb5f2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    b60e:	a8 89       	ldd	r26, Y+16	; 0x10
    b610:	b9 89       	ldd	r27, Y+17	; 0x11
    b612:	8c 91       	ld	r24, X
    b614:	85 ff       	sbrs	r24, 5
    b616:	ed cf       	rjmp	.-38     	; 0xb5f2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    b618:	ce 01       	movw	r24, r28
    b61a:	75 df       	rcall	.-278    	; 0xb506 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    b61c:	e8 cf       	rjmp	.-48     	; 0xb5ee <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    b61e:	df 91       	pop	r29
    b620:	cf 91       	pop	r28
    b622:	08 95       	ret

0000b624 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    b624:	cf 92       	push	r12
    b626:	df 92       	push	r13
    b628:	ef 92       	push	r14
    b62a:	ff 92       	push	r15
    b62c:	1f 93       	push	r17
    b62e:	cf 93       	push	r28
    b630:	df 93       	push	r29
    b632:	ec 01       	movw	r28, r24
    b634:	6a 01       	movw	r12, r20
    b636:	7b 01       	movw	r14, r22
    b638:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    b63a:	e8 89       	ldd	r30, Y+16	; 0x10
    b63c:	f9 89       	ldd	r31, Y+17	; 0x11
    b63e:	82 e0       	ldi	r24, 0x02	; 2
    b640:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    b642:	41 15       	cp	r20, r1
    b644:	51 4e       	sbci	r21, 0xE1	; 225
    b646:	61 05       	cpc	r22, r1
    b648:	71 05       	cpc	r23, r1
    b64a:	a9 f0       	breq	.+42     	; 0xb676 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    b64c:	60 e0       	ldi	r22, 0x00	; 0
    b64e:	79 e0       	ldi	r23, 0x09	; 9
    b650:	8d e3       	ldi	r24, 0x3D	; 61
    b652:	90 e0       	ldi	r25, 0x00	; 0
    b654:	a7 01       	movw	r20, r14
    b656:	96 01       	movw	r18, r12
    b658:	e9 d7       	rcall	.+4050   	; 0xc62c <__udivmodsi4>
    b65a:	da 01       	movw	r26, r20
    b65c:	c9 01       	movw	r24, r18
    b65e:	01 97       	sbiw	r24, 0x01	; 1
    b660:	a1 09       	sbc	r26, r1
    b662:	b1 09       	sbc	r27, r1
    b664:	b6 95       	lsr	r27
    b666:	a7 95       	ror	r26
    b668:	97 95       	ror	r25
    b66a:	87 95       	ror	r24
    b66c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    b66e:	21 15       	cp	r18, r1
    b670:	80 e1       	ldi	r24, 0x10	; 16
    b672:	38 07       	cpc	r19, r24
    b674:	a0 f0       	brcs	.+40     	; 0xb69e <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    b676:	e8 89       	ldd	r30, Y+16	; 0x10
    b678:	f9 89       	ldd	r31, Y+17	; 0x11
    b67a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    b67c:	60 e8       	ldi	r22, 0x80	; 128
    b67e:	74 e8       	ldi	r23, 0x84	; 132
    b680:	8e e1       	ldi	r24, 0x1E	; 30
    b682:	90 e0       	ldi	r25, 0x00	; 0
    b684:	a7 01       	movw	r20, r14
    b686:	96 01       	movw	r18, r12
    b688:	d1 d7       	rcall	.+4002   	; 0xc62c <__udivmodsi4>
    b68a:	da 01       	movw	r26, r20
    b68c:	c9 01       	movw	r24, r18
    b68e:	01 97       	sbiw	r24, 0x01	; 1
    b690:	a1 09       	sbc	r26, r1
    b692:	b1 09       	sbc	r27, r1
    b694:	b6 95       	lsr	r27
    b696:	a7 95       	ror	r26
    b698:	97 95       	ror	r25
    b69a:	87 95       	ror	r24
    b69c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    b69e:	ec 85       	ldd	r30, Y+12	; 0x0c
    b6a0:	fd 85       	ldd	r31, Y+13	; 0x0d
    b6a2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    b6a4:	ee 85       	ldd	r30, Y+14	; 0x0e
    b6a6:	ff 85       	ldd	r31, Y+15	; 0x0f
    b6a8:	20 83       	st	Z, r18

  _written = false;
    b6aa:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    b6ac:	ec 89       	ldd	r30, Y+20	; 0x14
    b6ae:	fd 89       	ldd	r31, Y+21	; 0x15
    b6b0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    b6b2:	ea 89       	ldd	r30, Y+18	; 0x12
    b6b4:	fb 89       	ldd	r31, Y+19	; 0x13
    b6b6:	80 81       	ld	r24, Z
    b6b8:	80 61       	ori	r24, 0x10	; 16
    b6ba:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    b6bc:	ea 89       	ldd	r30, Y+18	; 0x12
    b6be:	fb 89       	ldd	r31, Y+19	; 0x13
    b6c0:	80 81       	ld	r24, Z
    b6c2:	88 60       	ori	r24, 0x08	; 8
    b6c4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    b6c6:	ea 89       	ldd	r30, Y+18	; 0x12
    b6c8:	fb 89       	ldd	r31, Y+19	; 0x13
    b6ca:	80 81       	ld	r24, Z
    b6cc:	80 68       	ori	r24, 0x80	; 128
    b6ce:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    b6d0:	ea 89       	ldd	r30, Y+18	; 0x12
    b6d2:	fb 89       	ldd	r31, Y+19	; 0x13
    b6d4:	80 81       	ld	r24, Z
    b6d6:	8f 7d       	andi	r24, 0xDF	; 223
    b6d8:	80 83       	st	Z, r24
}
    b6da:	df 91       	pop	r29
    b6dc:	cf 91       	pop	r28
    b6de:	1f 91       	pop	r17
    b6e0:	ff 90       	pop	r15
    b6e2:	ef 90       	pop	r14
    b6e4:	df 90       	pop	r13
    b6e6:	cf 90       	pop	r12
    b6e8:	08 95       	ret

0000b6ea <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    b6ea:	1f 92       	push	r1
    b6ec:	0f 92       	push	r0
    b6ee:	0f b6       	in	r0, 0x3f	; 63
    b6f0:	0f 92       	push	r0
    b6f2:	11 24       	eor	r1, r1
    b6f4:	0b b6       	in	r0, 0x3b	; 59
    b6f6:	0f 92       	push	r0
    b6f8:	2f 93       	push	r18
    b6fa:	8f 93       	push	r24
    b6fc:	9f 93       	push	r25
    b6fe:	ef 93       	push	r30
    b700:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    b702:	e0 91 e1 05 	lds	r30, 0x05E1	; 0x8005e1 <Serial+0x10>
    b706:	f0 91 e2 05 	lds	r31, 0x05E2	; 0x8005e2 <Serial+0x11>
    b70a:	80 81       	ld	r24, Z
    b70c:	e0 91 e7 05 	lds	r30, 0x05E7	; 0x8005e7 <Serial+0x16>
    b710:	f0 91 e8 05 	lds	r31, 0x05E8	; 0x8005e8 <Serial+0x17>
    b714:	82 fd       	sbrc	r24, 2
    b716:	12 c0       	rjmp	.+36     	; 0xb73c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    b718:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    b71a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <Serial+0x19>
    b71e:	8f 5f       	subi	r24, 0xFF	; 255
    b720:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    b722:	20 91 eb 05 	lds	r18, 0x05EB	; 0x8005eb <Serial+0x1a>
    b726:	82 17       	cp	r24, r18
    b728:	51 f0       	breq	.+20     	; 0xb73e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    b72a:	e0 91 ea 05 	lds	r30, 0x05EA	; 0x8005ea <Serial+0x19>
    b72e:	f0 e0       	ldi	r31, 0x00	; 0
    b730:	ef 52       	subi	r30, 0x2F	; 47
    b732:	fa 4f       	sbci	r31, 0xFA	; 250
    b734:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    b736:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <Serial+0x19>
    b73a:	01 c0       	rjmp	.+2      	; 0xb73e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    b73c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    b73e:	ff 91       	pop	r31
    b740:	ef 91       	pop	r30
    b742:	9f 91       	pop	r25
    b744:	8f 91       	pop	r24
    b746:	2f 91       	pop	r18
    b748:	0f 90       	pop	r0
    b74a:	0b be       	out	0x3b, r0	; 59
    b74c:	0f 90       	pop	r0
    b74e:	0f be       	out	0x3f, r0	; 63
    b750:	0f 90       	pop	r0
    b752:	1f 90       	pop	r1
    b754:	18 95       	reti

0000b756 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    b756:	1f 92       	push	r1
    b758:	0f 92       	push	r0
    b75a:	0f b6       	in	r0, 0x3f	; 63
    b75c:	0f 92       	push	r0
    b75e:	11 24       	eor	r1, r1
    b760:	0b b6       	in	r0, 0x3b	; 59
    b762:	0f 92       	push	r0
    b764:	2f 93       	push	r18
    b766:	3f 93       	push	r19
    b768:	4f 93       	push	r20
    b76a:	5f 93       	push	r21
    b76c:	6f 93       	push	r22
    b76e:	7f 93       	push	r23
    b770:	8f 93       	push	r24
    b772:	9f 93       	push	r25
    b774:	af 93       	push	r26
    b776:	bf 93       	push	r27
    b778:	ef 93       	push	r30
    b77a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    b77c:	81 ed       	ldi	r24, 0xD1	; 209
    b77e:	95 e0       	ldi	r25, 0x05	; 5
    b780:	c2 de       	rcall	.-636    	; 0xb506 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    b782:	ff 91       	pop	r31
    b784:	ef 91       	pop	r30
    b786:	bf 91       	pop	r27
    b788:	af 91       	pop	r26
    b78a:	9f 91       	pop	r25
    b78c:	8f 91       	pop	r24
    b78e:	7f 91       	pop	r23
    b790:	6f 91       	pop	r22
    b792:	5f 91       	pop	r21
    b794:	4f 91       	pop	r20
    b796:	3f 91       	pop	r19
    b798:	2f 91       	pop	r18
    b79a:	0f 90       	pop	r0
    b79c:	0b be       	out	0x3b, r0	; 59
    b79e:	0f 90       	pop	r0
    b7a0:	0f be       	out	0x3f, r0	; 63
    b7a2:	0f 90       	pop	r0
    b7a4:	1f 90       	pop	r1
    b7a6:	18 95       	reti

0000b7a8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    b7a8:	81 ed       	ldi	r24, 0xD1	; 209
    b7aa:	95 e0       	ldi	r25, 0x05	; 5
    b7ac:	33 de       	rcall	.-922    	; 0xb414 <_ZN14HardwareSerial9availableEv>
    b7ae:	21 e0       	ldi	r18, 0x01	; 1
    b7b0:	89 2b       	or	r24, r25
    b7b2:	09 f4       	brne	.+2      	; 0xb7b6 <_Z17Serial0_availablev+0xe>
    b7b4:	20 e0       	ldi	r18, 0x00	; 0
}
    b7b6:	82 2f       	mov	r24, r18
    b7b8:	08 95       	ret

0000b7ba <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    b7ba:	e1 ed       	ldi	r30, 0xD1	; 209
    b7bc:	f5 e0       	ldi	r31, 0x05	; 5
    b7be:	13 82       	std	Z+3, r1	; 0x03
    b7c0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    b7c2:	88 ee       	ldi	r24, 0xE8	; 232
    b7c4:	93 e0       	ldi	r25, 0x03	; 3
    b7c6:	a0 e0       	ldi	r26, 0x00	; 0
    b7c8:	b0 e0       	ldi	r27, 0x00	; 0
    b7ca:	84 83       	std	Z+4, r24	; 0x04
    b7cc:	95 83       	std	Z+5, r25	; 0x05
    b7ce:	a6 83       	std	Z+6, r26	; 0x06
    b7d0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    b7d2:	8d e3       	ldi	r24, 0x3D	; 61
    b7d4:	93 e0       	ldi	r25, 0x03	; 3
    b7d6:	91 83       	std	Z+1, r25	; 0x01
    b7d8:	80 83       	st	Z, r24
    b7da:	85 ec       	ldi	r24, 0xC5	; 197
    b7dc:	90 e0       	ldi	r25, 0x00	; 0
    b7de:	95 87       	std	Z+13, r25	; 0x0d
    b7e0:	84 87       	std	Z+12, r24	; 0x0c
    b7e2:	84 ec       	ldi	r24, 0xC4	; 196
    b7e4:	90 e0       	ldi	r25, 0x00	; 0
    b7e6:	97 87       	std	Z+15, r25	; 0x0f
    b7e8:	86 87       	std	Z+14, r24	; 0x0e
    b7ea:	80 ec       	ldi	r24, 0xC0	; 192
    b7ec:	90 e0       	ldi	r25, 0x00	; 0
    b7ee:	91 8b       	std	Z+17, r25	; 0x11
    b7f0:	80 8b       	std	Z+16, r24	; 0x10
    b7f2:	81 ec       	ldi	r24, 0xC1	; 193
    b7f4:	90 e0       	ldi	r25, 0x00	; 0
    b7f6:	93 8b       	std	Z+19, r25	; 0x13
    b7f8:	82 8b       	std	Z+18, r24	; 0x12
    b7fa:	82 ec       	ldi	r24, 0xC2	; 194
    b7fc:	90 e0       	ldi	r25, 0x00	; 0
    b7fe:	95 8b       	std	Z+21, r25	; 0x15
    b800:	84 8b       	std	Z+20, r24	; 0x14
    b802:	86 ec       	ldi	r24, 0xC6	; 198
    b804:	90 e0       	ldi	r25, 0x00	; 0
    b806:	97 8b       	std	Z+23, r25	; 0x17
    b808:	86 8b       	std	Z+22, r24	; 0x16
    b80a:	11 8e       	std	Z+25, r1	; 0x19
    b80c:	12 8e       	std	Z+26, r1	; 0x1a
    b80e:	13 8e       	std	Z+27, r1	; 0x1b
    b810:	14 8e       	std	Z+28, r1	; 0x1c
    b812:	08 95       	ret

0000b814 <initVariant>:
    b814:	08 95       	ret

0000b816 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    b816:	e5 d2       	rcall	.+1482   	; 0xbde2 <init>

	initVariant();
    b818:	fd df       	rcall	.-6      	; 0xb814 <initVariant>
    b81a:	0e 94 8f 0a 	call	0x151e	; 0x151e <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    b81e:	c7 e4       	ldi	r28, 0x47	; 71
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    b820:	da e5       	ldi	r29, 0x5A	; 90
    b822:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    b826:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    b828:	e1 f3       	breq	.-8      	; 0xb822 <main+0xc>
    b82a:	31 de       	rcall	.-926    	; 0xb48e <_Z14serialEventRunv>
    b82c:	fa cf       	rjmp	.-12     	; 0xb822 <main+0xc>

0000b82e <_Znaj>:
    b82e:	5d c7       	rjmp	.+3770   	; 0xc6ea <malloc>

0000b830 <_ZdaPv>:
void operator delete(void * ptr) {
  free(ptr);
}

void operator delete[](void * ptr) {
  free(ptr);
    b830:	f4 c7       	rjmp	.+4072   	; 0xc81a <free>

0000b832 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    b832:	cf 92       	push	r12
    b834:	df 92       	push	r13
    b836:	ef 92       	push	r14
    b838:	ff 92       	push	r15
    b83a:	0f 93       	push	r16
    b83c:	1f 93       	push	r17
    b83e:	cf 93       	push	r28
    b840:	df 93       	push	r29
    b842:	6c 01       	movw	r12, r24
    b844:	7a 01       	movw	r14, r20
    b846:	8b 01       	movw	r16, r22
    b848:	c0 e0       	ldi	r28, 0x00	; 0
    b84a:	d0 e0       	ldi	r29, 0x00	; 0
    b84c:	ce 15       	cp	r28, r14
    b84e:	df 05       	cpc	r29, r15
    b850:	81 f0       	breq	.+32     	; 0xb872 <_ZN5Print5writeEPKhj+0x40>
    b852:	d8 01       	movw	r26, r16
    b854:	6d 91       	ld	r22, X+
    b856:	8d 01       	movw	r16, r26
    b858:	d6 01       	movw	r26, r12
    b85a:	ed 91       	ld	r30, X+
    b85c:	fc 91       	ld	r31, X
    b85e:	01 90       	ld	r0, Z+
    b860:	f0 81       	ld	r31, Z
    b862:	e0 2d       	mov	r30, r0
    b864:	c6 01       	movw	r24, r12
    b866:	19 95       	eicall
    b868:	89 2b       	or	r24, r25
    b86a:	11 f0       	breq	.+4      	; 0xb870 <_ZN5Print5writeEPKhj+0x3e>
    b86c:	21 96       	adiw	r28, 0x01	; 1
    b86e:	ee cf       	rjmp	.-36     	; 0xb84c <_ZN5Print5writeEPKhj+0x1a>
    b870:	7e 01       	movw	r14, r28
    b872:	c7 01       	movw	r24, r14
    b874:	df 91       	pop	r29
    b876:	cf 91       	pop	r28
    b878:	1f 91       	pop	r17
    b87a:	0f 91       	pop	r16
    b87c:	ff 90       	pop	r15
    b87e:	ef 90       	pop	r14
    b880:	df 90       	pop	r13
    b882:	cf 90       	pop	r12
    b884:	08 95       	ret

0000b886 <_ZN5Print5writeEPKc>:
    b886:	61 15       	cp	r22, r1
    b888:	71 05       	cpc	r23, r1
    b88a:	79 f0       	breq	.+30     	; 0xb8aa <_ZN5Print5writeEPKc+0x24>
    b88c:	fb 01       	movw	r30, r22
    b88e:	01 90       	ld	r0, Z+
    b890:	00 20       	and	r0, r0
    b892:	e9 f7       	brne	.-6      	; 0xb88e <_ZN5Print5writeEPKc+0x8>
    b894:	31 97       	sbiw	r30, 0x01	; 1
    b896:	af 01       	movw	r20, r30
    b898:	46 1b       	sub	r20, r22
    b89a:	57 0b       	sbc	r21, r23
    b89c:	dc 01       	movw	r26, r24
    b89e:	ed 91       	ld	r30, X+
    b8a0:	fc 91       	ld	r31, X
    b8a2:	02 80       	ldd	r0, Z+2	; 0x02
    b8a4:	f3 81       	ldd	r31, Z+3	; 0x03
    b8a6:	e0 2d       	mov	r30, r0
    b8a8:	19 94       	eijmp
    b8aa:	80 e0       	ldi	r24, 0x00	; 0
    b8ac:	90 e0       	ldi	r25, 0x00	; 0
    b8ae:	08 95       	ret

0000b8b0 <_ZN5Print5printEPK19__FlashStringHelper>:
    b8b0:	ef 92       	push	r14
    b8b2:	ff 92       	push	r15
    b8b4:	0f 93       	push	r16
    b8b6:	1f 93       	push	r17
    b8b8:	cf 93       	push	r28
    b8ba:	df 93       	push	r29
    b8bc:	8c 01       	movw	r16, r24
    b8be:	7b 01       	movw	r14, r22
    b8c0:	c0 e0       	ldi	r28, 0x00	; 0
    b8c2:	d0 e0       	ldi	r29, 0x00	; 0
    b8c4:	f7 01       	movw	r30, r14
    b8c6:	ec 0f       	add	r30, r28
    b8c8:	fd 1f       	adc	r31, r29
    b8ca:	64 91       	lpm	r22, Z
    b8cc:	66 23       	and	r22, r22
    b8ce:	61 f0       	breq	.+24     	; 0xb8e8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    b8d0:	d8 01       	movw	r26, r16
    b8d2:	ed 91       	ld	r30, X+
    b8d4:	fc 91       	ld	r31, X
    b8d6:	01 90       	ld	r0, Z+
    b8d8:	f0 81       	ld	r31, Z
    b8da:	e0 2d       	mov	r30, r0
    b8dc:	c8 01       	movw	r24, r16
    b8de:	19 95       	eicall
    b8e0:	89 2b       	or	r24, r25
    b8e2:	11 f0       	breq	.+4      	; 0xb8e8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    b8e4:	21 96       	adiw	r28, 0x01	; 1
    b8e6:	ee cf       	rjmp	.-36     	; 0xb8c4 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    b8e8:	ce 01       	movw	r24, r28
    b8ea:	df 91       	pop	r29
    b8ec:	cf 91       	pop	r28
    b8ee:	1f 91       	pop	r17
    b8f0:	0f 91       	pop	r16
    b8f2:	ff 90       	pop	r15
    b8f4:	ef 90       	pop	r14
    b8f6:	08 95       	ret

0000b8f8 <_ZN5Print5printEPKc>:
    b8f8:	c6 cf       	rjmp	.-116    	; 0xb886 <_ZN5Print5writeEPKc>

0000b8fa <_ZN5Print5printEc>:
    b8fa:	dc 01       	movw	r26, r24
    b8fc:	ed 91       	ld	r30, X+
    b8fe:	fc 91       	ld	r31, X
    b900:	01 90       	ld	r0, Z+
    b902:	f0 81       	ld	r31, Z
    b904:	e0 2d       	mov	r30, r0
    b906:	19 94       	eijmp

0000b908 <_ZN5Print7printlnEv>:
    b908:	6b e4       	ldi	r22, 0x4B	; 75
    b90a:	73 e0       	ldi	r23, 0x03	; 3
    b90c:	bc cf       	rjmp	.-136    	; 0xb886 <_ZN5Print5writeEPKc>

0000b90e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    b90e:	0f 93       	push	r16
    b910:	1f 93       	push	r17
    b912:	cf 93       	push	r28
    b914:	df 93       	push	r29
    b916:	ec 01       	movw	r28, r24
    b918:	cb df       	rcall	.-106    	; 0xb8b0 <_ZN5Print5printEPK19__FlashStringHelper>
    b91a:	8c 01       	movw	r16, r24
    b91c:	ce 01       	movw	r24, r28
    b91e:	f4 df       	rcall	.-24     	; 0xb908 <_ZN5Print7printlnEv>
    b920:	80 0f       	add	r24, r16
    b922:	91 1f       	adc	r25, r17
    b924:	df 91       	pop	r29
    b926:	cf 91       	pop	r28
    b928:	1f 91       	pop	r17
    b92a:	0f 91       	pop	r16
    b92c:	08 95       	ret

0000b92e <_ZN5Print7printlnEPKc>:
    b92e:	0f 93       	push	r16
    b930:	1f 93       	push	r17
    b932:	cf 93       	push	r28
    b934:	df 93       	push	r29
    b936:	ec 01       	movw	r28, r24
    b938:	a6 df       	rcall	.-180    	; 0xb886 <_ZN5Print5writeEPKc>
    b93a:	8c 01       	movw	r16, r24
    b93c:	ce 01       	movw	r24, r28
    b93e:	e4 df       	rcall	.-56     	; 0xb908 <_ZN5Print7printlnEv>
    b940:	80 0f       	add	r24, r16
    b942:	91 1f       	adc	r25, r17
    b944:	df 91       	pop	r29
    b946:	cf 91       	pop	r28
    b948:	1f 91       	pop	r17
    b94a:	0f 91       	pop	r16
    b94c:	08 95       	ret

0000b94e <_ZN5Print7printlnEc>:
    b94e:	0f 93       	push	r16
    b950:	1f 93       	push	r17
    b952:	cf 93       	push	r28
    b954:	df 93       	push	r29
    b956:	ec 01       	movw	r28, r24
    b958:	d0 df       	rcall	.-96     	; 0xb8fa <_ZN5Print5printEc>
    b95a:	8c 01       	movw	r16, r24
    b95c:	ce 01       	movw	r24, r28
    b95e:	d4 df       	rcall	.-88     	; 0xb908 <_ZN5Print7printlnEv>
    b960:	80 0f       	add	r24, r16
    b962:	91 1f       	adc	r25, r17
    b964:	df 91       	pop	r29
    b966:	cf 91       	pop	r28
    b968:	1f 91       	pop	r17
    b96a:	0f 91       	pop	r16
    b96c:	08 95       	ret

0000b96e <_ZN5Print11printNumberEmh>:
    b96e:	8f 92       	push	r8
    b970:	9f 92       	push	r9
    b972:	af 92       	push	r10
    b974:	bf 92       	push	r11
    b976:	ef 92       	push	r14
    b978:	ff 92       	push	r15
    b97a:	0f 93       	push	r16
    b97c:	1f 93       	push	r17
    b97e:	cf 93       	push	r28
    b980:	df 93       	push	r29
    b982:	cd b7       	in	r28, 0x3d	; 61
    b984:	de b7       	in	r29, 0x3e	; 62
    b986:	a1 97       	sbiw	r28, 0x21	; 33
    b988:	0f b6       	in	r0, 0x3f	; 63
    b98a:	f8 94       	cli
    b98c:	de bf       	out	0x3e, r29	; 62
    b98e:	0f be       	out	0x3f, r0	; 63
    b990:	cd bf       	out	0x3d, r28	; 61
    b992:	7c 01       	movw	r14, r24
    b994:	fa 01       	movw	r30, r20
    b996:	cb 01       	movw	r24, r22
    b998:	19 a2       	std	Y+33, r1	; 0x21
    b99a:	22 30       	cpi	r18, 0x02	; 2
    b99c:	08 f4       	brcc	.+2      	; 0xb9a0 <_ZN5Print11printNumberEmh+0x32>
    b99e:	2a e0       	ldi	r18, 0x0A	; 10
    b9a0:	8e 01       	movw	r16, r28
    b9a2:	0f 5d       	subi	r16, 0xDF	; 223
    b9a4:	1f 4f       	sbci	r17, 0xFF	; 255
    b9a6:	82 2e       	mov	r8, r18
    b9a8:	91 2c       	mov	r9, r1
    b9aa:	a1 2c       	mov	r10, r1
    b9ac:	b1 2c       	mov	r11, r1
    b9ae:	bf 01       	movw	r22, r30
    b9b0:	a5 01       	movw	r20, r10
    b9b2:	94 01       	movw	r18, r8
    b9b4:	3b d6       	rcall	.+3190   	; 0xc62c <__udivmodsi4>
    b9b6:	f9 01       	movw	r30, r18
    b9b8:	ca 01       	movw	r24, r20
    b9ba:	01 50       	subi	r16, 0x01	; 1
    b9bc:	11 09       	sbc	r17, r1
    b9be:	6a 30       	cpi	r22, 0x0A	; 10
    b9c0:	10 f4       	brcc	.+4      	; 0xb9c6 <_ZN5Print11printNumberEmh+0x58>
    b9c2:	60 5d       	subi	r22, 0xD0	; 208
    b9c4:	01 c0       	rjmp	.+2      	; 0xb9c8 <_ZN5Print11printNumberEmh+0x5a>
    b9c6:	69 5c       	subi	r22, 0xC9	; 201
    b9c8:	d8 01       	movw	r26, r16
    b9ca:	6c 93       	st	X, r22
    b9cc:	23 2b       	or	r18, r19
    b9ce:	24 2b       	or	r18, r20
    b9d0:	25 2b       	or	r18, r21
    b9d2:	69 f7       	brne	.-38     	; 0xb9ae <_ZN5Print11printNumberEmh+0x40>
    b9d4:	b8 01       	movw	r22, r16
    b9d6:	c7 01       	movw	r24, r14
    b9d8:	56 df       	rcall	.-340    	; 0xb886 <_ZN5Print5writeEPKc>
    b9da:	a1 96       	adiw	r28, 0x21	; 33
    b9dc:	0f b6       	in	r0, 0x3f	; 63
    b9de:	f8 94       	cli
    b9e0:	de bf       	out	0x3e, r29	; 62
    b9e2:	0f be       	out	0x3f, r0	; 63
    b9e4:	cd bf       	out	0x3d, r28	; 61
    b9e6:	df 91       	pop	r29
    b9e8:	cf 91       	pop	r28
    b9ea:	1f 91       	pop	r17
    b9ec:	0f 91       	pop	r16
    b9ee:	ff 90       	pop	r15
    b9f0:	ef 90       	pop	r14
    b9f2:	bf 90       	pop	r11
    b9f4:	af 90       	pop	r10
    b9f6:	9f 90       	pop	r9
    b9f8:	8f 90       	pop	r8
    b9fa:	08 95       	ret

0000b9fc <_ZN5Print5printEmi>:
    b9fc:	21 15       	cp	r18, r1
    b9fe:	31 05       	cpc	r19, r1
    ba00:	41 f4       	brne	.+16     	; 0xba12 <_ZN5Print5printEmi+0x16>
    ba02:	dc 01       	movw	r26, r24
    ba04:	ed 91       	ld	r30, X+
    ba06:	fc 91       	ld	r31, X
    ba08:	01 90       	ld	r0, Z+
    ba0a:	f0 81       	ld	r31, Z
    ba0c:	e0 2d       	mov	r30, r0
    ba0e:	64 2f       	mov	r22, r20
    ba10:	19 94       	eijmp
    ba12:	ad cf       	rjmp	.-166    	; 0xb96e <_ZN5Print11printNumberEmh>

0000ba14 <_ZN5Print5printEji>:
    ba14:	9a 01       	movw	r18, r20
    ba16:	ab 01       	movw	r20, r22
    ba18:	60 e0       	ldi	r22, 0x00	; 0
    ba1a:	70 e0       	ldi	r23, 0x00	; 0
    ba1c:	ef cf       	rjmp	.-34     	; 0xb9fc <_ZN5Print5printEmi>

0000ba1e <_ZN5Print5printEli>:
    ba1e:	cf 92       	push	r12
    ba20:	df 92       	push	r13
    ba22:	ef 92       	push	r14
    ba24:	ff 92       	push	r15
    ba26:	0f 93       	push	r16
    ba28:	1f 93       	push	r17
    ba2a:	cf 93       	push	r28
    ba2c:	df 93       	push	r29
    ba2e:	21 15       	cp	r18, r1
    ba30:	31 05       	cpc	r19, r1
    ba32:	81 f4       	brne	.+32     	; 0xba54 <_ZN5Print5printEli+0x36>
    ba34:	dc 01       	movw	r26, r24
    ba36:	ed 91       	ld	r30, X+
    ba38:	fc 91       	ld	r31, X
    ba3a:	01 90       	ld	r0, Z+
    ba3c:	f0 81       	ld	r31, Z
    ba3e:	e0 2d       	mov	r30, r0
    ba40:	64 2f       	mov	r22, r20
    ba42:	df 91       	pop	r29
    ba44:	cf 91       	pop	r28
    ba46:	1f 91       	pop	r17
    ba48:	0f 91       	pop	r16
    ba4a:	ff 90       	pop	r15
    ba4c:	ef 90       	pop	r14
    ba4e:	df 90       	pop	r13
    ba50:	cf 90       	pop	r12
    ba52:	19 94       	eijmp
    ba54:	2a 30       	cpi	r18, 0x0A	; 10
    ba56:	31 05       	cpc	r19, r1
    ba58:	f1 f4       	brne	.+60     	; 0xba96 <_ZN5Print5printEli+0x78>
    ba5a:	77 ff       	sbrs	r23, 7
    ba5c:	1b c0       	rjmp	.+54     	; 0xba94 <_ZN5Print5printEli+0x76>
    ba5e:	6a 01       	movw	r12, r20
    ba60:	7b 01       	movw	r14, r22
    ba62:	ec 01       	movw	r28, r24
    ba64:	6d e2       	ldi	r22, 0x2D	; 45
    ba66:	49 df       	rcall	.-366    	; 0xb8fa <_ZN5Print5printEc>
    ba68:	8c 01       	movw	r16, r24
    ba6a:	44 27       	eor	r20, r20
    ba6c:	55 27       	eor	r21, r21
    ba6e:	ba 01       	movw	r22, r20
    ba70:	4c 19       	sub	r20, r12
    ba72:	5d 09       	sbc	r21, r13
    ba74:	6e 09       	sbc	r22, r14
    ba76:	7f 09       	sbc	r23, r15
    ba78:	2a e0       	ldi	r18, 0x0A	; 10
    ba7a:	ce 01       	movw	r24, r28
    ba7c:	78 df       	rcall	.-272    	; 0xb96e <_ZN5Print11printNumberEmh>
    ba7e:	80 0f       	add	r24, r16
    ba80:	91 1f       	adc	r25, r17
    ba82:	df 91       	pop	r29
    ba84:	cf 91       	pop	r28
    ba86:	1f 91       	pop	r17
    ba88:	0f 91       	pop	r16
    ba8a:	ff 90       	pop	r15
    ba8c:	ef 90       	pop	r14
    ba8e:	df 90       	pop	r13
    ba90:	cf 90       	pop	r12
    ba92:	08 95       	ret
    ba94:	2a e0       	ldi	r18, 0x0A	; 10
    ba96:	df 91       	pop	r29
    ba98:	cf 91       	pop	r28
    ba9a:	1f 91       	pop	r17
    ba9c:	0f 91       	pop	r16
    ba9e:	ff 90       	pop	r15
    baa0:	ef 90       	pop	r14
    baa2:	df 90       	pop	r13
    baa4:	cf 90       	pop	r12
    baa6:	63 cf       	rjmp	.-314    	; 0xb96e <_ZN5Print11printNumberEmh>

0000baa8 <_ZN5Print5printEii>:
    baa8:	9a 01       	movw	r18, r20
    baaa:	ab 01       	movw	r20, r22
    baac:	77 0f       	add	r23, r23
    baae:	66 0b       	sbc	r22, r22
    bab0:	77 0b       	sbc	r23, r23
    bab2:	b5 cf       	rjmp	.-150    	; 0xba1e <_ZN5Print5printEli>

0000bab4 <_ZN5Print7printlnEii>:
    bab4:	0f 93       	push	r16
    bab6:	1f 93       	push	r17
    bab8:	cf 93       	push	r28
    baba:	df 93       	push	r29
    babc:	ec 01       	movw	r28, r24
    babe:	f4 df       	rcall	.-24     	; 0xbaa8 <_ZN5Print5printEii>
    bac0:	8c 01       	movw	r16, r24
    bac2:	ce 01       	movw	r24, r28
    bac4:	21 df       	rcall	.-446    	; 0xb908 <_ZN5Print7printlnEv>
    bac6:	80 0f       	add	r24, r16
    bac8:	91 1f       	adc	r25, r17
    baca:	df 91       	pop	r29
    bacc:	cf 91       	pop	r28
    bace:	1f 91       	pop	r17
    bad0:	0f 91       	pop	r16
    bad2:	08 95       	ret

0000bad4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    bad4:	7f 92       	push	r7
    bad6:	8f 92       	push	r8
    bad8:	9f 92       	push	r9
    bada:	af 92       	push	r10
    badc:	bf 92       	push	r11
    bade:	cf 92       	push	r12
    bae0:	df 92       	push	r13
    bae2:	ef 92       	push	r14
    bae4:	ff 92       	push	r15
    bae6:	0f 93       	push	r16
    bae8:	1f 93       	push	r17
    baea:	cf 93       	push	r28
    baec:	df 93       	push	r29
    baee:	8c 01       	movw	r16, r24
    baf0:	6a 01       	movw	r12, r20
    baf2:	7b 01       	movw	r14, r22
    baf4:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    baf6:	9a 01       	movw	r18, r20
    baf8:	ab 01       	movw	r20, r22
    bafa:	c7 01       	movw	r24, r14
    bafc:	b6 01       	movw	r22, r12
    bafe:	82 d5       	rcall	.+2820   	; 0xc604 <__unordsf2>
    bb00:	88 23       	and	r24, r24
    bb02:	19 f0       	breq	.+6      	; 0xbb0a <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bb04:	6e e4       	ldi	r22, 0x4E	; 78
    bb06:	73 e0       	ldi	r23, 0x03	; 3
    bb08:	24 c0       	rjmp	.+72     	; 0xbb52 <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    bb0a:	46 01       	movw	r8, r12
    bb0c:	57 01       	movw	r10, r14
    bb0e:	e8 94       	clt
    bb10:	b7 f8       	bld	r11, 7
    bb12:	2f ef       	ldi	r18, 0xFF	; 255
    bb14:	3f ef       	ldi	r19, 0xFF	; 255
    bb16:	4f e7       	ldi	r20, 0x7F	; 127
    bb18:	5f e7       	ldi	r21, 0x7F	; 127
    bb1a:	c5 01       	movw	r24, r10
    bb1c:	b4 01       	movw	r22, r8
    bb1e:	72 d5       	rcall	.+2788   	; 0xc604 <__unordsf2>
    bb20:	81 11       	cpse	r24, r1
    bb22:	0c c0       	rjmp	.+24     	; 0xbb3c <_ZN5Print10printFloatEdh+0x68>
    bb24:	2f ef       	ldi	r18, 0xFF	; 255
    bb26:	3f ef       	ldi	r19, 0xFF	; 255
    bb28:	4f e7       	ldi	r20, 0x7F	; 127
    bb2a:	5f e7       	ldi	r21, 0x7F	; 127
    bb2c:	c5 01       	movw	r24, r10
    bb2e:	b4 01       	movw	r22, r8
    bb30:	be da       	rcall	.-2692   	; 0xb0ae <__cmpsf2>
    bb32:	18 16       	cp	r1, r24
    bb34:	1c f4       	brge	.+6      	; 0xbb3c <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bb36:	62 e5       	ldi	r22, 0x52	; 82
    bb38:	73 e0       	ldi	r23, 0x03	; 3
    bb3a:	0b c0       	rjmp	.+22     	; 0xbb52 <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    bb3c:	2f ef       	ldi	r18, 0xFF	; 255
    bb3e:	3f ef       	ldi	r19, 0xFF	; 255
    bb40:	4f e7       	ldi	r20, 0x7F	; 127
    bb42:	5f e4       	ldi	r21, 0x4F	; 79
    bb44:	c7 01       	movw	r24, r14
    bb46:	b6 01       	movw	r22, r12
    bb48:	fc db       	rcall	.-2056   	; 0xb342 <__gesf2>
    bb4a:	18 16       	cp	r1, r24
    bb4c:	8c f4       	brge	.+34     	; 0xbb70 <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bb4e:	66 e5       	ldi	r22, 0x56	; 86
    bb50:	73 e0       	ldi	r23, 0x03	; 3
    bb52:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    bb54:	df 91       	pop	r29
    bb56:	cf 91       	pop	r28
    bb58:	1f 91       	pop	r17
    bb5a:	0f 91       	pop	r16
    bb5c:	ff 90       	pop	r15
    bb5e:	ef 90       	pop	r14
    bb60:	df 90       	pop	r13
    bb62:	cf 90       	pop	r12
    bb64:	bf 90       	pop	r11
    bb66:	af 90       	pop	r10
    bb68:	9f 90       	pop	r9
    bb6a:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    bb6c:	7f 90       	pop	r7
    bb6e:	8b ce       	rjmp	.-746    	; 0xb886 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    bb70:	2f ef       	ldi	r18, 0xFF	; 255
    bb72:	3f ef       	ldi	r19, 0xFF	; 255
    bb74:	4f e7       	ldi	r20, 0x7F	; 127
    bb76:	5f ec       	ldi	r21, 0xCF	; 207
    bb78:	c7 01       	movw	r24, r14
    bb7a:	b6 01       	movw	r22, r12
    bb7c:	98 da       	rcall	.-2768   	; 0xb0ae <__cmpsf2>
    bb7e:	87 fd       	sbrc	r24, 7
    bb80:	e6 cf       	rjmp	.-52     	; 0xbb4e <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    bb82:	20 e0       	ldi	r18, 0x00	; 0
    bb84:	30 e0       	ldi	r19, 0x00	; 0
    bb86:	a9 01       	movw	r20, r18
    bb88:	c7 01       	movw	r24, r14
    bb8a:	b6 01       	movw	r22, r12
    bb8c:	90 da       	rcall	.-2784   	; 0xb0ae <__cmpsf2>
    bb8e:	87 ff       	sbrs	r24, 7
    bb90:	09 c0       	rjmp	.+18     	; 0xbba4 <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    bb92:	6d e2       	ldi	r22, 0x2D	; 45
    bb94:	c8 01       	movw	r24, r16
    bb96:	b1 de       	rcall	.-670    	; 0xb8fa <_ZN5Print5printEc>
    bb98:	ec 01       	movw	r28, r24
    bb9a:	f7 fa       	bst	r15, 7
     number = -number;
    bb9c:	f0 94       	com	r15
    bb9e:	f7 f8       	bld	r15, 7
    bba0:	f0 94       	com	r15
    bba2:	02 c0       	rjmp	.+4      	; 0xbba8 <_ZN5Print10printFloatEdh+0xd4>
    bba4:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    bba6:	d0 e0       	ldi	r29, 0x00	; 0
    bba8:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    bbaa:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    bbac:	70 e0       	ldi	r23, 0x00	; 0
    bbae:	80 e0       	ldi	r24, 0x00	; 0
    bbb0:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    bbb2:	7b 14       	cp	r7, r11
    bbb4:	39 f0       	breq	.+14     	; 0xbbc4 <_ZN5Print10printFloatEdh+0xf0>
    rounding /= 10.0;
    bbb6:	20 e0       	ldi	r18, 0x00	; 0
    bbb8:	30 e0       	ldi	r19, 0x00	; 0
    bbba:	40 e2       	ldi	r20, 0x20	; 32
    bbbc:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    bbbe:	7b da       	rcall	.-2826   	; 0xb0b6 <__divsf3>
    bbc0:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    bbc2:	f7 cf       	rjmp	.-18     	; 0xbbb2 <_ZN5Print10printFloatEdh+0xde>
    bbc4:	a7 01       	movw	r20, r14
    bbc6:	96 01       	movw	r18, r12
    bbc8:	0e da       	rcall	.-3044   	; 0xafe6 <__addsf3>
    bbca:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    bbcc:	7c 01       	movw	r14, r24
    bbce:	db da       	rcall	.-2634   	; 0xb186 <__fixunssfsi>
    bbd0:	4b 01       	movw	r8, r22
    bbd2:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    bbd4:	2a e0       	ldi	r18, 0x0A	; 10
    bbd6:	ab 01       	movw	r20, r22
    bbd8:	bc 01       	movw	r22, r24
    bbda:	c8 01       	movw	r24, r16
    bbdc:	c8 de       	rcall	.-624    	; 0xb96e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    bbde:	c8 0f       	add	r28, r24
    bbe0:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    bbe2:	77 20       	and	r7, r7
    bbe4:	79 f1       	breq	.+94     	; 0xbc44 <_ZN5Print10printFloatEdh+0x170>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    bbe6:	c5 01       	movw	r24, r10
    bbe8:	b4 01       	movw	r22, r8
    bbea:	f9 da       	rcall	.-2574   	; 0xb1de <__floatunsisf>
    bbec:	9b 01       	movw	r18, r22
    bbee:	ac 01       	movw	r20, r24
    bbf0:	c7 01       	movw	r24, r14
    bbf2:	b6 01       	movw	r22, r12
    bbf4:	f7 d9       	rcall	.-3090   	; 0xafe4 <__subsf3>
    bbf6:	6b 01       	movw	r12, r22
    bbf8:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    bbfa:	6e e2       	ldi	r22, 0x2E	; 46
    bbfc:	c8 01       	movw	r24, r16
    bbfe:	7d de       	rcall	.-774    	; 0xb8fa <_ZN5Print5printEc>
    bc00:	c8 0f       	add	r28, r24
    bc02:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    bc04:	20 e0       	ldi	r18, 0x00	; 0
    bc06:	30 e0       	ldi	r19, 0x00	; 0
    bc08:	40 e2       	ldi	r20, 0x20	; 32
    bc0a:	51 e4       	ldi	r21, 0x41	; 65
    bc0c:	c7 01       	movw	r24, r14
    bc0e:	b6 01       	movw	r22, r12
    bc10:	9c db       	rcall	.-2248   	; 0xb34a <__mulsf3>
    bc12:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    bc14:	5c 01       	movw	r10, r24
    bc16:	b7 da       	rcall	.-2706   	; 0xb186 <__fixunssfsi>
    bc18:	6b 01       	movw	r12, r22
    n += print(toPrint);
    bc1a:	7c 01       	movw	r14, r24
    bc1c:	4a e0       	ldi	r20, 0x0A	; 10
    bc1e:	50 e0       	ldi	r21, 0x00	; 0
    bc20:	c8 01       	movw	r24, r16
    bc22:	f8 de       	rcall	.-528    	; 0xba14 <_ZN5Print5printEji>
    bc24:	c8 0f       	add	r28, r24
    bc26:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    bc28:	b6 01       	movw	r22, r12
    bc2a:	80 e0       	ldi	r24, 0x00	; 0
    bc2c:	90 e0       	ldi	r25, 0x00	; 0
    bc2e:	d7 da       	rcall	.-2642   	; 0xb1de <__floatunsisf>
    bc30:	9b 01       	movw	r18, r22
    bc32:	ac 01       	movw	r20, r24
    bc34:	c5 01       	movw	r24, r10
    bc36:	b4 01       	movw	r22, r8
    bc38:	d5 d9       	rcall	.-3158   	; 0xafe4 <__subsf3>
    bc3a:	6b 01       	movw	r12, r22
    bc3c:	7c 01       	movw	r14, r24
    bc3e:	7a 94       	dec	r7
    bc40:	71 10       	cpse	r7, r1
    bc42:	e0 cf       	rjmp	.-64     	; 0xbc04 <_ZN5Print10printFloatEdh+0x130>
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    bc44:	ce 01       	movw	r24, r28
    bc46:	df 91       	pop	r29
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    bc48:	cf 91       	pop	r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    bc4a:	1f 91       	pop	r17
    bc4c:	0f 91       	pop	r16
    bc4e:	ff 90       	pop	r15
    bc50:	ef 90       	pop	r14
    bc52:	df 90       	pop	r13
    bc54:	cf 90       	pop	r12
    bc56:	bf 90       	pop	r11
    bc58:	af 90       	pop	r10
    bc5a:	9f 90       	pop	r9
    bc5c:	8f 90       	pop	r8
    bc5e:	7f 90       	pop	r7
    bc60:	08 95       	ret

0000bc62 <_ZN5Print5printEdi>:
    bc62:	38 cf       	rjmp	.-400    	; 0xbad4 <_ZN5Print10printFloatEdh>

0000bc64 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    bc64:	1f 92       	push	r1
    bc66:	0f 92       	push	r0
    bc68:	0f b6       	in	r0, 0x3f	; 63
    bc6a:	0f 92       	push	r0
    bc6c:	11 24       	eor	r1, r1
    bc6e:	2f 93       	push	r18
    bc70:	3f 93       	push	r19
    bc72:	8f 93       	push	r24
    bc74:	9f 93       	push	r25
    bc76:	af 93       	push	r26
    bc78:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    bc7a:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <timer0_millis>
    bc7e:	90 91 70 06 	lds	r25, 0x0670	; 0x800670 <timer0_millis+0x1>
    bc82:	a0 91 71 06 	lds	r26, 0x0671	; 0x800671 <timer0_millis+0x2>
    bc86:	b0 91 72 06 	lds	r27, 0x0672	; 0x800672 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    bc8a:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    bc8e:	23 e0       	ldi	r18, 0x03	; 3
    bc90:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    bc92:	2d 37       	cpi	r18, 0x7D	; 125
    bc94:	20 f4       	brcc	.+8      	; 0xbc9e <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    bc96:	01 96       	adiw	r24, 0x01	; 1
    bc98:	a1 1d       	adc	r26, r1
    bc9a:	b1 1d       	adc	r27, r1
    bc9c:	05 c0       	rjmp	.+10     	; 0xbca8 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    bc9e:	26 e8       	ldi	r18, 0x86	; 134
    bca0:	23 0f       	add	r18, r19
		m += 1;
    bca2:	02 96       	adiw	r24, 0x02	; 2
    bca4:	a1 1d       	adc	r26, r1
    bca6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    bca8:	20 93 6e 06 	sts	0x066E, r18	; 0x80066e <timer0_fract>
	timer0_millis = m;
    bcac:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <timer0_millis>
    bcb0:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <timer0_millis+0x1>
    bcb4:	a0 93 71 06 	sts	0x0671, r26	; 0x800671 <timer0_millis+0x2>
    bcb8:	b0 93 72 06 	sts	0x0672, r27	; 0x800672 <timer0_millis+0x3>
	timer0_overflow_count++;
    bcbc:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <timer0_overflow_count>
    bcc0:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <timer0_overflow_count+0x1>
    bcc4:	a0 91 75 06 	lds	r26, 0x0675	; 0x800675 <timer0_overflow_count+0x2>
    bcc8:	b0 91 76 06 	lds	r27, 0x0676	; 0x800676 <timer0_overflow_count+0x3>
    bccc:	01 96       	adiw	r24, 0x01	; 1
    bcce:	a1 1d       	adc	r26, r1
    bcd0:	b1 1d       	adc	r27, r1
    bcd2:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <timer0_overflow_count>
    bcd6:	90 93 74 06 	sts	0x0674, r25	; 0x800674 <timer0_overflow_count+0x1>
    bcda:	a0 93 75 06 	sts	0x0675, r26	; 0x800675 <timer0_overflow_count+0x2>
    bcde:	b0 93 76 06 	sts	0x0676, r27	; 0x800676 <timer0_overflow_count+0x3>
}
    bce2:	bf 91       	pop	r27
    bce4:	af 91       	pop	r26
    bce6:	9f 91       	pop	r25
    bce8:	8f 91       	pop	r24
    bcea:	3f 91       	pop	r19
    bcec:	2f 91       	pop	r18
    bcee:	0f 90       	pop	r0
    bcf0:	0f be       	out	0x3f, r0	; 63
    bcf2:	0f 90       	pop	r0
    bcf4:	1f 90       	pop	r1
    bcf6:	18 95       	reti

0000bcf8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    bcf8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    bcfa:	f8 94       	cli
	m = timer0_millis;
    bcfc:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <timer0_millis>
    bd00:	70 91 70 06 	lds	r23, 0x0670	; 0x800670 <timer0_millis+0x1>
    bd04:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <timer0_millis+0x2>
    bd08:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <timer0_millis+0x3>
	SREG = oldSREG;
    bd0c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    bd0e:	08 95       	ret

0000bd10 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    bd10:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    bd12:	f8 94       	cli
	m = timer0_overflow_count;
    bd14:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <timer0_overflow_count>
    bd18:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <timer0_overflow_count+0x1>
    bd1c:	a0 91 75 06 	lds	r26, 0x0675	; 0x800675 <timer0_overflow_count+0x2>
    bd20:	b0 91 76 06 	lds	r27, 0x0676	; 0x800676 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    bd24:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    bd26:	a8 9b       	sbis	0x15, 0	; 21
    bd28:	05 c0       	rjmp	.+10     	; 0xbd34 <micros+0x24>
    bd2a:	2f 3f       	cpi	r18, 0xFF	; 255
    bd2c:	19 f0       	breq	.+6      	; 0xbd34 <micros+0x24>
		m++;
    bd2e:	01 96       	adiw	r24, 0x01	; 1
    bd30:	a1 1d       	adc	r26, r1
    bd32:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    bd34:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    bd36:	ba 2f       	mov	r27, r26
    bd38:	a9 2f       	mov	r26, r25
    bd3a:	98 2f       	mov	r25, r24
    bd3c:	88 27       	eor	r24, r24
    bd3e:	82 0f       	add	r24, r18
    bd40:	91 1d       	adc	r25, r1
    bd42:	a1 1d       	adc	r26, r1
    bd44:	b1 1d       	adc	r27, r1
    bd46:	bc 01       	movw	r22, r24
    bd48:	cd 01       	movw	r24, r26
    bd4a:	42 e0       	ldi	r20, 0x02	; 2
    bd4c:	66 0f       	add	r22, r22
    bd4e:	77 1f       	adc	r23, r23
    bd50:	88 1f       	adc	r24, r24
    bd52:	99 1f       	adc	r25, r25
    bd54:	4a 95       	dec	r20
    bd56:	d1 f7       	brne	.-12     	; 0xbd4c <micros+0x3c>
}
    bd58:	08 95       	ret

0000bd5a <delay>:

void delay(unsigned long ms)
{
    bd5a:	8f 92       	push	r8
    bd5c:	9f 92       	push	r9
    bd5e:	af 92       	push	r10
    bd60:	bf 92       	push	r11
    bd62:	cf 92       	push	r12
    bd64:	df 92       	push	r13
    bd66:	ef 92       	push	r14
    bd68:	ff 92       	push	r15
    bd6a:	6b 01       	movw	r12, r22
    bd6c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    bd6e:	d0 df       	rcall	.-96     	; 0xbd10 <micros>
    bd70:	4b 01       	movw	r8, r22
    bd72:	5c 01       	movw	r10, r24

	while (ms > 0) {
    bd74:	c1 14       	cp	r12, r1
    bd76:	d1 04       	cpc	r13, r1
    bd78:	e1 04       	cpc	r14, r1
    bd7a:	f1 04       	cpc	r15, r1
		yield();
    bd7c:	f1 f0       	breq	.+60     	; 0xbdba <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    bd7e:	41 d4       	rcall	.+2178   	; 0xc602 <yield>
    bd80:	c7 df       	rcall	.-114    	; 0xbd10 <micros>
    bd82:	dc 01       	movw	r26, r24
    bd84:	cb 01       	movw	r24, r22
    bd86:	88 19       	sub	r24, r8
    bd88:	99 09       	sbc	r25, r9
    bd8a:	aa 09       	sbc	r26, r10
    bd8c:	bb 09       	sbc	r27, r11
    bd8e:	88 3e       	cpi	r24, 0xE8	; 232
    bd90:	93 40       	sbci	r25, 0x03	; 3
    bd92:	a1 05       	cpc	r26, r1
    bd94:	b1 05       	cpc	r27, r1
    bd96:	70 f3       	brcs	.-36     	; 0xbd74 <delay+0x1a>
			ms--;
    bd98:	21 e0       	ldi	r18, 0x01	; 1
    bd9a:	c2 1a       	sub	r12, r18
    bd9c:	d1 08       	sbc	r13, r1
    bd9e:	e1 08       	sbc	r14, r1
    bda0:	f1 08       	sbc	r15, r1
			start += 1000;
    bda2:	88 ee       	ldi	r24, 0xE8	; 232
    bda4:	88 0e       	add	r8, r24
    bda6:	83 e0       	ldi	r24, 0x03	; 3
    bda8:	98 1e       	adc	r9, r24
    bdaa:	a1 1c       	adc	r10, r1
    bdac:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    bdae:	c1 14       	cp	r12, r1
    bdb0:	d1 04       	cpc	r13, r1
    bdb2:	e1 04       	cpc	r14, r1
    bdb4:	f1 04       	cpc	r15, r1
    bdb6:	21 f7       	brne	.-56     	; 0xbd80 <delay+0x26>
    bdb8:	dd cf       	rjmp	.-70     	; 0xbd74 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    bdba:	ff 90       	pop	r15
    bdbc:	ef 90       	pop	r14
    bdbe:	df 90       	pop	r13
    bdc0:	cf 90       	pop	r12
    bdc2:	bf 90       	pop	r11
    bdc4:	af 90       	pop	r10
    bdc6:	9f 90       	pop	r9
    bdc8:	8f 90       	pop	r8
    bdca:	08 95       	ret

0000bdcc <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    bdcc:	82 30       	cpi	r24, 0x02	; 2
    bdce:	91 05       	cpc	r25, r1
    bdd0:	38 f0       	brcs	.+14     	; 0xbde0 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    bdd2:	88 0f       	add	r24, r24
    bdd4:	99 1f       	adc	r25, r25
    bdd6:	88 0f       	add	r24, r24
    bdd8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    bdda:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    bddc:	01 97       	sbiw	r24, 0x01	; 1
    bdde:	f1 f7       	brne	.-4      	; 0xbddc <delayMicroseconds+0x10>
    bde0:	08 95       	ret

0000bde2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    bde2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    bde4:	84 b5       	in	r24, 0x24	; 36
    bde6:	82 60       	ori	r24, 0x02	; 2
    bde8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    bdea:	84 b5       	in	r24, 0x24	; 36
    bdec:	81 60       	ori	r24, 0x01	; 1
    bdee:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    bdf0:	85 b5       	in	r24, 0x25	; 37
    bdf2:	82 60       	ori	r24, 0x02	; 2
    bdf4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    bdf6:	85 b5       	in	r24, 0x25	; 37
    bdf8:	81 60       	ori	r24, 0x01	; 1
    bdfa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    bdfc:	ee e6       	ldi	r30, 0x6E	; 110
    bdfe:	f0 e0       	ldi	r31, 0x00	; 0
    be00:	80 81       	ld	r24, Z
    be02:	81 60       	ori	r24, 0x01	; 1
    be04:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    be06:	e1 e8       	ldi	r30, 0x81	; 129
    be08:	f0 e0       	ldi	r31, 0x00	; 0
    be0a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    be0c:	80 81       	ld	r24, Z
    be0e:	82 60       	ori	r24, 0x02	; 2
    be10:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    be12:	80 81       	ld	r24, Z
    be14:	81 60       	ori	r24, 0x01	; 1
    be16:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    be18:	e0 e8       	ldi	r30, 0x80	; 128
    be1a:	f0 e0       	ldi	r31, 0x00	; 0
    be1c:	80 81       	ld	r24, Z
    be1e:	81 60       	ori	r24, 0x01	; 1
    be20:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    be22:	e1 eb       	ldi	r30, 0xB1	; 177
    be24:	f0 e0       	ldi	r31, 0x00	; 0
    be26:	80 81       	ld	r24, Z
    be28:	84 60       	ori	r24, 0x04	; 4
    be2a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    be2c:	e0 eb       	ldi	r30, 0xB0	; 176
    be2e:	f0 e0       	ldi	r31, 0x00	; 0
    be30:	80 81       	ld	r24, Z
    be32:	81 60       	ori	r24, 0x01	; 1
    be34:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    be36:	e1 e9       	ldi	r30, 0x91	; 145
    be38:	f0 e0       	ldi	r31, 0x00	; 0
    be3a:	80 81       	ld	r24, Z
    be3c:	82 60       	ori	r24, 0x02	; 2
    be3e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    be40:	80 81       	ld	r24, Z
    be42:	81 60       	ori	r24, 0x01	; 1
    be44:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    be46:	e0 e9       	ldi	r30, 0x90	; 144
    be48:	f0 e0       	ldi	r31, 0x00	; 0
    be4a:	80 81       	ld	r24, Z
    be4c:	81 60       	ori	r24, 0x01	; 1
    be4e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    be50:	e1 ea       	ldi	r30, 0xA1	; 161
    be52:	f0 e0       	ldi	r31, 0x00	; 0
    be54:	80 81       	ld	r24, Z
    be56:	82 60       	ori	r24, 0x02	; 2
    be58:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    be5a:	80 81       	ld	r24, Z
    be5c:	81 60       	ori	r24, 0x01	; 1
    be5e:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    be60:	e0 ea       	ldi	r30, 0xA0	; 160
    be62:	f0 e0       	ldi	r31, 0x00	; 0
    be64:	80 81       	ld	r24, Z
    be66:	81 60       	ori	r24, 0x01	; 1
    be68:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    be6a:	e1 e2       	ldi	r30, 0x21	; 33
    be6c:	f1 e0       	ldi	r31, 0x01	; 1
    be6e:	80 81       	ld	r24, Z
    be70:	82 60       	ori	r24, 0x02	; 2
    be72:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    be74:	80 81       	ld	r24, Z
    be76:	81 60       	ori	r24, 0x01	; 1
    be78:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    be7a:	e0 e2       	ldi	r30, 0x20	; 32
    be7c:	f1 e0       	ldi	r31, 0x01	; 1
    be7e:	80 81       	ld	r24, Z
    be80:	81 60       	ori	r24, 0x01	; 1
    be82:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    be84:	ea e7       	ldi	r30, 0x7A	; 122
    be86:	f0 e0       	ldi	r31, 0x00	; 0
    be88:	80 81       	ld	r24, Z
    be8a:	84 60       	ori	r24, 0x04	; 4
    be8c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    be8e:	80 81       	ld	r24, Z
    be90:	82 60       	ori	r24, 0x02	; 2
    be92:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    be94:	80 81       	ld	r24, Z
    be96:	81 60       	ori	r24, 0x01	; 1
    be98:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    be9a:	80 81       	ld	r24, Z
    be9c:	80 68       	ori	r24, 0x80	; 128
    be9e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    bea0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    bea4:	08 95       	ret

0000bea6 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    bea6:	86 33       	cpi	r24, 0x36	; 54
    bea8:	08 f0       	brcs	.+2      	; 0xbeac <analogRead+0x6>
    beaa:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    beac:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    beb0:	28 2f       	mov	r18, r24
    beb2:	28 70       	andi	r18, 0x08	; 8
    beb4:	97 7f       	andi	r25, 0xF7	; 247
    beb6:	92 2b       	or	r25, r18
    beb8:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    bebc:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <analog_reference>
    bec0:	90 e4       	ldi	r25, 0x40	; 64
    bec2:	29 9f       	mul	r18, r25
    bec4:	90 01       	movw	r18, r0
    bec6:	11 24       	eor	r1, r1
    bec8:	87 70       	andi	r24, 0x07	; 7
    beca:	82 2b       	or	r24, r18
    becc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    bed0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    bed4:	80 64       	ori	r24, 0x40	; 64
    bed6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    beda:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    bede:	86 fd       	sbrc	r24, 6
    bee0:	fc cf       	rjmp	.-8      	; 0xbeda <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    bee2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    bee6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    beea:	90 e0       	ldi	r25, 0x00	; 0
}
    beec:	92 2b       	or	r25, r18
    beee:	08 95       	ret

0000bef0 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    bef0:	1f 93       	push	r17
    bef2:	cf 93       	push	r28
    bef4:	df 93       	push	r29
    bef6:	18 2f       	mov	r17, r24
    bef8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    befa:	61 e0       	ldi	r22, 0x01	; 1
    befc:	14 d1       	rcall	.+552    	; 0xc126 <pinMode>
	if (val == 0)
    befe:	20 97       	sbiw	r28, 0x00	; 0
    bf00:	11 f4       	brne	.+4      	; 0xbf06 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    bf02:	60 e0       	ldi	r22, 0x00	; 0
    bf04:	04 c0       	rjmp	.+8      	; 0xbf0e <analogWrite+0x1e>
	}
	else if (val == 255)
    bf06:	cf 3f       	cpi	r28, 0xFF	; 255
    bf08:	d1 05       	cpc	r29, r1
    bf0a:	31 f4       	brne	.+12     	; 0xbf18 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    bf0c:	61 e0       	ldi	r22, 0x01	; 1
    bf0e:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    bf10:	df 91       	pop	r29
    bf12:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    bf14:	1f 91       	pop	r17
    bf16:	43 c1       	rjmp	.+646    	; 0xc19e <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    bf18:	e1 2f       	mov	r30, r17
    bf1a:	f0 e0       	ldi	r31, 0x00	; 0
    bf1c:	ed 59       	subi	r30, 0x9D	; 157
    bf1e:	f4 4f       	sbci	r31, 0xF4	; 244
    bf20:	e4 91       	lpm	r30, Z
    bf22:	8e 2f       	mov	r24, r30
    bf24:	90 e0       	ldi	r25, 0x00	; 0
    bf26:	fc 01       	movw	r30, r24
    bf28:	31 97       	sbiw	r30, 0x01	; 1
    bf2a:	e2 31       	cpi	r30, 0x12	; 18
    bf2c:	f1 05       	cpc	r31, r1
    bf2e:	08 f0       	brcs	.+2      	; 0xbf32 <analogWrite+0x42>
    bf30:	9c c0       	rjmp	.+312    	; 0xc06a <analogWrite+0x17a>
    bf32:	88 27       	eor	r24, r24
    bf34:	ee 58       	subi	r30, 0x8E	; 142
    bf36:	ff 4f       	sbci	r31, 0xFF	; 255
    bf38:	8f 4f       	sbci	r24, 0xFF	; 255
    bf3a:	b6 c3       	rjmp	.+1900   	; 0xc6a8 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    bf3c:	84 b5       	in	r24, 0x24	; 36
    bf3e:	80 68       	ori	r24, 0x80	; 128
    bf40:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    bf42:	c7 bd       	out	0x27, r28	; 39
				break;
    bf44:	97 c0       	rjmp	.+302    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    bf46:	84 b5       	in	r24, 0x24	; 36
    bf48:	80 62       	ori	r24, 0x20	; 32
    bf4a:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    bf4c:	c8 bd       	out	0x28, r28	; 40
				break;
    bf4e:	92 c0       	rjmp	.+292    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    bf50:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    bf54:	80 68       	ori	r24, 0x80	; 128
    bf56:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1A = val; // set pwm duty
    bf5a:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    bf5e:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
				break;
    bf62:	88 c0       	rjmp	.+272    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    bf64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    bf68:	80 62       	ori	r24, 0x20	; 32
    bf6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1B = val; // set pwm duty
    bf6e:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    bf72:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
				break;
    bf76:	7e c0       	rjmp	.+252    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel C
				sbi(TCCR1A, COM1C1);
    bf78:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    bf7c:	88 60       	ori	r24, 0x08	; 8
    bf7e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
				OCR1C = val; // set pwm duty
    bf82:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    bf86:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
				break;
    bf8a:	74 c0       	rjmp	.+232    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    bf8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    bf90:	80 68       	ori	r24, 0x80	; 128
    bf92:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2A = val; // set pwm duty
    bf96:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
				break;
    bf9a:	6c c0       	rjmp	.+216    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    bf9c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    bfa0:	80 62       	ori	r24, 0x20	; 32
    bfa2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
				OCR2B = val; // set pwm duty
    bfa6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
				break;
    bfaa:	64 c0       	rjmp	.+200    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    bfac:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    bfb0:	80 68       	ori	r24, 0x80	; 128
    bfb2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3A = val; // set pwm duty
    bfb6:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    bfba:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
				break;
    bfbe:	5a c0       	rjmp	.+180    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    bfc0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    bfc4:	80 62       	ori	r24, 0x20	; 32
    bfc6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3B = val; // set pwm duty
    bfca:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    bfce:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
				break;
    bfd2:	50 c0       	rjmp	.+160    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    bfd4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    bfd8:	88 60       	ori	r24, 0x08	; 8
    bfda:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
				OCR3C = val; // set pwm duty
    bfde:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7c009d>
    bfe2:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7c009c>
				break;
    bfe6:	46 c0       	rjmp	.+140    	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    bfe8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    bfec:	80 68       	ori	r24, 0x80	; 128
    bfee:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    bff2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    bff6:	8f 7b       	andi	r24, 0xBF	; 191
    bff8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				#endif
				OCR4A = val;	// set pwm duty
    bffc:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    c000:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
				break;
    c004:	37 c0       	rjmp	.+110    	; 0xc074 <analogWrite+0x184>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    c006:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c00a:	80 62       	ori	r24, 0x20	; 32
    c00c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4B = val; // set pwm duty
    c010:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    c014:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
				break;
    c018:	2d c0       	rjmp	.+90     	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    c01a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c01e:	88 60       	ori	r24, 0x08	; 8
    c020:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
				OCR4C = val; // set pwm duty
    c024:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
    c028:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
				break;
    c02c:	23 c0       	rjmp	.+70     	; 0xc074 <analogWrite+0x184>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    c02e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c032:	80 68       	ori	r24, 0x80	; 128
    c034:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5A = val; // set pwm duty
    c038:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    c03c:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
				break;
    c040:	19 c0       	rjmp	.+50     	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    c042:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c046:	80 62       	ori	r24, 0x20	; 32
    c048:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5B = val; // set pwm duty
    c04c:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    c050:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
				break;
    c054:	0f c0       	rjmp	.+30     	; 0xc074 <analogWrite+0x184>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    c056:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c05a:	88 60       	ori	r24, 0x08	; 8
    c05c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
				OCR5C = val; // set pwm duty
    c060:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x7c012d>
    c064:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x7c012c>
				break;
    c068:	05 c0       	rjmp	.+10     	; 0xc074 <analogWrite+0x184>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    c06a:	c0 38       	cpi	r28, 0x80	; 128
    c06c:	d1 05       	cpc	r29, r1
    c06e:	0c f0       	brlt	.+2      	; 0xc072 <analogWrite+0x182>
    c070:	4d cf       	rjmp	.-358    	; 0xbf0c <analogWrite+0x1c>
    c072:	47 cf       	rjmp	.-370    	; 0xbf02 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    c074:	df 91       	pop	r29
    c076:	cf 91       	pop	r28
    c078:	1f 91       	pop	r17
    c07a:	08 95       	ret

0000c07c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    c07c:	90 e0       	ldi	r25, 0x00	; 0
    c07e:	fc 01       	movw	r30, r24
    c080:	31 97       	sbiw	r30, 0x01	; 1
    c082:	e2 31       	cpi	r30, 0x12	; 18
    c084:	f1 05       	cpc	r31, r1
    c086:	08 f0       	brcs	.+2      	; 0xc08a <turnOffPWM+0xe>
    c088:	4d c0       	rjmp	.+154    	; 0xc124 <turnOffPWM+0xa8>
    c08a:	88 27       	eor	r24, r24
    c08c:	ec 57       	subi	r30, 0x7C	; 124
    c08e:	ff 4f       	sbci	r31, 0xFF	; 255
    c090:	8f 4f       	sbci	r24, 0xFF	; 255
    c092:	0a c3       	rjmp	.+1556   	; 0xc6a8 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    c094:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c098:	8f 77       	andi	r24, 0x7F	; 127
    c09a:	03 c0       	rjmp	.+6      	; 0xc0a2 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    c09c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c0a0:	8f 7d       	andi	r24, 0xDF	; 223
    c0a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c0a6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    c0a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    c0ac:	87 7f       	andi	r24, 0xF7	; 247
    c0ae:	f9 cf       	rjmp	.-14     	; 0xc0a2 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    c0b0:	84 b5       	in	r24, 0x24	; 36
    c0b2:	8f 77       	andi	r24, 0x7F	; 127
    c0b4:	02 c0       	rjmp	.+4      	; 0xc0ba <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    c0b6:	84 b5       	in	r24, 0x24	; 36
    c0b8:	8f 7d       	andi	r24, 0xDF	; 223
    c0ba:	84 bd       	out	0x24, r24	; 36
    c0bc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    c0be:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c0c2:	8f 77       	andi	r24, 0x7F	; 127
    c0c4:	03 c0       	rjmp	.+6      	; 0xc0cc <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    c0c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c0ca:	8f 7d       	andi	r24, 0xDF	; 223
    c0cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    c0d0:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    c0d2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0d6:	8f 77       	andi	r24, 0x7F	; 127
    c0d8:	07 c0       	rjmp	.+14     	; 0xc0e8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    c0da:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0de:	8f 7d       	andi	r24, 0xDF	; 223
    c0e0:	03 c0       	rjmp	.+6      	; 0xc0e8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    c0e2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0e6:	87 7f       	andi	r24, 0xF7	; 247
    c0e8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    c0ec:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    c0ee:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c0f2:	8f 77       	andi	r24, 0x7F	; 127
    c0f4:	07 c0       	rjmp	.+14     	; 0xc104 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    c0f6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c0fa:	8f 7d       	andi	r24, 0xDF	; 223
    c0fc:	03 c0       	rjmp	.+6      	; 0xc104 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    c0fe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c102:	87 7f       	andi	r24, 0xF7	; 247
    c104:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    c108:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    c10a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c10e:	8f 77       	andi	r24, 0x7F	; 127
    c110:	07 c0       	rjmp	.+14     	; 0xc120 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    c112:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c116:	8f 7d       	andi	r24, 0xDF	; 223
    c118:	03 c0       	rjmp	.+6      	; 0xc120 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    c11a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c11e:	87 7f       	andi	r24, 0xF7	; 247
    c120:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    c124:	08 95       	ret

0000c126 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    c126:	cf 93       	push	r28
    c128:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    c12a:	90 e0       	ldi	r25, 0x00	; 0
    c12c:	fc 01       	movw	r30, r24
    c12e:	e7 55       	subi	r30, 0x57	; 87
    c130:	f4 4f       	sbci	r31, 0xF4	; 244
    c132:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    c134:	fc 01       	movw	r30, r24
    c136:	e1 51       	subi	r30, 0x11	; 17
    c138:	f4 4f       	sbci	r31, 0xF4	; 244
    c13a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    c13c:	88 23       	and	r24, r24
    c13e:	61 f1       	breq	.+88     	; 0xc198 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    c140:	90 e0       	ldi	r25, 0x00	; 0
    c142:	88 0f       	add	r24, r24
    c144:	99 1f       	adc	r25, r25
    c146:	fc 01       	movw	r30, r24
    c148:	e7 59       	subi	r30, 0x97	; 151
    c14a:	f3 4f       	sbci	r31, 0xF3	; 243
    c14c:	c5 91       	lpm	r28, Z+
    c14e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    c150:	fc 01       	movw	r30, r24
    c152:	e1 5b       	subi	r30, 0xB1	; 177
    c154:	f3 4f       	sbci	r31, 0xF3	; 243
    c156:	a5 91       	lpm	r26, Z+
    c158:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    c15a:	61 11       	cpse	r22, r1
    c15c:	09 c0       	rjmp	.+18     	; 0xc170 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    c15e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    c160:	f8 94       	cli
		*reg &= ~bit;
    c162:	88 81       	ld	r24, Y
    c164:	20 95       	com	r18
    c166:	82 23       	and	r24, r18
    c168:	88 83       	st	Y, r24
		*out &= ~bit;
    c16a:	ec 91       	ld	r30, X
    c16c:	2e 23       	and	r18, r30
    c16e:	0b c0       	rjmp	.+22     	; 0xc186 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    c170:	62 30       	cpi	r22, 0x02	; 2
    c172:	61 f4       	brne	.+24     	; 0xc18c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    c174:	9f b7       	in	r25, 0x3f	; 63
                cli();
    c176:	f8 94       	cli
		*reg &= ~bit;
    c178:	88 81       	ld	r24, Y
    c17a:	32 2f       	mov	r19, r18
    c17c:	30 95       	com	r19
    c17e:	83 23       	and	r24, r19
    c180:	88 83       	st	Y, r24
		*out |= bit;
    c182:	ec 91       	ld	r30, X
    c184:	2e 2b       	or	r18, r30
    c186:	2c 93       	st	X, r18
		SREG = oldSREG;
    c188:	9f bf       	out	0x3f, r25	; 63
    c18a:	06 c0       	rjmp	.+12     	; 0xc198 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    c18c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    c18e:	f8 94       	cli
		*reg |= bit;
    c190:	e8 81       	ld	r30, Y
    c192:	2e 2b       	or	r18, r30
    c194:	28 83       	st	Y, r18
		SREG = oldSREG;
    c196:	8f bf       	out	0x3f, r24	; 63
	}
}
    c198:	df 91       	pop	r29
    c19a:	cf 91       	pop	r28
    c19c:	08 95       	ret

0000c19e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    c19e:	1f 93       	push	r17
    c1a0:	cf 93       	push	r28
    c1a2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    c1a4:	28 2f       	mov	r18, r24
    c1a6:	30 e0       	ldi	r19, 0x00	; 0
    c1a8:	f9 01       	movw	r30, r18
    c1aa:	ed 59       	subi	r30, 0x9D	; 157
    c1ac:	f4 4f       	sbci	r31, 0xF4	; 244
    c1ae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    c1b0:	f9 01       	movw	r30, r18
    c1b2:	e7 55       	subi	r30, 0x57	; 87
    c1b4:	f4 4f       	sbci	r31, 0xF4	; 244
    c1b6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    c1b8:	f9 01       	movw	r30, r18
    c1ba:	e1 51       	subi	r30, 0x11	; 17
    c1bc:	f4 4f       	sbci	r31, 0xF4	; 244
    c1be:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    c1c0:	cc 23       	and	r28, r28
    c1c2:	b9 f0       	breq	.+46     	; 0xc1f2 <digitalWrite+0x54>
    c1c4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    c1c6:	81 11       	cpse	r24, r1
    c1c8:	59 df       	rcall	.-334    	; 0xc07c <turnOffPWM>

	out = portOutputRegister(port);
    c1ca:	ec 2f       	mov	r30, r28
    c1cc:	f0 e0       	ldi	r31, 0x00	; 0
    c1ce:	ee 0f       	add	r30, r30
    c1d0:	ff 1f       	adc	r31, r31
    c1d2:	e1 5b       	subi	r30, 0xB1	; 177
    c1d4:	f3 4f       	sbci	r31, 0xF3	; 243
    c1d6:	a5 91       	lpm	r26, Z+
    c1d8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    c1da:	9f b7       	in	r25, 0x3f	; 63
	cli();
    c1dc:	f8 94       	cli

	if (val == LOW) {
    c1de:	11 11       	cpse	r17, r1
    c1e0:	04 c0       	rjmp	.+8      	; 0xc1ea <digitalWrite+0x4c>
		*out &= ~bit;
    c1e2:	8c 91       	ld	r24, X
    c1e4:	d0 95       	com	r29
    c1e6:	d8 23       	and	r29, r24
    c1e8:	02 c0       	rjmp	.+4      	; 0xc1ee <digitalWrite+0x50>
	} else {
		*out |= bit;
    c1ea:	ec 91       	ld	r30, X
    c1ec:	de 2b       	or	r29, r30
    c1ee:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    c1f0:	9f bf       	out	0x3f, r25	; 63
}
    c1f2:	df 91       	pop	r29
    c1f4:	cf 91       	pop	r28
    c1f6:	1f 91       	pop	r17
    c1f8:	08 95       	ret

0000c1fa <digitalRead>:

int digitalRead(uint8_t pin)
{
    c1fa:	cf 93       	push	r28
    c1fc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    c1fe:	28 2f       	mov	r18, r24
    c200:	30 e0       	ldi	r19, 0x00	; 0
    c202:	f9 01       	movw	r30, r18
    c204:	ed 59       	subi	r30, 0x9D	; 157
    c206:	f4 4f       	sbci	r31, 0xF4	; 244
    c208:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    c20a:	f9 01       	movw	r30, r18
    c20c:	e7 55       	subi	r30, 0x57	; 87
    c20e:	f4 4f       	sbci	r31, 0xF4	; 244
    c210:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    c212:	f9 01       	movw	r30, r18
    c214:	e1 51       	subi	r30, 0x11	; 17
    c216:	f4 4f       	sbci	r31, 0xF4	; 244
    c218:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    c21a:	cc 23       	and	r28, r28
    c21c:	89 f0       	breq	.+34     	; 0xc240 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    c21e:	81 11       	cpse	r24, r1
    c220:	2d df       	rcall	.-422    	; 0xc07c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    c222:	ec 2f       	mov	r30, r28
    c224:	f0 e0       	ldi	r31, 0x00	; 0
    c226:	ee 0f       	add	r30, r30
    c228:	ff 1f       	adc	r31, r31
    c22a:	eb 5c       	subi	r30, 0xCB	; 203
    c22c:	f3 4f       	sbci	r31, 0xF3	; 243
    c22e:	a5 91       	lpm	r26, Z+
    c230:	b4 91       	lpm	r27, Z
    c232:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    c234:	ed 23       	and	r30, r29
    c236:	81 e0       	ldi	r24, 0x01	; 1
    c238:	90 e0       	ldi	r25, 0x00	; 0
    c23a:	21 f4       	brne	.+8      	; 0xc244 <digitalRead+0x4a>
    c23c:	80 e0       	ldi	r24, 0x00	; 0
    c23e:	02 c0       	rjmp	.+4      	; 0xc244 <digitalRead+0x4a>
    c240:	80 e0       	ldi	r24, 0x00	; 0
    c242:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    c244:	df 91       	pop	r29
    c246:	cf 91       	pop	r28
    c248:	08 95       	ret

0000c24a <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    c24a:	0f 93       	push	r16
    c24c:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    c24e:	90 e0       	ldi	r25, 0x00	; 0
    c250:	fc 01       	movw	r30, r24
    c252:	e7 55       	subi	r30, 0x57	; 87
    c254:	f4 4f       	sbci	r31, 0xF4	; 244
    c256:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    c258:	fc 01       	movw	r30, r24
    c25a:	e1 51       	subi	r30, 0x11	; 17
    c25c:	f4 4f       	sbci	r31, 0xF4	; 244
    c25e:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    c260:	66 23       	and	r22, r22
    c262:	11 f0       	breq	.+4      	; 0xc268 <pulseIn+0x1e>
    c264:	67 2f       	mov	r22, r23
    c266:	01 c0       	rjmp	.+2      	; 0xc26a <pulseIn+0x20>
    c268:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    c26a:	f0 e0       	ldi	r31, 0x00	; 0
    c26c:	ee 0f       	add	r30, r30
    c26e:	ff 1f       	adc	r31, r31
    c270:	eb 5c       	subi	r30, 0xCB	; 203
    c272:	f3 4f       	sbci	r31, 0xF3	; 243
    c274:	85 91       	lpm	r24, Z+
    c276:	94 91       	lpm	r25, Z
    c278:	89 01       	movw	r16, r18
    c27a:	9a 01       	movw	r18, r20
    c27c:	3f 70       	andi	r19, 0x0F	; 15
    c27e:	46 2f       	mov	r20, r22
    c280:	67 2f       	mov	r22, r23
    c282:	0e 94 7e 06 	call	0xcfc	; 0xcfc <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    c286:	61 15       	cp	r22, r1
    c288:	71 05       	cpc	r23, r1
    c28a:	81 05       	cpc	r24, r1
    c28c:	91 05       	cpc	r25, r1
    c28e:	49 f0       	breq	.+18     	; 0xc2a2 <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    c290:	dc 01       	movw	r26, r24
    c292:	cb 01       	movw	r24, r22
    c294:	01 96       	adiw	r24, 0x01	; 1
    c296:	a1 1d       	adc	r26, r1
    c298:	b1 1d       	adc	r27, r1
    c29a:	bc 01       	movw	r22, r24
    c29c:	cd 01       	movw	r24, r26
    c29e:	9f 70       	andi	r25, 0x0F	; 15
    c2a0:	03 c0       	rjmp	.+6      	; 0xc2a8 <pulseIn+0x5e>
	else
		return 0;
    c2a2:	60 e0       	ldi	r22, 0x00	; 0
    c2a4:	70 e0       	ldi	r23, 0x00	; 0
    c2a6:	cb 01       	movw	r24, r22
}
    c2a8:	1f 91       	pop	r17
    c2aa:	0f 91       	pop	r16
    c2ac:	08 95       	ret

0000c2ae <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    c2ae:	4f 92       	push	r4
    c2b0:	5f 92       	push	r5
    c2b2:	6f 92       	push	r6
    c2b4:	7f 92       	push	r7
    c2b6:	af 92       	push	r10
    c2b8:	bf 92       	push	r11
    c2ba:	cf 92       	push	r12
    c2bc:	df 92       	push	r13
    c2be:	ef 92       	push	r14
    c2c0:	ff 92       	push	r15
    c2c2:	0f 93       	push	r16
    c2c4:	1f 93       	push	r17
    c2c6:	cf 93       	push	r28
    c2c8:	df 93       	push	r29
    c2ca:	cd b7       	in	r28, 0x3d	; 61
    c2cc:	de b7       	in	r29, 0x3e	; 62
    c2ce:	29 01       	movw	r4, r18
    c2d0:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    c2d2:	9b 01       	movw	r18, r22
    c2d4:	ac 01       	movw	r20, r24
    c2d6:	24 19       	sub	r18, r4
    c2d8:	35 09       	sbc	r19, r5
    c2da:	46 09       	sbc	r20, r6
    c2dc:	57 09       	sbc	r21, r7
    c2de:	8a 89       	ldd	r24, Y+18	; 0x12
    c2e0:	9b 89       	ldd	r25, Y+19	; 0x13
    c2e2:	ac 89       	ldd	r26, Y+20	; 0x14
    c2e4:	bd 89       	ldd	r27, Y+21	; 0x15
    c2e6:	bc 01       	movw	r22, r24
    c2e8:	cd 01       	movw	r24, r26
    c2ea:	6a 19       	sub	r22, r10
    c2ec:	7b 09       	sbc	r23, r11
    c2ee:	8c 09       	sbc	r24, r12
    c2f0:	9d 09       	sbc	r25, r13
    c2f2:	8d d1       	rcall	.+794    	; 0xc60e <__mulsi3>
    c2f4:	a8 01       	movw	r20, r16
    c2f6:	97 01       	movw	r18, r14
    c2f8:	24 19       	sub	r18, r4
    c2fa:	35 09       	sbc	r19, r5
    c2fc:	46 09       	sbc	r20, r6
    c2fe:	57 09       	sbc	r21, r7
    c300:	b7 d1       	rcall	.+878    	; 0xc670 <__divmodsi4>
    c302:	ca 01       	movw	r24, r20
    c304:	b9 01       	movw	r22, r18
    c306:	6a 0d       	add	r22, r10
    c308:	7b 1d       	adc	r23, r11
    c30a:	8c 1d       	adc	r24, r12
    c30c:	9d 1d       	adc	r25, r13
}
    c30e:	df 91       	pop	r29
    c310:	cf 91       	pop	r28
    c312:	1f 91       	pop	r17
    c314:	0f 91       	pop	r16
    c316:	ff 90       	pop	r15
    c318:	ef 90       	pop	r14
    c31a:	df 90       	pop	r13
    c31c:	cf 90       	pop	r12
    c31e:	bf 90       	pop	r11
    c320:	af 90       	pop	r10
    c322:	7f 90       	pop	r7
    c324:	6f 90       	pop	r6
    c326:	5f 90       	pop	r5
    c328:	4f 90       	pop	r4
    c32a:	08 95       	ret

0000c32c <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}
    c32c:	fc 01       	movw	r30, r24
    c32e:	80 81       	ld	r24, Z
    c330:	91 81       	ldd	r25, Z+1	; 0x01
    c332:	00 97       	sbiw	r24, 0x00	; 0
    c334:	09 f0       	breq	.+2      	; 0xc338 <_ZN6StringD1Ev+0xc>
    c336:	71 c2       	rjmp	.+1250   	; 0xc81a <free>
    c338:	08 95       	ret

0000c33a <_ZN6String10invalidateEv>:
    c33a:	cf 93       	push	r28
    c33c:	df 93       	push	r29
    c33e:	ec 01       	movw	r28, r24
    c340:	88 81       	ld	r24, Y
    c342:	99 81       	ldd	r25, Y+1	; 0x01
    c344:	00 97       	sbiw	r24, 0x00	; 0
    c346:	09 f0       	breq	.+2      	; 0xc34a <_ZN6String10invalidateEv+0x10>
    c348:	68 d2       	rcall	.+1232   	; 0xc81a <free>
    c34a:	19 82       	std	Y+1, r1	; 0x01
    c34c:	18 82       	st	Y, r1
    c34e:	1d 82       	std	Y+5, r1	; 0x05
    c350:	1c 82       	std	Y+4, r1	; 0x04
    c352:	1b 82       	std	Y+3, r1	; 0x03
    c354:	1a 82       	std	Y+2, r1	; 0x02
    c356:	df 91       	pop	r29
    c358:	cf 91       	pop	r28
    c35a:	08 95       	ret

0000c35c <_ZN6String12changeBufferEj>:
    c35c:	0f 93       	push	r16
    c35e:	1f 93       	push	r17
    c360:	cf 93       	push	r28
    c362:	df 93       	push	r29
    c364:	ec 01       	movw	r28, r24
    c366:	8b 01       	movw	r16, r22
    c368:	6f 5f       	subi	r22, 0xFF	; 255
    c36a:	7f 4f       	sbci	r23, 0xFF	; 255
    c36c:	88 81       	ld	r24, Y
    c36e:	99 81       	ldd	r25, Y+1	; 0x01
    c370:	dd d2       	rcall	.+1466   	; 0xc92c <realloc>
    c372:	00 97       	sbiw	r24, 0x00	; 0
    c374:	31 f0       	breq	.+12     	; 0xc382 <_ZN6String12changeBufferEj+0x26>
    c376:	99 83       	std	Y+1, r25	; 0x01
    c378:	88 83       	st	Y, r24
    c37a:	1b 83       	std	Y+3, r17	; 0x03
    c37c:	0a 83       	std	Y+2, r16	; 0x02
    c37e:	81 e0       	ldi	r24, 0x01	; 1
    c380:	01 c0       	rjmp	.+2      	; 0xc384 <_ZN6String12changeBufferEj+0x28>
    c382:	80 e0       	ldi	r24, 0x00	; 0
    c384:	df 91       	pop	r29
    c386:	cf 91       	pop	r28
    c388:	1f 91       	pop	r17
    c38a:	0f 91       	pop	r16
    c38c:	08 95       	ret

0000c38e <_ZN6String7reserveEj>:
    c38e:	cf 93       	push	r28
    c390:	df 93       	push	r29
    c392:	ec 01       	movw	r28, r24
    c394:	88 81       	ld	r24, Y
    c396:	99 81       	ldd	r25, Y+1	; 0x01
    c398:	89 2b       	or	r24, r25
    c39a:	29 f0       	breq	.+10     	; 0xc3a6 <_ZN6String7reserveEj+0x18>
    c39c:	8a 81       	ldd	r24, Y+2	; 0x02
    c39e:	9b 81       	ldd	r25, Y+3	; 0x03
    c3a0:	86 17       	cp	r24, r22
    c3a2:	97 07       	cpc	r25, r23
    c3a4:	58 f4       	brcc	.+22     	; 0xc3bc <_ZN6String7reserveEj+0x2e>
    c3a6:	ce 01       	movw	r24, r28
    c3a8:	d9 df       	rcall	.-78     	; 0xc35c <_ZN6String12changeBufferEj>
    c3aa:	88 23       	and	r24, r24
    c3ac:	41 f0       	breq	.+16     	; 0xc3be <_ZN6String7reserveEj+0x30>
    c3ae:	8c 81       	ldd	r24, Y+4	; 0x04
    c3b0:	9d 81       	ldd	r25, Y+5	; 0x05
    c3b2:	89 2b       	or	r24, r25
    c3b4:	19 f4       	brne	.+6      	; 0xc3bc <_ZN6String7reserveEj+0x2e>
    c3b6:	e8 81       	ld	r30, Y
    c3b8:	f9 81       	ldd	r31, Y+1	; 0x01
    c3ba:	10 82       	st	Z, r1
    c3bc:	81 e0       	ldi	r24, 0x01	; 1
    c3be:	df 91       	pop	r29
    c3c0:	cf 91       	pop	r28
    c3c2:	08 95       	ret

0000c3c4 <_ZN6String4copyEPKcj>:
    c3c4:	ef 92       	push	r14
    c3c6:	ff 92       	push	r15
    c3c8:	0f 93       	push	r16
    c3ca:	1f 93       	push	r17
    c3cc:	cf 93       	push	r28
    c3ce:	df 93       	push	r29
    c3d0:	ec 01       	movw	r28, r24
    c3d2:	7b 01       	movw	r14, r22
    c3d4:	8a 01       	movw	r16, r20
    c3d6:	ba 01       	movw	r22, r20
    c3d8:	da df       	rcall	.-76     	; 0xc38e <_ZN6String7reserveEj>
    c3da:	81 11       	cpse	r24, r1
    c3dc:	03 c0       	rjmp	.+6      	; 0xc3e4 <_ZN6String4copyEPKcj+0x20>
    c3de:	ce 01       	movw	r24, r28
    c3e0:	ac df       	rcall	.-168    	; 0xc33a <_ZN6String10invalidateEv>
    c3e2:	06 c0       	rjmp	.+12     	; 0xc3f0 <_ZN6String4copyEPKcj+0x2c>
    c3e4:	1d 83       	std	Y+5, r17	; 0x05
    c3e6:	0c 83       	std	Y+4, r16	; 0x04
    c3e8:	b7 01       	movw	r22, r14
    c3ea:	88 81       	ld	r24, Y
    c3ec:	99 81       	ldd	r25, Y+1	; 0x01
    c3ee:	a3 d3       	rcall	.+1862   	; 0xcb36 <strcpy>
    c3f0:	ce 01       	movw	r24, r28
    c3f2:	df 91       	pop	r29
    c3f4:	cf 91       	pop	r28
    c3f6:	1f 91       	pop	r17
    c3f8:	0f 91       	pop	r16
    c3fa:	ff 90       	pop	r15
    c3fc:	ef 90       	pop	r14
    c3fe:	08 95       	ret

0000c400 <_ZN6StringC1EPKc>:
    c400:	fc 01       	movw	r30, r24
    c402:	11 82       	std	Z+1, r1	; 0x01
    c404:	10 82       	st	Z, r1
    c406:	13 82       	std	Z+3, r1	; 0x03
    c408:	12 82       	std	Z+2, r1	; 0x02
    c40a:	15 82       	std	Z+5, r1	; 0x05
    c40c:	14 82       	std	Z+4, r1	; 0x04
    c40e:	61 15       	cp	r22, r1
    c410:	71 05       	cpc	r23, r1
    c412:	49 f0       	breq	.+18     	; 0xc426 <_ZN6StringC1EPKc+0x26>
    c414:	fb 01       	movw	r30, r22
    c416:	01 90       	ld	r0, Z+
    c418:	00 20       	and	r0, r0
    c41a:	e9 f7       	brne	.-6      	; 0xc416 <_ZN6StringC1EPKc+0x16>
    c41c:	31 97       	sbiw	r30, 0x01	; 1
    c41e:	af 01       	movw	r20, r30
    c420:	46 1b       	sub	r20, r22
    c422:	57 0b       	sbc	r21, r23
    c424:	cf cf       	rjmp	.-98     	; 0xc3c4 <_ZN6String4copyEPKcj>
    c426:	08 95       	ret

0000c428 <_ZN6StringaSERKS_>:
    c428:	cf 93       	push	r28
    c42a:	df 93       	push	r29
    c42c:	ec 01       	movw	r28, r24
    c42e:	fb 01       	movw	r30, r22
    c430:	86 17       	cp	r24, r22
    c432:	97 07       	cpc	r25, r23
    c434:	51 f0       	breq	.+20     	; 0xc44a <_ZN6StringaSERKS_+0x22>
    c436:	60 81       	ld	r22, Z
    c438:	71 81       	ldd	r23, Z+1	; 0x01
    c43a:	61 15       	cp	r22, r1
    c43c:	71 05       	cpc	r23, r1
    c43e:	21 f0       	breq	.+8      	; 0xc448 <_ZN6StringaSERKS_+0x20>
    c440:	44 81       	ldd	r20, Z+4	; 0x04
    c442:	55 81       	ldd	r21, Z+5	; 0x05
    c444:	bf df       	rcall	.-130    	; 0xc3c4 <_ZN6String4copyEPKcj>
    c446:	01 c0       	rjmp	.+2      	; 0xc44a <_ZN6StringaSERKS_+0x22>
    c448:	78 df       	rcall	.-272    	; 0xc33a <_ZN6String10invalidateEv>
    c44a:	ce 01       	movw	r24, r28
    c44c:	df 91       	pop	r29
    c44e:	cf 91       	pop	r28
    c450:	08 95       	ret

0000c452 <_ZN6StringC1ERKS_>:
    c452:	fc 01       	movw	r30, r24
    c454:	11 82       	std	Z+1, r1	; 0x01
    c456:	10 82       	st	Z, r1
    c458:	13 82       	std	Z+3, r1	; 0x03
    c45a:	12 82       	std	Z+2, r1	; 0x02
    c45c:	15 82       	std	Z+5, r1	; 0x05
    c45e:	14 82       	std	Z+4, r1	; 0x04
    c460:	e3 cf       	rjmp	.-58     	; 0xc428 <_ZN6StringaSERKS_>

0000c462 <_ZN6StringaSEPKc>:
    c462:	cf 93       	push	r28
    c464:	df 93       	push	r29
    c466:	ec 01       	movw	r28, r24
    c468:	61 15       	cp	r22, r1
    c46a:	71 05       	cpc	r23, r1
    c46c:	51 f0       	breq	.+20     	; 0xc482 <_ZN6StringaSEPKc+0x20>
    c46e:	fb 01       	movw	r30, r22
    c470:	01 90       	ld	r0, Z+
    c472:	00 20       	and	r0, r0
    c474:	e9 f7       	brne	.-6      	; 0xc470 <_ZN6StringaSEPKc+0xe>
    c476:	31 97       	sbiw	r30, 0x01	; 1
    c478:	af 01       	movw	r20, r30
    c47a:	46 1b       	sub	r20, r22
    c47c:	57 0b       	sbc	r21, r23
    c47e:	a2 df       	rcall	.-188    	; 0xc3c4 <_ZN6String4copyEPKcj>
    c480:	01 c0       	rjmp	.+2      	; 0xc484 <_ZN6StringaSEPKc+0x22>
    c482:	5b df       	rcall	.-330    	; 0xc33a <_ZN6String10invalidateEv>
    c484:	ce 01       	movw	r24, r28
    c486:	df 91       	pop	r29
    c488:	cf 91       	pop	r28
    c48a:	08 95       	ret

0000c48c <_ZN6StringC1Ehh>:
    c48c:	0f 93       	push	r16
    c48e:	1f 93       	push	r17
    c490:	cf 93       	push	r28
    c492:	df 93       	push	r29
    c494:	cd b7       	in	r28, 0x3d	; 61
    c496:	de b7       	in	r29, 0x3e	; 62
    c498:	29 97       	sbiw	r28, 0x09	; 9
    c49a:	0f b6       	in	r0, 0x3f	; 63
    c49c:	f8 94       	cli
    c49e:	de bf       	out	0x3e, r29	; 62
    c4a0:	0f be       	out	0x3f, r0	; 63
    c4a2:	cd bf       	out	0x3d, r28	; 61
    c4a4:	8c 01       	movw	r16, r24
    c4a6:	86 2f       	mov	r24, r22
    c4a8:	f8 01       	movw	r30, r16
    c4aa:	11 82       	std	Z+1, r1	; 0x01
    c4ac:	10 82       	st	Z, r1
    c4ae:	13 82       	std	Z+3, r1	; 0x03
    c4b0:	12 82       	std	Z+2, r1	; 0x02
    c4b2:	15 82       	std	Z+5, r1	; 0x05
    c4b4:	14 82       	std	Z+4, r1	; 0x04
    c4b6:	50 e0       	ldi	r21, 0x00	; 0
    c4b8:	be 01       	movw	r22, r28
    c4ba:	6f 5f       	subi	r22, 0xFF	; 255
    c4bc:	7f 4f       	sbci	r23, 0xFF	; 255
    c4be:	90 e0       	ldi	r25, 0x00	; 0
    c4c0:	41 d3       	rcall	.+1666   	; 0xcb44 <utoa>
    c4c2:	be 01       	movw	r22, r28
    c4c4:	6f 5f       	subi	r22, 0xFF	; 255
    c4c6:	7f 4f       	sbci	r23, 0xFF	; 255
    c4c8:	c8 01       	movw	r24, r16
    c4ca:	cb df       	rcall	.-106    	; 0xc462 <_ZN6StringaSEPKc>
    c4cc:	29 96       	adiw	r28, 0x09	; 9
    c4ce:	0f b6       	in	r0, 0x3f	; 63
    c4d0:	f8 94       	cli
    c4d2:	de bf       	out	0x3e, r29	; 62
    c4d4:	0f be       	out	0x3f, r0	; 63
    c4d6:	cd bf       	out	0x3d, r28	; 61
    c4d8:	df 91       	pop	r29
    c4da:	cf 91       	pop	r28
    c4dc:	1f 91       	pop	r17
    c4de:	0f 91       	pop	r16
    c4e0:	08 95       	ret

0000c4e2 <_ZN6String6concatEPKcj>:
    c4e2:	ef 92       	push	r14
    c4e4:	ff 92       	push	r15
    c4e6:	0f 93       	push	r16
    c4e8:	1f 93       	push	r17
    c4ea:	cf 93       	push	r28
    c4ec:	df 93       	push	r29
    c4ee:	61 15       	cp	r22, r1
    c4f0:	71 05       	cpc	r23, r1
    c4f2:	11 f4       	brne	.+4      	; 0xc4f8 <_ZN6String6concatEPKcj+0x16>
    c4f4:	80 e0       	ldi	r24, 0x00	; 0
    c4f6:	1a c0       	rjmp	.+52     	; 0xc52c <_ZN6String6concatEPKcj+0x4a>
    c4f8:	41 15       	cp	r20, r1
    c4fa:	51 05       	cpc	r21, r1
    c4fc:	b1 f0       	breq	.+44     	; 0xc52a <_ZN6String6concatEPKcj+0x48>
    c4fe:	7b 01       	movw	r14, r22
    c500:	ec 01       	movw	r28, r24
    c502:	8c 81       	ldd	r24, Y+4	; 0x04
    c504:	9d 81       	ldd	r25, Y+5	; 0x05
    c506:	8a 01       	movw	r16, r20
    c508:	08 0f       	add	r16, r24
    c50a:	19 1f       	adc	r17, r25
    c50c:	b8 01       	movw	r22, r16
    c50e:	ce 01       	movw	r24, r28
    c510:	3e df       	rcall	.-388    	; 0xc38e <_ZN6String7reserveEj>
    c512:	88 23       	and	r24, r24
    c514:	79 f3       	breq	.-34     	; 0xc4f4 <_ZN6String6concatEPKcj+0x12>
    c516:	28 81       	ld	r18, Y
    c518:	39 81       	ldd	r19, Y+1	; 0x01
    c51a:	8c 81       	ldd	r24, Y+4	; 0x04
    c51c:	9d 81       	ldd	r25, Y+5	; 0x05
    c51e:	b7 01       	movw	r22, r14
    c520:	82 0f       	add	r24, r18
    c522:	93 1f       	adc	r25, r19
    c524:	08 d3       	rcall	.+1552   	; 0xcb36 <strcpy>
    c526:	1d 83       	std	Y+5, r17	; 0x05
    c528:	0c 83       	std	Y+4, r16	; 0x04
    c52a:	81 e0       	ldi	r24, 0x01	; 1
    c52c:	df 91       	pop	r29
    c52e:	cf 91       	pop	r28
    c530:	1f 91       	pop	r17
    c532:	0f 91       	pop	r16
    c534:	ff 90       	pop	r15
    c536:	ef 90       	pop	r14
    c538:	08 95       	ret

0000c53a <_ZN6String6concatERKS_>:
    c53a:	fb 01       	movw	r30, r22
    c53c:	44 81       	ldd	r20, Z+4	; 0x04
    c53e:	55 81       	ldd	r21, Z+5	; 0x05
    c540:	60 81       	ld	r22, Z
    c542:	71 81       	ldd	r23, Z+1	; 0x01
    c544:	ce cf       	rjmp	.-100    	; 0xc4e2 <_ZN6String6concatEPKcj>

0000c546 <_ZN6String6concatEPKc>:
    c546:	61 15       	cp	r22, r1
    c548:	71 05       	cpc	r23, r1
    c54a:	49 f0       	breq	.+18     	; 0xc55e <_ZN6String6concatEPKc+0x18>
    c54c:	fb 01       	movw	r30, r22
    c54e:	01 90       	ld	r0, Z+
    c550:	00 20       	and	r0, r0
    c552:	e9 f7       	brne	.-6      	; 0xc54e <_ZN6String6concatEPKc+0x8>
    c554:	31 97       	sbiw	r30, 0x01	; 1
    c556:	af 01       	movw	r20, r30
    c558:	46 1b       	sub	r20, r22
    c55a:	57 0b       	sbc	r21, r23
    c55c:	c2 cf       	rjmp	.-124    	; 0xc4e2 <_ZN6String6concatEPKcj>
    c55e:	80 e0       	ldi	r24, 0x00	; 0
    c560:	08 95       	ret

0000c562 <_ZNK6String9compareToERKS_>:
    c562:	cf 93       	push	r28
    c564:	df 93       	push	r29
    c566:	dc 01       	movw	r26, r24
    c568:	ed 91       	ld	r30, X+
    c56a:	fc 91       	ld	r31, X
    c56c:	eb 01       	movw	r28, r22
    c56e:	a8 81       	ld	r26, Y
    c570:	b9 81       	ldd	r27, Y+1	; 0x01
    c572:	30 97       	sbiw	r30, 0x00	; 0
    c574:	11 f0       	breq	.+4      	; 0xc57a <_ZNK6String9compareToERKS_+0x18>
    c576:	10 97       	sbiw	r26, 0x00	; 0
    c578:	c9 f4       	brne	.+50     	; 0xc5ac <_ZNK6String9compareToERKS_+0x4a>
    c57a:	10 97       	sbiw	r26, 0x00	; 0
    c57c:	59 f0       	breq	.+22     	; 0xc594 <_ZNK6String9compareToERKS_+0x32>
    c57e:	eb 01       	movw	r28, r22
    c580:	2c 81       	ldd	r18, Y+4	; 0x04
    c582:	3d 81       	ldd	r19, Y+5	; 0x05
    c584:	23 2b       	or	r18, r19
    c586:	31 f0       	breq	.+12     	; 0xc594 <_ZNK6String9compareToERKS_+0x32>
    c588:	8c 91       	ld	r24, X
    c58a:	90 e0       	ldi	r25, 0x00	; 0
    c58c:	91 95       	neg	r25
    c58e:	81 95       	neg	r24
    c590:	91 09       	sbc	r25, r1
    c592:	13 c0       	rjmp	.+38     	; 0xc5ba <_ZNK6String9compareToERKS_+0x58>
    c594:	30 97       	sbiw	r30, 0x00	; 0
    c596:	79 f0       	breq	.+30     	; 0xc5b6 <_ZNK6String9compareToERKS_+0x54>
    c598:	dc 01       	movw	r26, r24
    c59a:	14 96       	adiw	r26, 0x04	; 4
    c59c:	8d 91       	ld	r24, X+
    c59e:	9c 91       	ld	r25, X
    c5a0:	15 97       	sbiw	r26, 0x05	; 5
    c5a2:	89 2b       	or	r24, r25
    c5a4:	41 f0       	breq	.+16     	; 0xc5b6 <_ZNK6String9compareToERKS_+0x54>
    c5a6:	80 81       	ld	r24, Z
    c5a8:	90 e0       	ldi	r25, 0x00	; 0
    c5aa:	07 c0       	rjmp	.+14     	; 0xc5ba <_ZNK6String9compareToERKS_+0x58>
    c5ac:	bd 01       	movw	r22, r26
    c5ae:	cf 01       	movw	r24, r30
    c5b0:	df 91       	pop	r29
    c5b2:	cf 91       	pop	r28
    c5b4:	b7 c2       	rjmp	.+1390   	; 0xcb24 <strcmp>
    c5b6:	80 e0       	ldi	r24, 0x00	; 0
    c5b8:	90 e0       	ldi	r25, 0x00	; 0
    c5ba:	df 91       	pop	r29
    c5bc:	cf 91       	pop	r28
    c5be:	08 95       	ret

0000c5c0 <_ZNK6String6equalsERKS_>:
    c5c0:	fc 01       	movw	r30, r24
    c5c2:	44 81       	ldd	r20, Z+4	; 0x04
    c5c4:	55 81       	ldd	r21, Z+5	; 0x05
    c5c6:	fb 01       	movw	r30, r22
    c5c8:	24 81       	ldd	r18, Z+4	; 0x04
    c5ca:	35 81       	ldd	r19, Z+5	; 0x05
    c5cc:	42 17       	cp	r20, r18
    c5ce:	53 07       	cpc	r21, r19
    c5d0:	21 f4       	brne	.+8      	; 0xc5da <_ZNK6String6equalsERKS_+0x1a>
    c5d2:	c7 df       	rcall	.-114    	; 0xc562 <_ZNK6String9compareToERKS_>
    c5d4:	21 e0       	ldi	r18, 0x01	; 1
    c5d6:	89 2b       	or	r24, r25
    c5d8:	09 f0       	breq	.+2      	; 0xc5dc <_ZNK6String6equalsERKS_+0x1c>
    c5da:	20 e0       	ldi	r18, 0x00	; 0
    c5dc:	82 2f       	mov	r24, r18
    c5de:	08 95       	ret

0000c5e0 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    c5e0:	cf 93       	push	r28
    c5e2:	df 93       	push	r29
	if (!buffer) return;
    c5e4:	fc 01       	movw	r30, r24
    c5e6:	c0 81       	ld	r28, Z
    c5e8:	d1 81       	ldd	r29, Z+1	; 0x01
    c5ea:	20 97       	sbiw	r28, 0x00	; 0
    c5ec:	39 f0       	breq	.+14     	; 0xc5fc <_ZN6String11toUpperCaseEv+0x1c>
	for (char *p = buffer; *p; p++) {
    c5ee:	88 81       	ld	r24, Y
    c5f0:	88 23       	and	r24, r24
    c5f2:	21 f0       	breq	.+8      	; 0xc5fc <_ZN6String11toUpperCaseEv+0x1c>
		*p = toupper(*p);
    c5f4:	90 e0       	ldi	r25, 0x00	; 0
    c5f6:	7e d2       	rcall	.+1276   	; 0xcaf4 <toupper>
    c5f8:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    c5fa:	f9 cf       	rjmp	.-14     	; 0xc5ee <_ZN6String11toUpperCaseEv+0xe>
		*p = toupper(*p);
	}
}
    c5fc:	df 91       	pop	r29
    c5fe:	cf 91       	pop	r28
    c600:	08 95       	ret

0000c602 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    c602:	08 95       	ret

0000c604 <__unordsf2>:
    c604:	0e 94 2c 59 	call	0xb258	; 0xb258 <__fp_cmp>
    c608:	88 0b       	sbc	r24, r24
    c60a:	99 0b       	sbc	r25, r25
    c60c:	08 95       	ret

0000c60e <__mulsi3>:
    c60e:	db 01       	movw	r26, r22
    c610:	8f 93       	push	r24
    c612:	9f 93       	push	r25
    c614:	60 d0       	rcall	.+192    	; 0xc6d6 <__muluhisi3>
    c616:	bf 91       	pop	r27
    c618:	af 91       	pop	r26
    c61a:	a2 9f       	mul	r26, r18
    c61c:	80 0d       	add	r24, r0
    c61e:	91 1d       	adc	r25, r1
    c620:	a3 9f       	mul	r26, r19
    c622:	90 0d       	add	r25, r0
    c624:	b2 9f       	mul	r27, r18
    c626:	90 0d       	add	r25, r0
    c628:	11 24       	eor	r1, r1
    c62a:	08 95       	ret

0000c62c <__udivmodsi4>:
    c62c:	a1 e2       	ldi	r26, 0x21	; 33
    c62e:	1a 2e       	mov	r1, r26
    c630:	aa 1b       	sub	r26, r26
    c632:	bb 1b       	sub	r27, r27
    c634:	fd 01       	movw	r30, r26
    c636:	0d c0       	rjmp	.+26     	; 0xc652 <__udivmodsi4_ep>

0000c638 <__udivmodsi4_loop>:
    c638:	aa 1f       	adc	r26, r26
    c63a:	bb 1f       	adc	r27, r27
    c63c:	ee 1f       	adc	r30, r30
    c63e:	ff 1f       	adc	r31, r31
    c640:	a2 17       	cp	r26, r18
    c642:	b3 07       	cpc	r27, r19
    c644:	e4 07       	cpc	r30, r20
    c646:	f5 07       	cpc	r31, r21
    c648:	20 f0       	brcs	.+8      	; 0xc652 <__udivmodsi4_ep>
    c64a:	a2 1b       	sub	r26, r18
    c64c:	b3 0b       	sbc	r27, r19
    c64e:	e4 0b       	sbc	r30, r20
    c650:	f5 0b       	sbc	r31, r21

0000c652 <__udivmodsi4_ep>:
    c652:	66 1f       	adc	r22, r22
    c654:	77 1f       	adc	r23, r23
    c656:	88 1f       	adc	r24, r24
    c658:	99 1f       	adc	r25, r25
    c65a:	1a 94       	dec	r1
    c65c:	69 f7       	brne	.-38     	; 0xc638 <__udivmodsi4_loop>
    c65e:	60 95       	com	r22
    c660:	70 95       	com	r23
    c662:	80 95       	com	r24
    c664:	90 95       	com	r25
    c666:	9b 01       	movw	r18, r22
    c668:	ac 01       	movw	r20, r24
    c66a:	bd 01       	movw	r22, r26
    c66c:	cf 01       	movw	r24, r30
    c66e:	08 95       	ret

0000c670 <__divmodsi4>:
    c670:	05 2e       	mov	r0, r21
    c672:	97 fb       	bst	r25, 7
    c674:	16 f4       	brtc	.+4      	; 0xc67a <__divmodsi4+0xa>
    c676:	00 94       	com	r0
    c678:	0f d0       	rcall	.+30     	; 0xc698 <__negsi2>
    c67a:	57 fd       	sbrc	r21, 7
    c67c:	05 d0       	rcall	.+10     	; 0xc688 <__divmodsi4_neg2>
    c67e:	d6 df       	rcall	.-84     	; 0xc62c <__udivmodsi4>
    c680:	07 fc       	sbrc	r0, 7
    c682:	02 d0       	rcall	.+4      	; 0xc688 <__divmodsi4_neg2>
    c684:	46 f4       	brtc	.+16     	; 0xc696 <__divmodsi4_exit>
    c686:	08 c0       	rjmp	.+16     	; 0xc698 <__negsi2>

0000c688 <__divmodsi4_neg2>:
    c688:	50 95       	com	r21
    c68a:	40 95       	com	r20
    c68c:	30 95       	com	r19
    c68e:	21 95       	neg	r18
    c690:	3f 4f       	sbci	r19, 0xFF	; 255
    c692:	4f 4f       	sbci	r20, 0xFF	; 255
    c694:	5f 4f       	sbci	r21, 0xFF	; 255

0000c696 <__divmodsi4_exit>:
    c696:	08 95       	ret

0000c698 <__negsi2>:
    c698:	90 95       	com	r25
    c69a:	80 95       	com	r24
    c69c:	70 95       	com	r23
    c69e:	61 95       	neg	r22
    c6a0:	7f 4f       	sbci	r23, 0xFF	; 255
    c6a2:	8f 4f       	sbci	r24, 0xFF	; 255
    c6a4:	9f 4f       	sbci	r25, 0xFF	; 255
    c6a6:	08 95       	ret

0000c6a8 <__tablejump2__>:
    c6a8:	ee 0f       	add	r30, r30
    c6aa:	ff 1f       	adc	r31, r31
    c6ac:	88 1f       	adc	r24, r24
    c6ae:	8b bf       	out	0x3b, r24	; 59
    c6b0:	07 90       	elpm	r0, Z+
    c6b2:	f6 91       	elpm	r31, Z
    c6b4:	e0 2d       	mov	r30, r0
    c6b6:	19 94       	eijmp

0000c6b8 <__umulhisi3>:
    c6b8:	a2 9f       	mul	r26, r18
    c6ba:	b0 01       	movw	r22, r0
    c6bc:	b3 9f       	mul	r27, r19
    c6be:	c0 01       	movw	r24, r0
    c6c0:	a3 9f       	mul	r26, r19
    c6c2:	70 0d       	add	r23, r0
    c6c4:	81 1d       	adc	r24, r1
    c6c6:	11 24       	eor	r1, r1
    c6c8:	91 1d       	adc	r25, r1
    c6ca:	b2 9f       	mul	r27, r18
    c6cc:	70 0d       	add	r23, r0
    c6ce:	81 1d       	adc	r24, r1
    c6d0:	11 24       	eor	r1, r1
    c6d2:	91 1d       	adc	r25, r1
    c6d4:	08 95       	ret

0000c6d6 <__muluhisi3>:
    c6d6:	f0 df       	rcall	.-32     	; 0xc6b8 <__umulhisi3>
    c6d8:	a5 9f       	mul	r26, r21
    c6da:	90 0d       	add	r25, r0
    c6dc:	b4 9f       	mul	r27, r20
    c6de:	90 0d       	add	r25, r0
    c6e0:	a4 9f       	mul	r26, r20
    c6e2:	80 0d       	add	r24, r0
    c6e4:	91 1d       	adc	r25, r1
    c6e6:	11 24       	eor	r1, r1
    c6e8:	08 95       	ret

0000c6ea <malloc>:
    c6ea:	0f 93       	push	r16
    c6ec:	1f 93       	push	r17
    c6ee:	cf 93       	push	r28
    c6f0:	df 93       	push	r29
    c6f2:	82 30       	cpi	r24, 0x02	; 2
    c6f4:	91 05       	cpc	r25, r1
    c6f6:	10 f4       	brcc	.+4      	; 0xc6fc <malloc+0x12>
    c6f8:	82 e0       	ldi	r24, 0x02	; 2
    c6fa:	90 e0       	ldi	r25, 0x00	; 0
    c6fc:	e0 91 79 06 	lds	r30, 0x0679	; 0x800679 <__flp>
    c700:	f0 91 7a 06 	lds	r31, 0x067A	; 0x80067a <__flp+0x1>
    c704:	20 e0       	ldi	r18, 0x00	; 0
    c706:	30 e0       	ldi	r19, 0x00	; 0
    c708:	a0 e0       	ldi	r26, 0x00	; 0
    c70a:	b0 e0       	ldi	r27, 0x00	; 0
    c70c:	30 97       	sbiw	r30, 0x00	; 0
    c70e:	19 f1       	breq	.+70     	; 0xc756 <malloc+0x6c>
    c710:	40 81       	ld	r20, Z
    c712:	51 81       	ldd	r21, Z+1	; 0x01
    c714:	02 81       	ldd	r16, Z+2	; 0x02
    c716:	13 81       	ldd	r17, Z+3	; 0x03
    c718:	48 17       	cp	r20, r24
    c71a:	59 07       	cpc	r21, r25
    c71c:	c8 f0       	brcs	.+50     	; 0xc750 <malloc+0x66>
    c71e:	84 17       	cp	r24, r20
    c720:	95 07       	cpc	r25, r21
    c722:	69 f4       	brne	.+26     	; 0xc73e <malloc+0x54>
    c724:	10 97       	sbiw	r26, 0x00	; 0
    c726:	31 f0       	breq	.+12     	; 0xc734 <malloc+0x4a>
    c728:	12 96       	adiw	r26, 0x02	; 2
    c72a:	0c 93       	st	X, r16
    c72c:	12 97       	sbiw	r26, 0x02	; 2
    c72e:	13 96       	adiw	r26, 0x03	; 3
    c730:	1c 93       	st	X, r17
    c732:	27 c0       	rjmp	.+78     	; 0xc782 <malloc+0x98>
    c734:	00 93 79 06 	sts	0x0679, r16	; 0x800679 <__flp>
    c738:	10 93 7a 06 	sts	0x067A, r17	; 0x80067a <__flp+0x1>
    c73c:	22 c0       	rjmp	.+68     	; 0xc782 <malloc+0x98>
    c73e:	21 15       	cp	r18, r1
    c740:	31 05       	cpc	r19, r1
    c742:	19 f0       	breq	.+6      	; 0xc74a <malloc+0x60>
    c744:	42 17       	cp	r20, r18
    c746:	53 07       	cpc	r21, r19
    c748:	18 f4       	brcc	.+6      	; 0xc750 <malloc+0x66>
    c74a:	9a 01       	movw	r18, r20
    c74c:	bd 01       	movw	r22, r26
    c74e:	ef 01       	movw	r28, r30
    c750:	df 01       	movw	r26, r30
    c752:	f8 01       	movw	r30, r16
    c754:	db cf       	rjmp	.-74     	; 0xc70c <malloc+0x22>
    c756:	21 15       	cp	r18, r1
    c758:	31 05       	cpc	r19, r1
    c75a:	f9 f0       	breq	.+62     	; 0xc79a <malloc+0xb0>
    c75c:	28 1b       	sub	r18, r24
    c75e:	39 0b       	sbc	r19, r25
    c760:	24 30       	cpi	r18, 0x04	; 4
    c762:	31 05       	cpc	r19, r1
    c764:	80 f4       	brcc	.+32     	; 0xc786 <malloc+0x9c>
    c766:	8a 81       	ldd	r24, Y+2	; 0x02
    c768:	9b 81       	ldd	r25, Y+3	; 0x03
    c76a:	61 15       	cp	r22, r1
    c76c:	71 05       	cpc	r23, r1
    c76e:	21 f0       	breq	.+8      	; 0xc778 <malloc+0x8e>
    c770:	fb 01       	movw	r30, r22
    c772:	93 83       	std	Z+3, r25	; 0x03
    c774:	82 83       	std	Z+2, r24	; 0x02
    c776:	04 c0       	rjmp	.+8      	; 0xc780 <malloc+0x96>
    c778:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <__flp+0x1>
    c77c:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <__flp>
    c780:	fe 01       	movw	r30, r28
    c782:	32 96       	adiw	r30, 0x02	; 2
    c784:	44 c0       	rjmp	.+136    	; 0xc80e <malloc+0x124>
    c786:	fe 01       	movw	r30, r28
    c788:	e2 0f       	add	r30, r18
    c78a:	f3 1f       	adc	r31, r19
    c78c:	81 93       	st	Z+, r24
    c78e:	91 93       	st	Z+, r25
    c790:	22 50       	subi	r18, 0x02	; 2
    c792:	31 09       	sbc	r19, r1
    c794:	39 83       	std	Y+1, r19	; 0x01
    c796:	28 83       	st	Y, r18
    c798:	3a c0       	rjmp	.+116    	; 0xc80e <malloc+0x124>
    c79a:	20 91 77 06 	lds	r18, 0x0677	; 0x800677 <__brkval>
    c79e:	30 91 78 06 	lds	r19, 0x0678	; 0x800678 <__brkval+0x1>
    c7a2:	23 2b       	or	r18, r19
    c7a4:	41 f4       	brne	.+16     	; 0xc7b6 <malloc+0xcc>
    c7a6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    c7aa:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    c7ae:	30 93 78 06 	sts	0x0678, r19	; 0x800678 <__brkval+0x1>
    c7b2:	20 93 77 06 	sts	0x0677, r18	; 0x800677 <__brkval>
    c7b6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    c7ba:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    c7be:	21 15       	cp	r18, r1
    c7c0:	31 05       	cpc	r19, r1
    c7c2:	41 f4       	brne	.+16     	; 0xc7d4 <malloc+0xea>
    c7c4:	2d b7       	in	r18, 0x3d	; 61
    c7c6:	3e b7       	in	r19, 0x3e	; 62
    c7c8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    c7cc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    c7d0:	24 1b       	sub	r18, r20
    c7d2:	35 0b       	sbc	r19, r21
    c7d4:	e0 91 77 06 	lds	r30, 0x0677	; 0x800677 <__brkval>
    c7d8:	f0 91 78 06 	lds	r31, 0x0678	; 0x800678 <__brkval+0x1>
    c7dc:	e2 17       	cp	r30, r18
    c7de:	f3 07       	cpc	r31, r19
    c7e0:	a0 f4       	brcc	.+40     	; 0xc80a <malloc+0x120>
    c7e2:	2e 1b       	sub	r18, r30
    c7e4:	3f 0b       	sbc	r19, r31
    c7e6:	28 17       	cp	r18, r24
    c7e8:	39 07       	cpc	r19, r25
    c7ea:	78 f0       	brcs	.+30     	; 0xc80a <malloc+0x120>
    c7ec:	ac 01       	movw	r20, r24
    c7ee:	4e 5f       	subi	r20, 0xFE	; 254
    c7f0:	5f 4f       	sbci	r21, 0xFF	; 255
    c7f2:	24 17       	cp	r18, r20
    c7f4:	35 07       	cpc	r19, r21
    c7f6:	48 f0       	brcs	.+18     	; 0xc80a <malloc+0x120>
    c7f8:	4e 0f       	add	r20, r30
    c7fa:	5f 1f       	adc	r21, r31
    c7fc:	50 93 78 06 	sts	0x0678, r21	; 0x800678 <__brkval+0x1>
    c800:	40 93 77 06 	sts	0x0677, r20	; 0x800677 <__brkval>
    c804:	81 93       	st	Z+, r24
    c806:	91 93       	st	Z+, r25
    c808:	02 c0       	rjmp	.+4      	; 0xc80e <malloc+0x124>
    c80a:	e0 e0       	ldi	r30, 0x00	; 0
    c80c:	f0 e0       	ldi	r31, 0x00	; 0
    c80e:	cf 01       	movw	r24, r30
    c810:	df 91       	pop	r29
    c812:	cf 91       	pop	r28
    c814:	1f 91       	pop	r17
    c816:	0f 91       	pop	r16
    c818:	08 95       	ret

0000c81a <free>:
    c81a:	cf 93       	push	r28
    c81c:	df 93       	push	r29
    c81e:	00 97       	sbiw	r24, 0x00	; 0
    c820:	09 f4       	brne	.+2      	; 0xc824 <free+0xa>
    c822:	81 c0       	rjmp	.+258    	; 0xc926 <free+0x10c>
    c824:	fc 01       	movw	r30, r24
    c826:	32 97       	sbiw	r30, 0x02	; 2
    c828:	13 82       	std	Z+3, r1	; 0x03
    c82a:	12 82       	std	Z+2, r1	; 0x02
    c82c:	a0 91 79 06 	lds	r26, 0x0679	; 0x800679 <__flp>
    c830:	b0 91 7a 06 	lds	r27, 0x067A	; 0x80067a <__flp+0x1>
    c834:	10 97       	sbiw	r26, 0x00	; 0
    c836:	81 f4       	brne	.+32     	; 0xc858 <free+0x3e>
    c838:	20 81       	ld	r18, Z
    c83a:	31 81       	ldd	r19, Z+1	; 0x01
    c83c:	82 0f       	add	r24, r18
    c83e:	93 1f       	adc	r25, r19
    c840:	20 91 77 06 	lds	r18, 0x0677	; 0x800677 <__brkval>
    c844:	30 91 78 06 	lds	r19, 0x0678	; 0x800678 <__brkval+0x1>
    c848:	28 17       	cp	r18, r24
    c84a:	39 07       	cpc	r19, r25
    c84c:	51 f5       	brne	.+84     	; 0xc8a2 <free+0x88>
    c84e:	f0 93 78 06 	sts	0x0678, r31	; 0x800678 <__brkval+0x1>
    c852:	e0 93 77 06 	sts	0x0677, r30	; 0x800677 <__brkval>
    c856:	67 c0       	rjmp	.+206    	; 0xc926 <free+0x10c>
    c858:	ed 01       	movw	r28, r26
    c85a:	20 e0       	ldi	r18, 0x00	; 0
    c85c:	30 e0       	ldi	r19, 0x00	; 0
    c85e:	ce 17       	cp	r28, r30
    c860:	df 07       	cpc	r29, r31
    c862:	40 f4       	brcc	.+16     	; 0xc874 <free+0x5a>
    c864:	4a 81       	ldd	r20, Y+2	; 0x02
    c866:	5b 81       	ldd	r21, Y+3	; 0x03
    c868:	9e 01       	movw	r18, r28
    c86a:	41 15       	cp	r20, r1
    c86c:	51 05       	cpc	r21, r1
    c86e:	f1 f0       	breq	.+60     	; 0xc8ac <free+0x92>
    c870:	ea 01       	movw	r28, r20
    c872:	f5 cf       	rjmp	.-22     	; 0xc85e <free+0x44>
    c874:	d3 83       	std	Z+3, r29	; 0x03
    c876:	c2 83       	std	Z+2, r28	; 0x02
    c878:	40 81       	ld	r20, Z
    c87a:	51 81       	ldd	r21, Z+1	; 0x01
    c87c:	84 0f       	add	r24, r20
    c87e:	95 1f       	adc	r25, r21
    c880:	c8 17       	cp	r28, r24
    c882:	d9 07       	cpc	r29, r25
    c884:	59 f4       	brne	.+22     	; 0xc89c <free+0x82>
    c886:	88 81       	ld	r24, Y
    c888:	99 81       	ldd	r25, Y+1	; 0x01
    c88a:	84 0f       	add	r24, r20
    c88c:	95 1f       	adc	r25, r21
    c88e:	02 96       	adiw	r24, 0x02	; 2
    c890:	91 83       	std	Z+1, r25	; 0x01
    c892:	80 83       	st	Z, r24
    c894:	8a 81       	ldd	r24, Y+2	; 0x02
    c896:	9b 81       	ldd	r25, Y+3	; 0x03
    c898:	93 83       	std	Z+3, r25	; 0x03
    c89a:	82 83       	std	Z+2, r24	; 0x02
    c89c:	21 15       	cp	r18, r1
    c89e:	31 05       	cpc	r19, r1
    c8a0:	29 f4       	brne	.+10     	; 0xc8ac <free+0x92>
    c8a2:	f0 93 7a 06 	sts	0x067A, r31	; 0x80067a <__flp+0x1>
    c8a6:	e0 93 79 06 	sts	0x0679, r30	; 0x800679 <__flp>
    c8aa:	3d c0       	rjmp	.+122    	; 0xc926 <free+0x10c>
    c8ac:	e9 01       	movw	r28, r18
    c8ae:	fb 83       	std	Y+3, r31	; 0x03
    c8b0:	ea 83       	std	Y+2, r30	; 0x02
    c8b2:	49 91       	ld	r20, Y+
    c8b4:	59 91       	ld	r21, Y+
    c8b6:	c4 0f       	add	r28, r20
    c8b8:	d5 1f       	adc	r29, r21
    c8ba:	ec 17       	cp	r30, r28
    c8bc:	fd 07       	cpc	r31, r29
    c8be:	61 f4       	brne	.+24     	; 0xc8d8 <free+0xbe>
    c8c0:	80 81       	ld	r24, Z
    c8c2:	91 81       	ldd	r25, Z+1	; 0x01
    c8c4:	84 0f       	add	r24, r20
    c8c6:	95 1f       	adc	r25, r21
    c8c8:	02 96       	adiw	r24, 0x02	; 2
    c8ca:	e9 01       	movw	r28, r18
    c8cc:	99 83       	std	Y+1, r25	; 0x01
    c8ce:	88 83       	st	Y, r24
    c8d0:	82 81       	ldd	r24, Z+2	; 0x02
    c8d2:	93 81       	ldd	r25, Z+3	; 0x03
    c8d4:	9b 83       	std	Y+3, r25	; 0x03
    c8d6:	8a 83       	std	Y+2, r24	; 0x02
    c8d8:	e0 e0       	ldi	r30, 0x00	; 0
    c8da:	f0 e0       	ldi	r31, 0x00	; 0
    c8dc:	12 96       	adiw	r26, 0x02	; 2
    c8de:	8d 91       	ld	r24, X+
    c8e0:	9c 91       	ld	r25, X
    c8e2:	13 97       	sbiw	r26, 0x03	; 3
    c8e4:	00 97       	sbiw	r24, 0x00	; 0
    c8e6:	19 f0       	breq	.+6      	; 0xc8ee <free+0xd4>
    c8e8:	fd 01       	movw	r30, r26
    c8ea:	dc 01       	movw	r26, r24
    c8ec:	f7 cf       	rjmp	.-18     	; 0xc8dc <free+0xc2>
    c8ee:	8d 91       	ld	r24, X+
    c8f0:	9c 91       	ld	r25, X
    c8f2:	11 97       	sbiw	r26, 0x01	; 1
    c8f4:	9d 01       	movw	r18, r26
    c8f6:	2e 5f       	subi	r18, 0xFE	; 254
    c8f8:	3f 4f       	sbci	r19, 0xFF	; 255
    c8fa:	82 0f       	add	r24, r18
    c8fc:	93 1f       	adc	r25, r19
    c8fe:	20 91 77 06 	lds	r18, 0x0677	; 0x800677 <__brkval>
    c902:	30 91 78 06 	lds	r19, 0x0678	; 0x800678 <__brkval+0x1>
    c906:	28 17       	cp	r18, r24
    c908:	39 07       	cpc	r19, r25
    c90a:	69 f4       	brne	.+26     	; 0xc926 <free+0x10c>
    c90c:	30 97       	sbiw	r30, 0x00	; 0
    c90e:	29 f4       	brne	.+10     	; 0xc91a <free+0x100>
    c910:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <__flp+0x1>
    c914:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <__flp>
    c918:	02 c0       	rjmp	.+4      	; 0xc91e <free+0x104>
    c91a:	13 82       	std	Z+3, r1	; 0x03
    c91c:	12 82       	std	Z+2, r1	; 0x02
    c91e:	b0 93 78 06 	sts	0x0678, r27	; 0x800678 <__brkval+0x1>
    c922:	a0 93 77 06 	sts	0x0677, r26	; 0x800677 <__brkval>
    c926:	df 91       	pop	r29
    c928:	cf 91       	pop	r28
    c92a:	08 95       	ret

0000c92c <realloc>:
    c92c:	6f 92       	push	r6
    c92e:	7f 92       	push	r7
    c930:	8f 92       	push	r8
    c932:	9f 92       	push	r9
    c934:	af 92       	push	r10
    c936:	bf 92       	push	r11
    c938:	cf 92       	push	r12
    c93a:	df 92       	push	r13
    c93c:	ef 92       	push	r14
    c93e:	ff 92       	push	r15
    c940:	0f 93       	push	r16
    c942:	1f 93       	push	r17
    c944:	cf 93       	push	r28
    c946:	df 93       	push	r29
    c948:	00 97       	sbiw	r24, 0x00	; 0
    c94a:	81 f4       	brne	.+32     	; 0xc96c <realloc+0x40>
    c94c:	cb 01       	movw	r24, r22
    c94e:	df 91       	pop	r29
    c950:	cf 91       	pop	r28
    c952:	1f 91       	pop	r17
    c954:	0f 91       	pop	r16
    c956:	ff 90       	pop	r15
    c958:	ef 90       	pop	r14
    c95a:	df 90       	pop	r13
    c95c:	cf 90       	pop	r12
    c95e:	bf 90       	pop	r11
    c960:	af 90       	pop	r10
    c962:	9f 90       	pop	r9
    c964:	8f 90       	pop	r8
    c966:	7f 90       	pop	r7
    c968:	6f 90       	pop	r6
    c96a:	bf ce       	rjmp	.-642    	; 0xc6ea <malloc>
    c96c:	fc 01       	movw	r30, r24
    c96e:	e6 0f       	add	r30, r22
    c970:	f7 1f       	adc	r31, r23
    c972:	9c 01       	movw	r18, r24
    c974:	22 50       	subi	r18, 0x02	; 2
    c976:	31 09       	sbc	r19, r1
    c978:	e2 17       	cp	r30, r18
    c97a:	f3 07       	cpc	r31, r19
    c97c:	08 f4       	brcc	.+2      	; 0xc980 <realloc+0x54>
    c97e:	a5 c0       	rjmp	.+330    	; 0xcaca <realloc+0x19e>
    c980:	ec 01       	movw	r28, r24
    c982:	d9 01       	movw	r26, r18
    c984:	0d 91       	ld	r16, X+
    c986:	1c 91       	ld	r17, X
    c988:	11 97       	sbiw	r26, 0x01	; 1
    c98a:	06 17       	cp	r16, r22
    c98c:	17 07       	cpc	r17, r23
    c98e:	a8 f0       	brcs	.+42     	; 0xc9ba <realloc+0x8e>
    c990:	05 30       	cpi	r16, 0x05	; 5
    c992:	11 05       	cpc	r17, r1
    c994:	08 f4       	brcc	.+2      	; 0xc998 <realloc+0x6c>
    c996:	97 c0       	rjmp	.+302    	; 0xcac6 <realloc+0x19a>
    c998:	c8 01       	movw	r24, r16
    c99a:	04 97       	sbiw	r24, 0x04	; 4
    c99c:	86 17       	cp	r24, r22
    c99e:	97 07       	cpc	r25, r23
    c9a0:	08 f4       	brcc	.+2      	; 0xc9a4 <realloc+0x78>
    c9a2:	91 c0       	rjmp	.+290    	; 0xcac6 <realloc+0x19a>
    c9a4:	02 50       	subi	r16, 0x02	; 2
    c9a6:	11 09       	sbc	r17, r1
    c9a8:	06 1b       	sub	r16, r22
    c9aa:	17 0b       	sbc	r17, r23
    c9ac:	01 93       	st	Z+, r16
    c9ae:	11 93       	st	Z+, r17
    c9b0:	6d 93       	st	X+, r22
    c9b2:	7c 93       	st	X, r23
    c9b4:	cf 01       	movw	r24, r30
    c9b6:	31 df       	rcall	.-414    	; 0xc81a <free>
    c9b8:	86 c0       	rjmp	.+268    	; 0xcac6 <realloc+0x19a>
    c9ba:	5b 01       	movw	r10, r22
    c9bc:	a0 1a       	sub	r10, r16
    c9be:	b1 0a       	sbc	r11, r17
    c9c0:	4c 01       	movw	r8, r24
    c9c2:	80 0e       	add	r8, r16
    c9c4:	91 1e       	adc	r9, r17
    c9c6:	a0 91 79 06 	lds	r26, 0x0679	; 0x800679 <__flp>
    c9ca:	b0 91 7a 06 	lds	r27, 0x067A	; 0x80067a <__flp+0x1>
    c9ce:	61 2c       	mov	r6, r1
    c9d0:	71 2c       	mov	r7, r1
    c9d2:	e1 2c       	mov	r14, r1
    c9d4:	f1 2c       	mov	r15, r1
    c9d6:	10 97       	sbiw	r26, 0x00	; 0
    c9d8:	09 f4       	brne	.+2      	; 0xc9dc <realloc+0xb0>
    c9da:	46 c0       	rjmp	.+140    	; 0xca68 <realloc+0x13c>
    c9dc:	8d 91       	ld	r24, X+
    c9de:	9c 91       	ld	r25, X
    c9e0:	11 97       	sbiw	r26, 0x01	; 1
    c9e2:	a8 15       	cp	r26, r8
    c9e4:	b9 05       	cpc	r27, r9
    c9e6:	b1 f5       	brne	.+108    	; 0xca54 <realloc+0x128>
    c9e8:	6c 01       	movw	r12, r24
    c9ea:	42 e0       	ldi	r20, 0x02	; 2
    c9ec:	c4 0e       	add	r12, r20
    c9ee:	d1 1c       	adc	r13, r1
    c9f0:	ca 14       	cp	r12, r10
    c9f2:	db 04       	cpc	r13, r11
    c9f4:	78 f1       	brcs	.+94     	; 0xca54 <realloc+0x128>
    c9f6:	4c 01       	movw	r8, r24
    c9f8:	8a 18       	sub	r8, r10
    c9fa:	9b 08       	sbc	r9, r11
    c9fc:	64 01       	movw	r12, r8
    c9fe:	42 e0       	ldi	r20, 0x02	; 2
    ca00:	c4 0e       	add	r12, r20
    ca02:	d1 1c       	adc	r13, r1
    ca04:	12 96       	adiw	r26, 0x02	; 2
    ca06:	bc 90       	ld	r11, X
    ca08:	12 97       	sbiw	r26, 0x02	; 2
    ca0a:	13 96       	adiw	r26, 0x03	; 3
    ca0c:	ac 91       	ld	r26, X
    ca0e:	b5 e0       	ldi	r27, 0x05	; 5
    ca10:	cb 16       	cp	r12, r27
    ca12:	d1 04       	cpc	r13, r1
    ca14:	40 f0       	brcs	.+16     	; 0xca26 <realloc+0xfa>
    ca16:	b2 82       	std	Z+2, r11	; 0x02
    ca18:	a3 83       	std	Z+3, r26	; 0x03
    ca1a:	91 82       	std	Z+1, r9	; 0x01
    ca1c:	80 82       	st	Z, r8
    ca1e:	d9 01       	movw	r26, r18
    ca20:	6d 93       	st	X+, r22
    ca22:	7c 93       	st	X, r23
    ca24:	09 c0       	rjmp	.+18     	; 0xca38 <realloc+0x10c>
    ca26:	0e 5f       	subi	r16, 0xFE	; 254
    ca28:	1f 4f       	sbci	r17, 0xFF	; 255
    ca2a:	80 0f       	add	r24, r16
    ca2c:	91 1f       	adc	r25, r17
    ca2e:	f9 01       	movw	r30, r18
    ca30:	91 83       	std	Z+1, r25	; 0x01
    ca32:	80 83       	st	Z, r24
    ca34:	eb 2d       	mov	r30, r11
    ca36:	fa 2f       	mov	r31, r26
    ca38:	e1 14       	cp	r14, r1
    ca3a:	f1 04       	cpc	r15, r1
    ca3c:	31 f0       	breq	.+12     	; 0xca4a <realloc+0x11e>
    ca3e:	d7 01       	movw	r26, r14
    ca40:	13 96       	adiw	r26, 0x03	; 3
    ca42:	fc 93       	st	X, r31
    ca44:	ee 93       	st	-X, r30
    ca46:	12 97       	sbiw	r26, 0x02	; 2
    ca48:	3e c0       	rjmp	.+124    	; 0xcac6 <realloc+0x19a>
    ca4a:	f0 93 7a 06 	sts	0x067A, r31	; 0x80067a <__flp+0x1>
    ca4e:	e0 93 79 06 	sts	0x0679, r30	; 0x800679 <__flp>
    ca52:	39 c0       	rjmp	.+114    	; 0xcac6 <realloc+0x19a>
    ca54:	68 16       	cp	r6, r24
    ca56:	79 06       	cpc	r7, r25
    ca58:	08 f4       	brcc	.+2      	; 0xca5c <realloc+0x130>
    ca5a:	3c 01       	movw	r6, r24
    ca5c:	7d 01       	movw	r14, r26
    ca5e:	12 96       	adiw	r26, 0x02	; 2
    ca60:	0d 90       	ld	r0, X+
    ca62:	bc 91       	ld	r27, X
    ca64:	a0 2d       	mov	r26, r0
    ca66:	b7 cf       	rjmp	.-146    	; 0xc9d6 <realloc+0xaa>
    ca68:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <__brkval>
    ca6c:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <__brkval+0x1>
    ca70:	88 16       	cp	r8, r24
    ca72:	99 06       	cpc	r9, r25
    ca74:	e1 f4       	brne	.+56     	; 0xcaae <realloc+0x182>
    ca76:	66 16       	cp	r6, r22
    ca78:	77 06       	cpc	r7, r23
    ca7a:	c8 f4       	brcc	.+50     	; 0xcaae <realloc+0x182>
    ca7c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    ca80:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    ca84:	00 97       	sbiw	r24, 0x00	; 0
    ca86:	41 f4       	brne	.+16     	; 0xca98 <realloc+0x16c>
    ca88:	8d b7       	in	r24, 0x3d	; 61
    ca8a:	9e b7       	in	r25, 0x3e	; 62
    ca8c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    ca90:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    ca94:	84 1b       	sub	r24, r20
    ca96:	95 0b       	sbc	r25, r21
    ca98:	e8 17       	cp	r30, r24
    ca9a:	f9 07       	cpc	r31, r25
    ca9c:	b0 f4       	brcc	.+44     	; 0xcaca <realloc+0x19e>
    ca9e:	f0 93 78 06 	sts	0x0678, r31	; 0x800678 <__brkval+0x1>
    caa2:	e0 93 77 06 	sts	0x0677, r30	; 0x800677 <__brkval>
    caa6:	f9 01       	movw	r30, r18
    caa8:	71 83       	std	Z+1, r23	; 0x01
    caaa:	60 83       	st	Z, r22
    caac:	0c c0       	rjmp	.+24     	; 0xcac6 <realloc+0x19a>
    caae:	cb 01       	movw	r24, r22
    cab0:	1c de       	rcall	.-968    	; 0xc6ea <malloc>
    cab2:	7c 01       	movw	r14, r24
    cab4:	00 97       	sbiw	r24, 0x00	; 0
    cab6:	49 f0       	breq	.+18     	; 0xcaca <realloc+0x19e>
    cab8:	a8 01       	movw	r20, r16
    caba:	be 01       	movw	r22, r28
    cabc:	23 d0       	rcall	.+70     	; 0xcb04 <memcpy>
    cabe:	ce 01       	movw	r24, r28
    cac0:	ac de       	rcall	.-680    	; 0xc81a <free>
    cac2:	c7 01       	movw	r24, r14
    cac4:	04 c0       	rjmp	.+8      	; 0xcace <realloc+0x1a2>
    cac6:	ce 01       	movw	r24, r28
    cac8:	02 c0       	rjmp	.+4      	; 0xcace <realloc+0x1a2>
    caca:	80 e0       	ldi	r24, 0x00	; 0
    cacc:	90 e0       	ldi	r25, 0x00	; 0
    cace:	df 91       	pop	r29
    cad0:	cf 91       	pop	r28
    cad2:	1f 91       	pop	r17
    cad4:	0f 91       	pop	r16
    cad6:	ff 90       	pop	r15
    cad8:	ef 90       	pop	r14
    cada:	df 90       	pop	r13
    cadc:	cf 90       	pop	r12
    cade:	bf 90       	pop	r11
    cae0:	af 90       	pop	r10
    cae2:	9f 90       	pop	r9
    cae4:	8f 90       	pop	r8
    cae6:	7f 90       	pop	r7
    cae8:	6f 90       	pop	r6
    caea:	08 95       	ret

0000caec <abort>:
    caec:	81 e0       	ldi	r24, 0x01	; 1
    caee:	90 e0       	ldi	r25, 0x00	; 0
    caf0:	f8 94       	cli
    caf2:	5b c0       	rjmp	.+182    	; 0xcbaa <__do_global_dtors>

0000caf4 <toupper>:
    caf4:	91 11       	cpse	r25, r1
    caf6:	08 95       	ret
    caf8:	81 56       	subi	r24, 0x61	; 97
    cafa:	8a 51       	subi	r24, 0x1A	; 26
    cafc:	08 f4       	brcc	.+2      	; 0xcb00 <toupper+0xc>
    cafe:	80 52       	subi	r24, 0x20	; 32
    cb00:	85 58       	subi	r24, 0x85	; 133
    cb02:	08 95       	ret

0000cb04 <memcpy>:
    cb04:	fb 01       	movw	r30, r22
    cb06:	dc 01       	movw	r26, r24
    cb08:	02 c0       	rjmp	.+4      	; 0xcb0e <memcpy+0xa>
    cb0a:	01 90       	ld	r0, Z+
    cb0c:	0d 92       	st	X+, r0
    cb0e:	41 50       	subi	r20, 0x01	; 1
    cb10:	50 40       	sbci	r21, 0x00	; 0
    cb12:	d8 f7       	brcc	.-10     	; 0xcb0a <memcpy+0x6>
    cb14:	08 95       	ret

0000cb16 <memset>:
    cb16:	dc 01       	movw	r26, r24
    cb18:	01 c0       	rjmp	.+2      	; 0xcb1c <memset+0x6>
    cb1a:	6d 93       	st	X+, r22
    cb1c:	41 50       	subi	r20, 0x01	; 1
    cb1e:	50 40       	sbci	r21, 0x00	; 0
    cb20:	e0 f7       	brcc	.-8      	; 0xcb1a <memset+0x4>
    cb22:	08 95       	ret

0000cb24 <strcmp>:
    cb24:	fb 01       	movw	r30, r22
    cb26:	dc 01       	movw	r26, r24
    cb28:	8d 91       	ld	r24, X+
    cb2a:	01 90       	ld	r0, Z+
    cb2c:	80 19       	sub	r24, r0
    cb2e:	01 10       	cpse	r0, r1
    cb30:	d9 f3       	breq	.-10     	; 0xcb28 <strcmp+0x4>
    cb32:	99 0b       	sbc	r25, r25
    cb34:	08 95       	ret

0000cb36 <strcpy>:
    cb36:	fb 01       	movw	r30, r22
    cb38:	dc 01       	movw	r26, r24
    cb3a:	01 90       	ld	r0, Z+
    cb3c:	0d 92       	st	X+, r0
    cb3e:	00 20       	and	r0, r0
    cb40:	e1 f7       	brne	.-8      	; 0xcb3a <strcpy+0x4>
    cb42:	08 95       	ret

0000cb44 <utoa>:
    cb44:	45 32       	cpi	r20, 0x25	; 37
    cb46:	51 05       	cpc	r21, r1
    cb48:	18 f4       	brcc	.+6      	; 0xcb50 <utoa+0xc>
    cb4a:	42 30       	cpi	r20, 0x02	; 2
    cb4c:	08 f0       	brcs	.+2      	; 0xcb50 <utoa+0xc>
    cb4e:	04 c0       	rjmp	.+8      	; 0xcb58 <__utoa_ncheck>
    cb50:	fb 01       	movw	r30, r22
    cb52:	10 82       	st	Z, r1
    cb54:	cb 01       	movw	r24, r22
    cb56:	08 95       	ret

0000cb58 <__utoa_ncheck>:
    cb58:	bb 27       	eor	r27, r27

0000cb5a <__utoa_common>:
    cb5a:	fb 01       	movw	r30, r22
    cb5c:	55 27       	eor	r21, r21
    cb5e:	aa 27       	eor	r26, r26
    cb60:	88 0f       	add	r24, r24
    cb62:	99 1f       	adc	r25, r25
    cb64:	aa 1f       	adc	r26, r26
    cb66:	a4 17       	cp	r26, r20
    cb68:	10 f0       	brcs	.+4      	; 0xcb6e <__utoa_common+0x14>
    cb6a:	a4 1b       	sub	r26, r20
    cb6c:	83 95       	inc	r24
    cb6e:	50 51       	subi	r21, 0x10	; 16
    cb70:	b9 f7       	brne	.-18     	; 0xcb60 <__utoa_common+0x6>
    cb72:	a0 5d       	subi	r26, 0xD0	; 208
    cb74:	aa 33       	cpi	r26, 0x3A	; 58
    cb76:	08 f0       	brcs	.+2      	; 0xcb7a <__utoa_common+0x20>
    cb78:	a9 5d       	subi	r26, 0xD9	; 217
    cb7a:	a1 93       	st	Z+, r26
    cb7c:	00 97       	sbiw	r24, 0x00	; 0
    cb7e:	79 f7       	brne	.-34     	; 0xcb5e <__utoa_common+0x4>
    cb80:	b1 11       	cpse	r27, r1
    cb82:	b1 93       	st	Z+, r27
    cb84:	11 92       	st	Z+, r1
    cb86:	cb 01       	movw	r24, r22
    cb88:	00 c0       	rjmp	.+0      	; 0xcb8a <strrev>

0000cb8a <strrev>:
    cb8a:	dc 01       	movw	r26, r24
    cb8c:	fc 01       	movw	r30, r24
    cb8e:	67 2f       	mov	r22, r23
    cb90:	71 91       	ld	r23, Z+
    cb92:	77 23       	and	r23, r23
    cb94:	e1 f7       	brne	.-8      	; 0xcb8e <strrev+0x4>
    cb96:	32 97       	sbiw	r30, 0x02	; 2
    cb98:	04 c0       	rjmp	.+8      	; 0xcba2 <strrev+0x18>
    cb9a:	7c 91       	ld	r23, X
    cb9c:	6d 93       	st	X+, r22
    cb9e:	70 83       	st	Z, r23
    cba0:	62 91       	ld	r22, -Z
    cba2:	ae 17       	cp	r26, r30
    cba4:	bf 07       	cpc	r27, r31
    cba6:	c8 f3       	brcs	.-14     	; 0xcb9a <strrev+0x10>
    cba8:	08 95       	ret

0000cbaa <__do_global_dtors>:
    cbaa:	16 e0       	ldi	r17, 0x06	; 6
    cbac:	ca e4       	ldi	r28, 0x4A	; 74
    cbae:	d6 e0       	ldi	r29, 0x06	; 6
    cbb0:	00 e0       	ldi	r16, 0x00	; 0
    cbb2:	05 c0       	rjmp	.+10     	; 0xcbbe <__do_global_dtors+0x14>
    cbb4:	80 2f       	mov	r24, r16
    cbb6:	fe 01       	movw	r30, r28
    cbb8:	77 dd       	rcall	.-1298   	; 0xc6a8 <__tablejump2__>
    cbba:	21 96       	adiw	r28, 0x01	; 1
    cbbc:	01 1d       	adc	r16, r1
    cbbe:	cc 34       	cpi	r28, 0x4C	; 76
    cbc0:	d1 07       	cpc	r29, r17
    cbc2:	80 e0       	ldi	r24, 0x00	; 0
    cbc4:	08 07       	cpc	r16, r24
    cbc6:	b1 f7       	brne	.-20     	; 0xcbb4 <__do_global_dtors+0xa>
    cbc8:	f8 94       	cli

0000cbca <__stop_program>:
    cbca:	ff cf       	rjmp	.-2      	; 0xcbca <__stop_program>
